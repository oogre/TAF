(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var moment = Package['momentjs:moment'].moment;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.6.1                                                                                                 // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery', 'moment' ], factory);                                                                             // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'), require('moment'));                                                      // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery, moment);                                                                                             // 15
	}                                                                                                                     // 16
})(function($, moment) {                                                                                               // 17
                                                                                                                       // 18
;;                                                                                                                     // 19
                                                                                                                       // 20
var FC = $.fullCalendar = {                                                                                            // 21
	version: "2.6.1",                                                                                                     // 22
	internalApiVersion: 3                                                                                                 // 23
};                                                                                                                     // 24
var fcViews = FC.views = {};                                                                                           // 25
                                                                                                                       // 26
                                                                                                                       // 27
$.fn.fullCalendar = function(options) {                                                                                // 28
	var args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 29
	var res = this; // what this function will return (this jQuery object by default)                                     // 30
                                                                                                                       // 31
	this.each(function(i, _element) { // loop each DOM element involved                                                   // 32
		var element = $(_element);                                                                                           // 33
		var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 34
		var singleRes; // the returned value of this single method call                                                      // 35
                                                                                                                       // 36
		// a method call                                                                                                     // 37
		if (typeof options === 'string') {                                                                                   // 38
			if (calendar && $.isFunction(calendar[options])) {                                                                  // 39
				singleRes = calendar[options].apply(calendar, args);                                                               // 40
				if (!i) {                                                                                                          // 41
					res = singleRes; // record the first method call result                                                           // 42
				}                                                                                                                  // 43
				if (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 44
					element.removeData('fullCalendar');                                                                               // 45
				}                                                                                                                  // 46
			}                                                                                                                   // 47
		}                                                                                                                    // 48
		// a new calendar initialization                                                                                     // 49
		else if (!calendar) { // don't initialize twice                                                                      // 50
			calendar = new Calendar(element, options);                                                                          // 51
			element.data('fullCalendar', calendar);                                                                             // 52
			calendar.render();                                                                                                  // 53
		}                                                                                                                    // 54
	});                                                                                                                   // 55
	                                                                                                                      // 56
	return res;                                                                                                           // 57
};                                                                                                                     // 58
                                                                                                                       // 59
                                                                                                                       // 60
var complexOptions = [ // names of options that are objects whose properties should be combined                        // 61
	'header',                                                                                                             // 62
	'buttonText',                                                                                                         // 63
	'buttonIcons',                                                                                                        // 64
	'themeButtonIcons'                                                                                                    // 65
];                                                                                                                     // 66
                                                                                                                       // 67
                                                                                                                       // 68
// Merges an array of option objects into a single object                                                              // 69
function mergeOptions(optionObjs) {                                                                                    // 70
	return mergeProps(optionObjs, complexOptions);                                                                        // 71
}                                                                                                                      // 72
                                                                                                                       // 73
                                                                                                                       // 74
// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 75
// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 76
function massageOverrides(input) {                                                                                     // 77
	var overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 78
	var subObj;                                                                                                           // 79
                                                                                                                       // 80
	// iterate through all option override properties (except `views`)                                                    // 81
	$.each(input, function(name, val) {                                                                                   // 82
		if (name != 'views') {                                                                                               // 83
                                                                                                                       // 84
			// could the value be a legacy View-Option-Hash?                                                                    // 85
			if (                                                                                                                // 86
				$.isPlainObject(val) &&                                                                                            // 87
				!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 88
				$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 89
			) {                                                                                                                 // 90
				subObj = null;                                                                                                     // 91
                                                                                                                       // 92
				// iterate through the properties of this possible View-Option-Hash value                                          // 93
				$.each(val, function(subName, subVal) {                                                                            // 94
                                                                                                                       // 95
					// is the property targeting a view?                                                                              // 96
					if (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 97
						if (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 98
							overrides.views[subName] = {};                                                                                  // 99
						}                                                                                                                // 100
						overrides.views[subName][name] = subVal; // record the value in the `views` object                               // 101
					}                                                                                                                 // 102
					else { // a non-View-Option-Hash property                                                                         // 103
						if (!subObj) {                                                                                                   // 104
							subObj = {};                                                                                                    // 105
						}                                                                                                                // 106
						subObj[subName] = subVal; // accumulate these unrelated values for later                                         // 107
					}                                                                                                                 // 108
				});                                                                                                                // 109
                                                                                                                       // 110
				if (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 111
					overrides[name] = subObj;                                                                                         // 112
				}                                                                                                                  // 113
			}                                                                                                                   // 114
			else {                                                                                                              // 115
				overrides[name] = val; // transfer normal options as-is                                                            // 116
			}                                                                                                                   // 117
		}                                                                                                                    // 118
	});                                                                                                                   // 119
                                                                                                                       // 120
	return overrides;                                                                                                     // 121
}                                                                                                                      // 122
                                                                                                                       // 123
;;                                                                                                                     // 124
                                                                                                                       // 125
// exports                                                                                                             // 126
FC.intersectRanges = intersectRanges;                                                                                  // 127
FC.applyAll = applyAll;                                                                                                // 128
FC.debounce = debounce;                                                                                                // 129
FC.isInt = isInt;                                                                                                      // 130
FC.htmlEscape = htmlEscape;                                                                                            // 131
FC.cssToStr = cssToStr;                                                                                                // 132
FC.proxy = proxy;                                                                                                      // 133
FC.capitaliseFirstLetter = capitaliseFirstLetter;                                                                      // 134
                                                                                                                       // 135
                                                                                                                       // 136
/* FullCalendar-specific DOM Utilities                                                                                 // 137
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 139
                                                                                                                       // 140
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 141
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 142
function compensateScroll(rowEls, scrollbarWidths) {                                                                   // 143
	if (scrollbarWidths.left) {                                                                                           // 144
		rowEls.css({                                                                                                         // 145
			'border-left-width': 1,                                                                                             // 146
			'margin-left': scrollbarWidths.left - 1                                                                             // 147
		});                                                                                                                  // 148
	}                                                                                                                     // 149
	if (scrollbarWidths.right) {                                                                                          // 150
		rowEls.css({                                                                                                         // 151
			'border-right-width': 1,                                                                                            // 152
			'margin-right': scrollbarWidths.right - 1                                                                           // 153
		});                                                                                                                  // 154
	}                                                                                                                     // 155
}                                                                                                                      // 156
                                                                                                                       // 157
                                                                                                                       // 158
// Undoes compensateScroll and restores all borders/margins                                                            // 159
function uncompensateScroll(rowEls) {                                                                                  // 160
	rowEls.css({                                                                                                          // 161
		'margin-left': '',                                                                                                   // 162
		'margin-right': '',                                                                                                  // 163
		'border-left-width': '',                                                                                             // 164
		'border-right-width': ''                                                                                             // 165
	});                                                                                                                   // 166
}                                                                                                                      // 167
                                                                                                                       // 168
                                                                                                                       // 169
// Make the mouse cursor express that an event is not allowed in the current area                                      // 170
function disableCursor() {                                                                                             // 171
	$('body').addClass('fc-not-allowed');                                                                                 // 172
}                                                                                                                      // 173
                                                                                                                       // 174
                                                                                                                       // 175
// Returns the mouse cursor to its original look                                                                       // 176
function enableCursor() {                                                                                              // 177
	$('body').removeClass('fc-not-allowed');                                                                              // 178
}                                                                                                                      // 179
                                                                                                                       // 180
                                                                                                                       // 181
// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 182
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 183
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 184
// reduces the available height.                                                                                       // 185
function distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 186
                                                                                                                       // 187
	// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 188
	// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 189
                                                                                                                       // 190
	var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 191
	var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 192
	var flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 193
	var flexOffsets = []; // amount of vertical space it takes up                                                         // 194
	var flexHeights = []; // actual css height                                                                            // 195
	var usedHeight = 0;                                                                                                   // 196
                                                                                                                       // 197
	undistributeHeight(els); // give all elements their natural height                                                    // 198
                                                                                                                       // 199
	// find elements that are below the recommended height (expandable).                                                  // 200
	// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 201
	els.each(function(i, el) {                                                                                            // 202
		var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 203
		var naturalOffset = $(el).outerHeight(true);                                                                         // 204
                                                                                                                       // 205
		if (naturalOffset < minOffset) {                                                                                     // 206
			flexEls.push(el);                                                                                                   // 207
			flexOffsets.push(naturalOffset);                                                                                    // 208
			flexHeights.push($(el).height());                                                                                   // 209
		}                                                                                                                    // 210
		else {                                                                                                               // 211
			// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 212
			usedHeight += naturalOffset;                                                                                        // 213
		}                                                                                                                    // 214
	});                                                                                                                   // 215
                                                                                                                       // 216
	// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 217
	if (shouldRedistribute) {                                                                                             // 218
		availableHeight -= usedHeight;                                                                                       // 219
		minOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 220
		minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 221
	}                                                                                                                     // 222
                                                                                                                       // 223
	// assign heights to all expandable elements                                                                          // 224
	$(flexEls).each(function(i, el) {                                                                                     // 225
		var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 226
		var naturalOffset = flexOffsets[i];                                                                                  // 227
		var naturalHeight = flexHeights[i];                                                                                  // 228
		var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 229
                                                                                                                       // 230
		if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 231
			$(el).height(newHeight);                                                                                            // 232
		}                                                                                                                    // 233
	});                                                                                                                   // 234
}                                                                                                                      // 235
                                                                                                                       // 236
                                                                                                                       // 237
// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 238
function undistributeHeight(els) {                                                                                     // 239
	els.height('');                                                                                                       // 240
}                                                                                                                      // 241
                                                                                                                       // 242
                                                                                                                       // 243
// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.                                                                                             // 245
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 246
function matchCellWidths(els) {                                                                                        // 247
	var maxInnerWidth = 0;                                                                                                // 248
                                                                                                                       // 249
	els.find('> span').each(function(i, innerEl) {                                                                        // 250
		var innerWidth = $(innerEl).outerWidth();                                                                            // 251
		if (innerWidth > maxInnerWidth) {                                                                                    // 252
			maxInnerWidth = innerWidth;                                                                                         // 253
		}                                                                                                                    // 254
	});                                                                                                                   // 255
                                                                                                                       // 256
	maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 257
                                                                                                                       // 258
	els.width(maxInnerWidth);                                                                                             // 259
                                                                                                                       // 260
	return maxInnerWidth;                                                                                                 // 261
}                                                                                                                      // 262
                                                                                                                       // 263
                                                                                                                       // 264
// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 265
// Returns true if the element is now a scroller, false otherwise.                                                     // 266
// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 267
function setPotentialScroller(containerEl, height) {                                                                   // 268
	containerEl.height(height).addClass('fc-scroller');                                                                   // 269
                                                                                                                       // 270
	// are scrollbars needed?                                                                                             // 271
	if (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 272
		return true;                                                                                                         // 273
	}                                                                                                                     // 274
                                                                                                                       // 275
	unsetScroller(containerEl); // undo                                                                                   // 276
	return false;                                                                                                         // 277
}                                                                                                                      // 278
                                                                                                                       // 279
                                                                                                                       // 280
// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 281
function unsetScroller(containerEl) {                                                                                  // 282
	containerEl.height('').removeClass('fc-scroller');                                                                    // 283
}                                                                                                                      // 284
                                                                                                                       // 285
                                                                                                                       // 286
/* General DOM Utilities                                                                                               // 287
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 289
FC.getOuterRect = getOuterRect;                                                                                        // 290
FC.getClientRect = getClientRect;                                                                                      // 291
FC.getContentRect = getContentRect;                                                                                    // 292
FC.getScrollbarWidths = getScrollbarWidths;                                                                            // 293
                                                                                                                       // 294
                                                                                                                       // 295
// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 296
function getScrollParent(el) {                                                                                         // 297
	var position = el.css('position'),                                                                                    // 298
		scrollParent = el.parents().filter(function() {                                                                      // 299
			var parent = $(this);                                                                                               // 300
			return (/(auto|scroll)/).test(                                                                                      // 301
				parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 302
			);                                                                                                                  // 303
		}).eq(0);                                                                                                            // 304
                                                                                                                       // 305
	return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 306
}                                                                                                                      // 307
                                                                                                                       // 308
                                                                                                                       // 309
// Queries the outer bounding area of a jQuery element.                                                                // 310
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 311
function getOuterRect(el) {                                                                                            // 312
	var offset = el.offset();                                                                                             // 313
                                                                                                                       // 314
	return {                                                                                                              // 315
		left: offset.left,                                                                                                   // 316
		right: offset.left + el.outerWidth(),                                                                                // 317
		top: offset.top,                                                                                                     // 318
		bottom: offset.top + el.outerHeight()                                                                                // 319
	};                                                                                                                    // 320
}                                                                                                                      // 321
                                                                                                                       // 322
                                                                                                                       // 323
// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 324
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 325
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 326
function getClientRect(el) {                                                                                           // 327
	var offset = el.offset();                                                                                             // 328
	var scrollbarWidths = getScrollbarWidths(el);                                                                         // 329
	var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 330
	var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 331
                                                                                                                       // 332
	return {                                                                                                              // 333
		left: left,                                                                                                          // 334
		right: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 335
		top: top,                                                                                                            // 336
		bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 337
	};                                                                                                                    // 338
}                                                                                                                      // 339
                                                                                                                       // 340
                                                                                                                       // 341
// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 342
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 343
function getContentRect(el) {                                                                                          // 344
	var offset = el.offset(); // just outside of border, margin not included                                              // 345
	var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 346
	var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 347
                                                                                                                       // 348
	return {                                                                                                              // 349
		left: left,                                                                                                          // 350
		right: left + el.width(),                                                                                            // 351
		top: top,                                                                                                            // 352
		bottom: top + el.height()                                                                                            // 353
	};                                                                                                                    // 354
}                                                                                                                      // 355
                                                                                                                       // 356
                                                                                                                       // 357
// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 358
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 359
function getScrollbarWidths(el) {                                                                                      // 360
	var leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 361
	var widths = {                                                                                                        // 362
		left: 0,                                                                                                             // 363
		right: 0,                                                                                                            // 364
		top: 0,                                                                                                              // 365
		bottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 366
	};                                                                                                                    // 367
                                                                                                                       // 368
	if (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 369
		widths.left = leftRightWidth;                                                                                        // 370
	}                                                                                                                     // 371
	else {                                                                                                                // 372
		widths.right = leftRightWidth;                                                                                       // 373
	}                                                                                                                     // 374
                                                                                                                       // 375
	return widths;                                                                                                        // 376
}                                                                                                                      // 377
                                                                                                                       // 378
                                                                                                                       // 379
// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 380
                                                                                                                       // 381
var _isLeftRtlScrollbars = null;                                                                                       // 382
                                                                                                                       // 383
function getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 384
	if (_isLeftRtlScrollbars === null) {                                                                                  // 385
		_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 386
	}                                                                                                                     // 387
	return _isLeftRtlScrollbars;                                                                                          // 388
}                                                                                                                      // 389
                                                                                                                       // 390
function computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 391
	var el = $('<div><div/></div>')                                                                                       // 392
		.css({                                                                                                               // 393
			position: 'absolute',                                                                                               // 394
			top: -1000,                                                                                                         // 395
			left: 0,                                                                                                            // 396
			border: 0,                                                                                                          // 397
			padding: 0,                                                                                                         // 398
			overflow: 'scroll',                                                                                                 // 399
			direction: 'rtl'                                                                                                    // 400
		})                                                                                                                   // 401
		.appendTo('body');                                                                                                   // 402
	var innerEl = el.children();                                                                                          // 403
	var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 404
	el.remove();                                                                                                          // 405
	return res;                                                                                                           // 406
}                                                                                                                      // 407
                                                                                                                       // 408
                                                                                                                       // 409
// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 410
// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.           // 411
function getCssFloat(el, prop) {                                                                                       // 412
	return parseFloat(el.css(prop)) || 0;                                                                                 // 413
}                                                                                                                      // 414
                                                                                                                       // 415
                                                                                                                       // 416
// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 417
function isPrimaryMouseButton(ev) {                                                                                    // 418
	return ev.which == 1 && !ev.ctrlKey;                                                                                  // 419
}                                                                                                                      // 420
                                                                                                                       // 421
                                                                                                                       // 422
/* Geometry                                                                                                            // 423
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 425
FC.intersectRects = intersectRects;                                                                                    // 426
                                                                                                                       // 427
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 428
function intersectRects(rect1, rect2) {                                                                                // 429
	var res = {                                                                                                           // 430
		left: Math.max(rect1.left, rect2.left),                                                                              // 431
		right: Math.min(rect1.right, rect2.right),                                                                           // 432
		top: Math.max(rect1.top, rect2.top),                                                                                 // 433
		bottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 434
	};                                                                                                                    // 435
                                                                                                                       // 436
	if (res.left < res.right && res.top < res.bottom) {                                                                   // 437
		return res;                                                                                                          // 438
	}                                                                                                                     // 439
	return false;                                                                                                         // 440
}                                                                                                                      // 441
                                                                                                                       // 442
                                                                                                                       // 443
// Returns a new point that will have been moved to reside within the given rectangle                                  // 444
function constrainPoint(point, rect) {                                                                                 // 445
	return {                                                                                                              // 446
		left: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 447
		top: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 448
	};                                                                                                                    // 449
}                                                                                                                      // 450
                                                                                                                       // 451
                                                                                                                       // 452
// Returns a point that is the center of the given rectangle                                                           // 453
function getRectCenter(rect) {                                                                                         // 454
	return {                                                                                                              // 455
		left: (rect.left + rect.right) / 2,                                                                                  // 456
		top: (rect.top + rect.bottom) / 2                                                                                    // 457
	};                                                                                                                    // 458
}                                                                                                                      // 459
                                                                                                                       // 460
                                                                                                                       // 461
// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 462
function diffPoints(point1, point2) {                                                                                  // 463
	return {                                                                                                              // 464
		left: point1.left - point2.left,                                                                                     // 465
		top: point1.top - point2.top                                                                                         // 466
	};                                                                                                                    // 467
}                                                                                                                      // 468
                                                                                                                       // 469
                                                                                                                       // 470
/* Object Ordering by Field                                                                                            // 471
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 473
FC.parseFieldSpecs = parseFieldSpecs;                                                                                  // 474
FC.compareByFieldSpecs = compareByFieldSpecs;                                                                          // 475
FC.compareByFieldSpec = compareByFieldSpec;                                                                            // 476
FC.flexibleCompare = flexibleCompare;                                                                                  // 477
                                                                                                                       // 478
                                                                                                                       // 479
function parseFieldSpecs(input) {                                                                                      // 480
	var specs = [];                                                                                                       // 481
	var tokens = [];                                                                                                      // 482
	var i, token;                                                                                                         // 483
                                                                                                                       // 484
	if (typeof input === 'string') {                                                                                      // 485
		tokens = input.split(/\s*,\s*/);                                                                                     // 486
	}                                                                                                                     // 487
	else if (typeof input === 'function') {                                                                               // 488
		tokens = [ input ];                                                                                                  // 489
	}                                                                                                                     // 490
	else if ($.isArray(input)) {                                                                                          // 491
		tokens = input;                                                                                                      // 492
	}                                                                                                                     // 493
                                                                                                                       // 494
	for (i = 0; i < tokens.length; i++) {                                                                                 // 495
		token = tokens[i];                                                                                                   // 496
                                                                                                                       // 497
		if (typeof token === 'string') {                                                                                     // 498
			specs.push(                                                                                                         // 499
				token.charAt(0) == '-' ?                                                                                           // 500
					{ field: token.substring(1), order: -1 } :                                                                        // 501
					{ field: token, order: 1 }                                                                                        // 502
			);                                                                                                                  // 503
		}                                                                                                                    // 504
		else if (typeof token === 'function') {                                                                              // 505
			specs.push({ func: token });                                                                                        // 506
		}                                                                                                                    // 507
	}                                                                                                                     // 508
                                                                                                                       // 509
	return specs;                                                                                                         // 510
}                                                                                                                      // 511
                                                                                                                       // 512
                                                                                                                       // 513
function compareByFieldSpecs(obj1, obj2, fieldSpecs) {                                                                 // 514
	var i;                                                                                                                // 515
	var cmp;                                                                                                              // 516
                                                                                                                       // 517
	for (i = 0; i < fieldSpecs.length; i++) {                                                                             // 518
		cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);                                                                 // 519
		if (cmp) {                                                                                                           // 520
			return cmp;                                                                                                         // 521
		}                                                                                                                    // 522
	}                                                                                                                     // 523
                                                                                                                       // 524
	return 0;                                                                                                             // 525
}                                                                                                                      // 526
                                                                                                                       // 527
                                                                                                                       // 528
function compareByFieldSpec(obj1, obj2, fieldSpec) {                                                                   // 529
	if (fieldSpec.func) {                                                                                                 // 530
		return fieldSpec.func(obj1, obj2);                                                                                   // 531
	}                                                                                                                     // 532
	return flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *                                                // 533
		(fieldSpec.order || 1);                                                                                              // 534
}                                                                                                                      // 535
                                                                                                                       // 536
                                                                                                                       // 537
function flexibleCompare(a, b) {                                                                                       // 538
	if (!a && !b) {                                                                                                       // 539
		return 0;                                                                                                            // 540
	}                                                                                                                     // 541
	if (b == null) {                                                                                                      // 542
		return -1;                                                                                                           // 543
	}                                                                                                                     // 544
	if (a == null) {                                                                                                      // 545
		return 1;                                                                                                            // 546
	}                                                                                                                     // 547
	if ($.type(a) === 'string' || $.type(b) === 'string') {                                                               // 548
		return String(a).localeCompare(String(b));                                                                           // 549
	}                                                                                                                     // 550
	return a - b;                                                                                                         // 551
}                                                                                                                      // 552
                                                                                                                       // 553
                                                                                                                       // 554
/* FullCalendar-specific Misc Utilities                                                                                // 555
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 557
                                                                                                                       // 558
// Computes the intersection of the two ranges. Returns undefined if no intersection.                                  // 559
// Expects all dates to be normalized to the same timezone beforehand.                                                 // 560
// TODO: move to date section?                                                                                         // 561
function intersectRanges(subjectRange, constraintRange) {                                                              // 562
	var subjectStart = subjectRange.start;                                                                                // 563
	var subjectEnd = subjectRange.end;                                                                                    // 564
	var constraintStart = constraintRange.start;                                                                          // 565
	var constraintEnd = constraintRange.end;                                                                              // 566
	var segStart, segEnd;                                                                                                 // 567
	var isStart, isEnd;                                                                                                   // 568
                                                                                                                       // 569
	if (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 570
                                                                                                                       // 571
		if (subjectStart >= constraintStart) {                                                                               // 572
			segStart = subjectStart.clone();                                                                                    // 573
			isStart = true;                                                                                                     // 574
		}                                                                                                                    // 575
		else {                                                                                                               // 576
			segStart = constraintStart.clone();                                                                                 // 577
			isStart =  false;                                                                                                   // 578
		}                                                                                                                    // 579
                                                                                                                       // 580
		if (subjectEnd <= constraintEnd) {                                                                                   // 581
			segEnd = subjectEnd.clone();                                                                                        // 582
			isEnd = true;                                                                                                       // 583
		}                                                                                                                    // 584
		else {                                                                                                               // 585
			segEnd = constraintEnd.clone();                                                                                     // 586
			isEnd = false;                                                                                                      // 587
		}                                                                                                                    // 588
                                                                                                                       // 589
		return {                                                                                                             // 590
			start: segStart,                                                                                                    // 591
			end: segEnd,                                                                                                        // 592
			isStart: isStart,                                                                                                   // 593
			isEnd: isEnd                                                                                                        // 594
		};                                                                                                                   // 595
	}                                                                                                                     // 596
}                                                                                                                      // 597
                                                                                                                       // 598
                                                                                                                       // 599
/* Date Utilities                                                                                                      // 600
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 602
FC.computeIntervalUnit = computeIntervalUnit;                                                                          // 603
FC.divideRangeByDuration = divideRangeByDuration;                                                                      // 604
FC.divideDurationByDuration = divideDurationByDuration;                                                                // 605
FC.multiplyDuration = multiplyDuration;                                                                                // 606
FC.durationHasTime = durationHasTime;                                                                                  // 607
                                                                                                                       // 608
var dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 609
var intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 610
                                                                                                                       // 611
                                                                                                                       // 612
// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 613
// Moments will have their timezones normalized.                                                                       // 614
function diffDayTime(a, b) {                                                                                           // 615
	return moment.duration({                                                                                              // 616
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 617
		ms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 618
	});                                                                                                                   // 619
}                                                                                                                      // 620
                                                                                                                       // 621
                                                                                                                       // 622
// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 623
function diffDay(a, b) {                                                                                               // 624
	return moment.duration({                                                                                              // 625
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 626
	});                                                                                                                   // 627
}                                                                                                                      // 628
                                                                                                                       // 629
                                                                                                                       // 630
// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 631
function diffByUnit(a, b, unit) {                                                                                      // 632
	return moment.duration(                                                                                               // 633
		Math.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 634
		unit                                                                                                                 // 635
	);                                                                                                                    // 636
}                                                                                                                      // 637
                                                                                                                       // 638
                                                                                                                       // 639
// Computes the unit name of the largest whole-unit period of time.                                                    // 640
// For example, 48 hours will be "days" whereas 49 hours will be "hours".                                              // 641
// Accepts start/end, a range object, or an original duration object.                                                  // 642
function computeIntervalUnit(start, end) {                                                                             // 643
	var i, unit;                                                                                                          // 644
	var val;                                                                                                              // 645
                                                                                                                       // 646
	for (i = 0; i < intervalUnits.length; i++) {                                                                          // 647
		unit = intervalUnits[i];                                                                                             // 648
		val = computeRangeAs(unit, start, end);                                                                              // 649
                                                                                                                       // 650
		if (val >= 1 && isInt(val)) {                                                                                        // 651
			break;                                                                                                              // 652
		}                                                                                                                    // 653
	}                                                                                                                     // 654
                                                                                                                       // 655
	return unit; // will be "milliseconds" if nothing else matches                                                        // 656
}                                                                                                                      // 657
                                                                                                                       // 658
                                                                                                                       // 659
// Computes the number of units (like "hours") in the given range.                                                     // 660
// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 661
// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 662
// of month-diffing logic (which tends to vary from version to version).                                               // 663
function computeRangeAs(unit, start, end) {                                                                            // 664
                                                                                                                       // 665
	if (end != null) { // given start, end                                                                                // 666
		return end.diff(start, unit, true);                                                                                  // 667
	}                                                                                                                     // 668
	else if (moment.isDuration(start)) { // given duration                                                                // 669
		return start.as(unit);                                                                                               // 670
	}                                                                                                                     // 671
	else { // given { start, end } range object                                                                           // 672
		return start.end.diff(start.start, unit, true);                                                                      // 673
	}                                                                                                                     // 674
}                                                                                                                      // 675
                                                                                                                       // 676
                                                                                                                       // 677
// Intelligently divides a range (specified by a start/end params) by a duration                                       // 678
function divideRangeByDuration(start, end, dur) {                                                                      // 679
	var months;                                                                                                           // 680
                                                                                                                       // 681
	if (durationHasTime(dur)) {                                                                                           // 682
		return (end - start) / dur;                                                                                          // 683
	}                                                                                                                     // 684
	months = dur.asMonths();                                                                                              // 685
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 686
		return end.diff(start, 'months', true) / months;                                                                     // 687
	}                                                                                                                     // 688
	return end.diff(start, 'days', true) / dur.asDays();                                                                  // 689
}                                                                                                                      // 690
                                                                                                                       // 691
                                                                                                                       // 692
// Intelligently divides one duration by another                                                                       // 693
function divideDurationByDuration(dur1, dur2) {                                                                        // 694
	var months1, months2;                                                                                                 // 695
                                                                                                                       // 696
	if (durationHasTime(dur1) || durationHasTime(dur2)) {                                                                 // 697
		return dur1 / dur2;                                                                                                  // 698
	}                                                                                                                     // 699
	months1 = dur1.asMonths();                                                                                            // 700
	months2 = dur2.asMonths();                                                                                            // 701
	if (                                                                                                                  // 702
		Math.abs(months1) >= 1 && isInt(months1) &&                                                                          // 703
		Math.abs(months2) >= 1 && isInt(months2)                                                                             // 704
	) {                                                                                                                   // 705
		return months1 / months2;                                                                                            // 706
	}                                                                                                                     // 707
	return dur1.asDays() / dur2.asDays();                                                                                 // 708
}                                                                                                                      // 709
                                                                                                                       // 710
                                                                                                                       // 711
// Intelligently multiplies a duration by a number                                                                     // 712
function multiplyDuration(dur, n) {                                                                                    // 713
	var months;                                                                                                           // 714
                                                                                                                       // 715
	if (durationHasTime(dur)) {                                                                                           // 716
		return moment.duration(dur * n);                                                                                     // 717
	}                                                                                                                     // 718
	months = dur.asMonths();                                                                                              // 719
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 720
		return moment.duration({ months: months * n });                                                                      // 721
	}                                                                                                                     // 722
	return moment.duration({ days: dur.asDays() * n });                                                                   // 723
}                                                                                                                      // 724
                                                                                                                       // 725
                                                                                                                       // 726
// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 727
function durationHasTime(dur) {                                                                                        // 728
	return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 729
}                                                                                                                      // 730
                                                                                                                       // 731
                                                                                                                       // 732
function isNativeDate(input) {                                                                                         // 733
	return  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 734
}                                                                                                                      // 735
                                                                                                                       // 736
                                                                                                                       // 737
// Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"                        // 738
function isTimeString(str) {                                                                                           // 739
	return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);                                                                 // 740
}                                                                                                                      // 741
                                                                                                                       // 742
                                                                                                                       // 743
/* Logging and Debug                                                                                                   // 744
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 746
FC.log = function() {                                                                                                  // 747
	var console = window.console;                                                                                         // 748
                                                                                                                       // 749
	if (console && console.log) {                                                                                         // 750
		return console.log.apply(console, arguments);                                                                        // 751
	}                                                                                                                     // 752
};                                                                                                                     // 753
                                                                                                                       // 754
FC.warn = function() {                                                                                                 // 755
	var console = window.console;                                                                                         // 756
                                                                                                                       // 757
	if (console && console.warn) {                                                                                        // 758
		return console.warn.apply(console, arguments);                                                                       // 759
	}                                                                                                                     // 760
	else {                                                                                                                // 761
		return FC.log.apply(FC, arguments);                                                                                  // 762
	}                                                                                                                     // 763
};                                                                                                                     // 764
                                                                                                                       // 765
                                                                                                                       // 766
/* General Utilities                                                                                                   // 767
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 769
var hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 770
                                                                                                                       // 771
                                                                                                                       // 772
// Merges an array of objects into a single object.                                                                    // 773
// The second argument allows for an array of property names who's object values will be merged together.              // 774
function mergeProps(propObjs, complexProps) {                                                                          // 775
	var dest = {};                                                                                                        // 776
	var i, name;                                                                                                          // 777
	var complexObjs;                                                                                                      // 778
	var j, val;                                                                                                           // 779
	var props;                                                                                                            // 780
                                                                                                                       // 781
	if (complexProps) {                                                                                                   // 782
		for (i = 0; i < complexProps.length; i++) {                                                                          // 783
			name = complexProps[i];                                                                                             // 784
			complexObjs = [];                                                                                                   // 785
                                                                                                                       // 786
			// collect the trailing object values, stopping when a non-object is discovered                                     // 787
			for (j = propObjs.length - 1; j >= 0; j--) {                                                                        // 788
				val = propObjs[j][name];                                                                                           // 789
                                                                                                                       // 790
				if (typeof val === 'object') {                                                                                     // 791
					complexObjs.unshift(val);                                                                                         // 792
				}                                                                                                                  // 793
				else if (val !== undefined) {                                                                                      // 794
					dest[name] = val; // if there were no objects, this value will be used                                            // 795
					break;                                                                                                            // 796
				}                                                                                                                  // 797
			}                                                                                                                   // 798
                                                                                                                       // 799
			// if the trailing values were objects, use the merged value                                                        // 800
			if (complexObjs.length) {                                                                                           // 801
				dest[name] = mergeProps(complexObjs);                                                                              // 802
			}                                                                                                                   // 803
		}                                                                                                                    // 804
	}                                                                                                                     // 805
                                                                                                                       // 806
	// copy values into the destination, going from last to first                                                         // 807
	for (i = propObjs.length - 1; i >= 0; i--) {                                                                          // 808
		props = propObjs[i];                                                                                                 // 809
                                                                                                                       // 810
		for (name in props) {                                                                                                // 811
			if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign                    // 812
				dest[name] = props[name];                                                                                          // 813
			}                                                                                                                   // 814
		}                                                                                                                    // 815
	}                                                                                                                     // 816
                                                                                                                       // 817
	return dest;                                                                                                          // 818
}                                                                                                                      // 819
                                                                                                                       // 820
                                                                                                                       // 821
// Create an object that has the given prototype. Just like Object.create                                              // 822
function createObject(proto) {                                                                                         // 823
	var f = function() {};                                                                                                // 824
	f.prototype = proto;                                                                                                  // 825
	return new f();                                                                                                       // 826
}                                                                                                                      // 827
                                                                                                                       // 828
                                                                                                                       // 829
function copyOwnProps(src, dest) {                                                                                     // 830
	for (var name in src) {                                                                                               // 831
		if (hasOwnProp(src, name)) {                                                                                         // 832
			dest[name] = src[name];                                                                                             // 833
		}                                                                                                                    // 834
	}                                                                                                                     // 835
}                                                                                                                      // 836
                                                                                                                       // 837
                                                                                                                       // 838
// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 839
// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 840
function copyNativeMethods(src, dest) {                                                                                // 841
	var names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 842
	var i, name;                                                                                                          // 843
                                                                                                                       // 844
	for (i = 0; i < names.length; i++) {                                                                                  // 845
		name = names[i];                                                                                                     // 846
                                                                                                                       // 847
		if (src[name] !== Object.prototype[name]) {                                                                          // 848
			dest[name] = src[name];                                                                                             // 849
		}                                                                                                                    // 850
	}                                                                                                                     // 851
}                                                                                                                      // 852
                                                                                                                       // 853
                                                                                                                       // 854
function hasOwnProp(obj, name) {                                                                                       // 855
	return hasOwnPropMethod.call(obj, name);                                                                              // 856
}                                                                                                                      // 857
                                                                                                                       // 858
                                                                                                                       // 859
// Is the given value a non-object non-function value?                                                                 // 860
function isAtomic(val) {                                                                                               // 861
	return /undefined|null|boolean|number|string/.test($.type(val));                                                      // 862
}                                                                                                                      // 863
                                                                                                                       // 864
                                                                                                                       // 865
function applyAll(functions, thisObj, args) {                                                                          // 866
	if ($.isFunction(functions)) {                                                                                        // 867
		functions = [ functions ];                                                                                           // 868
	}                                                                                                                     // 869
	if (functions) {                                                                                                      // 870
		var i;                                                                                                               // 871
		var ret;                                                                                                             // 872
		for (i=0; i<functions.length; i++) {                                                                                 // 873
			ret = functions[i].apply(thisObj, args) || ret;                                                                     // 874
		}                                                                                                                    // 875
		return ret;                                                                                                          // 876
	}                                                                                                                     // 877
}                                                                                                                      // 878
                                                                                                                       // 879
                                                                                                                       // 880
function firstDefined() {                                                                                              // 881
	for (var i=0; i<arguments.length; i++) {                                                                              // 882
		if (arguments[i] !== undefined) {                                                                                    // 883
			return arguments[i];                                                                                                // 884
		}                                                                                                                    // 885
	}                                                                                                                     // 886
}                                                                                                                      // 887
                                                                                                                       // 888
                                                                                                                       // 889
function htmlEscape(s) {                                                                                               // 890
	return (s + '').replace(/&/g, '&amp;')                                                                                // 891
		.replace(/</g, '&lt;')                                                                                               // 892
		.replace(/>/g, '&gt;')                                                                                               // 893
		.replace(/'/g, '&#039;')                                                                                             // 894
		.replace(/"/g, '&quot;')                                                                                             // 895
		.replace(/\n/g, '<br />');                                                                                           // 896
}                                                                                                                      // 897
                                                                                                                       // 898
                                                                                                                       // 899
function stripHtmlEntities(text) {                                                                                     // 900
	return text.replace(/&.*?;/g, '');                                                                                    // 901
}                                                                                                                      // 902
                                                                                                                       // 903
                                                                                                                       // 904
// Given a hash of CSS properties, returns a string of CSS.                                                            // 905
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 906
function cssToStr(cssProps) {                                                                                          // 907
	var statements = [];                                                                                                  // 908
                                                                                                                       // 909
	$.each(cssProps, function(name, val) {                                                                                // 910
		if (val != null) {                                                                                                   // 911
			statements.push(name + ':' + val);                                                                                  // 912
		}                                                                                                                    // 913
	});                                                                                                                   // 914
                                                                                                                       // 915
	return statements.join(';');                                                                                          // 916
}                                                                                                                      // 917
                                                                                                                       // 918
                                                                                                                       // 919
function capitaliseFirstLetter(str) {                                                                                  // 920
	return str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 921
}                                                                                                                      // 922
                                                                                                                       // 923
                                                                                                                       // 924
function compareNumbers(a, b) { // for .sort()                                                                         // 925
	return a - b;                                                                                                         // 926
}                                                                                                                      // 927
                                                                                                                       // 928
                                                                                                                       // 929
function isInt(n) {                                                                                                    // 930
	return n % 1 === 0;                                                                                                   // 931
}                                                                                                                      // 932
                                                                                                                       // 933
                                                                                                                       // 934
// Returns a method bound to the given object context.                                                                 // 935
// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 936
// different contexts as identical when binding/unbinding events.                                                      // 937
function proxy(obj, methodName) {                                                                                      // 938
	var method = obj[methodName];                                                                                         // 939
                                                                                                                       // 940
	return function() {                                                                                                   // 941
		return method.apply(obj, arguments);                                                                                 // 942
	};                                                                                                                    // 943
}                                                                                                                      // 944
                                                                                                                       // 945
                                                                                                                       // 946
// Returns a function, that, as long as it continues to be invoked, will not                                           // 947
// be triggered. The function will be called after it stops being called for                                           // 948
// N milliseconds.                                                                                                     // 949
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 950
function debounce(func, wait) {                                                                                        // 951
	var timeoutId;                                                                                                        // 952
	var args;                                                                                                             // 953
	var context;                                                                                                          // 954
	var timestamp; // of most recent call                                                                                 // 955
	var later = function() {                                                                                              // 956
		var last = +new Date() - timestamp;                                                                                  // 957
		if (last < wait && last > 0) {                                                                                       // 958
			timeoutId = setTimeout(later, wait - last);                                                                         // 959
		}                                                                                                                    // 960
		else {                                                                                                               // 961
			timeoutId = null;                                                                                                   // 962
			func.apply(context, args);                                                                                          // 963
			if (!timeoutId) {                                                                                                   // 964
				context = args = null;                                                                                             // 965
			}                                                                                                                   // 966
		}                                                                                                                    // 967
	};                                                                                                                    // 968
                                                                                                                       // 969
	return function() {                                                                                                   // 970
		context = this;                                                                                                      // 971
		args = arguments;                                                                                                    // 972
		timestamp = +new Date();                                                                                             // 973
		if (!timeoutId) {                                                                                                    // 974
			timeoutId = setTimeout(later, wait);                                                                                // 975
		}                                                                                                                    // 976
	};                                                                                                                    // 977
}                                                                                                                      // 978
                                                                                                                       // 979
;;                                                                                                                     // 980
                                                                                                                       // 981
var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;                                                                         // 982
var ambigTimeOrZoneRegex =                                                                                             // 983
	/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;                     // 984
var newMomentProto = moment.fn; // where we will attach our new methods                                                // 985
var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 986
var allowValueOptimization;                                                                                            // 987
var setUTCValues; // function defined below                                                                            // 988
var setLocalValues; // function defined below                                                                          // 989
                                                                                                                       // 990
                                                                                                                       // 991
// Creating                                                                                                            // 992
// -------------------------------------------------------------------------------------------------                   // 993
                                                                                                                       // 994
// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 995
// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 996
// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 997
// result in a moment in the local zone.                                                                               // 998
FC.moment = function() {                                                                                               // 999
	return makeMoment(arguments);                                                                                         // 1000
};                                                                                                                     // 1001
                                                                                                                       // 1002
// Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.                                      // 1003
FC.moment.utc = function() {                                                                                           // 1004
	var mom = makeMoment(arguments, true);                                                                                // 1005
                                                                                                                       // 1006
	// Force it into UTC because makeMoment doesn't guarantee it                                                          // 1007
	// (if given a pre-existing moment for example)                                                                       // 1008
	if (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 1009
		mom.utc();                                                                                                           // 1010
	}                                                                                                                     // 1011
                                                                                                                       // 1012
	return mom;                                                                                                           // 1013
};                                                                                                                     // 1014
                                                                                                                       // 1015
// Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 1016
// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 1017
FC.moment.parseZone = function() {                                                                                     // 1018
	return makeMoment(arguments, true, true);                                                                             // 1019
};                                                                                                                     // 1020
                                                                                                                       // 1021
// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 1022
// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 1023
// Anything else needs to be "parsed" (a string or an array), and will be affected by:                                 // 1024
//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 1025
//    parseZone - if there is zone information, should we force the zone of the moment?                                // 1026
function makeMoment(args, parseAsUTC, parseZone) {                                                                     // 1027
	var input = args[0];                                                                                                  // 1028
	var isSingleString = args.length == 1 && typeof input === 'string';                                                   // 1029
	var isAmbigTime;                                                                                                      // 1030
	var isAmbigZone;                                                                                                      // 1031
	var ambigMatch;                                                                                                       // 1032
	var mom;                                                                                                              // 1033
                                                                                                                       // 1034
	if (moment.isMoment(input)) {                                                                                         // 1035
		mom = moment.apply(null, args); // clone it                                                                          // 1036
		transferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 1037
	}                                                                                                                     // 1038
	else if (isNativeDate(input) || input === undefined) {                                                                // 1039
		mom = moment.apply(null, args); // will be local                                                                     // 1040
	}                                                                                                                     // 1041
	else { // "parsing" is required                                                                                       // 1042
		isAmbigTime = false;                                                                                                 // 1043
		isAmbigZone = false;                                                                                                 // 1044
                                                                                                                       // 1045
		if (isSingleString) {                                                                                                // 1046
			if (ambigDateOfMonthRegex.test(input)) {                                                                            // 1047
				// accept strings like '2014-05', but convert to the first of the month                                            // 1048
				input += '-01';                                                                                                    // 1049
				args = [ input ]; // for when we pass it on to moment's constructor                                                // 1050
				isAmbigTime = true;                                                                                                // 1051
				isAmbigZone = true;                                                                                                // 1052
			}                                                                                                                   // 1053
			else if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 1054
				isAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 1055
				isAmbigZone = true;                                                                                                // 1056
			}                                                                                                                   // 1057
		}                                                                                                                    // 1058
		else if ($.isArray(input)) {                                                                                         // 1059
			// arrays have no timezone information, so assume ambiguous zone                                                    // 1060
			isAmbigZone = true;                                                                                                 // 1061
		}                                                                                                                    // 1062
		// otherwise, probably a string with a format                                                                        // 1063
                                                                                                                       // 1064
		if (parseAsUTC || isAmbigTime) {                                                                                     // 1065
			mom = moment.utc.apply(moment, args);                                                                               // 1066
		}                                                                                                                    // 1067
		else {                                                                                                               // 1068
			mom = moment.apply(null, args);                                                                                     // 1069
		}                                                                                                                    // 1070
                                                                                                                       // 1071
		if (isAmbigTime) {                                                                                                   // 1072
			mom._ambigTime = true;                                                                                              // 1073
			mom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 1074
		}                                                                                                                    // 1075
		else if (parseZone) { // let's record the inputted zone somehow                                                      // 1076
			if (isAmbigZone) {                                                                                                  // 1077
				mom._ambigZone = true;                                                                                             // 1078
			}                                                                                                                   // 1079
			else if (isSingleString) {                                                                                          // 1080
				if (mom.utcOffset) {                                                                                               // 1081
					mom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 1082
				}                                                                                                                  // 1083
				else {                                                                                                             // 1084
					mom.zone(input); // for moment-pre-2.9                                                                            // 1085
				}                                                                                                                  // 1086
			}                                                                                                                   // 1087
		}                                                                                                                    // 1088
	}                                                                                                                     // 1089
                                                                                                                       // 1090
	mom._fullCalendar = true; // flag for extended functionality                                                          // 1091
                                                                                                                       // 1092
	return mom;                                                                                                           // 1093
}                                                                                                                      // 1094
                                                                                                                       // 1095
                                                                                                                       // 1096
// A clone method that works with the flags related to our enhanced functionality.                                     // 1097
// In the future, use moment.momentProperties                                                                          // 1098
newMomentProto.clone = function() {                                                                                    // 1099
	var mom = oldMomentProto.clone.apply(this, arguments);                                                                // 1100
                                                                                                                       // 1101
	// these flags weren't transfered with the clone                                                                      // 1102
	transferAmbigs(this, mom);                                                                                            // 1103
	if (this._fullCalendar) {                                                                                             // 1104
		mom._fullCalendar = true;                                                                                            // 1105
	}                                                                                                                     // 1106
                                                                                                                       // 1107
	return mom;                                                                                                           // 1108
};                                                                                                                     // 1109
                                                                                                                       // 1110
                                                                                                                       // 1111
// Week Number                                                                                                         // 1112
// -------------------------------------------------------------------------------------------------                   // 1113
                                                                                                                       // 1114
                                                                                                                       // 1115
// Returns the week number, considering the locale's custom week number calcuation                                     // 1116
// `weeks` is an alias for `week`                                                                                      // 1117
newMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 1118
	var weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 1119
		._fullCalendar_weekCalc;                                                                                             // 1120
                                                                                                                       // 1121
	if (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 1122
		return weekCalc(this);                                                                                               // 1123
	}                                                                                                                     // 1124
	else if (weekCalc === 'ISO') {                                                                                        // 1125
		return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 1126
	}                                                                                                                     // 1127
                                                                                                                       // 1128
	return oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 1129
};                                                                                                                     // 1130
                                                                                                                       // 1131
                                                                                                                       // 1132
// Time-of-day                                                                                                         // 1133
// -------------------------------------------------------------------------------------------------                   // 1134
                                                                                                                       // 1135
// GETTER                                                                                                              // 1136
// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 1137
// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 1138
//                                                                                                                     // 1139
// SETTER                                                                                                              // 1140
// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 1141
// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 1142
newMomentProto.time = function(time) {                                                                                 // 1143
                                                                                                                       // 1144
	// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 1145
	// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 1146
	if (!this._fullCalendar) {                                                                                            // 1147
		return oldMomentProto.time.apply(this, arguments);                                                                   // 1148
	}                                                                                                                     // 1149
                                                                                                                       // 1150
	if (time == null) { // getter                                                                                         // 1151
		return moment.duration({                                                                                             // 1152
			hours: this.hours(),                                                                                                // 1153
			minutes: this.minutes(),                                                                                            // 1154
			seconds: this.seconds(),                                                                                            // 1155
			milliseconds: this.milliseconds()                                                                                   // 1156
		});                                                                                                                  // 1157
	}                                                                                                                     // 1158
	else { // setter                                                                                                      // 1159
                                                                                                                       // 1160
		this._ambigTime = false; // mark that the moment now has a time                                                      // 1161
                                                                                                                       // 1162
		if (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 1163
			time = moment.duration(time);                                                                                       // 1164
		}                                                                                                                    // 1165
                                                                                                                       // 1166
		// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 1167
		// Only for Duration times, not Moment times.                                                                        // 1168
		var dayHours = 0;                                                                                                    // 1169
		if (moment.isDuration(time)) {                                                                                       // 1170
			dayHours = Math.floor(time.asDays()) * 24;                                                                          // 1171
		}                                                                                                                    // 1172
                                                                                                                       // 1173
		// We need to set the individual fields.                                                                             // 1174
		// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 1175
		return this.hours(dayHours + time.hours())                                                                           // 1176
			.minutes(time.minutes())                                                                                            // 1177
			.seconds(time.seconds())                                                                                            // 1178
			.milliseconds(time.milliseconds());                                                                                 // 1179
	}                                                                                                                     // 1180
};                                                                                                                     // 1181
                                                                                                                       // 1182
// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1183
// but preserving its YMD. A moment with a stripped time will display no time                                          // 1184
// nor timezone offset when .format() is called.                                                                       // 1185
newMomentProto.stripTime = function() {                                                                                // 1186
	var a;                                                                                                                // 1187
                                                                                                                       // 1188
	if (!this._ambigTime) {                                                                                               // 1189
                                                                                                                       // 1190
		// get the values before any conversion happens                                                                      // 1191
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1192
                                                                                                                       // 1193
		// TODO: use keepLocalTime in the future                                                                             // 1194
		this.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1195
		setUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1196
                                                                                                                       // 1197
		// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1198
		// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1199
		this._ambigTime = true;                                                                                              // 1200
		this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1201
	}                                                                                                                     // 1202
                                                                                                                       // 1203
	return this; // for chaining                                                                                          // 1204
};                                                                                                                     // 1205
                                                                                                                       // 1206
// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1207
newMomentProto.hasTime = function() {                                                                                  // 1208
	return !this._ambigTime;                                                                                              // 1209
};                                                                                                                     // 1210
                                                                                                                       // 1211
                                                                                                                       // 1212
// Timezone                                                                                                            // 1213
// -------------------------------------------------------------------------------------------------                   // 1214
                                                                                                                       // 1215
// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1216
// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1217
// timezone offset when .format() is called.                                                                           // 1218
// TODO: look into Moment's keepLocalTime functionality                                                                // 1219
newMomentProto.stripZone = function() {                                                                                // 1220
	var a, wasAmbigTime;                                                                                                  // 1221
                                                                                                                       // 1222
	if (!this._ambigZone) {                                                                                               // 1223
                                                                                                                       // 1224
		// get the values before any conversion happens                                                                      // 1225
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1226
		wasAmbigTime = this._ambigTime;                                                                                      // 1227
                                                                                                                       // 1228
		this.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1229
		setUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1230
                                                                                                                       // 1231
		// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1232
		this._ambigTime = wasAmbigTime || false;                                                                             // 1233
                                                                                                                       // 1234
		// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1235
		// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1236
		this._ambigZone = true;                                                                                              // 1237
	}                                                                                                                     // 1238
                                                                                                                       // 1239
	return this; // for chaining                                                                                          // 1240
};                                                                                                                     // 1241
                                                                                                                       // 1242
// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1243
newMomentProto.hasZone = function() {                                                                                  // 1244
	return !this._ambigZone;                                                                                              // 1245
};                                                                                                                     // 1246
                                                                                                                       // 1247
                                                                                                                       // 1248
// this method implicitly marks a zone                                                                                 // 1249
newMomentProto.local = function() {                                                                                    // 1250
	var a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1251
	var wasAmbigZone = this._ambigZone;                                                                                   // 1252
                                                                                                                       // 1253
	oldMomentProto.local.apply(this, arguments);                                                                          // 1254
                                                                                                                       // 1255
	// ensure non-ambiguous                                                                                               // 1256
	// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1257
	this._ambigTime = false;                                                                                              // 1258
	this._ambigZone = false;                                                                                              // 1259
                                                                                                                       // 1260
	if (wasAmbigZone) {                                                                                                   // 1261
		// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1262
		// We want to preserve these, but in local time.                                                                     // 1263
		// TODO: look into Moment's keepLocalTime functionality                                                              // 1264
		setLocalValues(this, a);                                                                                             // 1265
	}                                                                                                                     // 1266
                                                                                                                       // 1267
	return this; // for chaining                                                                                          // 1268
};                                                                                                                     // 1269
                                                                                                                       // 1270
                                                                                                                       // 1271
// implicitly marks a zone                                                                                             // 1272
newMomentProto.utc = function() {                                                                                      // 1273
	oldMomentProto.utc.apply(this, arguments);                                                                            // 1274
                                                                                                                       // 1275
	// ensure non-ambiguous                                                                                               // 1276
	// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1277
	this._ambigTime = false;                                                                                              // 1278
	this._ambigZone = false;                                                                                              // 1279
                                                                                                                       // 1280
	return this;                                                                                                          // 1281
};                                                                                                                     // 1282
                                                                                                                       // 1283
                                                                                                                       // 1284
// methods for arbitrarily manipulating timezone offset.                                                               // 1285
// should clear time/zone ambiguity when called.                                                                       // 1286
$.each([                                                                                                               // 1287
	'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1288
	'utcOffset'                                                                                                           // 1289
], function(i, name) {                                                                                                 // 1290
	if (oldMomentProto[name]) { // original method exists?                                                                // 1291
                                                                                                                       // 1292
		// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1293
		newMomentProto[name] = function(tzo) {                                                                               // 1294
                                                                                                                       // 1295
			if (tzo != null) { // setter                                                                                        // 1296
				// these assignments needs to happen before the original zone method is called.                                    // 1297
				// I forget why, something to do with a browser crash.                                                             // 1298
				this._ambigTime = false;                                                                                           // 1299
				this._ambigZone = false;                                                                                           // 1300
			}                                                                                                                   // 1301
                                                                                                                       // 1302
			return oldMomentProto[name].apply(this, arguments);                                                                 // 1303
		};                                                                                                                   // 1304
	}                                                                                                                     // 1305
});                                                                                                                    // 1306
                                                                                                                       // 1307
                                                                                                                       // 1308
// Formatting                                                                                                          // 1309
// -------------------------------------------------------------------------------------------------                   // 1310
                                                                                                                       // 1311
newMomentProto.format = function() {                                                                                   // 1312
	if (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1313
		return formatDate(this, arguments[0]); // our extended formatting                                                    // 1314
	}                                                                                                                     // 1315
	if (this._ambigTime) {                                                                                                // 1316
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1317
	}                                                                                                                     // 1318
	if (this._ambigZone) {                                                                                                // 1319
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1320
	}                                                                                                                     // 1321
	return oldMomentProto.format.apply(this, arguments);                                                                  // 1322
};                                                                                                                     // 1323
                                                                                                                       // 1324
newMomentProto.toISOString = function() {                                                                              // 1325
	if (this._ambigTime) {                                                                                                // 1326
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1327
	}                                                                                                                     // 1328
	if (this._ambigZone) {                                                                                                // 1329
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1330
	}                                                                                                                     // 1331
	return oldMomentProto.toISOString.apply(this, arguments);                                                             // 1332
};                                                                                                                     // 1333
                                                                                                                       // 1334
                                                                                                                       // 1335
// Querying                                                                                                            // 1336
// -------------------------------------------------------------------------------------------------                   // 1337
                                                                                                                       // 1338
// Is the moment within the specified range? `end` is exclusive.                                                       // 1339
// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1340
newMomentProto.isWithin = function(start, end) {                                                                       // 1341
	var a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1342
	return a[0] >= a[1] && a[0] < a[2];                                                                                   // 1343
};                                                                                                                     // 1344
                                                                                                                       // 1345
// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1346
// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1347
newMomentProto.isSame = function(input, units) {                                                                       // 1348
	var a;                                                                                                                // 1349
                                                                                                                       // 1350
	// only do custom logic if this is an enhanced moment                                                                 // 1351
	if (!this._fullCalendar) {                                                                                            // 1352
		return oldMomentProto.isSame.apply(this, arguments);                                                                 // 1353
	}                                                                                                                     // 1354
                                                                                                                       // 1355
	if (units) {                                                                                                          // 1356
		a = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1357
		return oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1358
	}                                                                                                                     // 1359
	else {                                                                                                                // 1360
		input = FC.moment.parseZone(input); // normalize input                                                               // 1361
		return oldMomentProto.isSame.call(this, input) &&                                                                    // 1362
			Boolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1363
			Boolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1364
	}                                                                                                                     // 1365
};                                                                                                                     // 1366
                                                                                                                       // 1367
// Make these query methods work with ambiguous moments                                                                // 1368
$.each([                                                                                                               // 1369
	'isBefore',                                                                                                           // 1370
	'isAfter'                                                                                                             // 1371
], function(i, methodName) {                                                                                           // 1372
	newMomentProto[methodName] = function(input, units) {                                                                 // 1373
		var a;                                                                                                               // 1374
                                                                                                                       // 1375
		// only do custom logic if this is an enhanced moment                                                                // 1376
		if (!this._fullCalendar) {                                                                                           // 1377
			return oldMomentProto[methodName].apply(this, arguments);                                                           // 1378
		}                                                                                                                    // 1379
                                                                                                                       // 1380
		a = commonlyAmbiguate([ this, input ]);                                                                              // 1381
		return oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1382
	};                                                                                                                    // 1383
});                                                                                                                    // 1384
                                                                                                                       // 1385
                                                                                                                       // 1386
// Misc Internals                                                                                                      // 1387
// -------------------------------------------------------------------------------------------------                   // 1388
                                                                                                                       // 1389
// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1390
// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1391
// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1392
// returns the original moments if no modifications are necessary.                                                     // 1393
function commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1394
	var anyAmbigTime = false;                                                                                             // 1395
	var anyAmbigZone = false;                                                                                             // 1396
	var len = inputs.length;                                                                                              // 1397
	var moms = [];                                                                                                        // 1398
	var i, mom;                                                                                                           // 1399
                                                                                                                       // 1400
	// parse inputs into real moments and query their ambig flags                                                         // 1401
	for (i = 0; i < len; i++) {                                                                                           // 1402
		mom = inputs[i];                                                                                                     // 1403
		if (!moment.isMoment(mom)) {                                                                                         // 1404
			mom = FC.moment.parseZone(mom);                                                                                     // 1405
		}                                                                                                                    // 1406
		anyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1407
		anyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1408
		moms.push(mom);                                                                                                      // 1409
	}                                                                                                                     // 1410
                                                                                                                       // 1411
	// strip each moment down to lowest common ambiguity                                                                  // 1412
	// use clones to avoid modifying the original moments                                                                 // 1413
	for (i = 0; i < len; i++) {                                                                                           // 1414
		mom = moms[i];                                                                                                       // 1415
		if (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1416
			moms[i] = mom.clone().stripTime();                                                                                  // 1417
		}                                                                                                                    // 1418
		else if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1419
			moms[i] = mom.clone().stripZone();                                                                                  // 1420
		}                                                                                                                    // 1421
	}                                                                                                                     // 1422
                                                                                                                       // 1423
	return moms;                                                                                                          // 1424
}                                                                                                                      // 1425
                                                                                                                       // 1426
// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1427
// TODO: look into moment.momentProperties for this.                                                                   // 1428
function transferAmbigs(src, dest) {                                                                                   // 1429
	if (src._ambigTime) {                                                                                                 // 1430
		dest._ambigTime = true;                                                                                              // 1431
	}                                                                                                                     // 1432
	else if (dest._ambigTime) {                                                                                           // 1433
		dest._ambigTime = false;                                                                                             // 1434
	}                                                                                                                     // 1435
                                                                                                                       // 1436
	if (src._ambigZone) {                                                                                                 // 1437
		dest._ambigZone = true;                                                                                              // 1438
	}                                                                                                                     // 1439
	else if (dest._ambigZone) {                                                                                           // 1440
		dest._ambigZone = false;                                                                                             // 1441
	}                                                                                                                     // 1442
}                                                                                                                      // 1443
                                                                                                                       // 1444
                                                                                                                       // 1445
// Sets the year/month/date/etc values of the moment from the given array.                                             // 1446
// Inefficient because it calls each individual setter.                                                                // 1447
function setMomentValues(mom, a) {                                                                                     // 1448
	mom.year(a[0] || 0)                                                                                                   // 1449
		.month(a[1] || 0)                                                                                                    // 1450
		.date(a[2] || 0)                                                                                                     // 1451
		.hours(a[3] || 0)                                                                                                    // 1452
		.minutes(a[4] || 0)                                                                                                  // 1453
		.seconds(a[5] || 0)                                                                                                  // 1454
		.milliseconds(a[6] || 0);                                                                                            // 1455
}                                                                                                                      // 1456
                                                                                                                       // 1457
// Can we set the moment's internal date directly?                                                                     // 1458
allowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1459
                                                                                                                       // 1460
// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1461
// Assumes the given moment is already in UTC mode.                                                                    // 1462
setUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1463
	// simlate what moment's accessors do                                                                                 // 1464
	mom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1465
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1466
} : setMomentValues;                                                                                                   // 1467
                                                                                                                       // 1468
// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1469
// Assumes the given moment is already in local mode.                                                                  // 1470
setLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1471
	// simlate what moment's accessors do                                                                                 // 1472
	mom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1473
		a[0] || 0,                                                                                                           // 1474
		a[1] || 0,                                                                                                           // 1475
		a[2] || 0,                                                                                                           // 1476
		a[3] || 0,                                                                                                           // 1477
		a[4] || 0,                                                                                                           // 1478
		a[5] || 0,                                                                                                           // 1479
		a[6] || 0                                                                                                            // 1480
	));                                                                                                                   // 1481
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1482
} : setMomentValues;                                                                                                   // 1483
                                                                                                                       // 1484
;;                                                                                                                     // 1485
                                                                                                                       // 1486
// Single Date Formatting                                                                                              // 1487
// -------------------------------------------------------------------------------------------------                   // 1488
                                                                                                                       // 1489
                                                                                                                       // 1490
// call this if you want Moment's original format method to be used                                                    // 1491
function oldMomentFormat(mom, formatStr) {                                                                             // 1492
	return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1493
}                                                                                                                      // 1494
                                                                                                                       // 1495
                                                                                                                       // 1496
// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1497
// additional token.                                                                                                   // 1498
function formatDate(date, formatStr) {                                                                                 // 1499
	return formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1500
}                                                                                                                      // 1501
                                                                                                                       // 1502
                                                                                                                       // 1503
function formatDateWithChunks(date, chunks) {                                                                          // 1504
	var s = '';                                                                                                           // 1505
	var i;                                                                                                                // 1506
                                                                                                                       // 1507
	for (i=0; i<chunks.length; i++) {                                                                                     // 1508
		s += formatDateWithChunk(date, chunks[i]);                                                                           // 1509
	}                                                                                                                     // 1510
                                                                                                                       // 1511
	return s;                                                                                                             // 1512
}                                                                                                                      // 1513
                                                                                                                       // 1514
                                                                                                                       // 1515
// addition formatting tokens we want recognized                                                                       // 1516
var tokenOverrides = {                                                                                                 // 1517
	t: function(date) { // "a" or "p"                                                                                     // 1518
		return oldMomentFormat(date, 'a').charAt(0);                                                                         // 1519
	},                                                                                                                    // 1520
	T: function(date) { // "A" or "P"                                                                                     // 1521
		return oldMomentFormat(date, 'A').charAt(0);                                                                         // 1522
	}                                                                                                                     // 1523
};                                                                                                                     // 1524
                                                                                                                       // 1525
                                                                                                                       // 1526
function formatDateWithChunk(date, chunk) {                                                                            // 1527
	var token;                                                                                                            // 1528
	var maybeStr;                                                                                                         // 1529
                                                                                                                       // 1530
	if (typeof chunk === 'string') { // a literal string                                                                  // 1531
		return chunk;                                                                                                        // 1532
	}                                                                                                                     // 1533
	else if ((token = chunk.token)) { // a token, like "YYYY"                                                             // 1534
		if (tokenOverrides[token]) {                                                                                         // 1535
			return tokenOverrides[token](date); // use our custom token                                                         // 1536
		}                                                                                                                    // 1537
		return oldMomentFormat(date, token);                                                                                 // 1538
	}                                                                                                                     // 1539
	else if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1540
		maybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1541
		if (maybeStr.match(/[1-9]/)) {                                                                                       // 1542
			return maybeStr;                                                                                                    // 1543
		}                                                                                                                    // 1544
	}                                                                                                                     // 1545
                                                                                                                       // 1546
	return '';                                                                                                            // 1547
}                                                                                                                      // 1548
                                                                                                                       // 1549
                                                                                                                       // 1550
// Date Range Formatting                                                                                               // 1551
// -------------------------------------------------------------------------------------------------                   // 1552
// TODO: make it work with timezone offset                                                                             // 1553
                                                                                                                       // 1554
// Using a formatting string meant for a single date, generate a range string, like                                    // 1555
// "Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.                                    // 1556
// If the dates are the same as far as the format string is concerned, just return a single                            // 1557
// rendering of one date, without any separator.                                                                       // 1558
function formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1559
	var localeData;                                                                                                       // 1560
                                                                                                                       // 1561
	date1 = FC.moment.parseZone(date1);                                                                                   // 1562
	date2 = FC.moment.parseZone(date2);                                                                                   // 1563
                                                                                                                       // 1564
	localeData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1565
                                                                                                                       // 1566
	// Expand localized format strings, like "LL" -> "MMMM D YYYY"                                                        // 1567
	formatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1568
	// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1569
	// or non-zero areas in Moment's localized format strings.                                                            // 1570
                                                                                                                       // 1571
	separator = separator || ' - ';                                                                                       // 1572
                                                                                                                       // 1573
	return formatRangeWithChunks(                                                                                         // 1574
		date1,                                                                                                               // 1575
		date2,                                                                                                               // 1576
		getFormatStringChunks(formatStr),                                                                                    // 1577
		separator,                                                                                                           // 1578
		isRTL                                                                                                                // 1579
	);                                                                                                                    // 1580
}                                                                                                                      // 1581
FC.formatRange = formatRange; // expose                                                                                // 1582
                                                                                                                       // 1583
                                                                                                                       // 1584
function formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1585
	var unzonedDate1 = date1.clone().stripZone(); // for formatSimilarChunk                                               // 1586
	var unzonedDate2 = date2.clone().stripZone(); // "                                                                    // 1587
	var chunkStr; // the rendering of the chunk                                                                           // 1588
	var leftI;                                                                                                            // 1589
	var leftStr = '';                                                                                                     // 1590
	var rightI;                                                                                                           // 1591
	var rightStr = '';                                                                                                    // 1592
	var middleI;                                                                                                          // 1593
	var middleStr1 = '';                                                                                                  // 1594
	var middleStr2 = '';                                                                                                  // 1595
	var middleStr = '';                                                                                                   // 1596
                                                                                                                       // 1597
	// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1598
	// that is not the same between dates.                                                                                // 1599
	for (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1600
		chunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunks[leftI]);                              // 1601
		if (chunkStr === false) {                                                                                            // 1602
			break;                                                                                                              // 1603
		}                                                                                                                    // 1604
		leftStr += chunkStr;                                                                                                 // 1605
	}                                                                                                                     // 1606
                                                                                                                       // 1607
	// Similarly, start at the rightmost side of the formatting string and move left                                      // 1608
	for (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1609
		chunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2,  chunks[rightI]);                            // 1610
		if (chunkStr === false) {                                                                                            // 1611
			break;                                                                                                              // 1612
		}                                                                                                                    // 1613
		rightStr = chunkStr + rightStr;                                                                                      // 1614
	}                                                                                                                     // 1615
                                                                                                                       // 1616
	// The area in the middle is different for both of the dates.                                                         // 1617
	// Collect them distinctly so we can jam them together later.                                                         // 1618
	for (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1619
		middleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1620
		middleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1621
	}                                                                                                                     // 1622
                                                                                                                       // 1623
	if (middleStr1 || middleStr2) {                                                                                       // 1624
		if (isRTL) {                                                                                                         // 1625
			middleStr = middleStr2 + separator + middleStr1;                                                                    // 1626
		}                                                                                                                    // 1627
		else {                                                                                                               // 1628
			middleStr = middleStr1 + separator + middleStr2;                                                                    // 1629
		}                                                                                                                    // 1630
	}                                                                                                                     // 1631
                                                                                                                       // 1632
	return leftStr + middleStr + rightStr;                                                                                // 1633
}                                                                                                                      // 1634
                                                                                                                       // 1635
                                                                                                                       // 1636
var similarUnitMap = {                                                                                                 // 1637
	Y: 'year',                                                                                                            // 1638
	M: 'month',                                                                                                           // 1639
	D: 'day', // day of month                                                                                             // 1640
	d: 'day', // day of week                                                                                              // 1641
	// prevents a separator between anything time-related...                                                              // 1642
	A: 'second', // AM/PM                                                                                                 // 1643
	a: 'second', // am/pm                                                                                                 // 1644
	T: 'second', // A/P                                                                                                   // 1645
	t: 'second', // a/p                                                                                                   // 1646
	H: 'second', // hour (24)                                                                                             // 1647
	h: 'second', // hour (12)                                                                                             // 1648
	m: 'second', // minute                                                                                                // 1649
	s: 'second' // second                                                                                                 // 1650
};                                                                                                                     // 1651
// TODO: week maybe?                                                                                                   // 1652
                                                                                                                       // 1653
                                                                                                                       // 1654
// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1655
// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1656
function formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunk) {                                         // 1657
	var token;                                                                                                            // 1658
	var unit;                                                                                                             // 1659
                                                                                                                       // 1660
	if (typeof chunk === 'string') { // a literal string                                                                  // 1661
		return chunk;                                                                                                        // 1662
	}                                                                                                                     // 1663
	else if ((token = chunk.token)) {                                                                                     // 1664
		unit = similarUnitMap[token.charAt(0)];                                                                              // 1665
                                                                                                                       // 1666
		// are the dates the same for this unit of measurement?                                                              // 1667
		// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)                           // 1668
		if (unit && unzonedDate1.isSame(unzonedDate2, unit)) {                                                               // 1669
			return oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1670
			// BTW, don't support custom tokens                                                                                 // 1671
		}                                                                                                                    // 1672
	}                                                                                                                     // 1673
                                                                                                                       // 1674
	return false; // the chunk is NOT the same for the two dates                                                          // 1675
	// BTW, don't support splitting on non-zero areas                                                                     // 1676
}                                                                                                                      // 1677
                                                                                                                       // 1678
                                                                                                                       // 1679
// Chunking Utils                                                                                                      // 1680
// -------------------------------------------------------------------------------------------------                   // 1681
                                                                                                                       // 1682
                                                                                                                       // 1683
var formatStringChunkCache = {};                                                                                       // 1684
                                                                                                                       // 1685
                                                                                                                       // 1686
function getFormatStringChunks(formatStr) {                                                                            // 1687
	if (formatStr in formatStringChunkCache) {                                                                            // 1688
		return formatStringChunkCache[formatStr];                                                                            // 1689
	}                                                                                                                     // 1690
	return (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1691
}                                                                                                                      // 1692
                                                                                                                       // 1693
                                                                                                                       // 1694
// Break the formatting string into an array of chunks                                                                 // 1695
function chunkFormatString(formatStr) {                                                                                // 1696
	var chunks = [];                                                                                                      // 1697
	var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; // TODO: more descrimination              // 1698
	var match;                                                                                                            // 1699
                                                                                                                       // 1700
	while ((match = chunker.exec(formatStr))) {                                                                           // 1701
		if (match[1]) { // a literal string inside [ ... ]                                                                   // 1702
			chunks.push(match[1]);                                                                                              // 1703
		}                                                                                                                    // 1704
		else if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1705
			chunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1706
		}                                                                                                                    // 1707
		else if (match[3]) { // a formatting token                                                                           // 1708
			chunks.push({ token: match[3] });                                                                                   // 1709
		}                                                                                                                    // 1710
		else if (match[5]) { // an unenclosed literal string                                                                 // 1711
			chunks.push(match[5]);                                                                                              // 1712
		}                                                                                                                    // 1713
	}                                                                                                                     // 1714
                                                                                                                       // 1715
	return chunks;                                                                                                        // 1716
}                                                                                                                      // 1717
                                                                                                                       // 1718
;;                                                                                                                     // 1719
                                                                                                                       // 1720
FC.Class = Class; // export                                                                                            // 1721
                                                                                                                       // 1722
// Class that all other classes will inherit from                                                                      // 1723
function Class() { }                                                                                                   // 1724
                                                                                                                       // 1725
                                                                                                                       // 1726
// Called on a class to create a subclass.                                                                             // 1727
// Last argument contains instance methods. Any argument before the last are considered mixins.                        // 1728
Class.extend = function() {                                                                                            // 1729
	var len = arguments.length;                                                                                           // 1730
	var i;                                                                                                                // 1731
	var members;                                                                                                          // 1732
                                                                                                                       // 1733
	for (i = 0; i < len; i++) {                                                                                           // 1734
		members = arguments[i];                                                                                              // 1735
		if (i < len - 1) { // not the last argument?                                                                         // 1736
			mixIntoClass(this, members);                                                                                        // 1737
		}                                                                                                                    // 1738
	}                                                                                                                     // 1739
                                                                                                                       // 1740
	return extendClass(this, members || {}); // members will be undefined if no arguments                                 // 1741
};                                                                                                                     // 1742
                                                                                                                       // 1743
                                                                                                                       // 1744
// Adds new member variables/methods to the class's prototype.                                                         // 1745
// Can be called with another class, or a plain object hash containing new members.                                    // 1746
Class.mixin = function(members) {                                                                                      // 1747
	mixIntoClass(this, members);                                                                                          // 1748
};                                                                                                                     // 1749
                                                                                                                       // 1750
                                                                                                                       // 1751
function extendClass(superClass, members) {                                                                            // 1752
	var subClass;                                                                                                         // 1753
                                                                                                                       // 1754
	// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1755
	if (hasOwnProp(members, 'constructor')) {                                                                             // 1756
		subClass = members.constructor;                                                                                      // 1757
	}                                                                                                                     // 1758
	if (typeof subClass !== 'function') {                                                                                 // 1759
		subClass = members.constructor = function() {                                                                        // 1760
			superClass.apply(this, arguments);                                                                                  // 1761
		};                                                                                                                   // 1762
	}                                                                                                                     // 1763
                                                                                                                       // 1764
	// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1765
	subClass.prototype = createObject(superClass.prototype);                                                              // 1766
                                                                                                                       // 1767
	// copy each member variable/method onto the the subclass's prototype                                                 // 1768
	copyOwnProps(members, subClass.prototype);                                                                            // 1769
	copyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1770
                                                                                                                       // 1771
	// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1772
	copyOwnProps(superClass, subClass);                                                                                   // 1773
                                                                                                                       // 1774
	return subClass;                                                                                                      // 1775
}                                                                                                                      // 1776
                                                                                                                       // 1777
                                                                                                                       // 1778
function mixIntoClass(theClass, members) {                                                                             // 1779
	copyOwnProps(members.prototype || members, theClass.prototype); // TODO: copyNativeMethods?                           // 1780
}                                                                                                                      // 1781
;;                                                                                                                     // 1782
                                                                                                                       // 1783
var Emitter = FC.Emitter = Class.extend({                                                                              // 1784
                                                                                                                       // 1785
	callbackHash: null,                                                                                                   // 1786
                                                                                                                       // 1787
                                                                                                                       // 1788
	on: function(name, callback) {                                                                                        // 1789
		this.getCallbacks(name).add(callback);                                                                               // 1790
		return this; // for chaining                                                                                         // 1791
	},                                                                                                                    // 1792
                                                                                                                       // 1793
                                                                                                                       // 1794
	off: function(name, callback) {                                                                                       // 1795
		this.getCallbacks(name).remove(callback);                                                                            // 1796
		return this; // for chaining                                                                                         // 1797
	},                                                                                                                    // 1798
                                                                                                                       // 1799
                                                                                                                       // 1800
	trigger: function(name) { // args...                                                                                  // 1801
		var args = Array.prototype.slice.call(arguments, 1);                                                                 // 1802
                                                                                                                       // 1803
		this.triggerWith(name, this, args);                                                                                  // 1804
                                                                                                                       // 1805
		return this; // for chaining                                                                                         // 1806
	},                                                                                                                    // 1807
                                                                                                                       // 1808
                                                                                                                       // 1809
	triggerWith: function(name, context, args) {                                                                          // 1810
		var callbacks = this.getCallbacks(name);                                                                             // 1811
                                                                                                                       // 1812
		callbacks.fireWith(context, args);                                                                                   // 1813
                                                                                                                       // 1814
		return this; // for chaining                                                                                         // 1815
	},                                                                                                                    // 1816
                                                                                                                       // 1817
                                                                                                                       // 1818
	getCallbacks: function(name) {                                                                                        // 1819
		var callbacks;                                                                                                       // 1820
                                                                                                                       // 1821
		if (!this.callbackHash) {                                                                                            // 1822
			this.callbackHash = {};                                                                                             // 1823
		}                                                                                                                    // 1824
                                                                                                                       // 1825
		callbacks = this.callbackHash[name];                                                                                 // 1826
		if (!callbacks) {                                                                                                    // 1827
			callbacks = this.callbackHash[name] = $.Callbacks();                                                                // 1828
		}                                                                                                                    // 1829
                                                                                                                       // 1830
		return callbacks;                                                                                                    // 1831
	}                                                                                                                     // 1832
                                                                                                                       // 1833
});                                                                                                                    // 1834
;;                                                                                                                     // 1835
                                                                                                                       // 1836
/* A rectangular panel that is absolutely positioned over other content                                                // 1837
------------------------------------------------------------------------------------------------------------------------
Options:                                                                                                               // 1839
	- className (string)                                                                                                  // 1840
	- content (HTML string or jQuery element set)                                                                         // 1841
	- parentEl                                                                                                            // 1842
	- top                                                                                                                 // 1843
	- left                                                                                                                // 1844
	- right (the x coord of where the right edge should be. not a "CSS" right)                                            // 1845
	- autoHide (boolean)                                                                                                  // 1846
	- show (callback)                                                                                                     // 1847
	- hide (callback)                                                                                                     // 1848
*/                                                                                                                     // 1849
                                                                                                                       // 1850
var Popover = Class.extend({                                                                                           // 1851
                                                                                                                       // 1852
	isHidden: true,                                                                                                       // 1853
	options: null,                                                                                                        // 1854
	el: null, // the container element for the popover. generated by this object                                          // 1855
	documentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1856
	margin: 10, // the space required between the popover and the edges of the scroll container                           // 1857
                                                                                                                       // 1858
                                                                                                                       // 1859
	constructor: function(options) {                                                                                      // 1860
		this.options = options || {};                                                                                        // 1861
	},                                                                                                                    // 1862
                                                                                                                       // 1863
                                                                                                                       // 1864
	// Shows the popover on the specified position. Renders it if not already                                             // 1865
	show: function() {                                                                                                    // 1866
		if (this.isHidden) {                                                                                                 // 1867
			if (!this.el) {                                                                                                     // 1868
				this.render();                                                                                                     // 1869
			}                                                                                                                   // 1870
			this.el.show();                                                                                                     // 1871
			this.position();                                                                                                    // 1872
			this.isHidden = false;                                                                                              // 1873
			this.trigger('show');                                                                                               // 1874
		}                                                                                                                    // 1875
	},                                                                                                                    // 1876
                                                                                                                       // 1877
                                                                                                                       // 1878
	// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1879
	hide: function() {                                                                                                    // 1880
		if (!this.isHidden) {                                                                                                // 1881
			this.el.hide();                                                                                                     // 1882
			this.isHidden = true;                                                                                               // 1883
			this.trigger('hide');                                                                                               // 1884
		}                                                                                                                    // 1885
	},                                                                                                                    // 1886
                                                                                                                       // 1887
                                                                                                                       // 1888
	// Creates `this.el` and renders content inside of it                                                                 // 1889
	render: function() {                                                                                                  // 1890
		var _this = this;                                                                                                    // 1891
		var options = this.options;                                                                                          // 1892
                                                                                                                       // 1893
		this.el = $('<div class="fc-popover"/>')                                                                             // 1894
			.addClass(options.className || '')                                                                                  // 1895
			.css({                                                                                                              // 1896
				// position initially to the top left to avoid creating scrollbars                                                 // 1897
				top: 0,                                                                                                            // 1898
				left: 0                                                                                                            // 1899
			})                                                                                                                  // 1900
			.append(options.content)                                                                                            // 1901
			.appendTo(options.parentEl);                                                                                        // 1902
                                                                                                                       // 1903
		// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1904
		this.el.on('click', '.fc-close', function() {                                                                        // 1905
			_this.hide();                                                                                                       // 1906
		});                                                                                                                  // 1907
                                                                                                                       // 1908
		if (options.autoHide) {                                                                                              // 1909
			$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1910
		}                                                                                                                    // 1911
	},                                                                                                                    // 1912
                                                                                                                       // 1913
                                                                                                                       // 1914
	// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1915
	documentMousedown: function(ev) {                                                                                     // 1916
		// only hide the popover if the click happened outside the popover                                                   // 1917
		if (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1918
			this.hide();                                                                                                        // 1919
		}                                                                                                                    // 1920
	},                                                                                                                    // 1921
                                                                                                                       // 1922
                                                                                                                       // 1923
	// Hides and unregisters any handlers                                                                                 // 1924
	removeElement: function() {                                                                                           // 1925
		this.hide();                                                                                                         // 1926
                                                                                                                       // 1927
		if (this.el) {                                                                                                       // 1928
			this.el.remove();                                                                                                   // 1929
			this.el = null;                                                                                                     // 1930
		}                                                                                                                    // 1931
                                                                                                                       // 1932
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1933
	},                                                                                                                    // 1934
                                                                                                                       // 1935
                                                                                                                       // 1936
	// Positions the popover optimally, using the top/left/right options                                                  // 1937
	position: function() {                                                                                                // 1938
		var options = this.options;                                                                                          // 1939
		var origin = this.el.offsetParent().offset();                                                                        // 1940
		var width = this.el.outerWidth();                                                                                    // 1941
		var height = this.el.outerHeight();                                                                                  // 1942
		var windowEl = $(window);                                                                                            // 1943
		var viewportEl = getScrollParent(this.el);                                                                           // 1944
		var viewportTop;                                                                                                     // 1945
		var viewportLeft;                                                                                                    // 1946
		var viewportOffset;                                                                                                  // 1947
		var top; // the "position" (not "offset") values for the popover                                                     // 1948
		var left; //                                                                                                         // 1949
                                                                                                                       // 1950
		// compute top and left                                                                                              // 1951
		top = options.top || 0;                                                                                              // 1952
		if (options.left !== undefined) {                                                                                    // 1953
			left = options.left;                                                                                                // 1954
		}                                                                                                                    // 1955
		else if (options.right !== undefined) {                                                                              // 1956
			left = options.right - width; // derive the left value from the right value                                         // 1957
		}                                                                                                                    // 1958
		else {                                                                                                               // 1959
			left = 0;                                                                                                           // 1960
		}                                                                                                                    // 1961
                                                                                                                       // 1962
		if (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1963
			viewportEl = windowEl;                                                                                              // 1964
			viewportTop = 0; // the window is always at the top left                                                            // 1965
			viewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1966
		}                                                                                                                    // 1967
		else {                                                                                                               // 1968
			viewportOffset = viewportEl.offset();                                                                               // 1969
			viewportTop = viewportOffset.top;                                                                                   // 1970
			viewportLeft = viewportOffset.left;                                                                                 // 1971
		}                                                                                                                    // 1972
                                                                                                                       // 1973
		// if the window is scrolled, it causes the visible area to be further down                                          // 1974
		viewportTop += windowEl.scrollTop();                                                                                 // 1975
		viewportLeft += windowEl.scrollLeft();                                                                               // 1976
                                                                                                                       // 1977
		// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1978
		if (options.viewportConstrain !== false) {                                                                           // 1979
			top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1980
			top = Math.max(top, viewportTop + this.margin);                                                                     // 1981
			left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1982
			left = Math.max(left, viewportLeft + this.margin);                                                                  // 1983
		}                                                                                                                    // 1984
                                                                                                                       // 1985
		this.el.css({                                                                                                        // 1986
			top: top - origin.top,                                                                                              // 1987
			left: left - origin.left                                                                                            // 1988
		});                                                                                                                  // 1989
	},                                                                                                                    // 1990
                                                                                                                       // 1991
                                                                                                                       // 1992
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1993
	// Arguments beyond the first `name` are forwarded on.                                                                // 1994
	// TODO: better code reuse for this. Repeat code                                                                      // 1995
	trigger: function(name) {                                                                                             // 1996
		if (this.options[name]) {                                                                                            // 1997
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1998
		}                                                                                                                    // 1999
	}                                                                                                                     // 2000
                                                                                                                       // 2001
});                                                                                                                    // 2002
                                                                                                                       // 2003
;;                                                                                                                     // 2004
                                                                                                                       // 2005
/*                                                                                                                     // 2006
A cache for the left/right/top/bottom/width/height values for one or more elements.                                    // 2007
Works with both offset (from topleft document) and position (from offsetParent).                                       // 2008
                                                                                                                       // 2009
options:                                                                                                               // 2010
- els                                                                                                                  // 2011
- isHorizontal                                                                                                         // 2012
- isVertical                                                                                                           // 2013
*/                                                                                                                     // 2014
var CoordCache = FC.CoordCache = Class.extend({                                                                        // 2015
                                                                                                                       // 2016
	els: null, // jQuery set (assumed to be siblings)                                                                     // 2017
	forcedOffsetParentEl: null, // options can override the natural offsetParent                                          // 2018
	origin: null, // {left,top} position of offsetParent of els                                                           // 2019
	boundingRect: null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null                        // 2020
	isHorizontal: false, // whether to query for left/right/width                                                         // 2021
	isVertical: false, // whether to query for top/bottom/height                                                          // 2022
                                                                                                                       // 2023
	// arrays of coordinates (offsets from topleft of document)                                                           // 2024
	lefts: null,                                                                                                          // 2025
	rights: null,                                                                                                         // 2026
	tops: null,                                                                                                           // 2027
	bottoms: null,                                                                                                        // 2028
                                                                                                                       // 2029
                                                                                                                       // 2030
	constructor: function(options) {                                                                                      // 2031
		this.els = $(options.els);                                                                                           // 2032
		this.isHorizontal = options.isHorizontal;                                                                            // 2033
		this.isVertical = options.isVertical;                                                                                // 2034
		this.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;                                   // 2035
	},                                                                                                                    // 2036
                                                                                                                       // 2037
                                                                                                                       // 2038
	// Queries the els for coordinates and stores them.                                                                   // 2039
	// Call this method before using and of the get* methods below.                                                       // 2040
	build: function() {                                                                                                   // 2041
		var offsetParentEl = this.forcedOffsetParentEl || this.els.eq(0).offsetParent();                                     // 2042
                                                                                                                       // 2043
		this.origin = offsetParentEl.offset();                                                                               // 2044
		this.boundingRect = this.queryBoundingRect();                                                                        // 2045
                                                                                                                       // 2046
		if (this.isHorizontal) {                                                                                             // 2047
			this.buildElHorizontals();                                                                                          // 2048
		}                                                                                                                    // 2049
		if (this.isVertical) {                                                                                               // 2050
			this.buildElVerticals();                                                                                            // 2051
		}                                                                                                                    // 2052
	},                                                                                                                    // 2053
                                                                                                                       // 2054
                                                                                                                       // 2055
	// Destroys all internal data about coordinates, freeing memory                                                       // 2056
	clear: function() {                                                                                                   // 2057
		this.origin = null;                                                                                                  // 2058
		this.boundingRect = null;                                                                                            // 2059
		this.lefts = null;                                                                                                   // 2060
		this.rights = null;                                                                                                  // 2061
		this.tops = null;                                                                                                    // 2062
		this.bottoms = null;                                                                                                 // 2063
	},                                                                                                                    // 2064
                                                                                                                       // 2065
                                                                                                                       // 2066
	// When called, if coord caches aren't built, builds them                                                             // 2067
	ensureBuilt: function() {                                                                                             // 2068
		if (!this.origin) {                                                                                                  // 2069
			this.build();                                                                                                       // 2070
		}                                                                                                                    // 2071
	},                                                                                                                    // 2072
                                                                                                                       // 2073
                                                                                                                       // 2074
	// Compute and return what the elements' bounding rectangle is, from the user's perspective.                          // 2075
	// Right now, only returns a rectangle if constrained by an overflow:scroll element.                                  // 2076
	queryBoundingRect: function() {                                                                                       // 2077
		var scrollParentEl = getScrollParent(this.els.eq(0));                                                                // 2078
                                                                                                                       // 2079
		if (!scrollParentEl.is(document)) {                                                                                  // 2080
			return getClientRect(scrollParentEl);                                                                               // 2081
		}                                                                                                                    // 2082
	},                                                                                                                    // 2083
                                                                                                                       // 2084
                                                                                                                       // 2085
	// Populates the left/right internal coordinate arrays                                                                // 2086
	buildElHorizontals: function() {                                                                                      // 2087
		var lefts = [];                                                                                                      // 2088
		var rights = [];                                                                                                     // 2089
                                                                                                                       // 2090
		this.els.each(function(i, node) {                                                                                    // 2091
			var el = $(node);                                                                                                   // 2092
			var left = el.offset().left;                                                                                        // 2093
			var width = el.outerWidth();                                                                                        // 2094
                                                                                                                       // 2095
			lefts.push(left);                                                                                                   // 2096
			rights.push(left + width);                                                                                          // 2097
		});                                                                                                                  // 2098
                                                                                                                       // 2099
		this.lefts = lefts;                                                                                                  // 2100
		this.rights = rights;                                                                                                // 2101
	},                                                                                                                    // 2102
                                                                                                                       // 2103
                                                                                                                       // 2104
	// Populates the top/bottom internal coordinate arrays                                                                // 2105
	buildElVerticals: function() {                                                                                        // 2106
		var tops = [];                                                                                                       // 2107
		var bottoms = [];                                                                                                    // 2108
                                                                                                                       // 2109
		this.els.each(function(i, node) {                                                                                    // 2110
			var el = $(node);                                                                                                   // 2111
			var top = el.offset().top;                                                                                          // 2112
			var height = el.outerHeight();                                                                                      // 2113
                                                                                                                       // 2114
			tops.push(top);                                                                                                     // 2115
			bottoms.push(top + height);                                                                                         // 2116
		});                                                                                                                  // 2117
                                                                                                                       // 2118
		this.tops = tops;                                                                                                    // 2119
		this.bottoms = bottoms;                                                                                              // 2120
	},                                                                                                                    // 2121
                                                                                                                       // 2122
                                                                                                                       // 2123
	// Given a left offset (from document left), returns the index of the el that it horizontally intersects.             // 2124
	// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2125
	getHorizontalIndex: function(leftOffset) {                                                                            // 2126
		this.ensureBuilt();                                                                                                  // 2127
                                                                                                                       // 2128
		var boundingRect = this.boundingRect;                                                                                // 2129
		var lefts = this.lefts;                                                                                              // 2130
		var rights = this.rights;                                                                                            // 2131
		var len = lefts.length;                                                                                              // 2132
		var i;                                                                                                               // 2133
                                                                                                                       // 2134
		if (!boundingRect || (leftOffset >= boundingRect.left && leftOffset < boundingRect.right)) {                         // 2135
			for (i = 0; i < len; i++) {                                                                                         // 2136
				if (leftOffset >= lefts[i] && leftOffset < rights[i]) {                                                            // 2137
					return i;                                                                                                         // 2138
				}                                                                                                                  // 2139
			}                                                                                                                   // 2140
		}                                                                                                                    // 2141
	},                                                                                                                    // 2142
                                                                                                                       // 2143
                                                                                                                       // 2144
	// Given a top offset (from document top), returns the index of the el that it vertically intersects.                 // 2145
	// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2146
	getVerticalIndex: function(topOffset) {                                                                               // 2147
		this.ensureBuilt();                                                                                                  // 2148
                                                                                                                       // 2149
		var boundingRect = this.boundingRect;                                                                                // 2150
		var tops = this.tops;                                                                                                // 2151
		var bottoms = this.bottoms;                                                                                          // 2152
		var len = tops.length;                                                                                               // 2153
		var i;                                                                                                               // 2154
                                                                                                                       // 2155
		if (!boundingRect || (topOffset >= boundingRect.top && topOffset < boundingRect.bottom)) {                           // 2156
			for (i = 0; i < len; i++) {                                                                                         // 2157
				if (topOffset >= tops[i] && topOffset < bottoms[i]) {                                                              // 2158
					return i;                                                                                                         // 2159
				}                                                                                                                  // 2160
			}                                                                                                                   // 2161
		}                                                                                                                    // 2162
	},                                                                                                                    // 2163
                                                                                                                       // 2164
                                                                                                                       // 2165
	// Gets the left offset (from document left) of the element at the given index                                        // 2166
	getLeftOffset: function(leftIndex) {                                                                                  // 2167
		this.ensureBuilt();                                                                                                  // 2168
		return this.lefts[leftIndex];                                                                                        // 2169
	},                                                                                                                    // 2170
                                                                                                                       // 2171
                                                                                                                       // 2172
	// Gets the left position (from offsetParent left) of the element at the given index                                  // 2173
	getLeftPosition: function(leftIndex) {                                                                                // 2174
		this.ensureBuilt();                                                                                                  // 2175
		return this.lefts[leftIndex] - this.origin.left;                                                                     // 2176
	},                                                                                                                    // 2177
                                                                                                                       // 2178
                                                                                                                       // 2179
	// Gets the right offset (from document left) of the element at the given index.                                      // 2180
	// This value is NOT relative to the document's right edge, like the CSS concept of "right" would be.                 // 2181
	getRightOffset: function(leftIndex) {                                                                                 // 2182
		this.ensureBuilt();                                                                                                  // 2183
		return this.rights[leftIndex];                                                                                       // 2184
	},                                                                                                                    // 2185
                                                                                                                       // 2186
                                                                                                                       // 2187
	// Gets the right position (from offsetParent left) of the element at the given index.                                // 2188
	// This value is NOT relative to the offsetParent's right edge, like the CSS concept of "right" would be.             // 2189
	getRightPosition: function(leftIndex) {                                                                               // 2190
		this.ensureBuilt();                                                                                                  // 2191
		return this.rights[leftIndex] - this.origin.left;                                                                    // 2192
	},                                                                                                                    // 2193
                                                                                                                       // 2194
                                                                                                                       // 2195
	// Gets the width of the element at the given index                                                                   // 2196
	getWidth: function(leftIndex) {                                                                                       // 2197
		this.ensureBuilt();                                                                                                  // 2198
		return this.rights[leftIndex] - this.lefts[leftIndex];                                                               // 2199
	},                                                                                                                    // 2200
                                                                                                                       // 2201
                                                                                                                       // 2202
	// Gets the top offset (from document top) of the element at the given index                                          // 2203
	getTopOffset: function(topIndex) {                                                                                    // 2204
		this.ensureBuilt();                                                                                                  // 2205
		return this.tops[topIndex];                                                                                          // 2206
	},                                                                                                                    // 2207
                                                                                                                       // 2208
                                                                                                                       // 2209
	// Gets the top position (from offsetParent top) of the element at the given position                                 // 2210
	getTopPosition: function(topIndex) {                                                                                  // 2211
		this.ensureBuilt();                                                                                                  // 2212
		return this.tops[topIndex] - this.origin.top;                                                                        // 2213
	},                                                                                                                    // 2214
                                                                                                                       // 2215
	// Gets the bottom offset (from the document top) of the element at the given index.                                  // 2216
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.           // 2217
	getBottomOffset: function(topIndex) {                                                                                 // 2218
		this.ensureBuilt();                                                                                                  // 2219
		return this.bottoms[topIndex];                                                                                       // 2220
	},                                                                                                                    // 2221
                                                                                                                       // 2222
                                                                                                                       // 2223
	// Gets the bottom position (from the offsetParent top) of the element at the given index.                            // 2224
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.           // 2225
	getBottomPosition: function(topIndex) {                                                                               // 2226
		this.ensureBuilt();                                                                                                  // 2227
		return this.bottoms[topIndex] - this.origin.top;                                                                     // 2228
	},                                                                                                                    // 2229
                                                                                                                       // 2230
                                                                                                                       // 2231
	// Gets the height of the element at the given index                                                                  // 2232
	getHeight: function(topIndex) {                                                                                       // 2233
		this.ensureBuilt();                                                                                                  // 2234
		return this.bottoms[topIndex] - this.tops[topIndex];                                                                 // 2235
	}                                                                                                                     // 2236
                                                                                                                       // 2237
});                                                                                                                    // 2238
                                                                                                                       // 2239
;;                                                                                                                     // 2240
                                                                                                                       // 2241
/* Tracks a drag's mouse movement, firing various handlers                                                             // 2242
----------------------------------------------------------------------------------------------------------------------*/
// TODO: use Emitter                                                                                                   // 2244
                                                                                                                       // 2245
var DragListener = FC.DragListener = Class.extend({                                                                    // 2246
                                                                                                                       // 2247
	options: null,                                                                                                        // 2248
                                                                                                                       // 2249
	isListening: false,                                                                                                   // 2250
	isDragging: false,                                                                                                    // 2251
                                                                                                                       // 2252
	// coordinates of the initial mousedown                                                                               // 2253
	originX: null,                                                                                                        // 2254
	originY: null,                                                                                                        // 2255
                                                                                                                       // 2256
	// handler attached to the document, bound to the DragListener's `this`                                               // 2257
	mousemoveProxy: null,                                                                                                 // 2258
	mouseupProxy: null,                                                                                                   // 2259
                                                                                                                       // 2260
	// for IE8 bug-fighting behavior, for now                                                                             // 2261
	subjectEl: null, // the element being draged. optional                                                                // 2262
	subjectHref: null,                                                                                                    // 2263
                                                                                                                       // 2264
	scrollEl: null,                                                                                                       // 2265
	scrollBounds: null, // { top, bottom, left, right }                                                                   // 2266
	scrollTopVel: null, // pixels per second                                                                              // 2267
	scrollLeftVel: null, // pixels per second                                                                             // 2268
	scrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 2269
	scrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 2270
                                                                                                                       // 2271
	scrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 2272
	scrollSpeed: 200, // pixels per second, at maximum speed                                                              // 2273
	scrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 2274
                                                                                                                       // 2275
                                                                                                                       // 2276
	constructor: function(options) {                                                                                      // 2277
		options = options || {};                                                                                             // 2278
		this.options = options;                                                                                              // 2279
		this.subjectEl = options.subjectEl;                                                                                  // 2280
	},                                                                                                                    // 2281
                                                                                                                       // 2282
                                                                                                                       // 2283
	// Call this when the user does a mousedown. Will probably lead to startListening                                     // 2284
	mousedown: function(ev) {                                                                                             // 2285
		if (isPrimaryMouseButton(ev)) {                                                                                      // 2286
                                                                                                                       // 2287
			ev.preventDefault(); // prevents native selection in most browsers                                                  // 2288
                                                                                                                       // 2289
			this.startListening(ev);                                                                                            // 2290
                                                                                                                       // 2291
			// start the drag immediately if there is no minimum distance for a drag start                                      // 2292
			if (!this.options.distance) {                                                                                       // 2293
				this.startDrag(ev);                                                                                                // 2294
			}                                                                                                                   // 2295
		}                                                                                                                    // 2296
	},                                                                                                                    // 2297
                                                                                                                       // 2298
                                                                                                                       // 2299
	// Call this to start tracking mouse movements                                                                        // 2300
	startListening: function(ev) {                                                                                        // 2301
		var scrollParent;                                                                                                    // 2302
                                                                                                                       // 2303
		if (!this.isListening) {                                                                                             // 2304
                                                                                                                       // 2305
			// grab scroll container and attach handler                                                                         // 2306
			if (ev && this.options.scroll) {                                                                                    // 2307
				scrollParent = getScrollParent($(ev.target));                                                                      // 2308
				if (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 2309
					this.scrollEl = scrollParent;                                                                                     // 2310
                                                                                                                       // 2311
					// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 2312
					this.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 2313
					this.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 2314
				}                                                                                                                  // 2315
			}                                                                                                                   // 2316
                                                                                                                       // 2317
			$(document)                                                                                                         // 2318
				.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 2319
				.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 2320
				.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 2321
                                                                                                                       // 2322
			if (ev) {                                                                                                           // 2323
				this.originX = ev.pageX;                                                                                           // 2324
				this.originY = ev.pageY;                                                                                           // 2325
			}                                                                                                                   // 2326
			else {                                                                                                              // 2327
				// if no starting information was given, origin will be the topleft corner of the screen.                          // 2328
				// if so, dx/dy in the future will be the absolute coordinates.                                                    // 2329
				this.originX = 0;                                                                                                  // 2330
				this.originY = 0;                                                                                                  // 2331
			}                                                                                                                   // 2332
                                                                                                                       // 2333
			this.isListening = true;                                                                                            // 2334
			this.listenStart(ev);                                                                                               // 2335
		}                                                                                                                    // 2336
	},                                                                                                                    // 2337
                                                                                                                       // 2338
                                                                                                                       // 2339
	// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2340
	listenStart: function(ev) {                                                                                           // 2341
		this.trigger('listenStart', ev);                                                                                     // 2342
	},                                                                                                                    // 2343
                                                                                                                       // 2344
                                                                                                                       // 2345
	// Called when the user moves the mouse                                                                               // 2346
	mousemove: function(ev) {                                                                                             // 2347
		var dx = ev.pageX - this.originX;                                                                                    // 2348
		var dy = ev.pageY - this.originY;                                                                                    // 2349
		var minDistance;                                                                                                     // 2350
		var distanceSq; // current distance from the origin, squared                                                         // 2351
                                                                                                                       // 2352
		if (!this.isDragging) { // if not already dragging...                                                                // 2353
			// then start the drag if the minimum distance criteria is met                                                      // 2354
			minDistance = this.options.distance || 1;                                                                           // 2355
			distanceSq = dx * dx + dy * dy;                                                                                     // 2356
			if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2357
				this.startDrag(ev);                                                                                                // 2358
			}                                                                                                                   // 2359
		}                                                                                                                    // 2360
                                                                                                                       // 2361
		if (this.isDragging) {                                                                                               // 2362
			this.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2363
		}                                                                                                                    // 2364
	},                                                                                                                    // 2365
                                                                                                                       // 2366
                                                                                                                       // 2367
	// Call this to initiate a legitimate drag.                                                                           // 2368
	// This function is called internally from this class, but can also be called explicitly from outside                 // 2369
	startDrag: function(ev) {                                                                                             // 2370
                                                                                                                       // 2371
		if (!this.isListening) { // startDrag must have manually initiated                                                   // 2372
			this.startListening();                                                                                              // 2373
		}                                                                                                                    // 2374
                                                                                                                       // 2375
		if (!this.isDragging) {                                                                                              // 2376
			this.isDragging = true;                                                                                             // 2377
			this.dragStart(ev);                                                                                                 // 2378
		}                                                                                                                    // 2379
	},                                                                                                                    // 2380
                                                                                                                       // 2381
                                                                                                                       // 2382
	// Called when the actual drag has started (went beyond minDistance)                                                  // 2383
	dragStart: function(ev) {                                                                                             // 2384
		var subjectEl = this.subjectEl;                                                                                      // 2385
                                                                                                                       // 2386
		this.trigger('dragStart', ev);                                                                                       // 2387
                                                                                                                       // 2388
		// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2389
		if ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2390
			subjectEl.removeAttr('href');                                                                                       // 2391
		}                                                                                                                    // 2392
	},                                                                                                                    // 2393
                                                                                                                       // 2394
                                                                                                                       // 2395
	// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2396
	drag: function(dx, dy, ev) {                                                                                          // 2397
		this.trigger('drag', dx, dy, ev);                                                                                    // 2398
		this.updateScroll(ev); // will possibly cause scrolling                                                              // 2399
	},                                                                                                                    // 2400
                                                                                                                       // 2401
                                                                                                                       // 2402
	// Called when the user does a mouseup                                                                                // 2403
	mouseup: function(ev) {                                                                                               // 2404
		this.stopListening(ev);                                                                                              // 2405
	},                                                                                                                    // 2406
                                                                                                                       // 2407
                                                                                                                       // 2408
	// Called when the drag is over. Will not cause listening to stop however.                                            // 2409
	// A concluding 'cellOut' event will NOT be triggered.                                                                // 2410
	stopDrag: function(ev) {                                                                                              // 2411
		if (this.isDragging) {                                                                                               // 2412
			this.stopScrolling();                                                                                               // 2413
			this.dragStop(ev);                                                                                                  // 2414
			this.isDragging = false;                                                                                            // 2415
		}                                                                                                                    // 2416
	},                                                                                                                    // 2417
                                                                                                                       // 2418
                                                                                                                       // 2419
	// Called when dragging has been stopped                                                                              // 2420
	dragStop: function(ev) {                                                                                              // 2421
		var _this = this;                                                                                                    // 2422
                                                                                                                       // 2423
		this.trigger('dragStop', ev);                                                                                        // 2424
                                                                                                                       // 2425
		// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2426
		setTimeout(function() { // must be outside of the click's execution                                                  // 2427
			if (_this.subjectHref) {                                                                                            // 2428
				_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2429
			}                                                                                                                   // 2430
		}, 0);                                                                                                               // 2431
	},                                                                                                                    // 2432
                                                                                                                       // 2433
                                                                                                                       // 2434
	// Call this to stop listening to the user's mouse events                                                             // 2435
	stopListening: function(ev) {                                                                                         // 2436
		this.stopDrag(ev); // if there's a current drag, kill it                                                             // 2437
                                                                                                                       // 2438
		if (this.isListening) {                                                                                              // 2439
                                                                                                                       // 2440
			// remove the scroll handler if there is a scrollEl                                                                 // 2441
			if (this.scrollEl) {                                                                                                // 2442
				this.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2443
				this.scrollHandlerProxy = null;                                                                                    // 2444
			}                                                                                                                   // 2445
                                                                                                                       // 2446
			$(document)                                                                                                         // 2447
				.off('mousemove', this.mousemoveProxy)                                                                             // 2448
				.off('mouseup', this.mouseupProxy)                                                                                 // 2449
				.off('selectstart', this.preventDefault);                                                                          // 2450
                                                                                                                       // 2451
			this.mousemoveProxy = null;                                                                                         // 2452
			this.mouseupProxy = null;                                                                                           // 2453
                                                                                                                       // 2454
			this.isListening = false;                                                                                           // 2455
			this.listenStop(ev);                                                                                                // 2456
		}                                                                                                                    // 2457
	},                                                                                                                    // 2458
                                                                                                                       // 2459
                                                                                                                       // 2460
	// Called when drag listening has stopped                                                                             // 2461
	listenStop: function(ev) {                                                                                            // 2462
		this.trigger('listenStop', ev);                                                                                      // 2463
	},                                                                                                                    // 2464
                                                                                                                       // 2465
                                                                                                                       // 2466
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2467
	// Arguments beyond the first `name` are forwarded on.                                                                // 2468
	trigger: function(name) {                                                                                             // 2469
		if (this.options[name]) {                                                                                            // 2470
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2471
		}                                                                                                                    // 2472
	},                                                                                                                    // 2473
                                                                                                                       // 2474
                                                                                                                       // 2475
	// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2476
	preventDefault: function(ev) {                                                                                        // 2477
		ev.preventDefault();                                                                                                 // 2478
	},                                                                                                                    // 2479
                                                                                                                       // 2480
                                                                                                                       // 2481
	/* Scrolling                                                                                                          // 2482
	------------------------------------------------------------------------------------------------------------------*/  // 2483
                                                                                                                       // 2484
                                                                                                                       // 2485
	// Computes and stores the bounding rectangle of scrollEl                                                             // 2486
	computeScrollBounds: function() {                                                                                     // 2487
		var el = this.scrollEl;                                                                                              // 2488
                                                                                                                       // 2489
		this.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2490
			// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2491
	},                                                                                                                    // 2492
                                                                                                                       // 2493
                                                                                                                       // 2494
	// Called when the dragging is in progress and scrolling should be updated                                            // 2495
	updateScroll: function(ev) {                                                                                          // 2496
		var sensitivity = this.scrollSensitivity;                                                                            // 2497
		var bounds = this.scrollBounds;                                                                                      // 2498
		var topCloseness, bottomCloseness;                                                                                   // 2499
		var leftCloseness, rightCloseness;                                                                                   // 2500
		var topVel = 0;                                                                                                      // 2501
		var leftVel = 0;                                                                                                     // 2502
                                                                                                                       // 2503
		if (bounds) { // only scroll if scrollEl exists                                                                      // 2504
                                                                                                                       // 2505
			// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2506
			topCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2507
			bottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2508
			leftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2509
			rightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2510
                                                                                                                       // 2511
			// translate vertical closeness into velocity.                                                                      // 2512
			// mouse must be completely in bounds for velocity to happen.                                                       // 2513
			if (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2514
				topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2515
			}                                                                                                                   // 2516
			else if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2517
				topVel = bottomCloseness * this.scrollSpeed;                                                                       // 2518
			}                                                                                                                   // 2519
                                                                                                                       // 2520
			// translate horizontal closeness into velocity                                                                     // 2521
			if (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2522
				leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2523
			}                                                                                                                   // 2524
			else if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2525
				leftVel = rightCloseness * this.scrollSpeed;                                                                       // 2526
			}                                                                                                                   // 2527
		}                                                                                                                    // 2528
                                                                                                                       // 2529
		this.setScrollVel(topVel, leftVel);                                                                                  // 2530
	},                                                                                                                    // 2531
                                                                                                                       // 2532
                                                                                                                       // 2533
	// Sets the speed-of-scrolling for the scrollEl                                                                       // 2534
	setScrollVel: function(topVel, leftVel) {                                                                             // 2535
                                                                                                                       // 2536
		this.scrollTopVel = topVel;                                                                                          // 2537
		this.scrollLeftVel = leftVel;                                                                                        // 2538
                                                                                                                       // 2539
		this.constrainScrollVel(); // massages into realistic values                                                         // 2540
                                                                                                                       // 2541
		// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2542
		if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2543
			this.scrollIntervalId = setInterval(                                                                                // 2544
				proxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2545
				this.scrollIntervalMs                                                                                              // 2546
			);                                                                                                                  // 2547
		}                                                                                                                    // 2548
	},                                                                                                                    // 2549
                                                                                                                       // 2550
                                                                                                                       // 2551
	// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2552
	constrainScrollVel: function() {                                                                                      // 2553
		var el = this.scrollEl;                                                                                              // 2554
                                                                                                                       // 2555
		if (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2556
			if (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2557
				this.scrollTopVel = 0;                                                                                             // 2558
			}                                                                                                                   // 2559
		}                                                                                                                    // 2560
		else if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2561
			if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2562
				this.scrollTopVel = 0;                                                                                             // 2563
			}                                                                                                                   // 2564
		}                                                                                                                    // 2565
                                                                                                                       // 2566
		if (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2567
			if (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2568
				this.scrollLeftVel = 0;                                                                                            // 2569
			}                                                                                                                   // 2570
		}                                                                                                                    // 2571
		else if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2572
			if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2573
				this.scrollLeftVel = 0;                                                                                            // 2574
			}                                                                                                                   // 2575
		}                                                                                                                    // 2576
	},                                                                                                                    // 2577
                                                                                                                       // 2578
                                                                                                                       // 2579
	// This function gets called during every iteration of the scrolling animation loop                                   // 2580
	scrollIntervalFunc: function() {                                                                                      // 2581
		var el = this.scrollEl;                                                                                              // 2582
		var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2583
                                                                                                                       // 2584
		// change the value of scrollEl's scroll                                                                             // 2585
		if (this.scrollTopVel) {                                                                                             // 2586
			el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2587
		}                                                                                                                    // 2588
		if (this.scrollLeftVel) {                                                                                            // 2589
			el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2590
		}                                                                                                                    // 2591
                                                                                                                       // 2592
		this.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2593
                                                                                                                       // 2594
		// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2595
		if (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2596
			this.stopScrolling();                                                                                               // 2597
		}                                                                                                                    // 2598
	},                                                                                                                    // 2599
                                                                                                                       // 2600
                                                                                                                       // 2601
	// Kills any existing scrolling animation loop                                                                        // 2602
	stopScrolling: function() {                                                                                           // 2603
		if (this.scrollIntervalId) {                                                                                         // 2604
			clearInterval(this.scrollIntervalId);                                                                               // 2605
			this.scrollIntervalId = null;                                                                                       // 2606
                                                                                                                       // 2607
			// when all done with scrolling, recompute positions since they probably changed                                    // 2608
			this.scrollStop();                                                                                                  // 2609
		}                                                                                                                    // 2610
	},                                                                                                                    // 2611
                                                                                                                       // 2612
                                                                                                                       // 2613
	// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2614
	scrollHandler: function() {                                                                                           // 2615
		// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2616
		if (!this.scrollIntervalId) {                                                                                        // 2617
			this.scrollStop();                                                                                                  // 2618
		}                                                                                                                    // 2619
	},                                                                                                                    // 2620
                                                                                                                       // 2621
                                                                                                                       // 2622
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2623
	scrollStop: function() {                                                                                              // 2624
	}                                                                                                                     // 2625
                                                                                                                       // 2626
});                                                                                                                    // 2627
                                                                                                                       // 2628
;;                                                                                                                     // 2629
                                                                                                                       // 2630
/* Tracks mouse movements over a component and raises events about which hit the mouse is over.                        // 2631
------------------------------------------------------------------------------------------------------------------------
options:                                                                                                               // 2633
- subjectEl                                                                                                            // 2634
- subjectCenter                                                                                                        // 2635
*/                                                                                                                     // 2636
                                                                                                                       // 2637
var HitDragListener = DragListener.extend({                                                                            // 2638
                                                                                                                       // 2639
	component: null, // converts coordinates to hits                                                                      // 2640
		// methods: prepareHits, releaseHits, queryHit                                                                       // 2641
                                                                                                                       // 2642
	origHit: null, // the hit the mouse was over when listening started                                                   // 2643
	hit: null, // the hit the mouse is over                                                                               // 2644
	coordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2645
                                                                                                                       // 2646
                                                                                                                       // 2647
	constructor: function(component, options) {                                                                           // 2648
		DragListener.call(this, options); // call the super-constructor                                                      // 2649
                                                                                                                       // 2650
		this.component = component;                                                                                          // 2651
	},                                                                                                                    // 2652
                                                                                                                       // 2653
                                                                                                                       // 2654
	// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2655
	// ev might be undefined if dragging was started manually.                                                            // 2656
	listenStart: function(ev) {                                                                                           // 2657
		var subjectEl = this.subjectEl;                                                                                      // 2658
		var subjectRect;                                                                                                     // 2659
		var origPoint;                                                                                                       // 2660
		var point;                                                                                                           // 2661
                                                                                                                       // 2662
		DragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2663
                                                                                                                       // 2664
		this.computeCoords();                                                                                                // 2665
                                                                                                                       // 2666
		if (ev) {                                                                                                            // 2667
			origPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2668
			point = origPoint;                                                                                                  // 2669
                                                                                                                       // 2670
			// constrain the point to bounds of the element being dragged                                                       // 2671
			if (subjectEl) {                                                                                                    // 2672
				subjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2673
				point = constrainPoint(point, subjectRect);                                                                        // 2674
			}                                                                                                                   // 2675
                                                                                                                       // 2676
			this.origHit = this.queryHit(point.left, point.top);                                                                // 2677
                                                                                                                       // 2678
			// treat the center of the subject as the collision point?                                                          // 2679
			if (subjectEl && this.options.subjectCenter) {                                                                      // 2680
                                                                                                                       // 2681
				// only consider the area the subject overlaps the hit. best for large subjects.                                   // 2682
				// TODO: skip this if hit didn't supply left/right/top/bottom                                                      // 2683
				if (this.origHit) {                                                                                                // 2684
					subjectRect = intersectRects(this.origHit, subjectRect) ||                                                        // 2685
						subjectRect; // in case there is no intersection                                                                 // 2686
				}                                                                                                                  // 2687
                                                                                                                       // 2688
				point = getRectCenter(subjectRect);                                                                                // 2689
			}                                                                                                                   // 2690
                                                                                                                       // 2691
			this.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2692
		}                                                                                                                    // 2693
		else {                                                                                                               // 2694
			this.origHit = null;                                                                                                // 2695
			this.coordAdjust = null;                                                                                            // 2696
		}                                                                                                                    // 2697
	},                                                                                                                    // 2698
                                                                                                                       // 2699
                                                                                                                       // 2700
	// Recomputes the drag-critical positions of elements                                                                 // 2701
	computeCoords: function() {                                                                                           // 2702
		this.component.prepareHits();                                                                                        // 2703
		this.computeScrollBounds(); // why is this here???                                                                   // 2704
	},                                                                                                                    // 2705
                                                                                                                       // 2706
                                                                                                                       // 2707
	// Called when the actual drag has started                                                                            // 2708
	dragStart: function(ev) {                                                                                             // 2709
		var hit;                                                                                                             // 2710
                                                                                                                       // 2711
		DragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2712
                                                                                                                       // 2713
		// might be different from this.origHit if the min-distance is large                                                 // 2714
		hit = this.queryHit(ev.pageX, ev.pageY);                                                                             // 2715
                                                                                                                       // 2716
		// report the initial hit the mouse is over                                                                          // 2717
		// especially important if no min-distance and drag starts immediately                                               // 2718
		if (hit) {                                                                                                           // 2719
			this.hitOver(hit);                                                                                                  // 2720
		}                                                                                                                    // 2721
	},                                                                                                                    // 2722
                                                                                                                       // 2723
                                                                                                                       // 2724
	// Called when the drag moves                                                                                         // 2725
	drag: function(dx, dy, ev) {                                                                                          // 2726
		var hit;                                                                                                             // 2727
                                                                                                                       // 2728
		DragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2729
                                                                                                                       // 2730
		hit = this.queryHit(ev.pageX, ev.pageY);                                                                             // 2731
                                                                                                                       // 2732
		if (!isHitsEqual(hit, this.hit)) { // a different hit than before?                                                   // 2733
			if (this.hit) {                                                                                                     // 2734
				this.hitOut();                                                                                                     // 2735
			}                                                                                                                   // 2736
			if (hit) {                                                                                                          // 2737
				this.hitOver(hit);                                                                                                 // 2738
			}                                                                                                                   // 2739
		}                                                                                                                    // 2740
	},                                                                                                                    // 2741
                                                                                                                       // 2742
                                                                                                                       // 2743
	// Called when dragging has been stopped                                                                              // 2744
	dragStop: function() {                                                                                                // 2745
		this.hitDone();                                                                                                      // 2746
		DragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2747
	},                                                                                                                    // 2748
                                                                                                                       // 2749
                                                                                                                       // 2750
	// Called when a the mouse has just moved over a new hit                                                              // 2751
	hitOver: function(hit) {                                                                                              // 2752
		var isOrig = isHitsEqual(hit, this.origHit);                                                                         // 2753
                                                                                                                       // 2754
		this.hit = hit;                                                                                                      // 2755
                                                                                                                       // 2756
		this.trigger('hitOver', this.hit, isOrig, this.origHit);                                                             // 2757
	},                                                                                                                    // 2758
                                                                                                                       // 2759
                                                                                                                       // 2760
	// Called when the mouse has just moved out of a hit                                                                  // 2761
	hitOut: function() {                                                                                                  // 2762
		if (this.hit) {                                                                                                      // 2763
			this.trigger('hitOut', this.hit);                                                                                   // 2764
			this.hitDone();                                                                                                     // 2765
			this.hit = null;                                                                                                    // 2766
		}                                                                                                                    // 2767
	},                                                                                                                    // 2768
                                                                                                                       // 2769
                                                                                                                       // 2770
	// Called after a hitOut. Also called before a dragStop                                                               // 2771
	hitDone: function() {                                                                                                 // 2772
		if (this.hit) {                                                                                                      // 2773
			this.trigger('hitDone', this.hit);                                                                                  // 2774
		}                                                                                                                    // 2775
	},                                                                                                                    // 2776
                                                                                                                       // 2777
                                                                                                                       // 2778
	// Called when drag listening has stopped                                                                             // 2779
	listenStop: function() {                                                                                              // 2780
		DragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2781
                                                                                                                       // 2782
		this.origHit = null;                                                                                                 // 2783
		this.hit = null;                                                                                                     // 2784
                                                                                                                       // 2785
		this.component.releaseHits();                                                                                        // 2786
	},                                                                                                                    // 2787
                                                                                                                       // 2788
                                                                                                                       // 2789
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2790
	scrollStop: function() {                                                                                              // 2791
		DragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2792
                                                                                                                       // 2793
		this.computeCoords(); // hits' absolute positions will be in new places. recompute                                   // 2794
	},                                                                                                                    // 2795
                                                                                                                       // 2796
                                                                                                                       // 2797
	// Gets the hit underneath the coordinates for the given mouse event                                                  // 2798
	queryHit: function(left, top) {                                                                                       // 2799
                                                                                                                       // 2800
		if (this.coordAdjust) {                                                                                              // 2801
			left += this.coordAdjust.left;                                                                                      // 2802
			top += this.coordAdjust.top;                                                                                        // 2803
		}                                                                                                                    // 2804
                                                                                                                       // 2805
		return this.component.queryHit(left, top);                                                                           // 2806
	}                                                                                                                     // 2807
                                                                                                                       // 2808
});                                                                                                                    // 2809
                                                                                                                       // 2810
                                                                                                                       // 2811
// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.               // 2812
// Two null values will be considered equal, as two "out of the component" states are the same.                        // 2813
function isHitsEqual(hit0, hit1) {                                                                                     // 2814
                                                                                                                       // 2815
	if (!hit0 && !hit1) {                                                                                                 // 2816
		return true;                                                                                                         // 2817
	}                                                                                                                     // 2818
                                                                                                                       // 2819
	if (hit0 && hit1) {                                                                                                   // 2820
		return hit0.component === hit1.component &&                                                                          // 2821
			isHitPropsWithin(hit0, hit1) &&                                                                                     // 2822
			isHitPropsWithin(hit1, hit0); // ensures all props are identical                                                    // 2823
	}                                                                                                                     // 2824
                                                                                                                       // 2825
	return false;                                                                                                         // 2826
}                                                                                                                      // 2827
                                                                                                                       // 2828
                                                                                                                       // 2829
// Returns true if all of subHit's non-standard properties are within superHit                                         // 2830
function isHitPropsWithin(subHit, superHit) {                                                                          // 2831
	for (var propName in subHit) {                                                                                        // 2832
		if (!/^(component|left|right|top|bottom)$/.test(propName)) {                                                         // 2833
			if (subHit[propName] !== superHit[propName]) {                                                                      // 2834
				return false;                                                                                                      // 2835
			}                                                                                                                   // 2836
		}                                                                                                                    // 2837
	}                                                                                                                     // 2838
	return true;                                                                                                          // 2839
}                                                                                                                      // 2840
                                                                                                                       // 2841
;;                                                                                                                     // 2842
                                                                                                                       // 2843
/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2844
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2846
var MouseFollower = Class.extend({                                                                                     // 2847
                                                                                                                       // 2848
	options: null,                                                                                                        // 2849
                                                                                                                       // 2850
	sourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2851
	el: null, // the clone of `sourceEl` that will track the mouse                                                        // 2852
	parentEl: null, // the element that `el` (the clone) will be attached to                                              // 2853
                                                                                                                       // 2854
	// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2855
	top0: null,                                                                                                           // 2856
	left0: null,                                                                                                          // 2857
                                                                                                                       // 2858
	// the initial position of the mouse                                                                                  // 2859
	mouseY0: null,                                                                                                        // 2860
	mouseX0: null,                                                                                                        // 2861
                                                                                                                       // 2862
	// the number of pixels the mouse has moved from its initial position                                                 // 2863
	topDelta: null,                                                                                                       // 2864
	leftDelta: null,                                                                                                      // 2865
                                                                                                                       // 2866
	mousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2867
                                                                                                                       // 2868
	isFollowing: false,                                                                                                   // 2869
	isHidden: false,                                                                                                      // 2870
	isAnimating: false, // doing the revert animation?                                                                    // 2871
                                                                                                                       // 2872
	constructor: function(sourceEl, options) {                                                                            // 2873
		this.options = options = options || {};                                                                              // 2874
		this.sourceEl = sourceEl;                                                                                            // 2875
		this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2876
	},                                                                                                                    // 2877
                                                                                                                       // 2878
                                                                                                                       // 2879
	// Causes the element to start following the mouse                                                                    // 2880
	start: function(ev) {                                                                                                 // 2881
		if (!this.isFollowing) {                                                                                             // 2882
			this.isFollowing = true;                                                                                            // 2883
                                                                                                                       // 2884
			this.mouseY0 = ev.pageY;                                                                                            // 2885
			this.mouseX0 = ev.pageX;                                                                                            // 2886
			this.topDelta = 0;                                                                                                  // 2887
			this.leftDelta = 0;                                                                                                 // 2888
                                                                                                                       // 2889
			if (!this.isHidden) {                                                                                               // 2890
				this.updatePosition();                                                                                             // 2891
			}                                                                                                                   // 2892
                                                                                                                       // 2893
			$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2894
		}                                                                                                                    // 2895
	},                                                                                                                    // 2896
                                                                                                                       // 2897
                                                                                                                       // 2898
	// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2899
	// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2900
	stop: function(shouldRevert, callback) {                                                                              // 2901
		var _this = this;                                                                                                    // 2902
		var revertDuration = this.options.revertDuration;                                                                    // 2903
                                                                                                                       // 2904
		function complete() {                                                                                                // 2905
			this.isAnimating = false;                                                                                           // 2906
			_this.removeElement();                                                                                              // 2907
                                                                                                                       // 2908
			this.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2909
                                                                                                                       // 2910
			if (callback) {                                                                                                     // 2911
				callback();                                                                                                        // 2912
			}                                                                                                                   // 2913
		}                                                                                                                    // 2914
                                                                                                                       // 2915
		if (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2916
			this.isFollowing = false;                                                                                           // 2917
                                                                                                                       // 2918
			$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2919
                                                                                                                       // 2920
			if (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2921
				this.isAnimating = true;                                                                                           // 2922
				this.el.animate({                                                                                                  // 2923
					top: this.top0,                                                                                                   // 2924
					left: this.left0                                                                                                  // 2925
				}, {                                                                                                               // 2926
					duration: revertDuration,                                                                                         // 2927
					complete: complete                                                                                                // 2928
				});                                                                                                                // 2929
			}                                                                                                                   // 2930
			else {                                                                                                              // 2931
				complete();                                                                                                        // 2932
			}                                                                                                                   // 2933
		}                                                                                                                    // 2934
	},                                                                                                                    // 2935
                                                                                                                       // 2936
                                                                                                                       // 2937
	// Gets the tracking element. Create it if necessary                                                                  // 2938
	getEl: function() {                                                                                                   // 2939
		var el = this.el;                                                                                                    // 2940
                                                                                                                       // 2941
		if (!el) {                                                                                                           // 2942
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2943
			el = this.el = this.sourceEl.clone()                                                                                // 2944
				.css({                                                                                                             // 2945
					position: 'absolute',                                                                                             // 2946
					visibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2947
					display: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2948
					margin: 0,                                                                                                        // 2949
					right: 'auto', // erase and set width instead                                                                     // 2950
					bottom: 'auto', // erase and set height instead                                                                   // 2951
					width: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2952
					height: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2953
					opacity: this.options.opacity || '',                                                                              // 2954
					zIndex: this.options.zIndex                                                                                       // 2955
				})                                                                                                                 // 2956
				.appendTo(this.parentEl);                                                                                          // 2957
		}                                                                                                                    // 2958
                                                                                                                       // 2959
		return el;                                                                                                           // 2960
	},                                                                                                                    // 2961
                                                                                                                       // 2962
                                                                                                                       // 2963
	// Removes the tracking element if it has already been created                                                        // 2964
	removeElement: function() {                                                                                           // 2965
		if (this.el) {                                                                                                       // 2966
			this.el.remove();                                                                                                   // 2967
			this.el = null;                                                                                                     // 2968
		}                                                                                                                    // 2969
	},                                                                                                                    // 2970
                                                                                                                       // 2971
                                                                                                                       // 2972
	// Update the CSS position of the tracking element                                                                    // 2973
	updatePosition: function() {                                                                                          // 2974
		var sourceOffset;                                                                                                    // 2975
		var origin;                                                                                                          // 2976
                                                                                                                       // 2977
		this.getEl(); // ensure this.el                                                                                      // 2978
                                                                                                                       // 2979
		// make sure origin info was computed                                                                                // 2980
		if (this.top0 === null) {                                                                                            // 2981
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2982
			sourceOffset = this.sourceEl.offset();                                                                              // 2983
			origin = this.el.offsetParent().offset();                                                                           // 2984
			this.top0 = sourceOffset.top - origin.top;                                                                          // 2985
			this.left0 = sourceOffset.left - origin.left;                                                                       // 2986
		}                                                                                                                    // 2987
                                                                                                                       // 2988
		this.el.css({                                                                                                        // 2989
			top: this.top0 + this.topDelta,                                                                                     // 2990
			left: this.left0 + this.leftDelta                                                                                   // 2991
		});                                                                                                                  // 2992
	},                                                                                                                    // 2993
                                                                                                                       // 2994
                                                                                                                       // 2995
	// Gets called when the user moves the mouse                                                                          // 2996
	mousemove: function(ev) {                                                                                             // 2997
		this.topDelta = ev.pageY - this.mouseY0;                                                                             // 2998
		this.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2999
                                                                                                                       // 3000
		if (!this.isHidden) {                                                                                                // 3001
			this.updatePosition();                                                                                              // 3002
		}                                                                                                                    // 3003
	},                                                                                                                    // 3004
                                                                                                                       // 3005
                                                                                                                       // 3006
	// Temporarily makes the tracking element invisible. Can be called before following starts                            // 3007
	hide: function() {                                                                                                    // 3008
		if (!this.isHidden) {                                                                                                // 3009
			this.isHidden = true;                                                                                               // 3010
			if (this.el) {                                                                                                      // 3011
				this.el.hide();                                                                                                    // 3012
			}                                                                                                                   // 3013
		}                                                                                                                    // 3014
	},                                                                                                                    // 3015
                                                                                                                       // 3016
                                                                                                                       // 3017
	// Show the tracking element after it has been temporarily hidden                                                     // 3018
	show: function() {                                                                                                    // 3019
		if (this.isHidden) {                                                                                                 // 3020
			this.isHidden = false;                                                                                              // 3021
			this.updatePosition();                                                                                              // 3022
			this.getEl().show();                                                                                                // 3023
		}                                                                                                                    // 3024
	}                                                                                                                     // 3025
                                                                                                                       // 3026
});                                                                                                                    // 3027
                                                                                                                       // 3028
;;                                                                                                                     // 3029
                                                                                                                       // 3030
/* An abstract class comprised of a "grid" of areas that each represent a specific datetime                            // 3031
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3033
var Grid = FC.Grid = Class.extend({                                                                                    // 3034
                                                                                                                       // 3035
	view: null, // a View object                                                                                          // 3036
	isRTL: null, // shortcut to the view's isRTL option                                                                   // 3037
                                                                                                                       // 3038
	start: null,                                                                                                          // 3039
	end: null,                                                                                                            // 3040
                                                                                                                       // 3041
	el: null, // the containing element                                                                                   // 3042
	elsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 3043
                                                                                                                       // 3044
	externalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 3045
                                                                                                                       // 3046
	// derived from options                                                                                               // 3047
	eventTimeFormat: null,                                                                                                // 3048
	displayEventTime: null,                                                                                               // 3049
	displayEventEnd: null,                                                                                                // 3050
                                                                                                                       // 3051
	minResizeDuration: null, // TODO: hack. set by subclasses. minumum event resize duration                              // 3052
                                                                                                                       // 3053
	// if defined, holds the unit identified (ex: "year" or "month") that determines the level of granularity             // 3054
	// of the date areas. if not defined, assumes to be day and time granularity.                                         // 3055
	// TODO: port isTimeScale into same system?                                                                           // 3056
	largeUnit: null,                                                                                                      // 3057
                                                                                                                       // 3058
                                                                                                                       // 3059
	constructor: function(view) {                                                                                         // 3060
		this.view = view;                                                                                                    // 3061
		this.isRTL = view.opt('isRTL');                                                                                      // 3062
                                                                                                                       // 3063
		this.elsByFill = {};                                                                                                 // 3064
		this.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 3065
	},                                                                                                                    // 3066
                                                                                                                       // 3067
                                                                                                                       // 3068
	/* Options                                                                                                            // 3069
	------------------------------------------------------------------------------------------------------------------*/  // 3070
                                                                                                                       // 3071
                                                                                                                       // 3072
	// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 3073
	computeEventTimeFormat: function() {                                                                                  // 3074
		return this.view.opt('smallTimeFormat');                                                                             // 3075
	},                                                                                                                    // 3076
                                                                                                                       // 3077
                                                                                                                       // 3078
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 3079
	// Only applies to non-all-day events.                                                                                // 3080
	computeDisplayEventTime: function() {                                                                                 // 3081
		return true;                                                                                                         // 3082
	},                                                                                                                    // 3083
                                                                                                                       // 3084
                                                                                                                       // 3085
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 3086
	computeDisplayEventEnd: function() {                                                                                  // 3087
		return true;                                                                                                         // 3088
	},                                                                                                                    // 3089
                                                                                                                       // 3090
                                                                                                                       // 3091
	/* Dates                                                                                                              // 3092
	------------------------------------------------------------------------------------------------------------------*/  // 3093
                                                                                                                       // 3094
                                                                                                                       // 3095
	// Tells the grid about what period of time to display.                                                               // 3096
	// Any date-related internal data should be generated.                                                                // 3097
	setRange: function(range) {                                                                                           // 3098
		this.start = range.start.clone();                                                                                    // 3099
		this.end = range.end.clone();                                                                                        // 3100
                                                                                                                       // 3101
		this.rangeUpdated();                                                                                                 // 3102
		this.processRangeOptions();                                                                                          // 3103
	},                                                                                                                    // 3104
                                                                                                                       // 3105
                                                                                                                       // 3106
	// Called when internal variables that rely on the range should be updated                                            // 3107
	rangeUpdated: function() {                                                                                            // 3108
	},                                                                                                                    // 3109
                                                                                                                       // 3110
                                                                                                                       // 3111
	// Updates values that rely on options and also relate to range                                                       // 3112
	processRangeOptions: function() {                                                                                     // 3113
		var view = this.view;                                                                                                // 3114
		var displayEventTime;                                                                                                // 3115
		var displayEventEnd;                                                                                                 // 3116
                                                                                                                       // 3117
		this.eventTimeFormat =                                                                                               // 3118
			view.opt('eventTimeFormat') ||                                                                                      // 3119
			view.opt('timeFormat') || // deprecated                                                                             // 3120
			this.computeEventTimeFormat();                                                                                      // 3121
                                                                                                                       // 3122
		displayEventTime = view.opt('displayEventTime');                                                                     // 3123
		if (displayEventTime == null) {                                                                                      // 3124
			displayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 3125
		}                                                                                                                    // 3126
                                                                                                                       // 3127
		displayEventEnd = view.opt('displayEventEnd');                                                                       // 3128
		if (displayEventEnd == null) {                                                                                       // 3129
			displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 3130
		}                                                                                                                    // 3131
                                                                                                                       // 3132
		this.displayEventTime = displayEventTime;                                                                            // 3133
		this.displayEventEnd = displayEventEnd;                                                                              // 3134
	},                                                                                                                    // 3135
                                                                                                                       // 3136
                                                                                                                       // 3137
	// Converts a span (has unzoned start/end and any other grid-specific location information)                           // 3138
	// into an array of segments (pieces of events whose format is decided by the grid).                                  // 3139
	spanToSegs: function(span) {                                                                                          // 3140
		// subclasses must implement                                                                                         // 3141
	},                                                                                                                    // 3142
                                                                                                                       // 3143
                                                                                                                       // 3144
	// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 3145
	// TODO: port isTimeScale into this system?                                                                           // 3146
	diffDates: function(a, b) {                                                                                           // 3147
		if (this.largeUnit) {                                                                                                // 3148
			return diffByUnit(a, b, this.largeUnit);                                                                            // 3149
		}                                                                                                                    // 3150
		else {                                                                                                               // 3151
			return diffDayTime(a, b);                                                                                           // 3152
		}                                                                                                                    // 3153
	},                                                                                                                    // 3154
                                                                                                                       // 3155
                                                                                                                       // 3156
	/* Hit Area                                                                                                           // 3157
	------------------------------------------------------------------------------------------------------------------*/  // 3158
                                                                                                                       // 3159
                                                                                                                       // 3160
	// Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit          // 3161
	prepareHits: function() {                                                                                             // 3162
	},                                                                                                                    // 3163
                                                                                                                       // 3164
                                                                                                                       // 3165
	// Called when queryHit calls have subsided. Good place to clear any coordinate caches.                               // 3166
	releaseHits: function() {                                                                                             // 3167
	},                                                                                                                    // 3168
                                                                                                                       // 3169
                                                                                                                       // 3170
	// Given coordinates from the topleft of the document, return data about the date-related area underneath.            // 3171
	// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).                    // 3172
	// Must have a `grid` property, a reference to this current grid. TODO: avoid this                                    // 3173
	// The returned object will be processed by getHitSpan and getHitEl.                                                  // 3174
	queryHit: function(leftOffset, topOffset) {                                                                           // 3175
	},                                                                                                                    // 3176
                                                                                                                       // 3177
                                                                                                                       // 3178
	// Given position-level information about a date-related area within the grid,                                        // 3179
	// should return an object with at least a start/end date. Can provide other information as well.                     // 3180
	getHitSpan: function(hit) {                                                                                           // 3181
	},                                                                                                                    // 3182
                                                                                                                       // 3183
                                                                                                                       // 3184
	// Given position-level information about a date-related area within the grid,                                        // 3185
	// should return a jQuery element that best represents it. passed to dayClick callback.                               // 3186
	getHitEl: function(hit) {                                                                                             // 3187
	},                                                                                                                    // 3188
                                                                                                                       // 3189
                                                                                                                       // 3190
	/* Rendering                                                                                                          // 3191
	------------------------------------------------------------------------------------------------------------------*/  // 3192
                                                                                                                       // 3193
                                                                                                                       // 3194
	// Sets the container element that the grid should render inside of.                                                  // 3195
	// Does other DOM-related initializations.                                                                            // 3196
	setElement: function(el) {                                                                                            // 3197
		var _this = this;                                                                                                    // 3198
                                                                                                                       // 3199
		this.el = el;                                                                                                        // 3200
                                                                                                                       // 3201
		// attach a handler to the grid's root element.                                                                      // 3202
		// jQuery will take care of unregistering them when removeElement gets called.                                       // 3203
		el.on('mousedown', function(ev) {                                                                                    // 3204
			if (                                                                                                                // 3205
				!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or "more.." link                // 3206
				!$(ev.target).closest('.fc-popover').length // not on a popover (like the "more.." events one)                     // 3207
			) {                                                                                                                 // 3208
				_this.dayMousedown(ev);                                                                                            // 3209
			}                                                                                                                   // 3210
		});                                                                                                                  // 3211
                                                                                                                       // 3212
		// attach event-element-related handlers. in Grid.events                                                             // 3213
		// same garbage collection note as above.                                                                            // 3214
		this.bindSegHandlers();                                                                                              // 3215
                                                                                                                       // 3216
		this.bindGlobalHandlers();                                                                                           // 3217
	},                                                                                                                    // 3218
                                                                                                                       // 3219
                                                                                                                       // 3220
	// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3221
	// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View                   // 3222
	removeElement: function() {                                                                                           // 3223
		this.unbindGlobalHandlers();                                                                                         // 3224
                                                                                                                       // 3225
		this.el.remove();                                                                                                    // 3226
                                                                                                                       // 3227
		// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3228
	},                                                                                                                    // 3229
                                                                                                                       // 3230
                                                                                                                       // 3231
	// Renders the basic structure of grid view before any content is rendered                                            // 3232
	renderSkeleton: function() {                                                                                          // 3233
		// subclasses should implement                                                                                       // 3234
	},                                                                                                                    // 3235
                                                                                                                       // 3236
                                                                                                                       // 3237
	// Renders the grid's date-related content (like areas that represent days/times).                                    // 3238
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3239
	renderDates: function() {                                                                                             // 3240
		// subclasses should implement                                                                                       // 3241
	},                                                                                                                    // 3242
                                                                                                                       // 3243
                                                                                                                       // 3244
	// Unrenders the grid's date-related content                                                                          // 3245
	unrenderDates: function() {                                                                                           // 3246
		// subclasses should implement                                                                                       // 3247
	},                                                                                                                    // 3248
                                                                                                                       // 3249
                                                                                                                       // 3250
	/* Handlers                                                                                                           // 3251
	------------------------------------------------------------------------------------------------------------------*/  // 3252
                                                                                                                       // 3253
                                                                                                                       // 3254
	// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3255
	bindGlobalHandlers: function() {                                                                                      // 3256
		$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3257
	},                                                                                                                    // 3258
                                                                                                                       // 3259
                                                                                                                       // 3260
	// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3261
	unbindGlobalHandlers: function() {                                                                                    // 3262
		$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3263
	},                                                                                                                    // 3264
                                                                                                                       // 3265
                                                                                                                       // 3266
	// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3267
	dayMousedown: function(ev) {                                                                                          // 3268
		var _this = this;                                                                                                    // 3269
		var view = this.view;                                                                                                // 3270
		var isSelectable = view.opt('selectable');                                                                           // 3271
		var dayClickHit; // null if invalid dayClick                                                                         // 3272
		var selectionSpan; // null if invalid selection                                                                      // 3273
                                                                                                                       // 3274
		// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3275
		// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3276
		// if 'selectable' is enabled, this listener also detects selections.                                                // 3277
		var dragListener = new HitDragListener(this, {                                                                       // 3278
			//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3279
			scroll: view.opt('dragScroll'),                                                                                     // 3280
			dragStart: function() {                                                                                             // 3281
				view.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3282
			},                                                                                                                  // 3283
			hitOver: function(hit, isOrig, origHit) {                                                                           // 3284
				if (origHit) { // click needs to have started on a hit                                                             // 3285
					dayClickHit = isOrig ? hit : null; // single-hit selection is a day click                                         // 3286
					if (isSelectable) {                                                                                               // 3287
						selectionSpan = _this.computeSelection(                                                                          // 3288
							_this.getHitSpan(origHit),                                                                                      // 3289
							_this.getHitSpan(hit)                                                                                           // 3290
						);                                                                                                               // 3291
						if (selectionSpan) {                                                                                             // 3292
							_this.renderSelection(selectionSpan);                                                                           // 3293
						}                                                                                                                // 3294
						else if (selectionSpan === false) {                                                                              // 3295
							disableCursor();                                                                                                // 3296
						}                                                                                                                // 3297
					}                                                                                                                 // 3298
				}                                                                                                                  // 3299
			},                                                                                                                  // 3300
			hitOut: function() {                                                                                                // 3301
				dayClickHit = null;                                                                                                // 3302
				selectionSpan = null;                                                                                              // 3303
				_this.unrenderSelection();                                                                                         // 3304
				enableCursor();                                                                                                    // 3305
			},                                                                                                                  // 3306
			listenStop: function(ev) {                                                                                          // 3307
				if (dayClickHit) {                                                                                                 // 3308
					view.triggerDayClick(                                                                                             // 3309
						_this.getHitSpan(dayClickHit),                                                                                   // 3310
						_this.getHitEl(dayClickHit),                                                                                     // 3311
						ev                                                                                                               // 3312
					);                                                                                                                // 3313
				}                                                                                                                  // 3314
				if (selectionSpan) {                                                                                               // 3315
					// the selection will already have been rendered. just report it                                                  // 3316
					view.reportSelection(selectionSpan, ev);                                                                          // 3317
				}                                                                                                                  // 3318
				enableCursor();                                                                                                    // 3319
			}                                                                                                                   // 3320
		});                                                                                                                  // 3321
                                                                                                                       // 3322
		dragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3323
	},                                                                                                                    // 3324
                                                                                                                       // 3325
                                                                                                                       // 3326
	/* Event Helper                                                                                                       // 3327
	------------------------------------------------------------------------------------------------------------------*/  // 3328
	// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3329
                                                                                                                       // 3330
                                                                                                                       // 3331
	// Renders a mock event at the given event location, which contains zoned start/end properties.                       // 3332
	renderEventLocationHelper: function(eventLocation, sourceSeg) {                                                       // 3333
		var fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);                                                 // 3334
                                                                                                                       // 3335
		this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3336
	},                                                                                                                    // 3337
                                                                                                                       // 3338
                                                                                                                       // 3339
	// Builds a fake event given zoned event date properties and a segment is should be inspired from.                    // 3340
	// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3341
	// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3342
	fabricateHelperEvent: function(eventLocation, sourceSeg) {                                                            // 3343
		var fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3344
                                                                                                                       // 3345
		fakeEvent.start = eventLocation.start.clone();                                                                       // 3346
		fakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;                                                // 3347
		fakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates                                   // 3348
		this.view.calendar.normalizeEventDates(fakeEvent);                                                                   // 3349
                                                                                                                       // 3350
		// this extra className will be useful for differentiating real events from mock events in CSS                       // 3351
		fakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3352
                                                                                                                       // 3353
		// if something external is being dragged in, don't render a resizer                                                 // 3354
		if (!sourceSeg) {                                                                                                    // 3355
			fakeEvent.editable = false;                                                                                         // 3356
		}                                                                                                                    // 3357
                                                                                                                       // 3358
		return fakeEvent;                                                                                                    // 3359
	},                                                                                                                    // 3360
                                                                                                                       // 3361
                                                                                                                       // 3362
	// Renders a mock event. Given zoned event date properties.                                                           // 3363
	renderHelper: function(eventLocation, sourceSeg) {                                                                    // 3364
		// subclasses must implement                                                                                         // 3365
	},                                                                                                                    // 3366
                                                                                                                       // 3367
                                                                                                                       // 3368
	// Unrenders a mock event                                                                                             // 3369
	unrenderHelper: function() {                                                                                          // 3370
		// subclasses must implement                                                                                         // 3371
	},                                                                                                                    // 3372
                                                                                                                       // 3373
                                                                                                                       // 3374
	/* Selection                                                                                                          // 3375
	------------------------------------------------------------------------------------------------------------------*/  // 3376
                                                                                                                       // 3377
                                                                                                                       // 3378
	// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3379
	// Given a span (unzoned start/end and other misc data)                                                               // 3380
	renderSelection: function(span) {                                                                                     // 3381
		this.renderHighlight(span);                                                                                          // 3382
	},                                                                                                                    // 3383
                                                                                                                       // 3384
                                                                                                                       // 3385
	// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3386
	unrenderSelection: function() {                                                                                       // 3387
		this.unrenderHighlight();                                                                                            // 3388
	},                                                                                                                    // 3389
                                                                                                                       // 3390
                                                                                                                       // 3391
	// Given the first and last date-spans of a selection, returns another date-span object.                              // 3392
	// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().       // 3393
	// Will return false if the selection is invalid and this should be indicated to the user.                            // 3394
	// Will return null/undefined if a selection invalid but no error should be reported.                                 // 3395
	computeSelection: function(span0, span1) {                                                                            // 3396
		var span = this.computeSelectionSpan(span0, span1);                                                                  // 3397
                                                                                                                       // 3398
		if (span && !this.view.calendar.isSelectionSpanAllowed(span)) {                                                      // 3399
			return false;                                                                                                       // 3400
		}                                                                                                                    // 3401
                                                                                                                       // 3402
		return span;                                                                                                         // 3403
	},                                                                                                                    // 3404
                                                                                                                       // 3405
                                                                                                                       // 3406
	// Given two spans, must return the combination of the two.                                                           // 3407
	// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.                           // 3408
	computeSelectionSpan: function(span0, span1) {                                                                        // 3409
		var dates = [ span0.start, span0.end, span1.start, span1.end ];                                                      // 3410
                                                                                                                       // 3411
		dates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3412
                                                                                                                       // 3413
		return { start: dates[0].clone(), end: dates[3].clone() };                                                           // 3414
	},                                                                                                                    // 3415
                                                                                                                       // 3416
                                                                                                                       // 3417
	/* Highlight                                                                                                          // 3418
	------------------------------------------------------------------------------------------------------------------*/  // 3419
                                                                                                                       // 3420
                                                                                                                       // 3421
	// Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)                  // 3422
	renderHighlight: function(span) {                                                                                     // 3423
		this.renderFill('highlight', this.spanToSegs(span));                                                                 // 3424
	},                                                                                                                    // 3425
                                                                                                                       // 3426
                                                                                                                       // 3427
	// Unrenders the emphasis on a date range                                                                             // 3428
	unrenderHighlight: function() {                                                                                       // 3429
		this.unrenderFill('highlight');                                                                                      // 3430
	},                                                                                                                    // 3431
                                                                                                                       // 3432
                                                                                                                       // 3433
	// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3434
	highlightSegClasses: function() {                                                                                     // 3435
		return [ 'fc-highlight' ];                                                                                           // 3436
	},                                                                                                                    // 3437
                                                                                                                       // 3438
                                                                                                                       // 3439
	/* Business Hours                                                                                                     // 3440
	------------------------------------------------------------------------------------------------------------------*/  // 3441
                                                                                                                       // 3442
                                                                                                                       // 3443
	renderBusinessHours: function() {                                                                                     // 3444
	},                                                                                                                    // 3445
                                                                                                                       // 3446
                                                                                                                       // 3447
	unrenderBusinessHours: function() {                                                                                   // 3448
	},                                                                                                                    // 3449
                                                                                                                       // 3450
                                                                                                                       // 3451
	/* Now Indicator                                                                                                      // 3452
	------------------------------------------------------------------------------------------------------------------*/  // 3453
                                                                                                                       // 3454
                                                                                                                       // 3455
	getNowIndicatorUnit: function() {                                                                                     // 3456
	},                                                                                                                    // 3457
                                                                                                                       // 3458
                                                                                                                       // 3459
	renderNowIndicator: function(date) {                                                                                  // 3460
	},                                                                                                                    // 3461
                                                                                                                       // 3462
                                                                                                                       // 3463
	unrenderNowIndicator: function() {                                                                                    // 3464
	},                                                                                                                    // 3465
                                                                                                                       // 3466
                                                                                                                       // 3467
	/* Fill System (highlight, background events, business hours)                                                         // 3468
	--------------------------------------------------------------------------------------------------------------------  // 3469
	TODO: remove this system. like we did in TimeGrid                                                                     // 3470
	*/                                                                                                                    // 3471
                                                                                                                       // 3472
                                                                                                                       // 3473
	// Renders a set of rectangles over the given segments of time.                                                       // 3474
	// MUST RETURN a subset of segs, the segs that were actually rendered.                                                // 3475
	// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3476
	renderFill: function(type, segs) {                                                                                    // 3477
		// subclasses must implement                                                                                         // 3478
	},                                                                                                                    // 3479
                                                                                                                       // 3480
                                                                                                                       // 3481
	// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3482
	unrenderFill: function(type) {                                                                                        // 3483
		var el = this.elsByFill[type];                                                                                       // 3484
                                                                                                                       // 3485
		if (el) {                                                                                                            // 3486
			el.remove();                                                                                                        // 3487
			delete this.elsByFill[type];                                                                                        // 3488
		}                                                                                                                    // 3489
	},                                                                                                                    // 3490
                                                                                                                       // 3491
                                                                                                                       // 3492
	// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3493
	// Only returns segments that successfully rendered.                                                                  // 3494
	// To be harnessed by renderFill (implemented by subclasses).                                                         // 3495
	// Analagous to renderFgSegEls.                                                                                       // 3496
	renderFillSegEls: function(type, segs) {                                                                              // 3497
		var _this = this;                                                                                                    // 3498
		var segElMethod = this[type + 'SegEl'];                                                                              // 3499
		var html = '';                                                                                                       // 3500
		var renderedSegs = [];                                                                                               // 3501
		var i;                                                                                                               // 3502
                                                                                                                       // 3503
		if (segs.length) {                                                                                                   // 3504
                                                                                                                       // 3505
			// build a large concatenation of segment HTML                                                                      // 3506
			for (i = 0; i < segs.length; i++) {                                                                                 // 3507
				html += this.fillSegHtml(type, segs[i]);                                                                           // 3508
			}                                                                                                                   // 3509
                                                                                                                       // 3510
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3511
			// Then, compute the 'el' for each segment.                                                                         // 3512
			$(html).each(function(i, node) {                                                                                    // 3513
				var seg = segs[i];                                                                                                 // 3514
				var el = $(node);                                                                                                  // 3515
                                                                                                                       // 3516
				// allow custom filter methods per-type                                                                            // 3517
				if (segElMethod) {                                                                                                 // 3518
					el = segElMethod.call(_this, seg, el);                                                                            // 3519
				}                                                                                                                  // 3520
                                                                                                                       // 3521
				if (el) { // custom filters did not cancel the render                                                              // 3522
					el = $(el); // allow custom filter to return raw DOM node                                                         // 3523
                                                                                                                       // 3524
					// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3525
					if (el.is(_this.fillSegTag)) {                                                                                    // 3526
						seg.el = el;                                                                                                     // 3527
						renderedSegs.push(seg);                                                                                          // 3528
					}                                                                                                                 // 3529
				}                                                                                                                  // 3530
			});                                                                                                                 // 3531
		}                                                                                                                    // 3532
                                                                                                                       // 3533
		return renderedSegs;                                                                                                 // 3534
	},                                                                                                                    // 3535
                                                                                                                       // 3536
                                                                                                                       // 3537
	fillSegTag: 'div', // subclasses can override                                                                         // 3538
                                                                                                                       // 3539
                                                                                                                       // 3540
	// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3541
	fillSegHtml: function(type, seg) {                                                                                    // 3542
                                                                                                                       // 3543
		// custom hooks per-type                                                                                             // 3544
		var classesMethod = this[type + 'SegClasses'];                                                                       // 3545
		var cssMethod = this[type + 'SegCss'];                                                                               // 3546
                                                                                                                       // 3547
		var classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3548
		var css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3549
                                                                                                                       // 3550
		return '<' + this.fillSegTag +                                                                                       // 3551
			(classes.length ? ' class="' + classes.join(' ') + '"' : '') +                                                      // 3552
			(css ? ' style="' + css + '"' : '') +                                                                               // 3553
			' />';                                                                                                              // 3554
	},                                                                                                                    // 3555
                                                                                                                       // 3556
                                                                                                                       // 3557
                                                                                                                       // 3558
	/* Generic rendering utilities for subclasses                                                                         // 3559
	------------------------------------------------------------------------------------------------------------------*/  // 3560
                                                                                                                       // 3561
                                                                                                                       // 3562
	// Computes HTML classNames for a single-day element                                                                  // 3563
	getDayClasses: function(date) {                                                                                       // 3564
		var view = this.view;                                                                                                // 3565
		var today = view.calendar.getNow();                                                                                  // 3566
		var classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3567
                                                                                                                       // 3568
		if (                                                                                                                 // 3569
			view.intervalDuration.as('months') == 1 &&                                                                          // 3570
			date.month() != view.intervalStart.month()                                                                          // 3571
		) {                                                                                                                  // 3572
			classes.push('fc-other-month');                                                                                     // 3573
		}                                                                                                                    // 3574
                                                                                                                       // 3575
		if (date.isSame(today, 'day')) {                                                                                     // 3576
			classes.push(                                                                                                       // 3577
				'fc-today',                                                                                                        // 3578
				view.highlightStateClass                                                                                           // 3579
			);                                                                                                                  // 3580
		}                                                                                                                    // 3581
		else if (date < today) {                                                                                             // 3582
			classes.push('fc-past');                                                                                            // 3583
		}                                                                                                                    // 3584
		else {                                                                                                               // 3585
			classes.push('fc-future');                                                                                          // 3586
		}                                                                                                                    // 3587
                                                                                                                       // 3588
		return classes;                                                                                                      // 3589
	}                                                                                                                     // 3590
                                                                                                                       // 3591
});                                                                                                                    // 3592
                                                                                                                       // 3593
;;                                                                                                                     // 3594
                                                                                                                       // 3595
/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3596
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3598
Grid.mixin({                                                                                                           // 3599
                                                                                                                       // 3600
	mousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3601
	isDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3602
	isResizingSeg: false, // is a segment being resized? boolean                                                          // 3603
	isDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3604
	segs: null, // the *event* segments currently rendered in the grid. TODO: rename to `eventSegs`                       // 3605
                                                                                                                       // 3606
                                                                                                                       // 3607
	// Renders the given events onto the grid                                                                             // 3608
	renderEvents: function(events) {                                                                                      // 3609
		var bgEvents = [];                                                                                                   // 3610
		var fgEvents = [];                                                                                                   // 3611
		var i;                                                                                                               // 3612
                                                                                                                       // 3613
		for (i = 0; i < events.length; i++) {                                                                                // 3614
			(isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);                                                       // 3615
		}                                                                                                                    // 3616
                                                                                                                       // 3617
		this.segs = [].concat( // record all segs                                                                            // 3618
			this.renderBgEvents(bgEvents),                                                                                      // 3619
			this.renderFgEvents(fgEvents)                                                                                       // 3620
		);                                                                                                                   // 3621
	},                                                                                                                    // 3622
                                                                                                                       // 3623
                                                                                                                       // 3624
	renderBgEvents: function(events) {                                                                                    // 3625
		var segs = this.eventsToSegs(events);                                                                                // 3626
                                                                                                                       // 3627
		// renderBgSegs might return a subset of segs, segs that were actually rendered                                      // 3628
		return this.renderBgSegs(segs) || segs;                                                                              // 3629
	},                                                                                                                    // 3630
                                                                                                                       // 3631
                                                                                                                       // 3632
	renderFgEvents: function(events) {                                                                                    // 3633
		var segs = this.eventsToSegs(events);                                                                                // 3634
                                                                                                                       // 3635
		// renderFgSegs might return a subset of segs, segs that were actually rendered                                      // 3636
		return this.renderFgSegs(segs) || segs;                                                                              // 3637
	},                                                                                                                    // 3638
                                                                                                                       // 3639
                                                                                                                       // 3640
	// Unrenders all events currently rendered on the grid                                                                // 3641
	unrenderEvents: function() {                                                                                          // 3642
		this.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3643
                                                                                                                       // 3644
		this.unrenderFgSegs();                                                                                               // 3645
		this.unrenderBgSegs();                                                                                               // 3646
                                                                                                                       // 3647
		this.segs = null;                                                                                                    // 3648
	},                                                                                                                    // 3649
                                                                                                                       // 3650
                                                                                                                       // 3651
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 3652
	getEventSegs: function() {                                                                                            // 3653
		return this.segs || [];                                                                                              // 3654
	},                                                                                                                    // 3655
                                                                                                                       // 3656
                                                                                                                       // 3657
	/* Foreground Segment Rendering                                                                                       // 3658
	------------------------------------------------------------------------------------------------------------------*/  // 3659
                                                                                                                       // 3660
                                                                                                                       // 3661
	// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3662
	renderFgSegs: function(segs) {                                                                                        // 3663
		// subclasses must implement                                                                                         // 3664
	},                                                                                                                    // 3665
                                                                                                                       // 3666
                                                                                                                       // 3667
	// Unrenders all currently rendered foreground segments                                                               // 3668
	unrenderFgSegs: function() {                                                                                          // 3669
		// subclasses must implement                                                                                         // 3670
	},                                                                                                                    // 3671
                                                                                                                       // 3672
                                                                                                                       // 3673
	// Renders and assigns an `el` property for each foreground event segment.                                            // 3674
	// Only returns segments that successfully rendered.                                                                  // 3675
	// A utility that subclasses may use.                                                                                 // 3676
	renderFgSegEls: function(segs, disableResizing) {                                                                     // 3677
		var view = this.view;                                                                                                // 3678
		var html = '';                                                                                                       // 3679
		var renderedSegs = [];                                                                                               // 3680
		var i;                                                                                                               // 3681
                                                                                                                       // 3682
		if (segs.length) { // don't build an empty html string                                                               // 3683
                                                                                                                       // 3684
			// build a large concatenation of event segment HTML                                                                // 3685
			for (i = 0; i < segs.length; i++) {                                                                                 // 3686
				html += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3687
			}                                                                                                                   // 3688
                                                                                                                       // 3689
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3690
			// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3691
			$(html).each(function(i, node) {                                                                                    // 3692
				var seg = segs[i];                                                                                                 // 3693
				var el = view.resolveEventEl(seg.event, $(node));                                                                  // 3694
                                                                                                                       // 3695
				if (el) {                                                                                                          // 3696
					el.data('fc-seg', seg); // used by handlers                                                                       // 3697
					seg.el = el;                                                                                                      // 3698
					renderedSegs.push(seg);                                                                                           // 3699
				}                                                                                                                  // 3700
			});                                                                                                                 // 3701
		}                                                                                                                    // 3702
                                                                                                                       // 3703
		return renderedSegs;                                                                                                 // 3704
	},                                                                                                                    // 3705
                                                                                                                       // 3706
                                                                                                                       // 3707
	// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3708
	fgSegHtml: function(seg, disableResizing) {                                                                           // 3709
		// subclasses should implement                                                                                       // 3710
	},                                                                                                                    // 3711
                                                                                                                       // 3712
                                                                                                                       // 3713
	/* Background Segment Rendering                                                                                       // 3714
	------------------------------------------------------------------------------------------------------------------*/  // 3715
                                                                                                                       // 3716
                                                                                                                       // 3717
	// Renders the given background event segments onto the grid.                                                         // 3718
	// Returns a subset of the segs that were actually rendered.                                                          // 3719
	renderBgSegs: function(segs) {                                                                                        // 3720
		return this.renderFill('bgEvent', segs);                                                                             // 3721
	},                                                                                                                    // 3722
                                                                                                                       // 3723
                                                                                                                       // 3724
	// Unrenders all the currently rendered background event segments                                                     // 3725
	unrenderBgSegs: function() {                                                                                          // 3726
		this.unrenderFill('bgEvent');                                                                                        // 3727
	},                                                                                                                    // 3728
                                                                                                                       // 3729
                                                                                                                       // 3730
	// Renders a background event element, given the default rendering. Called by the fill system.                        // 3731
	bgEventSegEl: function(seg, el) {                                                                                     // 3732
		return this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3733
	},                                                                                                                    // 3734
                                                                                                                       // 3735
                                                                                                                       // 3736
	// Generates an array of classNames to be used for the default rendering of a background event.                       // 3737
	// Called by the fill system.                                                                                         // 3738
	bgEventSegClasses: function(seg) {                                                                                    // 3739
		var event = seg.event;                                                                                               // 3740
		var source = event.source || {};                                                                                     // 3741
                                                                                                                       // 3742
		return [ 'fc-bgevent' ].concat(                                                                                      // 3743
			event.className,                                                                                                    // 3744
			source.className || []                                                                                              // 3745
		);                                                                                                                   // 3746
	},                                                                                                                    // 3747
                                                                                                                       // 3748
                                                                                                                       // 3749
	// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3750
	// Called by the fill system.                                                                                         // 3751
	bgEventSegCss: function(seg) {                                                                                        // 3752
		return {                                                                                                             // 3753
			'background-color': this.getSegSkinCss(seg)['background-color']                                                     // 3754
		};                                                                                                                   // 3755
	},                                                                                                                    // 3756
                                                                                                                       // 3757
                                                                                                                       // 3758
	// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3759
	businessHoursSegClasses: function(seg) {                                                                              // 3760
		return [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3761
	},                                                                                                                    // 3762
                                                                                                                       // 3763
                                                                                                                       // 3764
	/* Handlers                                                                                                           // 3765
	------------------------------------------------------------------------------------------------------------------*/  // 3766
                                                                                                                       // 3767
                                                                                                                       // 3768
	// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3769
	bindSegHandlers: function() {                                                                                         // 3770
		var _this = this;                                                                                                    // 3771
		var view = this.view;                                                                                                // 3772
                                                                                                                       // 3773
		$.each(                                                                                                              // 3774
			{                                                                                                                   // 3775
				mouseenter: function(seg, ev) {                                                                                    // 3776
					_this.triggerSegMouseover(seg, ev);                                                                               // 3777
				},                                                                                                                 // 3778
				mouseleave: function(seg, ev) {                                                                                    // 3779
					_this.triggerSegMouseout(seg, ev);                                                                                // 3780
				},                                                                                                                 // 3781
				click: function(seg, ev) {                                                                                         // 3782
					return view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3783
				},                                                                                                                 // 3784
				mousedown: function(seg, ev) {                                                                                     // 3785
					if ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3786
						_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3787
					}                                                                                                                 // 3788
					else if (view.isEventDraggable(seg.event)) {                                                                      // 3789
						_this.segDragMousedown(seg, ev);                                                                                 // 3790
					}                                                                                                                 // 3791
				}                                                                                                                  // 3792
			},                                                                                                                  // 3793
			function(name, func) {                                                                                              // 3794
				// attach the handler to the container element and only listen for real event elements via bubbling                // 3795
				_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3796
					var seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3797
                                                                                                                       // 3798
					// only call the handlers if there is not a drag/resize in progress                                               // 3799
					if (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3800
						return func.call(this, seg, ev); // `this` will be the event element                                             // 3801
					}                                                                                                                 // 3802
				});                                                                                                                // 3803
			}                                                                                                                   // 3804
		);                                                                                                                   // 3805
	},                                                                                                                    // 3806
                                                                                                                       // 3807
                                                                                                                       // 3808
	// Updates internal state and triggers handlers for when an event element is moused over                              // 3809
	triggerSegMouseover: function(seg, ev) {                                                                              // 3810
		if (!this.mousedOverSeg) {                                                                                           // 3811
			this.mousedOverSeg = seg;                                                                                           // 3812
			this.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3813
		}                                                                                                                    // 3814
	},                                                                                                                    // 3815
                                                                                                                       // 3816
                                                                                                                       // 3817
	// Updates internal state and triggers handlers for when an event element is moused out.                              // 3818
	// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3819
	triggerSegMouseout: function(seg, ev) {                                                                               // 3820
		ev = ev || {}; // if given no args, make a mock mouse event                                                          // 3821
                                                                                                                       // 3822
		if (this.mousedOverSeg) {                                                                                            // 3823
			seg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3824
			this.mousedOverSeg = null;                                                                                          // 3825
			this.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3826
		}                                                                                                                    // 3827
	},                                                                                                                    // 3828
                                                                                                                       // 3829
                                                                                                                       // 3830
	/* Event Dragging                                                                                                     // 3831
	------------------------------------------------------------------------------------------------------------------*/  // 3832
                                                                                                                       // 3833
                                                                                                                       // 3834
	// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3835
	// Generic enough to work with any type of Grid.                                                                      // 3836
	segDragMousedown: function(seg, ev) {                                                                                 // 3837
		var _this = this;                                                                                                    // 3838
		var view = this.view;                                                                                                // 3839
		var calendar = view.calendar;                                                                                        // 3840
		var el = seg.el;                                                                                                     // 3841
		var event = seg.event;                                                                                               // 3842
		var dropLocation; // zoned event date properties                                                                     // 3843
                                                                                                                       // 3844
		// A clone of the original element that will move with the mouse                                                     // 3845
		var mouseFollower = new MouseFollower(seg.el, {                                                                      // 3846
			parentEl: view.el,                                                                                                  // 3847
			opacity: view.opt('dragOpacity'),                                                                                   // 3848
			revertDuration: view.opt('dragRevertDuration'),                                                                     // 3849
			zIndex: 2 // one above the .fc-view                                                                                 // 3850
		});                                                                                                                  // 3851
                                                                                                                       // 3852
		// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3853
		// of the view.                                                                                                      // 3854
		var dragListener = new HitDragListener(view, {                                                                       // 3855
			distance: 5,                                                                                                        // 3856
			scroll: view.opt('dragScroll'),                                                                                     // 3857
			subjectEl: el,                                                                                                      // 3858
			subjectCenter: true,                                                                                                // 3859
			listenStart: function(ev) {                                                                                         // 3860
				mouseFollower.hide(); // don't show until we know this is a real drag                                              // 3861
				mouseFollower.start(ev);                                                                                           // 3862
			},                                                                                                                  // 3863
			dragStart: function(ev) {                                                                                           // 3864
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3865
				_this.segDragStart(seg, ev);                                                                                       // 3866
				view.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3867
			},                                                                                                                  // 3868
			hitOver: function(hit, isOrig, origHit) {                                                                           // 3869
                                                                                                                       // 3870
				// starting hit could be forced (DayGrid.limit)                                                                    // 3871
				if (seg.hit) {                                                                                                     // 3872
					origHit = seg.hit;                                                                                                // 3873
				}                                                                                                                  // 3874
                                                                                                                       // 3875
				// since we are querying the parent view, might not belong to this grid                                            // 3876
				dropLocation = _this.computeEventDrop(                                                                             // 3877
					origHit.component.getHitSpan(origHit),                                                                            // 3878
					hit.component.getHitSpan(hit),                                                                                    // 3879
					event                                                                                                             // 3880
				);                                                                                                                 // 3881
                                                                                                                       // 3882
				if (dropLocation && !calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation), event)) {                        // 3883
					disableCursor();                                                                                                  // 3884
					dropLocation = null;                                                                                              // 3885
				}                                                                                                                  // 3886
                                                                                                                       // 3887
				// if a valid drop location, have the subclass render a visual indication                                          // 3888
				if (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3889
					mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own                     // 3890
				}                                                                                                                  // 3891
				else {                                                                                                             // 3892
					mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3893
				}                                                                                                                  // 3894
                                                                                                                       // 3895
				if (isOrig) {                                                                                                      // 3896
					dropLocation = null; // needs to have moved hits to be a valid drop                                               // 3897
				}                                                                                                                  // 3898
			},                                                                                                                  // 3899
			hitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 3900
				view.unrenderDrag(); // unrender whatever was done in renderDrag                                                   // 3901
				mouseFollower.show(); // show in case we are moving out of all hits                                                // 3902
				dropLocation = null;                                                                                               // 3903
			},                                                                                                                  // 3904
			hitDone: function() { // Called after a hitOut OR before a dragStop                                                 // 3905
				enableCursor();                                                                                                    // 3906
			},                                                                                                                  // 3907
			dragStop: function(ev) {                                                                                            // 3908
				// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 3909
				mouseFollower.stop(!dropLocation, function() {                                                                     // 3910
					view.unrenderDrag();                                                                                              // 3911
					view.showEvent(event);                                                                                            // 3912
					_this.segDragStop(seg, ev);                                                                                       // 3913
                                                                                                                       // 3914
					if (dropLocation) {                                                                                               // 3915
						view.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 3916
					}                                                                                                                 // 3917
				});                                                                                                                // 3918
			},                                                                                                                  // 3919
			listenStop: function() {                                                                                            // 3920
				mouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 3921
			}                                                                                                                   // 3922
		});                                                                                                                  // 3923
                                                                                                                       // 3924
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 3925
	},                                                                                                                    // 3926
                                                                                                                       // 3927
                                                                                                                       // 3928
	// Called before event segment dragging starts                                                                        // 3929
	segDragStart: function(seg, ev) {                                                                                     // 3930
		this.isDraggingSeg = true;                                                                                           // 3931
		this.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 3932
	},                                                                                                                    // 3933
                                                                                                                       // 3934
                                                                                                                       // 3935
	// Called after event segment dragging stops                                                                          // 3936
	segDragStop: function(seg, ev) {                                                                                      // 3937
		this.isDraggingSeg = false;                                                                                          // 3938
		this.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 3939
	},                                                                                                                    // 3940
                                                                                                                       // 3941
                                                                                                                       // 3942
	// Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay     // 3943
	// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 3944
	// A falsy returned value indicates an invalid drop.                                                                  // 3945
	// DOES NOT consider overlap/constraint.                                                                              // 3946
	computeEventDrop: function(startSpan, endSpan, event) {                                                               // 3947
		var calendar = this.view.calendar;                                                                                   // 3948
		var dragStart = startSpan.start;                                                                                     // 3949
		var dragEnd = endSpan.start;                                                                                         // 3950
		var delta;                                                                                                           // 3951
		var dropLocation; // zoned event date properties                                                                     // 3952
                                                                                                                       // 3953
		if (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 3954
			delta = this.diffDates(dragEnd, dragStart);                                                                         // 3955
                                                                                                                       // 3956
			// if an all-day event was in a timed area and it was dragged to a different time,                                  // 3957
			// guarantee an end and adjust start/end to have times                                                              // 3958
			if (event.allDay && durationHasTime(delta)) {                                                                       // 3959
				dropLocation = {                                                                                                   // 3960
					start: event.start.clone(),                                                                                       // 3961
					end: calendar.getEventEnd(event), // will be an ambig day                                                         // 3962
					allDay: false // for normalizeEventTimes                                                                          // 3963
				};                                                                                                                 // 3964
				calendar.normalizeEventTimes(dropLocation);                                                                        // 3965
			}                                                                                                                   // 3966
			// othewise, work off existing values                                                                               // 3967
			else {                                                                                                              // 3968
				dropLocation = {                                                                                                   // 3969
					start: event.start.clone(),                                                                                       // 3970
					end: event.end ? event.end.clone() : null,                                                                        // 3971
					allDay: event.allDay // keep it the same                                                                          // 3972
				};                                                                                                                 // 3973
			}                                                                                                                   // 3974
                                                                                                                       // 3975
			dropLocation.start.add(delta);                                                                                      // 3976
			if (dropLocation.end) {                                                                                             // 3977
				dropLocation.end.add(delta);                                                                                       // 3978
			}                                                                                                                   // 3979
		}                                                                                                                    // 3980
		else {                                                                                                               // 3981
			// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 3982
			dropLocation = {                                                                                                    // 3983
				start: dragEnd.clone(),                                                                                            // 3984
				end: null, // end should be cleared                                                                                // 3985
				allDay: !dragEnd.hasTime()                                                                                         // 3986
			};                                                                                                                  // 3987
		}                                                                                                                    // 3988
                                                                                                                       // 3989
		return dropLocation;                                                                                                 // 3990
	},                                                                                                                    // 3991
                                                                                                                       // 3992
                                                                                                                       // 3993
	// Utility for apply dragOpacity to a jQuery set                                                                      // 3994
	applyDragOpacity: function(els) {                                                                                     // 3995
		var opacity = this.view.opt('dragOpacity');                                                                          // 3996
                                                                                                                       // 3997
		if (opacity != null) {                                                                                               // 3998
			els.each(function(i, node) {                                                                                        // 3999
				// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 4000
				// In IE8, a helper element will disappears if there's a filter.                                                   // 4001
				node.style.opacity = opacity;                                                                                      // 4002
			});                                                                                                                 // 4003
		}                                                                                                                    // 4004
	},                                                                                                                    // 4005
                                                                                                                       // 4006
                                                                                                                       // 4007
	/* External Element Dragging                                                                                          // 4008
	------------------------------------------------------------------------------------------------------------------*/  // 4009
                                                                                                                       // 4010
                                                                                                                       // 4011
	// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 4012
	externalDragStart: function(ev, ui) {                                                                                 // 4013
		var view = this.view;                                                                                                // 4014
		var el;                                                                                                              // 4015
		var accept;                                                                                                          // 4016
                                                                                                                       // 4017
		if (view.opt('droppable')) { // only listen if this setting is on                                                    // 4018
			el = $((ui ? ui.item : null) || ev.target);                                                                         // 4019
                                                                                                                       // 4020
			// Test that the dragged element passes the dropAccept selector or filter function.                                 // 4021
			// FYI, the default is "*" (matches all)                                                                            // 4022
			accept = view.opt('dropAccept');                                                                                    // 4023
			if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 4024
				if (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 4025
					this.listenToExternalDrag(el, ev, ui);                                                                            // 4026
				}                                                                                                                  // 4027
			}                                                                                                                   // 4028
		}                                                                                                                    // 4029
	},                                                                                                                    // 4030
                                                                                                                       // 4031
                                                                                                                       // 4032
	// Called when a jQuery UI drag starts and it needs to be monitored for dropping                                      // 4033
	listenToExternalDrag: function(el, ev, ui) {                                                                          // 4034
		var _this = this;                                                                                                    // 4035
		var calendar = this.view.calendar;                                                                                   // 4036
		var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 4037
		var dropLocation; // a null value signals an unsuccessful drag                                                       // 4038
                                                                                                                       // 4039
		// listener that tracks mouse movement over date-associated pixel regions                                            // 4040
		var dragListener = new HitDragListener(this, {                                                                       // 4041
			listenStart: function() {                                                                                           // 4042
				_this.isDraggingExternal = true;                                                                                   // 4043
			},                                                                                                                  // 4044
			hitOver: function(hit) {                                                                                            // 4045
				dropLocation = _this.computeExternalDrop(                                                                          // 4046
					hit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid            // 4047
					meta                                                                                                              // 4048
				);                                                                                                                 // 4049
                                                                                                                       // 4050
				if ( // invalid hit?                                                                                               // 4051
					dropLocation &&                                                                                                   // 4052
					!calendar.isExternalSpanAllowed(_this.eventToSpan(dropLocation), dropLocation, meta.eventProps)                   // 4053
				) {                                                                                                                // 4054
					disableCursor();                                                                                                  // 4055
					dropLocation = null;                                                                                              // 4056
				}                                                                                                                  // 4057
                                                                                                                       // 4058
				if (dropLocation) {                                                                                                // 4059
					_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 4060
				}                                                                                                                  // 4061
			},                                                                                                                  // 4062
			hitOut: function() {                                                                                                // 4063
				dropLocation = null; // signal unsuccessful                                                                        // 4064
			},                                                                                                                  // 4065
			hitDone: function() { // Called after a hitOut OR before a dragStop                                                 // 4066
				enableCursor();                                                                                                    // 4067
				_this.unrenderDrag();                                                                                              // 4068
			},                                                                                                                  // 4069
			dragStop: function() {                                                                                              // 4070
				if (dropLocation) { // element was dropped on a valid hit                                                          // 4071
					_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 4072
				}                                                                                                                  // 4073
			},                                                                                                                  // 4074
			listenStop: function() {                                                                                            // 4075
				_this.isDraggingExternal = false;                                                                                  // 4076
			}                                                                                                                   // 4077
		});                                                                                                                  // 4078
                                                                                                                       // 4079
		dragListener.startDrag(ev); // start listening immediately                                                           // 4080
	},                                                                                                                    // 4081
                                                                                                                       // 4082
                                                                                                                       // 4083
	// Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),     // 4084
	// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.   // 4085
	// Returning a null value signals an invalid drop hit.                                                                // 4086
	// DOES NOT consider overlap/constraint.                                                                              // 4087
	computeExternalDrop: function(span, meta) {                                                                           // 4088
		var calendar = this.view.calendar;                                                                                   // 4089
		var dropLocation = {                                                                                                 // 4090
			start: calendar.applyTimezone(span.start), // simulate a zoned event start date                                     // 4091
			end: null                                                                                                           // 4092
		};                                                                                                                   // 4093
                                                                                                                       // 4094
		// if dropped on an all-day span, and element's metadata specified a time, set it                                    // 4095
		if (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 4096
			dropLocation.start.time(meta.startTime);                                                                            // 4097
		}                                                                                                                    // 4098
                                                                                                                       // 4099
		if (meta.duration) {                                                                                                 // 4100
			dropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 4101
		}                                                                                                                    // 4102
                                                                                                                       // 4103
		return dropLocation;                                                                                                 // 4104
	},                                                                                                                    // 4105
                                                                                                                       // 4106
                                                                                                                       // 4107
                                                                                                                       // 4108
	/* Drag Rendering (for both events and an external elements)                                                          // 4109
	------------------------------------------------------------------------------------------------------------------*/  // 4110
                                                                                                                       // 4111
                                                                                                                       // 4112
	// Renders a visual indication of an event or external element being dragged.                                         // 4113
	// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 4114
	// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 4115
	// A truthy returned value indicates this method has rendered a helper element.                                       // 4116
	renderDrag: function(dropLocation, seg) {                                                                             // 4117
		// subclasses must implement                                                                                         // 4118
	},                                                                                                                    // 4119
                                                                                                                       // 4120
                                                                                                                       // 4121
	// Unrenders a visual indication of an event or external element being dragged                                        // 4122
	unrenderDrag: function() {                                                                                            // 4123
		// subclasses must implement                                                                                         // 4124
	},                                                                                                                    // 4125
                                                                                                                       // 4126
                                                                                                                       // 4127
	/* Resizing                                                                                                           // 4128
	------------------------------------------------------------------------------------------------------------------*/  // 4129
                                                                                                                       // 4130
                                                                                                                       // 4131
	// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 4132
	// Generic enough to work with any type of Grid.                                                                      // 4133
	segResizeMousedown: function(seg, ev, isStart) {                                                                      // 4134
		var _this = this;                                                                                                    // 4135
		var view = this.view;                                                                                                // 4136
		var calendar = view.calendar;                                                                                        // 4137
		var el = seg.el;                                                                                                     // 4138
		var event = seg.event;                                                                                               // 4139
		var eventEnd = calendar.getEventEnd(event);                                                                          // 4140
		var resizeLocation; // zoned event date properties. falsy if invalid resize                                          // 4141
                                                                                                                       // 4142
		// Tracks mouse movement over the *grid's* coordinate map                                                            // 4143
		var dragListener = new HitDragListener(this, {                                                                       // 4144
			distance: 5,                                                                                                        // 4145
			scroll: view.opt('dragScroll'),                                                                                     // 4146
			subjectEl: el,                                                                                                      // 4147
			dragStart: function(ev) {                                                                                           // 4148
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 4149
				_this.segResizeStart(seg, ev);                                                                                     // 4150
			},                                                                                                                  // 4151
			hitOver: function(hit, isOrig, origHit) {                                                                           // 4152
				var origHitSpan = _this.getHitSpan(origHit);                                                                       // 4153
				var hitSpan = _this.getHitSpan(hit);                                                                               // 4154
                                                                                                                       // 4155
				resizeLocation = isStart ?                                                                                         // 4156
					_this.computeEventStartResize(origHitSpan, hitSpan, event) :                                                      // 4157
					_this.computeEventEndResize(origHitSpan, hitSpan, event);                                                         // 4158
                                                                                                                       // 4159
				if (resizeLocation) {                                                                                              // 4160
					if (!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation), event)) {                                     // 4161
						disableCursor();                                                                                                 // 4162
						resizeLocation = null;                                                                                           // 4163
					}                                                                                                                 // 4164
					// no change? (TODO: how does this work with timezones?)                                                          // 4165
					else if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4166
						resizeLocation = null;                                                                                           // 4167
					}                                                                                                                 // 4168
				}                                                                                                                  // 4169
                                                                                                                       // 4170
				if (resizeLocation) {                                                                                              // 4171
					view.hideEvent(event);                                                                                            // 4172
					_this.renderEventResize(resizeLocation, seg);                                                                     // 4173
				}                                                                                                                  // 4174
			},                                                                                                                  // 4175
			hitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 4176
				resizeLocation = null;                                                                                             // 4177
			},                                                                                                                  // 4178
			hitDone: function() { // resets the rendering to show the original event                                            // 4179
				_this.unrenderEventResize();                                                                                       // 4180
				view.showEvent(event);                                                                                             // 4181
				enableCursor();                                                                                                    // 4182
			},                                                                                                                  // 4183
			dragStop: function(ev) {                                                                                            // 4184
				_this.segResizeStop(seg, ev);                                                                                      // 4185
                                                                                                                       // 4186
				if (resizeLocation) { // valid date to resize to?                                                                  // 4187
					view.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4188
				}                                                                                                                  // 4189
			}                                                                                                                   // 4190
		});                                                                                                                  // 4191
                                                                                                                       // 4192
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4193
	},                                                                                                                    // 4194
                                                                                                                       // 4195
                                                                                                                       // 4196
	// Called before event segment resizing starts                                                                        // 4197
	segResizeStart: function(seg, ev) {                                                                                   // 4198
		this.isResizingSeg = true;                                                                                           // 4199
		this.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4200
	},                                                                                                                    // 4201
                                                                                                                       // 4202
                                                                                                                       // 4203
	// Called after event segment resizing stops                                                                          // 4204
	segResizeStop: function(seg, ev) {                                                                                    // 4205
		this.isResizingSeg = false;                                                                                          // 4206
		this.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4207
	},                                                                                                                    // 4208
                                                                                                                       // 4209
                                                                                                                       // 4210
	// Returns new date-information for an event segment being resized from its start                                     // 4211
	computeEventStartResize: function(startSpan, endSpan, event) {                                                        // 4212
		return this.computeEventResize('start', startSpan, endSpan, event);                                                  // 4213
	},                                                                                                                    // 4214
                                                                                                                       // 4215
                                                                                                                       // 4216
	// Returns new date-information for an event segment being resized from its end                                       // 4217
	computeEventEndResize: function(startSpan, endSpan, event) {                                                          // 4218
		return this.computeEventResize('end', startSpan, endSpan, event);                                                    // 4219
	},                                                                                                                    // 4220
                                                                                                                       // 4221
                                                                                                                       // 4222
	// Returns new zoned date information for an event segment being resized from its start OR end                        // 4223
	// `type` is either 'start' or 'end'.                                                                                 // 4224
	// DOES NOT consider overlap/constraint.                                                                              // 4225
	computeEventResize: function(type, startSpan, endSpan, event) {                                                       // 4226
		var calendar = this.view.calendar;                                                                                   // 4227
		var delta = this.diffDates(endSpan[type], startSpan[type]);                                                          // 4228
		var resizeLocation; // zoned event date properties                                                                   // 4229
		var defaultDuration;                                                                                                 // 4230
                                                                                                                       // 4231
		// build original values to work from, guaranteeing a start and end                                                  // 4232
		resizeLocation = {                                                                                                   // 4233
			start: event.start.clone(),                                                                                         // 4234
			end: calendar.getEventEnd(event),                                                                                   // 4235
			allDay: event.allDay                                                                                                // 4236
		};                                                                                                                   // 4237
                                                                                                                       // 4238
		// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4239
		if (resizeLocation.allDay && durationHasTime(delta)) {                                                               // 4240
			resizeLocation.allDay = false;                                                                                      // 4241
			calendar.normalizeEventTimes(resizeLocation);                                                                       // 4242
		}                                                                                                                    // 4243
                                                                                                                       // 4244
		resizeLocation[type].add(delta); // apply delta to start or end                                                      // 4245
                                                                                                                       // 4246
		// if the event was compressed too small, find a new reasonable duration for it                                      // 4247
		if (!resizeLocation.start.isBefore(resizeLocation.end)) {                                                            // 4248
                                                                                                                       // 4249
			defaultDuration =                                                                                                   // 4250
				this.minResizeDuration || // TODO: hack                                                                            // 4251
				(event.allDay ?                                                                                                    // 4252
					calendar.defaultAllDayEventDuration :                                                                             // 4253
					calendar.defaultTimedEventDuration);                                                                              // 4254
                                                                                                                       // 4255
			if (type == 'start') { // resizing the start?                                                                       // 4256
				resizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);                                       // 4257
			}                                                                                                                   // 4258
			else { // resizing the end?                                                                                         // 4259
				resizeLocation.end = resizeLocation.start.clone().add(defaultDuration);                                            // 4260
			}                                                                                                                   // 4261
		}                                                                                                                    // 4262
                                                                                                                       // 4263
		return resizeLocation;                                                                                               // 4264
	},                                                                                                                    // 4265
                                                                                                                       // 4266
                                                                                                                       // 4267
	// Renders a visual indication of an event being resized.                                                             // 4268
	// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4269
	renderEventResize: function(range, seg) {                                                                             // 4270
		// subclasses must implement                                                                                         // 4271
	},                                                                                                                    // 4272
                                                                                                                       // 4273
                                                                                                                       // 4274
	// Unrenders a visual indication of an event being resized.                                                           // 4275
	unrenderEventResize: function() {                                                                                     // 4276
		// subclasses must implement                                                                                         // 4277
	},                                                                                                                    // 4278
                                                                                                                       // 4279
                                                                                                                       // 4280
	/* Rendering Utils                                                                                                    // 4281
	------------------------------------------------------------------------------------------------------------------*/  // 4282
                                                                                                                       // 4283
                                                                                                                       // 4284
	// Compute the text that should be displayed on an event's element.                                                   // 4285
	// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4286
	// If event times are disabled, or the event has no time, will return a blank string.                                 // 4287
	// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4288
	// and displayEnd will default to the displayEventEnd setting.                                                        // 4289
	getEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4290
                                                                                                                       // 4291
		if (formatStr == null) {                                                                                             // 4292
			formatStr = this.eventTimeFormat;                                                                                   // 4293
		}                                                                                                                    // 4294
                                                                                                                       // 4295
		if (displayEnd == null) {                                                                                            // 4296
			displayEnd = this.displayEventEnd;                                                                                  // 4297
		}                                                                                                                    // 4298
                                                                                                                       // 4299
		if (this.displayEventTime && range.start.hasTime()) {                                                                // 4300
			if (displayEnd && range.end) {                                                                                      // 4301
				return this.view.formatRange(range, formatStr);                                                                    // 4302
			}                                                                                                                   // 4303
			else {                                                                                                              // 4304
				return range.start.format(formatStr);                                                                              // 4305
			}                                                                                                                   // 4306
		}                                                                                                                    // 4307
                                                                                                                       // 4308
		return '';                                                                                                           // 4309
	},                                                                                                                    // 4310
                                                                                                                       // 4311
                                                                                                                       // 4312
	// Generic utility for generating the HTML classNames for an event segment's element                                  // 4313
	getSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4314
		var event = seg.event;                                                                                               // 4315
		var classes = [                                                                                                      // 4316
			'fc-event',                                                                                                         // 4317
			seg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4318
			seg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4319
		].concat(                                                                                                            // 4320
			event.className,                                                                                                    // 4321
			event.source ? event.source.className : []                                                                          // 4322
		);                                                                                                                   // 4323
                                                                                                                       // 4324
		if (isDraggable) {                                                                                                   // 4325
			classes.push('fc-draggable');                                                                                       // 4326
		}                                                                                                                    // 4327
		if (isResizable) {                                                                                                   // 4328
			classes.push('fc-resizable');                                                                                       // 4329
		}                                                                                                                    // 4330
                                                                                                                       // 4331
		return classes;                                                                                                      // 4332
	},                                                                                                                    // 4333
                                                                                                                       // 4334
                                                                                                                       // 4335
	// Utility for generating event skin-related CSS properties                                                           // 4336
	getSegSkinCss: function(seg) {                                                                                        // 4337
		var event = seg.event;                                                                                               // 4338
		var view = this.view;                                                                                                // 4339
		var source = event.source || {};                                                                                     // 4340
		var eventColor = event.color;                                                                                        // 4341
		var sourceColor = source.color;                                                                                      // 4342
		var optionColor = view.opt('eventColor');                                                                            // 4343
                                                                                                                       // 4344
		return {                                                                                                             // 4345
			'background-color':                                                                                                 // 4346
				event.backgroundColor ||                                                                                           // 4347
				eventColor ||                                                                                                      // 4348
				source.backgroundColor ||                                                                                          // 4349
				sourceColor ||                                                                                                     // 4350
				view.opt('eventBackgroundColor') ||                                                                                // 4351
				optionColor,                                                                                                       // 4352
			'border-color':                                                                                                     // 4353
				event.borderColor ||                                                                                               // 4354
				eventColor ||                                                                                                      // 4355
				source.borderColor ||                                                                                              // 4356
				sourceColor ||                                                                                                     // 4357
				view.opt('eventBorderColor') ||                                                                                    // 4358
				optionColor,                                                                                                       // 4359
			color:                                                                                                              // 4360
				event.textColor ||                                                                                                 // 4361
				source.textColor ||                                                                                                // 4362
				view.opt('eventTextColor')                                                                                         // 4363
		};                                                                                                                   // 4364
	},                                                                                                                    // 4365
                                                                                                                       // 4366
                                                                                                                       // 4367
	/* Converting events -> eventRange -> eventSpan -> eventSegs                                                          // 4368
	------------------------------------------------------------------------------------------------------------------*/  // 4369
                                                                                                                       // 4370
                                                                                                                       // 4371
	// Generates an array of segments for the given single event                                                          // 4372
	// Can accept an event "location" as well (which only has start/end and no allDay)                                    // 4373
	eventToSegs: function(event) {                                                                                        // 4374
		return this.eventsToSegs([ event ]);                                                                                 // 4375
	},                                                                                                                    // 4376
                                                                                                                       // 4377
                                                                                                                       // 4378
	eventToSpan: function(event) {                                                                                        // 4379
		return this.eventToSpans(event)[0];                                                                                  // 4380
	},                                                                                                                    // 4381
                                                                                                                       // 4382
                                                                                                                       // 4383
	// Generates spans (always unzoned) for the given event.                                                              // 4384
	// Does not do any inverting for inverse-background events.                                                           // 4385
	// Can accept an event "location" as well (which only has start/end and no allDay)                                    // 4386
	eventToSpans: function(event) {                                                                                       // 4387
		var range = this.eventToRange(event);                                                                                // 4388
		return this.eventRangeToSpans(range, event);                                                                         // 4389
	},                                                                                                                    // 4390
                                                                                                                       // 4391
                                                                                                                       // 4392
                                                                                                                       // 4393
	// Converts an array of event objects into an array of event segment objects.                                         // 4394
	// A custom `segSliceFunc` may be given for arbitrarily slicing up events.                                            // 4395
	// Doesn't guarantee an order for the resulting array.                                                                // 4396
	eventsToSegs: function(allEvents, segSliceFunc) {                                                                     // 4397
		var _this = this;                                                                                                    // 4398
		var eventsById = groupEventsById(allEvents);                                                                         // 4399
		var segs = [];                                                                                                       // 4400
                                                                                                                       // 4401
		$.each(eventsById, function(id, events) {                                                                            // 4402
			var ranges = [];                                                                                                    // 4403
			var i;                                                                                                              // 4404
                                                                                                                       // 4405
			for (i = 0; i < events.length; i++) {                                                                               // 4406
				ranges.push(_this.eventToRange(events[i]));                                                                        // 4407
			}                                                                                                                   // 4408
                                                                                                                       // 4409
			// inverse-background events (utilize only the first event in calculations)                                         // 4410
			if (isInverseBgEvent(events[0])) {                                                                                  // 4411
				ranges = _this.invertRanges(ranges);                                                                               // 4412
                                                                                                                       // 4413
				for (i = 0; i < ranges.length; i++) {                                                                              // 4414
					segs.push.apply(segs, // append to                                                                                // 4415
						_this.eventRangeToSegs(ranges[i], events[0], segSliceFunc));                                                     // 4416
				}                                                                                                                  // 4417
			}                                                                                                                   // 4418
			// normal event ranges                                                                                              // 4419
			else {                                                                                                              // 4420
				for (i = 0; i < ranges.length; i++) {                                                                              // 4421
					segs.push.apply(segs, // append to                                                                                // 4422
						_this.eventRangeToSegs(ranges[i], events[i], segSliceFunc));                                                     // 4423
				}                                                                                                                  // 4424
			}                                                                                                                   // 4425
		});                                                                                                                  // 4426
                                                                                                                       // 4427
		return segs;                                                                                                         // 4428
	},                                                                                                                    // 4429
                                                                                                                       // 4430
                                                                                                                       // 4431
	// Generates the unzoned start/end dates an event appears to occupy                                                   // 4432
	// Can accept an event "location" as well (which only has start/end and no allDay)                                    // 4433
	eventToRange: function(event) {                                                                                       // 4434
		return {                                                                                                             // 4435
			start: event.start.clone().stripZone(),                                                                             // 4436
			end: (                                                                                                              // 4437
				event.end ?                                                                                                        // 4438
					event.end.clone() :                                                                                               // 4439
					// derive the end from the start and allDay. compute allDay if necessary                                          // 4440
					this.view.calendar.getDefaultEventEnd(                                                                            // 4441
						event.allDay != null ?                                                                                           // 4442
							event.allDay :                                                                                                  // 4443
							!event.start.hasTime(),                                                                                         // 4444
						event.start                                                                                                      // 4445
					)                                                                                                                 // 4446
			).stripZone()                                                                                                       // 4447
		};                                                                                                                   // 4448
	},                                                                                                                    // 4449
                                                                                                                       // 4450
                                                                                                                       // 4451
	// Given an event's range (unzoned start/end), and the event itself,                                                  // 4452
	// slice into segments (using the segSliceFunc function if specified)                                                 // 4453
	eventRangeToSegs: function(range, event, segSliceFunc) {                                                              // 4454
		var spans = this.eventRangeToSpans(range, event);                                                                    // 4455
		var segs = [];                                                                                                       // 4456
		var i;                                                                                                               // 4457
                                                                                                                       // 4458
		for (i = 0; i < spans.length; i++) {                                                                                 // 4459
			segs.push.apply(segs, // append to                                                                                  // 4460
				this.eventSpanToSegs(spans[i], event, segSliceFunc));                                                              // 4461
		}                                                                                                                    // 4462
                                                                                                                       // 4463
		return segs;                                                                                                         // 4464
	},                                                                                                                    // 4465
                                                                                                                       // 4466
                                                                                                                       // 4467
	// Given an event's unzoned date range, return an array of "span" objects.                                            // 4468
	// Subclasses can override.                                                                                           // 4469
	eventRangeToSpans: function(range, event) {                                                                           // 4470
		return [ $.extend({}, range) ]; // copy into a single-item array                                                     // 4471
	},                                                                                                                    // 4472
                                                                                                                       // 4473
                                                                                                                       // 4474
	// Given an event's span (unzoned start/end and other misc data), and the event itself,                               // 4475
	// slices into segments and attaches event-derived properties to them.                                                // 4476
	eventSpanToSegs: function(span, event, segSliceFunc) {                                                                // 4477
		var segs = segSliceFunc ? segSliceFunc(span) : this.spanToSegs(span);                                                // 4478
		var i, seg;                                                                                                          // 4479
                                                                                                                       // 4480
		for (i = 0; i < segs.length; i++) {                                                                                  // 4481
			seg = segs[i];                                                                                                      // 4482
			seg.event = event;                                                                                                  // 4483
			seg.eventStartMS = +span.start; // TODO: not the best name after making spans unzoned                               // 4484
			seg.eventDurationMS = span.end - span.start;                                                                        // 4485
		}                                                                                                                    // 4486
                                                                                                                       // 4487
		return segs;                                                                                                         // 4488
	},                                                                                                                    // 4489
                                                                                                                       // 4490
                                                                                                                       // 4491
	// Produces a new array of range objects that will cover all the time NOT covered by the given ranges.                // 4492
	// SIDE EFFECT: will mutate the given array and will use its date references.                                         // 4493
	invertRanges: function(ranges) {                                                                                      // 4494
		var view = this.view;                                                                                                // 4495
		var viewStart = view.start.clone(); // need a copy                                                                   // 4496
		var viewEnd = view.end.clone(); // need a copy                                                                       // 4497
		var inverseRanges = [];                                                                                              // 4498
		var start = viewStart; // the end of the previous range. the start of the new range                                  // 4499
		var i, range;                                                                                                        // 4500
                                                                                                                       // 4501
		// ranges need to be in order. required for our date-walking algorithm                                               // 4502
		ranges.sort(compareRanges);                                                                                          // 4503
                                                                                                                       // 4504
		for (i = 0; i < ranges.length; i++) {                                                                                // 4505
			range = ranges[i];                                                                                                  // 4506
                                                                                                                       // 4507
			// add the span of time before the event (if there is any)                                                          // 4508
			if (range.start > start) { // compare millisecond time (skip any ambig logic)                                       // 4509
				inverseRanges.push({                                                                                               // 4510
					start: start,                                                                                                     // 4511
					end: range.start                                                                                                  // 4512
				});                                                                                                                // 4513
			}                                                                                                                   // 4514
                                                                                                                       // 4515
			start = range.end;                                                                                                  // 4516
		}                                                                                                                    // 4517
                                                                                                                       // 4518
		// add the span of time after the last event (if there is any)                                                       // 4519
		if (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4520
			inverseRanges.push({                                                                                                // 4521
				start: start,                                                                                                      // 4522
				end: viewEnd                                                                                                       // 4523
			});                                                                                                                 // 4524
		}                                                                                                                    // 4525
                                                                                                                       // 4526
		return inverseRanges;                                                                                                // 4527
	},                                                                                                                    // 4528
                                                                                                                       // 4529
                                                                                                                       // 4530
	sortEventSegs: function(segs) {                                                                                       // 4531
		segs.sort(proxy(this, 'compareEventSegs'));                                                                          // 4532
	},                                                                                                                    // 4533
                                                                                                                       // 4534
                                                                                                                       // 4535
	// A cmp function for determining which segments should take visual priority                                          // 4536
	compareEventSegs: function(seg1, seg2) {                                                                              // 4537
		return seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                           // 4538
			seg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                       // 4539
			seg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                    // 4540
			compareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);                                             // 4541
	}                                                                                                                     // 4542
                                                                                                                       // 4543
});                                                                                                                    // 4544
                                                                                                                       // 4545
                                                                                                                       // 4546
/* Utilities                                                                                                           // 4547
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4549
                                                                                                                       // 4550
function isBgEvent(event) { // returns true if background OR inverse-background                                        // 4551
	var rendering = getEventRendering(event);                                                                             // 4552
	return rendering === 'background' || rendering === 'inverse-background';                                              // 4553
}                                                                                                                      // 4554
FC.isBgEvent = isBgEvent; // export                                                                                    // 4555
                                                                                                                       // 4556
                                                                                                                       // 4557
function isInverseBgEvent(event) {                                                                                     // 4558
	return getEventRendering(event) === 'inverse-background';                                                             // 4559
}                                                                                                                      // 4560
                                                                                                                       // 4561
                                                                                                                       // 4562
function getEventRendering(event) {                                                                                    // 4563
	return firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4564
}                                                                                                                      // 4565
                                                                                                                       // 4566
                                                                                                                       // 4567
function groupEventsById(events) {                                                                                     // 4568
	var eventsById = {};                                                                                                  // 4569
	var i, event;                                                                                                         // 4570
                                                                                                                       // 4571
	for (i = 0; i < events.length; i++) {                                                                                 // 4572
		event = events[i];                                                                                                   // 4573
		(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4574
	}                                                                                                                     // 4575
                                                                                                                       // 4576
	return eventsById;                                                                                                    // 4577
}                                                                                                                      // 4578
                                                                                                                       // 4579
                                                                                                                       // 4580
// A cmp function for determining which non-inverted "ranges" (see above) happen earlier                               // 4581
function compareRanges(range1, range2) {                                                                               // 4582
	return range1.start - range2.start; // earlier ranges go first                                                        // 4583
}                                                                                                                      // 4584
                                                                                                                       // 4585
                                                                                                                       // 4586
/* External-Dragging-Element Data                                                                                      // 4587
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4589
// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4590
// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4591
FC.dataAttrPrefix = '';                                                                                                // 4592
                                                                                                                       // 4593
// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4594
// to be used for Event Object creation.                                                                               // 4595
// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4596
function getDraggedElMeta(el) {                                                                                        // 4597
	var prefix = FC.dataAttrPrefix;                                                                                       // 4598
	var eventProps; // properties for creating the event, not related to date/time                                        // 4599
	var startTime; // a Duration                                                                                          // 4600
	var duration;                                                                                                         // 4601
	var stick;                                                                                                            // 4602
                                                                                                                       // 4603
	if (prefix) { prefix += '-'; }                                                                                        // 4604
	eventProps = el.data(prefix + 'event') || null;                                                                       // 4605
                                                                                                                       // 4606
	if (eventProps) {                                                                                                     // 4607
		if (typeof eventProps === 'object') {                                                                                // 4608
			eventProps = $.extend({}, eventProps); // make a copy                                                               // 4609
		}                                                                                                                    // 4610
		else { // something like 1 or true. still signal event creation                                                      // 4611
			eventProps = {};                                                                                                    // 4612
		}                                                                                                                    // 4613
                                                                                                                       // 4614
		// pluck special-cased date/time properties                                                                          // 4615
		startTime = eventProps.start;                                                                                        // 4616
		if (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4617
		duration = eventProps.duration;                                                                                      // 4618
		stick = eventProps.stick;                                                                                            // 4619
		delete eventProps.start;                                                                                             // 4620
		delete eventProps.time;                                                                                              // 4621
		delete eventProps.duration;                                                                                          // 4622
		delete eventProps.stick;                                                                                             // 4623
	}                                                                                                                     // 4624
                                                                                                                       // 4625
	// fallback to standalone attribute values for each of the date/time properties                                       // 4626
	if (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4627
	if (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4628
	if (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4629
	if (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4630
                                                                                                                       // 4631
	// massage into correct data types                                                                                    // 4632
	startTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4633
	duration = duration != null ? moment.duration(duration) : null;                                                       // 4634
	stick = Boolean(stick);                                                                                               // 4635
                                                                                                                       // 4636
	return { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4637
}                                                                                                                      // 4638
                                                                                                                       // 4639
                                                                                                                       // 4640
;;                                                                                                                     // 4641
                                                                                                                       // 4642
/*                                                                                                                     // 4643
A set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.       // 4644
Prerequisite: the object being mixed into needs to be a *Grid*                                                         // 4645
*/                                                                                                                     // 4646
var DayTableMixin = FC.DayTableMixin = {                                                                               // 4647
                                                                                                                       // 4648
	breakOnWeeks: false, // should create a new row for each week?                                                        // 4649
	dayDates: null, // whole-day dates for each column. left to right                                                     // 4650
	dayIndices: null, // for each day from start, the offset                                                              // 4651
	daysPerRow: null,                                                                                                     // 4652
	rowCnt: null,                                                                                                         // 4653
	colCnt: null,                                                                                                         // 4654
	colHeadFormat: null,                                                                                                  // 4655
                                                                                                                       // 4656
                                                                                                                       // 4657
	// Populates internal variables used for date calculation and rendering                                               // 4658
	updateDayTable: function() {                                                                                          // 4659
		var view = this.view;                                                                                                // 4660
		var date = this.start.clone();                                                                                       // 4661
		var dayIndex = -1;                                                                                                   // 4662
		var dayIndices = [];                                                                                                 // 4663
		var dayDates = [];                                                                                                   // 4664
		var daysPerRow;                                                                                                      // 4665
		var firstDay;                                                                                                        // 4666
		var rowCnt;                                                                                                          // 4667
                                                                                                                       // 4668
		while (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4669
			if (view.isHiddenDay(date)) {                                                                                       // 4670
				dayIndices.push(dayIndex + 0.5); // mark that it's between indices                                                 // 4671
			}                                                                                                                   // 4672
			else {                                                                                                              // 4673
				dayIndex++;                                                                                                        // 4674
				dayIndices.push(dayIndex);                                                                                         // 4675
				dayDates.push(date.clone());                                                                                       // 4676
			}                                                                                                                   // 4677
			date.add(1, 'days');                                                                                                // 4678
		}                                                                                                                    // 4679
                                                                                                                       // 4680
		if (this.breakOnWeeks) {                                                                                             // 4681
			// count columns until the day-of-week repeats                                                                      // 4682
			firstDay = dayDates[0].day();                                                                                       // 4683
			for (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {                                                  // 4684
				if (dayDates[daysPerRow].day() == firstDay) {                                                                      // 4685
					break;                                                                                                            // 4686
				}                                                                                                                  // 4687
			}                                                                                                                   // 4688
			rowCnt = Math.ceil(dayDates.length / daysPerRow);                                                                   // 4689
		}                                                                                                                    // 4690
		else {                                                                                                               // 4691
			rowCnt = 1;                                                                                                         // 4692
			daysPerRow = dayDates.length;                                                                                       // 4693
		}                                                                                                                    // 4694
                                                                                                                       // 4695
		this.dayDates = dayDates;                                                                                            // 4696
		this.dayIndices = dayIndices;                                                                                        // 4697
		this.daysPerRow = daysPerRow;                                                                                        // 4698
		this.rowCnt = rowCnt;                                                                                                // 4699
		                                                                                                                     // 4700
		this.updateDayTableCols();                                                                                           // 4701
	},                                                                                                                    // 4702
                                                                                                                       // 4703
                                                                                                                       // 4704
	// Computes and assigned the colCnt property and updates any options that may be computed from it                     // 4705
	updateDayTableCols: function() {                                                                                      // 4706
		this.colCnt = this.computeColCnt();                                                                                  // 4707
		this.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();                                   // 4708
	},                                                                                                                    // 4709
                                                                                                                       // 4710
                                                                                                                       // 4711
	// Determines how many columns there should be in the table                                                           // 4712
	computeColCnt: function() {                                                                                           // 4713
		return this.daysPerRow;                                                                                              // 4714
	},                                                                                                                    // 4715
                                                                                                                       // 4716
                                                                                                                       // 4717
	// Computes the ambiguously-timed moment for the given cell                                                           // 4718
	getCellDate: function(row, col) {                                                                                     // 4719
		return this.dayDates[                                                                                                // 4720
				this.getCellDayIndex(row, col)                                                                                     // 4721
			].clone();                                                                                                          // 4722
	},                                                                                                                    // 4723
                                                                                                                       // 4724
                                                                                                                       // 4725
	// Computes the ambiguously-timed date range for the given cell                                                       // 4726
	getCellRange: function(row, col) {                                                                                    // 4727
		var start = this.getCellDate(row, col);                                                                              // 4728
		var end = start.clone().add(1, 'days');                                                                              // 4729
                                                                                                                       // 4730
		return { start: start, end: end };                                                                                   // 4731
	},                                                                                                                    // 4732
                                                                                                                       // 4733
                                                                                                                       // 4734
	// Returns the number of day cells, chronologically, from the first of the grid (0-based)                             // 4735
	getCellDayIndex: function(row, col) {                                                                                 // 4736
		return row * this.daysPerRow + this.getColDayIndex(col);                                                             // 4737
	},                                                                                                                    // 4738
                                                                                                                       // 4739
                                                                                                                       // 4740
	// Returns the numner of day cells, chronologically, from the first cell in *any given row*                           // 4741
	getColDayIndex: function(col) {                                                                                       // 4742
		if (this.isRTL) {                                                                                                    // 4743
			return this.colCnt - 1 - col;                                                                                       // 4744
		}                                                                                                                    // 4745
		else {                                                                                                               // 4746
			return col;                                                                                                         // 4747
		}                                                                                                                    // 4748
	},                                                                                                                    // 4749
                                                                                                                       // 4750
                                                                                                                       // 4751
	// Given a date, returns its chronolocial cell-index from the first cell of the grid.                                 // 4752
	// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 4753
	// If before the first offset, returns a negative number.                                                             // 4754
	// If after the last offset, returns an offset past the last cell offset.                                             // 4755
	// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 4756
	getDateDayIndex: function(date) {                                                                                     // 4757
		var dayIndices = this.dayIndices;                                                                                    // 4758
		var dayOffset = date.diff(this.start, 'days');                                                                       // 4759
                                                                                                                       // 4760
		if (dayOffset < 0) {                                                                                                 // 4761
			return dayIndices[0] - 1;                                                                                           // 4762
		}                                                                                                                    // 4763
		else if (dayOffset >= dayIndices.length) {                                                                           // 4764
			return dayIndices[dayIndices.length - 1] + 1;                                                                       // 4765
		}                                                                                                                    // 4766
		else {                                                                                                               // 4767
			return dayIndices[dayOffset];                                                                                       // 4768
		}                                                                                                                    // 4769
	},                                                                                                                    // 4770
                                                                                                                       // 4771
                                                                                                                       // 4772
	/* Options                                                                                                            // 4773
	------------------------------------------------------------------------------------------------------------------*/  // 4774
                                                                                                                       // 4775
                                                                                                                       // 4776
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4777
	computeColHeadFormat: function() {                                                                                    // 4778
		// if more than one week row, or if there are a lot of columns with not much space,                                  // 4779
		// put just the day numbers will be in each cell                                                                     // 4780
		if (this.rowCnt > 1 || this.colCnt > 10) {                                                                           // 4781
			return 'ddd'; // "Sat"                                                                                              // 4782
		}                                                                                                                    // 4783
		// multiple days, so full single date string WON'T be in title text                                                  // 4784
		else if (this.colCnt > 1) {                                                                                          // 4785
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 4786
		}                                                                                                                    // 4787
		// single day, so full single date string will probably be in title text                                             // 4788
		else {                                                                                                               // 4789
			return 'dddd'; // "Saturday"                                                                                        // 4790
		}                                                                                                                    // 4791
	},                                                                                                                    // 4792
                                                                                                                       // 4793
                                                                                                                       // 4794
	/* Slicing                                                                                                            // 4795
	------------------------------------------------------------------------------------------------------------------*/  // 4796
                                                                                                                       // 4797
                                                                                                                       // 4798
	// Slices up a date range into a segment for every week-row it intersects with                                        // 4799
	sliceRangeByRow: function(range) {                                                                                    // 4800
		var daysPerRow = this.daysPerRow;                                                                                    // 4801
		var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 4802
		var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 4803
		var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 4804
		var segs = [];                                                                                                       // 4805
		var row;                                                                                                             // 4806
		var rowFirst, rowLast; // inclusive day-index range for current row                                                  // 4807
		var segFirst, segLast; // inclusive day-index range for segment                                                      // 4808
                                                                                                                       // 4809
		for (row = 0; row < this.rowCnt; row++) {                                                                            // 4810
			rowFirst = row * daysPerRow;                                                                                        // 4811
			rowLast = rowFirst + daysPerRow - 1;                                                                                // 4812
                                                                                                                       // 4813
			// intersect segment's offset range with the row's                                                                  // 4814
			segFirst = Math.max(rangeFirst, rowFirst);                                                                          // 4815
			segLast = Math.min(rangeLast, rowLast);                                                                             // 4816
                                                                                                                       // 4817
			// deal with in-between indices                                                                                     // 4818
			segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4819
			segLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4820
                                                                                                                       // 4821
			if (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4822
				segs.push({                                                                                                        // 4823
					row: row,                                                                                                         // 4824
                                                                                                                       // 4825
					// normalize to start of row                                                                                      // 4826
					firstRowDayIndex: segFirst - rowFirst,                                                                            // 4827
					lastRowDayIndex: segLast - rowFirst,                                                                              // 4828
                                                                                                                       // 4829
					// must be matching integers to be the segment's start/end                                                        // 4830
					isStart: segFirst === rangeFirst,                                                                                 // 4831
					isEnd: segLast === rangeLast                                                                                      // 4832
				});                                                                                                                // 4833
			}                                                                                                                   // 4834
		}                                                                                                                    // 4835
                                                                                                                       // 4836
		return segs;                                                                                                         // 4837
	},                                                                                                                    // 4838
                                                                                                                       // 4839
                                                                                                                       // 4840
	// Slices up a date range into a segment for every day-cell it intersects with.                                       // 4841
	// TODO: make more DRY with sliceRangeByRow somehow.                                                                  // 4842
	sliceRangeByDay: function(range) {                                                                                    // 4843
		var daysPerRow = this.daysPerRow;                                                                                    // 4844
		var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 4845
		var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 4846
		var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 4847
		var segs = [];                                                                                                       // 4848
		var row;                                                                                                             // 4849
		var rowFirst, rowLast; // inclusive day-index range for current row                                                  // 4850
		var i;                                                                                                               // 4851
		var segFirst, segLast; // inclusive day-index range for segment                                                      // 4852
                                                                                                                       // 4853
		for (row = 0; row < this.rowCnt; row++) {                                                                            // 4854
			rowFirst = row * daysPerRow;                                                                                        // 4855
			rowLast = rowFirst + daysPerRow - 1;                                                                                // 4856
                                                                                                                       // 4857
			for (i = rowFirst; i <= rowLast; i++) {                                                                             // 4858
                                                                                                                       // 4859
				// intersect segment's offset range with the row's                                                                 // 4860
				segFirst = Math.max(rangeFirst, i);                                                                                // 4861
				segLast = Math.min(rangeLast, i);                                                                                  // 4862
                                                                                                                       // 4863
				// deal with in-between indices                                                                                    // 4864
				segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                            // 4865
				segLast = Math.floor(segLast); // in-between ends round to prev cell                                               // 4866
                                                                                                                       // 4867
				if (segFirst <= segLast) { // was there any intersection with the current row?                                     // 4868
					segs.push({                                                                                                       // 4869
						row: row,                                                                                                        // 4870
                                                                                                                       // 4871
						// normalize to start of row                                                                                     // 4872
						firstRowDayIndex: segFirst - rowFirst,                                                                           // 4873
						lastRowDayIndex: segLast - rowFirst,                                                                             // 4874
                                                                                                                       // 4875
						// must be matching integers to be the segment's start/end                                                       // 4876
						isStart: segFirst === rangeFirst,                                                                                // 4877
						isEnd: segLast === rangeLast                                                                                     // 4878
					});                                                                                                               // 4879
				}                                                                                                                  // 4880
			}                                                                                                                   // 4881
		}                                                                                                                    // 4882
                                                                                                                       // 4883
		return segs;                                                                                                         // 4884
	},                                                                                                                    // 4885
                                                                                                                       // 4886
                                                                                                                       // 4887
	/* Header Rendering                                                                                                   // 4888
	------------------------------------------------------------------------------------------------------------------*/  // 4889
                                                                                                                       // 4890
                                                                                                                       // 4891
	renderHeadHtml: function() {                                                                                          // 4892
		var view = this.view;                                                                                                // 4893
                                                                                                                       // 4894
		return '' +                                                                                                          // 4895
			'<div class="fc-row ' + view.widgetHeaderClass + '">' +                                                             // 4896
				'<table>' +                                                                                                        // 4897
					'<thead>' +                                                                                                       // 4898
						this.renderHeadTrHtml() +                                                                                        // 4899
					'</thead>' +                                                                                                      // 4900
				'</table>' +                                                                                                       // 4901
			'</div>';                                                                                                           // 4902
	},                                                                                                                    // 4903
                                                                                                                       // 4904
                                                                                                                       // 4905
	renderHeadIntroHtml: function() {                                                                                     // 4906
		return this.renderIntroHtml(); // fall back to generic                                                               // 4907
	},                                                                                                                    // 4908
                                                                                                                       // 4909
                                                                                                                       // 4910
	renderHeadTrHtml: function() {                                                                                        // 4911
		return '' +                                                                                                          // 4912
			'<tr>' +                                                                                                            // 4913
				(this.isRTL ? '' : this.renderHeadIntroHtml()) +                                                                   // 4914
				this.renderHeadDateCellsHtml() +                                                                                   // 4915
				(this.isRTL ? this.renderHeadIntroHtml() : '') +                                                                   // 4916
			'</tr>';                                                                                                            // 4917
	},                                                                                                                    // 4918
                                                                                                                       // 4919
                                                                                                                       // 4920
	renderHeadDateCellsHtml: function() {                                                                                 // 4921
		var htmls = [];                                                                                                      // 4922
		var col, date;                                                                                                       // 4923
                                                                                                                       // 4924
		for (col = 0; col < this.colCnt; col++) {                                                                            // 4925
			date = this.getCellDate(0, col);                                                                                    // 4926
			htmls.push(this.renderHeadDateCellHtml(date));                                                                      // 4927
		}                                                                                                                    // 4928
                                                                                                                       // 4929
		return htmls.join('');                                                                                               // 4930
	},                                                                                                                    // 4931
                                                                                                                       // 4932
                                                                                                                       // 4933
	// TODO: when internalApiVersion, accept an object for HTML attributes                                                // 4934
	// (colspan should be no different)                                                                                   // 4935
	renderHeadDateCellHtml: function(date, colspan, otherAttrs) {                                                         // 4936
		var view = this.view;                                                                                                // 4937
                                                                                                                       // 4938
		return '' +                                                                                                          // 4939
			'<th class="fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '"' +                          // 4940
				(this.rowCnt == 1 ?                                                                                                // 4941
					' data-date="' + date.format('YYYY-MM-DD') + '"' :                                                                // 4942
					'') +                                                                                                             // 4943
				(colspan > 1 ?                                                                                                     // 4944
					' colspan="' + colspan + '"' :                                                                                    // 4945
					'') +                                                                                                             // 4946
				(otherAttrs ?                                                                                                      // 4947
					' ' + otherAttrs :                                                                                                // 4948
					'') +                                                                                                             // 4949
			'>' +                                                                                                               // 4950
				htmlEscape(date.format(this.colHeadFormat)) +                                                                      // 4951
			'</th>';                                                                                                            // 4952
	},                                                                                                                    // 4953
                                                                                                                       // 4954
                                                                                                                       // 4955
	/* Background Rendering                                                                                               // 4956
	------------------------------------------------------------------------------------------------------------------*/  // 4957
                                                                                                                       // 4958
                                                                                                                       // 4959
	renderBgTrHtml: function(row) {                                                                                       // 4960
		return '' +                                                                                                          // 4961
			'<tr>' +                                                                                                            // 4962
				(this.isRTL ? '' : this.renderBgIntroHtml(row)) +                                                                  // 4963
				this.renderBgCellsHtml(row) +                                                                                      // 4964
				(this.isRTL ? this.renderBgIntroHtml(row) : '') +                                                                  // 4965
			'</tr>';                                                                                                            // 4966
	},                                                                                                                    // 4967
                                                                                                                       // 4968
                                                                                                                       // 4969
	renderBgIntroHtml: function(row) {                                                                                    // 4970
		return this.renderIntroHtml(); // fall back to generic                                                               // 4971
	},                                                                                                                    // 4972
                                                                                                                       // 4973
                                                                                                                       // 4974
	renderBgCellsHtml: function(row) {                                                                                    // 4975
		var htmls = [];                                                                                                      // 4976
		var col, date;                                                                                                       // 4977
                                                                                                                       // 4978
		for (col = 0; col < this.colCnt; col++) {                                                                            // 4979
			date = this.getCellDate(row, col);                                                                                  // 4980
			htmls.push(this.renderBgCellHtml(date));                                                                            // 4981
		}                                                                                                                    // 4982
                                                                                                                       // 4983
		return htmls.join('');                                                                                               // 4984
	},                                                                                                                    // 4985
                                                                                                                       // 4986
                                                                                                                       // 4987
	renderBgCellHtml: function(date, otherAttrs) {                                                                        // 4988
		var view = this.view;                                                                                                // 4989
		var classes = this.getDayClasses(date);                                                                              // 4990
                                                                                                                       // 4991
		classes.unshift('fc-day', view.widgetContentClass);                                                                  // 4992
                                                                                                                       // 4993
		return '<td class="' + classes.join(' ') + '"' +                                                                     // 4994
			' data-date="' + date.format('YYYY-MM-DD') + '"' + // if date has a time, won't format it                           // 4995
			(otherAttrs ?                                                                                                       // 4996
				' ' + otherAttrs :                                                                                                 // 4997
				'') +                                                                                                              // 4998
			'></td>';                                                                                                           // 4999
	},                                                                                                                    // 5000
                                                                                                                       // 5001
                                                                                                                       // 5002
	/* Generic                                                                                                            // 5003
	------------------------------------------------------------------------------------------------------------------*/  // 5004
                                                                                                                       // 5005
                                                                                                                       // 5006
	// Generates the default HTML intro for any row. User classes should override                                         // 5007
	renderIntroHtml: function() {                                                                                         // 5008
	},                                                                                                                    // 5009
                                                                                                                       // 5010
                                                                                                                       // 5011
	// TODO: a generic method for dealing with <tr>, RTL, intro                                                           // 5012
	// when increment internalApiVersion                                                                                  // 5013
	// wrapTr (scheduler)                                                                                                 // 5014
                                                                                                                       // 5015
                                                                                                                       // 5016
	/* Utils                                                                                                              // 5017
	------------------------------------------------------------------------------------------------------------------*/  // 5018
                                                                                                                       // 5019
                                                                                                                       // 5020
	// Applies the generic "intro" and "outro" HTML to the given cells.                                                   // 5021
	// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 5022
	bookendCells: function(trEl) {                                                                                        // 5023
		var introHtml = this.renderIntroHtml();                                                                              // 5024
                                                                                                                       // 5025
		if (introHtml) {                                                                                                     // 5026
			if (this.isRTL) {                                                                                                   // 5027
				trEl.append(introHtml);                                                                                            // 5028
			}                                                                                                                   // 5029
			else {                                                                                                              // 5030
				trEl.prepend(introHtml);                                                                                           // 5031
			}                                                                                                                   // 5032
		}                                                                                                                    // 5033
	}                                                                                                                     // 5034
                                                                                                                       // 5035
};                                                                                                                     // 5036
                                                                                                                       // 5037
;;                                                                                                                     // 5038
                                                                                                                       // 5039
/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 5040
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5042
var DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {                                                                // 5043
                                                                                                                       // 5044
	numbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 5045
	bottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 5046
                                                                                                                       // 5047
	rowEls: null, // set of fake row elements                                                                             // 5048
	cellEls: null, // set of whole-day elements comprising the row's background                                           // 5049
	helperEls: null, // set of cell skeleton elements for rendering the mock event "helper"                               // 5050
                                                                                                                       // 5051
	rowCoordCache: null,                                                                                                  // 5052
	colCoordCache: null,                                                                                                  // 5053
                                                                                                                       // 5054
                                                                                                                       // 5055
	// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 5056
	// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 5057
	// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 5058
	renderDates: function(isRigid) {                                                                                      // 5059
		var view = this.view;                                                                                                // 5060
		var rowCnt = this.rowCnt;                                                                                            // 5061
		var colCnt = this.colCnt;                                                                                            // 5062
		var html = '';                                                                                                       // 5063
		var row;                                                                                                             // 5064
		var col;                                                                                                             // 5065
                                                                                                                       // 5066
		for (row = 0; row < rowCnt; row++) {                                                                                 // 5067
			html += this.renderDayRowHtml(row, isRigid);                                                                        // 5068
		}                                                                                                                    // 5069
		this.el.html(html);                                                                                                  // 5070
                                                                                                                       // 5071
		this.rowEls = this.el.find('.fc-row');                                                                               // 5072
		this.cellEls = this.el.find('.fc-day');                                                                              // 5073
                                                                                                                       // 5074
		this.rowCoordCache = new CoordCache({                                                                                // 5075
			els: this.rowEls,                                                                                                   // 5076
			isVertical: true                                                                                                    // 5077
		});                                                                                                                  // 5078
		this.colCoordCache = new CoordCache({                                                                                // 5079
			els: this.cellEls.slice(0, this.colCnt), // only the first row                                                      // 5080
			isHorizontal: true                                                                                                  // 5081
		});                                                                                                                  // 5082
                                                                                                                       // 5083
		// trigger dayRender with each cell's element                                                                        // 5084
		for (row = 0; row < rowCnt; row++) {                                                                                 // 5085
			for (col = 0; col < colCnt; col++) {                                                                                // 5086
				view.trigger(                                                                                                      // 5087
					'dayRender',                                                                                                      // 5088
					null,                                                                                                             // 5089
					this.getCellDate(row, col),                                                                                       // 5090
					this.getCellEl(row, col)                                                                                          // 5091
				);                                                                                                                 // 5092
			}                                                                                                                   // 5093
		}                                                                                                                    // 5094
	},                                                                                                                    // 5095
                                                                                                                       // 5096
                                                                                                                       // 5097
	unrenderDates: function() {                                                                                           // 5098
		this.removeSegPopover();                                                                                             // 5099
	},                                                                                                                    // 5100
                                                                                                                       // 5101
                                                                                                                       // 5102
	renderBusinessHours: function() {                                                                                     // 5103
		var events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 5104
		var segs = this.eventsToSegs(events);                                                                                // 5105
                                                                                                                       // 5106
		this.renderFill('businessHours', segs, 'bgevent');                                                                   // 5107
	},                                                                                                                    // 5108
                                                                                                                       // 5109
                                                                                                                       // 5110
	// Generates the HTML for a single row, which is a div that wraps a table.                                            // 5111
	// `row` is the row number.                                                                                           // 5112
	renderDayRowHtml: function(row, isRigid) {                                                                            // 5113
		var view = this.view;                                                                                                // 5114
		var classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 5115
                                                                                                                       // 5116
		if (isRigid) {                                                                                                       // 5117
			classes.push('fc-rigid');                                                                                           // 5118
		}                                                                                                                    // 5119
                                                                                                                       // 5120
		return '' +                                                                                                          // 5121
			'<div class="' + classes.join(' ') + '">' +                                                                         // 5122
				'<div class="fc-bg">' +                                                                                            // 5123
					'<table>' +                                                                                                       // 5124
						this.renderBgTrHtml(row) +                                                                                       // 5125
					'</table>' +                                                                                                      // 5126
				'</div>' +                                                                                                         // 5127
				'<div class="fc-content-skeleton">' +                                                                              // 5128
					'<table>' +                                                                                                       // 5129
						(this.numbersVisible ?                                                                                           // 5130
							'<thead>' +                                                                                                     // 5131
								this.renderNumberTrHtml(row) +                                                                                 // 5132
							'</thead>' :                                                                                                    // 5133
							''                                                                                                              // 5134
							) +                                                                                                             // 5135
					'</table>' +                                                                                                      // 5136
				'</div>' +                                                                                                         // 5137
			'</div>';                                                                                                           // 5138
	},                                                                                                                    // 5139
                                                                                                                       // 5140
                                                                                                                       // 5141
	/* Grid Number Rendering                                                                                              // 5142
	------------------------------------------------------------------------------------------------------------------*/  // 5143
                                                                                                                       // 5144
                                                                                                                       // 5145
	renderNumberTrHtml: function(row) {                                                                                   // 5146
		return '' +                                                                                                          // 5147
			'<tr>' +                                                                                                            // 5148
				(this.isRTL ? '' : this.renderNumberIntroHtml(row)) +                                                              // 5149
				this.renderNumberCellsHtml(row) +                                                                                  // 5150
				(this.isRTL ? this.renderNumberIntroHtml(row) : '') +                                                              // 5151
			'</tr>';                                                                                                            // 5152
	},                                                                                                                    // 5153
                                                                                                                       // 5154
                                                                                                                       // 5155
	renderNumberIntroHtml: function(row) {                                                                                // 5156
		return this.renderIntroHtml();                                                                                       // 5157
	},                                                                                                                    // 5158
                                                                                                                       // 5159
                                                                                                                       // 5160
	renderNumberCellsHtml: function(row) {                                                                                // 5161
		var htmls = [];                                                                                                      // 5162
		var col, date;                                                                                                       // 5163
                                                                                                                       // 5164
		for (col = 0; col < this.colCnt; col++) {                                                                            // 5165
			date = this.getCellDate(row, col);                                                                                  // 5166
			htmls.push(this.renderNumberCellHtml(date));                                                                        // 5167
		}                                                                                                                    // 5168
                                                                                                                       // 5169
		return htmls.join('');                                                                                               // 5170
	},                                                                                                                    // 5171
                                                                                                                       // 5172
                                                                                                                       // 5173
	// Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.                            // 5174
	// The number row will only exist if either day numbers or week numbers are turned on.                                // 5175
	renderNumberCellHtml: function(date) {                                                                                // 5176
		var classes;                                                                                                         // 5177
                                                                                                                       // 5178
		if (!this.view.dayNumbersVisible) { // if there are week numbers but not day numbers                                 // 5179
			return '<td/>'; //  will create an empty space above events :(                                                      // 5180
		}                                                                                                                    // 5181
                                                                                                                       // 5182
		classes = this.getDayClasses(date);                                                                                  // 5183
		classes.unshift('fc-day-number');                                                                                    // 5184
                                                                                                                       // 5185
		return '' +                                                                                                          // 5186
			'<td class="' + classes.join(' ') + '" data-date="' + date.format() + '">' +                                        // 5187
				date.date() +                                                                                                      // 5188
			'</td>';                                                                                                            // 5189
	},                                                                                                                    // 5190
                                                                                                                       // 5191
                                                                                                                       // 5192
	/* Options                                                                                                            // 5193
	------------------------------------------------------------------------------------------------------------------*/  // 5194
                                                                                                                       // 5195
                                                                                                                       // 5196
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5197
	computeEventTimeFormat: function() {                                                                                  // 5198
		return this.view.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"                                                // 5199
	},                                                                                                                    // 5200
                                                                                                                       // 5201
                                                                                                                       // 5202
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5203
	computeDisplayEventEnd: function() {                                                                                  // 5204
		return this.colCnt == 1; // we'll likely have space if there's only one day                                          // 5205
	},                                                                                                                    // 5206
                                                                                                                       // 5207
                                                                                                                       // 5208
	/* Dates                                                                                                              // 5209
	------------------------------------------------------------------------------------------------------------------*/  // 5210
                                                                                                                       // 5211
                                                                                                                       // 5212
	rangeUpdated: function() {                                                                                            // 5213
		this.updateDayTable();                                                                                               // 5214
	},                                                                                                                    // 5215
                                                                                                                       // 5216
                                                                                                                       // 5217
	// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 5218
	spanToSegs: function(span) {                                                                                          // 5219
		var segs = this.sliceRangeByRow(span);                                                                               // 5220
		var i, seg;                                                                                                          // 5221
                                                                                                                       // 5222
		for (i = 0; i < segs.length; i++) {                                                                                  // 5223
			seg = segs[i];                                                                                                      // 5224
			if (this.isRTL) {                                                                                                   // 5225
				seg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;                                                           // 5226
				seg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;                                                         // 5227
			}                                                                                                                   // 5228
			else {                                                                                                              // 5229
				seg.leftCol = seg.firstRowDayIndex;                                                                                // 5230
				seg.rightCol = seg.lastRowDayIndex;                                                                                // 5231
			}                                                                                                                   // 5232
		}                                                                                                                    // 5233
                                                                                                                       // 5234
		return segs;                                                                                                         // 5235
	},                                                                                                                    // 5236
                                                                                                                       // 5237
                                                                                                                       // 5238
	/* Hit System                                                                                                         // 5239
	------------------------------------------------------------------------------------------------------------------*/  // 5240
                                                                                                                       // 5241
                                                                                                                       // 5242
	prepareHits: function() {                                                                                             // 5243
		this.colCoordCache.build();                                                                                          // 5244
		this.rowCoordCache.build();                                                                                          // 5245
		this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack                                      // 5246
	},                                                                                                                    // 5247
                                                                                                                       // 5248
                                                                                                                       // 5249
	releaseHits: function() {                                                                                             // 5250
		this.colCoordCache.clear();                                                                                          // 5251
		this.rowCoordCache.clear();                                                                                          // 5252
	},                                                                                                                    // 5253
                                                                                                                       // 5254
                                                                                                                       // 5255
	queryHit: function(leftOffset, topOffset) {                                                                           // 5256
		var col = this.colCoordCache.getHorizontalIndex(leftOffset);                                                         // 5257
		var row = this.rowCoordCache.getVerticalIndex(topOffset);                                                            // 5258
                                                                                                                       // 5259
		if (row != null && col != null) {                                                                                    // 5260
			return this.getCellHit(row, col);                                                                                   // 5261
		}                                                                                                                    // 5262
	},                                                                                                                    // 5263
                                                                                                                       // 5264
                                                                                                                       // 5265
	getHitSpan: function(hit) {                                                                                           // 5266
		return this.getCellRange(hit.row, hit.col);                                                                          // 5267
	},                                                                                                                    // 5268
                                                                                                                       // 5269
                                                                                                                       // 5270
	getHitEl: function(hit) {                                                                                             // 5271
		return this.getCellEl(hit.row, hit.col);                                                                             // 5272
	},                                                                                                                    // 5273
                                                                                                                       // 5274
                                                                                                                       // 5275
	/* Cell System                                                                                                        // 5276
	------------------------------------------------------------------------------------------------------------------*/  // 5277
	// FYI: the first column is the leftmost column, regardless of date                                                   // 5278
                                                                                                                       // 5279
                                                                                                                       // 5280
	getCellHit: function(row, col) {                                                                                      // 5281
		return {                                                                                                             // 5282
			row: row,                                                                                                           // 5283
			col: col,                                                                                                           // 5284
			component: this, // needed unfortunately :(                                                                         // 5285
			left: this.colCoordCache.getLeftOffset(col),                                                                        // 5286
			right: this.colCoordCache.getRightOffset(col),                                                                      // 5287
			top: this.rowCoordCache.getTopOffset(row),                                                                          // 5288
			bottom: this.rowCoordCache.getBottomOffset(row)                                                                     // 5289
		};                                                                                                                   // 5290
	},                                                                                                                    // 5291
                                                                                                                       // 5292
                                                                                                                       // 5293
	getCellEl: function(row, col) {                                                                                       // 5294
		return this.cellEls.eq(row * this.colCnt + col);                                                                     // 5295
	},                                                                                                                    // 5296
                                                                                                                       // 5297
                                                                                                                       // 5298
	/* Event Drag Visualization                                                                                           // 5299
	------------------------------------------------------------------------------------------------------------------*/  // 5300
	// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 5301
                                                                                                                       // 5302
                                                                                                                       // 5303
	// Renders a visual indication of an event or external element being dragged.                                         // 5304
	// `eventLocation` has zoned start and end (optional)                                                                 // 5305
	renderDrag: function(eventLocation, seg) {                                                                            // 5306
                                                                                                                       // 5307
		// always render a highlight underneath                                                                              // 5308
		this.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5309
                                                                                                                       // 5310
		// if a segment from the same calendar but another component is being dragged, render a helper event                 // 5311
		if (seg && !seg.el.closest(this.el).length) {                                                                        // 5312
                                                                                                                       // 5313
			this.renderEventLocationHelper(eventLocation, seg);                                                                 // 5314
			this.applyDragOpacity(this.helperEls);                                                                              // 5315
                                                                                                                       // 5316
			return true; // a helper has been rendered                                                                          // 5317
		}                                                                                                                    // 5318
	},                                                                                                                    // 5319
                                                                                                                       // 5320
                                                                                                                       // 5321
	// Unrenders any visual indication of a hovering event                                                                // 5322
	unrenderDrag: function() {                                                                                            // 5323
		this.unrenderHighlight();                                                                                            // 5324
		this.unrenderHelper();                                                                                               // 5325
	},                                                                                                                    // 5326
                                                                                                                       // 5327
                                                                                                                       // 5328
	/* Event Resize Visualization                                                                                         // 5329
	------------------------------------------------------------------------------------------------------------------*/  // 5330
                                                                                                                       // 5331
                                                                                                                       // 5332
	// Renders a visual indication of an event being resized                                                              // 5333
	renderEventResize: function(eventLocation, seg) {                                                                     // 5334
		this.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5335
		this.renderEventLocationHelper(eventLocation, seg);                                                                  // 5336
	},                                                                                                                    // 5337
                                                                                                                       // 5338
                                                                                                                       // 5339
	// Unrenders a visual indication of an event being resized                                                            // 5340
	unrenderEventResize: function() {                                                                                     // 5341
		this.unrenderHighlight();                                                                                            // 5342
		this.unrenderHelper();                                                                                               // 5343
	},                                                                                                                    // 5344
                                                                                                                       // 5345
                                                                                                                       // 5346
	/* Event Helper                                                                                                       // 5347
	------------------------------------------------------------------------------------------------------------------*/  // 5348
                                                                                                                       // 5349
                                                                                                                       // 5350
	// Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.              // 5351
	renderHelper: function(event, sourceSeg) {                                                                            // 5352
		var helperNodes = [];                                                                                                // 5353
		var segs = this.eventToSegs(event);                                                                                  // 5354
		var rowStructs;                                                                                                      // 5355
                                                                                                                       // 5356
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 5357
		rowStructs = this.renderSegRows(segs);                                                                               // 5358
                                                                                                                       // 5359
		// inject each new event skeleton into each associated row                                                           // 5360
		this.rowEls.each(function(row, rowNode) {                                                                            // 5361
			var rowEl = $(rowNode); // the .fc-row                                                                              // 5362
			var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned              // 5363
			var skeletonTop;                                                                                                    // 5364
                                                                                                                       // 5365
			// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 5366
			if (sourceSeg && sourceSeg.row === row) {                                                                           // 5367
				skeletonTop = sourceSeg.el.position().top;                                                                         // 5368
			}                                                                                                                   // 5369
			else {                                                                                                              // 5370
				skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 5371
			}                                                                                                                   // 5372
                                                                                                                       // 5373
			skeletonEl.css('top', skeletonTop)                                                                                  // 5374
				.find('table')                                                                                                     // 5375
					.append(rowStructs[row].tbodyEl);                                                                                 // 5376
                                                                                                                       // 5377
			rowEl.append(skeletonEl);                                                                                           // 5378
			helperNodes.push(skeletonEl[0]);                                                                                    // 5379
		});                                                                                                                  // 5380
                                                                                                                       // 5381
		this.helperEls = $(helperNodes); // array -> jQuery set                                                              // 5382
	},                                                                                                                    // 5383
                                                                                                                       // 5384
                                                                                                                       // 5385
	// Unrenders any visual indication of a mock helper event                                                             // 5386
	unrenderHelper: function() {                                                                                          // 5387
		if (this.helperEls) {                                                                                                // 5388
			this.helperEls.remove();                                                                                            // 5389
			this.helperEls = null;                                                                                              // 5390
		}                                                                                                                    // 5391
	},                                                                                                                    // 5392
                                                                                                                       // 5393
                                                                                                                       // 5394
	/* Fill System (highlight, background events, business hours)                                                         // 5395
	------------------------------------------------------------------------------------------------------------------*/  // 5396
                                                                                                                       // 5397
                                                                                                                       // 5398
	fillSegTag: 'td', // override the default tag name                                                                    // 5399
                                                                                                                       // 5400
                                                                                                                       // 5401
	// Renders a set of rectangles over the given segments of days.                                                       // 5402
	// Only returns segments that successfully rendered.                                                                  // 5403
	renderFill: function(type, segs, className) {                                                                         // 5404
		var nodes = [];                                                                                                      // 5405
		var i, seg;                                                                                                          // 5406
		var skeletonEl;                                                                                                      // 5407
                                                                                                                       // 5408
		segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 5409
                                                                                                                       // 5410
		for (i = 0; i < segs.length; i++) {                                                                                  // 5411
			seg = segs[i];                                                                                                      // 5412
			skeletonEl = this.renderFillRow(type, seg, className);                                                              // 5413
			this.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 5414
			nodes.push(skeletonEl[0]);                                                                                          // 5415
		}                                                                                                                    // 5416
                                                                                                                       // 5417
		this.elsByFill[type] = $(nodes);                                                                                     // 5418
                                                                                                                       // 5419
		return segs;                                                                                                         // 5420
	},                                                                                                                    // 5421
                                                                                                                       // 5422
                                                                                                                       // 5423
	// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 5424
	renderFillRow: function(type, seg, className) {                                                                       // 5425
		var colCnt = this.colCnt;                                                                                            // 5426
		var startCol = seg.leftCol;                                                                                          // 5427
		var endCol = seg.rightCol + 1;                                                                                       // 5428
		var skeletonEl;                                                                                                      // 5429
		var trEl;                                                                                                            // 5430
                                                                                                                       // 5431
		className = className || type.toLowerCase();                                                                         // 5432
                                                                                                                       // 5433
		skeletonEl = $(                                                                                                      // 5434
			'<div class="fc-' + className + '-skeleton">' +                                                                     // 5435
				'<table><tr/></table>' +                                                                                           // 5436
			'</div>'                                                                                                            // 5437
		);                                                                                                                   // 5438
		trEl = skeletonEl.find('tr');                                                                                        // 5439
                                                                                                                       // 5440
		if (startCol > 0) {                                                                                                  // 5441
			trEl.append('<td colspan="' + startCol + '"/>');                                                                    // 5442
		}                                                                                                                    // 5443
                                                                                                                       // 5444
		trEl.append(                                                                                                         // 5445
			seg.el.attr('colspan', endCol - startCol)                                                                           // 5446
		);                                                                                                                   // 5447
                                                                                                                       // 5448
		if (endCol < colCnt) {                                                                                               // 5449
			trEl.append('<td colspan="' + (colCnt - endCol) + '"/>');                                                           // 5450
		}                                                                                                                    // 5451
                                                                                                                       // 5452
		this.bookendCells(trEl);                                                                                             // 5453
                                                                                                                       // 5454
		return skeletonEl;                                                                                                   // 5455
	}                                                                                                                     // 5456
                                                                                                                       // 5457
});                                                                                                                    // 5458
                                                                                                                       // 5459
;;                                                                                                                     // 5460
                                                                                                                       // 5461
/* Event-rendering methods for the DayGrid class                                                                       // 5462
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5464
DayGrid.mixin({                                                                                                        // 5465
                                                                                                                       // 5466
	rowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 5467
                                                                                                                       // 5468
                                                                                                                       // 5469
	// Unrenders all events currently rendered on the grid                                                                // 5470
	unrenderEvents: function() {                                                                                          // 5471
		this.removeSegPopover(); // removes the "more.." events popover                                                      // 5472
		Grid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method                                      // 5473
	},                                                                                                                    // 5474
                                                                                                                       // 5475
                                                                                                                       // 5476
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 5477
	getEventSegs: function() {                                                                                            // 5478
		return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 5479
			.concat(this.popoverSegs || []); // append the segments from the "more..." popover                                  // 5480
	},                                                                                                                    // 5481
                                                                                                                       // 5482
                                                                                                                       // 5483
	// Renders the given background event segments onto the grid                                                          // 5484
	renderBgSegs: function(segs) {                                                                                        // 5485
                                                                                                                       // 5486
		// don't render timed background events                                                                              // 5487
		var allDaySegs = $.grep(segs, function(seg) {                                                                        // 5488
			return seg.event.allDay;                                                                                            // 5489
		});                                                                                                                  // 5490
                                                                                                                       // 5491
		return Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 5492
	},                                                                                                                    // 5493
                                                                                                                       // 5494
                                                                                                                       // 5495
	// Renders the given foreground event segments onto the grid                                                          // 5496
	renderFgSegs: function(segs) {                                                                                        // 5497
		var rowStructs;                                                                                                      // 5498
                                                                                                                       // 5499
		// render an `.el` on each seg                                                                                       // 5500
		// returns a subset of the segs. segs that were actually rendered                                                    // 5501
		segs = this.renderFgSegEls(segs);                                                                                    // 5502
                                                                                                                       // 5503
		rowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 5504
                                                                                                                       // 5505
		// append to each row's content skeleton                                                                             // 5506
		this.rowEls.each(function(i, rowNode) {                                                                              // 5507
			$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 5508
				rowStructs[i].tbodyEl                                                                                              // 5509
			);                                                                                                                  // 5510
		});                                                                                                                  // 5511
                                                                                                                       // 5512
		return segs; // return only the segs that were actually rendered                                                     // 5513
	},                                                                                                                    // 5514
                                                                                                                       // 5515
                                                                                                                       // 5516
	// Unrenders all currently rendered foreground event segments                                                         // 5517
	unrenderFgSegs: function() {                                                                                          // 5518
		var rowStructs = this.rowStructs || [];                                                                              // 5519
		var rowStruct;                                                                                                       // 5520
                                                                                                                       // 5521
		while ((rowStruct = rowStructs.pop())) {                                                                             // 5522
			rowStruct.tbodyEl.remove();                                                                                         // 5523
		}                                                                                                                    // 5524
                                                                                                                       // 5525
		this.rowStructs = null;                                                                                              // 5526
	},                                                                                                                    // 5527
                                                                                                                       // 5528
                                                                                                                       // 5529
	// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5530
	// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5531
	// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5532
	renderSegRows: function(segs) {                                                                                       // 5533
		var rowStructs = [];                                                                                                 // 5534
		var segRows;                                                                                                         // 5535
		var row;                                                                                                             // 5536
                                                                                                                       // 5537
		segRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5538
                                                                                                                       // 5539
		// iterate each row of segment groupings                                                                             // 5540
		for (row = 0; row < segRows.length; row++) {                                                                         // 5541
			rowStructs.push(                                                                                                    // 5542
				this.renderSegRow(row, segRows[row])                                                                               // 5543
			);                                                                                                                  // 5544
		}                                                                                                                    // 5545
                                                                                                                       // 5546
		return rowStructs;                                                                                                   // 5547
	},                                                                                                                    // 5548
                                                                                                                       // 5549
                                                                                                                       // 5550
	// Builds the HTML to be used for the default element for an individual segment                                       // 5551
	fgSegHtml: function(seg, disableResizing) {                                                                           // 5552
		var view = this.view;                                                                                                // 5553
		var event = seg.event;                                                                                               // 5554
		var isDraggable = view.isEventDraggable(event);                                                                      // 5555
		var isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5556
			seg.isStart && view.isEventResizableFromStart(event);                                                               // 5557
		var isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5558
			seg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5559
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5560
		var skinCss = cssToStr(this.getSegSkinCss(seg));                                                                     // 5561
		var timeHtml = '';                                                                                                   // 5562
		var timeText;                                                                                                        // 5563
		var titleHtml;                                                                                                       // 5564
                                                                                                                       // 5565
		classes.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5566
                                                                                                                       // 5567
		// Only display a timed events time if it is the starting segment                                                    // 5568
		if (seg.isStart) {                                                                                                   // 5569
			timeText = this.getEventTimeText(event);                                                                            // 5570
			if (timeText) {                                                                                                     // 5571
				timeHtml = '<span class="fc-time">' + htmlEscape(timeText) + '</span>';                                            // 5572
			}                                                                                                                   // 5573
		}                                                                                                                    // 5574
                                                                                                                       // 5575
		titleHtml =                                                                                                          // 5576
			'<span class="fc-title">' +                                                                                         // 5577
				(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5578
			'</span>';                                                                                                          // 5579
		                                                                                                                     // 5580
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 5581
				(event.url ?                                                                                                       // 5582
					' href="' + htmlEscape(event.url) + '"' :                                                                         // 5583
					''                                                                                                                // 5584
					) +                                                                                                               // 5585
				(skinCss ?                                                                                                         // 5586
					' style="' + skinCss + '"' :                                                                                      // 5587
					''                                                                                                                // 5588
					) +                                                                                                               // 5589
			'>' +                                                                                                               // 5590
				'<div class="fc-content">' +                                                                                       // 5591
					(this.isRTL ?                                                                                                     // 5592
						titleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5593
						timeHtml + ' ' + titleHtml   //                                                                                  // 5594
						) +                                                                                                              // 5595
				'</div>' +                                                                                                         // 5596
				(isResizableFromStart ?                                                                                            // 5597
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 5598
					''                                                                                                                // 5599
					) +                                                                                                               // 5600
				(isResizableFromEnd ?                                                                                              // 5601
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 5602
					''                                                                                                                // 5603
					) +                                                                                                               // 5604
			'</a>';                                                                                                             // 5605
	},                                                                                                                    // 5606
                                                                                                                       // 5607
                                                                                                                       // 5608
	// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5609
	// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5610
	// NOTE: modifies rowSegs                                                                                             // 5611
	renderSegRow: function(row, rowSegs) {                                                                                // 5612
		var colCnt = this.colCnt;                                                                                            // 5613
		var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5614
		var levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5615
		var tbody = $('<tbody/>');                                                                                           // 5616
		var segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5617
		var cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5618
		var loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5619
		var i, levelSegs;                                                                                                    // 5620
		var col;                                                                                                             // 5621
		var tr;                                                                                                              // 5622
		var j, seg;                                                                                                          // 5623
		var td;                                                                                                              // 5624
                                                                                                                       // 5625
		// populates empty cells from the current column (`col`) to `endCol`                                                 // 5626
		function emptyCellsUntil(endCol) {                                                                                   // 5627
			while (col < endCol) {                                                                                              // 5628
				// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5629
				td = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5630
				if (td) {                                                                                                          // 5631
					td.attr(                                                                                                          // 5632
						'rowspan',                                                                                                       // 5633
						parseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5634
					);                                                                                                                // 5635
				}                                                                                                                  // 5636
				else {                                                                                                             // 5637
					td = $('<td/>');                                                                                                  // 5638
					tr.append(td);                                                                                                    // 5639
				}                                                                                                                  // 5640
				cellMatrix[i][col] = td;                                                                                           // 5641
				loneCellMatrix[i][col] = td;                                                                                       // 5642
				col++;                                                                                                             // 5643
			}                                                                                                                   // 5644
		}                                                                                                                    // 5645
                                                                                                                       // 5646
		for (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5647
			levelSegs = segLevels[i];                                                                                           // 5648
			col = 0;                                                                                                            // 5649
			tr = $('<tr/>');                                                                                                    // 5650
                                                                                                                       // 5651
			segMatrix.push([]);                                                                                                 // 5652
			cellMatrix.push([]);                                                                                                // 5653
			loneCellMatrix.push([]);                                                                                            // 5654
                                                                                                                       // 5655
			// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5656
			// this single empty row is useful for styling.                                                                     // 5657
			if (levelSegs) {                                                                                                    // 5658
				for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5659
					seg = levelSegs[j];                                                                                               // 5660
                                                                                                                       // 5661
					emptyCellsUntil(seg.leftCol);                                                                                     // 5662
                                                                                                                       // 5663
					// create a container that occupies or more columns. append the event element.                                    // 5664
					td = $('<td class="fc-event-container"/>').append(seg.el);                                                        // 5665
					if (seg.leftCol != seg.rightCol) {                                                                                // 5666
						td.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5667
					}                                                                                                                 // 5668
					else { // a single-column segment                                                                                 // 5669
						loneCellMatrix[i][col] = td;                                                                                     // 5670
					}                                                                                                                 // 5671
                                                                                                                       // 5672
					while (col <= seg.rightCol) {                                                                                     // 5673
						cellMatrix[i][col] = td;                                                                                         // 5674
						segMatrix[i][col] = seg;                                                                                         // 5675
						col++;                                                                                                           // 5676
					}                                                                                                                 // 5677
                                                                                                                       // 5678
					tr.append(td);                                                                                                    // 5679
				}                                                                                                                  // 5680
			}                                                                                                                   // 5681
                                                                                                                       // 5682
			emptyCellsUntil(colCnt); // finish off the row                                                                      // 5683
			this.bookendCells(tr);                                                                                              // 5684
			tbody.append(tr);                                                                                                   // 5685
		}                                                                                                                    // 5686
                                                                                                                       // 5687
		return { // a "rowStruct"                                                                                            // 5688
			row: row, // the row number                                                                                         // 5689
			tbodyEl: tbody,                                                                                                     // 5690
			cellMatrix: cellMatrix,                                                                                             // 5691
			segMatrix: segMatrix,                                                                                               // 5692
			segLevels: segLevels,                                                                                               // 5693
			segs: rowSegs                                                                                                       // 5694
		};                                                                                                                   // 5695
	},                                                                                                                    // 5696
                                                                                                                       // 5697
                                                                                                                       // 5698
	// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5699
	// NOTE: modifies segs                                                                                                // 5700
	buildSegLevels: function(segs) {                                                                                      // 5701
		var levels = [];                                                                                                     // 5702
		var i, seg;                                                                                                          // 5703
		var j;                                                                                                               // 5704
                                                                                                                       // 5705
		// Give preference to elements with certain criteria, so they have                                                   // 5706
		// a chance to be closer to the top.                                                                                 // 5707
		this.sortEventSegs(segs);                                                                                            // 5708
		                                                                                                                     // 5709
		for (i = 0; i < segs.length; i++) {                                                                                  // 5710
			seg = segs[i];                                                                                                      // 5711
                                                                                                                       // 5712
			// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5713
			for (j = 0; j < levels.length; j++) {                                                                               // 5714
				if (!isDaySegCollision(seg, levels[j])) {                                                                          // 5715
					break;                                                                                                            // 5716
				}                                                                                                                  // 5717
			}                                                                                                                   // 5718
			// `j` now holds the desired subrow index                                                                           // 5719
			seg.level = j;                                                                                                      // 5720
                                                                                                                       // 5721
			// create new level array if needed and append segment                                                              // 5722
			(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5723
		}                                                                                                                    // 5724
                                                                                                                       // 5725
		// order segments left-to-right. very important if calendar is RTL                                                   // 5726
		for (j = 0; j < levels.length; j++) {                                                                                // 5727
			levels[j].sort(compareDaySegCols);                                                                                  // 5728
		}                                                                                                                    // 5729
                                                                                                                       // 5730
		return levels;                                                                                                       // 5731
	},                                                                                                                    // 5732
                                                                                                                       // 5733
                                                                                                                       // 5734
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5735
	groupSegRows: function(segs) {                                                                                        // 5736
		var segRows = [];                                                                                                    // 5737
		var i;                                                                                                               // 5738
                                                                                                                       // 5739
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 5740
			segRows.push([]);                                                                                                   // 5741
		}                                                                                                                    // 5742
                                                                                                                       // 5743
		for (i = 0; i < segs.length; i++) {                                                                                  // 5744
			segRows[segs[i].row].push(segs[i]);                                                                                 // 5745
		}                                                                                                                    // 5746
                                                                                                                       // 5747
		return segRows;                                                                                                      // 5748
	}                                                                                                                     // 5749
                                                                                                                       // 5750
});                                                                                                                    // 5751
                                                                                                                       // 5752
                                                                                                                       // 5753
// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5754
function isDaySegCollision(seg, otherSegs) {                                                                           // 5755
	var i, otherSeg;                                                                                                      // 5756
                                                                                                                       // 5757
	for (i = 0; i < otherSegs.length; i++) {                                                                              // 5758
		otherSeg = otherSegs[i];                                                                                             // 5759
                                                                                                                       // 5760
		if (                                                                                                                 // 5761
			otherSeg.leftCol <= seg.rightCol &&                                                                                 // 5762
			otherSeg.rightCol >= seg.leftCol                                                                                    // 5763
		) {                                                                                                                  // 5764
			return true;                                                                                                        // 5765
		}                                                                                                                    // 5766
	}                                                                                                                     // 5767
                                                                                                                       // 5768
	return false;                                                                                                         // 5769
}                                                                                                                      // 5770
                                                                                                                       // 5771
                                                                                                                       // 5772
// A cmp function for determining the leftmost event                                                                   // 5773
function compareDaySegCols(a, b) {                                                                                     // 5774
	return a.leftCol - b.leftCol;                                                                                         // 5775
}                                                                                                                      // 5776
                                                                                                                       // 5777
;;                                                                                                                     // 5778
                                                                                                                       // 5779
/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5780
----------------------------------------------------------------------------------------------------------------------*/
// NOTE: all the segs being passed around in here are foreground segs                                                  // 5782
                                                                                                                       // 5783
DayGrid.mixin({                                                                                                        // 5784
                                                                                                                       // 5785
	segPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5786
	popoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5787
                                                                                                                       // 5788
                                                                                                                       // 5789
	removeSegPopover: function() {                                                                                        // 5790
		if (this.segPopover) {                                                                                               // 5791
			this.segPopover.hide(); // in handler, will call segPopover's removeElement                                         // 5792
		}                                                                                                                    // 5793
	},                                                                                                                    // 5794
                                                                                                                       // 5795
                                                                                                                       // 5796
	// Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.                     // 5797
	// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5798
	limitRows: function(levelLimit) {                                                                                     // 5799
		var rowStructs = this.rowStructs || [];                                                                              // 5800
		var row; // row #                                                                                                    // 5801
		var rowLevelLimit;                                                                                                   // 5802
                                                                                                                       // 5803
		for (row = 0; row < rowStructs.length; row++) {                                                                      // 5804
			this.unlimitRow(row);                                                                                               // 5805
                                                                                                                       // 5806
			if (!levelLimit) {                                                                                                  // 5807
				rowLevelLimit = false;                                                                                             // 5808
			}                                                                                                                   // 5809
			else if (typeof levelLimit === 'number') {                                                                          // 5810
				rowLevelLimit = levelLimit;                                                                                        // 5811
			}                                                                                                                   // 5812
			else {                                                                                                              // 5813
				rowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5814
			}                                                                                                                   // 5815
                                                                                                                       // 5816
			if (rowLevelLimit !== false) {                                                                                      // 5817
				this.limitRow(row, rowLevelLimit);                                                                                 // 5818
			}                                                                                                                   // 5819
		}                                                                                                                    // 5820
	},                                                                                                                    // 5821
                                                                                                                       // 5822
                                                                                                                       // 5823
	// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5824
	// Assumes the row is "rigid" (maintains a constant height regardless of what is inside).                             // 5825
	// `row` is the row number.                                                                                           // 5826
	computeRowLevelLimit: function(row) {                                                                                 // 5827
		var rowEl = this.rowEls.eq(row); // the containing "fake" row div                                                    // 5828
		var rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5829
		var trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5830
		var i, trEl;                                                                                                         // 5831
		var trHeight;                                                                                                        // 5832
                                                                                                                       // 5833
		function iterInnerHeights(i, childNode) {                                                                            // 5834
			trHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5835
		}                                                                                                                    // 5836
                                                                                                                       // 5837
		// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5838
		for (i = 0; i < trEls.length; i++) {                                                                                 // 5839
			trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5840
                                                                                                                       // 5841
			// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5842
			// so instead, find the tallest inner content element.                                                              // 5843
			trHeight = 0;                                                                                                       // 5844
			trEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5845
                                                                                                                       // 5846
			if (trEl.position().top + trHeight > rowHeight) {                                                                   // 5847
				return i;                                                                                                          // 5848
			}                                                                                                                   // 5849
		}                                                                                                                    // 5850
                                                                                                                       // 5851
		return false; // should not limit at all                                                                             // 5852
	},                                                                                                                    // 5853
                                                                                                                       // 5854
                                                                                                                       // 5855
	// Limits the given grid row to the maximum number of levels and injects "more" links if necessary.                   // 5856
	// `row` is the row number.                                                                                           // 5857
	// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5858
	limitRow: function(row, levelLimit) {                                                                                 // 5859
		var _this = this;                                                                                                    // 5860
		var rowStruct = this.rowStructs[row];                                                                                // 5861
		var moreNodes = []; // array of "more" <a> links and <td> DOM nodes                                                  // 5862
		var col = 0; // col #, left-to-right (not chronologically)                                                           // 5863
		var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5864
		var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5865
		var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5866
		var i, seg;                                                                                                          // 5867
		var segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5868
		var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5869
		var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5870
		var td, rowspan;                                                                                                     // 5871
		var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell                        // 5872
		var j;                                                                                                               // 5873
		var moreTd, moreWrap, moreLink;                                                                                      // 5874
                                                                                                                       // 5875
		// Iterates through empty level cells and places "more" links inside if need be                                      // 5876
		function emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5877
			while (col < endCol) {                                                                                              // 5878
				segsBelow = _this.getCellSegs(row, col, levelLimit);                                                               // 5879
				if (segsBelow.length) {                                                                                            // 5880
					td = cellMatrix[levelLimit - 1][col];                                                                             // 5881
					moreLink = _this.renderMoreLink(row, col, segsBelow);                                                             // 5882
					moreWrap = $('<div/>').append(moreLink);                                                                          // 5883
					td.append(moreWrap);                                                                                              // 5884
					moreNodes.push(moreWrap[0]);                                                                                      // 5885
				}                                                                                                                  // 5886
				col++;                                                                                                             // 5887
			}                                                                                                                   // 5888
		}                                                                                                                    // 5889
                                                                                                                       // 5890
		if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5891
			levelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5892
			cellMatrix = rowStruct.cellMatrix;                                                                                  // 5893
                                                                                                                       // 5894
			limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5895
				.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5896
                                                                                                                       // 5897
			// iterate though segments in the last allowable level                                                              // 5898
			for (i = 0; i < levelSegs.length; i++) {                                                                            // 5899
				seg = levelSegs[i];                                                                                                // 5900
				emptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5901
                                                                                                                       // 5902
				// determine *all* segments below `seg` that occupy the same columns                                               // 5903
				colSegsBelow = [];                                                                                                 // 5904
				totalSegsBelow = 0;                                                                                                // 5905
				while (col <= seg.rightCol) {                                                                                      // 5906
					segsBelow = this.getCellSegs(row, col, levelLimit);                                                               // 5907
					colSegsBelow.push(segsBelow);                                                                                     // 5908
					totalSegsBelow += segsBelow.length;                                                                               // 5909
					col++;                                                                                                            // 5910
				}                                                                                                                  // 5911
                                                                                                                       // 5912
				if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?                         // 5913
					td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5914
					rowspan = td.attr('rowspan') || 1;                                                                                // 5915
					segMoreNodes = [];                                                                                                // 5916
                                                                                                                       // 5917
					// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5918
					for (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5919
						moreTd = $('<td class="fc-more-cell"/>').attr('rowspan', rowspan);                                               // 5920
						segsBelow = colSegsBelow[j];                                                                                     // 5921
						moreLink = this.renderMoreLink(                                                                                  // 5922
							row,                                                                                                            // 5923
							seg.leftCol + j,                                                                                                // 5924
							[ seg ].concat(segsBelow) // count seg as hidden too                                                            // 5925
						);                                                                                                               // 5926
						moreWrap = $('<div/>').append(moreLink);                                                                         // 5927
						moreTd.append(moreWrap);                                                                                         // 5928
						segMoreNodes.push(moreTd[0]);                                                                                    // 5929
						moreNodes.push(moreTd[0]);                                                                                       // 5930
					}                                                                                                                 // 5931
                                                                                                                       // 5932
					td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5933
					limitedNodes.push(td[0]);                                                                                         // 5934
				}                                                                                                                  // 5935
			}                                                                                                                   // 5936
                                                                                                                       // 5937
			emptyCellsUntil(this.colCnt); // finish off the level                                                               // 5938
			rowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5939
			rowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5940
		}                                                                                                                    // 5941
	},                                                                                                                    // 5942
                                                                                                                       // 5943
                                                                                                                       // 5944
	// Reveals all levels and removes all "more"-related elements for a grid's row.                                       // 5945
	// `row` is a row number.                                                                                             // 5946
	unlimitRow: function(row) {                                                                                           // 5947
		var rowStruct = this.rowStructs[row];                                                                                // 5948
                                                                                                                       // 5949
		if (rowStruct.moreEls) {                                                                                             // 5950
			rowStruct.moreEls.remove();                                                                                         // 5951
			rowStruct.moreEls = null;                                                                                           // 5952
		}                                                                                                                    // 5953
                                                                                                                       // 5954
		if (rowStruct.limitedEls) {                                                                                          // 5955
			rowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5956
			rowStruct.limitedEls = null;                                                                                        // 5957
		}                                                                                                                    // 5958
	},                                                                                                                    // 5959
                                                                                                                       // 5960
                                                                                                                       // 5961
	// Renders an <a> element that represents hidden event element for a cell.                                            // 5962
	// Responsible for attaching click handler as well.                                                                   // 5963
	renderMoreLink: function(row, col, hiddenSegs) {                                                                      // 5964
		var _this = this;                                                                                                    // 5965
		var view = this.view;                                                                                                // 5966
                                                                                                                       // 5967
		return $('<a class="fc-more"/>')                                                                                     // 5968
			.text(                                                                                                              // 5969
				this.getMoreLinkText(hiddenSegs.length)                                                                            // 5970
			)                                                                                                                   // 5971
			.on('click', function(ev) {                                                                                         // 5972
				var clickOption = view.opt('eventLimitClick');                                                                     // 5973
				var date = _this.getCellDate(row, col);                                                                            // 5974
				var moreEl = $(this);                                                                                              // 5975
				var dayEl = _this.getCellEl(row, col);                                                                             // 5976
				var allSegs = _this.getCellSegs(row, col);                                                                         // 5977
                                                                                                                       // 5978
				// rescope the segments to be within the cell's date                                                               // 5979
				var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5980
				var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5981
                                                                                                                       // 5982
				if (typeof clickOption === 'function') {                                                                           // 5983
					// the returned value can be an atomic option                                                                     // 5984
					clickOption = view.trigger('eventLimitClick', null, {                                                             // 5985
						date: date,                                                                                                      // 5986
						dayEl: dayEl,                                                                                                    // 5987
						moreEl: moreEl,                                                                                                  // 5988
						segs: reslicedAllSegs,                                                                                           // 5989
						hiddenSegs: reslicedHiddenSegs                                                                                   // 5990
					}, ev);                                                                                                           // 5991
				}                                                                                                                  // 5992
                                                                                                                       // 5993
				if (clickOption === 'popover') {                                                                                   // 5994
					_this.showSegPopover(row, col, moreEl, reslicedAllSegs);                                                          // 5995
				}                                                                                                                  // 5996
				else if (typeof clickOption === 'string') { // a view name                                                         // 5997
					view.calendar.zoomTo(date, clickOption);                                                                          // 5998
				}                                                                                                                  // 5999
			});                                                                                                                 // 6000
	},                                                                                                                    // 6001
                                                                                                                       // 6002
                                                                                                                       // 6003
	// Reveals the popover that displays all events within a cell                                                         // 6004
	showSegPopover: function(row, col, moreLink, segs) {                                                                  // 6005
		var _this = this;                                                                                                    // 6006
		var view = this.view;                                                                                                // 6007
		var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 6008
		var topEl; // the element we want to match the top coordinate of                                                     // 6009
		var options;                                                                                                         // 6010
                                                                                                                       // 6011
		if (this.rowCnt == 1) {                                                                                              // 6012
			topEl = view.el; // will cause the popover to cover any sort of header                                              // 6013
		}                                                                                                                    // 6014
		else {                                                                                                               // 6015
			topEl = this.rowEls.eq(row); // will align with top of row                                                          // 6016
		}                                                                                                                    // 6017
                                                                                                                       // 6018
		options = {                                                                                                          // 6019
			className: 'fc-more-popover',                                                                                       // 6020
			content: this.renderSegPopoverContent(row, col, segs),                                                              // 6021
			parentEl: this.el,                                                                                                  // 6022
			top: topEl.offset().top,                                                                                            // 6023
			autoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 6024
			viewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 6025
			hide: function() {                                                                                                  // 6026
				// kill everything when the popover is hidden                                                                      // 6027
				_this.segPopover.removeElement();                                                                                  // 6028
				_this.segPopover = null;                                                                                           // 6029
				_this.popoverSegs = null;                                                                                          // 6030
			}                                                                                                                   // 6031
		};                                                                                                                   // 6032
                                                                                                                       // 6033
		// Determine horizontal coordinate.                                                                                  // 6034
		// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 6035
		if (this.isRTL) {                                                                                                    // 6036
			options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 6037
		}                                                                                                                    // 6038
		else {                                                                                                               // 6039
			options.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 6040
		}                                                                                                                    // 6041
                                                                                                                       // 6042
		this.segPopover = new Popover(options);                                                                              // 6043
		this.segPopover.show();                                                                                              // 6044
	},                                                                                                                    // 6045
                                                                                                                       // 6046
                                                                                                                       // 6047
	// Builds the inner DOM contents of the segment popover                                                               // 6048
	renderSegPopoverContent: function(row, col, segs) {                                                                   // 6049
		var view = this.view;                                                                                                // 6050
		var isTheme = view.opt('theme');                                                                                     // 6051
		var title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));                                         // 6052
		var content = $(                                                                                                     // 6053
			'<div class="fc-header ' + view.widgetHeaderClass + '">' +                                                          // 6054
				'<span class="fc-close ' +                                                                                         // 6055
					(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 6056
				'"></span>' +                                                                                                      // 6057
				'<span class="fc-title">' +                                                                                        // 6058
					htmlEscape(title) +                                                                                               // 6059
				'</span>' +                                                                                                        // 6060
				'<div class="fc-clear"/>' +                                                                                        // 6061
			'</div>' +                                                                                                          // 6062
			'<div class="fc-body ' + view.widgetContentClass + '">' +                                                           // 6063
				'<div class="fc-event-container"></div>' +                                                                         // 6064
			'</div>'                                                                                                            // 6065
		);                                                                                                                   // 6066
		var segContainer = content.find('.fc-event-container');                                                              // 6067
		var i;                                                                                                               // 6068
                                                                                                                       // 6069
		// render each seg's `el` and only return the visible segs                                                           // 6070
		segs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 6071
		this.popoverSegs = segs;                                                                                             // 6072
                                                                                                                       // 6073
		for (i = 0; i < segs.length; i++) {                                                                                  // 6074
                                                                                                                       // 6075
			// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 6076
			// grids that want to do drag-n-drop about which cell it came from                                                  // 6077
			this.prepareHits();                                                                                                 // 6078
			segs[i].hit = this.getCellHit(row, col);                                                                            // 6079
			this.releaseHits();                                                                                                 // 6080
                                                                                                                       // 6081
			segContainer.append(segs[i].el);                                                                                    // 6082
		}                                                                                                                    // 6083
                                                                                                                       // 6084
		return content;                                                                                                      // 6085
	},                                                                                                                    // 6086
                                                                                                                       // 6087
                                                                                                                       // 6088
	// Given the events within an array of segment objects, reslice them to be in a single day                            // 6089
	resliceDaySegs: function(segs, dayDate) {                                                                             // 6090
                                                                                                                       // 6091
		// build an array of the original events                                                                             // 6092
		var events = $.map(segs, function(seg) {                                                                             // 6093
			return seg.event;                                                                                                   // 6094
		});                                                                                                                  // 6095
                                                                                                                       // 6096
		var dayStart = dayDate.clone();                                                                                      // 6097
		var dayEnd = dayStart.clone().add(1, 'days');                                                                        // 6098
		var dayRange = { start: dayStart, end: dayEnd };                                                                     // 6099
                                                                                                                       // 6100
		// slice the events with a custom slicing function                                                                   // 6101
		segs = this.eventsToSegs(                                                                                            // 6102
			events,                                                                                                             // 6103
			function(range) {                                                                                                   // 6104
				var seg = intersectRanges(range, dayRange); // undefind if no intersection                                         // 6105
				return seg ? [ seg ] : []; // must return an array of segments                                                     // 6106
			}                                                                                                                   // 6107
		);                                                                                                                   // 6108
                                                                                                                       // 6109
		// force an order because eventsToSegs doesn't guarantee one                                                         // 6110
		this.sortEventSegs(segs);                                                                                            // 6111
                                                                                                                       // 6112
		return segs;                                                                                                         // 6113
	},                                                                                                                    // 6114
                                                                                                                       // 6115
                                                                                                                       // 6116
	// Generates the text that should be inside a "more" link, given the number of events it represents                   // 6117
	getMoreLinkText: function(num) {                                                                                      // 6118
		var opt = this.view.opt('eventLimitText');                                                                           // 6119
                                                                                                                       // 6120
		if (typeof opt === 'function') {                                                                                     // 6121
			return opt(num);                                                                                                    // 6122
		}                                                                                                                    // 6123
		else {                                                                                                               // 6124
			return '+' + num + ' ' + opt;                                                                                       // 6125
		}                                                                                                                    // 6126
	},                                                                                                                    // 6127
                                                                                                                       // 6128
                                                                                                                       // 6129
	// Returns segments within a given cell.                                                                              // 6130
	// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 6131
	getCellSegs: function(row, col, startLevel) {                                                                         // 6132
		var segMatrix = this.rowStructs[row].segMatrix;                                                                      // 6133
		var level = startLevel || 0;                                                                                         // 6134
		var segs = [];                                                                                                       // 6135
		var seg;                                                                                                             // 6136
                                                                                                                       // 6137
		while (level < segMatrix.length) {                                                                                   // 6138
			seg = segMatrix[level][col];                                                                                        // 6139
			if (seg) {                                                                                                          // 6140
				segs.push(seg);                                                                                                    // 6141
			}                                                                                                                   // 6142
			level++;                                                                                                            // 6143
		}                                                                                                                    // 6144
                                                                                                                       // 6145
		return segs;                                                                                                         // 6146
	}                                                                                                                     // 6147
                                                                                                                       // 6148
});                                                                                                                    // 6149
                                                                                                                       // 6150
;;                                                                                                                     // 6151
                                                                                                                       // 6152
/* A component that renders one or more columns of vertical time slots                                                 // 6153
----------------------------------------------------------------------------------------------------------------------*/
// We mixin DayTable, even though there is only a single row of days                                                   // 6155
                                                                                                                       // 6156
var TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {                                                              // 6157
                                                                                                                       // 6158
	slotDuration: null, // duration of a "slot", a distinct time segment on given day, visualized by lines                // 6159
	snapDuration: null, // granularity of time for dragging and selecting                                                 // 6160
	snapsPerSlot: null,                                                                                                   // 6161
	minTime: null, // Duration object that denotes the first visible time of any given day                                // 6162
	maxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 6163
	labelFormat: null, // formatting string for times running along vertical axis                                         // 6164
	labelInterval: null, // duration of how often a label should be displayed for a slot                                  // 6165
                                                                                                                       // 6166
	colEls: null, // cells elements in the day-row background                                                             // 6167
	slatEls: null, // elements running horizontally across all columns                                                    // 6168
	nowIndicatorEls: null,                                                                                                // 6169
                                                                                                                       // 6170
	colCoordCache: null,                                                                                                  // 6171
	slatCoordCache: null,                                                                                                 // 6172
                                                                                                                       // 6173
                                                                                                                       // 6174
	constructor: function() {                                                                                             // 6175
		Grid.apply(this, arguments); // call the super-constructor                                                           // 6176
                                                                                                                       // 6177
		this.processOptions();                                                                                               // 6178
	},                                                                                                                    // 6179
                                                                                                                       // 6180
                                                                                                                       // 6181
	// Renders the time grid into `this.el`, which should already be assigned.                                            // 6182
	// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 6183
	renderDates: function() {                                                                                             // 6184
		this.el.html(this.renderHtml());                                                                                     // 6185
		this.colEls = this.el.find('.fc-day');                                                                               // 6186
		this.slatEls = this.el.find('.fc-slats tr');                                                                         // 6187
                                                                                                                       // 6188
		this.colCoordCache = new CoordCache({                                                                                // 6189
			els: this.colEls,                                                                                                   // 6190
			isHorizontal: true                                                                                                  // 6191
		});                                                                                                                  // 6192
		this.slatCoordCache = new CoordCache({                                                                               // 6193
			els: this.slatEls,                                                                                                  // 6194
			isVertical: true                                                                                                    // 6195
		});                                                                                                                  // 6196
                                                                                                                       // 6197
		this.renderContentSkeleton();                                                                                        // 6198
	},                                                                                                                    // 6199
                                                                                                                       // 6200
                                                                                                                       // 6201
	// Renders the basic HTML skeleton for the grid                                                                       // 6202
	renderHtml: function() {                                                                                              // 6203
		return '' +                                                                                                          // 6204
			'<div class="fc-bg">' +                                                                                             // 6205
				'<table>' +                                                                                                        // 6206
					this.renderBgTrHtml(0) + // row=0                                                                                 // 6207
				'</table>' +                                                                                                       // 6208
			'</div>' +                                                                                                          // 6209
			'<div class="fc-slats">' +                                                                                          // 6210
				'<table>' +                                                                                                        // 6211
					this.renderSlatRowHtml() +                                                                                        // 6212
				'</table>' +                                                                                                       // 6213
			'</div>';                                                                                                           // 6214
	},                                                                                                                    // 6215
                                                                                                                       // 6216
                                                                                                                       // 6217
	// Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.      // 6218
	renderSlatRowHtml: function() {                                                                                       // 6219
		var view = this.view;                                                                                                // 6220
		var isRTL = this.isRTL;                                                                                              // 6221
		var html = '';                                                                                                       // 6222
		var slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 6223
		var slotDate; // will be on the view's first day, but we only care about its time                                    // 6224
		var isLabeled;                                                                                                       // 6225
		var axisHtml;                                                                                                        // 6226
                                                                                                                       // 6227
		// Calculate the time for each slot                                                                                  // 6228
		while (slotTime < this.maxTime) {                                                                                    // 6229
			slotDate = this.start.clone().time(slotTime);                                                                       // 6230
			isLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));                                          // 6231
                                                                                                                       // 6232
			axisHtml =                                                                                                          // 6233
				'<td class="fc-axis fc-time ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                      // 6234
					(isLabeled ?                                                                                                      // 6235
						'<span>' + // for matchCellWidths                                                                                // 6236
							htmlEscape(slotDate.format(this.labelFormat)) +                                                                 // 6237
						'</span>' :                                                                                                      // 6238
						''                                                                                                               // 6239
						) +                                                                                                              // 6240
				'</td>';                                                                                                           // 6241
                                                                                                                       // 6242
			html +=                                                                                                             // 6243
				'<tr data-time="' + slotDate.format('HH:mm:ss') + '"' +                                                            // 6244
					(isLabeled ? '' : ' class="fc-minor"') +                                                                          // 6245
					'>' +                                                                                                             // 6246
					(!isRTL ? axisHtml : '') +                                                                                        // 6247
					'<td class="' + view.widgetContentClass + '"/>' +                                                                 // 6248
					(isRTL ? axisHtml : '') +                                                                                         // 6249
				"</tr>";                                                                                                           // 6250
                                                                                                                       // 6251
			slotTime.add(this.slotDuration);                                                                                    // 6252
		}                                                                                                                    // 6253
                                                                                                                       // 6254
		return html;                                                                                                         // 6255
	},                                                                                                                    // 6256
                                                                                                                       // 6257
                                                                                                                       // 6258
	/* Options                                                                                                            // 6259
	------------------------------------------------------------------------------------------------------------------*/  // 6260
                                                                                                                       // 6261
                                                                                                                       // 6262
	// Parses various options into properties of this object                                                              // 6263
	processOptions: function() {                                                                                          // 6264
		var view = this.view;                                                                                                // 6265
		var slotDuration = view.opt('slotDuration');                                                                         // 6266
		var snapDuration = view.opt('snapDuration');                                                                         // 6267
		var input;                                                                                                           // 6268
                                                                                                                       // 6269
		slotDuration = moment.duration(slotDuration);                                                                        // 6270
		snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 6271
                                                                                                                       // 6272
		this.slotDuration = slotDuration;                                                                                    // 6273
		this.snapDuration = snapDuration;                                                                                    // 6274
		this.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?                                // 6275
                                                                                                                       // 6276
		this.minResizeDuration = snapDuration; // hack                                                                       // 6277
                                                                                                                       // 6278
		this.minTime = moment.duration(view.opt('minTime'));                                                                 // 6279
		this.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 6280
                                                                                                                       // 6281
		// might be an array value (for TimelineView).                                                                       // 6282
		// if so, getting the most granular entry (the last one probably).                                                   // 6283
		input = view.opt('slotLabelFormat');                                                                                 // 6284
		if ($.isArray(input)) {                                                                                              // 6285
			input = input[input.length - 1];                                                                                    // 6286
		}                                                                                                                    // 6287
                                                                                                                       // 6288
		this.labelFormat =                                                                                                   // 6289
			input ||                                                                                                            // 6290
			view.opt('axisFormat') || // deprecated                                                                             // 6291
			view.opt('smallTimeFormat'); // the computed default                                                                // 6292
                                                                                                                       // 6293
		input = view.opt('slotLabelInterval');                                                                               // 6294
		this.labelInterval = input ?                                                                                         // 6295
			moment.duration(input) :                                                                                            // 6296
			this.computeLabelInterval(slotDuration);                                                                            // 6297
	},                                                                                                                    // 6298
                                                                                                                       // 6299
                                                                                                                       // 6300
	// Computes an automatic value for slotLabelInterval                                                                  // 6301
	computeLabelInterval: function(slotDuration) {                                                                        // 6302
		var i;                                                                                                               // 6303
		var labelInterval;                                                                                                   // 6304
		var slotsPerLabel;                                                                                                   // 6305
                                                                                                                       // 6306
		// find the smallest stock label interval that results in more than one slots-per-label                              // 6307
		for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {                                                       // 6308
			labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);                                                     // 6309
			slotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);                                              // 6310
			if (isInt(slotsPerLabel) && slotsPerLabel > 1) {                                                                    // 6311
				return labelInterval;                                                                                              // 6312
			}                                                                                                                   // 6313
		}                                                                                                                    // 6314
                                                                                                                       // 6315
		return moment.duration(slotDuration); // fall back. clone                                                            // 6316
	},                                                                                                                    // 6317
                                                                                                                       // 6318
                                                                                                                       // 6319
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 6320
	computeEventTimeFormat: function() {                                                                                  // 6321
		return this.view.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)                                              // 6322
	},                                                                                                                    // 6323
                                                                                                                       // 6324
                                                                                                                       // 6325
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 6326
	computeDisplayEventEnd: function() {                                                                                  // 6327
		return true;                                                                                                         // 6328
	},                                                                                                                    // 6329
                                                                                                                       // 6330
                                                                                                                       // 6331
	/* Hit System                                                                                                         // 6332
	------------------------------------------------------------------------------------------------------------------*/  // 6333
                                                                                                                       // 6334
                                                                                                                       // 6335
	prepareHits: function() {                                                                                             // 6336
		this.colCoordCache.build();                                                                                          // 6337
		this.slatCoordCache.build();                                                                                         // 6338
	},                                                                                                                    // 6339
                                                                                                                       // 6340
                                                                                                                       // 6341
	releaseHits: function() {                                                                                             // 6342
		this.colCoordCache.clear();                                                                                          // 6343
		// NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop                                         // 6344
	},                                                                                                                    // 6345
                                                                                                                       // 6346
                                                                                                                       // 6347
	queryHit: function(leftOffset, topOffset) {                                                                           // 6348
		var snapsPerSlot = this.snapsPerSlot;                                                                                // 6349
		var colCoordCache = this.colCoordCache;                                                                              // 6350
		var slatCoordCache = this.slatCoordCache;                                                                            // 6351
		var colIndex = colCoordCache.getHorizontalIndex(leftOffset);                                                         // 6352
		var slatIndex = slatCoordCache.getVerticalIndex(topOffset);                                                          // 6353
                                                                                                                       // 6354
		if (colIndex != null && slatIndex != null) {                                                                         // 6355
			var slatTop = slatCoordCache.getTopOffset(slatIndex);                                                               // 6356
			var slatHeight = slatCoordCache.getHeight(slatIndex);                                                               // 6357
			var partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1                          // 6358
			var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat                    // 6359
			var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;                                                          // 6360
			var snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;                                               // 6361
			var snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;                                      // 6362
                                                                                                                       // 6363
			return {                                                                                                            // 6364
				col: colIndex,                                                                                                     // 6365
				snap: snapIndex,                                                                                                   // 6366
				component: this, // needed unfortunately :(                                                                        // 6367
				left: colCoordCache.getLeftOffset(colIndex),                                                                       // 6368
				right: colCoordCache.getRightOffset(colIndex),                                                                     // 6369
				top: snapTop,                                                                                                      // 6370
				bottom: snapBottom                                                                                                 // 6371
			};                                                                                                                  // 6372
		}                                                                                                                    // 6373
	},                                                                                                                    // 6374
                                                                                                                       // 6375
                                                                                                                       // 6376
	getHitSpan: function(hit) {                                                                                           // 6377
		var start = this.getCellDate(0, hit.col); // row=0                                                                   // 6378
		var time = this.computeSnapTime(hit.snap); // pass in the snap-index                                                 // 6379
		var end;                                                                                                             // 6380
                                                                                                                       // 6381
		start.time(time);                                                                                                    // 6382
		end = start.clone().add(this.snapDuration);                                                                          // 6383
                                                                                                                       // 6384
		return { start: start, end: end };                                                                                   // 6385
	},                                                                                                                    // 6386
                                                                                                                       // 6387
                                                                                                                       // 6388
	getHitEl: function(hit) {                                                                                             // 6389
		return this.colEls.eq(hit.col);                                                                                      // 6390
	},                                                                                                                    // 6391
                                                                                                                       // 6392
                                                                                                                       // 6393
	/* Dates                                                                                                              // 6394
	------------------------------------------------------------------------------------------------------------------*/  // 6395
                                                                                                                       // 6396
                                                                                                                       // 6397
	rangeUpdated: function() {                                                                                            // 6398
		this.updateDayTable();                                                                                               // 6399
	},                                                                                                                    // 6400
                                                                                                                       // 6401
                                                                                                                       // 6402
	// Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day             // 6403
	computeSnapTime: function(snapIndex) {                                                                                // 6404
		return moment.duration(this.minTime + this.snapDuration * snapIndex);                                                // 6405
	},                                                                                                                    // 6406
                                                                                                                       // 6407
                                                                                                                       // 6408
	// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 6409
	spanToSegs: function(span) {                                                                                          // 6410
		var segs = this.sliceRangeByTimes(span);                                                                             // 6411
		var i;                                                                                                               // 6412
                                                                                                                       // 6413
		for (i = 0; i < segs.length; i++) {                                                                                  // 6414
			if (this.isRTL) {                                                                                                   // 6415
				segs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;                                                              // 6416
			}                                                                                                                   // 6417
			else {                                                                                                              // 6418
				segs[i].col = segs[i].dayIndex;                                                                                    // 6419
			}                                                                                                                   // 6420
		}                                                                                                                    // 6421
                                                                                                                       // 6422
		return segs;                                                                                                         // 6423
	},                                                                                                                    // 6424
                                                                                                                       // 6425
                                                                                                                       // 6426
	sliceRangeByTimes: function(range) {                                                                                  // 6427
		var segs = [];                                                                                                       // 6428
		var seg;                                                                                                             // 6429
		var dayIndex;                                                                                                        // 6430
		var dayDate;                                                                                                         // 6431
		var dayRange;                                                                                                        // 6432
                                                                                                                       // 6433
		for (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {                                                         // 6434
			dayDate = this.dayDates[dayIndex].clone(); // TODO: better API for this?                                            // 6435
			dayRange = {                                                                                                        // 6436
				start: dayDate.clone().time(this.minTime),                                                                         // 6437
				end: dayDate.clone().time(this.maxTime)                                                                            // 6438
			};                                                                                                                  // 6439
			seg = intersectRanges(range, dayRange); // both will be ambig timezone                                              // 6440
			if (seg) {                                                                                                          // 6441
				seg.dayIndex = dayIndex;                                                                                           // 6442
				segs.push(seg);                                                                                                    // 6443
			}                                                                                                                   // 6444
		}                                                                                                                    // 6445
                                                                                                                       // 6446
		return segs;                                                                                                         // 6447
	},                                                                                                                    // 6448
                                                                                                                       // 6449
                                                                                                                       // 6450
	/* Coordinates                                                                                                        // 6451
	------------------------------------------------------------------------------------------------------------------*/  // 6452
                                                                                                                       // 6453
                                                                                                                       // 6454
	updateSize: function(isResize) { // NOT a standard Grid method                                                        // 6455
		this.slatCoordCache.build();                                                                                         // 6456
                                                                                                                       // 6457
		if (isResize) {                                                                                                      // 6458
			this.updateSegVerticals(                                                                                            // 6459
				[].concat(this.fgSegs || [], this.bgSegs || [], this.businessSegs || [])                                           // 6460
			);                                                                                                                  // 6461
		}                                                                                                                    // 6462
	},                                                                                                                    // 6463
                                                                                                                       // 6464
                                                                                                                       // 6465
	// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 6466
	// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 6467
	computeDateTop: function(date, startOfDayDate) {                                                                      // 6468
		return this.computeTimeTop(                                                                                          // 6469
			moment.duration(                                                                                                    // 6470
				date - startOfDayDate.clone().stripTime()                                                                          // 6471
			)                                                                                                                   // 6472
		);                                                                                                                   // 6473
	},                                                                                                                    // 6474
                                                                                                                       // 6475
                                                                                                                       // 6476
	// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 6477
	computeTimeTop: function(time) {                                                                                      // 6478
		var len = this.slatEls.length;                                                                                       // 6479
		var slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 6480
		var slatIndex;                                                                                                       // 6481
		var slatRemainder;                                                                                                   // 6482
                                                                                                                       // 6483
		// compute a floating-point number for how many slats should be progressed through.                                  // 6484
		// from 0 to number of slats (inclusive)                                                                             // 6485
		// constrained because minTime/maxTime might be customized.                                                          // 6486
		slatCoverage = Math.max(0, slatCoverage);                                                                            // 6487
		slatCoverage = Math.min(len, slatCoverage);                                                                          // 6488
                                                                                                                       // 6489
		// an integer index of the furthest whole slat                                                                       // 6490
		// from 0 to number slats (*exclusive*, so len-1)                                                                    // 6491
		slatIndex = Math.floor(slatCoverage);                                                                                // 6492
		slatIndex = Math.min(slatIndex, len - 1);                                                                            // 6493
                                                                                                                       // 6494
		// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.                           // 6495
		// could be 1.0 if slatCoverage is covering *all* the slots                                                          // 6496
		slatRemainder = slatCoverage - slatIndex;                                                                            // 6497
                                                                                                                       // 6498
		return this.slatCoordCache.getTopPosition(slatIndex) +                                                               // 6499
			this.slatCoordCache.getHeight(slatIndex) * slatRemainder;                                                           // 6500
	},                                                                                                                    // 6501
                                                                                                                       // 6502
                                                                                                                       // 6503
                                                                                                                       // 6504
	/* Event Drag Visualization                                                                                           // 6505
	------------------------------------------------------------------------------------------------------------------*/  // 6506
                                                                                                                       // 6507
                                                                                                                       // 6508
	// Renders a visual indication of an event being dragged over the specified date(s).                                  // 6509
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 6510
	renderDrag: function(eventLocation, seg) {                                                                            // 6511
                                                                                                                       // 6512
		if (seg) { // if there is event information for this drag, render a helper event                                     // 6513
			this.renderEventLocationHelper(eventLocation, seg);                                                                 // 6514
                                                                                                                       // 6515
			for (var i = 0; i < this.helperSegs.length; i++) {                                                                  // 6516
				this.applyDragOpacity(this.helperSegs[i].el);                                                                      // 6517
			}                                                                                                                   // 6518
                                                                                                                       // 6519
			return true; // signal that a helper has been rendered                                                              // 6520
		}                                                                                                                    // 6521
		else {                                                                                                               // 6522
			// otherwise, just render a highlight                                                                               // 6523
			this.renderHighlight(this.eventToSpan(eventLocation));                                                              // 6524
		}                                                                                                                    // 6525
	},                                                                                                                    // 6526
                                                                                                                       // 6527
                                                                                                                       // 6528
	// Unrenders any visual indication of an event being dragged                                                          // 6529
	unrenderDrag: function() {                                                                                            // 6530
		this.unrenderHelper();                                                                                               // 6531
		this.unrenderHighlight();                                                                                            // 6532
	},                                                                                                                    // 6533
                                                                                                                       // 6534
                                                                                                                       // 6535
	/* Event Resize Visualization                                                                                         // 6536
	------------------------------------------------------------------------------------------------------------------*/  // 6537
                                                                                                                       // 6538
                                                                                                                       // 6539
	// Renders a visual indication of an event being resized                                                              // 6540
	renderEventResize: function(eventLocation, seg) {                                                                     // 6541
		this.renderEventLocationHelper(eventLocation, seg);                                                                  // 6542
	},                                                                                                                    // 6543
                                                                                                                       // 6544
                                                                                                                       // 6545
	// Unrenders any visual indication of an event being resized                                                          // 6546
	unrenderEventResize: function() {                                                                                     // 6547
		this.unrenderHelper();                                                                                               // 6548
	},                                                                                                                    // 6549
                                                                                                                       // 6550
                                                                                                                       // 6551
	/* Event Helper                                                                                                       // 6552
	------------------------------------------------------------------------------------------------------------------*/  // 6553
                                                                                                                       // 6554
                                                                                                                       // 6555
	// Renders a mock "helper" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6556
	renderHelper: function(event, sourceSeg) {                                                                            // 6557
		this.renderHelperSegs(this.eventToSegs(event), sourceSeg);                                                           // 6558
	},                                                                                                                    // 6559
                                                                                                                       // 6560
                                                                                                                       // 6561
	// Unrenders any mock helper event                                                                                    // 6562
	unrenderHelper: function() {                                                                                          // 6563
		this.unrenderHelperSegs();                                                                                           // 6564
	},                                                                                                                    // 6565
                                                                                                                       // 6566
                                                                                                                       // 6567
	/* Business Hours                                                                                                     // 6568
	------------------------------------------------------------------------------------------------------------------*/  // 6569
                                                                                                                       // 6570
                                                                                                                       // 6571
	renderBusinessHours: function() {                                                                                     // 6572
		var events = this.view.calendar.getBusinessHoursEvents();                                                            // 6573
		var segs = this.eventsToSegs(events);                                                                                // 6574
                                                                                                                       // 6575
		this.renderBusinessSegs(segs);                                                                                       // 6576
	},                                                                                                                    // 6577
                                                                                                                       // 6578
                                                                                                                       // 6579
	unrenderBusinessHours: function() {                                                                                   // 6580
		this.unrenderBusinessSegs();                                                                                         // 6581
	},                                                                                                                    // 6582
                                                                                                                       // 6583
                                                                                                                       // 6584
	/* Now Indicator                                                                                                      // 6585
	------------------------------------------------------------------------------------------------------------------*/  // 6586
                                                                                                                       // 6587
                                                                                                                       // 6588
	getNowIndicatorUnit: function() {                                                                                     // 6589
		return 'minute'; // will refresh on the minute                                                                       // 6590
	},                                                                                                                    // 6591
                                                                                                                       // 6592
                                                                                                                       // 6593
	renderNowIndicator: function(date) {                                                                                  // 6594
		// seg system might be overkill, but it handles scenario where line needs to be rendered                             // 6595
		//  more than once because of columns with the same date (resources columns for example)                             // 6596
		var segs = this.spanToSegs({ start: date, end: date });                                                              // 6597
		var top = this.computeDateTop(date, date);                                                                           // 6598
		var nodes = [];                                                                                                      // 6599
		var i;                                                                                                               // 6600
                                                                                                                       // 6601
		// render lines within the columns                                                                                   // 6602
		for (i = 0; i < segs.length; i++) {                                                                                  // 6603
			nodes.push($('<div class="fc-now-indicator fc-now-indicator-line"></div>')                                          // 6604
				.css('top', top)                                                                                                   // 6605
				.appendTo(this.colContainerEls.eq(segs[i].col))[0]);                                                               // 6606
		}                                                                                                                    // 6607
                                                                                                                       // 6608
		// render an arrow over the axis                                                                                     // 6609
		if (segs.length > 0) { // is the current time in view?                                                               // 6610
			nodes.push($('<div class="fc-now-indicator fc-now-indicator-arrow"></div>')                                         // 6611
				.css('top', top)                                                                                                   // 6612
				.appendTo(this.el.find('.fc-content-skeleton'))[0]);                                                               // 6613
		}                                                                                                                    // 6614
                                                                                                                       // 6615
		this.nowIndicatorEls = $(nodes);                                                                                     // 6616
	},                                                                                                                    // 6617
                                                                                                                       // 6618
                                                                                                                       // 6619
	unrenderNowIndicator: function() {                                                                                    // 6620
		if (this.nowIndicatorEls) {                                                                                          // 6621
			this.nowIndicatorEls.remove();                                                                                      // 6622
			this.nowIndicatorEls = null;                                                                                        // 6623
		}                                                                                                                    // 6624
	},                                                                                                                    // 6625
                                                                                                                       // 6626
                                                                                                                       // 6627
	/* Selection                                                                                                          // 6628
	------------------------------------------------------------------------------------------------------------------*/  // 6629
                                                                                                                       // 6630
                                                                                                                       // 6631
	// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6632
	renderSelection: function(span) {                                                                                     // 6633
		if (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6634
                                                                                                                       // 6635
			// normally acceps an eventLocation, span has a start/end, which is good enough                                     // 6636
			this.renderEventLocationHelper(span);                                                                               // 6637
		}                                                                                                                    // 6638
		else {                                                                                                               // 6639
			this.renderHighlight(span);                                                                                         // 6640
		}                                                                                                                    // 6641
	},                                                                                                                    // 6642
                                                                                                                       // 6643
                                                                                                                       // 6644
	// Unrenders any visual indication of a selection                                                                     // 6645
	unrenderSelection: function() {                                                                                       // 6646
		this.unrenderHelper();                                                                                               // 6647
		this.unrenderHighlight();                                                                                            // 6648
	},                                                                                                                    // 6649
                                                                                                                       // 6650
                                                                                                                       // 6651
	/* Highlight                                                                                                          // 6652
	------------------------------------------------------------------------------------------------------------------*/  // 6653
                                                                                                                       // 6654
                                                                                                                       // 6655
	renderHighlight: function(span) {                                                                                     // 6656
		this.renderHighlightSegs(this.spanToSegs(span));                                                                     // 6657
	},                                                                                                                    // 6658
                                                                                                                       // 6659
                                                                                                                       // 6660
	unrenderHighlight: function() {                                                                                       // 6661
		this.unrenderHighlightSegs();                                                                                        // 6662
	}                                                                                                                     // 6663
                                                                                                                       // 6664
});                                                                                                                    // 6665
                                                                                                                       // 6666
;;                                                                                                                     // 6667
                                                                                                                       // 6668
/* Methods for rendering SEGMENTS, pieces of content that live on the view                                             // 6669
 ( this file is no longer just for events )                                                                            // 6670
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6672
TimeGrid.mixin({                                                                                                       // 6673
                                                                                                                       // 6674
	colContainerEls: null, // containers for each column                                                                  // 6675
                                                                                                                       // 6676
	// inner-containers for each column where different types of segs live                                                // 6677
	fgContainerEls: null,                                                                                                 // 6678
	bgContainerEls: null,                                                                                                 // 6679
	helperContainerEls: null,                                                                                             // 6680
	highlightContainerEls: null,                                                                                          // 6681
	businessContainerEls: null,                                                                                           // 6682
                                                                                                                       // 6683
	// arrays of different types of displayed segments                                                                    // 6684
	fgSegs: null,                                                                                                         // 6685
	bgSegs: null,                                                                                                         // 6686
	helperSegs: null,                                                                                                     // 6687
	highlightSegs: null,                                                                                                  // 6688
	businessSegs: null,                                                                                                   // 6689
                                                                                                                       // 6690
                                                                                                                       // 6691
	// Renders the DOM that the view's content will live in                                                               // 6692
	renderContentSkeleton: function() {                                                                                   // 6693
		var cellHtml = '';                                                                                                   // 6694
		var i;                                                                                                               // 6695
		var skeletonEl;                                                                                                      // 6696
                                                                                                                       // 6697
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 6698
			cellHtml +=                                                                                                         // 6699
				'<td>' +                                                                                                           // 6700
					'<div class="fc-content-col">' +                                                                                  // 6701
						'<div class="fc-event-container fc-helper-container"></div>' +                                                   // 6702
						'<div class="fc-event-container"></div>' +                                                                       // 6703
						'<div class="fc-highlight-container"></div>' +                                                                   // 6704
						'<div class="fc-bgevent-container"></div>' +                                                                     // 6705
						'<div class="fc-business-container"></div>' +                                                                    // 6706
					'</div>' +                                                                                                        // 6707
				'</td>';                                                                                                           // 6708
		}                                                                                                                    // 6709
                                                                                                                       // 6710
		skeletonEl = $(                                                                                                      // 6711
			'<div class="fc-content-skeleton">' +                                                                               // 6712
				'<table>' +                                                                                                        // 6713
					'<tr>' + cellHtml + '</tr>' +                                                                                     // 6714
				'</table>' +                                                                                                       // 6715
			'</div>'                                                                                                            // 6716
		);                                                                                                                   // 6717
                                                                                                                       // 6718
		this.colContainerEls = skeletonEl.find('.fc-content-col');                                                           // 6719
		this.helperContainerEls = skeletonEl.find('.fc-helper-container');                                                   // 6720
		this.fgContainerEls = skeletonEl.find('.fc-event-container:not(.fc-helper-container)');                              // 6721
		this.bgContainerEls = skeletonEl.find('.fc-bgevent-container');                                                      // 6722
		this.highlightContainerEls = skeletonEl.find('.fc-highlight-container');                                             // 6723
		this.businessContainerEls = skeletonEl.find('.fc-business-container');                                               // 6724
                                                                                                                       // 6725
		this.bookendCells(skeletonEl.find('tr')); // TODO: do this on string level                                           // 6726
		this.el.append(skeletonEl);                                                                                          // 6727
	},                                                                                                                    // 6728
                                                                                                                       // 6729
                                                                                                                       // 6730
	/* Foreground Events                                                                                                  // 6731
	------------------------------------------------------------------------------------------------------------------*/  // 6732
                                                                                                                       // 6733
                                                                                                                       // 6734
	renderFgSegs: function(segs) {                                                                                        // 6735
		segs = this.renderFgSegsIntoContainers(segs, this.fgContainerEls);                                                   // 6736
		this.fgSegs = segs;                                                                                                  // 6737
		return segs; // needed for Grid::renderEvents                                                                        // 6738
	},                                                                                                                    // 6739
                                                                                                                       // 6740
                                                                                                                       // 6741
	unrenderFgSegs: function() {                                                                                          // 6742
		this.unrenderNamedSegs('fgSegs');                                                                                    // 6743
	},                                                                                                                    // 6744
                                                                                                                       // 6745
                                                                                                                       // 6746
	/* Foreground Helper Events                                                                                           // 6747
	------------------------------------------------------------------------------------------------------------------*/  // 6748
                                                                                                                       // 6749
                                                                                                                       // 6750
	renderHelperSegs: function(segs, sourceSeg) {                                                                         // 6751
		var i, seg;                                                                                                          // 6752
		var sourceEl;                                                                                                        // 6753
                                                                                                                       // 6754
		segs = this.renderFgSegsIntoContainers(segs, this.helperContainerEls);                                               // 6755
                                                                                                                       // 6756
		// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6757
		for (i = 0; i < segs.length; i++) {                                                                                  // 6758
			seg = segs[i];                                                                                                      // 6759
			if (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6760
				sourceEl = sourceSeg.el;                                                                                           // 6761
				seg.el.css({                                                                                                       // 6762
					left: sourceEl.css('left'),                                                                                       // 6763
					right: sourceEl.css('right'),                                                                                     // 6764
					'margin-left': sourceEl.css('margin-left'),                                                                       // 6765
					'margin-right': sourceEl.css('margin-right')                                                                      // 6766
				});                                                                                                                // 6767
			}                                                                                                                   // 6768
		}                                                                                                                    // 6769
                                                                                                                       // 6770
		this.helperSegs = segs;                                                                                              // 6771
	},                                                                                                                    // 6772
                                                                                                                       // 6773
                                                                                                                       // 6774
	unrenderHelperSegs: function() {                                                                                      // 6775
		this.unrenderNamedSegs('helperSegs');                                                                                // 6776
	},                                                                                                                    // 6777
                                                                                                                       // 6778
                                                                                                                       // 6779
	/* Background Events                                                                                                  // 6780
	------------------------------------------------------------------------------------------------------------------*/  // 6781
                                                                                                                       // 6782
                                                                                                                       // 6783
	renderBgSegs: function(segs) {                                                                                        // 6784
		segs = this.renderFillSegEls('bgEvent', segs); // TODO: old fill system                                              // 6785
		this.updateSegVerticals(segs);                                                                                       // 6786
		this.attachSegsByCol(this.groupSegsByCol(segs), this.bgContainerEls);                                                // 6787
		this.bgSegs = segs;                                                                                                  // 6788
		return segs; // needed for Grid::renderEvents                                                                        // 6789
	},                                                                                                                    // 6790
                                                                                                                       // 6791
                                                                                                                       // 6792
	unrenderBgSegs: function() {                                                                                          // 6793
		this.unrenderNamedSegs('bgSegs');                                                                                    // 6794
	},                                                                                                                    // 6795
                                                                                                                       // 6796
                                                                                                                       // 6797
	/* Highlight                                                                                                          // 6798
	------------------------------------------------------------------------------------------------------------------*/  // 6799
                                                                                                                       // 6800
                                                                                                                       // 6801
	renderHighlightSegs: function(segs) {                                                                                 // 6802
		segs = this.renderFillSegEls('highlight', segs); // TODO: old fill system                                            // 6803
		this.updateSegVerticals(segs);                                                                                       // 6804
		this.attachSegsByCol(this.groupSegsByCol(segs), this.highlightContainerEls);                                         // 6805
		this.highlightSegs = segs;                                                                                           // 6806
	},                                                                                                                    // 6807
                                                                                                                       // 6808
                                                                                                                       // 6809
	unrenderHighlightSegs: function() {                                                                                   // 6810
		this.unrenderNamedSegs('highlightSegs');                                                                             // 6811
	},                                                                                                                    // 6812
                                                                                                                       // 6813
                                                                                                                       // 6814
	/* Business Hours                                                                                                     // 6815
	------------------------------------------------------------------------------------------------------------------*/  // 6816
                                                                                                                       // 6817
                                                                                                                       // 6818
	renderBusinessSegs: function(segs) {                                                                                  // 6819
		segs = this.renderFillSegEls('businessHours', segs); // TODO: old fill system                                        // 6820
		this.updateSegVerticals(segs);                                                                                       // 6821
		this.attachSegsByCol(this.groupSegsByCol(segs), this.businessContainerEls);                                          // 6822
		this.businessSegs = segs;                                                                                            // 6823
	},                                                                                                                    // 6824
                                                                                                                       // 6825
                                                                                                                       // 6826
	unrenderBusinessSegs: function() {                                                                                    // 6827
		this.unrenderNamedSegs('businessSegs');                                                                              // 6828
	},                                                                                                                    // 6829
                                                                                                                       // 6830
                                                                                                                       // 6831
	/* Seg Rendering Utils                                                                                                // 6832
	------------------------------------------------------------------------------------------------------------------*/  // 6833
                                                                                                                       // 6834
                                                                                                                       // 6835
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6836
	groupSegsByCol: function(segs) {                                                                                      // 6837
		var segsByCol = [];                                                                                                  // 6838
		var i;                                                                                                               // 6839
                                                                                                                       // 6840
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 6841
			segsByCol.push([]);                                                                                                 // 6842
		}                                                                                                                    // 6843
                                                                                                                       // 6844
		for (i = 0; i < segs.length; i++) {                                                                                  // 6845
			segsByCol[segs[i].col].push(segs[i]);                                                                               // 6846
		}                                                                                                                    // 6847
                                                                                                                       // 6848
		return segsByCol;                                                                                                    // 6849
	},                                                                                                                    // 6850
                                                                                                                       // 6851
                                                                                                                       // 6852
	// Given segments grouped by column, insert the segments' elements into a parallel array of container                 // 6853
	// elements, each living within a column.                                                                             // 6854
	attachSegsByCol: function(segsByCol, containerEls) {                                                                  // 6855
		var col;                                                                                                             // 6856
		var segs;                                                                                                            // 6857
		var i;                                                                                                               // 6858
                                                                                                                       // 6859
		for (col = 0; col < this.colCnt; col++) { // iterate each column grouping                                            // 6860
			segs = segsByCol[col];                                                                                              // 6861
                                                                                                                       // 6862
			for (i = 0; i < segs.length; i++) {                                                                                 // 6863
				containerEls.eq(col).append(segs[i].el);                                                                           // 6864
			}                                                                                                                   // 6865
		}                                                                                                                    // 6866
	},                                                                                                                    // 6867
                                                                                                                       // 6868
                                                                                                                       // 6869
	// Given the name of a property of `this` object, assumed to be an array of segments,                                 // 6870
	// loops through each segment and removes from DOM. Will null-out the property afterwards.                            // 6871
	unrenderNamedSegs: function(propName) {                                                                               // 6872
		var segs = this[propName];                                                                                           // 6873
		var i;                                                                                                               // 6874
                                                                                                                       // 6875
		if (segs) {                                                                                                          // 6876
			for (i = 0; i < segs.length; i++) {                                                                                 // 6877
				segs[i].el.remove();                                                                                               // 6878
			}                                                                                                                   // 6879
			this[propName] = null;                                                                                              // 6880
		}                                                                                                                    // 6881
	},                                                                                                                    // 6882
                                                                                                                       // 6883
                                                                                                                       // 6884
                                                                                                                       // 6885
	/* Foreground Event Rendering Utils                                                                                   // 6886
	------------------------------------------------------------------------------------------------------------------*/  // 6887
                                                                                                                       // 6888
                                                                                                                       // 6889
	// Given an array of foreground segments, render a DOM element for each, computes position,                           // 6890
	// and attaches to the column inner-container elements.                                                               // 6891
	renderFgSegsIntoContainers: function(segs, containerEls) {                                                            // 6892
		var segsByCol;                                                                                                       // 6893
		var col;                                                                                                             // 6894
                                                                                                                       // 6895
		segs = this.renderFgSegEls(segs); // will call fgSegHtml                                                             // 6896
		segsByCol = this.groupSegsByCol(segs);                                                                               // 6897
                                                                                                                       // 6898
		for (col = 0; col < this.colCnt; col++) {                                                                            // 6899
			this.updateFgSegCoords(segsByCol[col]);                                                                             // 6900
		}                                                                                                                    // 6901
                                                                                                                       // 6902
		this.attachSegsByCol(segsByCol, containerEls);                                                                       // 6903
                                                                                                                       // 6904
		return segs;                                                                                                         // 6905
	},                                                                                                                    // 6906
                                                                                                                       // 6907
                                                                                                                       // 6908
	// Renders the HTML for a single event segment's default rendering                                                    // 6909
	fgSegHtml: function(seg, disableResizing) {                                                                           // 6910
		var view = this.view;                                                                                                // 6911
		var event = seg.event;                                                                                               // 6912
		var isDraggable = view.isEventDraggable(event);                                                                      // 6913
		var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6914
		var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6915
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6916
		var skinCss = cssToStr(this.getSegSkinCss(seg));                                                                     // 6917
		var timeText;                                                                                                        // 6918
		var fullTimeText; // more verbose time text. for the print stylesheet                                                // 6919
		var startTimeText; // just the start time text                                                                       // 6920
                                                                                                                       // 6921
		classes.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6922
                                                                                                                       // 6923
		if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6924
			// Don't display time text on segments that run entirely through a day.                                             // 6925
			// That would appear as midnight-midnight and would look dumb.                                                      // 6926
			// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6927
			if (seg.isStart || seg.isEnd) {                                                                                     // 6928
				timeText = this.getEventTimeText(seg);                                                                             // 6929
				fullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6930
				startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6931
			}                                                                                                                   // 6932
		} else {                                                                                                             // 6933
			// Display the normal time text for the *event's* times                                                             // 6934
			timeText = this.getEventTimeText(event);                                                                            // 6935
			fullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6936
			startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6937
		}                                                                                                                    // 6938
                                                                                                                       // 6939
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 6940
			(event.url ?                                                                                                        // 6941
				' href="' + htmlEscape(event.url) + '"' :                                                                          // 6942
				''                                                                                                                 // 6943
				) +                                                                                                                // 6944
			(skinCss ?                                                                                                          // 6945
				' style="' + skinCss + '"' :                                                                                       // 6946
				''                                                                                                                 // 6947
				) +                                                                                                                // 6948
			'>' +                                                                                                               // 6949
				'<div class="fc-content">' +                                                                                       // 6950
					(timeText ?                                                                                                       // 6951
						'<div class="fc-time"' +                                                                                         // 6952
						' data-start="' + htmlEscape(startTimeText) + '"' +                                                              // 6953
						' data-full="' + htmlEscape(fullTimeText) + '"' +                                                                // 6954
						'>' +                                                                                                            // 6955
							'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6956
						'</div>' :                                                                                                       // 6957
						''                                                                                                               // 6958
						) +                                                                                                              // 6959
					(event.title ?                                                                                                    // 6960
						'<div class="fc-title">' +                                                                                       // 6961
							htmlEscape(event.title) +                                                                                       // 6962
						'</div>' :                                                                                                       // 6963
						''                                                                                                               // 6964
						) +                                                                                                              // 6965
				'</div>' +                                                                                                         // 6966
				'<div class="fc-bg"/>' +                                                                                           // 6967
				/* TODO: write CSS for this                                                                                        // 6968
				(isResizableFromStart ?                                                                                            // 6969
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 6970
					''                                                                                                                // 6971
					) +                                                                                                               // 6972
				*/                                                                                                                 // 6973
				(isResizableFromEnd ?                                                                                              // 6974
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 6975
					''                                                                                                                // 6976
					) +                                                                                                               // 6977
			'</a>';                                                                                                             // 6978
	},                                                                                                                    // 6979
                                                                                                                       // 6980
                                                                                                                       // 6981
	/* Seg Position Utils                                                                                                 // 6982
	------------------------------------------------------------------------------------------------------------------*/  // 6983
                                                                                                                       // 6984
                                                                                                                       // 6985
	// Refreshes the CSS top/bottom coordinates for each segment element.                                                 // 6986
	// Works when called after initial render, after a window resize/zoom for example.                                    // 6987
	updateSegVerticals: function(segs) {                                                                                  // 6988
		this.computeSegVerticals(segs);                                                                                      // 6989
		this.assignSegVerticals(segs);                                                                                       // 6990
	},                                                                                                                    // 6991
                                                                                                                       // 6992
                                                                                                                       // 6993
	// For each segment in an array, computes and assigns its top and bottom properties                                   // 6994
	computeSegVerticals: function(segs) {                                                                                 // 6995
		var i, seg;                                                                                                          // 6996
                                                                                                                       // 6997
		for (i = 0; i < segs.length; i++) {                                                                                  // 6998
			seg = segs[i];                                                                                                      // 6999
			seg.top = this.computeDateTop(seg.start, seg.start);                                                                // 7000
			seg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 7001
		}                                                                                                                    // 7002
	},                                                                                                                    // 7003
                                                                                                                       // 7004
                                                                                                                       // 7005
	// Given segments that already have their top/bottom properties computed, applies those values to                     // 7006
	// the segments' elements.                                                                                            // 7007
	assignSegVerticals: function(segs) {                                                                                  // 7008
		var i, seg;                                                                                                          // 7009
                                                                                                                       // 7010
		for (i = 0; i < segs.length; i++) {                                                                                  // 7011
			seg = segs[i];                                                                                                      // 7012
			seg.el.css(this.generateSegVerticalCss(seg));                                                                       // 7013
		}                                                                                                                    // 7014
	},                                                                                                                    // 7015
                                                                                                                       // 7016
                                                                                                                       // 7017
	// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 7018
	generateSegVerticalCss: function(seg) {                                                                               // 7019
		return {                                                                                                             // 7020
			top: seg.top,                                                                                                       // 7021
			bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 7022
		};                                                                                                                   // 7023
	},                                                                                                                    // 7024
                                                                                                                       // 7025
                                                                                                                       // 7026
	/* Foreground Event Positioning Utils                                                                                 // 7027
	------------------------------------------------------------------------------------------------------------------*/  // 7028
                                                                                                                       // 7029
                                                                                                                       // 7030
	// Given segments that are assumed to all live in the *same column*,                                                  // 7031
	// compute their verical/horizontal coordinates and assign to their elements.                                         // 7032
	updateFgSegCoords: function(segs) {                                                                                   // 7033
		this.computeSegVerticals(segs); // horizontals relies on this                                                        // 7034
		this.computeFgSegHorizontals(segs); // compute horizontal coordinates, z-index's, and reorder the array              // 7035
		this.assignSegVerticals(segs);                                                                                       // 7036
		this.assignFgSegHorizontals(segs);                                                                                   // 7037
	},                                                                                                                    // 7038
                                                                                                                       // 7039
                                                                                                                       // 7040
	// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.       // 7041
	// NOTE: Also reorders the given array by date!                                                                       // 7042
	computeFgSegHorizontals: function(segs) {                                                                             // 7043
		var levels;                                                                                                          // 7044
		var level0;                                                                                                          // 7045
		var i;                                                                                                               // 7046
                                                                                                                       // 7047
		this.sortEventSegs(segs); // order by certain criteria                                                               // 7048
		levels = buildSlotSegLevels(segs);                                                                                   // 7049
		computeForwardSlotSegs(levels);                                                                                      // 7050
                                                                                                                       // 7051
		if ((level0 = levels[0])) {                                                                                          // 7052
                                                                                                                       // 7053
			for (i = 0; i < level0.length; i++) {                                                                               // 7054
				computeSlotSegPressures(level0[i]);                                                                                // 7055
			}                                                                                                                   // 7056
                                                                                                                       // 7057
			for (i = 0; i < level0.length; i++) {                                                                               // 7058
				this.computeFgSegForwardBack(level0[i], 0, 0);                                                                     // 7059
			}                                                                                                                   // 7060
		}                                                                                                                    // 7061
	},                                                                                                                    // 7062
                                                                                                                       // 7063
                                                                                                                       // 7064
	// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                          // 7065
	// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and                            // 7066
	// seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.                    // 7067
	//                                                                                                                    // 7068
	// The segment might be part of a "series", which means consecutive segments with the same pressure                   // 7069
	// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                       // 7070
	// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                          // 7071
	// coordinate of the first segment in the series.                                                                     // 7072
	computeFgSegForwardBack: function(seg, seriesBackwardPressure, seriesBackwardCoord) {                                 // 7073
		var forwardSegs = seg.forwardSegs;                                                                                   // 7074
		var i;                                                                                                               // 7075
                                                                                                                       // 7076
		if (seg.forwardCoord === undefined) { // not already computed                                                        // 7077
                                                                                                                       // 7078
			if (!forwardSegs.length) {                                                                                          // 7079
                                                                                                                       // 7080
				// if there are no forward segments, this segment should butt up against the edge                                  // 7081
				seg.forwardCoord = 1;                                                                                              // 7082
			}                                                                                                                   // 7083
			else {                                                                                                              // 7084
                                                                                                                       // 7085
				// sort highest pressure first                                                                                     // 7086
				this.sortForwardSegs(forwardSegs);                                                                                 // 7087
                                                                                                                       // 7088
				// this segment's forwardCoord will be calculated from the backwardCoord of the                                    // 7089
				// highest-pressure forward segment.                                                                               // 7090
				this.computeFgSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                     // 7091
				seg.forwardCoord = forwardSegs[0].backwardCoord;                                                                   // 7092
			}                                                                                                                   // 7093
                                                                                                                       // 7094
			// calculate the backwardCoord from the forwardCoord. consider the series                                           // 7095
			seg.backwardCoord = seg.forwardCoord -                                                                              // 7096
				(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                           // 7097
				(seriesBackwardPressure + 1); // # of segments in the series                                                       // 7098
                                                                                                                       // 7099
			// use this segment's coordinates to computed the coordinates of the less-pressurized                               // 7100
			// forward segments                                                                                                 // 7101
			for (i=0; i<forwardSegs.length; i++) {                                                                              // 7102
				this.computeFgSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);                                                 // 7103
			}                                                                                                                   // 7104
		}                                                                                                                    // 7105
	},                                                                                                                    // 7106
                                                                                                                       // 7107
                                                                                                                       // 7108
	sortForwardSegs: function(forwardSegs) {                                                                              // 7109
		forwardSegs.sort(proxy(this, 'compareForwardSegs'));                                                                 // 7110
	},                                                                                                                    // 7111
                                                                                                                       // 7112
                                                                                                                       // 7113
	// A cmp function for determining which forward segment to rely on more when computing coordinates.                   // 7114
	compareForwardSegs: function(seg1, seg2) {                                                                            // 7115
		// put higher-pressure first                                                                                         // 7116
		return seg2.forwardPressure - seg1.forwardPressure ||                                                                // 7117
			// put segments that are closer to initial edge first (and favor ones with no coords yet)                           // 7118
			(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                            // 7119
			// do normal sorting...                                                                                             // 7120
			this.compareEventSegs(seg1, seg2);                                                                                  // 7121
	},                                                                                                                    // 7122
                                                                                                                       // 7123
                                                                                                                       // 7124
	// Given foreground event segments that have already had their position coordinates computed,                         // 7125
	// assigns position-related CSS values to their elements.                                                             // 7126
	assignFgSegHorizontals: function(segs) {                                                                              // 7127
		var i, seg;                                                                                                          // 7128
                                                                                                                       // 7129
		for (i = 0; i < segs.length; i++) {                                                                                  // 7130
			seg = segs[i];                                                                                                      // 7131
			seg.el.css(this.generateFgSegHorizontalCss(seg));                                                                   // 7132
                                                                                                                       // 7133
			// if the height is short, add a className for alternate styling                                                    // 7134
			if (seg.bottom - seg.top < 30) {                                                                                    // 7135
				seg.el.addClass('fc-short');                                                                                       // 7136
			}                                                                                                                   // 7137
		}                                                                                                                    // 7138
	},                                                                                                                    // 7139
                                                                                                                       // 7140
                                                                                                                       // 7141
	// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 7142
	// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 7143
	generateFgSegHorizontalCss: function(seg) {                                                                           // 7144
		var shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 7145
		var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 7146
		var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 7147
		var props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 7148
		var left; // amount of space from left edge, a fraction of the total width                                           // 7149
		var right; // amount of space from right edge, a fraction of the total width                                         // 7150
                                                                                                                       // 7151
		if (shouldOverlap) {                                                                                                 // 7152
			// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 7153
			forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 7154
		}                                                                                                                    // 7155
                                                                                                                       // 7156
		if (this.isRTL) {                                                                                                    // 7157
			left = 1 - forwardCoord;                                                                                            // 7158
			right = backwardCoord;                                                                                              // 7159
		}                                                                                                                    // 7160
		else {                                                                                                               // 7161
			left = backwardCoord;                                                                                               // 7162
			right = 1 - forwardCoord;                                                                                           // 7163
		}                                                                                                                    // 7164
                                                                                                                       // 7165
		props.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 7166
		props.left = left * 100 + '%';                                                                                       // 7167
		props.right = right * 100 + '%';                                                                                     // 7168
                                                                                                                       // 7169
		if (shouldOverlap && seg.forwardPressure) {                                                                          // 7170
			// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 7171
			props[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 7172
		}                                                                                                                    // 7173
                                                                                                                       // 7174
		return props;                                                                                                        // 7175
	}                                                                                                                     // 7176
                                                                                                                       // 7177
});                                                                                                                    // 7178
                                                                                                                       // 7179
                                                                                                                       // 7180
// Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is      // 7181
// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
function buildSlotSegLevels(segs) {                                                                                    // 7183
	var levels = [];                                                                                                      // 7184
	var i, seg;                                                                                                           // 7185
	var j;                                                                                                                // 7186
                                                                                                                       // 7187
	for (i=0; i<segs.length; i++) {                                                                                       // 7188
		seg = segs[i];                                                                                                       // 7189
                                                                                                                       // 7190
		// go through all the levels and stop on the first level where there are no collisions                               // 7191
		for (j=0; j<levels.length; j++) {                                                                                    // 7192
			if (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 7193
				break;                                                                                                             // 7194
			}                                                                                                                   // 7195
		}                                                                                                                    // 7196
                                                                                                                       // 7197
		seg.level = j;                                                                                                       // 7198
                                                                                                                       // 7199
		(levels[j] || (levels[j] = [])).push(seg);                                                                           // 7200
	}                                                                                                                     // 7201
                                                                                                                       // 7202
	return levels;                                                                                                        // 7203
}                                                                                                                      // 7204
                                                                                                                       // 7205
                                                                                                                       // 7206
// For every segment, figure out the other segments that are in subsequent                                             // 7207
// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 7208
function computeForwardSlotSegs(levels) {                                                                              // 7209
	var i, level;                                                                                                         // 7210
	var j, seg;                                                                                                           // 7211
	var k;                                                                                                                // 7212
                                                                                                                       // 7213
	for (i=0; i<levels.length; i++) {                                                                                     // 7214
		level = levels[i];                                                                                                   // 7215
                                                                                                                       // 7216
		for (j=0; j<level.length; j++) {                                                                                     // 7217
			seg = level[j];                                                                                                     // 7218
                                                                                                                       // 7219
			seg.forwardSegs = [];                                                                                               // 7220
			for (k=i+1; k<levels.length; k++) {                                                                                 // 7221
				computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 7222
			}                                                                                                                   // 7223
		}                                                                                                                    // 7224
	}                                                                                                                     // 7225
}                                                                                                                      // 7226
                                                                                                                       // 7227
                                                                                                                       // 7228
// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 7229
// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 7230
function computeSlotSegPressures(seg) {                                                                                // 7231
	var forwardSegs = seg.forwardSegs;                                                                                    // 7232
	var forwardPressure = 0;                                                                                              // 7233
	var i, forwardSeg;                                                                                                    // 7234
                                                                                                                       // 7235
	if (seg.forwardPressure === undefined) { // not already computed                                                      // 7236
                                                                                                                       // 7237
		for (i=0; i<forwardSegs.length; i++) {                                                                               // 7238
			forwardSeg = forwardSegs[i];                                                                                        // 7239
                                                                                                                       // 7240
			// figure out the child's maximum forward path                                                                      // 7241
			computeSlotSegPressures(forwardSeg);                                                                                // 7242
                                                                                                                       // 7243
			// either use the existing maximum, or use the child's forward pressure                                             // 7244
			// plus one (for the forwardSeg itself)                                                                             // 7245
			forwardPressure = Math.max(                                                                                         // 7246
				forwardPressure,                                                                                                   // 7247
				1 + forwardSeg.forwardPressure                                                                                     // 7248
			);                                                                                                                  // 7249
		}                                                                                                                    // 7250
                                                                                                                       // 7251
		seg.forwardPressure = forwardPressure;                                                                               // 7252
	}                                                                                                                     // 7253
}                                                                                                                      // 7254
                                                                                                                       // 7255
                                                                                                                       // 7256
// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 7257
// Append into an optionally-supplied `results` array and return.                                                      // 7258
function computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 7259
	results = results || [];                                                                                              // 7260
                                                                                                                       // 7261
	for (var i=0; i<otherSegs.length; i++) {                                                                              // 7262
		if (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 7263
			results.push(otherSegs[i]);                                                                                         // 7264
		}                                                                                                                    // 7265
	}                                                                                                                     // 7266
                                                                                                                       // 7267
	return results;                                                                                                       // 7268
}                                                                                                                      // 7269
                                                                                                                       // 7270
                                                                                                                       // 7271
// Do these segments occupy the same vertical space?                                                                   // 7272
function isSlotSegCollision(seg1, seg2) {                                                                              // 7273
	return seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 7274
}                                                                                                                      // 7275
                                                                                                                       // 7276
;;                                                                                                                     // 7277
                                                                                                                       // 7278
/* An abstract class from which other views inherit from                                                               // 7279
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 7281
var View = FC.View = Class.extend({                                                                                    // 7282
                                                                                                                       // 7283
	type: null, // subclass' view name (string)                                                                           // 7284
	name: null, // deprecated. use `type` instead                                                                         // 7285
	title: null, // the text that will be displayed in the header's title                                                 // 7286
                                                                                                                       // 7287
	calendar: null, // owner Calendar object                                                                              // 7288
	options: null, // hash containing all options. already merged with view-specific-options                              // 7289
	el: null, // the view's containing element. set by Calendar                                                           // 7290
                                                                                                                       // 7291
	displaying: null, // a promise representing the state of rendering. null if no render requested                       // 7292
	isSkeletonRendered: false,                                                                                            // 7293
	isEventsRendered: false,                                                                                              // 7294
                                                                                                                       // 7295
	// range the view is actually displaying (moments)                                                                    // 7296
	start: null,                                                                                                          // 7297
	end: null, // exclusive                                                                                               // 7298
                                                                                                                       // 7299
	// range the view is formally responsible for (moments)                                                               // 7300
	// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 7301
	intervalStart: null,                                                                                                  // 7302
	intervalEnd: null, // exclusive                                                                                       // 7303
	intervalDuration: null,                                                                                               // 7304
	intervalUnit: null, // name of largest unit being displayed, like "month" or "week"                                   // 7305
                                                                                                                       // 7306
	isRTL: false,                                                                                                         // 7307
	isSelected: false, // boolean whether a range of time is user-selected or not                                         // 7308
                                                                                                                       // 7309
	eventOrderSpecs: null, // criteria for ordering events when they have same date/time                                  // 7310
                                                                                                                       // 7311
	// subclasses can optionally use a scroll container                                                                   // 7312
	scrollerEl: null, // the element that will most likely scroll when content is too tall                                // 7313
	scrollTop: null, // cached vertical scroll value                                                                      // 7314
                                                                                                                       // 7315
	// classNames styled by jqui themes                                                                                   // 7316
	widgetHeaderClass: null,                                                                                              // 7317
	widgetContentClass: null,                                                                                             // 7318
	highlightStateClass: null,                                                                                            // 7319
                                                                                                                       // 7320
	// for date utils, computed from options                                                                              // 7321
	nextDayThreshold: null,                                                                                               // 7322
	isHiddenDayHash: null,                                                                                                // 7323
                                                                                                                       // 7324
	// document handlers, bound to `this` object                                                                          // 7325
	documentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 7326
                                                                                                                       // 7327
	// now indicator                                                                                                      // 7328
	isNowIndicatorRendered: null,                                                                                         // 7329
	initialNowDate: null, // result first getNow call                                                                     // 7330
	initialNowQueriedMs: null, // ms time the getNow was called                                                           // 7331
	nowIndicatorTimeoutID: null, // for refresh timing of now indicator                                                   // 7332
	nowIndicatorIntervalID: null, // "                                                                                    // 7333
                                                                                                                       // 7334
                                                                                                                       // 7335
	constructor: function(calendar, type, options, intervalDuration) {                                                    // 7336
                                                                                                                       // 7337
		this.calendar = calendar;                                                                                            // 7338
		this.type = this.name = type; // .name is deprecated                                                                 // 7339
		this.options = options;                                                                                              // 7340
		this.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 7341
                                                                                                                       // 7342
		this.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 7343
		this.initThemingProps();                                                                                             // 7344
		this.initHiddenDays();                                                                                               // 7345
		this.isRTL = this.opt('isRTL');                                                                                      // 7346
                                                                                                                       // 7347
		this.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));                                                      // 7348
                                                                                                                       // 7349
		this.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 7350
                                                                                                                       // 7351
		this.initialize();                                                                                                   // 7352
	},                                                                                                                    // 7353
                                                                                                                       // 7354
                                                                                                                       // 7355
	// A good place for subclasses to initialize member variables                                                         // 7356
	initialize: function() {                                                                                              // 7357
		// subclasses can implement                                                                                          // 7358
	},                                                                                                                    // 7359
                                                                                                                       // 7360
                                                                                                                       // 7361
	// Retrieves an option with the given name                                                                            // 7362
	opt: function(name) {                                                                                                 // 7363
		return this.options[name];                                                                                           // 7364
	},                                                                                                                    // 7365
                                                                                                                       // 7366
                                                                                                                       // 7367
	// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 7368
	trigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 7369
		var calendar = this.calendar;                                                                                        // 7370
                                                                                                                       // 7371
		return calendar.trigger.apply(                                                                                       // 7372
			calendar,                                                                                                           // 7373
			[name, thisObj || this].concat(                                                                                     // 7374
				Array.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 7375
				[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 7376
			)                                                                                                                   // 7377
		);                                                                                                                   // 7378
	},                                                                                                                    // 7379
                                                                                                                       // 7380
                                                                                                                       // 7381
	/* Dates                                                                                                              // 7382
	------------------------------------------------------------------------------------------------------------------*/  // 7383
                                                                                                                       // 7384
                                                                                                                       // 7385
	// Updates all internal dates to center around the given current unzoned date.                                        // 7386
	setDate: function(date) {                                                                                             // 7387
		this.setRange(this.computeRange(date));                                                                              // 7388
	},                                                                                                                    // 7389
                                                                                                                       // 7390
                                                                                                                       // 7391
	// Updates all internal dates for displaying the given unzoned range.                                                 // 7392
	setRange: function(range) {                                                                                           // 7393
		$.extend(this, range); // assigns every property to this object's member variables                                   // 7394
		this.updateTitle();                                                                                                  // 7395
	},                                                                                                                    // 7396
                                                                                                                       // 7397
                                                                                                                       // 7398
	// Given a single current unzoned date, produce information about what range to display.                              // 7399
	// Subclasses can override. Must return all properties.                                                               // 7400
	computeRange: function(date) {                                                                                        // 7401
		var intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 7402
		var intervalStart = date.clone().startOf(intervalUnit);                                                              // 7403
		var intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 7404
		var start, end;                                                                                                      // 7405
                                                                                                                       // 7406
		// normalize the range's time-ambiguity                                                                              // 7407
		if (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 7408
			intervalStart.stripTime();                                                                                          // 7409
			intervalEnd.stripTime();                                                                                            // 7410
		}                                                                                                                    // 7411
		else { // needs to have a time?                                                                                      // 7412
			if (!intervalStart.hasTime()) {                                                                                     // 7413
				intervalStart = this.calendar.time(0); // give 00:00 time                                                          // 7414
			}                                                                                                                   // 7415
			if (!intervalEnd.hasTime()) {                                                                                       // 7416
				intervalEnd = this.calendar.time(0); // give 00:00 time                                                            // 7417
			}                                                                                                                   // 7418
		}                                                                                                                    // 7419
                                                                                                                       // 7420
		start = intervalStart.clone();                                                                                       // 7421
		start = this.skipHiddenDays(start);                                                                                  // 7422
		end = intervalEnd.clone();                                                                                           // 7423
		end = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 7424
                                                                                                                       // 7425
		return {                                                                                                             // 7426
			intervalUnit: intervalUnit,                                                                                         // 7427
			intervalStart: intervalStart,                                                                                       // 7428
			intervalEnd: intervalEnd,                                                                                           // 7429
			start: start,                                                                                                       // 7430
			end: end                                                                                                            // 7431
		};                                                                                                                   // 7432
	},                                                                                                                    // 7433
                                                                                                                       // 7434
                                                                                                                       // 7435
	// Computes the new date when the user hits the prev button, given the current date                                   // 7436
	computePrevDate: function(date) {                                                                                     // 7437
		return this.massageCurrentDate(                                                                                      // 7438
			date.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 7439
		);                                                                                                                   // 7440
	},                                                                                                                    // 7441
                                                                                                                       // 7442
                                                                                                                       // 7443
	// Computes the new date when the user hits the next button, given the current date                                   // 7444
	computeNextDate: function(date) {                                                                                     // 7445
		return this.massageCurrentDate(                                                                                      // 7446
			date.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 7447
		);                                                                                                                   // 7448
	},                                                                                                                    // 7449
                                                                                                                       // 7450
                                                                                                                       // 7451
	// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 7452
	// visible. `direction` is optional and indicates which direction the current date was being                          // 7453
	// incremented or decremented (1 or -1).                                                                              // 7454
	massageCurrentDate: function(date, direction) {                                                                       // 7455
		if (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 7456
			if (this.isHiddenDay(date)) {                                                                                       // 7457
				date = this.skipHiddenDays(date, direction);                                                                       // 7458
				date.startOf('day');                                                                                               // 7459
			}                                                                                                                   // 7460
		}                                                                                                                    // 7461
                                                                                                                       // 7462
		return date;                                                                                                         // 7463
	},                                                                                                                    // 7464
                                                                                                                       // 7465
                                                                                                                       // 7466
	/* Title and Date Formatting                                                                                          // 7467
	------------------------------------------------------------------------------------------------------------------*/  // 7468
                                                                                                                       // 7469
                                                                                                                       // 7470
	// Sets the view's title property to the most updated computed value                                                  // 7471
	updateTitle: function() {                                                                                             // 7472
		this.title = this.computeTitle();                                                                                    // 7473
	},                                                                                                                    // 7474
                                                                                                                       // 7475
                                                                                                                       // 7476
	// Computes what the title at the top of the calendar should be for this view                                         // 7477
	computeTitle: function() {                                                                                            // 7478
		return this.formatRange(                                                                                             // 7479
			{                                                                                                                   // 7480
				// in case intervalStart/End has a time, make sure timezone is correct                                             // 7481
				start: this.calendar.applyTimezone(this.intervalStart),                                                            // 7482
				end: this.calendar.applyTimezone(this.intervalEnd)                                                                 // 7483
			},                                                                                                                  // 7484
			this.opt('titleFormat') || this.computeTitleFormat(),                                                               // 7485
			this.opt('titleRangeSeparator')                                                                                     // 7486
		);                                                                                                                   // 7487
	},                                                                                                                    // 7488
                                                                                                                       // 7489
                                                                                                                       // 7490
	// Generates the format string that should be used to generate the title for the current date range.                  // 7491
	// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 7492
	computeTitleFormat: function() {                                                                                      // 7493
		if (this.intervalUnit == 'year') {                                                                                   // 7494
			return 'YYYY';                                                                                                      // 7495
		}                                                                                                                    // 7496
		else if (this.intervalUnit == 'month') {                                                                             // 7497
			return this.opt('monthYearFormat'); // like "September 2014"                                                        // 7498
		}                                                                                                                    // 7499
		else if (this.intervalDuration.as('days') > 1) {                                                                     // 7500
			return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"                                                    // 7501
		}                                                                                                                    // 7502
		else {                                                                                                               // 7503
			return 'LL'; // one day. longer, like "September 9 2014"                                                            // 7504
		}                                                                                                                    // 7505
	},                                                                                                                    // 7506
                                                                                                                       // 7507
                                                                                                                       // 7508
	// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 7509
	// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 7510
	// The timezones of the dates within `range` will be respected.                                                       // 7511
	formatRange: function(range, formatStr, separator) {                                                                  // 7512
		var end = range.end;                                                                                                 // 7513
                                                                                                                       // 7514
		if (!end.hasTime()) { // all-day?                                                                                    // 7515
			end = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 7516
		}                                                                                                                    // 7517
                                                                                                                       // 7518
		return formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 7519
	},                                                                                                                    // 7520
                                                                                                                       // 7521
                                                                                                                       // 7522
	/* Rendering                                                                                                          // 7523
	------------------------------------------------------------------------------------------------------------------*/  // 7524
                                                                                                                       // 7525
                                                                                                                       // 7526
	// Sets the container element that the view should render inside of.                                                  // 7527
	// Does other DOM-related initializations.                                                                            // 7528
	setElement: function(el) {                                                                                            // 7529
		this.el = el;                                                                                                        // 7530
		this.bindGlobalHandlers();                                                                                           // 7531
	},                                                                                                                    // 7532
                                                                                                                       // 7533
                                                                                                                       // 7534
	// Removes the view's container element from the DOM, clearing any content beforehand.                                // 7535
	// Undoes any other DOM-related attachments.                                                                          // 7536
	removeElement: function() {                                                                                           // 7537
		this.clear(); // clears all content                                                                                  // 7538
                                                                                                                       // 7539
		// clean up the skeleton                                                                                             // 7540
		if (this.isSkeletonRendered) {                                                                                       // 7541
			this.unrenderSkeleton();                                                                                            // 7542
			this.isSkeletonRendered = false;                                                                                    // 7543
		}                                                                                                                    // 7544
                                                                                                                       // 7545
		this.unbindGlobalHandlers();                                                                                         // 7546
                                                                                                                       // 7547
		this.el.remove();                                                                                                    // 7548
                                                                                                                       // 7549
		// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 7550
		// We don't null-out the View's other jQuery element references upon destroy,                                        // 7551
		//  so we shouldn't kill this.el either.                                                                             // 7552
	},                                                                                                                    // 7553
                                                                                                                       // 7554
                                                                                                                       // 7555
	// Does everything necessary to display the view centered around the given unzoned date.                              // 7556
	// Does every type of rendering EXCEPT rendering events.                                                              // 7557
	// Is asychronous and returns a promise.                                                                              // 7558
	display: function(date) {                                                                                             // 7559
		var _this = this;                                                                                                    // 7560
		var scrollState = null;                                                                                              // 7561
                                                                                                                       // 7562
		if (this.displaying) {                                                                                               // 7563
			scrollState = this.queryScroll();                                                                                   // 7564
		}                                                                                                                    // 7565
                                                                                                                       // 7566
		this.calendar.freezeContentHeight();                                                                                 // 7567
                                                                                                                       // 7568
		return this.clear().then(function() { // clear the content first (async)                                             // 7569
			return (                                                                                                            // 7570
				_this.displaying =                                                                                                 // 7571
					$.when(_this.displayView(date)) // displayView might return a promise                                             // 7572
						.then(function() {                                                                                               // 7573
							_this.forceScroll(_this.computeInitialScroll(scrollState));                                                     // 7574
							_this.calendar.unfreezeContentHeight();                                                                         // 7575
							_this.triggerRender();                                                                                          // 7576
						})                                                                                                               // 7577
			);                                                                                                                  // 7578
		});                                                                                                                  // 7579
	},                                                                                                                    // 7580
                                                                                                                       // 7581
                                                                                                                       // 7582
	// Does everything necessary to clear the content of the view.                                                        // 7583
	// Clears dates and events. Does not clear the skeleton.                                                              // 7584
	// Is asychronous and returns a promise.                                                                              // 7585
	clear: function() {                                                                                                   // 7586
		var _this = this;                                                                                                    // 7587
		var displaying = this.displaying;                                                                                    // 7588
                                                                                                                       // 7589
		if (displaying) { // previously displayed, or in the process of being displayed?                                     // 7590
			return displaying.then(function() { // wait for the display to finish                                               // 7591
				_this.displaying = null;                                                                                           // 7592
				_this.clearEvents();                                                                                               // 7593
				return _this.clearView(); // might return a promise. chain it                                                      // 7594
			});                                                                                                                 // 7595
		}                                                                                                                    // 7596
		else {                                                                                                               // 7597
			return $.when(); // an immediately-resolved promise                                                                 // 7598
		}                                                                                                                    // 7599
	},                                                                                                                    // 7600
                                                                                                                       // 7601
                                                                                                                       // 7602
	// Displays the view's non-event content, such as date-related content or anything required by events.                // 7603
	// Renders the view's non-content skeleton if necessary.                                                              // 7604
	// Can be asynchronous and return a promise.                                                                          // 7605
	displayView: function(date) {                                                                                         // 7606
		if (!this.isSkeletonRendered) {                                                                                      // 7607
			this.renderSkeleton();                                                                                              // 7608
			this.isSkeletonRendered = true;                                                                                     // 7609
		}                                                                                                                    // 7610
		if (date) {                                                                                                          // 7611
			this.setDate(date);                                                                                                 // 7612
		}                                                                                                                    // 7613
		if (this.render) {                                                                                                   // 7614
			this.render(); // TODO: deprecate                                                                                   // 7615
		}                                                                                                                    // 7616
		this.renderDates();                                                                                                  // 7617
		this.updateSize();                                                                                                   // 7618
		this.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 7619
		this.startNowIndicator();                                                                                            // 7620
	},                                                                                                                    // 7621
                                                                                                                       // 7622
                                                                                                                       // 7623
	// Unrenders the view content that was rendered in displayView.                                                       // 7624
	// Can be asynchronous and return a promise.                                                                          // 7625
	clearView: function() {                                                                                               // 7626
		this.unselect();                                                                                                     // 7627
		this.stopNowIndicator();                                                                                             // 7628
		this.triggerUnrender();                                                                                              // 7629
		this.unrenderBusinessHours();                                                                                        // 7630
		this.unrenderDates();                                                                                                // 7631
		if (this.destroy) {                                                                                                  // 7632
			this.destroy(); // TODO: deprecate                                                                                  // 7633
		}                                                                                                                    // 7634
	},                                                                                                                    // 7635
                                                                                                                       // 7636
                                                                                                                       // 7637
	// Renders the basic structure of the view before any content is rendered                                             // 7638
	renderSkeleton: function() {                                                                                          // 7639
		// subclasses should implement                                                                                       // 7640
	},                                                                                                                    // 7641
                                                                                                                       // 7642
                                                                                                                       // 7643
	// Unrenders the basic structure of the view                                                                          // 7644
	unrenderSkeleton: function() {                                                                                        // 7645
		// subclasses should implement                                                                                       // 7646
	},                                                                                                                    // 7647
                                                                                                                       // 7648
                                                                                                                       // 7649
	// Renders the view's date-related content.                                                                           // 7650
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 7651
	renderDates: function() {                                                                                             // 7652
		// subclasses should implement                                                                                       // 7653
	},                                                                                                                    // 7654
                                                                                                                       // 7655
                                                                                                                       // 7656
	// Unrenders the view's date-related content                                                                          // 7657
	unrenderDates: function() {                                                                                           // 7658
		// subclasses should override                                                                                        // 7659
	},                                                                                                                    // 7660
                                                                                                                       // 7661
                                                                                                                       // 7662
	// Signals that the view's content has been rendered                                                                  // 7663
	triggerRender: function() {                                                                                           // 7664
		this.trigger('viewRender', this, this, this.el);                                                                     // 7665
	},                                                                                                                    // 7666
                                                                                                                       // 7667
                                                                                                                       // 7668
	// Signals that the view's content is about to be unrendered                                                          // 7669
	triggerUnrender: function() {                                                                                         // 7670
		this.trigger('viewDestroy', this, this, this.el);                                                                    // 7671
	},                                                                                                                    // 7672
                                                                                                                       // 7673
                                                                                                                       // 7674
	// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 7675
	bindGlobalHandlers: function() {                                                                                      // 7676
		$(document).on('mousedown', this.documentMousedownProxy);                                                            // 7677
	},                                                                                                                    // 7678
                                                                                                                       // 7679
                                                                                                                       // 7680
	// Unbinds DOM handlers from elements that reside outside the view container                                          // 7681
	unbindGlobalHandlers: function() {                                                                                    // 7682
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 7683
	},                                                                                                                    // 7684
                                                                                                                       // 7685
                                                                                                                       // 7686
	// Initializes internal variables related to theming                                                                  // 7687
	initThemingProps: function() {                                                                                        // 7688
		var tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 7689
                                                                                                                       // 7690
		this.widgetHeaderClass = tm + '-widget-header';                                                                      // 7691
		this.widgetContentClass = tm + '-widget-content';                                                                    // 7692
		this.highlightStateClass = tm + '-state-highlight';                                                                  // 7693
	},                                                                                                                    // 7694
                                                                                                                       // 7695
                                                                                                                       // 7696
	/* Business Hours                                                                                                     // 7697
	------------------------------------------------------------------------------------------------------------------*/  // 7698
                                                                                                                       // 7699
                                                                                                                       // 7700
	// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 7701
	renderBusinessHours: function() {                                                                                     // 7702
		// subclasses should implement                                                                                       // 7703
	},                                                                                                                    // 7704
                                                                                                                       // 7705
                                                                                                                       // 7706
	// Unrenders previously-rendered business-hours                                                                       // 7707
	unrenderBusinessHours: function() {                                                                                   // 7708
		// subclasses should implement                                                                                       // 7709
	},                                                                                                                    // 7710
                                                                                                                       // 7711
                                                                                                                       // 7712
	/* Now Indicator                                                                                                      // 7713
	------------------------------------------------------------------------------------------------------------------*/  // 7714
                                                                                                                       // 7715
                                                                                                                       // 7716
	// Immediately render the current time indicator and begins re-rendering it at an interval,                           // 7717
	// which is defined by this.getNowIndicatorUnit().                                                                    // 7718
	// TODO: somehow do this for the current whole day's background too                                                   // 7719
	startNowIndicator: function() {                                                                                       // 7720
		var _this = this;                                                                                                    // 7721
		var unit;                                                                                                            // 7722
		var update;                                                                                                          // 7723
		var delay; // ms wait value                                                                                          // 7724
                                                                                                                       // 7725
		if (this.opt('nowIndicator')) {                                                                                      // 7726
			unit = this.getNowIndicatorUnit();                                                                                  // 7727
			if (unit) {                                                                                                         // 7728
				update = proxy(this, 'updateNowIndicator'); // bind to `this`                                                      // 7729
                                                                                                                       // 7730
				this.initialNowDate = this.calendar.getNow();                                                                      // 7731
				this.initialNowQueriedMs = +new Date();                                                                            // 7732
				this.renderNowIndicator(this.initialNowDate);                                                                      // 7733
				this.isNowIndicatorRendered = true;                                                                                // 7734
                                                                                                                       // 7735
				// wait until the beginning of the next interval                                                                   // 7736
				delay = this.initialNowDate.clone().startOf(unit).add(1, unit) - this.initialNowDate;                              // 7737
				this.nowIndicatorTimeoutID = setTimeout(function() {                                                               // 7738
					_this.nowIndicatorTimeoutID = null;                                                                               // 7739
					update();                                                                                                         // 7740
					delay = +moment.duration(1, unit);                                                                                // 7741
					delay = Math.max(100, delay); // prevent too frequent                                                             // 7742
					_this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval                               // 7743
				}, delay);                                                                                                         // 7744
			}                                                                                                                   // 7745
		}                                                                                                                    // 7746
	},                                                                                                                    // 7747
                                                                                                                       // 7748
                                                                                                                       // 7749
	// rerenders the now indicator, computing the new current time from the amount of time that has passed                // 7750
	// since the initial getNow call.                                                                                     // 7751
	updateNowIndicator: function() {                                                                                      // 7752
		if (this.isNowIndicatorRendered) {                                                                                   // 7753
			this.unrenderNowIndicator();                                                                                        // 7754
			this.renderNowIndicator(                                                                                            // 7755
				this.initialNowDate.clone().add(new Date() - this.initialNowQueriedMs) // add ms                                   // 7756
			);                                                                                                                  // 7757
		}                                                                                                                    // 7758
	},                                                                                                                    // 7759
                                                                                                                       // 7760
                                                                                                                       // 7761
	// Immediately unrenders the view's current time indicator and stops any re-rendering timers.                         // 7762
	// Won't cause side effects if indicator isn't rendered.                                                              // 7763
	stopNowIndicator: function() {                                                                                        // 7764
		if (this.isNowIndicatorRendered) {                                                                                   // 7765
                                                                                                                       // 7766
			if (this.nowIndicatorTimeoutID) {                                                                                   // 7767
				clearTimeout(this.nowIndicatorTimeoutID);                                                                          // 7768
				this.nowIndicatorTimeoutID = null;                                                                                 // 7769
			}                                                                                                                   // 7770
			if (this.nowIndicatorIntervalID) {                                                                                  // 7771
				clearTimeout(this.nowIndicatorIntervalID);                                                                         // 7772
				this.nowIndicatorIntervalID = null;                                                                                // 7773
			}                                                                                                                   // 7774
                                                                                                                       // 7775
			this.unrenderNowIndicator();                                                                                        // 7776
			this.isNowIndicatorRendered = false;                                                                                // 7777
		}                                                                                                                    // 7778
	},                                                                                                                    // 7779
                                                                                                                       // 7780
                                                                                                                       // 7781
	// Returns a string unit, like 'second' or 'minute' that defined how often the current time indicator                 // 7782
	// should be refreshed. If something falsy is returned, no time indicator is rendered at all.                         // 7783
	getNowIndicatorUnit: function() {                                                                                     // 7784
		// subclasses should implement                                                                                       // 7785
	},                                                                                                                    // 7786
                                                                                                                       // 7787
                                                                                                                       // 7788
	// Renders a current time indicator at the given datetime                                                             // 7789
	renderNowIndicator: function(date) {                                                                                  // 7790
		// subclasses should implement                                                                                       // 7791
	},                                                                                                                    // 7792
                                                                                                                       // 7793
                                                                                                                       // 7794
	// Undoes the rendering actions from renderNowIndicator                                                               // 7795
	unrenderNowIndicator: function() {                                                                                    // 7796
		// subclasses should implement                                                                                       // 7797
	},                                                                                                                    // 7798
                                                                                                                       // 7799
                                                                                                                       // 7800
	/* Dimensions                                                                                                         // 7801
	------------------------------------------------------------------------------------------------------------------*/  // 7802
                                                                                                                       // 7803
                                                                                                                       // 7804
	// Refreshes anything dependant upon sizing of the container element of the grid                                      // 7805
	updateSize: function(isResize) {                                                                                      // 7806
		var scrollState;                                                                                                     // 7807
                                                                                                                       // 7808
		if (isResize) {                                                                                                      // 7809
			scrollState = this.queryScroll();                                                                                   // 7810
		}                                                                                                                    // 7811
                                                                                                                       // 7812
		this.updateHeight(isResize);                                                                                         // 7813
		this.updateWidth(isResize);                                                                                          // 7814
		this.updateNowIndicator();                                                                                           // 7815
                                                                                                                       // 7816
		if (isResize) {                                                                                                      // 7817
			this.setScroll(scrollState);                                                                                        // 7818
		}                                                                                                                    // 7819
	},                                                                                                                    // 7820
                                                                                                                       // 7821
                                                                                                                       // 7822
	// Refreshes the horizontal dimensions of the calendar                                                                // 7823
	updateWidth: function(isResize) {                                                                                     // 7824
		// subclasses should implement                                                                                       // 7825
	},                                                                                                                    // 7826
                                                                                                                       // 7827
                                                                                                                       // 7828
	// Refreshes the vertical dimensions of the calendar                                                                  // 7829
	updateHeight: function(isResize) {                                                                                    // 7830
		var calendar = this.calendar; // we poll the calendar for height information                                         // 7831
                                                                                                                       // 7832
		this.setHeight(                                                                                                      // 7833
			calendar.getSuggestedViewHeight(),                                                                                  // 7834
			calendar.isHeightAuto()                                                                                             // 7835
		);                                                                                                                   // 7836
	},                                                                                                                    // 7837
                                                                                                                       // 7838
                                                                                                                       // 7839
	// Updates the vertical dimensions of the calendar to the specified height.                                           // 7840
	// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its "natural" height.       // 7841
	setHeight: function(height, isAuto) {                                                                                 // 7842
		// subclasses should implement                                                                                       // 7843
	},                                                                                                                    // 7844
                                                                                                                       // 7845
                                                                                                                       // 7846
	/* Scroller                                                                                                           // 7847
	------------------------------------------------------------------------------------------------------------------*/  // 7848
                                                                                                                       // 7849
                                                                                                                       // 7850
	// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 7851
	// Utility for subclasses.                                                                                            // 7852
	computeScrollerHeight: function(totalHeight) {                                                                        // 7853
		var scrollerEl = this.scrollerEl;                                                                                    // 7854
		var both;                                                                                                            // 7855
		var otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 7856
                                                                                                                       // 7857
		both = this.el.add(scrollerEl);                                                                                      // 7858
                                                                                                                       // 7859
		// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 7860
		both.css({                                                                                                           // 7861
			position: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 7862
			left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 7863
		});                                                                                                                  // 7864
		otherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 7865
		both.css({ position: '', left: '' }); // undo hack                                                                   // 7866
                                                                                                                       // 7867
		return totalHeight - otherHeight;                                                                                    // 7868
	},                                                                                                                    // 7869
                                                                                                                       // 7870
                                                                                                                       // 7871
	// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7872
	// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7873
	computeInitialScroll: function(previousScrollState) {                                                                 // 7874
		return 0;                                                                                                            // 7875
	},                                                                                                                    // 7876
                                                                                                                       // 7877
                                                                                                                       // 7878
	// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7879
	queryScroll: function() {                                                                                             // 7880
		if (this.scrollerEl) {                                                                                               // 7881
			return this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7882
		}                                                                                                                    // 7883
	},                                                                                                                    // 7884
                                                                                                                       // 7885
                                                                                                                       // 7886
	// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7887
	setScroll: function(scrollState) {                                                                                    // 7888
		if (this.scrollerEl) {                                                                                               // 7889
			return this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7890
		}                                                                                                                    // 7891
	},                                                                                                                    // 7892
                                                                                                                       // 7893
                                                                                                                       // 7894
	// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7895
	forceScroll: function(scrollState) {                                                                                  // 7896
		var _this = this;                                                                                                    // 7897
                                                                                                                       // 7898
		this.setScroll(scrollState);                                                                                         // 7899
		setTimeout(function() {                                                                                              // 7900
			_this.setScroll(scrollState);                                                                                       // 7901
		}, 0);                                                                                                               // 7902
	},                                                                                                                    // 7903
                                                                                                                       // 7904
                                                                                                                       // 7905
	/* Event Elements / Segments                                                                                          // 7906
	------------------------------------------------------------------------------------------------------------------*/  // 7907
                                                                                                                       // 7908
                                                                                                                       // 7909
	// Does everything necessary to display the given events onto the current view                                        // 7910
	displayEvents: function(events) {                                                                                     // 7911
		var scrollState = this.queryScroll();                                                                                // 7912
                                                                                                                       // 7913
		this.clearEvents();                                                                                                  // 7914
		this.renderEvents(events);                                                                                           // 7915
		this.isEventsRendered = true;                                                                                        // 7916
		this.setScroll(scrollState);                                                                                         // 7917
		this.triggerEventRender();                                                                                           // 7918
	},                                                                                                                    // 7919
                                                                                                                       // 7920
                                                                                                                       // 7921
	// Does everything necessary to clear the view's currently-rendered events                                            // 7922
	clearEvents: function() {                                                                                             // 7923
		var scrollState;                                                                                                     // 7924
                                                                                                                       // 7925
		if (this.isEventsRendered) {                                                                                         // 7926
                                                                                                                       // 7927
			// TODO: optimize: if we know this is part of a displayEvents call, don't queryScroll/setScroll                     // 7928
			scrollState = this.queryScroll();                                                                                   // 7929
                                                                                                                       // 7930
			this.triggerEventUnrender();                                                                                        // 7931
			if (this.destroyEvents) {                                                                                           // 7932
				this.destroyEvents(); // TODO: deprecate                                                                           // 7933
			}                                                                                                                   // 7934
			this.unrenderEvents();                                                                                              // 7935
			this.setScroll(scrollState);                                                                                        // 7936
			this.isEventsRendered = false;                                                                                      // 7937
		}                                                                                                                    // 7938
	},                                                                                                                    // 7939
                                                                                                                       // 7940
                                                                                                                       // 7941
	// Renders the events onto the view.                                                                                  // 7942
	renderEvents: function(events) {                                                                                      // 7943
		// subclasses should implement                                                                                       // 7944
	},                                                                                                                    // 7945
                                                                                                                       // 7946
                                                                                                                       // 7947
	// Removes event elements from the view.                                                                              // 7948
	unrenderEvents: function() {                                                                                          // 7949
		// subclasses should implement                                                                                       // 7950
	},                                                                                                                    // 7951
                                                                                                                       // 7952
                                                                                                                       // 7953
	// Signals that all events have been rendered                                                                         // 7954
	triggerEventRender: function() {                                                                                      // 7955
		this.renderedEventSegEach(function(seg) {                                                                            // 7956
			this.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7957
		});                                                                                                                  // 7958
		this.trigger('eventAfterAllRender');                                                                                 // 7959
	},                                                                                                                    // 7960
                                                                                                                       // 7961
                                                                                                                       // 7962
	// Signals that all event elements are about to be removed                                                            // 7963
	triggerEventUnrender: function() {                                                                                    // 7964
		this.renderedEventSegEach(function(seg) {                                                                            // 7965
			this.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7966
		});                                                                                                                  // 7967
	},                                                                                                                    // 7968
                                                                                                                       // 7969
                                                                                                                       // 7970
	// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7971
	// Basically runs events and elements through the eventRender hook.                                                   // 7972
	resolveEventEl: function(event, el) {                                                                                 // 7973
		var custom = this.trigger('eventRender', event, event, el);                                                          // 7974
                                                                                                                       // 7975
		if (custom === false) { // means don't render at all                                                                 // 7976
			el = null;                                                                                                          // 7977
		}                                                                                                                    // 7978
		else if (custom && custom !== true) {                                                                                // 7979
			el = $(custom);                                                                                                     // 7980
		}                                                                                                                    // 7981
                                                                                                                       // 7982
		return el;                                                                                                           // 7983
	},                                                                                                                    // 7984
                                                                                                                       // 7985
                                                                                                                       // 7986
	// Hides all rendered event segments linked to the given event                                                        // 7987
	showEvent: function(event) {                                                                                          // 7988
		this.renderedEventSegEach(function(seg) {                                                                            // 7989
			seg.el.css('visibility', '');                                                                                       // 7990
		}, event);                                                                                                           // 7991
	},                                                                                                                    // 7992
                                                                                                                       // 7993
                                                                                                                       // 7994
	// Shows all rendered event segments linked to the given event                                                        // 7995
	hideEvent: function(event) {                                                                                          // 7996
		this.renderedEventSegEach(function(seg) {                                                                            // 7997
			seg.el.css('visibility', 'hidden');                                                                                 // 7998
		}, event);                                                                                                           // 7999
	},                                                                                                                    // 8000
                                                                                                                       // 8001
                                                                                                                       // 8002
	// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 8003
	// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 8004
	// The `this` value of the callback function will be the view.                                                        // 8005
	renderedEventSegEach: function(func, event) {                                                                         // 8006
		var segs = this.getEventSegs();                                                                                      // 8007
		var i;                                                                                                               // 8008
                                                                                                                       // 8009
		for (i = 0; i < segs.length; i++) {                                                                                  // 8010
			if (!event || segs[i].event._id === event._id) {                                                                    // 8011
				if (segs[i].el) {                                                                                                  // 8012
					func.call(this, segs[i]);                                                                                         // 8013
				}                                                                                                                  // 8014
			}                                                                                                                   // 8015
		}                                                                                                                    // 8016
	},                                                                                                                    // 8017
                                                                                                                       // 8018
                                                                                                                       // 8019
	// Retrieves all the rendered segment objects for the view                                                            // 8020
	getEventSegs: function() {                                                                                            // 8021
		// subclasses must implement                                                                                         // 8022
		return [];                                                                                                           // 8023
	},                                                                                                                    // 8024
                                                                                                                       // 8025
                                                                                                                       // 8026
	/* Event Drag-n-Drop                                                                                                  // 8027
	------------------------------------------------------------------------------------------------------------------*/  // 8028
                                                                                                                       // 8029
                                                                                                                       // 8030
	// Computes if the given event is allowed to be dragged by the user                                                   // 8031
	isEventDraggable: function(event) {                                                                                   // 8032
		var source = event.source || {};                                                                                     // 8033
                                                                                                                       // 8034
		return firstDefined(                                                                                                 // 8035
			event.startEditable,                                                                                                // 8036
			source.startEditable,                                                                                               // 8037
			this.opt('eventStartEditable'),                                                                                     // 8038
			event.editable,                                                                                                     // 8039
			source.editable,                                                                                                    // 8040
			this.opt('editable')                                                                                                // 8041
		);                                                                                                                   // 8042
	},                                                                                                                    // 8043
                                                                                                                       // 8044
                                                                                                                       // 8045
	// Must be called when an event in the view is dropped onto new location.                                             // 8046
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 8047
	reportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 8048
		var calendar = this.calendar;                                                                                        // 8049
		var mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 8050
		var undoFunc = function() {                                                                                          // 8051
			mutateResult.undo();                                                                                                // 8052
			calendar.reportEventChange();                                                                                       // 8053
		};                                                                                                                   // 8054
                                                                                                                       // 8055
		this.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 8056
		calendar.reportEventChange(); // will rerender events                                                                // 8057
	},                                                                                                                    // 8058
                                                                                                                       // 8059
                                                                                                                       // 8060
	// Triggers event-drop handlers that have subscribed via the API                                                      // 8061
	triggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 8062
		this.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 8063
	},                                                                                                                    // 8064
                                                                                                                       // 8065
                                                                                                                       // 8066
	/* External Element Drag-n-Drop                                                                                       // 8067
	------------------------------------------------------------------------------------------------------------------*/  // 8068
                                                                                                                       // 8069
                                                                                                                       // 8070
	// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 8071
	// `meta` is the parsed data that has been embedded into the dragging event.                                          // 8072
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 8073
	reportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 8074
		var eventProps = meta.eventProps;                                                                                    // 8075
		var eventInput;                                                                                                      // 8076
		var event;                                                                                                           // 8077
                                                                                                                       // 8078
		// Try to build an event object and render it. TODO: decouple the two                                                // 8079
		if (eventProps) {                                                                                                    // 8080
			eventInput = $.extend({}, eventProps, dropLocation);                                                                // 8081
			event = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 8082
		}                                                                                                                    // 8083
                                                                                                                       // 8084
		this.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 8085
	},                                                                                                                    // 8086
                                                                                                                       // 8087
                                                                                                                       // 8088
	// Triggers external-drop handlers that have subscribed via the API                                                   // 8089
	triggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 8090
                                                                                                                       // 8091
		// trigger 'drop' regardless of whether element represents an event                                                  // 8092
		this.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 8093
                                                                                                                       // 8094
		if (event) {                                                                                                         // 8095
			this.trigger('eventReceive', null, event); // signal an external event landed                                       // 8096
		}                                                                                                                    // 8097
	},                                                                                                                    // 8098
                                                                                                                       // 8099
                                                                                                                       // 8100
	/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 8101
	------------------------------------------------------------------------------------------------------------------*/  // 8102
                                                                                                                       // 8103
                                                                                                                       // 8104
	// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 8105
	// If an external-element, seg will be `null`                                                                         // 8106
	renderDrag: function(dropLocation, seg) {                                                                             // 8107
		// subclasses must implement                                                                                         // 8108
	},                                                                                                                    // 8109
                                                                                                                       // 8110
                                                                                                                       // 8111
	// Unrenders a visual indication of an event or external-element being dragged.                                       // 8112
	unrenderDrag: function() {                                                                                            // 8113
		// subclasses must implement                                                                                         // 8114
	},                                                                                                                    // 8115
                                                                                                                       // 8116
                                                                                                                       // 8117
	/* Event Resizing                                                                                                     // 8118
	------------------------------------------------------------------------------------------------------------------*/  // 8119
                                                                                                                       // 8120
                                                                                                                       // 8121
	// Computes if the given event is allowed to be resized from its starting edge                                        // 8122
	isEventResizableFromStart: function(event) {                                                                          // 8123
		return this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 8124
	},                                                                                                                    // 8125
                                                                                                                       // 8126
                                                                                                                       // 8127
	// Computes if the given event is allowed to be resized from its ending edge                                          // 8128
	isEventResizableFromEnd: function(event) {                                                                            // 8129
		return this.isEventResizable(event);                                                                                 // 8130
	},                                                                                                                    // 8131
                                                                                                                       // 8132
                                                                                                                       // 8133
	// Computes if the given event is allowed to be resized by the user at all                                            // 8134
	isEventResizable: function(event) {                                                                                   // 8135
		var source = event.source || {};                                                                                     // 8136
                                                                                                                       // 8137
		return firstDefined(                                                                                                 // 8138
			event.durationEditable,                                                                                             // 8139
			source.durationEditable,                                                                                            // 8140
			this.opt('eventDurationEditable'),                                                                                  // 8141
			event.editable,                                                                                                     // 8142
			source.editable,                                                                                                    // 8143
			this.opt('editable')                                                                                                // 8144
		);                                                                                                                   // 8145
	},                                                                                                                    // 8146
                                                                                                                       // 8147
                                                                                                                       // 8148
	// Must be called when an event in the view has been resized to a new length                                          // 8149
	reportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 8150
		var calendar = this.calendar;                                                                                        // 8151
		var mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 8152
		var undoFunc = function() {                                                                                          // 8153
			mutateResult.undo();                                                                                                // 8154
			calendar.reportEventChange();                                                                                       // 8155
		};                                                                                                                   // 8156
                                                                                                                       // 8157
		this.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 8158
		calendar.reportEventChange(); // will rerender events                                                                // 8159
	},                                                                                                                    // 8160
                                                                                                                       // 8161
                                                                                                                       // 8162
	// Triggers event-resize handlers that have subscribed via the API                                                    // 8163
	triggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 8164
		this.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 8165
	},                                                                                                                    // 8166
                                                                                                                       // 8167
                                                                                                                       // 8168
	/* Selection                                                                                                          // 8169
	------------------------------------------------------------------------------------------------------------------*/  // 8170
                                                                                                                       // 8171
                                                                                                                       // 8172
	// Selects a date span on the view. `start` and `end` are both Moments.                                               // 8173
	// `ev` is the native mouse event that begin the interaction.                                                         // 8174
	select: function(span, ev) {                                                                                          // 8175
		this.unselect(ev);                                                                                                   // 8176
		this.renderSelection(span);                                                                                          // 8177
		this.reportSelection(span, ev);                                                                                      // 8178
	},                                                                                                                    // 8179
                                                                                                                       // 8180
                                                                                                                       // 8181
	// Renders a visual indication of the selection                                                                       // 8182
	renderSelection: function(span) {                                                                                     // 8183
		// subclasses should implement                                                                                       // 8184
	},                                                                                                                    // 8185
                                                                                                                       // 8186
                                                                                                                       // 8187
	// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 8188
	reportSelection: function(span, ev) {                                                                                 // 8189
		this.isSelected = true;                                                                                              // 8190
		this.triggerSelect(span, ev);                                                                                        // 8191
	},                                                                                                                    // 8192
                                                                                                                       // 8193
                                                                                                                       // 8194
	// Triggers handlers to 'select'                                                                                      // 8195
	triggerSelect: function(span, ev) {                                                                                   // 8196
		this.trigger(                                                                                                        // 8197
			'select',                                                                                                           // 8198
			null,                                                                                                               // 8199
			this.calendar.applyTimezone(span.start), // convert to calendar's tz for external API                               // 8200
			this.calendar.applyTimezone(span.end), // "                                                                         // 8201
			ev                                                                                                                  // 8202
		);                                                                                                                   // 8203
	},                                                                                                                    // 8204
                                                                                                                       // 8205
                                                                                                                       // 8206
	// Undoes a selection. updates in the internal state and triggers handlers.                                           // 8207
	// `ev` is the native mouse event that began the interaction.                                                         // 8208
	unselect: function(ev) {                                                                                              // 8209
		if (this.isSelected) {                                                                                               // 8210
			this.isSelected = false;                                                                                            // 8211
			if (this.destroySelection) {                                                                                        // 8212
				this.destroySelection(); // TODO: deprecate                                                                        // 8213
			}                                                                                                                   // 8214
			this.unrenderSelection();                                                                                           // 8215
			this.trigger('unselect', null, ev);                                                                                 // 8216
		}                                                                                                                    // 8217
	},                                                                                                                    // 8218
                                                                                                                       // 8219
                                                                                                                       // 8220
	// Unrenders a visual indication of selection                                                                         // 8221
	unrenderSelection: function() {                                                                                       // 8222
		// subclasses should implement                                                                                       // 8223
	},                                                                                                                    // 8224
                                                                                                                       // 8225
                                                                                                                       // 8226
	// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 8227
	documentMousedown: function(ev) {                                                                                     // 8228
		var ignore;                                                                                                          // 8229
                                                                                                                       // 8230
		// is there a selection, and has the user made a proper left click?                                                  // 8231
		if (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 8232
                                                                                                                       // 8233
			// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 8234
			ignore = this.opt('unselectCancel');                                                                                // 8235
			if (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 8236
				this.unselect(ev);                                                                                                 // 8237
			}                                                                                                                   // 8238
		}                                                                                                                    // 8239
	},                                                                                                                    // 8240
                                                                                                                       // 8241
                                                                                                                       // 8242
	/* Day Click                                                                                                          // 8243
	------------------------------------------------------------------------------------------------------------------*/  // 8244
                                                                                                                       // 8245
                                                                                                                       // 8246
	// Triggers handlers to 'dayClick'                                                                                    // 8247
	// Span has start/end of the clicked area. Only the start is useful.                                                  // 8248
	triggerDayClick: function(span, dayEl, ev) {                                                                          // 8249
		this.trigger(                                                                                                        // 8250
			'dayClick',                                                                                                         // 8251
			dayEl,                                                                                                              // 8252
			this.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API                         // 8253
			ev                                                                                                                  // 8254
		);                                                                                                                   // 8255
	},                                                                                                                    // 8256
                                                                                                                       // 8257
                                                                                                                       // 8258
	/* Date Utils                                                                                                         // 8259
	------------------------------------------------------------------------------------------------------------------*/  // 8260
                                                                                                                       // 8261
                                                                                                                       // 8262
	// Initializes internal variables related to calculating hidden days-of-week                                          // 8263
	initHiddenDays: function() {                                                                                          // 8264
		var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 8265
		var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 8266
		var dayCnt = 0;                                                                                                      // 8267
		var i;                                                                                                               // 8268
                                                                                                                       // 8269
		if (this.opt('weekends') === false) {                                                                                // 8270
			hiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 8271
		}                                                                                                                    // 8272
                                                                                                                       // 8273
		for (i = 0; i < 7; i++) {                                                                                            // 8274
			if (                                                                                                                // 8275
				!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 8276
			) {                                                                                                                 // 8277
				dayCnt++;                                                                                                          // 8278
			}                                                                                                                   // 8279
		}                                                                                                                    // 8280
                                                                                                                       // 8281
		if (!dayCnt) {                                                                                                       // 8282
			throw 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 8283
		}                                                                                                                    // 8284
                                                                                                                       // 8285
		this.isHiddenDayHash = isHiddenDayHash;                                                                              // 8286
	},                                                                                                                    // 8287
                                                                                                                       // 8288
                                                                                                                       // 8289
	// Is the current day hidden?                                                                                         // 8290
	// `day` is a day-of-week index (0-6), or a Moment                                                                    // 8291
	isHiddenDay: function(day) {                                                                                          // 8292
		if (moment.isMoment(day)) {                                                                                          // 8293
			day = day.day();                                                                                                    // 8294
		}                                                                                                                    // 8295
		return this.isHiddenDayHash[day];                                                                                    // 8296
	},                                                                                                                    // 8297
                                                                                                                       // 8298
                                                                                                                       // 8299
	// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 8300
	// If the initial value of `date` is not a hidden day, don't do anything.                                             // 8301
	// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 8302
	// `inc` defaults to `1` (increment one day forward each time)                                                        // 8303
	skipHiddenDays: function(date, inc, isExclusive) {                                                                    // 8304
		var out = date.clone();                                                                                              // 8305
		inc = inc || 1;                                                                                                      // 8306
		while (                                                                                                              // 8307
			this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 8308
		) {                                                                                                                  // 8309
			out.add(inc, 'days');                                                                                               // 8310
		}                                                                                                                    // 8311
		return out;                                                                                                          // 8312
	},                                                                                                                    // 8313
                                                                                                                       // 8314
                                                                                                                       // 8315
	// Returns the date range of the full days the given range visually appears to occupy.                                // 8316
	// Returns a new range object.                                                                                        // 8317
	computeDayRange: function(range) {                                                                                    // 8318
		var startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 8319
		var end = range.end;                                                                                                 // 8320
		var endDay = null;                                                                                                   // 8321
		var endTimeMS;                                                                                                       // 8322
                                                                                                                       // 8323
		if (end) {                                                                                                           // 8324
			endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 8325
			endTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 8326
                                                                                                                       // 8327
			// If the end time is actually inclusively part of the next day and is equal to or                                  // 8328
			// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 8329
			// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 8330
			if (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 8331
				endDay.add(1, 'days');                                                                                             // 8332
			}                                                                                                                   // 8333
		}                                                                                                                    // 8334
                                                                                                                       // 8335
		// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 8336
		// assign the default duration of one day.                                                                           // 8337
		if (!end || endDay <= startDay) {                                                                                    // 8338
			endDay = startDay.clone().add(1, 'days');                                                                           // 8339
		}                                                                                                                    // 8340
                                                                                                                       // 8341
		return { start: startDay, end: endDay };                                                                             // 8342
	},                                                                                                                    // 8343
                                                                                                                       // 8344
                                                                                                                       // 8345
	// Does the given event visually appear to occupy more than one day?                                                  // 8346
	isMultiDayEvent: function(event) {                                                                                    // 8347
		var range = this.computeDayRange(event); // event is range-ish                                                       // 8348
                                                                                                                       // 8349
		return range.end.diff(range.start, 'days') > 1;                                                                      // 8350
	}                                                                                                                     // 8351
                                                                                                                       // 8352
});                                                                                                                    // 8353
                                                                                                                       // 8354
;;                                                                                                                     // 8355
                                                                                                                       // 8356
var Calendar = FC.Calendar = Class.extend({                                                                            // 8357
                                                                                                                       // 8358
	dirDefaults: null, // option defaults related to LTR or RTL                                                           // 8359
	langDefaults: null, // option defaults related to current locale                                                      // 8360
	overrides: null, // option overrides given to the fullCalendar constructor                                            // 8361
	options: null, // all defaults combined with overrides                                                                // 8362
	viewSpecCache: null, // cache of view definitions                                                                     // 8363
	view: null, // current View object                                                                                    // 8364
	header: null,                                                                                                         // 8365
	loadingLevel: 0, // number of simultaneous loading tasks                                                              // 8366
                                                                                                                       // 8367
                                                                                                                       // 8368
	// a lot of this class' OOP logic is scoped within this constructor function,                                         // 8369
	// but in the future, write individual methods on the prototype.                                                      // 8370
	constructor: Calendar_constructor,                                                                                    // 8371
                                                                                                                       // 8372
                                                                                                                       // 8373
	// Subclasses can override this for initialization logic after the constructor has been called                        // 8374
	initialize: function() {                                                                                              // 8375
	},                                                                                                                    // 8376
                                                                                                                       // 8377
                                                                                                                       // 8378
	// Initializes `this.options` and other important options-related objects                                             // 8379
	initOptions: function(overrides) {                                                                                    // 8380
		var lang, langDefaults;                                                                                              // 8381
		var isRTL, dirDefaults;                                                                                              // 8382
                                                                                                                       // 8383
		// converts legacy options into non-legacy ones.                                                                     // 8384
		// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 8385
		overrides = massageOverrides(overrides);                                                                             // 8386
                                                                                                                       // 8387
		lang = overrides.lang;                                                                                               // 8388
		langDefaults = langOptionHash[lang];                                                                                 // 8389
		if (!langDefaults) {                                                                                                 // 8390
			lang = Calendar.defaults.lang;                                                                                      // 8391
			langDefaults = langOptionHash[lang] || {};                                                                          // 8392
		}                                                                                                                    // 8393
                                                                                                                       // 8394
		isRTL = firstDefined(                                                                                                // 8395
			overrides.isRTL,                                                                                                    // 8396
			langDefaults.isRTL,                                                                                                 // 8397
			Calendar.defaults.isRTL                                                                                             // 8398
		);                                                                                                                   // 8399
		dirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 8400
                                                                                                                       // 8401
		this.dirDefaults = dirDefaults;                                                                                      // 8402
		this.langDefaults = langDefaults;                                                                                    // 8403
		this.overrides = overrides;                                                                                          // 8404
		this.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence                          // 8405
			Calendar.defaults, // global defaults                                                                               // 8406
			dirDefaults,                                                                                                        // 8407
			langDefaults,                                                                                                       // 8408
			overrides                                                                                                           // 8409
		]);                                                                                                                  // 8410
		populateInstanceComputableOptions(this.options);                                                                     // 8411
                                                                                                                       // 8412
		this.viewSpecCache = {}; // somewhat unrelated                                                                       // 8413
	},                                                                                                                    // 8414
                                                                                                                       // 8415
                                                                                                                       // 8416
	// Gets information about how to create a view. Will use a cache.                                                     // 8417
	getViewSpec: function(viewType) {                                                                                     // 8418
		var cache = this.viewSpecCache;                                                                                      // 8419
                                                                                                                       // 8420
		return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 8421
	},                                                                                                                    // 8422
                                                                                                                       // 8423
                                                                                                                       // 8424
	// Given a duration singular unit, like "week" or "day", finds a matching view spec.                                  // 8425
	// Preference is given to views that have corresponding buttons.                                                      // 8426
	getUnitViewSpec: function(unit) {                                                                                     // 8427
		var viewTypes;                                                                                                       // 8428
		var i;                                                                                                               // 8429
		var spec;                                                                                                            // 8430
                                                                                                                       // 8431
		if ($.inArray(unit, intervalUnits) != -1) {                                                                          // 8432
                                                                                                                       // 8433
			// put views that have buttons first. there will be duplicates, but oh well                                         // 8434
			viewTypes = this.header.getViewsWithButtons();                                                                      // 8435
			$.each(FC.views, function(viewType) { // all views                                                                  // 8436
				viewTypes.push(viewType);                                                                                          // 8437
			});                                                                                                                 // 8438
                                                                                                                       // 8439
			for (i = 0; i < viewTypes.length; i++) {                                                                            // 8440
				spec = this.getViewSpec(viewTypes[i]);                                                                             // 8441
				if (spec) {                                                                                                        // 8442
					if (spec.singleUnit == unit) {                                                                                    // 8443
						return spec;                                                                                                     // 8444
					}                                                                                                                 // 8445
				}                                                                                                                  // 8446
			}                                                                                                                   // 8447
		}                                                                                                                    // 8448
	},                                                                                                                    // 8449
                                                                                                                       // 8450
                                                                                                                       // 8451
	// Builds an object with information on how to create a given view                                                    // 8452
	buildViewSpec: function(requestedViewType) {                                                                          // 8453
		var viewOverrides = this.overrides.views || {};                                                                      // 8454
		var specChain = []; // for the view. lowest to highest priority                                                      // 8455
		var defaultsChain = []; // for the view. lowest to highest priority                                                  // 8456
		var overridesChain = []; // for the view. lowest to highest priority                                                 // 8457
		var viewType = requestedViewType;                                                                                    // 8458
		var spec; // for the view                                                                                            // 8459
		var overrides; // for the view                                                                                       // 8460
		var duration;                                                                                                        // 8461
		var unit;                                                                                                            // 8462
                                                                                                                       // 8463
		// iterate from the specific view definition to a more general one until we hit an actual View class                 // 8464
		while (viewType) {                                                                                                   // 8465
			spec = fcViews[viewType];                                                                                           // 8466
			overrides = viewOverrides[viewType];                                                                                // 8467
			viewType = null; // clear. might repopulate for another iteration                                                   // 8468
                                                                                                                       // 8469
			if (typeof spec === 'function') { // TODO: deprecate                                                                // 8470
				spec = { 'class': spec };                                                                                          // 8471
			}                                                                                                                   // 8472
                                                                                                                       // 8473
			if (spec) {                                                                                                         // 8474
				specChain.unshift(spec);                                                                                           // 8475
				defaultsChain.unshift(spec.defaults || {});                                                                        // 8476
				duration = duration || spec.duration;                                                                              // 8477
				viewType = viewType || spec.type;                                                                                  // 8478
			}                                                                                                                   // 8479
                                                                                                                       // 8480
			if (overrides) {                                                                                                    // 8481
				overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level                       // 8482
				duration = duration || overrides.duration;                                                                         // 8483
				viewType = viewType || overrides.type;                                                                             // 8484
			}                                                                                                                   // 8485
		}                                                                                                                    // 8486
                                                                                                                       // 8487
		spec = mergeProps(specChain);                                                                                        // 8488
		spec.type = requestedViewType;                                                                                       // 8489
		if (!spec['class']) {                                                                                                // 8490
			return false;                                                                                                       // 8491
		}                                                                                                                    // 8492
                                                                                                                       // 8493
		if (duration) {                                                                                                      // 8494
			duration = moment.duration(duration);                                                                               // 8495
			if (duration.valueOf()) { // valid?                                                                                 // 8496
				spec.duration = duration;                                                                                          // 8497
				unit = computeIntervalUnit(duration);                                                                              // 8498
                                                                                                                       // 8499
				// view is a single-unit duration, like "week" or "day"                                                            // 8500
				// incorporate options for this. lowest priority                                                                   // 8501
				if (duration.as(unit) === 1) {                                                                                     // 8502
					spec.singleUnit = unit;                                                                                           // 8503
					overridesChain.unshift(viewOverrides[unit] || {});                                                                // 8504
				}                                                                                                                  // 8505
			}                                                                                                                   // 8506
		}                                                                                                                    // 8507
                                                                                                                       // 8508
		spec.defaults = mergeOptions(defaultsChain);                                                                         // 8509
		spec.overrides = mergeOptions(overridesChain);                                                                       // 8510
                                                                                                                       // 8511
		this.buildViewSpecOptions(spec);                                                                                     // 8512
		this.buildViewSpecButtonText(spec, requestedViewType);                                                               // 8513
                                                                                                                       // 8514
		return spec;                                                                                                         // 8515
	},                                                                                                                    // 8516
                                                                                                                       // 8517
                                                                                                                       // 8518
	// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 8519
	buildViewSpecOptions: function(spec) {                                                                                // 8520
		spec.options = mergeOptions([ // lowest to highest priority                                                          // 8521
			Calendar.defaults, // global defaults                                                                               // 8522
			spec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 8523
			this.dirDefaults,                                                                                                   // 8524
			this.langDefaults, // locale and dir take precedence over view's defaults!                                          // 8525
			this.overrides, // calendar's overrides (options given to constructor)                                              // 8526
			spec.overrides // view's overrides (view-specific options)                                                          // 8527
		]);                                                                                                                  // 8528
		populateInstanceComputableOptions(spec.options);                                                                     // 8529
	},                                                                                                                    // 8530
                                                                                                                       // 8531
                                                                                                                       // 8532
	// Computes and assigns a view spec's buttonText-related options                                                      // 8533
	buildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 8534
                                                                                                                       // 8535
		// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 8536
		// requested view, falling back to a generic unit entry like "week" or "day"                                         // 8537
		function queryButtonText(options) {                                                                                  // 8538
			var buttonText = options.buttonText || {};                                                                          // 8539
			return buttonText[requestedViewType] ||                                                                             // 8540
				(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 8541
		}                                                                                                                    // 8542
                                                                                                                       // 8543
		// highest to lowest priority                                                                                        // 8544
		spec.buttonTextOverride =                                                                                            // 8545
			queryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 8546
			spec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 8547
                                                                                                                       // 8548
		// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 8549
		spec.buttonTextDefault =                                                                                             // 8550
			queryButtonText(this.langDefaults) ||                                                                               // 8551
			queryButtonText(this.dirDefaults) ||                                                                                // 8552
			spec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 8553
			queryButtonText(Calendar.defaults) ||                                                                               // 8554
			(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like "3 days"                                   // 8555
			requestedViewType; // fall back to given view name                                                                  // 8556
	},                                                                                                                    // 8557
                                                                                                                       // 8558
                                                                                                                       // 8559
	// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 8560
	instantiateView: function(viewType) {                                                                                 // 8561
		var spec = this.getViewSpec(viewType);                                                                               // 8562
                                                                                                                       // 8563
		return new spec['class'](this, viewType, spec.options, spec.duration);                                               // 8564
	},                                                                                                                    // 8565
                                                                                                                       // 8566
                                                                                                                       // 8567
	// Returns a boolean about whether the view is okay to instantiate at some point                                      // 8568
	isValidViewType: function(viewType) {                                                                                 // 8569
		return Boolean(this.getViewSpec(viewType));                                                                          // 8570
	},                                                                                                                    // 8571
                                                                                                                       // 8572
                                                                                                                       // 8573
	// Should be called when any type of async data fetching begins                                                       // 8574
	pushLoading: function() {                                                                                             // 8575
		if (!(this.loadingLevel++)) {                                                                                        // 8576
			this.trigger('loading', null, true, this.view);                                                                     // 8577
		}                                                                                                                    // 8578
	},                                                                                                                    // 8579
                                                                                                                       // 8580
                                                                                                                       // 8581
	// Should be called when any type of async data fetching completes                                                    // 8582
	popLoading: function() {                                                                                              // 8583
		if (!(--this.loadingLevel)) {                                                                                        // 8584
			this.trigger('loading', null, false, this.view);                                                                    // 8585
		}                                                                                                                    // 8586
	},                                                                                                                    // 8587
                                                                                                                       // 8588
                                                                                                                       // 8589
	// Given arguments to the select method in the API, returns a span (unzoned start/end and other info)                 // 8590
	buildSelectSpan: function(zonedStartInput, zonedEndInput) {                                                           // 8591
		var start = this.moment(zonedStartInput).stripZone();                                                                // 8592
		var end;                                                                                                             // 8593
                                                                                                                       // 8594
		if (zonedEndInput) {                                                                                                 // 8595
			end = this.moment(zonedEndInput).stripZone();                                                                       // 8596
		}                                                                                                                    // 8597
		else if (start.hasTime()) {                                                                                          // 8598
			end = start.clone().add(this.defaultTimedEventDuration);                                                            // 8599
		}                                                                                                                    // 8600
		else {                                                                                                               // 8601
			end = start.clone().add(this.defaultAllDayEventDuration);                                                           // 8602
		}                                                                                                                    // 8603
                                                                                                                       // 8604
		return { start: start, end: end };                                                                                   // 8605
	}                                                                                                                     // 8606
                                                                                                                       // 8607
});                                                                                                                    // 8608
                                                                                                                       // 8609
                                                                                                                       // 8610
Calendar.mixin(Emitter);                                                                                               // 8611
                                                                                                                       // 8612
                                                                                                                       // 8613
function Calendar_constructor(element, overrides) {                                                                    // 8614
	var t = this;                                                                                                         // 8615
                                                                                                                       // 8616
                                                                                                                       // 8617
	t.initOptions(overrides || {});                                                                                       // 8618
	var options = this.options;                                                                                           // 8619
                                                                                                                       // 8620
	                                                                                                                      // 8621
	// Exports                                                                                                            // 8622
	// -----------------------------------------------------------------------------------                                // 8623
                                                                                                                       // 8624
	t.render = render;                                                                                                    // 8625
	t.destroy = destroy;                                                                                                  // 8626
	t.refetchEvents = refetchEvents;                                                                                      // 8627
	t.reportEvents = reportEvents;                                                                                        // 8628
	t.reportEventChange = reportEventChange;                                                                              // 8629
	t.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 8630
	t.changeView = renderView; // `renderView` will switch to another view                                                // 8631
	t.select = select;                                                                                                    // 8632
	t.unselect = unselect;                                                                                                // 8633
	t.prev = prev;                                                                                                        // 8634
	t.next = next;                                                                                                        // 8635
	t.prevYear = prevYear;                                                                                                // 8636
	t.nextYear = nextYear;                                                                                                // 8637
	t.today = today;                                                                                                      // 8638
	t.gotoDate = gotoDate;                                                                                                // 8639
	t.incrementDate = incrementDate;                                                                                      // 8640
	t.zoomTo = zoomTo;                                                                                                    // 8641
	t.getDate = getDate;                                                                                                  // 8642
	t.getCalendar = getCalendar;                                                                                          // 8643
	t.getView = getView;                                                                                                  // 8644
	t.option = option;                                                                                                    // 8645
	t.trigger = trigger;                                                                                                  // 8646
                                                                                                                       // 8647
                                                                                                                       // 8648
                                                                                                                       // 8649
	// Language-data Internals                                                                                            // 8650
	// -----------------------------------------------------------------------------------                                // 8651
	// Apply overrides to the current language's data                                                                     // 8652
                                                                                                                       // 8653
                                                                                                                       // 8654
	var localeData = createObject( // make a cheap copy                                                                   // 8655
		getMomentLocaleData(options.lang) // will fall back to en                                                            // 8656
	);                                                                                                                    // 8657
                                                                                                                       // 8658
	if (options.monthNames) {                                                                                             // 8659
		localeData._months = options.monthNames;                                                                             // 8660
	}                                                                                                                     // 8661
	if (options.monthNamesShort) {                                                                                        // 8662
		localeData._monthsShort = options.monthNamesShort;                                                                   // 8663
	}                                                                                                                     // 8664
	if (options.dayNames) {                                                                                               // 8665
		localeData._weekdays = options.dayNames;                                                                             // 8666
	}                                                                                                                     // 8667
	if (options.dayNamesShort) {                                                                                          // 8668
		localeData._weekdaysShort = options.dayNamesShort;                                                                   // 8669
	}                                                                                                                     // 8670
	if (options.firstDay != null) {                                                                                       // 8671
		var _week = createObject(localeData._week); // _week: { dow: # }                                                     // 8672
		_week.dow = options.firstDay;                                                                                        // 8673
		localeData._week = _week;                                                                                            // 8674
	}                                                                                                                     // 8675
                                                                                                                       // 8676
	// assign a normalized value, to be used by our .week() moment extension                                              // 8677
	localeData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 8678
		if (typeof weekCalc === 'function') {                                                                                // 8679
			return weekCalc;                                                                                                    // 8680
		}                                                                                                                    // 8681
		else if (weekCalc === 'local') {                                                                                     // 8682
			return weekCalc;                                                                                                    // 8683
		}                                                                                                                    // 8684
		else if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 8685
			return 'ISO';                                                                                                       // 8686
		}                                                                                                                    // 8687
	})(options.weekNumberCalculation);                                                                                    // 8688
                                                                                                                       // 8689
                                                                                                                       // 8690
                                                                                                                       // 8691
	// Calendar-specific Date Utilities                                                                                   // 8692
	// -----------------------------------------------------------------------------------                                // 8693
                                                                                                                       // 8694
                                                                                                                       // 8695
	t.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 8696
	t.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 8697
                                                                                                                       // 8698
                                                                                                                       // 8699
	// Builds a moment using the settings of the current calendar: timezone and language.                                 // 8700
	// Accepts anything the vanilla moment() constructor accepts.                                                         // 8701
	t.moment = function() {                                                                                               // 8702
		var mom;                                                                                                             // 8703
                                                                                                                       // 8704
		if (options.timezone === 'local') {                                                                                  // 8705
			mom = FC.moment.apply(null, arguments);                                                                             // 8706
                                                                                                                       // 8707
			// Force the moment to be local, because FC.moment doesn't guarantee it.                                            // 8708
			if (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 8709
				mom.local();                                                                                                       // 8710
			}                                                                                                                   // 8711
		}                                                                                                                    // 8712
		else if (options.timezone === 'UTC') {                                                                               // 8713
			mom = FC.moment.utc.apply(null, arguments); // process as UTC                                                       // 8714
		}                                                                                                                    // 8715
		else {                                                                                                               // 8716
			mom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 8717
		}                                                                                                                    // 8718
                                                                                                                       // 8719
		if ('_locale' in mom) { // moment 2.8 and above                                                                      // 8720
			mom._locale = localeData;                                                                                           // 8721
		}                                                                                                                    // 8722
		else { // pre-moment-2.8                                                                                             // 8723
			mom._lang = localeData;                                                                                             // 8724
		}                                                                                                                    // 8725
                                                                                                                       // 8726
		return mom;                                                                                                          // 8727
	};                                                                                                                    // 8728
                                                                                                                       // 8729
                                                                                                                       // 8730
	// Returns a boolean about whether or not the calendar knows how to calculate                                         // 8731
	// the timezone offset of arbitrary dates in the current timezone.                                                    // 8732
	t.getIsAmbigTimezone = function() {                                                                                   // 8733
		return options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 8734
	};                                                                                                                    // 8735
                                                                                                                       // 8736
                                                                                                                       // 8737
	// Returns a copy of the given date in the current timezone. Has no effect on dates without times.                    // 8738
	t.applyTimezone = function(date) {                                                                                    // 8739
		if (!date.hasTime()) {                                                                                               // 8740
			return date.clone();                                                                                                // 8741
		}                                                                                                                    // 8742
                                                                                                                       // 8743
		var zonedDate = t.moment(date.toArray());                                                                            // 8744
		var timeAdjust = date.time() - zonedDate.time();                                                                     // 8745
		var adjustedZonedDate;                                                                                               // 8746
                                                                                                                       // 8747
		// Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)                  // 8748
		if (timeAdjust) { // is the time result different than expected?                                                     // 8749
			adjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds                                          // 8750
			if (date.time() - adjustedZonedDate.time() === 0) { // does it match perfectly now?                                 // 8751
				zonedDate = adjustedZonedDate;                                                                                     // 8752
			}                                                                                                                   // 8753
		}                                                                                                                    // 8754
                                                                                                                       // 8755
		return zonedDate;                                                                                                    // 8756
	};                                                                                                                    // 8757
                                                                                                                       // 8758
                                                                                                                       // 8759
	// Returns a moment for the current date, as defined by the client's computer or from the `now` option.               // 8760
	// Will return an moment with an ambiguous timezone.                                                                  // 8761
	t.getNow = function() {                                                                                               // 8762
		var now = options.now;                                                                                               // 8763
		if (typeof now === 'function') {                                                                                     // 8764
			now = now();                                                                                                        // 8765
		}                                                                                                                    // 8766
		return t.moment(now).stripZone();                                                                                    // 8767
	};                                                                                                                    // 8768
                                                                                                                       // 8769
                                                                                                                       // 8770
	// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 8771
	t.getEventEnd = function(event) {                                                                                     // 8772
		if (event.end) {                                                                                                     // 8773
			return event.end.clone();                                                                                           // 8774
		}                                                                                                                    // 8775
		else {                                                                                                               // 8776
			return t.getDefaultEventEnd(event.allDay, event.start);                                                             // 8777
		}                                                                                                                    // 8778
	};                                                                                                                    // 8779
                                                                                                                       // 8780
                                                                                                                       // 8781
	// Given an event's allDay status and start date, return what its fallback end date should be.                        // 8782
	// TODO: rename to computeDefaultEventEnd                                                                             // 8783
	t.getDefaultEventEnd = function(allDay, zonedStart) {                                                                 // 8784
		var end = zonedStart.clone();                                                                                        // 8785
                                                                                                                       // 8786
		if (allDay) {                                                                                                        // 8787
			end.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 8788
		}                                                                                                                    // 8789
		else {                                                                                                               // 8790
			end.add(t.defaultTimedEventDuration);                                                                               // 8791
		}                                                                                                                    // 8792
                                                                                                                       // 8793
		if (t.getIsAmbigTimezone()) {                                                                                        // 8794
			end.stripZone(); // we don't know what the tzo should be                                                            // 8795
		}                                                                                                                    // 8796
                                                                                                                       // 8797
		return end;                                                                                                          // 8798
	};                                                                                                                    // 8799
                                                                                                                       // 8800
                                                                                                                       // 8801
	// Produces a human-readable string for the given duration.                                                           // 8802
	// Side-effect: changes the locale of the given duration.                                                             // 8803
	t.humanizeDuration = function(duration) {                                                                             // 8804
		return (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 8805
			.humanize();                                                                                                        // 8806
	};                                                                                                                    // 8807
                                                                                                                       // 8808
                                                                                                                       // 8809
	                                                                                                                      // 8810
	// Imports                                                                                                            // 8811
	// -----------------------------------------------------------------------------------                                // 8812
                                                                                                                       // 8813
                                                                                                                       // 8814
	EventManager.call(t, options);                                                                                        // 8815
	var isFetchNeeded = t.isFetchNeeded;                                                                                  // 8816
	var fetchEvents = t.fetchEvents;                                                                                      // 8817
                                                                                                                       // 8818
                                                                                                                       // 8819
                                                                                                                       // 8820
	// Locals                                                                                                             // 8821
	// -----------------------------------------------------------------------------------                                // 8822
                                                                                                                       // 8823
                                                                                                                       // 8824
	var _element = element[0];                                                                                            // 8825
	var header;                                                                                                           // 8826
	var headerElement;                                                                                                    // 8827
	var content;                                                                                                          // 8828
	var tm; // for making theme classes                                                                                   // 8829
	var currentView; // NOTE: keep this in sync with this.view                                                            // 8830
	var viewsByType = {}; // holds all instantiated view instances, current or not                                        // 8831
	var suggestedViewHeight;                                                                                              // 8832
	var windowResizeProxy; // wraps the windowResize function                                                             // 8833
	var ignoreWindowResize = 0;                                                                                           // 8834
	var events = [];                                                                                                      // 8835
	var date; // unzoned                                                                                                  // 8836
	                                                                                                                      // 8837
	                                                                                                                      // 8838
	                                                                                                                      // 8839
	// Main Rendering                                                                                                     // 8840
	// -----------------------------------------------------------------------------------                                // 8841
                                                                                                                       // 8842
                                                                                                                       // 8843
	// compute the initial ambig-timezone date                                                                            // 8844
	if (options.defaultDate != null) {                                                                                    // 8845
		date = t.moment(options.defaultDate).stripZone();                                                                    // 8846
	}                                                                                                                     // 8847
	else {                                                                                                                // 8848
		date = t.getNow(); // getNow already returns unzoned                                                                 // 8849
	}                                                                                                                     // 8850
	                                                                                                                      // 8851
	                                                                                                                      // 8852
	function render() {                                                                                                   // 8853
		if (!content) {                                                                                                      // 8854
			initialRender();                                                                                                    // 8855
		}                                                                                                                    // 8856
		else if (elementVisible()) {                                                                                         // 8857
			// mainly for the public API                                                                                        // 8858
			calcSize();                                                                                                         // 8859
			renderView();                                                                                                       // 8860
		}                                                                                                                    // 8861
	}                                                                                                                     // 8862
	                                                                                                                      // 8863
	                                                                                                                      // 8864
	function initialRender() {                                                                                            // 8865
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 8866
		element.addClass('fc');                                                                                              // 8867
                                                                                                                       // 8868
		if (options.isRTL) {                                                                                                 // 8869
			element.addClass('fc-rtl');                                                                                         // 8870
		}                                                                                                                    // 8871
		else {                                                                                                               // 8872
			element.addClass('fc-ltr');                                                                                         // 8873
		}                                                                                                                    // 8874
                                                                                                                       // 8875
		if (options.theme) {                                                                                                 // 8876
			element.addClass('ui-widget');                                                                                      // 8877
		}                                                                                                                    // 8878
		else {                                                                                                               // 8879
			element.addClass('fc-unthemed');                                                                                    // 8880
		}                                                                                                                    // 8881
                                                                                                                       // 8882
		content = $("<div class='fc-view-container'/>").prependTo(element);                                                  // 8883
                                                                                                                       // 8884
		header = t.header = new Header(t, options);                                                                          // 8885
		headerElement = header.render();                                                                                     // 8886
		if (headerElement) {                                                                                                 // 8887
			element.prepend(headerElement);                                                                                     // 8888
		}                                                                                                                    // 8889
                                                                                                                       // 8890
		renderView(options.defaultView);                                                                                     // 8891
                                                                                                                       // 8892
		if (options.handleWindowResize) {                                                                                    // 8893
			windowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 8894
			$(window).resize(windowResizeProxy);                                                                                // 8895
		}                                                                                                                    // 8896
	}                                                                                                                     // 8897
	                                                                                                                      // 8898
	                                                                                                                      // 8899
	function destroy() {                                                                                                  // 8900
                                                                                                                       // 8901
		if (currentView) {                                                                                                   // 8902
			currentView.removeElement();                                                                                        // 8903
                                                                                                                       // 8904
			// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 8905
			// It is still the "current" view, just not rendered.                                                               // 8906
		}                                                                                                                    // 8907
                                                                                                                       // 8908
		header.removeElement();                                                                                              // 8909
		content.remove();                                                                                                    // 8910
		element.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 8911
                                                                                                                       // 8912
		if (windowResizeProxy) {                                                                                             // 8913
			$(window).unbind('resize', windowResizeProxy);                                                                      // 8914
		}                                                                                                                    // 8915
	}                                                                                                                     // 8916
	                                                                                                                      // 8917
	                                                                                                                      // 8918
	function elementVisible() {                                                                                           // 8919
		return element.is(':visible');                                                                                       // 8920
	}                                                                                                                     // 8921
	                                                                                                                      // 8922
	                                                                                                                      // 8923
                                                                                                                       // 8924
	// View Rendering                                                                                                     // 8925
	// -----------------------------------------------------------------------------------                                // 8926
                                                                                                                       // 8927
                                                                                                                       // 8928
	// Renders a view because of a date change, view-type change, or for the first time.                                  // 8929
	// If not given a viewType, keep the current view but render different dates.                                         // 8930
	function renderView(viewType) {                                                                                       // 8931
		ignoreWindowResize++;                                                                                                // 8932
                                                                                                                       // 8933
		// if viewType is changing, remove the old view's rendering                                                          // 8934
		if (currentView && viewType && currentView.type !== viewType) {                                                      // 8935
			header.deactivateButton(currentView.type);                                                                          // 8936
			freezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 8937
			currentView.removeElement();                                                                                        // 8938
			currentView = t.view = null;                                                                                        // 8939
		}                                                                                                                    // 8940
                                                                                                                       // 8941
		// if viewType changed, or the view was never created, create a fresh view                                           // 8942
		if (!currentView && viewType) {                                                                                      // 8943
			currentView = t.view =                                                                                              // 8944
				viewsByType[viewType] ||                                                                                           // 8945
				(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 8946
                                                                                                                       // 8947
			currentView.setElement(                                                                                             // 8948
				$("<div class='fc-view fc-" + viewType + "-view' />").appendTo(content)                                            // 8949
			);                                                                                                                  // 8950
			header.activateButton(viewType);                                                                                    // 8951
		}                                                                                                                    // 8952
                                                                                                                       // 8953
		if (currentView) {                                                                                                   // 8954
                                                                                                                       // 8955
			// in case the view should render a period of time that is completely hidden                                        // 8956
			date = currentView.massageCurrentDate(date);                                                                        // 8957
                                                                                                                       // 8958
			// render or rerender the view                                                                                      // 8959
			if (                                                                                                                // 8960
				!currentView.displaying ||                                                                                         // 8961
				!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 8962
			) {                                                                                                                 // 8963
				if (elementVisible()) {                                                                                            // 8964
                                                                                                                       // 8965
					currentView.display(date); // will call freezeContentHeight                                                       // 8966
					unfreezeContentHeight(); // immediately unfreeze regardless of whether display is async                           // 8967
                                                                                                                       // 8968
					// need to do this after View::render, so dates are calculated                                                    // 8969
					updateHeaderTitle();                                                                                              // 8970
					updateTodayButton();                                                                                              // 8971
                                                                                                                       // 8972
					getAndRenderEvents();                                                                                             // 8973
				}                                                                                                                  // 8974
			}                                                                                                                   // 8975
		}                                                                                                                    // 8976
                                                                                                                       // 8977
		unfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8978
		ignoreWindowResize--;                                                                                                // 8979
	}                                                                                                                     // 8980
                                                                                                                       // 8981
	                                                                                                                      // 8982
                                                                                                                       // 8983
	// Resizing                                                                                                           // 8984
	// -----------------------------------------------------------------------------------                                // 8985
                                                                                                                       // 8986
                                                                                                                       // 8987
	t.getSuggestedViewHeight = function() {                                                                               // 8988
		if (suggestedViewHeight === undefined) {                                                                             // 8989
			calcSize();                                                                                                         // 8990
		}                                                                                                                    // 8991
		return suggestedViewHeight;                                                                                          // 8992
	};                                                                                                                    // 8993
                                                                                                                       // 8994
                                                                                                                       // 8995
	t.isHeightAuto = function() {                                                                                         // 8996
		return options.contentHeight === 'auto' || options.height === 'auto';                                                // 8997
	};                                                                                                                    // 8998
	                                                                                                                      // 8999
	                                                                                                                      // 9000
	function updateSize(shouldRecalc) {                                                                                   // 9001
		if (elementVisible()) {                                                                                              // 9002
                                                                                                                       // 9003
			if (shouldRecalc) {                                                                                                 // 9004
				_calcSize();                                                                                                       // 9005
			}                                                                                                                   // 9006
                                                                                                                       // 9007
			ignoreWindowResize++;                                                                                               // 9008
			currentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 9009
			ignoreWindowResize--;                                                                                               // 9010
                                                                                                                       // 9011
			return true; // signal success                                                                                      // 9012
		}                                                                                                                    // 9013
	}                                                                                                                     // 9014
                                                                                                                       // 9015
                                                                                                                       // 9016
	function calcSize() {                                                                                                 // 9017
		if (elementVisible()) {                                                                                              // 9018
			_calcSize();                                                                                                        // 9019
		}                                                                                                                    // 9020
	}                                                                                                                     // 9021
	                                                                                                                      // 9022
	                                                                                                                      // 9023
	function _calcSize() { // assumes elementVisible                                                                      // 9024
		if (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 9025
			suggestedViewHeight = options.contentHeight;                                                                        // 9026
		}                                                                                                                    // 9027
		else if (typeof options.height === 'number') { // exists and not 'auto'                                              // 9028
			suggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 9029
		}                                                                                                                    // 9030
		else {                                                                                                               // 9031
			suggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 9032
		}                                                                                                                    // 9033
	}                                                                                                                     // 9034
	                                                                                                                      // 9035
	                                                                                                                      // 9036
	function windowResize(ev) {                                                                                           // 9037
		if (                                                                                                                 // 9038
			!ignoreWindowResize &&                                                                                              // 9039
			ev.target === window && // so we don't process jqui "resize" events that have bubbled up                            // 9040
			currentView.start // view has already been rendered                                                                 // 9041
		) {                                                                                                                  // 9042
			if (updateSize(true)) {                                                                                             // 9043
				currentView.trigger('windowResize', _element);                                                                     // 9044
			}                                                                                                                   // 9045
		}                                                                                                                    // 9046
	}                                                                                                                     // 9047
	                                                                                                                      // 9048
	                                                                                                                      // 9049
	                                                                                                                      // 9050
	/* Event Fetching/Rendering                                                                                           // 9051
	-----------------------------------------------------------------------------*/                                       // 9052
	// TODO: going forward, most of this stuff should be directly handled by the view                                     // 9053
                                                                                                                       // 9054
                                                                                                                       // 9055
	function refetchEvents() { // can be called as an API method                                                          // 9056
		destroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 9057
		fetchAndRenderEvents();                                                                                              // 9058
	}                                                                                                                     // 9059
                                                                                                                       // 9060
                                                                                                                       // 9061
	function renderEvents() { // destroys old events if previously rendered                                               // 9062
		if (elementVisible()) {                                                                                              // 9063
			freezeContentHeight();                                                                                              // 9064
			currentView.displayEvents(events);                                                                                  // 9065
			unfreezeContentHeight();                                                                                            // 9066
		}                                                                                                                    // 9067
	}                                                                                                                     // 9068
                                                                                                                       // 9069
                                                                                                                       // 9070
	function destroyEvents() {                                                                                            // 9071
		freezeContentHeight();                                                                                               // 9072
		currentView.clearEvents();                                                                                           // 9073
		unfreezeContentHeight();                                                                                             // 9074
	}                                                                                                                     // 9075
	                                                                                                                      // 9076
                                                                                                                       // 9077
	function getAndRenderEvents() {                                                                                       // 9078
		if (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 9079
			fetchAndRenderEvents();                                                                                             // 9080
		}                                                                                                                    // 9081
		else {                                                                                                               // 9082
			renderEvents();                                                                                                     // 9083
		}                                                                                                                    // 9084
	}                                                                                                                     // 9085
                                                                                                                       // 9086
                                                                                                                       // 9087
	function fetchAndRenderEvents() {                                                                                     // 9088
		fetchEvents(currentView.start, currentView.end);                                                                     // 9089
			// ... will call reportEvents                                                                                       // 9090
			// ... which will call renderEvents                                                                                 // 9091
	}                                                                                                                     // 9092
                                                                                                                       // 9093
	                                                                                                                      // 9094
	// called when event data arrives                                                                                     // 9095
	function reportEvents(_events) {                                                                                      // 9096
		events = _events;                                                                                                    // 9097
		renderEvents();                                                                                                      // 9098
	}                                                                                                                     // 9099
                                                                                                                       // 9100
                                                                                                                       // 9101
	// called when a single event's data has been changed                                                                 // 9102
	function reportEventChange() {                                                                                        // 9103
		renderEvents();                                                                                                      // 9104
	}                                                                                                                     // 9105
                                                                                                                       // 9106
                                                                                                                       // 9107
                                                                                                                       // 9108
	/* Header Updating                                                                                                    // 9109
	-----------------------------------------------------------------------------*/                                       // 9110
                                                                                                                       // 9111
                                                                                                                       // 9112
	function updateHeaderTitle() {                                                                                        // 9113
		header.updateTitle(currentView.title);                                                                               // 9114
	}                                                                                                                     // 9115
                                                                                                                       // 9116
                                                                                                                       // 9117
	function updateTodayButton() {                                                                                        // 9118
		var now = t.getNow();                                                                                                // 9119
		if (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 9120
			header.disableButton('today');                                                                                      // 9121
		}                                                                                                                    // 9122
		else {                                                                                                               // 9123
			header.enableButton('today');                                                                                       // 9124
		}                                                                                                                    // 9125
	}                                                                                                                     // 9126
	                                                                                                                      // 9127
                                                                                                                       // 9128
                                                                                                                       // 9129
	/* Selection                                                                                                          // 9130
	-----------------------------------------------------------------------------*/                                       // 9131
	                                                                                                                      // 9132
                                                                                                                       // 9133
	// this public method receives start/end dates in any format, with any timezone                                       // 9134
	function select(zonedStartInput, zonedEndInput) {                                                                     // 9135
		currentView.select(                                                                                                  // 9136
			t.buildSelectSpan.apply(t, arguments)                                                                               // 9137
		);                                                                                                                   // 9138
	}                                                                                                                     // 9139
	                                                                                                                      // 9140
                                                                                                                       // 9141
	function unselect() { // safe to be called before renderView                                                          // 9142
		if (currentView) {                                                                                                   // 9143
			currentView.unselect();                                                                                             // 9144
		}                                                                                                                    // 9145
	}                                                                                                                     // 9146
	                                                                                                                      // 9147
	                                                                                                                      // 9148
	                                                                                                                      // 9149
	/* Date                                                                                                               // 9150
	-----------------------------------------------------------------------------*/                                       // 9151
	                                                                                                                      // 9152
	                                                                                                                      // 9153
	function prev() {                                                                                                     // 9154
		date = currentView.computePrevDate(date);                                                                            // 9155
		renderView();                                                                                                        // 9156
	}                                                                                                                     // 9157
	                                                                                                                      // 9158
	                                                                                                                      // 9159
	function next() {                                                                                                     // 9160
		date = currentView.computeNextDate(date);                                                                            // 9161
		renderView();                                                                                                        // 9162
	}                                                                                                                     // 9163
	                                                                                                                      // 9164
	                                                                                                                      // 9165
	function prevYear() {                                                                                                 // 9166
		date.add(-1, 'years');                                                                                               // 9167
		renderView();                                                                                                        // 9168
	}                                                                                                                     // 9169
	                                                                                                                      // 9170
	                                                                                                                      // 9171
	function nextYear() {                                                                                                 // 9172
		date.add(1, 'years');                                                                                                // 9173
		renderView();                                                                                                        // 9174
	}                                                                                                                     // 9175
	                                                                                                                      // 9176
	                                                                                                                      // 9177
	function today() {                                                                                                    // 9178
		date = t.getNow();                                                                                                   // 9179
		renderView();                                                                                                        // 9180
	}                                                                                                                     // 9181
	                                                                                                                      // 9182
	                                                                                                                      // 9183
	function gotoDate(zonedDateInput) {                                                                                   // 9184
		date = t.moment(zonedDateInput).stripZone();                                                                         // 9185
		renderView();                                                                                                        // 9186
	}                                                                                                                     // 9187
	                                                                                                                      // 9188
	                                                                                                                      // 9189
	function incrementDate(delta) {                                                                                       // 9190
		date.add(moment.duration(delta));                                                                                    // 9191
		renderView();                                                                                                        // 9192
	}                                                                                                                     // 9193
                                                                                                                       // 9194
                                                                                                                       // 9195
	// Forces navigation to a view for the given date.                                                                    // 9196
	// `viewType` can be a specific view name or a generic one like "week" or "day".                                      // 9197
	function zoomTo(newDate, viewType) {                                                                                  // 9198
		var spec;                                                                                                            // 9199
                                                                                                                       // 9200
		viewType = viewType || 'day'; // day is default zoom                                                                 // 9201
		spec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 9202
                                                                                                                       // 9203
		date = newDate.clone();                                                                                              // 9204
		renderView(spec ? spec.type : null);                                                                                 // 9205
	}                                                                                                                     // 9206
	                                                                                                                      // 9207
	                                                                                                                      // 9208
	// for external API                                                                                                   // 9209
	function getDate() {                                                                                                  // 9210
		return t.applyTimezone(date); // infuse the calendar's timezone                                                      // 9211
	}                                                                                                                     // 9212
                                                                                                                       // 9213
                                                                                                                       // 9214
                                                                                                                       // 9215
	/* Height "Freezing"                                                                                                  // 9216
	-----------------------------------------------------------------------------*/                                       // 9217
	// TODO: move this into the view                                                                                      // 9218
                                                                                                                       // 9219
	t.freezeContentHeight = freezeContentHeight;                                                                          // 9220
	t.unfreezeContentHeight = unfreezeContentHeight;                                                                      // 9221
                                                                                                                       // 9222
                                                                                                                       // 9223
	function freezeContentHeight() {                                                                                      // 9224
		content.css({                                                                                                        // 9225
			width: '100%',                                                                                                      // 9226
			height: content.height(),                                                                                           // 9227
			overflow: 'hidden'                                                                                                  // 9228
		});                                                                                                                  // 9229
	}                                                                                                                     // 9230
                                                                                                                       // 9231
                                                                                                                       // 9232
	function unfreezeContentHeight() {                                                                                    // 9233
		content.css({                                                                                                        // 9234
			width: '',                                                                                                          // 9235
			height: '',                                                                                                         // 9236
			overflow: ''                                                                                                        // 9237
		});                                                                                                                  // 9238
	}                                                                                                                     // 9239
	                                                                                                                      // 9240
	                                                                                                                      // 9241
	                                                                                                                      // 9242
	/* Misc                                                                                                               // 9243
	-----------------------------------------------------------------------------*/                                       // 9244
	                                                                                                                      // 9245
                                                                                                                       // 9246
	function getCalendar() {                                                                                              // 9247
		return t;                                                                                                            // 9248
	}                                                                                                                     // 9249
                                                                                                                       // 9250
	                                                                                                                      // 9251
	function getView() {                                                                                                  // 9252
		return currentView;                                                                                                  // 9253
	}                                                                                                                     // 9254
	                                                                                                                      // 9255
	                                                                                                                      // 9256
	function option(name, value) {                                                                                        // 9257
		if (value === undefined) {                                                                                           // 9258
			return options[name];                                                                                               // 9259
		}                                                                                                                    // 9260
		if (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 9261
			options[name] = value;                                                                                              // 9262
			updateSize(true); // true = allow recalculation of height                                                           // 9263
		}                                                                                                                    // 9264
	}                                                                                                                     // 9265
	                                                                                                                      // 9266
	                                                                                                                      // 9267
	function trigger(name, thisObj) { // overrides the Emitter's trigger method :(                                        // 9268
		var args = Array.prototype.slice.call(arguments, 2);                                                                 // 9269
                                                                                                                       // 9270
		thisObj = thisObj || _element;                                                                                       // 9271
		this.triggerWith(name, thisObj, args); // Emitter's method                                                           // 9272
                                                                                                                       // 9273
		if (options[name]) {                                                                                                 // 9274
			return options[name].apply(thisObj, args);                                                                          // 9275
		}                                                                                                                    // 9276
	}                                                                                                                     // 9277
                                                                                                                       // 9278
	t.initialize();                                                                                                       // 9279
}                                                                                                                      // 9280
                                                                                                                       // 9281
;;                                                                                                                     // 9282
                                                                                                                       // 9283
Calendar.defaults = {                                                                                                  // 9284
                                                                                                                       // 9285
	titleRangeSeparator: ' \u2014 ', // emphasized dash                                                                   // 9286
	monthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 9287
                                                                                                                       // 9288
	defaultTimedEventDuration: '02:00:00',                                                                                // 9289
	defaultAllDayEventDuration: { days: 1 },                                                                              // 9290
	forceEventDuration: false,                                                                                            // 9291
	nextDayThreshold: '09:00:00', // 9am                                                                                  // 9292
                                                                                                                       // 9293
	// display                                                                                                            // 9294
	defaultView: 'month',                                                                                                 // 9295
	aspectRatio: 1.35,                                                                                                    // 9296
	header: {                                                                                                             // 9297
		left: 'title',                                                                                                       // 9298
		center: '',                                                                                                          // 9299
		right: 'today prev,next'                                                                                             // 9300
	},                                                                                                                    // 9301
	weekends: true,                                                                                                       // 9302
	weekNumbers: false,                                                                                                   // 9303
                                                                                                                       // 9304
	weekNumberTitle: 'W',                                                                                                 // 9305
	weekNumberCalculation: 'local',                                                                                       // 9306
	                                                                                                                      // 9307
	//editable: false,                                                                                                    // 9308
                                                                                                                       // 9309
	//nowIndicator: false,                                                                                                // 9310
                                                                                                                       // 9311
	scrollTime: '06:00:00',                                                                                               // 9312
	                                                                                                                      // 9313
	// event ajax                                                                                                         // 9314
	lazyFetching: true,                                                                                                   // 9315
	startParam: 'start',                                                                                                  // 9316
	endParam: 'end',                                                                                                      // 9317
	timezoneParam: 'timezone',                                                                                            // 9318
                                                                                                                       // 9319
	timezone: false,                                                                                                      // 9320
                                                                                                                       // 9321
	//allDayDefault: undefined,                                                                                           // 9322
                                                                                                                       // 9323
	// locale                                                                                                             // 9324
	isRTL: false,                                                                                                         // 9325
	buttonText: {                                                                                                         // 9326
		prev: "prev",                                                                                                        // 9327
		next: "next",                                                                                                        // 9328
		prevYear: "prev year",                                                                                               // 9329
		nextYear: "next year",                                                                                               // 9330
		year: 'year', // TODO: locale files need to specify this                                                             // 9331
		today: 'today',                                                                                                      // 9332
		month: 'month',                                                                                                      // 9333
		week: 'week',                                                                                                        // 9334
		day: 'day'                                                                                                           // 9335
	},                                                                                                                    // 9336
                                                                                                                       // 9337
	buttonIcons: {                                                                                                        // 9338
		prev: 'left-single-arrow',                                                                                           // 9339
		next: 'right-single-arrow',                                                                                          // 9340
		prevYear: 'left-double-arrow',                                                                                       // 9341
		nextYear: 'right-double-arrow'                                                                                       // 9342
	},                                                                                                                    // 9343
	                                                                                                                      // 9344
	// jquery-ui theming                                                                                                  // 9345
	theme: false,                                                                                                         // 9346
	themeButtonIcons: {                                                                                                   // 9347
		prev: 'circle-triangle-w',                                                                                           // 9348
		next: 'circle-triangle-e',                                                                                           // 9349
		prevYear: 'seek-prev',                                                                                               // 9350
		nextYear: 'seek-next'                                                                                                // 9351
	},                                                                                                                    // 9352
                                                                                                                       // 9353
	//eventResizableFromStart: false,                                                                                     // 9354
	dragOpacity: .75,                                                                                                     // 9355
	dragRevertDuration: 500,                                                                                              // 9356
	dragScroll: true,                                                                                                     // 9357
	                                                                                                                      // 9358
	//selectable: false,                                                                                                  // 9359
	unselectAuto: true,                                                                                                   // 9360
	                                                                                                                      // 9361
	dropAccept: '*',                                                                                                      // 9362
                                                                                                                       // 9363
	eventOrder: 'title',                                                                                                  // 9364
                                                                                                                       // 9365
	eventLimit: false,                                                                                                    // 9366
	eventLimitText: 'more',                                                                                               // 9367
	eventLimitClick: 'popover',                                                                                           // 9368
	dayPopoverFormat: 'LL',                                                                                               // 9369
	                                                                                                                      // 9370
	handleWindowResize: true,                                                                                             // 9371
	windowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 9372
	                                                                                                                      // 9373
};                                                                                                                     // 9374
                                                                                                                       // 9375
                                                                                                                       // 9376
Calendar.englishDefaults = { // used by lang.js                                                                        // 9377
	dayPopoverFormat: 'dddd, MMMM D'                                                                                      // 9378
};                                                                                                                     // 9379
                                                                                                                       // 9380
                                                                                                                       // 9381
Calendar.rtlDefaults = { // right-to-left defaults                                                                     // 9382
	header: { // TODO: smarter solution (first/center/last ?)                                                             // 9383
		left: 'next,prev today',                                                                                             // 9384
		center: '',                                                                                                          // 9385
		right: 'title'                                                                                                       // 9386
	},                                                                                                                    // 9387
	buttonIcons: {                                                                                                        // 9388
		prev: 'right-single-arrow',                                                                                          // 9389
		next: 'left-single-arrow',                                                                                           // 9390
		prevYear: 'right-double-arrow',                                                                                      // 9391
		nextYear: 'left-double-arrow'                                                                                        // 9392
	},                                                                                                                    // 9393
	themeButtonIcons: {                                                                                                   // 9394
		prev: 'circle-triangle-e',                                                                                           // 9395
		next: 'circle-triangle-w',                                                                                           // 9396
		nextYear: 'seek-prev',                                                                                               // 9397
		prevYear: 'seek-next'                                                                                                // 9398
	}                                                                                                                     // 9399
};                                                                                                                     // 9400
                                                                                                                       // 9401
;;                                                                                                                     // 9402
                                                                                                                       // 9403
var langOptionHash = FC.langs = {}; // initialize and expose                                                           // 9404
                                                                                                                       // 9405
                                                                                                                       // 9406
// TODO: document the structure and ordering of a FullCalendar lang file                                               // 9407
// TODO: rename everything "lang" to "locale", like what the moment project did                                        // 9408
                                                                                                                       // 9409
                                                                                                                       // 9410
// Initialize jQuery UI datepicker translations while using some of the translations                                   // 9411
// Will set this as the default language for datepicker.                                                               // 9412
FC.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 9413
                                                                                                                       // 9414
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 9415
	var fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 9416
                                                                                                                       // 9417
	// transfer some simple options from datepicker to fc                                                                 // 9418
	fcOptions.isRTL = dpOptions.isRTL;                                                                                    // 9419
	fcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 9420
                                                                                                                       // 9421
	// compute some more complex options from datepicker                                                                  // 9422
	$.each(dpComputableOptions, function(name, func) {                                                                    // 9423
		fcOptions[name] = func(dpOptions);                                                                                   // 9424
	});                                                                                                                   // 9425
                                                                                                                       // 9426
	// is jQuery UI Datepicker is on the page?                                                                            // 9427
	if ($.datepicker) {                                                                                                   // 9428
                                                                                                                       // 9429
		// Register the language data.                                                                                       // 9430
		// FullCalendar and MomentJS use language codes like "pt-br" but Datepicker                                          // 9431
		// does it like "pt-BR" or if it doesn't have the language, maybe just "pt".                                         // 9432
		// Make an alias so the language can be referenced either way.                                                       // 9433
		$.datepicker.regional[dpLangCode] =                                                                                  // 9434
			$.datepicker.regional[langCode] = // alias                                                                          // 9435
				dpOptions;                                                                                                         // 9436
                                                                                                                       // 9437
		// Alias 'en' to the default language data. Do this every time.                                                      // 9438
		$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 9439
                                                                                                                       // 9440
		// Set as Datepicker's global defaults.                                                                              // 9441
		$.datepicker.setDefaults(dpOptions);                                                                                 // 9442
	}                                                                                                                     // 9443
};                                                                                                                     // 9444
                                                                                                                       // 9445
                                                                                                                       // 9446
// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 9447
FC.lang = function(langCode, newFcOptions) {                                                                           // 9448
	var fcOptions;                                                                                                        // 9449
	var momOptions;                                                                                                       // 9450
                                                                                                                       // 9451
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 9452
	fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 9453
                                                                                                                       // 9454
	// provided new options for this language? merge them in                                                              // 9455
	if (newFcOptions) {                                                                                                   // 9456
		fcOptions = langOptionHash[langCode] = mergeOptions([ fcOptions, newFcOptions ]);                                    // 9457
	}                                                                                                                     // 9458
                                                                                                                       // 9459
	// compute language options that weren't defined.                                                                     // 9460
	// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 9461
	// so no way to tell if this is an initialization or a default-setting.                                               // 9462
	momOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 9463
	$.each(momComputableOptions, function(name, func) {                                                                   // 9464
		if (fcOptions[name] == null) {                                                                                       // 9465
			fcOptions[name] = func(momOptions, fcOptions);                                                                      // 9466
		}                                                                                                                    // 9467
	});                                                                                                                   // 9468
                                                                                                                       // 9469
	// set it as the default language for FullCalendar                                                                    // 9470
	Calendar.defaults.lang = langCode;                                                                                    // 9471
};                                                                                                                     // 9472
                                                                                                                       // 9473
                                                                                                                       // 9474
// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 9475
// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 9476
var dpComputableOptions = {                                                                                            // 9477
                                                                                                                       // 9478
	buttonText: function(dpOptions) {                                                                                     // 9479
		return {                                                                                                             // 9480
			// the translations sometimes wrongly contain HTML entities                                                         // 9481
			prev: stripHtmlEntities(dpOptions.prevText),                                                                        // 9482
			next: stripHtmlEntities(dpOptions.nextText),                                                                        // 9483
			today: stripHtmlEntities(dpOptions.currentText)                                                                     // 9484
		};                                                                                                                   // 9485
	},                                                                                                                    // 9486
                                                                                                                       // 9487
	// Produces format strings like "MMMM YYYY" -> "September 2014"                                                       // 9488
	monthYearFormat: function(dpOptions) {                                                                                // 9489
		return dpOptions.showMonthAfterYear ?                                                                                // 9490
			'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 9491
			'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 9492
	}                                                                                                                     // 9493
                                                                                                                       // 9494
};                                                                                                                     // 9495
                                                                                                                       // 9496
var momComputableOptions = {                                                                                           // 9497
                                                                                                                       // 9498
	// Produces format strings like "ddd M/D" -> "Fri 9/15"                                                               // 9499
	dayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 9500
		var format = momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"                                       // 9501
                                                                                                                       // 9502
		// strip the year off the edge, as well as other misc non-whitespace chars                                           // 9503
		format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, '');                                                             // 9504
                                                                                                                       // 9505
		if (fcOptions.isRTL) {                                                                                               // 9506
			format += ' ddd'; // for RTL, add day-of-week to end                                                                // 9507
		}                                                                                                                    // 9508
		else {                                                                                                               // 9509
			format = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 9510
		}                                                                                                                    // 9511
		return format;                                                                                                       // 9512
	},                                                                                                                    // 9513
                                                                                                                       // 9514
	// Produces format strings like "h:mma" -> "6:00pm"                                                                   // 9515
	mediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 9516
		return momOptions.longDateFormat('LT')                                                                               // 9517
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9518
	},                                                                                                                    // 9519
                                                                                                                       // 9520
	// Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"                                                         // 9521
	smallTimeFormat: function(momOptions) {                                                                               // 9522
		return momOptions.longDateFormat('LT')                                                                               // 9523
			.replace(':mm', '(:mm)')                                                                                            // 9524
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 9525
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9526
	},                                                                                                                    // 9527
                                                                                                                       // 9528
	// Produces format strings like "h(:mm)t" -> "6p" / "6:30p"                                                           // 9529
	extraSmallTimeFormat: function(momOptions) {                                                                          // 9530
		return momOptions.longDateFormat('LT')                                                                               // 9531
			.replace(':mm', '(:mm)')                                                                                            // 9532
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 9533
			.replace(/\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 9534
	},                                                                                                                    // 9535
                                                                                                                       // 9536
	// Produces format strings like "ha" / "H" -> "6pm" / "18"                                                            // 9537
	hourFormat: function(momOptions) {                                                                                    // 9538
		return momOptions.longDateFormat('LT')                                                                               // 9539
			.replace(':mm', '')                                                                                                 // 9540
			.replace(/(\Wmm)$/, '') // like above, but for foreign langs                                                        // 9541
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9542
	},                                                                                                                    // 9543
                                                                                                                       // 9544
	// Produces format strings like "h:mm" -> "6:30" (with no AM/PM)                                                      // 9545
	noMeridiemTimeFormat: function(momOptions) {                                                                          // 9546
		return momOptions.longDateFormat('LT')                                                                               // 9547
			.replace(/\s*a$/i, ''); // remove trailing AM/PM                                                                    // 9548
	}                                                                                                                     // 9549
                                                                                                                       // 9550
};                                                                                                                     // 9551
                                                                                                                       // 9552
                                                                                                                       // 9553
// options that should be computed off live calendar options (considers override options)                              // 9554
// TODO: best place for this? related to lang?                                                                         // 9555
// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it                // 9556
var instanceComputableOptions = {                                                                                      // 9557
                                                                                                                       // 9558
	// Produces format strings for results like "Mo 16"                                                                   // 9559
	smallDayDateFormat: function(options) {                                                                               // 9560
		return options.isRTL ?                                                                                               // 9561
			'D dd' :                                                                                                            // 9562
			'dd D';                                                                                                             // 9563
	},                                                                                                                    // 9564
                                                                                                                       // 9565
	// Produces format strings for results like "Wk 5"                                                                    // 9566
	weekFormat: function(options) {                                                                                       // 9567
		return options.isRTL ?                                                                                               // 9568
			'w[ ' + options.weekNumberTitle + ']' :                                                                             // 9569
			'[' + options.weekNumberTitle + ' ]w';                                                                              // 9570
	},                                                                                                                    // 9571
                                                                                                                       // 9572
	// Produces format strings for results like "Wk5"                                                                     // 9573
	smallWeekFormat: function(options) {                                                                                  // 9574
		return options.isRTL ?                                                                                               // 9575
			'w[' + options.weekNumberTitle + ']' :                                                                              // 9576
			'[' + options.weekNumberTitle + ']w';                                                                               // 9577
	}                                                                                                                     // 9578
                                                                                                                       // 9579
};                                                                                                                     // 9580
                                                                                                                       // 9581
function populateInstanceComputableOptions(options) {                                                                  // 9582
	$.each(instanceComputableOptions, function(name, func) {                                                              // 9583
		if (options[name] == null) {                                                                                         // 9584
			options[name] = func(options);                                                                                      // 9585
		}                                                                                                                    // 9586
	});                                                                                                                   // 9587
}                                                                                                                      // 9588
                                                                                                                       // 9589
                                                                                                                       // 9590
// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 9591
// Works with moment-pre-2.8                                                                                           // 9592
function getMomentLocaleData(langCode) {                                                                               // 9593
	var func = moment.localeData || moment.langData;                                                                      // 9594
	return func.call(moment, langCode) ||                                                                                 // 9595
		func.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 9596
}                                                                                                                      // 9597
                                                                                                                       // 9598
                                                                                                                       // 9599
// Initialize English by forcing computation of moment-derived options.                                                // 9600
// Also, sets it as the default.                                                                                       // 9601
FC.lang('en', Calendar.englishDefaults);                                                                               // 9602
                                                                                                                       // 9603
;;                                                                                                                     // 9604
                                                                                                                       // 9605
/* Top toolbar area with buttons and title                                                                             // 9606
----------------------------------------------------------------------------------------------------------------------*/
// TODO: rename all header-related things to "toolbar"                                                                 // 9608
                                                                                                                       // 9609
function Header(calendar, options) {                                                                                   // 9610
	var t = this;                                                                                                         // 9611
	                                                                                                                      // 9612
	// exports                                                                                                            // 9613
	t.render = render;                                                                                                    // 9614
	t.removeElement = removeElement;                                                                                      // 9615
	t.updateTitle = updateTitle;                                                                                          // 9616
	t.activateButton = activateButton;                                                                                    // 9617
	t.deactivateButton = deactivateButton;                                                                                // 9618
	t.disableButton = disableButton;                                                                                      // 9619
	t.enableButton = enableButton;                                                                                        // 9620
	t.getViewsWithButtons = getViewsWithButtons;                                                                          // 9621
	                                                                                                                      // 9622
	// locals                                                                                                             // 9623
	var el = $();                                                                                                         // 9624
	var viewsWithButtons = [];                                                                                            // 9625
	var tm;                                                                                                               // 9626
                                                                                                                       // 9627
                                                                                                                       // 9628
	function render() {                                                                                                   // 9629
		var sections = options.header;                                                                                       // 9630
                                                                                                                       // 9631
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 9632
                                                                                                                       // 9633
		if (sections) {                                                                                                      // 9634
			el = $("<div class='fc-toolbar'/>")                                                                                 // 9635
				.append(renderSection('left'))                                                                                     // 9636
				.append(renderSection('right'))                                                                                    // 9637
				.append(renderSection('center'))                                                                                   // 9638
				.append('<div class="fc-clear"/>');                                                                                // 9639
                                                                                                                       // 9640
			return el;                                                                                                          // 9641
		}                                                                                                                    // 9642
	}                                                                                                                     // 9643
	                                                                                                                      // 9644
	                                                                                                                      // 9645
	function removeElement() {                                                                                            // 9646
		el.remove();                                                                                                         // 9647
		el = $();                                                                                                            // 9648
	}                                                                                                                     // 9649
	                                                                                                                      // 9650
	                                                                                                                      // 9651
	function renderSection(position) {                                                                                    // 9652
		var sectionEl = $('<div class="fc-' + position + '"/>');                                                             // 9653
		var buttonStr = options.header[position];                                                                            // 9654
                                                                                                                       // 9655
		if (buttonStr) {                                                                                                     // 9656
			$.each(buttonStr.split(' '), function(i) {                                                                          // 9657
				var groupChildren = $();                                                                                           // 9658
				var isOnlyButtons = true;                                                                                          // 9659
				var groupEl;                                                                                                       // 9660
                                                                                                                       // 9661
				$.each(this.split(','), function(j, buttonName) {                                                                  // 9662
					var customButtonProps;                                                                                            // 9663
					var viewSpec;                                                                                                     // 9664
					var buttonClick;                                                                                                  // 9665
					var overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 9666
					var defaultText;                                                                                                  // 9667
					var themeIcon;                                                                                                    // 9668
					var normalIcon;                                                                                                   // 9669
					var innerHtml;                                                                                                    // 9670
					var classes;                                                                                                      // 9671
					var button; // the element                                                                                        // 9672
                                                                                                                       // 9673
					if (buttonName == 'title') {                                                                                      // 9674
						groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 9675
						isOnlyButtons = false;                                                                                           // 9676
					}                                                                                                                 // 9677
					else {                                                                                                            // 9678
						if ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {                                  // 9679
							buttonClick = function(ev) {                                                                                    // 9680
								if (customButtonProps.click) {                                                                                 // 9681
									customButtonProps.click.call(button[0], ev);                                                                  // 9682
								}                                                                                                              // 9683
							};                                                                                                              // 9684
							overrideText = ''; // icons will override text                                                                  // 9685
							defaultText = customButtonProps.text;                                                                           // 9686
						}                                                                                                                // 9687
						else if ((viewSpec = calendar.getViewSpec(buttonName))) {                                                        // 9688
							buttonClick = function() {                                                                                      // 9689
								calendar.changeView(buttonName);                                                                               // 9690
							};                                                                                                              // 9691
							viewsWithButtons.push(buttonName);                                                                              // 9692
							overrideText = viewSpec.buttonTextOverride;                                                                     // 9693
							defaultText = viewSpec.buttonTextDefault;                                                                       // 9694
						}                                                                                                                // 9695
						else if (calendar[buttonName]) { // a calendar method                                                            // 9696
							buttonClick = function() {                                                                                      // 9697
								calendar[buttonName]();                                                                                        // 9698
							};                                                                                                              // 9699
							overrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 9700
							defaultText = options.buttonText[buttonName]; // everything else is considered default                          // 9701
						}                                                                                                                // 9702
                                                                                                                       // 9703
						if (buttonClick) {                                                                                               // 9704
                                                                                                                       // 9705
							themeIcon =                                                                                                     // 9706
								customButtonProps ?                                                                                            // 9707
									customButtonProps.themeIcon :                                                                                 // 9708
									options.themeButtonIcons[buttonName];                                                                         // 9709
                                                                                                                       // 9710
							normalIcon =                                                                                                    // 9711
								customButtonProps ?                                                                                            // 9712
									customButtonProps.icon :                                                                                      // 9713
									options.buttonIcons[buttonName];                                                                              // 9714
                                                                                                                       // 9715
							if (overrideText) {                                                                                             // 9716
								innerHtml = htmlEscape(overrideText);                                                                          // 9717
							}                                                                                                               // 9718
							else if (themeIcon && options.theme) {                                                                          // 9719
								innerHtml = "<span class='ui-icon ui-icon-" + themeIcon + "'></span>";                                         // 9720
							}                                                                                                               // 9721
							else if (normalIcon && !options.theme) {                                                                        // 9722
								innerHtml = "<span class='fc-icon fc-icon-" + normalIcon + "'></span>";                                        // 9723
							}                                                                                                               // 9724
							else {                                                                                                          // 9725
								innerHtml = htmlEscape(defaultText);                                                                           // 9726
							}                                                                                                               // 9727
                                                                                                                       // 9728
							classes = [                                                                                                     // 9729
								'fc-' + buttonName + '-button',                                                                                // 9730
								tm + '-button',                                                                                                // 9731
								tm + '-state-default'                                                                                          // 9732
							];                                                                                                              // 9733
                                                                                                                       // 9734
							button = $( // type="button" so that it doesn't submit a form                                                   // 9735
								'<button type="button" class="' + classes.join(' ') + '">' +                                                   // 9736
									innerHtml +                                                                                                   // 9737
								'</button>'                                                                                                    // 9738
								)                                                                                                              // 9739
								.click(function(ev) {                                                                                          // 9740
									// don't process clicks for disabled buttons                                                                  // 9741
									if (!button.hasClass(tm + '-state-disabled')) {                                                               // 9742
                                                                                                                       // 9743
										buttonClick(ev);                                                                                             // 9744
                                                                                                                       // 9745
										// after the click action, if the button becomes the "active" tab, or disabled,                              // 9746
										// it should never have a hover class, so remove it now.                                                     // 9747
										if (                                                                                                         // 9748
											button.hasClass(tm + '-state-active') ||                                                                    // 9749
											button.hasClass(tm + '-state-disabled')                                                                     // 9750
										) {                                                                                                          // 9751
											button.removeClass(tm + '-state-hover');                                                                    // 9752
										}                                                                                                            // 9753
									}                                                                                                             // 9754
								})                                                                                                             // 9755
								.mousedown(function() {                                                                                        // 9756
									// the *down* effect (mouse pressed in).                                                                      // 9757
									// only on buttons that are not the "active" tab, or disabled                                                 // 9758
									button                                                                                                        // 9759
										.not('.' + tm + '-state-active')                                                                             // 9760
										.not('.' + tm + '-state-disabled')                                                                           // 9761
										.addClass(tm + '-state-down');                                                                               // 9762
								})                                                                                                             // 9763
								.mouseup(function() {                                                                                          // 9764
									// undo the *down* effect                                                                                     // 9765
									button.removeClass(tm + '-state-down');                                                                       // 9766
								})                                                                                                             // 9767
								.hover(                                                                                                        // 9768
									function() {                                                                                                  // 9769
										// the *hover* effect.                                                                                       // 9770
										// only on buttons that are not the "active" tab, or disabled                                                // 9771
										button                                                                                                       // 9772
											.not('.' + tm + '-state-active')                                                                            // 9773
											.not('.' + tm + '-state-disabled')                                                                          // 9774
											.addClass(tm + '-state-hover');                                                                             // 9775
									},                                                                                                            // 9776
									function() {                                                                                                  // 9777
										// undo the *hover* effect                                                                                   // 9778
										button                                                                                                       // 9779
											.removeClass(tm + '-state-hover')                                                                           // 9780
											.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 9781
									}                                                                                                             // 9782
								);                                                                                                             // 9783
                                                                                                                       // 9784
							groupChildren = groupChildren.add(button);                                                                      // 9785
						}                                                                                                                // 9786
					}                                                                                                                 // 9787
				});                                                                                                                // 9788
                                                                                                                       // 9789
				if (isOnlyButtons) {                                                                                               // 9790
					groupChildren                                                                                                     // 9791
						.first().addClass(tm + '-corner-left').end()                                                                     // 9792
						.last().addClass(tm + '-corner-right').end();                                                                    // 9793
				}                                                                                                                  // 9794
                                                                                                                       // 9795
				if (groupChildren.length > 1) {                                                                                    // 9796
					groupEl = $('<div/>');                                                                                            // 9797
					if (isOnlyButtons) {                                                                                              // 9798
						groupEl.addClass('fc-button-group');                                                                             // 9799
					}                                                                                                                 // 9800
					groupEl.append(groupChildren);                                                                                    // 9801
					sectionEl.append(groupEl);                                                                                        // 9802
				}                                                                                                                  // 9803
				else {                                                                                                             // 9804
					sectionEl.append(groupChildren); // 1 or 0 children                                                               // 9805
				}                                                                                                                  // 9806
			});                                                                                                                 // 9807
		}                                                                                                                    // 9808
                                                                                                                       // 9809
		return sectionEl;                                                                                                    // 9810
	}                                                                                                                     // 9811
	                                                                                                                      // 9812
	                                                                                                                      // 9813
	function updateTitle(text) {                                                                                          // 9814
		el.find('h2').text(text);                                                                                            // 9815
	}                                                                                                                     // 9816
	                                                                                                                      // 9817
	                                                                                                                      // 9818
	function activateButton(buttonName) {                                                                                 // 9819
		el.find('.fc-' + buttonName + '-button')                                                                             // 9820
			.addClass(tm + '-state-active');                                                                                    // 9821
	}                                                                                                                     // 9822
	                                                                                                                      // 9823
	                                                                                                                      // 9824
	function deactivateButton(buttonName) {                                                                               // 9825
		el.find('.fc-' + buttonName + '-button')                                                                             // 9826
			.removeClass(tm + '-state-active');                                                                                 // 9827
	}                                                                                                                     // 9828
	                                                                                                                      // 9829
	                                                                                                                      // 9830
	function disableButton(buttonName) {                                                                                  // 9831
		el.find('.fc-' + buttonName + '-button')                                                                             // 9832
			.attr('disabled', 'disabled')                                                                                       // 9833
			.addClass(tm + '-state-disabled');                                                                                  // 9834
	}                                                                                                                     // 9835
	                                                                                                                      // 9836
	                                                                                                                      // 9837
	function enableButton(buttonName) {                                                                                   // 9838
		el.find('.fc-' + buttonName + '-button')                                                                             // 9839
			.removeAttr('disabled')                                                                                             // 9840
			.removeClass(tm + '-state-disabled');                                                                               // 9841
	}                                                                                                                     // 9842
                                                                                                                       // 9843
                                                                                                                       // 9844
	function getViewsWithButtons() {                                                                                      // 9845
		return viewsWithButtons;                                                                                             // 9846
	}                                                                                                                     // 9847
                                                                                                                       // 9848
}                                                                                                                      // 9849
                                                                                                                       // 9850
;;                                                                                                                     // 9851
                                                                                                                       // 9852
FC.sourceNormalizers = [];                                                                                             // 9853
FC.sourceFetchers = [];                                                                                                // 9854
                                                                                                                       // 9855
var ajaxDefaults = {                                                                                                   // 9856
	dataType: 'json',                                                                                                     // 9857
	cache: false                                                                                                          // 9858
};                                                                                                                     // 9859
                                                                                                                       // 9860
var eventGUID = 1;                                                                                                     // 9861
                                                                                                                       // 9862
                                                                                                                       // 9863
function EventManager(options) { // assumed to be a calendar                                                           // 9864
	var t = this;                                                                                                         // 9865
	                                                                                                                      // 9866
	                                                                                                                      // 9867
	// exports                                                                                                            // 9868
	t.isFetchNeeded = isFetchNeeded;                                                                                      // 9869
	t.fetchEvents = fetchEvents;                                                                                          // 9870
	t.addEventSource = addEventSource;                                                                                    // 9871
	t.removeEventSource = removeEventSource;                                                                              // 9872
	t.updateEvent = updateEvent;                                                                                          // 9873
	t.renderEvent = renderEvent;                                                                                          // 9874
	t.removeEvents = removeEvents;                                                                                        // 9875
	t.clientEvents = clientEvents;                                                                                        // 9876
	t.mutateEvent = mutateEvent;                                                                                          // 9877
	t.normalizeEventDates = normalizeEventDates;                                                                          // 9878
	t.normalizeEventTimes = normalizeEventTimes;                                                                          // 9879
	                                                                                                                      // 9880
	                                                                                                                      // 9881
	// imports                                                                                                            // 9882
	var reportEvents = t.reportEvents;                                                                                    // 9883
	                                                                                                                      // 9884
	                                                                                                                      // 9885
	// locals                                                                                                             // 9886
	var stickySource = { events: [] };                                                                                    // 9887
	var sources = [ stickySource ];                                                                                       // 9888
	var rangeStart, rangeEnd;                                                                                             // 9889
	var currentFetchID = 0;                                                                                               // 9890
	var pendingSourceCnt = 0;                                                                                             // 9891
	var cache = []; // holds events that have already been expanded                                                       // 9892
                                                                                                                       // 9893
                                                                                                                       // 9894
	$.each(                                                                                                               // 9895
		(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 9896
		function(i, sourceInput) {                                                                                           // 9897
			var source = buildEventSource(sourceInput);                                                                         // 9898
			if (source) {                                                                                                       // 9899
				sources.push(source);                                                                                              // 9900
			}                                                                                                                   // 9901
		}                                                                                                                    // 9902
	);                                                                                                                    // 9903
	                                                                                                                      // 9904
	                                                                                                                      // 9905
	                                                                                                                      // 9906
	/* Fetching                                                                                                           // 9907
	-----------------------------------------------------------------------------*/                                       // 9908
                                                                                                                       // 9909
                                                                                                                       // 9910
	// start and end are assumed to be unzoned                                                                            // 9911
	function isFetchNeeded(start, end) {                                                                                  // 9912
		return !rangeStart || // nothing has been fetched yet?                                                               // 9913
			start < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?                         // 9914
	}                                                                                                                     // 9915
	                                                                                                                      // 9916
	                                                                                                                      // 9917
	function fetchEvents(start, end) {                                                                                    // 9918
		rangeStart = start;                                                                                                  // 9919
		rangeEnd = end;                                                                                                      // 9920
		cache = [];                                                                                                          // 9921
		var fetchID = ++currentFetchID;                                                                                      // 9922
		var len = sources.length;                                                                                            // 9923
		pendingSourceCnt = len;                                                                                              // 9924
		for (var i=0; i<len; i++) {                                                                                          // 9925
			fetchEventSource(sources[i], fetchID);                                                                              // 9926
		}                                                                                                                    // 9927
	}                                                                                                                     // 9928
	                                                                                                                      // 9929
	                                                                                                                      // 9930
	function fetchEventSource(source, fetchID) {                                                                          // 9931
		_fetchEventSource(source, function(eventInputs) {                                                                    // 9932
			var isArraySource = $.isArray(source.events);                                                                       // 9933
			var i, eventInput;                                                                                                  // 9934
			var abstractEvent;                                                                                                  // 9935
                                                                                                                       // 9936
			if (fetchID == currentFetchID) {                                                                                    // 9937
                                                                                                                       // 9938
				if (eventInputs) {                                                                                                 // 9939
					for (i = 0; i < eventInputs.length; i++) {                                                                        // 9940
						eventInput = eventInputs[i];                                                                                     // 9941
                                                                                                                       // 9942
						if (isArraySource) { // array sources have already been convert to Event Objects                                 // 9943
							abstractEvent = eventInput;                                                                                     // 9944
						}                                                                                                                // 9945
						else {                                                                                                           // 9946
							abstractEvent = buildEventFromInput(eventInput, source);                                                        // 9947
						}                                                                                                                // 9948
                                                                                                                       // 9949
						if (abstractEvent) { // not false (an invalid event)                                                             // 9950
							cache.push.apply(                                                                                               // 9951
								cache,                                                                                                         // 9952
								expandEvent(abstractEvent) // add individual expanded events to the cache                                      // 9953
							);                                                                                                              // 9954
						}                                                                                                                // 9955
					}                                                                                                                 // 9956
				}                                                                                                                  // 9957
                                                                                                                       // 9958
				pendingSourceCnt--;                                                                                                // 9959
				if (!pendingSourceCnt) {                                                                                           // 9960
					reportEvents(cache);                                                                                              // 9961
				}                                                                                                                  // 9962
			}                                                                                                                   // 9963
		});                                                                                                                  // 9964
	}                                                                                                                     // 9965
	                                                                                                                      // 9966
	                                                                                                                      // 9967
	function _fetchEventSource(source, callback) {                                                                        // 9968
		var i;                                                                                                               // 9969
		var fetchers = FC.sourceFetchers;                                                                                    // 9970
		var res;                                                                                                             // 9971
                                                                                                                       // 9972
		for (i=0; i<fetchers.length; i++) {                                                                                  // 9973
			res = fetchers[i].call(                                                                                             // 9974
				t, // this, the Calendar object                                                                                    // 9975
				source,                                                                                                            // 9976
				rangeStart.clone(),                                                                                                // 9977
				rangeEnd.clone(),                                                                                                  // 9978
				options.timezone,                                                                                                  // 9979
				callback                                                                                                           // 9980
			);                                                                                                                  // 9981
                                                                                                                       // 9982
			if (res === true) {                                                                                                 // 9983
				// the fetcher is in charge. made its own async request                                                            // 9984
				return;                                                                                                            // 9985
			}                                                                                                                   // 9986
			else if (typeof res == 'object') {                                                                                  // 9987
				// the fetcher returned a new source. process it                                                                   // 9988
				_fetchEventSource(res, callback);                                                                                  // 9989
				return;                                                                                                            // 9990
			}                                                                                                                   // 9991
		}                                                                                                                    // 9992
                                                                                                                       // 9993
		var events = source.events;                                                                                          // 9994
		if (events) {                                                                                                        // 9995
			if ($.isFunction(events)) {                                                                                         // 9996
				t.pushLoading();                                                                                                   // 9997
				events.call(                                                                                                       // 9998
					t, // this, the Calendar object                                                                                   // 9999
					rangeStart.clone(),                                                                                               // 10000
					rangeEnd.clone(),                                                                                                 // 10001
					options.timezone,                                                                                                 // 10002
					function(events) {                                                                                                // 10003
						callback(events);                                                                                                // 10004
						t.popLoading();                                                                                                  // 10005
					}                                                                                                                 // 10006
				);                                                                                                                 // 10007
			}                                                                                                                   // 10008
			else if ($.isArray(events)) {                                                                                       // 10009
				callback(events);                                                                                                  // 10010
			}                                                                                                                   // 10011
			else {                                                                                                              // 10012
				callback();                                                                                                        // 10013
			}                                                                                                                   // 10014
		}else{                                                                                                               // 10015
			var url = source.url;                                                                                               // 10016
			if (url) {                                                                                                          // 10017
				var success = source.success;                                                                                      // 10018
				var error = source.error;                                                                                          // 10019
				var complete = source.complete;                                                                                    // 10020
                                                                                                                       // 10021
				// retrieve any outbound GET/POST $.ajax data from the options                                                     // 10022
				var customData;                                                                                                    // 10023
				if ($.isFunction(source.data)) {                                                                                   // 10024
					// supplied as a function that returns a key/value object                                                         // 10025
					customData = source.data();                                                                                       // 10026
				}                                                                                                                  // 10027
				else {                                                                                                             // 10028
					// supplied as a straight key/value object                                                                        // 10029
					customData = source.data;                                                                                         // 10030
				}                                                                                                                  // 10031
                                                                                                                       // 10032
				// use a copy of the custom data so we can modify the parameters                                                   // 10033
				// and not affect the passed-in object.                                                                            // 10034
				var data = $.extend({}, customData || {});                                                                         // 10035
                                                                                                                       // 10036
				var startParam = firstDefined(source.startParam, options.startParam);                                              // 10037
				var endParam = firstDefined(source.endParam, options.endParam);                                                    // 10038
				var timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 10039
                                                                                                                       // 10040
				if (startParam) {                                                                                                  // 10041
					data[startParam] = rangeStart.format();                                                                           // 10042
				}                                                                                                                  // 10043
				if (endParam) {                                                                                                    // 10044
					data[endParam] = rangeEnd.format();                                                                               // 10045
				}                                                                                                                  // 10046
				if (options.timezone && options.timezone != 'local') {                                                             // 10047
					data[timezoneParam] = options.timezone;                                                                           // 10048
				}                                                                                                                  // 10049
                                                                                                                       // 10050
				t.pushLoading();                                                                                                   // 10051
				$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 10052
					data: data,                                                                                                       // 10053
					success: function(events) {                                                                                       // 10054
						events = events || [];                                                                                           // 10055
						var res = applyAll(success, this, arguments);                                                                    // 10056
						if ($.isArray(res)) {                                                                                            // 10057
							events = res;                                                                                                   // 10058
						}                                                                                                                // 10059
						callback(events);                                                                                                // 10060
					},                                                                                                                // 10061
					error: function() {                                                                                               // 10062
						applyAll(error, this, arguments);                                                                                // 10063
						callback();                                                                                                      // 10064
					},                                                                                                                // 10065
					complete: function() {                                                                                            // 10066
						applyAll(complete, this, arguments);                                                                             // 10067
						t.popLoading();                                                                                                  // 10068
					}                                                                                                                 // 10069
				}));                                                                                                               // 10070
			}else{                                                                                                              // 10071
				callback();                                                                                                        // 10072
			}                                                                                                                   // 10073
		}                                                                                                                    // 10074
	}                                                                                                                     // 10075
	                                                                                                                      // 10076
	                                                                                                                      // 10077
	                                                                                                                      // 10078
	/* Sources                                                                                                            // 10079
	-----------------------------------------------------------------------------*/                                       // 10080
	                                                                                                                      // 10081
                                                                                                                       // 10082
	function addEventSource(sourceInput) {                                                                                // 10083
		var source = buildEventSource(sourceInput);                                                                          // 10084
		if (source) {                                                                                                        // 10085
			sources.push(source);                                                                                               // 10086
			pendingSourceCnt++;                                                                                                 // 10087
			fetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 10088
		}                                                                                                                    // 10089
	}                                                                                                                     // 10090
                                                                                                                       // 10091
                                                                                                                       // 10092
	function buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 10093
		var normalizers = FC.sourceNormalizers;                                                                              // 10094
		var source;                                                                                                          // 10095
		var i;                                                                                                               // 10096
                                                                                                                       // 10097
		if ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 10098
			source = { events: sourceInput };                                                                                   // 10099
		}                                                                                                                    // 10100
		else if (typeof sourceInput === 'string') {                                                                          // 10101
			source = { url: sourceInput };                                                                                      // 10102
		}                                                                                                                    // 10103
		else if (typeof sourceInput === 'object') {                                                                          // 10104
			source = $.extend({}, sourceInput); // shallow copy                                                                 // 10105
		}                                                                                                                    // 10106
                                                                                                                       // 10107
		if (source) {                                                                                                        // 10108
                                                                                                                       // 10109
			// TODO: repeat code, same code for event classNames                                                                // 10110
			if (source.className) {                                                                                             // 10111
				if (typeof source.className === 'string') {                                                                        // 10112
					source.className = source.className.split(/\s+/);                                                                 // 10113
				}                                                                                                                  // 10114
				// otherwise, assumed to be an array                                                                               // 10115
			}                                                                                                                   // 10116
			else {                                                                                                              // 10117
				source.className = [];                                                                                             // 10118
			}                                                                                                                   // 10119
                                                                                                                       // 10120
			// for array sources, we convert to standard Event Objects up front                                                 // 10121
			if ($.isArray(source.events)) {                                                                                     // 10122
				source.origArray = source.events; // for removeEventSource                                                         // 10123
				source.events = $.map(source.events, function(eventInput) {                                                        // 10124
					return buildEventFromInput(eventInput, source);                                                                   // 10125
				});                                                                                                                // 10126
			}                                                                                                                   // 10127
                                                                                                                       // 10128
			for (i=0; i<normalizers.length; i++) {                                                                              // 10129
				normalizers[i].call(t, source);                                                                                    // 10130
			}                                                                                                                   // 10131
                                                                                                                       // 10132
			return source;                                                                                                      // 10133
		}                                                                                                                    // 10134
	}                                                                                                                     // 10135
                                                                                                                       // 10136
                                                                                                                       // 10137
	function removeEventSource(source) {                                                                                  // 10138
		sources = $.grep(sources, function(src) {                                                                            // 10139
			return !isSourcesEqual(src, source);                                                                                // 10140
		});                                                                                                                  // 10141
		// remove all client events from that source                                                                         // 10142
		cache = $.grep(cache, function(e) {                                                                                  // 10143
			return !isSourcesEqual(e.source, source);                                                                           // 10144
		});                                                                                                                  // 10145
		reportEvents(cache);                                                                                                 // 10146
	}                                                                                                                     // 10147
                                                                                                                       // 10148
                                                                                                                       // 10149
	function isSourcesEqual(source1, source2) {                                                                           // 10150
		return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 10151
	}                                                                                                                     // 10152
                                                                                                                       // 10153
                                                                                                                       // 10154
	function getSourcePrimitive(source) {                                                                                 // 10155
		return (                                                                                                             // 10156
			(typeof source === 'object') ? // a normalized event source?                                                        // 10157
				(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 10158
				null                                                                                                               // 10159
		) ||                                                                                                                 // 10160
		source; // the given argument *is* the primitive                                                                     // 10161
	}                                                                                                                     // 10162
	                                                                                                                      // 10163
	                                                                                                                      // 10164
	                                                                                                                      // 10165
	/* Manipulation                                                                                                       // 10166
	-----------------------------------------------------------------------------*/                                       // 10167
                                                                                                                       // 10168
                                                                                                                       // 10169
	// Only ever called from the externally-facing API                                                                    // 10170
	function updateEvent(event) {                                                                                         // 10171
                                                                                                                       // 10172
		// massage start/end values, even if date string values                                                              // 10173
		event.start = t.moment(event.start);                                                                                 // 10174
		if (event.end) {                                                                                                     // 10175
			event.end = t.moment(event.end);                                                                                    // 10176
		}                                                                                                                    // 10177
		else {                                                                                                               // 10178
			event.end = null;                                                                                                   // 10179
		}                                                                                                                    // 10180
                                                                                                                       // 10181
		mutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 10182
		reportEvents(cache); // reports event modifications (so we can redraw)                                               // 10183
	}                                                                                                                     // 10184
                                                                                                                       // 10185
                                                                                                                       // 10186
	// Returns a hash of misc event properties that should be copied over to related events.                              // 10187
	function getMiscEventProps(event) {                                                                                   // 10188
		var props = {};                                                                                                      // 10189
                                                                                                                       // 10190
		$.each(event, function(name, val) {                                                                                  // 10191
			if (isMiscEventPropName(name)) {                                                                                    // 10192
				if (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 10193
					props[name] = val;                                                                                                // 10194
				}                                                                                                                  // 10195
			}                                                                                                                   // 10196
		});                                                                                                                  // 10197
                                                                                                                       // 10198
		return props;                                                                                                        // 10199
	}                                                                                                                     // 10200
                                                                                                                       // 10201
	// non-date-related, non-id-related, non-secret                                                                       // 10202
	function isMiscEventPropName(name) {                                                                                  // 10203
		return !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 10204
	}                                                                                                                     // 10205
                                                                                                                       // 10206
	                                                                                                                      // 10207
	// returns the expanded events that were created                                                                      // 10208
	function renderEvent(eventInput, stick) {                                                                             // 10209
		var abstractEvent = buildEventFromInput(eventInput);                                                                 // 10210
		var events;                                                                                                          // 10211
		var i, event;                                                                                                        // 10212
                                                                                                                       // 10213
		if (abstractEvent) { // not false (a valid input)                                                                    // 10214
			events = expandEvent(abstractEvent);                                                                                // 10215
                                                                                                                       // 10216
			for (i = 0; i < events.length; i++) {                                                                               // 10217
				event = events[i];                                                                                                 // 10218
                                                                                                                       // 10219
				if (!event.source) {                                                                                               // 10220
					if (stick) {                                                                                                      // 10221
						stickySource.events.push(event);                                                                                 // 10222
						event.source = stickySource;                                                                                     // 10223
					}                                                                                                                 // 10224
					cache.push(event);                                                                                                // 10225
				}                                                                                                                  // 10226
			}                                                                                                                   // 10227
                                                                                                                       // 10228
			reportEvents(cache);                                                                                                // 10229
                                                                                                                       // 10230
			return events;                                                                                                      // 10231
		}                                                                                                                    // 10232
                                                                                                                       // 10233
		return [];                                                                                                           // 10234
	}                                                                                                                     // 10235
	                                                                                                                      // 10236
	                                                                                                                      // 10237
	function removeEvents(filter) {                                                                                       // 10238
		var eventID;                                                                                                         // 10239
		var i;                                                                                                               // 10240
                                                                                                                       // 10241
		if (filter == null) { // null or undefined. remove all events                                                        // 10242
			filter = function() { return true; }; // will always match                                                          // 10243
		}                                                                                                                    // 10244
		else if (!$.isFunction(filter)) { // an event ID                                                                     // 10245
			eventID = filter + '';                                                                                              // 10246
			filter = function(event) {                                                                                          // 10247
				return event._id == eventID;                                                                                       // 10248
			};                                                                                                                  // 10249
		}                                                                                                                    // 10250
                                                                                                                       // 10251
		// Purge event(s) from our local cache                                                                               // 10252
		cache = $.grep(cache, filter, true); // inverse=true                                                                 // 10253
                                                                                                                       // 10254
		// Remove events from array sources.                                                                                 // 10255
		// This works because they have been converted to official Event Objects up front.                                   // 10256
		// (and as a result, event._id has been calculated).                                                                 // 10257
		for (i=0; i<sources.length; i++) {                                                                                   // 10258
			if ($.isArray(sources[i].events)) {                                                                                 // 10259
				sources[i].events = $.grep(sources[i].events, filter, true);                                                       // 10260
			}                                                                                                                   // 10261
		}                                                                                                                    // 10262
                                                                                                                       // 10263
		reportEvents(cache);                                                                                                 // 10264
	}                                                                                                                     // 10265
	                                                                                                                      // 10266
	                                                                                                                      // 10267
	function clientEvents(filter) {                                                                                       // 10268
		if ($.isFunction(filter)) {                                                                                          // 10269
			return $.grep(cache, filter);                                                                                       // 10270
		}                                                                                                                    // 10271
		else if (filter != null) { // not null, not undefined. an event ID                                                   // 10272
			filter += '';                                                                                                       // 10273
			return $.grep(cache, function(e) {                                                                                  // 10274
				return e._id == filter;                                                                                            // 10275
			});                                                                                                                 // 10276
		}                                                                                                                    // 10277
		return cache; // else, return all                                                                                    // 10278
	}                                                                                                                     // 10279
	                                                                                                                      // 10280
	                                                                                                                      // 10281
	                                                                                                                      // 10282
	/* Event Normalization                                                                                                // 10283
	-----------------------------------------------------------------------------*/                                       // 10284
                                                                                                                       // 10285
                                                                                                                       // 10286
	// Given a raw object with key/value properties, returns an "abstract" Event object.                                  // 10287
	// An "abstract" event is an event that, if recurring, will not have been expanded yet.                               // 10288
	// Will return `false` when input is invalid.                                                                         // 10289
	// `source` is optional                                                                                               // 10290
	function buildEventFromInput(input, source) {                                                                         // 10291
		var out = {};                                                                                                        // 10292
		var start, end;                                                                                                      // 10293
		var allDay;                                                                                                          // 10294
                                                                                                                       // 10295
		if (options.eventDataTransform) {                                                                                    // 10296
			input = options.eventDataTransform(input);                                                                          // 10297
		}                                                                                                                    // 10298
		if (source && source.eventDataTransform) {                                                                           // 10299
			input = source.eventDataTransform(input);                                                                           // 10300
		}                                                                                                                    // 10301
                                                                                                                       // 10302
		// Copy all properties over to the resulting object.                                                                 // 10303
		// The special-case properties will be copied over afterwards.                                                       // 10304
		$.extend(out, input);                                                                                                // 10305
                                                                                                                       // 10306
		if (source) {                                                                                                        // 10307
			out.source = source;                                                                                                // 10308
		}                                                                                                                    // 10309
                                                                                                                       // 10310
		out._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 10311
                                                                                                                       // 10312
		if (input.className) {                                                                                               // 10313
			if (typeof input.className == 'string') {                                                                           // 10314
				out.className = input.className.split(/\s+/);                                                                      // 10315
			}                                                                                                                   // 10316
			else { // assumed to be an array                                                                                    // 10317
				out.className = input.className;                                                                                   // 10318
			}                                                                                                                   // 10319
		}                                                                                                                    // 10320
		else {                                                                                                               // 10321
			out.className = [];                                                                                                 // 10322
		}                                                                                                                    // 10323
                                                                                                                       // 10324
		start = input.start || input.date; // "date" is an alias for "start"                                                 // 10325
		end = input.end;                                                                                                     // 10326
                                                                                                                       // 10327
		// parse as a time (Duration) if applicable                                                                          // 10328
		if (isTimeString(start)) {                                                                                           // 10329
			start = moment.duration(start);                                                                                     // 10330
		}                                                                                                                    // 10331
		if (isTimeString(end)) {                                                                                             // 10332
			end = moment.duration(end);                                                                                         // 10333
		}                                                                                                                    // 10334
                                                                                                                       // 10335
		if (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 10336
                                                                                                                       // 10337
			// the event is "abstract" (recurring) so don't calculate exact start/end dates just yet                            // 10338
			out.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 10339
			out.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 10340
			out._recurring = true; // our internal marker                                                                       // 10341
		}                                                                                                                    // 10342
		else {                                                                                                               // 10343
                                                                                                                       // 10344
			if (start) {                                                                                                        // 10345
				start = t.moment(start);                                                                                           // 10346
				if (!start.isValid()) {                                                                                            // 10347
					return false;                                                                                                     // 10348
				}                                                                                                                  // 10349
			}                                                                                                                   // 10350
                                                                                                                       // 10351
			if (end) {                                                                                                          // 10352
				end = t.moment(end);                                                                                               // 10353
				if (!end.isValid()) {                                                                                              // 10354
					end = null; // let defaults take over                                                                             // 10355
				}                                                                                                                  // 10356
			}                                                                                                                   // 10357
                                                                                                                       // 10358
			allDay = input.allDay;                                                                                              // 10359
			if (allDay === undefined) { // still undefined? fallback to default                                                 // 10360
				allDay = firstDefined(                                                                                             // 10361
					source ? source.allDayDefault : undefined,                                                                        // 10362
					options.allDayDefault                                                                                             // 10363
				);                                                                                                                 // 10364
				// still undefined? normalizeEventDates will calculate it                                                          // 10365
			}                                                                                                                   // 10366
                                                                                                                       // 10367
			assignDatesToEvent(start, end, allDay, out);                                                                        // 10368
		}                                                                                                                    // 10369
                                                                                                                       // 10370
		return out;                                                                                                          // 10371
	}                                                                                                                     // 10372
                                                                                                                       // 10373
                                                                                                                       // 10374
	// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 10375
	// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 10376
	function assignDatesToEvent(start, end, allDay, event) {                                                              // 10377
		event.start = start;                                                                                                 // 10378
		event.end = end;                                                                                                     // 10379
		event.allDay = allDay;                                                                                               // 10380
		normalizeEventDates(event);                                                                                          // 10381
		backupEventDates(event);                                                                                             // 10382
	}                                                                                                                     // 10383
                                                                                                                       // 10384
                                                                                                                       // 10385
	// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 10386
	// NOTE: Will modify the given object.                                                                                // 10387
	function normalizeEventDates(eventProps) {                                                                            // 10388
                                                                                                                       // 10389
		normalizeEventTimes(eventProps);                                                                                     // 10390
                                                                                                                       // 10391
		if (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {                                                   // 10392
			eventProps.end = null;                                                                                              // 10393
		}                                                                                                                    // 10394
                                                                                                                       // 10395
		if (!eventProps.end) {                                                                                               // 10396
			if (options.forceEventDuration) {                                                                                   // 10397
				eventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);                                        // 10398
			}                                                                                                                   // 10399
			else {                                                                                                              // 10400
				eventProps.end = null;                                                                                             // 10401
			}                                                                                                                   // 10402
		}                                                                                                                    // 10403
	}                                                                                                                     // 10404
                                                                                                                       // 10405
                                                                                                                       // 10406
	// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 10407
	function normalizeEventTimes(eventProps) {                                                                            // 10408
		if (eventProps.allDay == null) {                                                                                     // 10409
			eventProps.allDay = !(eventProps.start.hasTime() || (eventProps.end && eventProps.end.hasTime()));                  // 10410
		}                                                                                                                    // 10411
                                                                                                                       // 10412
		if (eventProps.allDay) {                                                                                             // 10413
			eventProps.start.stripTime();                                                                                       // 10414
			if (eventProps.end) {                                                                                               // 10415
				// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 10416
				eventProps.end.stripTime();                                                                                        // 10417
			}                                                                                                                   // 10418
		}                                                                                                                    // 10419
		else {                                                                                                               // 10420
			if (!eventProps.start.hasTime()) {                                                                                  // 10421
				eventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time                          // 10422
			}                                                                                                                   // 10423
			if (eventProps.end && !eventProps.end.hasTime()) {                                                                  // 10424
				eventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time                              // 10425
			}                                                                                                                   // 10426
		}                                                                                                                    // 10427
	}                                                                                                                     // 10428
                                                                                                                       // 10429
                                                                                                                       // 10430
	// If the given event is a recurring event, break it down into an array of individual instances.                      // 10431
	// If not a recurring event, return an array with the single original event.                                          // 10432
	// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 10433
	// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 10434
	function expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 10435
		var events = [];                                                                                                     // 10436
		var dowHash;                                                                                                         // 10437
		var dow;                                                                                                             // 10438
		var i;                                                                                                               // 10439
		var date;                                                                                                            // 10440
		var startTime, endTime;                                                                                              // 10441
		var start, end;                                                                                                      // 10442
		var event;                                                                                                           // 10443
                                                                                                                       // 10444
		_rangeStart = _rangeStart || rangeStart;                                                                             // 10445
		_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 10446
                                                                                                                       // 10447
		if (abstractEvent) {                                                                                                 // 10448
			if (abstractEvent._recurring) {                                                                                     // 10449
                                                                                                                       // 10450
				// make a boolean hash as to whether the event occurs on each day-of-week                                          // 10451
				if ((dow = abstractEvent.dow)) {                                                                                   // 10452
					dowHash = {};                                                                                                     // 10453
					for (i = 0; i < dow.length; i++) {                                                                                // 10454
						dowHash[dow[i]] = true;                                                                                          // 10455
					}                                                                                                                 // 10456
				}                                                                                                                  // 10457
                                                                                                                       // 10458
				// iterate through every day in the current range                                                                  // 10459
				date = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 10460
				while (date.isBefore(_rangeEnd)) {                                                                                 // 10461
                                                                                                                       // 10462
					if (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 10463
                                                                                                                       // 10464
						startTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 10465
						endTime = abstractEvent.end; // "                                                                                // 10466
						start = date.clone();                                                                                            // 10467
						end = null;                                                                                                      // 10468
                                                                                                                       // 10469
						if (startTime) {                                                                                                 // 10470
							start = start.time(startTime);                                                                                  // 10471
						}                                                                                                                // 10472
						if (endTime) {                                                                                                   // 10473
							end = date.clone().time(endTime);                                                                               // 10474
						}                                                                                                                // 10475
                                                                                                                       // 10476
						event = $.extend({}, abstractEvent); // make a copy of the original                                              // 10477
						assignDatesToEvent(                                                                                              // 10478
							start, end,                                                                                                     // 10479
							!startTime && !endTime, // allDay?                                                                              // 10480
							event                                                                                                           // 10481
						);                                                                                                               // 10482
						events.push(event);                                                                                              // 10483
					}                                                                                                                 // 10484
                                                                                                                       // 10485
					date.add(1, 'days');                                                                                              // 10486
				}                                                                                                                  // 10487
			}                                                                                                                   // 10488
			else {                                                                                                              // 10489
				events.push(abstractEvent); // return the original event. will be a one-item array                                 // 10490
			}                                                                                                                   // 10491
		}                                                                                                                    // 10492
                                                                                                                       // 10493
		return events;                                                                                                       // 10494
	}                                                                                                                     // 10495
                                                                                                                       // 10496
                                                                                                                       // 10497
                                                                                                                       // 10498
	/* Event Modification Math                                                                                            // 10499
	-----------------------------------------------------------------------------------------*/                           // 10500
                                                                                                                       // 10501
                                                                                                                       // 10502
	// Modifies an event and all related events by applying the given properties.                                         // 10503
	// Special date-diffing logic is used for manipulation of dates.                                                      // 10504
	// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 10505
	// All date comparisons are done against the event's pristine _start and _end dates.                                  // 10506
	// Returns an object with delta information and a function to undo all operations.                                    // 10507
	// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 10508
	// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 10509
	function mutateEvent(event, newProps, largeUnit) {                                                                    // 10510
		var miscProps = {};                                                                                                  // 10511
		var oldProps;                                                                                                        // 10512
		var clearEnd;                                                                                                        // 10513
		var startDelta;                                                                                                      // 10514
		var endDelta;                                                                                                        // 10515
		var durationDelta;                                                                                                   // 10516
		var undoFunc;                                                                                                        // 10517
                                                                                                                       // 10518
		// diffs the dates in the appropriate way, returning a duration                                                      // 10519
		function diffDates(date1, date0) { // date1 - date0                                                                  // 10520
			if (largeUnit) {                                                                                                    // 10521
				return diffByUnit(date1, date0, largeUnit);                                                                        // 10522
			}                                                                                                                   // 10523
			else if (newProps.allDay) {                                                                                         // 10524
				return diffDay(date1, date0);                                                                                      // 10525
			}                                                                                                                   // 10526
			else {                                                                                                              // 10527
				return diffDayTime(date1, date0);                                                                                  // 10528
			}                                                                                                                   // 10529
		}                                                                                                                    // 10530
                                                                                                                       // 10531
		newProps = newProps || {};                                                                                           // 10532
                                                                                                                       // 10533
		// normalize new date-related properties                                                                             // 10534
		if (!newProps.start) {                                                                                               // 10535
			newProps.start = event.start.clone();                                                                               // 10536
		}                                                                                                                    // 10537
		if (newProps.end === undefined) {                                                                                    // 10538
			newProps.end = event.end ? event.end.clone() : null;                                                                // 10539
		}                                                                                                                    // 10540
		if (newProps.allDay == null) { // is null or undefined?                                                              // 10541
			newProps.allDay = event.allDay;                                                                                     // 10542
		}                                                                                                                    // 10543
		normalizeEventDates(newProps);                                                                                       // 10544
                                                                                                                       // 10545
		// create normalized versions of the original props to compare against                                               // 10546
		// need a real end value, for diffing                                                                                // 10547
		oldProps = {                                                                                                         // 10548
			start: event._start.clone(),                                                                                        // 10549
			end: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 10550
			allDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 10551
		};                                                                                                                   // 10552
		normalizeEventDates(oldProps);                                                                                       // 10553
                                                                                                                       // 10554
		// need to clear the end date if explicitly changed to null                                                          // 10555
		clearEnd = event._end !== null && newProps.end === null;                                                             // 10556
                                                                                                                       // 10557
		// compute the delta for moving the start date                                                                       // 10558
		startDelta = diffDates(newProps.start, oldProps.start);                                                              // 10559
                                                                                                                       // 10560
		// compute the delta for moving the end date                                                                         // 10561
		if (newProps.end) {                                                                                                  // 10562
			endDelta = diffDates(newProps.end, oldProps.end);                                                                   // 10563
			durationDelta = endDelta.subtract(startDelta);                                                                      // 10564
		}                                                                                                                    // 10565
		else {                                                                                                               // 10566
			durationDelta = null;                                                                                               // 10567
		}                                                                                                                    // 10568
                                                                                                                       // 10569
		// gather all non-date-related properties                                                                            // 10570
		$.each(newProps, function(name, val) {                                                                               // 10571
			if (isMiscEventPropName(name)) {                                                                                    // 10572
				if (val !== undefined) {                                                                                           // 10573
					miscProps[name] = val;                                                                                            // 10574
				}                                                                                                                  // 10575
			}                                                                                                                   // 10576
		});                                                                                                                  // 10577
                                                                                                                       // 10578
		// apply the operations to the event and all related events                                                          // 10579
		undoFunc = mutateEvents(                                                                                             // 10580
			clientEvents(event._id), // get events with this ID                                                                 // 10581
			clearEnd,                                                                                                           // 10582
			newProps.allDay,                                                                                                    // 10583
			startDelta,                                                                                                         // 10584
			durationDelta,                                                                                                      // 10585
			miscProps                                                                                                           // 10586
		);                                                                                                                   // 10587
                                                                                                                       // 10588
		return {                                                                                                             // 10589
			dateDelta: startDelta,                                                                                              // 10590
			durationDelta: durationDelta,                                                                                       // 10591
			undo: undoFunc                                                                                                      // 10592
		};                                                                                                                   // 10593
	}                                                                                                                     // 10594
                                                                                                                       // 10595
                                                                                                                       // 10596
	// Modifies an array of events in the following ways (operations are in order):                                       // 10597
	// - clear the event's `end`                                                                                          // 10598
	// - convert the event to allDay                                                                                      // 10599
	// - add `dateDelta` to the start and end                                                                             // 10600
	// - add `durationDelta` to the event's duration                                                                      // 10601
	// - assign `miscProps` to the event                                                                                  // 10602
	//                                                                                                                    // 10603
	// Returns a function that can be called to undo all the operations.                                                  // 10604
	//                                                                                                                    // 10605
	// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 10606
	//                                                                                                                    // 10607
	function mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 10608
		var isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 10609
		var undoFunctions = [];                                                                                              // 10610
                                                                                                                       // 10611
		// normalize zero-length deltas to be null                                                                           // 10612
		if (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 10613
		if (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 10614
                                                                                                                       // 10615
		$.each(events, function(i, event) {                                                                                  // 10616
			var oldProps;                                                                                                       // 10617
			var newProps;                                                                                                       // 10618
                                                                                                                       // 10619
			// build an object holding all the old values, both date-related and misc.                                          // 10620
			// for the undo function.                                                                                           // 10621
			oldProps = {                                                                                                        // 10622
				start: event.start.clone(),                                                                                        // 10623
				end: event.end ? event.end.clone() : null,                                                                         // 10624
				allDay: event.allDay                                                                                               // 10625
			};                                                                                                                  // 10626
			$.each(miscProps, function(name) {                                                                                  // 10627
				oldProps[name] = event[name];                                                                                      // 10628
			});                                                                                                                 // 10629
                                                                                                                       // 10630
			// new date-related properties. work off the original date snapshot.                                                // 10631
			// ok to use references because they will be thrown away when backupEventDates is called.                           // 10632
			newProps = {                                                                                                        // 10633
				start: event._start,                                                                                               // 10634
				end: event._end,                                                                                                   // 10635
				allDay: allDay // normalize the dates in the same regard as the new properties                                     // 10636
			};                                                                                                                  // 10637
			normalizeEventDates(newProps); // massages start/end/allDay                                                         // 10638
                                                                                                                       // 10639
			// strip or ensure the end date                                                                                     // 10640
			if (clearEnd) {                                                                                                     // 10641
				newProps.end = null;                                                                                               // 10642
			}                                                                                                                   // 10643
			else if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 10644
				newProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 10645
			}                                                                                                                   // 10646
                                                                                                                       // 10647
			if (dateDelta) {                                                                                                    // 10648
				newProps.start.add(dateDelta);                                                                                     // 10649
				if (newProps.end) {                                                                                                // 10650
					newProps.end.add(dateDelta);                                                                                      // 10651
				}                                                                                                                  // 10652
			}                                                                                                                   // 10653
                                                                                                                       // 10654
			if (durationDelta) {                                                                                                // 10655
				newProps.end.add(durationDelta); // end already ensured above                                                      // 10656
			}                                                                                                                   // 10657
                                                                                                                       // 10658
			// if the dates have changed, and we know it is impossible to recompute the                                         // 10659
			// timezone offsets, strip the zone.                                                                                // 10660
			if (                                                                                                                // 10661
				isAmbigTimezone &&                                                                                                 // 10662
				!newProps.allDay &&                                                                                                // 10663
				(dateDelta || durationDelta)                                                                                       // 10664
			) {                                                                                                                 // 10665
				newProps.start.stripZone();                                                                                        // 10666
				if (newProps.end) {                                                                                                // 10667
					newProps.end.stripZone();                                                                                         // 10668
				}                                                                                                                  // 10669
			}                                                                                                                   // 10670
                                                                                                                       // 10671
			$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 10672
			backupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 10673
                                                                                                                       // 10674
			undoFunctions.push(function() {                                                                                     // 10675
				$.extend(event, oldProps);                                                                                         // 10676
				backupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 10677
			});                                                                                                                 // 10678
		});                                                                                                                  // 10679
                                                                                                                       // 10680
		return function() {                                                                                                  // 10681
			for (var i = 0; i < undoFunctions.length; i++) {                                                                    // 10682
				undoFunctions[i]();                                                                                                // 10683
			}                                                                                                                   // 10684
		};                                                                                                                   // 10685
	}                                                                                                                     // 10686
                                                                                                                       // 10687
                                                                                                                       // 10688
	/* Business Hours                                                                                                     // 10689
	-----------------------------------------------------------------------------------------*/                           // 10690
                                                                                                                       // 10691
	t.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 10692
                                                                                                                       // 10693
                                                                                                                       // 10694
	// Returns an array of events as to when the business hours occur in the given view.                                  // 10695
	// Abuse of our event system :(                                                                                       // 10696
	function getBusinessHoursEvents(wholeDay) {                                                                           // 10697
		var optionVal = options.businessHours;                                                                               // 10698
		var defaultVal = {                                                                                                   // 10699
			className: 'fc-nonbusiness',                                                                                        // 10700
			start: '09:00',                                                                                                     // 10701
			end: '17:00',                                                                                                       // 10702
			dow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 10703
			rendering: 'inverse-background'                                                                                     // 10704
		};                                                                                                                   // 10705
		var view = t.getView();                                                                                              // 10706
		var eventInput;                                                                                                      // 10707
                                                                                                                       // 10708
		if (optionVal) { // `true` (which means "use the defaults") or an override object                                    // 10709
			eventInput = $.extend(                                                                                              // 10710
				{}, // copy to a new object in either case                                                                         // 10711
				defaultVal,                                                                                                        // 10712
				typeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 10713
			);                                                                                                                  // 10714
		}                                                                                                                    // 10715
                                                                                                                       // 10716
		if (eventInput) {                                                                                                    // 10717
                                                                                                                       // 10718
			// if a whole-day series is requested, clear the start/end times                                                    // 10719
			if (wholeDay) {                                                                                                     // 10720
				eventInput.start = null;                                                                                           // 10721
				eventInput.end = null;                                                                                             // 10722
			}                                                                                                                   // 10723
                                                                                                                       // 10724
			return expandEvent(                                                                                                 // 10725
				buildEventFromInput(eventInput),                                                                                   // 10726
				view.start,                                                                                                        // 10727
				view.end                                                                                                           // 10728
			);                                                                                                                  // 10729
		}                                                                                                                    // 10730
                                                                                                                       // 10731
		return [];                                                                                                           // 10732
	}                                                                                                                     // 10733
                                                                                                                       // 10734
                                                                                                                       // 10735
	/* Overlapping / Constraining                                                                                         // 10736
	-----------------------------------------------------------------------------------------*/                           // 10737
                                                                                                                       // 10738
	t.isEventSpanAllowed = isEventSpanAllowed;                                                                            // 10739
	t.isExternalSpanAllowed = isExternalSpanAllowed;                                                                      // 10740
	t.isSelectionSpanAllowed = isSelectionSpanAllowed;                                                                    // 10741
                                                                                                                       // 10742
                                                                                                                       // 10743
	// Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)          // 10744
	function isEventSpanAllowed(span, event) {                                                                            // 10745
		var source = event.source || {};                                                                                     // 10746
		var constraint = firstDefined(                                                                                       // 10747
			event.constraint,                                                                                                   // 10748
			source.constraint,                                                                                                  // 10749
			options.eventConstraint                                                                                             // 10750
		);                                                                                                                   // 10751
		var overlap = firstDefined(                                                                                          // 10752
			event.overlap,                                                                                                      // 10753
			source.overlap,                                                                                                     // 10754
			options.eventOverlap                                                                                                // 10755
		);                                                                                                                   // 10756
		return isSpanAllowed(span, constraint, overlap, event);                                                              // 10757
	}                                                                                                                     // 10758
                                                                                                                       // 10759
                                                                                                                       // 10760
	// Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)        // 10761
	function isExternalSpanAllowed(eventSpan, eventLocation, eventProps) {                                                // 10762
		var eventInput;                                                                                                      // 10763
		var event;                                                                                                           // 10764
                                                                                                                       // 10765
		// note: very similar logic is in View's reportExternalDrop                                                          // 10766
		if (eventProps) {                                                                                                    // 10767
			eventInput = $.extend({}, eventProps, eventLocation);                                                               // 10768
			event = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 10769
		}                                                                                                                    // 10770
                                                                                                                       // 10771
		if (event) {                                                                                                         // 10772
			return isEventSpanAllowed(eventSpan, event);                                                                        // 10773
		}                                                                                                                    // 10774
		else { // treat it as a selection                                                                                    // 10775
                                                                                                                       // 10776
			return isSelectionSpanAllowed(eventSpan);                                                                           // 10777
		}                                                                                                                    // 10778
	}                                                                                                                     // 10779
                                                                                                                       // 10780
                                                                                                                       // 10781
	// Determines the given span (unzoned start/end with other misc data) can be selected.                                // 10782
	function isSelectionSpanAllowed(span) {                                                                               // 10783
		return isSpanAllowed(span, options.selectConstraint, options.selectOverlap);                                         // 10784
	}                                                                                                                     // 10785
                                                                                                                       // 10786
                                                                                                                       // 10787
	// Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist                 // 10788
	// according to the constraint/overlap settings.                                                                      // 10789
	// `event` is not required if checking a selection.                                                                   // 10790
	function isSpanAllowed(span, constraint, overlap, event) {                                                            // 10791
		var constraintEvents;                                                                                                // 10792
		var anyContainment;                                                                                                  // 10793
		var peerEvents;                                                                                                      // 10794
		var i, peerEvent;                                                                                                    // 10795
		var peerOverlap;                                                                                                     // 10796
                                                                                                                       // 10797
		// the range must be fully contained by at least one of produced constraint events                                   // 10798
		if (constraint != null) {                                                                                            // 10799
                                                                                                                       // 10800
			// not treated as an event! intermediate data structure                                                             // 10801
			// TODO: use ranges in the future                                                                                   // 10802
			constraintEvents = constraintToEvents(constraint);                                                                  // 10803
                                                                                                                       // 10804
			anyContainment = false;                                                                                             // 10805
			for (i = 0; i < constraintEvents.length; i++) {                                                                     // 10806
				if (eventContainsRange(constraintEvents[i], span)) {                                                               // 10807
					anyContainment = true;                                                                                            // 10808
					break;                                                                                                            // 10809
				}                                                                                                                  // 10810
			}                                                                                                                   // 10811
                                                                                                                       // 10812
			if (!anyContainment) {                                                                                              // 10813
				return false;                                                                                                      // 10814
			}                                                                                                                   // 10815
		}                                                                                                                    // 10816
                                                                                                                       // 10817
		peerEvents = t.getPeerEvents(span, event);                                                                           // 10818
                                                                                                                       // 10819
		for (i = 0; i < peerEvents.length; i++)  {                                                                           // 10820
			peerEvent = peerEvents[i];                                                                                          // 10821
                                                                                                                       // 10822
			// there needs to be an actual intersection before disallowing anything                                             // 10823
			if (eventIntersectsRange(peerEvent, span)) {                                                                        // 10824
                                                                                                                       // 10825
				// evaluate overlap for the given range and short-circuit if necessary                                             // 10826
				if (overlap === false) {                                                                                           // 10827
					return false;                                                                                                     // 10828
				}                                                                                                                  // 10829
				// if the event's overlap is a test function, pass the peer event in question as the first param                   // 10830
				else if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 10831
					return false;                                                                                                     // 10832
				}                                                                                                                  // 10833
                                                                                                                       // 10834
				// if we are computing if the given range is allowable for an event, consider the other event's                    // 10835
				// EventObject-specific or Source-specific `overlap` property                                                      // 10836
				if (event) {                                                                                                       // 10837
					peerOverlap = firstDefined(                                                                                       // 10838
						peerEvent.overlap,                                                                                               // 10839
						(peerEvent.source || {}).overlap                                                                                 // 10840
						// we already considered the global `eventOverlap`                                                               // 10841
					);                                                                                                                // 10842
					if (peerOverlap === false) {                                                                                      // 10843
						return false;                                                                                                    // 10844
					}                                                                                                                 // 10845
					// if the peer event's overlap is a test function, pass the subject event as the first param                      // 10846
					if (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 10847
						return false;                                                                                                    // 10848
					}                                                                                                                 // 10849
				}                                                                                                                  // 10850
			}                                                                                                                   // 10851
		}                                                                                                                    // 10852
                                                                                                                       // 10853
		return true;                                                                                                         // 10854
	}                                                                                                                     // 10855
                                                                                                                       // 10856
                                                                                                                       // 10857
	// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 10858
	// 'businessHours'                                                                                                    // 10859
	// An event ID (number or string)                                                                                     // 10860
	// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 10861
	function constraintToEvents(constraintInput) {                                                                        // 10862
                                                                                                                       // 10863
		if (constraintInput === 'businessHours') {                                                                           // 10864
			return getBusinessHoursEvents();                                                                                    // 10865
		}                                                                                                                    // 10866
                                                                                                                       // 10867
		if (typeof constraintInput === 'object') {                                                                           // 10868
			return expandEvent(buildEventFromInput(constraintInput));                                                           // 10869
		}                                                                                                                    // 10870
                                                                                                                       // 10871
		return clientEvents(constraintInput); // probably an ID                                                              // 10872
	}                                                                                                                     // 10873
                                                                                                                       // 10874
                                                                                                                       // 10875
	// Does the event's date range fully contain the given range?                                                         // 10876
	// start/end already assumed to have stripped zones :(                                                                // 10877
	function eventContainsRange(event, range) {                                                                           // 10878
		var eventStart = event.start.clone().stripZone();                                                                    // 10879
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10880
                                                                                                                       // 10881
		return range.start >= eventStart && range.end <= eventEnd;                                                           // 10882
	}                                                                                                                     // 10883
                                                                                                                       // 10884
                                                                                                                       // 10885
	// Does the event's date range intersect with the given range?                                                        // 10886
	// start/end already assumed to have stripped zones :(                                                                // 10887
	function eventIntersectsRange(event, range) {                                                                         // 10888
		var eventStart = event.start.clone().stripZone();                                                                    // 10889
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10890
                                                                                                                       // 10891
		return range.start < eventEnd && range.end > eventStart;                                                             // 10892
	}                                                                                                                     // 10893
                                                                                                                       // 10894
                                                                                                                       // 10895
	t.getEventCache = function() {                                                                                        // 10896
		return cache;                                                                                                        // 10897
	};                                                                                                                    // 10898
                                                                                                                       // 10899
}                                                                                                                      // 10900
                                                                                                                       // 10901
                                                                                                                       // 10902
// Returns a list of events that the given event should be compared against when being considered for a move to        // 10903
// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.            // 10904
Calendar.prototype.getPeerEvents = function(span, event) {                                                             // 10905
	var cache = this.getEventCache();                                                                                     // 10906
	var peerEvents = [];                                                                                                  // 10907
	var i, otherEvent;                                                                                                    // 10908
                                                                                                                       // 10909
	for (i = 0; i < cache.length; i++) {                                                                                  // 10910
		otherEvent = cache[i];                                                                                               // 10911
		if (                                                                                                                 // 10912
			!event ||                                                                                                           // 10913
			event._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 10914
		) {                                                                                                                  // 10915
			peerEvents.push(otherEvent);                                                                                        // 10916
		}                                                                                                                    // 10917
	}                                                                                                                     // 10918
                                                                                                                       // 10919
	return peerEvents;                                                                                                    // 10920
};                                                                                                                     // 10921
                                                                                                                       // 10922
                                                                                                                       // 10923
// updates the "backup" properties, which are preserved in order to compute diffs later on.                            // 10924
function backupEventDates(event) {                                                                                     // 10925
	event._allDay = event.allDay;                                                                                         // 10926
	event._start = event.start.clone();                                                                                   // 10927
	event._end = event.end ? event.end.clone() : null;                                                                    // 10928
}                                                                                                                      // 10929
                                                                                                                       // 10930
;;                                                                                                                     // 10931
                                                                                                                       // 10932
/* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.              // 10933
----------------------------------------------------------------------------------------------------------------------*/
// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 10935
// It is responsible for managing width/height.                                                                        // 10936
                                                                                                                       // 10937
var BasicView = FC.BasicView = View.extend({                                                                           // 10938
                                                                                                                       // 10939
	dayGridClass: DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)                     // 10940
	dayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 10941
                                                                                                                       // 10942
	dayNumbersVisible: false, // display day numbers on each day cell?                                                    // 10943
	weekNumbersVisible: false, // display week numbers along the side?                                                    // 10944
                                                                                                                       // 10945
	weekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10946
                                                                                                                       // 10947
	headContainerEl: null, // div that hold's the dayGrid's rendered date header                                          // 10948
	headRowEl: null, // the fake row element of the day-of-week header                                                    // 10949
                                                                                                                       // 10950
                                                                                                                       // 10951
	initialize: function() {                                                                                              // 10952
		this.dayGrid = this.instantiateDayGrid();                                                                            // 10953
	},                                                                                                                    // 10954
                                                                                                                       // 10955
                                                                                                                       // 10956
	// Generates the DayGrid object this view needs. Draws from this.dayGridClass                                         // 10957
	instantiateDayGrid: function() {                                                                                      // 10958
		// generate a subclass on the fly with BasicView-specific behavior                                                   // 10959
		// TODO: cache this subclass                                                                                         // 10960
		var subclass = this.dayGridClass.extend(basicDayGridMethods);                                                        // 10961
                                                                                                                       // 10962
		return new subclass(this);                                                                                           // 10963
	},                                                                                                                    // 10964
                                                                                                                       // 10965
                                                                                                                       // 10966
	// Sets the display range and computes all necessary dates                                                            // 10967
	setRange: function(range) {                                                                                           // 10968
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 10969
                                                                                                                       // 10970
		this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10971
		this.dayGrid.setRange(range);                                                                                        // 10972
	},                                                                                                                    // 10973
                                                                                                                       // 10974
                                                                                                                       // 10975
	// Compute the value to feed into setRange. Overrides superclass.                                                     // 10976
	computeRange: function(date) {                                                                                        // 10977
		var range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10978
                                                                                                                       // 10979
		// year and month views should be aligned with weeks. this is already done for week                                  // 10980
		if (/year|month/.test(range.intervalUnit)) {                                                                         // 10981
			range.start.startOf('week');                                                                                        // 10982
			range.start = this.skipHiddenDays(range.start);                                                                     // 10983
                                                                                                                       // 10984
			// make end-of-week if not already                                                                                  // 10985
			if (range.end.weekday()) {                                                                                          // 10986
				range.end.add(1, 'week').startOf('week');                                                                          // 10987
				range.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10988
			}                                                                                                                   // 10989
		}                                                                                                                    // 10990
                                                                                                                       // 10991
		return range;                                                                                                        // 10992
	},                                                                                                                    // 10993
                                                                                                                       // 10994
                                                                                                                       // 10995
	// Renders the view into `this.el`, which should already be assigned                                                  // 10996
	renderDates: function() {                                                                                             // 10997
                                                                                                                       // 10998
		this.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10999
		this.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 11000
		this.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 11001
                                                                                                                       // 11002
		this.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());                                                   // 11003
		this.renderHead();                                                                                                   // 11004
                                                                                                                       // 11005
		this.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 11006
                                                                                                                       // 11007
		this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 11008
		this.dayGrid.renderDates(this.hasRigidRows());                                                                       // 11009
	},                                                                                                                    // 11010
                                                                                                                       // 11011
                                                                                                                       // 11012
	// render the day-of-week headers                                                                                     // 11013
	renderHead: function() {                                                                                              // 11014
		this.headContainerEl =                                                                                               // 11015
			this.el.find('.fc-head-container')                                                                                  // 11016
				.html(this.dayGrid.renderHeadHtml());                                                                              // 11017
		this.headRowEl = this.headContainerEl.find('.fc-row');                                                               // 11018
	},                                                                                                                    // 11019
                                                                                                                       // 11020
                                                                                                                       // 11021
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 11022
	// always completely kill the dayGrid's rendering.                                                                    // 11023
	unrenderDates: function() {                                                                                           // 11024
		this.dayGrid.unrenderDates();                                                                                        // 11025
		this.dayGrid.removeElement();                                                                                        // 11026
	},                                                                                                                    // 11027
                                                                                                                       // 11028
                                                                                                                       // 11029
	renderBusinessHours: function() {                                                                                     // 11030
		this.dayGrid.renderBusinessHours();                                                                                  // 11031
	},                                                                                                                    // 11032
                                                                                                                       // 11033
                                                                                                                       // 11034
	// Builds the HTML skeleton for the view.                                                                             // 11035
	// The day-grid component will render inside of a container defined by this HTML.                                     // 11036
	renderSkeletonHtml: function() {                                                                                      // 11037
		return '' +                                                                                                          // 11038
			'<table>' +                                                                                                         // 11039
				'<thead class="fc-head">' +                                                                                        // 11040
					'<tr>' +                                                                                                          // 11041
						'<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' +                                           // 11042
					'</tr>' +                                                                                                         // 11043
				'</thead>' +                                                                                                       // 11044
				'<tbody class="fc-body">' +                                                                                        // 11045
					'<tr>' +                                                                                                          // 11046
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 11047
							'<div class="fc-day-grid-container">' +                                                                         // 11048
								'<div class="fc-day-grid"/>' +                                                                                 // 11049
							'</div>' +                                                                                                      // 11050
						'</td>' +                                                                                                        // 11051
					'</tr>' +                                                                                                         // 11052
				'</tbody>' +                                                                                                       // 11053
			'</table>';                                                                                                         // 11054
	},                                                                                                                    // 11055
                                                                                                                       // 11056
                                                                                                                       // 11057
	// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 11058
	weekNumberStyleAttr: function() {                                                                                     // 11059
		if (this.weekNumberWidth !== null) {                                                                                 // 11060
			return 'style="width:' + this.weekNumberWidth + 'px"';                                                              // 11061
		}                                                                                                                    // 11062
		return '';                                                                                                           // 11063
	},                                                                                                                    // 11064
                                                                                                                       // 11065
                                                                                                                       // 11066
	// Determines whether each row should have a constant height                                                          // 11067
	hasRigidRows: function() {                                                                                            // 11068
		var eventLimit = this.opt('eventLimit');                                                                             // 11069
		return eventLimit && typeof eventLimit !== 'number';                                                                 // 11070
	},                                                                                                                    // 11071
                                                                                                                       // 11072
                                                                                                                       // 11073
	/* Dimensions                                                                                                         // 11074
	------------------------------------------------------------------------------------------------------------------*/  // 11075
                                                                                                                       // 11076
                                                                                                                       // 11077
	// Refreshes the horizontal dimensions of the view                                                                    // 11078
	updateWidth: function() {                                                                                             // 11079
		if (this.weekNumbersVisible) {                                                                                       // 11080
			// Make sure all week number cells running down the side have the same width.                                       // 11081
			// Record the width for cells created later.                                                                        // 11082
			this.weekNumberWidth = matchCellWidths(                                                                             // 11083
				this.el.find('.fc-week-number')                                                                                    // 11084
			);                                                                                                                  // 11085
		}                                                                                                                    // 11086
	},                                                                                                                    // 11087
                                                                                                                       // 11088
                                                                                                                       // 11089
	// Adjusts the vertical dimensions of the view to the specified values                                                // 11090
	setHeight: function(totalHeight, isAuto) {                                                                            // 11091
		var eventLimit = this.opt('eventLimit');                                                                             // 11092
		var scrollerHeight;                                                                                                  // 11093
                                                                                                                       // 11094
		// reset all heights to be natural                                                                                   // 11095
		unsetScroller(this.scrollerEl);                                                                                      // 11096
		uncompensateScroll(this.headRowEl);                                                                                  // 11097
                                                                                                                       // 11098
		this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                             // 11099
                                                                                                                       // 11100
		// is the event limit a constant level number?                                                                       // 11101
		if (eventLimit && typeof eventLimit === 'number') {                                                                  // 11102
			this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 11103
		}                                                                                                                    // 11104
                                                                                                                       // 11105
		scrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 11106
		this.setGridHeight(scrollerHeight, isAuto);                                                                          // 11107
                                                                                                                       // 11108
		// is the event limit dynamically calculated?                                                                        // 11109
		if (eventLimit && typeof eventLimit !== 'number') {                                                                  // 11110
			this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 11111
		}                                                                                                                    // 11112
                                                                                                                       // 11113
		if (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 11114
                                                                                                                       // 11115
			compensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 11116
                                                                                                                       // 11117
			// doing the scrollbar compensation might have created text overflow which created more height. redo                // 11118
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 11119
			this.scrollerEl.height(scrollerHeight);                                                                             // 11120
		}                                                                                                                    // 11121
	},                                                                                                                    // 11122
                                                                                                                       // 11123
                                                                                                                       // 11124
	// Sets the height of just the DayGrid component in this view                                                         // 11125
	setGridHeight: function(height, isAuto) {                                                                             // 11126
		if (isAuto) {                                                                                                        // 11127
			undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 11128
		}                                                                                                                    // 11129
		else {                                                                                                               // 11130
			distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 11131
		}                                                                                                                    // 11132
	},                                                                                                                    // 11133
                                                                                                                       // 11134
                                                                                                                       // 11135
	/* Hit Areas                                                                                                          // 11136
	------------------------------------------------------------------------------------------------------------------*/  // 11137
	// forward all hit-related method calls to dayGrid                                                                    // 11138
                                                                                                                       // 11139
                                                                                                                       // 11140
	prepareHits: function() {                                                                                             // 11141
		this.dayGrid.prepareHits();                                                                                          // 11142
	},                                                                                                                    // 11143
                                                                                                                       // 11144
                                                                                                                       // 11145
	releaseHits: function() {                                                                                             // 11146
		this.dayGrid.releaseHits();                                                                                          // 11147
	},                                                                                                                    // 11148
                                                                                                                       // 11149
                                                                                                                       // 11150
	queryHit: function(left, top) {                                                                                       // 11151
		return this.dayGrid.queryHit(left, top);                                                                             // 11152
	},                                                                                                                    // 11153
                                                                                                                       // 11154
                                                                                                                       // 11155
	getHitSpan: function(hit) {                                                                                           // 11156
		return this.dayGrid.getHitSpan(hit);                                                                                 // 11157
	},                                                                                                                    // 11158
                                                                                                                       // 11159
                                                                                                                       // 11160
	getHitEl: function(hit) {                                                                                             // 11161
		return this.dayGrid.getHitEl(hit);                                                                                   // 11162
	},                                                                                                                    // 11163
                                                                                                                       // 11164
                                                                                                                       // 11165
	/* Events                                                                                                             // 11166
	------------------------------------------------------------------------------------------------------------------*/  // 11167
                                                                                                                       // 11168
                                                                                                                       // 11169
	// Renders the given events onto the view and populates the segments array                                            // 11170
	renderEvents: function(events) {                                                                                      // 11171
		this.dayGrid.renderEvents(events);                                                                                   // 11172
                                                                                                                       // 11173
		this.updateHeight(); // must compensate for events that overflow the row                                             // 11174
	},                                                                                                                    // 11175
                                                                                                                       // 11176
                                                                                                                       // 11177
	// Retrieves all segment objects that are rendered in the view                                                        // 11178
	getEventSegs: function() {                                                                                            // 11179
		return this.dayGrid.getEventSegs();                                                                                  // 11180
	},                                                                                                                    // 11181
                                                                                                                       // 11182
                                                                                                                       // 11183
	// Unrenders all event elements and clears internal segment data                                                      // 11184
	unrenderEvents: function() {                                                                                          // 11185
		this.dayGrid.unrenderEvents();                                                                                       // 11186
                                                                                                                       // 11187
		// we DON'T need to call updateHeight() because:                                                                     // 11188
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 11189
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 11190
	},                                                                                                                    // 11191
                                                                                                                       // 11192
                                                                                                                       // 11193
	/* Dragging (for both events and external elements)                                                                   // 11194
	------------------------------------------------------------------------------------------------------------------*/  // 11195
                                                                                                                       // 11196
                                                                                                                       // 11197
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 11198
	renderDrag: function(dropLocation, seg) {                                                                             // 11199
		return this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 11200
	},                                                                                                                    // 11201
                                                                                                                       // 11202
                                                                                                                       // 11203
	unrenderDrag: function() {                                                                                            // 11204
		this.dayGrid.unrenderDrag();                                                                                         // 11205
	},                                                                                                                    // 11206
                                                                                                                       // 11207
                                                                                                                       // 11208
	/* Selection                                                                                                          // 11209
	------------------------------------------------------------------------------------------------------------------*/  // 11210
                                                                                                                       // 11211
                                                                                                                       // 11212
	// Renders a visual indication of a selection                                                                         // 11213
	renderSelection: function(span) {                                                                                     // 11214
		this.dayGrid.renderSelection(span);                                                                                  // 11215
	},                                                                                                                    // 11216
                                                                                                                       // 11217
                                                                                                                       // 11218
	// Unrenders a visual indications of a selection                                                                      // 11219
	unrenderSelection: function() {                                                                                       // 11220
		this.dayGrid.unrenderSelection();                                                                                    // 11221
	}                                                                                                                     // 11222
                                                                                                                       // 11223
});                                                                                                                    // 11224
                                                                                                                       // 11225
                                                                                                                       // 11226
// Methods that will customize the rendering behavior of the BasicView's dayGrid                                       // 11227
var basicDayGridMethods = {                                                                                            // 11228
                                                                                                                       // 11229
                                                                                                                       // 11230
	// Generates the HTML that will go before the day-of week header cells                                                // 11231
	renderHeadIntroHtml: function() {                                                                                     // 11232
		var view = this.view;                                                                                                // 11233
                                                                                                                       // 11234
		if (view.weekNumbersVisible) {                                                                                       // 11235
			return '' +                                                                                                         // 11236
				'<th class="fc-week-number ' + view.widgetHeaderClass + '" ' + view.weekNumberStyleAttr() + '>' +                  // 11237
					'<span>' + // needed for matchCellWidths                                                                          // 11238
						htmlEscape(view.opt('weekNumberTitle')) +                                                                        // 11239
					'</span>' +                                                                                                       // 11240
				'</th>';                                                                                                           // 11241
		}                                                                                                                    // 11242
                                                                                                                       // 11243
		return '';                                                                                                           // 11244
	},                                                                                                                    // 11245
                                                                                                                       // 11246
                                                                                                                       // 11247
	// Generates the HTML that will go before content-skeleton cells that display the day/week numbers                    // 11248
	renderNumberIntroHtml: function(row) {                                                                                // 11249
		var view = this.view;                                                                                                // 11250
                                                                                                                       // 11251
		if (view.weekNumbersVisible) {                                                                                       // 11252
			return '' +                                                                                                         // 11253
				'<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '>' +                                                 // 11254
					'<span>' + // needed for matchCellWidths                                                                          // 11255
						this.getCellDate(row, 0).format('w') +                                                                           // 11256
					'</span>' +                                                                                                       // 11257
				'</td>';                                                                                                           // 11258
		}                                                                                                                    // 11259
                                                                                                                       // 11260
		return '';                                                                                                           // 11261
	},                                                                                                                    // 11262
                                                                                                                       // 11263
                                                                                                                       // 11264
	// Generates the HTML that goes before the day bg cells for each day-row                                              // 11265
	renderBgIntroHtml: function() {                                                                                       // 11266
		var view = this.view;                                                                                                // 11267
                                                                                                                       // 11268
		if (view.weekNumbersVisible) {                                                                                       // 11269
			return '<td class="fc-week-number ' + view.widgetContentClass + '" ' +                                              // 11270
				view.weekNumberStyleAttr() + '></td>';                                                                             // 11271
		}                                                                                                                    // 11272
                                                                                                                       // 11273
		return '';                                                                                                           // 11274
	},                                                                                                                    // 11275
                                                                                                                       // 11276
                                                                                                                       // 11277
	// Generates the HTML that goes before every other type of row generated by DayGrid.                                  // 11278
	// Affects helper-skeleton and highlight-skeleton rows.                                                               // 11279
	renderIntroHtml: function() {                                                                                         // 11280
		var view = this.view;                                                                                                // 11281
                                                                                                                       // 11282
		if (view.weekNumbersVisible) {                                                                                       // 11283
			return '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '></td>';                                       // 11284
		}                                                                                                                    // 11285
                                                                                                                       // 11286
		return '';                                                                                                           // 11287
	}                                                                                                                     // 11288
                                                                                                                       // 11289
};                                                                                                                     // 11290
                                                                                                                       // 11291
;;                                                                                                                     // 11292
                                                                                                                       // 11293
/* A month view with day cells running in rows (one-per-week) and columns                                              // 11294
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 11296
var MonthView = FC.MonthView = BasicView.extend({                                                                      // 11297
                                                                                                                       // 11298
	// Produces information about what range to display                                                                   // 11299
	computeRange: function(date) {                                                                                        // 11300
		var range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 11301
		var rowCnt;                                                                                                          // 11302
                                                                                                                       // 11303
		// ensure 6 weeks                                                                                                    // 11304
		if (this.isFixedWeeks()) {                                                                                           // 11305
			rowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 11306
			range.end.add(6 - rowCnt, 'weeks');                                                                                 // 11307
		}                                                                                                                    // 11308
                                                                                                                       // 11309
		return range;                                                                                                        // 11310
	},                                                                                                                    // 11311
                                                                                                                       // 11312
                                                                                                                       // 11313
	// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 11314
	setGridHeight: function(height, isAuto) {                                                                             // 11315
                                                                                                                       // 11316
		isAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 11317
                                                                                                                       // 11318
		// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 11319
		if (isAuto) {                                                                                                        // 11320
			height *= this.rowCnt / 6;                                                                                          // 11321
		}                                                                                                                    // 11322
                                                                                                                       // 11323
		distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 11324
	},                                                                                                                    // 11325
                                                                                                                       // 11326
                                                                                                                       // 11327
	isFixedWeeks: function() {                                                                                            // 11328
		var weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 11329
		if (weekMode) {                                                                                                      // 11330
			return weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 11331
		}                                                                                                                    // 11332
                                                                                                                       // 11333
		return this.opt('fixedWeekCount');                                                                                   // 11334
	}                                                                                                                     // 11335
                                                                                                                       // 11336
});                                                                                                                    // 11337
                                                                                                                       // 11338
;;                                                                                                                     // 11339
                                                                                                                       // 11340
fcViews.basic = {                                                                                                      // 11341
	'class': BasicView                                                                                                    // 11342
};                                                                                                                     // 11343
                                                                                                                       // 11344
fcViews.basicDay = {                                                                                                   // 11345
	type: 'basic',                                                                                                        // 11346
	duration: { days: 1 }                                                                                                 // 11347
};                                                                                                                     // 11348
                                                                                                                       // 11349
fcViews.basicWeek = {                                                                                                  // 11350
	type: 'basic',                                                                                                        // 11351
	duration: { weeks: 1 }                                                                                                // 11352
};                                                                                                                     // 11353
                                                                                                                       // 11354
fcViews.month = {                                                                                                      // 11355
	'class': MonthView,                                                                                                   // 11356
	duration: { months: 1 }, // important for prev/next                                                                   // 11357
	defaults: {                                                                                                           // 11358
		fixedWeekCount: true                                                                                                 // 11359
	}                                                                                                                     // 11360
};                                                                                                                     // 11361
;;                                                                                                                     // 11362
                                                                                                                       // 11363
/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 11364
----------------------------------------------------------------------------------------------------------------------*/
// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 11366
// Responsible for managing width/height.                                                                              // 11367
                                                                                                                       // 11368
var AgendaView = FC.AgendaView = View.extend({                                                                         // 11369
                                                                                                                       // 11370
	timeGridClass: TimeGrid, // class used to instantiate the timeGrid. subclasses can override                           // 11371
	timeGrid: null, // the main time-grid subcomponent of this view                                                       // 11372
                                                                                                                       // 11373
	dayGridClass: DayGrid, // class used to instantiate the dayGrid. subclasses can override                              // 11374
	dayGrid: null, // the "all-day" subcomponent. if all-day is turned off, this will be null                             // 11375
                                                                                                                       // 11376
	axisWidth: null, // the width of the time axis running down the side                                                  // 11377
                                                                                                                       // 11378
	headContainerEl: null, // div that hold's the timeGrid's rendered date header                                         // 11379
	noScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 11380
                                                                                                                       // 11381
	// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 11382
	bottomRuleEl: null,                                                                                                   // 11383
	bottomRuleHeight: null,                                                                                               // 11384
                                                                                                                       // 11385
                                                                                                                       // 11386
	initialize: function() {                                                                                              // 11387
		this.timeGrid = this.instantiateTimeGrid();                                                                          // 11388
                                                                                                                       // 11389
		if (this.opt('allDaySlot')) { // should we display the "all-day" area?                                               // 11390
			this.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view                                  // 11391
		}                                                                                                                    // 11392
	},                                                                                                                    // 11393
                                                                                                                       // 11394
                                                                                                                       // 11395
	// Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass                                    // 11396
	instantiateTimeGrid: function() {                                                                                     // 11397
		var subclass = this.timeGridClass.extend(agendaTimeGridMethods);                                                     // 11398
                                                                                                                       // 11399
		return new subclass(this);                                                                                           // 11400
	},                                                                                                                    // 11401
                                                                                                                       // 11402
                                                                                                                       // 11403
	// Instantiates the DayGrid object this view might need. Draws from this.dayGridClass                                 // 11404
	instantiateDayGrid: function() {                                                                                      // 11405
		var subclass = this.dayGridClass.extend(agendaDayGridMethods);                                                       // 11406
                                                                                                                       // 11407
		return new subclass(this);                                                                                           // 11408
	},                                                                                                                    // 11409
                                                                                                                       // 11410
                                                                                                                       // 11411
	/* Rendering                                                                                                          // 11412
	------------------------------------------------------------------------------------------------------------------*/  // 11413
                                                                                                                       // 11414
                                                                                                                       // 11415
	// Sets the display range and computes all necessary dates                                                            // 11416
	setRange: function(range) {                                                                                           // 11417
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 11418
                                                                                                                       // 11419
		this.timeGrid.setRange(range);                                                                                       // 11420
		if (this.dayGrid) {                                                                                                  // 11421
			this.dayGrid.setRange(range);                                                                                       // 11422
		}                                                                                                                    // 11423
	},                                                                                                                    // 11424
                                                                                                                       // 11425
                                                                                                                       // 11426
	// Renders the view into `this.el`, which has already been assigned                                                   // 11427
	renderDates: function() {                                                                                             // 11428
                                                                                                                       // 11429
		this.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());                                                  // 11430
		this.renderHead();                                                                                                   // 11431
                                                                                                                       // 11432
		// the element that wraps the time-grid that will probably scroll                                                    // 11433
		this.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 11434
                                                                                                                       // 11435
		this.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 11436
		this.timeGrid.renderDates();                                                                                         // 11437
                                                                                                                       // 11438
		// the <hr> that sometimes displays under the time-grid                                                              // 11439
		this.bottomRuleEl = $('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>')                                     // 11440
			.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 11441
                                                                                                                       // 11442
		if (this.dayGrid) {                                                                                                  // 11443
			this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 11444
			this.dayGrid.renderDates();                                                                                         // 11445
                                                                                                                       // 11446
			// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 11447
			this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 11448
		}                                                                                                                    // 11449
                                                                                                                       // 11450
		this.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 11451
	},                                                                                                                    // 11452
                                                                                                                       // 11453
                                                                                                                       // 11454
	// render the day-of-week headers                                                                                     // 11455
	renderHead: function() {                                                                                              // 11456
		this.headContainerEl =                                                                                               // 11457
			this.el.find('.fc-head-container')                                                                                  // 11458
				.html(this.timeGrid.renderHeadHtml());                                                                             // 11459
	},                                                                                                                    // 11460
                                                                                                                       // 11461
                                                                                                                       // 11462
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 11463
	// always completely kill each grid's rendering.                                                                      // 11464
	unrenderDates: function() {                                                                                           // 11465
		this.timeGrid.unrenderDates();                                                                                       // 11466
		this.timeGrid.removeElement();                                                                                       // 11467
                                                                                                                       // 11468
		if (this.dayGrid) {                                                                                                  // 11469
			this.dayGrid.unrenderDates();                                                                                       // 11470
			this.dayGrid.removeElement();                                                                                       // 11471
		}                                                                                                                    // 11472
	},                                                                                                                    // 11473
                                                                                                                       // 11474
                                                                                                                       // 11475
	// Builds the HTML skeleton for the view.                                                                             // 11476
	// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 11477
	renderSkeletonHtml: function() {                                                                                      // 11478
		return '' +                                                                                                          // 11479
			'<table>' +                                                                                                         // 11480
				'<thead class="fc-head">' +                                                                                        // 11481
					'<tr>' +                                                                                                          // 11482
						'<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' +                                           // 11483
					'</tr>' +                                                                                                         // 11484
				'</thead>' +                                                                                                       // 11485
				'<tbody class="fc-body">' +                                                                                        // 11486
					'<tr>' +                                                                                                          // 11487
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 11488
							(this.dayGrid ?                                                                                                 // 11489
								'<div class="fc-day-grid"/>' +                                                                                 // 11490
								'<hr class="fc-divider ' + this.widgetHeaderClass + '"/>' :                                                    // 11491
								''                                                                                                             // 11492
								) +                                                                                                            // 11493
							'<div class="fc-time-grid-container">' +                                                                        // 11494
								'<div class="fc-time-grid"/>' +                                                                                // 11495
							'</div>' +                                                                                                      // 11496
						'</td>' +                                                                                                        // 11497
					'</tr>' +                                                                                                         // 11498
				'</tbody>' +                                                                                                       // 11499
			'</table>';                                                                                                         // 11500
	},                                                                                                                    // 11501
                                                                                                                       // 11502
                                                                                                                       // 11503
	// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 11504
	axisStyleAttr: function() {                                                                                           // 11505
		if (this.axisWidth !== null) {                                                                                       // 11506
			 return 'style="width:' + this.axisWidth + 'px"';                                                                   // 11507
		}                                                                                                                    // 11508
		return '';                                                                                                           // 11509
	},                                                                                                                    // 11510
                                                                                                                       // 11511
                                                                                                                       // 11512
	/* Business Hours                                                                                                     // 11513
	------------------------------------------------------------------------------------------------------------------*/  // 11514
                                                                                                                       // 11515
                                                                                                                       // 11516
	renderBusinessHours: function() {                                                                                     // 11517
		this.timeGrid.renderBusinessHours();                                                                                 // 11518
                                                                                                                       // 11519
		if (this.dayGrid) {                                                                                                  // 11520
			this.dayGrid.renderBusinessHours();                                                                                 // 11521
		}                                                                                                                    // 11522
	},                                                                                                                    // 11523
                                                                                                                       // 11524
                                                                                                                       // 11525
	unrenderBusinessHours: function() {                                                                                   // 11526
		this.timeGrid.unrenderBusinessHours();                                                                               // 11527
                                                                                                                       // 11528
		if (this.dayGrid) {                                                                                                  // 11529
			this.dayGrid.unrenderBusinessHours();                                                                               // 11530
		}                                                                                                                    // 11531
	},                                                                                                                    // 11532
                                                                                                                       // 11533
                                                                                                                       // 11534
	/* Now Indicator                                                                                                      // 11535
	------------------------------------------------------------------------------------------------------------------*/  // 11536
                                                                                                                       // 11537
                                                                                                                       // 11538
	getNowIndicatorUnit: function() {                                                                                     // 11539
		return this.timeGrid.getNowIndicatorUnit();                                                                          // 11540
	},                                                                                                                    // 11541
                                                                                                                       // 11542
                                                                                                                       // 11543
	renderNowIndicator: function(date) {                                                                                  // 11544
		this.timeGrid.renderNowIndicator(date);                                                                              // 11545
	},                                                                                                                    // 11546
                                                                                                                       // 11547
                                                                                                                       // 11548
	unrenderNowIndicator: function() {                                                                                    // 11549
		this.timeGrid.unrenderNowIndicator();                                                                                // 11550
	},                                                                                                                    // 11551
                                                                                                                       // 11552
                                                                                                                       // 11553
	/* Dimensions                                                                                                         // 11554
	------------------------------------------------------------------------------------------------------------------*/  // 11555
                                                                                                                       // 11556
                                                                                                                       // 11557
	updateSize: function(isResize) {                                                                                      // 11558
		this.timeGrid.updateSize(isResize);                                                                                  // 11559
                                                                                                                       // 11560
		View.prototype.updateSize.call(this, isResize); // call the super-method                                             // 11561
	},                                                                                                                    // 11562
                                                                                                                       // 11563
                                                                                                                       // 11564
	// Refreshes the horizontal dimensions of the view                                                                    // 11565
	updateWidth: function() {                                                                                             // 11566
		// make all axis cells line up, and record the width so newly created axis cells will have it                        // 11567
		this.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 11568
	},                                                                                                                    // 11569
                                                                                                                       // 11570
                                                                                                                       // 11571
	// Adjusts the vertical dimensions of the view to the specified values                                                // 11572
	setHeight: function(totalHeight, isAuto) {                                                                            // 11573
		var eventLimit;                                                                                                      // 11574
		var scrollerHeight;                                                                                                  // 11575
                                                                                                                       // 11576
		if (this.bottomRuleHeight === null) {                                                                                // 11577
			// calculate the height of the rule the very first time                                                             // 11578
			this.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 11579
		}                                                                                                                    // 11580
		this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 11581
                                                                                                                       // 11582
		// reset all dimensions back to the original state                                                                   // 11583
		this.scrollerEl.css('overflow', '');                                                                                 // 11584
		unsetScroller(this.scrollerEl);                                                                                      // 11585
		uncompensateScroll(this.noScrollRowEls);                                                                             // 11586
                                                                                                                       // 11587
		// limit number of events in the all-day area                                                                        // 11588
		if (this.dayGrid) {                                                                                                  // 11589
			this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                            // 11590
                                                                                                                       // 11591
			eventLimit = this.opt('eventLimit');                                                                                // 11592
			if (eventLimit && typeof eventLimit !== 'number') {                                                                 // 11593
				eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number                                 // 11594
			}                                                                                                                   // 11595
			if (eventLimit) {                                                                                                   // 11596
				this.dayGrid.limitRows(eventLimit);                                                                                // 11597
			}                                                                                                                   // 11598
		}                                                                                                                    // 11599
                                                                                                                       // 11600
		if (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 11601
                                                                                                                       // 11602
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 11603
			if (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 11604
                                                                                                                       // 11605
				// make the all-day and header rows lines up                                                                       // 11606
				compensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 11607
                                                                                                                       // 11608
				// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 11609
				// and reapply the desired height to the scroller.                                                                 // 11610
				scrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 11611
				this.scrollerEl.height(scrollerHeight);                                                                            // 11612
			}                                                                                                                   // 11613
			else { // no scrollbars                                                                                             // 11614
				// still, force a height and display the bottom rule (marks the end of day)                                        // 11615
				this.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 11616
				this.bottomRuleEl.show();                                                                                          // 11617
			}                                                                                                                   // 11618
		}                                                                                                                    // 11619
	},                                                                                                                    // 11620
                                                                                                                       // 11621
                                                                                                                       // 11622
	// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 11623
	computeInitialScroll: function() {                                                                                    // 11624
		var scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 11625
		var top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 11626
                                                                                                                       // 11627
		// zoom can give weird floating-point values. rather scroll a little bit further                                     // 11628
		top = Math.ceil(top);                                                                                                // 11629
                                                                                                                       // 11630
		if (top) {                                                                                                           // 11631
			top++; // to overcome top border that slots beyond the first have. looks better                                     // 11632
		}                                                                                                                    // 11633
                                                                                                                       // 11634
		return top;                                                                                                          // 11635
	},                                                                                                                    // 11636
                                                                                                                       // 11637
                                                                                                                       // 11638
	/* Hit Areas                                                                                                          // 11639
	------------------------------------------------------------------------------------------------------------------*/  // 11640
	// forward all hit-related method calls to the grids (dayGrid might not be defined)                                   // 11641
                                                                                                                       // 11642
                                                                                                                       // 11643
	prepareHits: function() {                                                                                             // 11644
		this.timeGrid.prepareHits();                                                                                         // 11645
		if (this.dayGrid) {                                                                                                  // 11646
			this.dayGrid.prepareHits();                                                                                         // 11647
		}                                                                                                                    // 11648
	},                                                                                                                    // 11649
                                                                                                                       // 11650
                                                                                                                       // 11651
	releaseHits: function() {                                                                                             // 11652
		this.timeGrid.releaseHits();                                                                                         // 11653
		if (this.dayGrid) {                                                                                                  // 11654
			this.dayGrid.releaseHits();                                                                                         // 11655
		}                                                                                                                    // 11656
	},                                                                                                                    // 11657
                                                                                                                       // 11658
                                                                                                                       // 11659
	queryHit: function(left, top) {                                                                                       // 11660
		var hit = this.timeGrid.queryHit(left, top);                                                                         // 11661
                                                                                                                       // 11662
		if (!hit && this.dayGrid) {                                                                                          // 11663
			hit = this.dayGrid.queryHit(left, top);                                                                             // 11664
		}                                                                                                                    // 11665
                                                                                                                       // 11666
		return hit;                                                                                                          // 11667
	},                                                                                                                    // 11668
                                                                                                                       // 11669
                                                                                                                       // 11670
	getHitSpan: function(hit) {                                                                                           // 11671
		// TODO: hit.component is set as a hack to identify where the hit came from                                          // 11672
		return hit.component.getHitSpan(hit);                                                                                // 11673
	},                                                                                                                    // 11674
                                                                                                                       // 11675
                                                                                                                       // 11676
	getHitEl: function(hit) {                                                                                             // 11677
		// TODO: hit.component is set as a hack to identify where the hit came from                                          // 11678
		return hit.component.getHitEl(hit);                                                                                  // 11679
	},                                                                                                                    // 11680
                                                                                                                       // 11681
                                                                                                                       // 11682
	/* Events                                                                                                             // 11683
	------------------------------------------------------------------------------------------------------------------*/  // 11684
                                                                                                                       // 11685
                                                                                                                       // 11686
	// Renders events onto the view and populates the View's segment array                                                // 11687
	renderEvents: function(events) {                                                                                      // 11688
		var dayEvents = [];                                                                                                  // 11689
		var timedEvents = [];                                                                                                // 11690
		var daySegs = [];                                                                                                    // 11691
		var timedSegs;                                                                                                       // 11692
		var i;                                                                                                               // 11693
                                                                                                                       // 11694
		// separate the events into all-day and timed                                                                        // 11695
		for (i = 0; i < events.length; i++) {                                                                                // 11696
			if (events[i].allDay) {                                                                                             // 11697
				dayEvents.push(events[i]);                                                                                         // 11698
			}                                                                                                                   // 11699
			else {                                                                                                              // 11700
				timedEvents.push(events[i]);                                                                                       // 11701
			}                                                                                                                   // 11702
		}                                                                                                                    // 11703
                                                                                                                       // 11704
		// render the events in the subcomponents                                                                            // 11705
		timedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 11706
		if (this.dayGrid) {                                                                                                  // 11707
			daySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 11708
		}                                                                                                                    // 11709
                                                                                                                       // 11710
		// the all-day area is flexible and might have a lot of events, so shift the height                                  // 11711
		this.updateHeight();                                                                                                 // 11712
	},                                                                                                                    // 11713
                                                                                                                       // 11714
                                                                                                                       // 11715
	// Retrieves all segment objects that are rendered in the view                                                        // 11716
	getEventSegs: function() {                                                                                            // 11717
		return this.timeGrid.getEventSegs().concat(                                                                          // 11718
			this.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 11719
		);                                                                                                                   // 11720
	},                                                                                                                    // 11721
                                                                                                                       // 11722
                                                                                                                       // 11723
	// Unrenders all event elements and clears internal segment data                                                      // 11724
	unrenderEvents: function() {                                                                                          // 11725
                                                                                                                       // 11726
		// unrender the events in the subcomponents                                                                          // 11727
		this.timeGrid.unrenderEvents();                                                                                      // 11728
		if (this.dayGrid) {                                                                                                  // 11729
			this.dayGrid.unrenderEvents();                                                                                      // 11730
		}                                                                                                                    // 11731
                                                                                                                       // 11732
		// we DON'T need to call updateHeight() because:                                                                     // 11733
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 11734
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 11735
	},                                                                                                                    // 11736
                                                                                                                       // 11737
                                                                                                                       // 11738
	/* Dragging (for events and external elements)                                                                        // 11739
	------------------------------------------------------------------------------------------------------------------*/  // 11740
                                                                                                                       // 11741
                                                                                                                       // 11742
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 11743
	renderDrag: function(dropLocation, seg) {                                                                             // 11744
		if (dropLocation.start.hasTime()) {                                                                                  // 11745
			return this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 11746
		}                                                                                                                    // 11747
		else if (this.dayGrid) {                                                                                             // 11748
			return this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 11749
		}                                                                                                                    // 11750
	},                                                                                                                    // 11751
                                                                                                                       // 11752
                                                                                                                       // 11753
	unrenderDrag: function() {                                                                                            // 11754
		this.timeGrid.unrenderDrag();                                                                                        // 11755
		if (this.dayGrid) {                                                                                                  // 11756
			this.dayGrid.unrenderDrag();                                                                                        // 11757
		}                                                                                                                    // 11758
	},                                                                                                                    // 11759
                                                                                                                       // 11760
                                                                                                                       // 11761
	/* Selection                                                                                                          // 11762
	------------------------------------------------------------------------------------------------------------------*/  // 11763
                                                                                                                       // 11764
                                                                                                                       // 11765
	// Renders a visual indication of a selection                                                                         // 11766
	renderSelection: function(span) {                                                                                     // 11767
		if (span.start.hasTime() || span.end.hasTime()) {                                                                    // 11768
			this.timeGrid.renderSelection(span);                                                                                // 11769
		}                                                                                                                    // 11770
		else if (this.dayGrid) {                                                                                             // 11771
			this.dayGrid.renderSelection(span);                                                                                 // 11772
		}                                                                                                                    // 11773
	},                                                                                                                    // 11774
                                                                                                                       // 11775
                                                                                                                       // 11776
	// Unrenders a visual indications of a selection                                                                      // 11777
	unrenderSelection: function() {                                                                                       // 11778
		this.timeGrid.unrenderSelection();                                                                                   // 11779
		if (this.dayGrid) {                                                                                                  // 11780
			this.dayGrid.unrenderSelection();                                                                                   // 11781
		}                                                                                                                    // 11782
	}                                                                                                                     // 11783
                                                                                                                       // 11784
});                                                                                                                    // 11785
                                                                                                                       // 11786
                                                                                                                       // 11787
// Methods that will customize the rendering behavior of the AgendaView's timeGrid                                     // 11788
// TODO: move into TimeGrid                                                                                            // 11789
var agendaTimeGridMethods = {                                                                                          // 11790
                                                                                                                       // 11791
                                                                                                                       // 11792
	// Generates the HTML that will go before the day-of week header cells                                                // 11793
	renderHeadIntroHtml: function() {                                                                                     // 11794
		var view = this.view;                                                                                                // 11795
		var weekText;                                                                                                        // 11796
                                                                                                                       // 11797
		if (view.opt('weekNumbers')) {                                                                                       // 11798
			weekText = this.start.format(view.opt('smallWeekFormat'));                                                          // 11799
                                                                                                                       // 11800
			return '' +                                                                                                         // 11801
				'<th class="fc-axis fc-week-number ' + view.widgetHeaderClass + '" ' + view.axisStyleAttr() + '>' +                // 11802
					'<span>' + // needed for matchCellWidths                                                                          // 11803
						htmlEscape(weekText) +                                                                                           // 11804
					'</span>' +                                                                                                       // 11805
				'</th>';                                                                                                           // 11806
		}                                                                                                                    // 11807
		else {                                                                                                               // 11808
			return '<th class="fc-axis ' + view.widgetHeaderClass + '" ' + view.axisStyleAttr() + '></th>';                     // 11809
		}                                                                                                                    // 11810
	},                                                                                                                    // 11811
                                                                                                                       // 11812
                                                                                                                       // 11813
	// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 11814
	renderBgIntroHtml: function() {                                                                                       // 11815
		var view = this.view;                                                                                                // 11816
                                                                                                                       // 11817
		return '<td class="fc-axis ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '></td>';                     // 11818
	},                                                                                                                    // 11819
                                                                                                                       // 11820
                                                                                                                       // 11821
	// Generates the HTML that goes before all other types of cells.                                                      // 11822
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 11823
	renderIntroHtml: function() {                                                                                         // 11824
		var view = this.view;                                                                                                // 11825
                                                                                                                       // 11826
		return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';                                                     // 11827
	}                                                                                                                     // 11828
                                                                                                                       // 11829
};                                                                                                                     // 11830
                                                                                                                       // 11831
                                                                                                                       // 11832
// Methods that will customize the rendering behavior of the AgendaView's dayGrid                                      // 11833
var agendaDayGridMethods = {                                                                                           // 11834
                                                                                                                       // 11835
                                                                                                                       // 11836
	// Generates the HTML that goes before the all-day cells                                                              // 11837
	renderBgIntroHtml: function() {                                                                                       // 11838
		var view = this.view;                                                                                                // 11839
                                                                                                                       // 11840
		return '' +                                                                                                          // 11841
			'<td class="fc-axis ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                               // 11842
				'<span>' + // needed for matchCellWidths                                                                           // 11843
					(view.opt('allDayHtml') || htmlEscape(view.opt('allDayText'))) +                                                  // 11844
				'</span>' +                                                                                                        // 11845
			'</td>';                                                                                                            // 11846
	},                                                                                                                    // 11847
                                                                                                                       // 11848
                                                                                                                       // 11849
	// Generates the HTML that goes before all other types of cells.                                                      // 11850
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 11851
	renderIntroHtml: function() {                                                                                         // 11852
		var view = this.view;                                                                                                // 11853
                                                                                                                       // 11854
		return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';                                                     // 11855
	}                                                                                                                     // 11856
                                                                                                                       // 11857
};                                                                                                                     // 11858
                                                                                                                       // 11859
;;                                                                                                                     // 11860
                                                                                                                       // 11861
var AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 11862
                                                                                                                       // 11863
// potential nice values for the slot-duration and interval-duration                                                   // 11864
// from largest to smallest                                                                                            // 11865
var AGENDA_STOCK_SUB_DURATIONS = [                                                                                     // 11866
	{ hours: 1 },                                                                                                         // 11867
	{ minutes: 30 },                                                                                                      // 11868
	{ minutes: 15 },                                                                                                      // 11869
	{ seconds: 30 },                                                                                                      // 11870
	{ seconds: 15 }                                                                                                       // 11871
];                                                                                                                     // 11872
                                                                                                                       // 11873
fcViews.agenda = {                                                                                                     // 11874
	'class': AgendaView,                                                                                                  // 11875
	defaults: {                                                                                                           // 11876
		allDaySlot: true,                                                                                                    // 11877
		allDayText: 'all-day',                                                                                               // 11878
		slotDuration: '00:30:00',                                                                                            // 11879
		minTime: '00:00:00',                                                                                                 // 11880
		maxTime: '24:00:00',                                                                                                 // 11881
		slotEventOverlap: true // a bad name. confused with overlap/constraint system                                        // 11882
	}                                                                                                                     // 11883
};                                                                                                                     // 11884
                                                                                                                       // 11885
fcViews.agendaDay = {                                                                                                  // 11886
	type: 'agenda',                                                                                                       // 11887
	duration: { days: 1 }                                                                                                 // 11888
};                                                                                                                     // 11889
                                                                                                                       // 11890
fcViews.agendaWeek = {                                                                                                 // 11891
	type: 'agenda',                                                                                                       // 11892
	duration: { weeks: 1 }                                                                                                // 11893
};                                                                                                                     // 11894
;;                                                                                                                     // 11895
                                                                                                                       // 11896
return FC; // export for Node/CommonJS                                                                                 // 11897
});                                                                                                                    // 11898
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/lang-all.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(a){"function"==typeof define&&define.amd?define(["jquery","moment"],a):"object"==typeof exports?module.exports=a(require("jquery"),require("moment")):a(jQuery,moment)}(function(a,b){!function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}});return a}(),a.fullCalendar.datepickerLang("ar-ma","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-ma",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},c={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},d=(b.defineLocale||b.lang).call(b,"ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return d}(),a.fullCalendar.datepickerLang("ar-sa","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-sa",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("ar-tn","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-tn",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},c={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},d=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},e={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},f=function(a){return function(b,c,f,g){var h=d(b),i=e[a][d(b)];return 2===h&&(i=i[c?0:1]),i.replace(/%d/i,b)}},g=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"],h=(b.defineLocale||b.lang).call(b,"ar",{months:g,monthsShort:g,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:f("s"),m:f("m"),mm:f("m"),h:f("h"),hh:f("h"),d:f("d"),dd:f("d"),M:f("M"),MM:f("M"),y:f("y"),yy:f("y")},preparse:function(a){return a.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return h}(),a.fullCalendar.datepickerLang("ar","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}});return a}(),a.fullCalendar.datepickerLang("bg","bg",{closeText:"затвори",prevText:"&#x3C;назад",nextText:"напред&#x3E;",nextBigText:"&#x3E;&#x3E;",currentText:"днес",monthNames:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Нов","Дек"],dayNames:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],dayNamesShort:["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Съ"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("bg",{buttonText:{month:"Месец",week:"Седмица",day:"Ден",list:"График"},allDayText:"Цял ден",eventLimitText:function(a){return"+още "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?"r":2===a?"n":3===a?"r":4===a?"t":"è";return("w"===b||"W"===b)&&(c="a"),a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("ca","ca",{closeText:"Tanca",prevText:"Anterior",nextText:"Següent",currentText:"Avui",monthNames:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],monthNamesShort:["gen","feb","març","abr","maig","juny","jul","ag","set","oct","nov","des"],dayNames:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],dayNamesShort:["dg","dl","dt","dc","dj","dv","ds"],dayNamesMin:["dg","dl","dt","dc","dj","dv","ds"],weekHeader:"Set",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ca",{buttonText:{month:"Mes",week:"Setmana",day:"Dia",list:"Agenda"},allDayText:"Tot el dia",eventLimitText:"més"})}(),function(){!function(){"use strict";function a(a){return a>1&&5>a&&1!==~~(a/10)}function c(b,c,d,e){var f=b+" ";switch(d){case"s":return c||e?"pár sekund":"pár sekundami";case"m":return c?"minuta":e?"minutu":"minutou";case"mm":return c||e?f+(a(b)?"minuty":"minut"):f+"minutami";case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(a(b)?"hodiny":"hodin"):f+"hodinami";case"d":return c||e?"den":"dnem";case"dd":return c||e?f+(a(b)?"dny":"dní"):f+"dny";case"M":return c||e?"měsíc":"měsícem";case"MM":return c||e?f+(a(b)?"měsíce":"měsíců"):f+"měsíci";case"y":return c||e?"rok":"rokem";case"yy":return c||e?f+(a(b)?"roky":"let"):f+"lety"}}var d="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),e="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),f=(b.defineLocale||b.lang).call(b,"cs",{months:d,monthsShort:e,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(d,e),shortMonthsParse:function(a){var b,c=[];for(b=0;12>b;b++)c[b]=new RegExp("^"+a[b]+"$","i");return c}(e),longMonthsParse:function(a){var b,c=[];for(b=0;12>b;b++)c[b]=new RegExp("^"+a[b]+"$","i");return c}(d),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("cs","cs",{closeText:"Zavřít",prevText:"&#x3C;Dříve",nextText:"Později&#x3E;",currentText:"Nyní",monthNames:["leden","únor","březen","duben","květen","červen","červenec","srpen","září","říjen","listopad","prosinec"],monthNamesShort:["led","úno","bře","dub","kvě","čer","čvc","srp","zář","říj","lis","pro"],dayNames:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],dayNamesShort:["ne","po","út","st","čt","pá","so"],dayNamesMin:["ne","po","út","st","čt","pá","so"],weekHeader:"Týd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("cs",{buttonText:{month:"Měsíc",week:"Týden",day:"Den",list:"Agenda"},allDayText:"Celý den",eventLimitText:function(a){return"+další: "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("da","da",{closeText:"Luk",prevText:"&#x3C;Forrige",nextText:"Næste&#x3E;",currentText:"Idag",monthNames:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"],dayNamesShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayNamesMin:["Sø","Ma","Ti","On","To","Fr","Lø"],weekHeader:"Uge",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("da",{buttonText:{month:"Måned",week:"Uge",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"flere"})}(),function(){!function(){"use strict";function a(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}var c=(b.defineLocale||b.lang).call(b,"de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:a,mm:"%d Minuten",h:a,hh:"%d Stunden",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return c}(),a.fullCalendar.datepickerLang("de-at","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de-at",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){!function(){"use strict";function a(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}var c=(b.defineLocale||b.lang).call(b,"de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:a,mm:"%d Minuten",h:a,hh:"%d Stunden",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return c}(),a.fullCalendar.datepickerLang("de","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){!function(){"use strict";function a(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}var c=(b.defineLocale||b.lang).call(b,"el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},isPM:function(a){return"μ"===(a+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(b,c){var d=this._calendarEl[b],e=c&&c.hours();return a(d)&&(d=d.apply(c)),d.replace("{}",e%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}});return c}(),a.fullCalendar.datepickerLang("el","el",{closeText:"Κλείσιμο",prevText:"Προηγούμενος",nextText:"Επόμενος",currentText:"Σήμερα",monthNames:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],monthNamesShort:["Ιαν","Φεβ","Μαρ","Απρ","Μαι","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dayNames:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],dayNamesShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayNamesMin:["Κυ","Δε","Τρ","Τε","Πε","Πα","Σα"],weekHeader:"Εβδ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("el",{buttonText:{month:"Μήνας",week:"Εβδομάδα",day:"Ημέρα",list:"Ατζέντα"},allDayText:"Ολοήμερο",eventLimitText:"περισσότερα"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sept_Oct_Nov_Dec".split("_"),monthsParse:[/^jan/i,/^feb/i,/^mar/i,/^apr/i,/^may/i,/^jun/i,/^jul/i,/^aug/i,/^sep/i,/^oct/i,/^nov/i,/^dec/i],longMonthsParse:[/^january$/i,/^february$/i,/^march$/i,/^april$/i,/^may$/i,/^june$/i,/^july$/i,/^august$/i,/^september$/i,/^october$/i,/^november$/i,/^december$/i],shortMonthsParse:[/^jan$/i,/^feb$/i,/^mar$/i,/^apr$/i,/^may$/i,/^jun$/i,/^jul$/i,/^aug/i,/^sept?$/i,/^oct$/i,/^nov$/i,/^dec$/i],weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("en-au","en-AU",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-au")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sept_Oct_Nov_Dec".split("_"),monthsParse:[/^jan/i,/^feb/i,/^mar/i,/^apr/i,/^may/i,/^jun/i,/^jul/i,/^aug/i,/^sep/i,/^oct/i,/^nov/i,/^dec/i],longMonthsParse:[/^january$/i,/^february$/i,/^march$/i,/^april$/i,/^may$/i,/^june$/i,/^july$/i,/^august$/i,/^september$/i,/^october$/i,/^november$/i,/^december$/i],shortMonthsParse:[/^jan$/i,/^feb$/i,/^mar$/i,/^apr$/i,/^may$/i,/^jun$/i,/^jul$/i,/^aug/i,/^sept?$/i,/^oct$/i,/^nov$/i,/^dec$/i],weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY h:mm A",LLLL:"dddd, D MMMM, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}});return a}(),a.fullCalendar.lang("en-ca")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sept_Oct_Nov_Dec".split("_"),monthsParse:[/^jan/i,/^feb/i,/^mar/i,/^apr/i,/^may/i,/^jun/i,/^jul/i,/^aug/i,/^sep/i,/^oct/i,/^nov/i,/^dec/i],longMonthsParse:[/^january$/i,/^february$/i,/^march$/i,/^april$/i,/^may$/i,/^june$/i,/^july$/i,/^august$/i,/^september$/i,/^october$/i,/^november$/i,/^december$/i],shortMonthsParse:[/^jan$/i,/^feb$/i,/^mar$/i,/^apr$/i,/^may$/i,/^jun$/i,/^jul$/i,/^aug/i,/^sept?$/i,/^oct$/i,/^nov$/i,/^dec$/i],weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("en-gb","en-GB",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-gb")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsParse:[/^jan/i,/^feb/i,/^mar/i,/^apr/i,/^may/i,/^jun/i,/^jul/i,/^aug/i,/^sep/i,/^oct/i,/^nov/i,/^dec/i],longMonthsParse:[/^january$/i,/^february$/i,/^march$/i,/^april$/i,/^may$/i,/^june$/i,/^july$/i,/^august$/i,/^september$/i,/^october$/i,/^november$/i,/^december$/i],shortMonthsParse:[/^jan$/i,/^feb$/i,/^mar$/i,/^apr$/i,/^may$/i,/^jun$/i,/^jul$/i,/^aug/i,/^sept?$/i,/^oct$/i,/^nov$/i,/^dec$/i],weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.lang("en-ie")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sept_Oct_Nov_Dec".split("_"),monthsParse:[/^jan/i,/^feb/i,/^mar/i,/^apr/i,/^may/i,/^jun/i,/^jul/i,/^aug/i,/^sep/i,/^oct/i,/^nov/i,/^dec/i],
longMonthsParse:[/^january$/i,/^february$/i,/^march$/i,/^april$/i,/^may$/i,/^june$/i,/^july$/i,/^august$/i,/^september$/i,/^october$/i,/^november$/i,/^december$/i],shortMonthsParse:[/^jan$/i,/^feb$/i,/^mar$/i,/^apr$/i,/^may$/i,/^jun$/i,/^jul$/i,/^aug/i,/^sept?$/i,/^oct$/i,/^nov$/i,/^dec$/i],weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("en-nz","en-NZ",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-nz")}(),function(){!function(){"use strict";var a="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),c="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),d=(b.defineLocale||b.lang).call(b,"es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(b,d){return/-MMM-/.test(d)?c[b.month()]:a[b.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return d}(),a.fullCalendar.datepickerLang("es","es",{closeText:"Cerrar",prevText:"&#x3C;Ant",nextText:"Sig&#x3E;",currentText:"Hoy",monthNames:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],monthNamesShort:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],dayNames:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],dayNamesShort:["dom","lun","mar","mié","jue","vie","sáb"],dayNamesMin:["D","L","M","X","J","V","S"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("es",{buttonText:{month:"Mes",week:"Semana",day:"Día",list:"Agenda"},allDayHtml:"Todo<br/>el día",eventLimitText:"más"})}(),function(){!function(){"use strict";var a={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},c={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"},d=(b.defineLocale||b.lang).call(b,"fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return 12>a?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}});return d}(),a.fullCalendar.datepickerLang("fa","fa",{closeText:"بستن",prevText:"&#x3C;قبلی",nextText:"بعدی&#x3E;",currentText:"امروز",monthNames:["ژانویه","فوریه","مارس","آوریل","مه","ژوئن","ژوئیه","اوت","سپتامبر","اکتبر","نوامبر","دسامبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["يکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayNamesShort:["ی","د","س","چ","پ","ج","ش"],dayNamesMin:["ی","د","س","چ","پ","ج","ش"],weekHeader:"هف",dateFormat:"yy/mm/dd",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fa",{buttonText:{month:"ماه",week:"هفته",day:"روز",list:"برنامه"},allDayText:"تمام روز",eventLimitText:function(a){return"بیش از "+a}})}(),function(){!function(){"use strict";function a(a,b,d,e){var f="";switch(d){case"s":return e?"muutaman sekunnin":"muutama sekunti";case"m":return e?"minuutin":"minuutti";case"mm":f=e?"minuutin":"minuuttia";break;case"h":return e?"tunnin":"tunti";case"hh":f=e?"tunnin":"tuntia";break;case"d":return e?"päivän":"päivä";case"dd":f=e?"päivän":"päivää";break;case"M":return e?"kuukauden":"kuukausi";case"MM":f=e?"kuukauden":"kuukautta";break;case"y":return e?"vuoden":"vuosi";case"yy":f=e?"vuoden":"vuotta"}return f=c(a,e)+" "+f}function c(a,b){return 10>a?b?e[a]:d[a]:a}var d="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),e=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",d[7],d[8],d[9]],f=(b.defineLocale||b.lang).call(b,"fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("fi","fi",{closeText:"Sulje",prevText:"&#xAB;Edellinen",nextText:"Seuraava&#xBB;",currentText:"Tänään",monthNames:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],monthNamesShort:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"],dayNamesShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayNames:["Sunnuntai","Maanantai","Tiistai","Keskiviikko","Torstai","Perjantai","Lauantai"],dayNamesMin:["Su","Ma","Ti","Ke","To","Pe","La"],weekHeader:"Vk",dateFormat:"d.m.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fi",{buttonText:{month:"Kuukausi",week:"Viikko",day:"Päivä",list:"Tapahtumat"},allDayText:"Koko päivä",eventLimitText:"lisää"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(a){return a+(1===a?"er":"e")}});return a}(),a.fullCalendar.datepickerLang("fr-ca","fr-CA",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr-ca",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(a){return a+(1===a?"er":"e")},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("fr-ch","fr-CH",{closeText:"Fermer",prevText:"&#x3C;Préc",nextText:"Suiv&#x3E;",currentText:"Courant",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sm",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr-ch",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("fr","fr",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a%10===0&&10!==a?a+" שנה":a+" שנים"}}});return a}(),a.fullCalendar.datepickerLang("he","he",{closeText:"סגור",prevText:"&#x3C;הקודם",nextText:"הבא&#x3E;",currentText:"היום",monthNames:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],monthNamesShort:["ינו","פבר","מרץ","אפר","מאי","יוני","יולי","אוג","ספט","אוק","נוב","דצמ"],dayNames:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],dayNamesShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayNamesMin:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("he",{defaultButtonText:{month:"חודש",week:"שבוע",day:"יום",list:"סדר יום"},weekNumberTitle:"שבוע",allDayText:"כל היום",eventLimitText:"אחר"})}(),function(){!function(){"use strict";var a={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},d=(b.defineLocale||b.lang).call(b,"hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात"===b?4>a?a:a+12:"सुबह"===b?a:"दोपहर"===b?a>=10?a:a+12:"शाम"===b?a+12:void 0},meridiem:function(a,b,c){return 4>a?"रात":10>a?"सुबह":17>a?"दोपहर":20>a?"शाम":"रात"},week:{dow:0,doy:6}});return d}(),a.fullCalendar.datepickerLang("hi","hi",{closeText:"बंद",prevText:"पिछला",nextText:"अगला",currentText:"आज",monthNames:["जनवरी ","फरवरी","मार्च","अप्रेल","मई","जून","जूलाई","अगस्त ","सितम्बर","अक्टूबर","नवम्बर","दिसम्बर"],monthNamesShort:["जन","फर","मार्च","अप्रेल","मई","जून","जूलाई","अग","सित","अक्ट","नव","दि"],dayNames:["रविवार","सोमवार","मंगलवार","बुधवार","गुरुवार","शुक्रवार","शनिवार"],dayNamesShort:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],dayNamesMin:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],weekHeader:"हफ्ता",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hi",{buttonText:{month:"महीना",week:"सप्ताह",day:"दिन",list:"कार्यसूची"},allDayText:"सभी दिन",eventLimitText:function(a){return"+अधिक "+a}})}(),function(){!function(){"use strict";function a(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}var c=(b.defineLocale||b.lang).call(b,"hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:a,mm:a,h:a,hh:a,d:"dan",dd:a,M:"mjesec",MM:a,y:"godinu",yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("hr","hr",{closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],monthNamesShort:["Sij","Velj","Ožu","Tra","Svi","Lip","Srp","Kol","Ruj","Lis","Stu","Pro"],dayNames:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Tje",dateFormat:"dd.mm.yy.",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hr",{buttonText:{month:"Mjesec",week:"Tjedan",day:"Dan",list:"Raspored"},allDayText:"Cijeli dan",eventLimitText:function(a){return"+ još "+a}})}(),function(){!function(){"use strict";function a(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function c(a){return(a?"":"[múlt] ")+"["+d[this.day()]+"] LT[-kor]"}var d="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "),e=(b.defineLocale||b.lang).call(b,"hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(a){return"u"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?"de":"DE":c===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return c.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return c.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return e}(),a.fullCalendar.datepickerLang("hu","hu",{closeText:"bezár",prevText:"vissza",nextText:"előre",currentText:"ma",monthNames:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],monthNamesShort:["Jan","Feb","Már","Ápr","Máj","Jún","Júl","Aug","Szep","Okt","Nov","Dec"],dayNames:["Vasárnap","Hétfő","Kedd","Szerda","Csütörtök","Péntek","Szombat"],dayNamesShort:["Vas","Hét","Ked","Sze","Csü","Pén","Szo"],dayNamesMin:["V","H","K","Sze","Cs","P","Szo"],weekHeader:"Hét",dateFormat:"yy.mm.dd.",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("hu",{buttonText:{month:"Hónap",week:"Hét",day:"Nap",list:"Napló"},allDayText:"Egész nap",eventLimitText:"további"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"siang"===b?a>=11?a:a+12:"sore"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return 11>a?"pagi":15>a?"siang":19>a?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return a}(),a.fullCalendar.datepickerLang("id","id",{closeText:"Tutup",prevText:"&#x3C;mundur",nextText:"maju&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","Nopember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agus","Sep","Okt","Nop","Des"],dayNames:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],dayNamesShort:["Min","Sen","Sel","Rab","kam","Jum","Sab"],dayNamesMin:["Mg","Sn","Sl","Rb","Km","jm","Sb"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("id",{buttonText:{month:"Bulan",week:"Minggu",day:"Hari",list:"Agenda"},allDayHtml:"Sehari<br/>penuh",eventLimitText:"lebih"})}(),function(){!function(){"use strict";function a(a){return a%100===11?!0:a%10===1?!1:!0}function c(b,c,d,e){var f=b+" ";switch(d){case"s":return c||e?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return c?"mínúta":"mínútu";case"mm":return a(b)?f+(c||e?"mínútur":"mínútum"):c?f+"mínúta":f+"mínútu";case"hh":return a(b)?f+(c||e?"klukkustundir":"klukkustundum"):f+"klukkustund";case"d":return c?"dagur":e?"dag":"degi";case"dd":return a(b)?c?f+"dagar":f+(e?"daga":"dögum"):c?f+"dagur":f+(e?"dag":"degi");case"M":return c?"mánuður":e?"mánuð":"mánuði";case"MM":return a(b)?c?f+"mánuðir":f+(e?"mánuði":"mánuðum"):c?f+"mánuður":f+(e?"mánuð":"mánuði");case"y":return c||e?"ár":"ári";case"yy":return a(b)?f+(c||e?"ár":"árum"):f+(c||e?"ár":"ári")}}var d=(b.defineLocale||b.lang).call(b,"is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:c,m:c,mm:c,h:"klukkustund",hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return d}(),a.fullCalendar.datepickerLang("is","is",{closeText:"Loka",prevText:"&#x3C; Fyrri",nextText:"Næsti &#x3E;",currentText:"Í dag",monthNames:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Maí","Jún","Júl","Ágú","Sep","Okt","Nóv","Des"],dayNames:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"],dayNamesShort:["Sun","Mán","Þri","Mið","Fim","Fös","Lau"],dayNamesMin:["Su","Má","Þr","Mi","Fi","Fö","La"],weekHeader:"Vika",dateFormat:"dd.mm.yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("is",{buttonText:{month:"Mánuður",week:"Vika",day:"Dagur",list:"Dagskrá"},allDayHtml:"Allan<br/>daginn",eventLimitText:"meira"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("it","it",{closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("it",{buttonText:{month:"Mese",week:"Settimana",day:"Giorno",list:"Agenda"},allDayHtml:"Tutto il<br/>giorno",eventLimitText:function(a){return"+altri "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(a){return"午後"===a},meridiem:function(a,b,c){return 12>a?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}});return a}(),a.fullCalendar.datepickerLang("ja","ja",{closeText:"閉じる",prevText:"&#x3C;前",nextText:"次&#x3E;",currentText:"今日",monthNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthNamesShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayNames:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],dayNamesShort:["日","月","火","水","木","金","土"],dayNamesMin:["日","月","火","水","木","金","土"],weekHeader:"週",dateFormat:"yy/mm/dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("ja",{buttonText:{month:"月",week:"週",day:"日",list:"予定リスト"},allDayText:"終日",eventLimitText:function(a){return"他 "+a+" 件"}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",
sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(a){return"오후"===a},meridiem:function(a,b,c){return 12>a?"오전":"오후"}});return a}(),a.fullCalendar.datepickerLang("ko","ko",{closeText:"닫기",prevText:"이전달",nextText:"다음달",currentText:"오늘",monthNames:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],monthNamesShort:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayNames:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],dayNamesShort:["일","월","화","수","목","금","토"],dayNamesMin:["일","월","화","수","목","금","토"],weekHeader:"Wk",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"년"}),a.fullCalendar.lang("ko",{buttonText:{month:"월",week:"주",day:"일",list:"일정목록"},allDayText:"종일",eventLimitText:"개"})}(),function(){!function(){"use strict";function a(a,b,c,d){return b?"kelios sekundės":d?"kelių sekundžių":"kelias sekundes"}function c(a,b,c,d){return b?e(c)[0]:d?e(c)[1]:e(c)[2]}function d(a){return a%10===0||a>10&&20>a}function e(a){return g[a].split("_")}function f(a,b,f,g){var h=a+" ";return 1===a?h+c(a,b,f[0],g):b?h+(d(a)?e(f)[1]:e(f)[0]):g?h+e(f)[1]:h+(d(a)?e(f)[1]:e(f)[2])}var g={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},h=(b.defineLocale||b.lang).call(b,"lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_")},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:a,m:c,mm:f,h:c,hh:f,d:c,dd:f,M:c,MM:f,y:c,yy:f},ordinalParse:/\d{1,2}-oji/,ordinal:function(a){return a+"-oji"},week:{dow:1,doy:4}});return h}(),a.fullCalendar.datepickerLang("lt","lt",{closeText:"Uždaryti",prevText:"&#x3C;Atgal",nextText:"Pirmyn&#x3E;",currentText:"Šiandien",monthNames:["Sausis","Vasaris","Kovas","Balandis","Gegužė","Birželis","Liepa","Rugpjūtis","Rugsėjis","Spalis","Lapkritis","Gruodis"],monthNamesShort:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rugp","Rugs","Spa","Lap","Gru"],dayNames:["sekmadienis","pirmadienis","antradienis","trečiadienis","ketvirtadienis","penktadienis","šeštadienis"],dayNamesShort:["sek","pir","ant","tre","ket","pen","šeš"],dayNamesMin:["Se","Pr","An","Tr","Ke","Pe","Še"],weekHeader:"SAV",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("lt",{buttonText:{month:"Mėnuo",week:"Savaitė",day:"Diena",list:"Darbotvarkė"},allDayText:"Visą dieną",eventLimitText:"daugiau"})}(),function(){!function(){"use strict";function a(a,b,c){return c?b%10===1&&11!==b?a[2]:a[3]:b%10===1&&11!==b?a[0]:a[1]}function c(b,c,d){return b+" "+a(f[d],b,c)}function d(b,c,d){return a(f[d],b,c)}function e(a,b){return b?"dažas sekundes":"dažām sekundēm"}var f={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")},g=(b.defineLocale||b.lang).call(b,"lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:e,m:d,mm:c,h:d,hh:c,d:d,dd:c,M:d,MM:c,y:d,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return g}(),a.fullCalendar.datepickerLang("lv","lv",{closeText:"Aizvērt",prevText:"Iepr.",nextText:"Nāk.",currentText:"Šodien",monthNames:["Janvāris","Februāris","Marts","Aprīlis","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],monthNamesShort:["Jan","Feb","Mar","Apr","Mai","Jūn","Jūl","Aug","Sep","Okt","Nov","Dec"],dayNames:["svētdiena","pirmdiena","otrdiena","trešdiena","ceturtdiena","piektdiena","sestdiena"],dayNamesShort:["svt","prm","otr","tre","ctr","pkt","sst"],dayNamesMin:["Sv","Pr","Ot","Tr","Ct","Pk","Ss"],weekHeader:"Ned.",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("lv",{buttonText:{month:"Mēnesis",week:"Nedēļa",day:"Diena",list:"Dienas kārtība"},allDayText:"Visu dienu",eventLimitText:function(a){return"+vēl "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("nb","nb",{closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nb",{buttonText:{month:"Måned",week:"Uke",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"til"})}(),function(){!function(){"use strict";var a="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),c="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),d=(b.defineLocale||b.lang).call(b,"nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(b,d){return/-MMM-/.test(d)?c[b.month()]:a[b.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}});return d}(),a.fullCalendar.datepickerLang("nl","nl",{closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nl",{buttonText:{month:"Maand",week:"Week",day:"Dag",list:"Agenda"},allDayText:"Hele dag",eventLimitText:"extra"})}(),function(){!function(){"use strict";function a(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function c(b,c,d){var e=b+" ";switch(d){case"m":return c?"minuta":"minutę";case"mm":return e+(a(b)?"minuty":"minut");case"h":return c?"godzina":"godzinę";case"hh":return e+(a(b)?"godziny":"godzin");case"MM":return e+(a(b)?"miesiące":"miesięcy");case"yy":return e+(a(b)?"lata":"lat")}}var d="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),e="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),f=(b.defineLocale||b.lang).call(b,"pl",{months:function(a,b){return""===b?"("+e[a.month()]+"|"+d[a.month()]+")":/D MMMM/.test(b)?e[a.month()]:d[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:c,mm:c,h:c,hh:c,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:c,y:"rok",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("pl","pl",{closeText:"Zamknij",prevText:"&#x3C;Poprzedni",nextText:"Następny&#x3E;",currentText:"Dziś",monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lu","Mar","Kw","Maj","Cze","Lip","Sie","Wrz","Pa","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Nie","Pn","Wt","Śr","Czw","Pt","So"],dayNamesMin:["N","Pn","Wt","Śr","Cz","Pt","So"],weekHeader:"Tydz",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pl",{buttonText:{month:"Miesiąc",week:"Tydzień",day:"Dzień",list:"Plan dnia"},allDayText:"Cały dzień",eventLimitText:"więcej"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"});return a}(),a.fullCalendar.datepickerLang("pt-br","pt-BR",{closeText:"Fechar",prevText:"&#x3C;Anterior",nextText:"Próximo&#x3E;",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt-br",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Compromissos"},allDayText:"dia inteiro",eventLimitText:function(a){return"mais +"+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("pt","pt",{closeText:"Fechar",prevText:"Anterior",nextText:"Seguinte",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sem",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Agenda"},allDayText:"Todo o dia",eventLimitText:"mais"})}(),function(){!function(){"use strict";function a(a,b,c){var d={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},e=" ";return(a%100>=20||a>=100&&a%100===0)&&(e=" de "),a+e+d[c]}var c=(b.defineLocale||b.lang).call(b,"ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:a,h:"o oră",hh:a,d:"o zi",dd:a,M:"o lună",MM:a,y:"un an",yy:a},week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("ro","ro",{closeText:"Închide",prevText:"&#xAB; Luna precedentă",nextText:"Luna următoare &#xBB;",currentText:"Azi",monthNames:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],monthNamesShort:["Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"],dayNamesShort:["Dum","Lun","Mar","Mie","Joi","Vin","Sâm"],dayNamesMin:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],weekHeader:"Săpt",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ro",{buttonText:{prev:"precedentă",next:"următoare",month:"Lună",week:"Săptămână",day:"Zi",list:"Agendă"},allDayText:"Toată ziua",eventLimitText:function(a){return"+alte "+a}})}(),function(){!function(){"use strict";function a(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(b,c,d){var e={mm:c?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===d?c?"минута":"минуту":b+" "+a(e[d],+b)}var d=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],e=(b.defineLocale||b.lang).call(b,"ru",{months:{format:"Января_Февраля_Марта_Апреля_Мая_Июня_Июля_Августа_Сентября_Октября_Ноября_Декабря".split("_"),standalone:"Январь_Февраль_Март_Апрель_Май_Июнь_Июль_Август_Сентябрь_Октябрь_Ноябрь_Декабрь".split("_")},monthsShort:{format:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_"),standalone:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_")},weekdays:{standalone:"Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота".split("_"),format:"Воскресенье_Понедельник_Вторник_Среду_Четверг_Пятницу_Субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"Вс_Пн_Вт_Ср_Чт_Пт_Сб".split("_"),weekdaysMin:"Вс_Пн_Вт_Ср_Чт_Пт_Сб".split("_"),monthsParse:d,longMonthsParse:d,shortMonthsParse:d,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:c,mm:c,h:"час",hh:c,d:"день",dd:c,M:"месяц",MM:c,y:"год",yy:c},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночи":12>a?"утра":17>a?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,doy:7}});return e}(),a.fullCalendar.datepickerLang("ru","ru",{closeText:"Закрыть",prevText:"&#x3C;Пред",nextText:"След&#x3E;",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ru",{buttonText:{month:"Месяц",week:"Неделя",day:"День",list:"Повестка дня"},allDayText:"Весь день",eventLimitText:function(a){return"+ ещё "+a}})}(),function(){!function(){"use strict";function a(a){return a>1&&5>a}function c(b,c,d,e){var f=b+" ";switch(d){case"s":return c||e?"pár sekúnd":"pár sekundami";case"m":return c?"minúta":e?"minútu":"minútou";case"mm":return c||e?f+(a(b)?"minúty":"minút"):f+"minútami";case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(a(b)?"hodiny":"hodín"):f+"hodinami";case"d":return c||e?"deň":"dňom";case"dd":return c||e?f+(a(b)?"dni":"dní"):f+"dňami";case"M":return c||e?"mesiac":"mesiacom";case"MM":return c||e?f+(a(b)?"mesiace":"mesiacov"):f+"mesiacmi";case"y":return c||e?"rok":"rokom";case"yy":return c||e?f+(a(b)?"roky":"rokov"):f+"rokmi"}}var d="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),e="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),f=(b.defineLocale||b.lang).call(b,"sk",{months:d,monthsShort:e,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("sk","sk",{closeText:"Zavrieť",prevText:"&#x3C;Predchádzajúci",nextText:"Nasledujúci&#x3E;",currentText:"Dnes",monthNames:["január","február","marec","apríl","máj","jún","júl","august","september","október","november","december"],monthNamesShort:["Jan","Feb","Mar","Apr","Máj","Jún","Júl","Aug","Sep","Okt","Nov","Dec"],dayNames:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],dayNamesShort:["Ned","Pon","Uto","Str","Štv","Pia","Sob"],dayNamesMin:["Ne","Po","Ut","St","Št","Pia","So"],weekHeader:"Ty",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sk",{buttonText:{month:"Mesiac",week:"Týždeň",day:"Deň",list:"Rozvrh"},allDayText:"Celý deň",eventLimitText:function(a){return"+ďalšie: "+a}})}(),function(){!function(){"use strict";function a(a,b,c,d){var e=a+" ";switch(c){case"s":return b||d?"nekaj sekund":"nekaj sekundami";case"m":return b?"ena minuta":"eno minuto";case"mm":return e+=1===a?b?"minuta":"minuto":2===a?b||d?"minuti":"minutama":5>a?b||d?"minute":"minutami":b||d?"minut":"minutami";case"h":return b?"ena ura":"eno uro";case"hh":return e+=1===a?b?"ura":"uro":2===a?b||d?"uri":"urama":5>a?b||d?"ure":"urami":b||d?"ur":"urami";case"d":return b||d?"en dan":"enim dnem";case"dd":return e+=1===a?b||d?"dan":"dnem":2===a?b||d?"dni":"dnevoma":b||d?"dni":"dnevi";case"M":return b||d?"en mesec":"enim mesecem";case"MM":return e+=1===a?b||d?"mesec":"mesecem":2===a?b||d?"meseca":"mesecema":5>a?b||d?"mesece":"meseci":b||d?"mesecev":"meseci";case"y":return b||d?"eno leto":"enim letom";case"yy":return e+=1===a?b||d?"leto":"letom":2===a?b||d?"leti":"letoma":5>a?b||d?"leta":"leti":b||d?"let":"leti"}}var c=(b.defineLocale||b.lang).call(b,"sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("sl","sl",{closeText:"Zapri",prevText:"&#x3C;Prejšnji",nextText:"Naslednji&#x3E;",currentText:"Trenutni",monthNames:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"],dayNamesShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayNamesMin:["Ne","Po","To","Sr","Če","Pe","So"],weekHeader:"Teden",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sl",{buttonText:{month:"Mesec",week:"Teden",day:"Dan",list:"Dnevni red"},allDayText:"Ves dan",eventLimitText:"več"})}(),function(){!function(){"use strict";var a={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(b,c,d){var e=a.words[d];return 1===d.length?c?e[0]:e[1]:b+" "+a.correctGrammaticalCase(b,e)}},c=(b.defineLocale||b.lang).call(b,"sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var a=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:"дан",dd:a.translate,M:"месец",MM:a.translate,y:"годину",yy:a.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("sr-cyrl","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr-cyrl",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){!function(){"use strict";var a={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(b,c,d){var e=a.words[d];return 1===d.length?c?e[0]:e[1]:b+" "+a.correctGrammaticalCase(b,e)}},c=(b.defineLocale||b.lang).call(b,"sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:"dan",dd:a.translate,M:"mesec",MM:a.translate,y:"godinu",yy:a.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("sr","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],
dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":"e";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("sv","sv",{closeText:"Stäng",prevText:"&#xAB;Förra",nextText:"Nästa&#xBB;",currentText:"Idag",monthNames:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNamesShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayNames:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],dayNamesMin:["Sö","Må","Ti","On","To","Fr","Lö"],weekHeader:"Ve",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sv",{buttonText:{month:"Månad",week:"Vecka",day:"Dag",list:"Program"},allDayText:"Heldag",eventLimitText:"till"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"H นาฬิกา m นาที s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H นาฬิกา m นาที",LLLL:"วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return"หลังเที่ยง"===a},meridiem:function(a,b,c){return 12>a?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}});return a}(),a.fullCalendar.datepickerLang("th","th",{closeText:"ปิด",prevText:"&#xAB;&#xA0;ย้อน",nextText:"ถัดไป&#xA0;&#xBB;",currentText:"วันนี้",monthNames:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthNamesShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dayNames:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],dayNamesShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayNamesMin:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("th",{buttonText:{month:"เดือน",week:"สัปดาห์",day:"วัน",list:"แผนงาน"},allDayText:"ตลอดวัน",eventLimitText:"เพิ่มเติม"})}(),function(){!function(){"use strict";var a={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"},c=(b.defineLocale||b.lang).call(b,"tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(b){if(0===b)return b+"'ıncı";var c=b%10,d=b%100-c,e=b>=100?100:null;return b+(a[c]||a[d]||a[e])},week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("tr","tr",{closeText:"kapat",prevText:"&#x3C;geri",nextText:"ileri&#x3e",currentText:"bugün",monthNames:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthNamesShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dayNames:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],dayNamesShort:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],dayNamesMin:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("tr",{buttonText:{next:"ileri",month:"Ay",week:"Hafta",day:"Gün",list:"Ajanda"},allDayText:"Tüm gün",eventLimitText:"daha fazla"})}(),function(){!function(){"use strict";function a(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(b,c,d){var e={mm:c?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:c?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===d?c?"хвилина":"хвилину":"h"===d?c?"година":"годину":b+" "+a(e[d],+b)}function d(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function e(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}var f=(b.defineLocale||b.lang).call(b,"uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:d,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:e("[Сьогодні "),nextDay:e("[Завтра "),lastDay:e("[Вчора "),nextWeek:e("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return e("[Минулої] dddd [").call(this);case 1:case 2:case 4:return e("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:c,mm:c,h:"годину",hh:c,d:"день",dd:c,M:"місяць",MM:c,y:"рік",yy:c},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночі":12>a?"ранку":17>a?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,doy:7}});return f}(),a.fullCalendar.datepickerLang("uk","uk",{closeText:"Закрити",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Сьогодні",monthNames:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthNamesShort:["Січ","Лют","Бер","Кві","Тра","Чер","Лип","Сер","Вер","Жов","Лис","Гру"],dayNames:["неділя","понеділок","вівторок","середа","четвер","п’ятниця","субота"],dayNamesShort:["нед","пнд","вів","срд","чтв","птн","сбт"],dayNamesMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Тиж",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("uk",{buttonText:{month:"Місяць",week:"Тиждень",day:"День",list:"Порядок денний"},allDayText:"Увесь день",eventLimitText:function(a){return"+ще "+a+"..."}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("vi","vi",{closeText:"Đóng",prevText:"&#x3C;Trước",nextText:"Tiếp&#x3E;",currentText:"Hôm nay",monthNames:["Tháng Một","Tháng Hai","Tháng Ba","Tháng Tư","Tháng Năm","Tháng Sáu","Tháng Bảy","Tháng Tám","Tháng Chín","Tháng Mười","Tháng Mười Một","Tháng Mười Hai"],monthNamesShort:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayNames:["Chủ Nhật","Thứ Hai","Thứ Ba","Thứ Tư","Thứ Năm","Thứ Sáu","Thứ Bảy"],dayNamesShort:["CN","T2","T3","T4","T5","T6","T7"],dayNamesMin:["CN","T2","T3","T4","T5","T6","T7"],weekHeader:"Tu",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("vi",{buttonText:{month:"Tháng",week:"Tuần",day:"Ngày",list:"Lịch biểu"},allDayText:"Cả ngày",eventLimitText:function(a){return"+ thêm "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"下午"===b||"晚上"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return 600>d?"凌晨":900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()-a.unix()>=604800?"[下]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},lastWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()<a.unix()?"[上]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("zh-cn","zh-CN",{closeText:"关闭",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-cn",{buttonText:{month:"月",week:"周",day:"日",list:"日程"},allDayText:"全天",eventLimitText:function(a){return"另外 "+a+" 个"}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return 900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}});return a}(),a.fullCalendar.datepickerLang("zh-tw","zh-TW",{closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy/mm/dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-tw",{buttonText:{month:"月",week:"週",day:"天",list:"待辦事項"},allDayText:"全天",eventLimitText:"更多"})}(),(b.locale||b.lang).call(b,"en"),a.fullCalendar.lang("en"),a.datepicker&&a.datepicker.setDefaults(a.datepicker.regional[""])});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/gcal.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.6.1 Google Calendar Plugin                                                                          // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery' ], factory);                                                                                       // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'));                                                                         // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function($) {                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
var API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20
var FC = $.fullCalendar;                                                                                               // 21
var applyAll = FC.applyAll;                                                                                            // 22
                                                                                                                       // 23
                                                                                                                       // 24
FC.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25
	var googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26
	var url = sourceOptions.url;                                                                                          // 27
	var match;                                                                                                            // 28
                                                                                                                       // 29
	// if the Google Calendar ID hasn't been explicitly defined                                                           // 30
	if (!googleCalendarId && url) {                                                                                       // 31
                                                                                                                       // 32
		// detect if the ID was specified as a single string.                                                                // 33
		// will match calendars like "asdf1234@calendar.google.com" in addition to person email calendars.                   // 34
		if (/^[^\/]+@([^\/\.]+\.)*(google|googlemail|gmail)\.com$/.test(url)) {                                              // 35
			googleCalendarId = url;                                                                                             // 36
		}                                                                                                                    // 37
		// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38
		else if (                                                                                                            // 39
			(match = /^https:\/\/www.googleapis.com\/calendar\/v3\/calendars\/([^\/]*)/.exec(url)) ||                           // 40
			(match = /^https?:\/\/www.google.com\/calendar\/feeds\/([^\/]*)/.exec(url))                                         // 41
		) {                                                                                                                  // 42
			googleCalendarId = decodeURIComponent(match[1]);                                                                    // 43
		}                                                                                                                    // 44
                                                                                                                       // 45
		if (googleCalendarId) {                                                                                              // 46
			sourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47
		}                                                                                                                    // 48
	}                                                                                                                     // 49
                                                                                                                       // 50
                                                                                                                       // 51
	if (googleCalendarId) { // is this a Google Calendar?                                                                 // 52
                                                                                                                       // 53
		// make each Google Calendar source uneditable by default                                                            // 54
		if (sourceOptions.editable == null) {                                                                                // 55
			sourceOptions.editable = false;                                                                                     // 56
		}                                                                                                                    // 57
                                                                                                                       // 58
		// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59
		// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60
		// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61
		sourceOptions.url = googleCalendarId;                                                                                // 62
	}                                                                                                                     // 63
});                                                                                                                    // 64
                                                                                                                       // 65
                                                                                                                       // 66
FC.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67
	if (sourceOptions.googleCalendarId) {                                                                                 // 68
		return transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69
	}                                                                                                                     // 70
});                                                                                                                    // 71
                                                                                                                       // 72
                                                                                                                       // 73
function transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74
	var url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75
	var apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76
	var success = sourceOptions.success;                                                                                  // 77
	var data;                                                                                                             // 78
	var timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79
                                                                                                                       // 80
	function reportError(message, apiErrorObjs) {                                                                         // 81
		var errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82
                                                                                                                       // 83
		// call error handlers                                                                                               // 84
		(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 85
		(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 86
                                                                                                                       // 87
		// print error to debug console                                                                                      // 88
		FC.warn.apply(null, [ message ].concat(apiErrorObjs || []));                                                         // 89
	}                                                                                                                     // 90
                                                                                                                       // 91
	if (!apiKey) {                                                                                                        // 92
		reportError("Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/");                     // 93
		return {}; // an empty source to use instead. won't fetch anything.                                                  // 94
	}                                                                                                                     // 95
                                                                                                                       // 96
	// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 97
	// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 98
	// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 99
	// .utc() will set a zone and give it a 00:00:00 time.                                                                // 100
	if (!start.hasZone()) {                                                                                               // 101
		start = start.clone().utc().add(-1, 'day');                                                                          // 102
	}                                                                                                                     // 103
	if (!end.hasZone()) {                                                                                                 // 104
		end = end.clone().utc().add(1, 'day');                                                                               // 105
	}                                                                                                                     // 106
                                                                                                                       // 107
	// when sending timezone names to Google, only accepts underscores, not spaces                                        // 108
	if (timezone && timezone != 'local') {                                                                                // 109
		timezoneArg = timezone.replace(' ', '_');                                                                            // 110
	}                                                                                                                     // 111
                                                                                                                       // 112
	data = $.extend({}, sourceOptions.data || {}, {                                                                       // 113
		key: apiKey,                                                                                                         // 114
		timeMin: start.format(),                                                                                             // 115
		timeMax: end.format(),                                                                                               // 116
		timeZone: timezoneArg,                                                                                               // 117
		singleEvents: true,                                                                                                  // 118
		maxResults: 9999                                                                                                     // 119
	});                                                                                                                   // 120
                                                                                                                       // 121
	return $.extend({}, sourceOptions, {                                                                                  // 122
		googleCalendarId: null, // prevents source-normalizing from happening again                                          // 123
		url: url,                                                                                                            // 124
		data: data,                                                                                                          // 125
		startParam: false, // `false` omits this parameter. we already included it above                                     // 126
		endParam: false, // same                                                                                             // 127
		timezoneParam: false, // same                                                                                        // 128
		success: function(data) {                                                                                            // 129
			var events = [];                                                                                                    // 130
			var successArgs;                                                                                                    // 131
			var successRes;                                                                                                     // 132
                                                                                                                       // 133
			if (data.error) {                                                                                                   // 134
				reportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 135
			}                                                                                                                   // 136
			else if (data.items) {                                                                                              // 137
				$.each(data.items, function(i, entry) {                                                                            // 138
					var url = entry.htmlLink;                                                                                         // 139
                                                                                                                       // 140
					// make the URLs for each event show times in the correct timezone                                                // 141
					if (timezoneArg) {                                                                                                // 142
						url = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 143
					}                                                                                                                 // 144
                                                                                                                       // 145
					events.push({                                                                                                     // 146
						id: entry.id,                                                                                                    // 147
						title: entry.summary,                                                                                            // 148
						start: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 149
						end: entry.end.dateTime || entry.end.date, // same                                                               // 150
						url: url,                                                                                                        // 151
						location: entry.location,                                                                                        // 152
						description: entry.description                                                                                   // 153
					});                                                                                                               // 154
				});                                                                                                                // 155
                                                                                                                       // 156
				// call the success handler(s) and allow it to return a new events array                                           // 157
				successArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 158
				successRes = applyAll(success, this, successArgs);                                                                 // 159
				if ($.isArray(successRes)) {                                                                                       // 160
					return successRes;                                                                                                // 161
				}                                                                                                                  // 162
			}                                                                                                                   // 163
                                                                                                                       // 164
			return events;                                                                                                      // 165
		}                                                                                                                    // 166
	});                                                                                                                   // 167
}                                                                                                                      // 168
                                                                                                                       // 169
                                                                                                                       // 170
// Injects a string like "arg=value" into the querystring of a URL                                                     // 171
function injectQsComponent(url, component) {                                                                           // 172
	// inject it after the querystring but before the fragment                                                            // 173
	return url.replace(/(\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 174
		return (qs ? qs + '&' : '?') + component + hash;                                                                     // 175
	});                                                                                                                   // 176
}                                                                                                                      // 177
                                                                                                                       // 178
                                                                                                                       // 179
});                                                                                                                    // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.template.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("fullcalendar");                                                                                  // 2
Template["fullcalendar"] = new Template("Template.fullcalendar", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw("<div></div>");                                                                                      // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.fullcalendar.rendered = function() {                                                                          // 1
    var div = this.$(this.firstNode);                                                                                  // 2
    if(this.data != null) {                                                                                            // 3
        //jquery takes care of undefined values, no need to check here                                                 // 4
        div.attr('id', this.data.id);                                                                                  // 5
        div.addClass(this.data.class);                                                                                 // 6
    }                                                                                                                  // 7
    div.fullCalendar(this.data);                                                                                       // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['rzymek:fullcalendar'] = {};

})();
