//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var PDFDocument, blobStream, stream, brfs;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/pascoual_pdfkitx/pdfkitx.browserify.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
                                                                                                                       // 1
},{}],2:[function(require,module,exports){                                                                             //
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0                                                                      // 1
//                                                                                                                     // 2
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!                                                                   // 3
//                                                                                                                     // 4
// Originally from narwhal.js (http://narwhaljs.org)                                                                   // 5
// Copyright (c) 2009 Thomas Robinson <280north.com>                                                                   // 6
//                                                                                                                     // 7
// Permission is hereby granted, free of charge, to any person obtaining a copy                                        // 8
// of this software and associated documentation files (the 'Software'), to                                            // 9
// deal in the Software without restriction, including without limitation the                                          // 10
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or                                         // 11
// sell copies of the Software, and to permit persons to whom the Software is                                          // 12
// furnished to do so, subject to the following conditions:                                                            // 13
//                                                                                                                     // 14
// The above copyright notice and this permission notice shall be included in                                          // 15
// all copies or substantial portions of the Software.                                                                 // 16
//                                                                                                                     // 17
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                          // 18
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                            // 19
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                         // 20
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN                                          // 21
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                        // 22
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 23
                                                                                                                       // 24
// when used in node, this will actually load the util module we depend on                                             // 25
// versus loading the builtin util module as happens otherwise                                                         // 26
// this is a bug in node module loading as far as I am concerned                                                       // 27
var util = require('util/');                                                                                           // 28
                                                                                                                       // 29
var pSlice = Array.prototype.slice;                                                                                    // 30
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 31
                                                                                                                       // 32
// 1. The assert module provides functions that throw                                                                  // 33
// AssertionError's when particular conditions are not met. The                                                        // 34
// assert module must conform to the following interface.                                                              // 35
                                                                                                                       // 36
var assert = module.exports = ok;                                                                                      // 37
                                                                                                                       // 38
// 2. The AssertionError is defined in assert.                                                                         // 39
// new assert.AssertionError({ message: message,                                                                       // 40
//                             actual: actual,                                                                         // 41
//                             expected: expected })                                                                   // 42
                                                                                                                       // 43
assert.AssertionError = function AssertionError(options) {                                                             // 44
  this.name = 'AssertionError';                                                                                        // 45
  this.actual = options.actual;                                                                                        // 46
  this.expected = options.expected;                                                                                    // 47
  this.operator = options.operator;                                                                                    // 48
  if (options.message) {                                                                                               // 49
    this.message = options.message;                                                                                    // 50
    this.generatedMessage = false;                                                                                     // 51
  } else {                                                                                                             // 52
    this.message = getMessage(this);                                                                                   // 53
    this.generatedMessage = true;                                                                                      // 54
  }                                                                                                                    // 55
  var stackStartFunction = options.stackStartFunction || fail;                                                         // 56
                                                                                                                       // 57
  if (Error.captureStackTrace) {                                                                                       // 58
    Error.captureStackTrace(this, stackStartFunction);                                                                 // 59
  }                                                                                                                    // 60
  else {                                                                                                               // 61
    // non v8 browsers so we can have a stacktrace                                                                     // 62
    var err = new Error();                                                                                             // 63
    if (err.stack) {                                                                                                   // 64
      var out = err.stack;                                                                                             // 65
                                                                                                                       // 66
      // try to strip useless frames                                                                                   // 67
      var fn_name = stackStartFunction.name;                                                                           // 68
      var idx = out.indexOf('\n' + fn_name);                                                                           // 69
      if (idx >= 0) {                                                                                                  // 70
        // once we have located the function frame                                                                     // 71
        // we need to strip out everything before it (and its line)                                                    // 72
        var next_line = out.indexOf('\n', idx + 1);                                                                    // 73
        out = out.substring(next_line + 1);                                                                            // 74
      }                                                                                                                // 75
                                                                                                                       // 76
      this.stack = out;                                                                                                // 77
    }                                                                                                                  // 78
  }                                                                                                                    // 79
};                                                                                                                     // 80
                                                                                                                       // 81
// assert.AssertionError instanceof Error                                                                              // 82
util.inherits(assert.AssertionError, Error);                                                                           // 83
                                                                                                                       // 84
function replacer(key, value) {                                                                                        // 85
  if (util.isUndefined(value)) {                                                                                       // 86
    return '' + value;                                                                                                 // 87
  }                                                                                                                    // 88
  if (util.isNumber(value) && !isFinite(value)) {                                                                      // 89
    return value.toString();                                                                                           // 90
  }                                                                                                                    // 91
  if (util.isFunction(value) || util.isRegExp(value)) {                                                                // 92
    return value.toString();                                                                                           // 93
  }                                                                                                                    // 94
  return value;                                                                                                        // 95
}                                                                                                                      // 96
                                                                                                                       // 97
function truncate(s, n) {                                                                                              // 98
  if (util.isString(s)) {                                                                                              // 99
    return s.length < n ? s : s.slice(0, n);                                                                           // 100
  } else {                                                                                                             // 101
    return s;                                                                                                          // 102
  }                                                                                                                    // 103
}                                                                                                                      // 104
                                                                                                                       // 105
function getMessage(self) {                                                                                            // 106
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +                                                  // 107
         self.operator + ' ' +                                                                                         // 108
         truncate(JSON.stringify(self.expected, replacer), 128);                                                       // 109
}                                                                                                                      // 110
                                                                                                                       // 111
// At present only the three keys mentioned above are used and                                                         // 112
// understood by the spec. Implementations or sub modules can pass                                                     // 113
// other keys to the AssertionError's constructor - they will be                                                       // 114
// ignored.                                                                                                            // 115
                                                                                                                       // 116
// 3. All of the following functions must throw an AssertionError                                                      // 117
// when a corresponding condition is not met, with a message that                                                      // 118
// may be undefined if not provided.  All assertion methods provide                                                    // 119
// both the actual and expected values to the assertion error for                                                      // 120
// display purposes.                                                                                                   // 121
                                                                                                                       // 122
function fail(actual, expected, message, operator, stackStartFunction) {                                               // 123
  throw new assert.AssertionError({                                                                                    // 124
    message: message,                                                                                                  // 125
    actual: actual,                                                                                                    // 126
    expected: expected,                                                                                                // 127
    operator: operator,                                                                                                // 128
    stackStartFunction: stackStartFunction                                                                             // 129
  });                                                                                                                  // 130
}                                                                                                                      // 131
                                                                                                                       // 132
// EXTENSION! allows for well behaved errors defined elsewhere.                                                        // 133
assert.fail = fail;                                                                                                    // 134
                                                                                                                       // 135
// 4. Pure assertion tests whether a value is truthy, as determined                                                    // 136
// by !!guard.                                                                                                         // 137
// assert.ok(guard, message_opt);                                                                                      // 138
// This statement is equivalent to assert.equal(true, !!guard,                                                         // 139
// message_opt);. To test strictly for the value true, use                                                             // 140
// assert.strictEqual(true, guard, message_opt);.                                                                      // 141
                                                                                                                       // 142
function ok(value, message) {                                                                                          // 143
  if (!value) fail(value, true, message, '==', assert.ok);                                                             // 144
}                                                                                                                      // 145
assert.ok = ok;                                                                                                        // 146
                                                                                                                       // 147
// 5. The equality assertion tests shallow, coercive equality with                                                     // 148
// ==.                                                                                                                 // 149
// assert.equal(actual, expected, message_opt);                                                                        // 150
                                                                                                                       // 151
assert.equal = function equal(actual, expected, message) {                                                             // 152
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);                                         // 153
};                                                                                                                     // 154
                                                                                                                       // 155
// 6. The non-equality assertion tests for whether two objects are not equal                                           // 156
// with != assert.notEqual(actual, expected, message_opt);                                                             // 157
                                                                                                                       // 158
assert.notEqual = function notEqual(actual, expected, message) {                                                       // 159
  if (actual == expected) {                                                                                            // 160
    fail(actual, expected, message, '!=', assert.notEqual);                                                            // 161
  }                                                                                                                    // 162
};                                                                                                                     // 163
                                                                                                                       // 164
// 7. The equivalence assertion tests a deep equality relation.                                                        // 165
// assert.deepEqual(actual, expected, message_opt);                                                                    // 166
                                                                                                                       // 167
assert.deepEqual = function deepEqual(actual, expected, message) {                                                     // 168
  if (!_deepEqual(actual, expected)) {                                                                                 // 169
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);                                                    // 170
  }                                                                                                                    // 171
};                                                                                                                     // 172
                                                                                                                       // 173
function _deepEqual(actual, expected) {                                                                                // 174
  // 7.1. All identical values are equivalent, as determined by ===.                                                   // 175
  if (actual === expected) {                                                                                           // 176
    return true;                                                                                                       // 177
                                                                                                                       // 178
  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {                                                       // 179
    if (actual.length != expected.length) return false;                                                                // 180
                                                                                                                       // 181
    for (var i = 0; i < actual.length; i++) {                                                                          // 182
      if (actual[i] !== expected[i]) return false;                                                                     // 183
    }                                                                                                                  // 184
                                                                                                                       // 185
    return true;                                                                                                       // 186
                                                                                                                       // 187
  // 7.2. If the expected value is a Date object, the actual value is                                                  // 188
  // equivalent if it is also a Date object that refers to the same time.                                              // 189
  } else if (util.isDate(actual) && util.isDate(expected)) {                                                           // 190
    return actual.getTime() === expected.getTime();                                                                    // 191
                                                                                                                       // 192
  // 7.3 If the expected value is a RegExp object, the actual value is                                                 // 193
  // equivalent if it is also a RegExp object with the same source and                                                 // 194
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).                                                    // 195
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {                                                       // 196
    return actual.source === expected.source &&                                                                        // 197
           actual.global === expected.global &&                                                                        // 198
           actual.multiline === expected.multiline &&                                                                  // 199
           actual.lastIndex === expected.lastIndex &&                                                                  // 200
           actual.ignoreCase === expected.ignoreCase;                                                                  // 201
                                                                                                                       // 202
  // 7.4. Other pairs that do not both pass typeof value == 'object',                                                  // 203
  // equivalence is determined by ==.                                                                                  // 204
  } else if (!util.isObject(actual) && !util.isObject(expected)) {                                                     // 205
    return actual == expected;                                                                                         // 206
                                                                                                                       // 207
  // 7.5 For all other Object pairs, including Array objects, equivalence is                                           // 208
  // determined by having the same number of owned properties (as verified                                             // 209
  // with Object.prototype.hasOwnProperty.call), the same set of keys                                                  // 210
  // (although not necessarily the same order), equivalent values for every                                            // 211
  // corresponding key, and an identical 'prototype' property. Note: this                                              // 212
  // accounts for both named and indexed properties on Arrays.                                                         // 213
  } else {                                                                                                             // 214
    return objEquiv(actual, expected);                                                                                 // 215
  }                                                                                                                    // 216
}                                                                                                                      // 217
                                                                                                                       // 218
function isArguments(object) {                                                                                         // 219
  return Object.prototype.toString.call(object) == '[object Arguments]';                                               // 220
}                                                                                                                      // 221
                                                                                                                       // 222
function objEquiv(a, b) {                                                                                              // 223
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))                                                          // 224
    return false;                                                                                                      // 225
  // an identical 'prototype' property.                                                                                // 226
  if (a.prototype !== b.prototype) return false;                                                                       // 227
  // if one is a primitive, the other must be same                                                                     // 228
  if (util.isPrimitive(a) || util.isPrimitive(b)) {                                                                    // 229
    return a === b;                                                                                                    // 230
  }                                                                                                                    // 231
  var aIsArgs = isArguments(a),                                                                                        // 232
      bIsArgs = isArguments(b);                                                                                        // 233
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))                                                                  // 234
    return false;                                                                                                      // 235
  if (aIsArgs) {                                                                                                       // 236
    a = pSlice.call(a);                                                                                                // 237
    b = pSlice.call(b);                                                                                                // 238
    return _deepEqual(a, b);                                                                                           // 239
  }                                                                                                                    // 240
  var ka = objectKeys(a),                                                                                              // 241
      kb = objectKeys(b),                                                                                              // 242
      key, i;                                                                                                          // 243
  // having the same number of owned properties (keys incorporates                                                     // 244
  // hasOwnProperty)                                                                                                   // 245
  if (ka.length != kb.length)                                                                                          // 246
    return false;                                                                                                      // 247
  //the same set of keys (although not necessarily the same order),                                                    // 248
  ka.sort();                                                                                                           // 249
  kb.sort();                                                                                                           // 250
  //~~~cheap key test                                                                                                  // 251
  for (i = ka.length - 1; i >= 0; i--) {                                                                               // 252
    if (ka[i] != kb[i])                                                                                                // 253
      return false;                                                                                                    // 254
  }                                                                                                                    // 255
  //equivalent values for every corresponding key, and                                                                 // 256
  //~~~possibly expensive deep test                                                                                    // 257
  for (i = ka.length - 1; i >= 0; i--) {                                                                               // 258
    key = ka[i];                                                                                                       // 259
    if (!_deepEqual(a[key], b[key])) return false;                                                                     // 260
  }                                                                                                                    // 261
  return true;                                                                                                         // 262
}                                                                                                                      // 263
                                                                                                                       // 264
// 8. The non-equivalence assertion tests for any deep inequality.                                                     // 265
// assert.notDeepEqual(actual, expected, message_opt);                                                                 // 266
                                                                                                                       // 267
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {                                               // 268
  if (_deepEqual(actual, expected)) {                                                                                  // 269
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);                                              // 270
  }                                                                                                                    // 271
};                                                                                                                     // 272
                                                                                                                       // 273
// 9. The strict equality assertion tests strict equality, as determined by ===.                                       // 274
// assert.strictEqual(actual, expected, message_opt);                                                                  // 275
                                                                                                                       // 276
assert.strictEqual = function strictEqual(actual, expected, message) {                                                 // 277
  if (actual !== expected) {                                                                                           // 278
    fail(actual, expected, message, '===', assert.strictEqual);                                                        // 279
  }                                                                                                                    // 280
};                                                                                                                     // 281
                                                                                                                       // 282
// 10. The strict non-equality assertion tests for strict inequality, as                                               // 283
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);                                           // 284
                                                                                                                       // 285
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {                                           // 286
  if (actual === expected) {                                                                                           // 287
    fail(actual, expected, message, '!==', assert.notStrictEqual);                                                     // 288
  }                                                                                                                    // 289
};                                                                                                                     // 290
                                                                                                                       // 291
function expectedException(actual, expected) {                                                                         // 292
  if (!actual || !expected) {                                                                                          // 293
    return false;                                                                                                      // 294
  }                                                                                                                    // 295
                                                                                                                       // 296
  if (Object.prototype.toString.call(expected) == '[object RegExp]') {                                                 // 297
    return expected.test(actual);                                                                                      // 298
  } else if (actual instanceof expected) {                                                                             // 299
    return true;                                                                                                       // 300
  } else if (expected.call({}, actual) === true) {                                                                     // 301
    return true;                                                                                                       // 302
  }                                                                                                                    // 303
                                                                                                                       // 304
  return false;                                                                                                        // 305
}                                                                                                                      // 306
                                                                                                                       // 307
function _throws(shouldThrow, block, expected, message) {                                                              // 308
  var actual;                                                                                                          // 309
                                                                                                                       // 310
  if (util.isString(expected)) {                                                                                       // 311
    message = expected;                                                                                                // 312
    expected = null;                                                                                                   // 313
  }                                                                                                                    // 314
                                                                                                                       // 315
  try {                                                                                                                // 316
    block();                                                                                                           // 317
  } catch (e) {                                                                                                        // 318
    actual = e;                                                                                                        // 319
  }                                                                                                                    // 320
                                                                                                                       // 321
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +                                          // 322
            (message ? ' ' + message : '.');                                                                           // 323
                                                                                                                       // 324
  if (shouldThrow && !actual) {                                                                                        // 325
    fail(actual, expected, 'Missing expected exception' + message);                                                    // 326
  }                                                                                                                    // 327
                                                                                                                       // 328
  if (!shouldThrow && expectedException(actual, expected)) {                                                           // 329
    fail(actual, expected, 'Got unwanted exception' + message);                                                        // 330
  }                                                                                                                    // 331
                                                                                                                       // 332
  if ((shouldThrow && actual && expected &&                                                                            // 333
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {                                             // 334
    throw actual;                                                                                                      // 335
  }                                                                                                                    // 336
}                                                                                                                      // 337
                                                                                                                       // 338
// 11. Expected to throw an error:                                                                                     // 339
// assert.throws(block, Error_opt, message_opt);                                                                       // 340
                                                                                                                       // 341
assert.throws = function(block, /*optional*/error, /*optional*/message) {                                              // 342
  _throws.apply(this, [true].concat(pSlice.call(arguments)));                                                          // 343
};                                                                                                                     // 344
                                                                                                                       // 345
// EXTENSION! This is annoying to write outside this module.                                                           // 346
assert.doesNotThrow = function(block, /*optional*/message) {                                                           // 347
  _throws.apply(this, [false].concat(pSlice.call(arguments)));                                                         // 348
};                                                                                                                     // 349
                                                                                                                       // 350
assert.ifError = function(err) { if (err) {throw err;}};                                                               // 351
                                                                                                                       // 352
var objectKeys = Object.keys || function (obj) {                                                                       // 353
  var keys = [];                                                                                                       // 354
  for (var key in obj) {                                                                                               // 355
    if (hasOwn.call(obj, key)) keys.push(key);                                                                         // 356
  }                                                                                                                    // 357
  return keys;                                                                                                         // 358
};                                                                                                                     // 359
                                                                                                                       // 360
},{"util/":42}],3:[function(require,module,exports){                                                                   //
arguments[4][1][0].apply(exports,arguments)                                                                            //
},{"dup":1}],4:[function(require,module,exports){                                                                      //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
                                                                                                                       // 3
var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&                                                                 // 4
                (typeof Uint16Array !== 'undefined') &&                                                                // 5
                (typeof Int32Array !== 'undefined');                                                                   // 6
                                                                                                                       // 7
                                                                                                                       // 8
exports.assign = function (obj /*from1, from2, from3, ...*/) {                                                         // 9
  var sources = Array.prototype.slice.call(arguments, 1);                                                              // 10
  while (sources.length) {                                                                                             // 11
    var source = sources.shift();                                                                                      // 12
    if (!source) { continue; }                                                                                         // 13
                                                                                                                       // 14
    if (typeof source !== 'object') {                                                                                  // 15
      throw new TypeError(source + 'must be non-object');                                                              // 16
    }                                                                                                                  // 17
                                                                                                                       // 18
    for (var p in source) {                                                                                            // 19
      if (source.hasOwnProperty(p)) {                                                                                  // 20
        obj[p] = source[p];                                                                                            // 21
      }                                                                                                                // 22
    }                                                                                                                  // 23
  }                                                                                                                    // 24
                                                                                                                       // 25
  return obj;                                                                                                          // 26
};                                                                                                                     // 27
                                                                                                                       // 28
                                                                                                                       // 29
// reduce buffer size, avoiding mem copy                                                                               // 30
exports.shrinkBuf = function (buf, size) {                                                                             // 31
  if (buf.length === size) { return buf; }                                                                             // 32
  if (buf.subarray) { return buf.subarray(0, size); }                                                                  // 33
  buf.length = size;                                                                                                   // 34
  return buf;                                                                                                          // 35
};                                                                                                                     // 36
                                                                                                                       // 37
                                                                                                                       // 38
var fnTyped = {                                                                                                        // 39
  arraySet: function (dest, src, src_offs, len, dest_offs) {                                                           // 40
    if (src.subarray && dest.subarray) {                                                                               // 41
      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);                                                       // 42
      return;                                                                                                          // 43
    }                                                                                                                  // 44
    // Fallback to ordinary array                                                                                      // 45
    for (var i=0; i<len; i++) {                                                                                        // 46
      dest[dest_offs + i] = src[src_offs + i];                                                                         // 47
    }                                                                                                                  // 48
  },                                                                                                                   // 49
  // Join array of chunks to single array.                                                                             // 50
  flattenChunks: function(chunks) {                                                                                    // 51
    var i, l, len, pos, chunk, result;                                                                                 // 52
                                                                                                                       // 53
    // calculate data length                                                                                           // 54
    len = 0;                                                                                                           // 55
    for (i=0, l=chunks.length; i<l; i++) {                                                                             // 56
      len += chunks[i].length;                                                                                         // 57
    }                                                                                                                  // 58
                                                                                                                       // 59
    // join chunks                                                                                                     // 60
    result = new Uint8Array(len);                                                                                      // 61
    pos = 0;                                                                                                           // 62
    for (i=0, l=chunks.length; i<l; i++) {                                                                             // 63
      chunk = chunks[i];                                                                                               // 64
      result.set(chunk, pos);                                                                                          // 65
      pos += chunk.length;                                                                                             // 66
    }                                                                                                                  // 67
                                                                                                                       // 68
    return result;                                                                                                     // 69
  }                                                                                                                    // 70
};                                                                                                                     // 71
                                                                                                                       // 72
var fnUntyped = {                                                                                                      // 73
  arraySet: function (dest, src, src_offs, len, dest_offs) {                                                           // 74
    for (var i=0; i<len; i++) {                                                                                        // 75
      dest[dest_offs + i] = src[src_offs + i];                                                                         // 76
    }                                                                                                                  // 77
  },                                                                                                                   // 78
  // Join array of chunks to single array.                                                                             // 79
  flattenChunks: function(chunks) {                                                                                    // 80
    return [].concat.apply([], chunks);                                                                                // 81
  }                                                                                                                    // 82
};                                                                                                                     // 83
                                                                                                                       // 84
                                                                                                                       // 85
// Enable/Disable typed arrays use, for testing                                                                        // 86
//                                                                                                                     // 87
exports.setTyped = function (on) {                                                                                     // 88
  if (on) {                                                                                                            // 89
    exports.Buf8  = Uint8Array;                                                                                        // 90
    exports.Buf16 = Uint16Array;                                                                                       // 91
    exports.Buf32 = Int32Array;                                                                                        // 92
    exports.assign(exports, fnTyped);                                                                                  // 93
  } else {                                                                                                             // 94
    exports.Buf8  = Array;                                                                                             // 95
    exports.Buf16 = Array;                                                                                             // 96
    exports.Buf32 = Array;                                                                                             // 97
    exports.assign(exports, fnUntyped);                                                                                // 98
  }                                                                                                                    // 99
};                                                                                                                     // 100
                                                                                                                       // 101
exports.setTyped(TYPED_OK);                                                                                            // 102
                                                                                                                       // 103
},{}],5:[function(require,module,exports){                                                                             //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
// Note: adler32 takes 12% for level 0 and 2% for level 6.                                                             // 3
// It doesn't worth to make additional optimizationa as in original.                                                   // 4
// Small size is preferable.                                                                                           // 5
                                                                                                                       // 6
function adler32(adler, buf, len, pos) {                                                                               // 7
  var s1 = (adler & 0xffff) |0,                                                                                        // 8
      s2 = ((adler >>> 16) & 0xffff) |0,                                                                               // 9
      n = 0;                                                                                                           // 10
                                                                                                                       // 11
  while (len !== 0) {                                                                                                  // 12
    // Set limit ~ twice less than 5552, to keep                                                                       // 13
    // s2 in 31-bits, because we force signed ints.                                                                    // 14
    // in other case %= will fail.                                                                                     // 15
    n = len > 2000 ? 2000 : len;                                                                                       // 16
    len -= n;                                                                                                          // 17
                                                                                                                       // 18
    do {                                                                                                               // 19
      s1 = (s1 + buf[pos++]) |0;                                                                                       // 20
      s2 = (s2 + s1) |0;                                                                                               // 21
    } while (--n);                                                                                                     // 22
                                                                                                                       // 23
    s1 %= 65521;                                                                                                       // 24
    s2 %= 65521;                                                                                                       // 25
  }                                                                                                                    // 26
                                                                                                                       // 27
  return (s1 | (s2 << 16)) |0;                                                                                         // 28
}                                                                                                                      // 29
                                                                                                                       // 30
                                                                                                                       // 31
module.exports = adler32;                                                                                              // 32
                                                                                                                       // 33
},{}],6:[function(require,module,exports){                                                                             //
module.exports = {                                                                                                     // 1
                                                                                                                       // 2
  /* Allowed flush values; see deflate() and inflate() below for details */                                            // 3
  Z_NO_FLUSH:         0,                                                                                               // 4
  Z_PARTIAL_FLUSH:    1,                                                                                               // 5
  Z_SYNC_FLUSH:       2,                                                                                               // 6
  Z_FULL_FLUSH:       3,                                                                                               // 7
  Z_FINISH:           4,                                                                                               // 8
  Z_BLOCK:            5,                                                                                               // 9
  Z_TREES:            6,                                                                                               // 10
                                                                                                                       // 11
  /* Return codes for the compression/decompression functions. Negative values                                         // 12
  * are errors, positive values are used for special but normal events.                                                // 13
  */                                                                                                                   // 14
  Z_OK:               0,                                                                                               // 15
  Z_STREAM_END:       1,                                                                                               // 16
  Z_NEED_DICT:        2,                                                                                               // 17
  Z_ERRNO:           -1,                                                                                               // 18
  Z_STREAM_ERROR:    -2,                                                                                               // 19
  Z_DATA_ERROR:      -3,                                                                                               // 20
  //Z_MEM_ERROR:     -4,                                                                                               // 21
  Z_BUF_ERROR:       -5,                                                                                               // 22
  //Z_VERSION_ERROR: -6,                                                                                               // 23
                                                                                                                       // 24
  /* compression levels */                                                                                             // 25
  Z_NO_COMPRESSION:         0,                                                                                         // 26
  Z_BEST_SPEED:             1,                                                                                         // 27
  Z_BEST_COMPRESSION:       9,                                                                                         // 28
  Z_DEFAULT_COMPRESSION:   -1,                                                                                         // 29
                                                                                                                       // 30
                                                                                                                       // 31
  Z_FILTERED:               1,                                                                                         // 32
  Z_HUFFMAN_ONLY:           2,                                                                                         // 33
  Z_RLE:                    3,                                                                                         // 34
  Z_FIXED:                  4,                                                                                         // 35
  Z_DEFAULT_STRATEGY:       0,                                                                                         // 36
                                                                                                                       // 37
  /* Possible values of the data_type field (though see inflate()) */                                                  // 38
  Z_BINARY:                 0,                                                                                         // 39
  Z_TEXT:                   1,                                                                                         // 40
  //Z_ASCII:                1, // = Z_TEXT (deprecated)                                                                // 41
  Z_UNKNOWN:                2,                                                                                         // 42
                                                                                                                       // 43
  /* The deflate compression method */                                                                                 // 44
  Z_DEFLATED:               8                                                                                          // 45
  //Z_NULL:                 null // Use -1 or null inline, depending on var type                                       // 46
};                                                                                                                     // 47
                                                                                                                       // 48
},{}],7:[function(require,module,exports){                                                                             //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
// Note: we can't get significant speed boost here.                                                                    // 3
// So write code to minimize size - no pregenerated tables                                                             // 4
// and array tools dependencies.                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
// Use ordinary array, since untyped makes no boost here                                                               // 8
function makeTable() {                                                                                                 // 9
  var c, table = [];                                                                                                   // 10
                                                                                                                       // 11
  for (var n =0; n < 256; n++) {                                                                                       // 12
    c = n;                                                                                                             // 13
    for (var k =0; k < 8; k++) {                                                                                       // 14
      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));                                                              // 15
    }                                                                                                                  // 16
    table[n] = c;                                                                                                      // 17
  }                                                                                                                    // 18
                                                                                                                       // 19
  return table;                                                                                                        // 20
}                                                                                                                      // 21
                                                                                                                       // 22
// Create table on load. Just 255 signed longs. Not a problem.                                                         // 23
var crcTable = makeTable();                                                                                            // 24
                                                                                                                       // 25
                                                                                                                       // 26
function crc32(crc, buf, len, pos) {                                                                                   // 27
  var t = crcTable,                                                                                                    // 28
      end = pos + len;                                                                                                 // 29
                                                                                                                       // 30
  crc = crc ^ (-1);                                                                                                    // 31
                                                                                                                       // 32
  for (var i = pos; i < end; i++) {                                                                                    // 33
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];                                                                      // 34
  }                                                                                                                    // 35
                                                                                                                       // 36
  return (crc ^ (-1)); // >>> 0;                                                                                       // 37
}                                                                                                                      // 38
                                                                                                                       // 39
                                                                                                                       // 40
module.exports = crc32;                                                                                                // 41
                                                                                                                       // 42
},{}],8:[function(require,module,exports){                                                                             //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
var utils   = require('../utils/common');                                                                              // 3
var trees   = require('./trees');                                                                                      // 4
var adler32 = require('./adler32');                                                                                    // 5
var crc32   = require('./crc32');                                                                                      // 6
var msg   = require('./messages');                                                                                     // 7
                                                                                                                       // 8
/* Public constants ==========================================================*/                                       // 9
/* ===========================================================================*/                                       // 10
                                                                                                                       // 11
                                                                                                                       // 12
/* Allowed flush values; see deflate() and inflate() below for details */                                              // 13
var Z_NO_FLUSH      = 0;                                                                                               // 14
var Z_PARTIAL_FLUSH = 1;                                                                                               // 15
//var Z_SYNC_FLUSH    = 2;                                                                                             // 16
var Z_FULL_FLUSH    = 3;                                                                                               // 17
var Z_FINISH        = 4;                                                                                               // 18
var Z_BLOCK         = 5;                                                                                               // 19
//var Z_TREES         = 6;                                                                                             // 20
                                                                                                                       // 21
                                                                                                                       // 22
/* Return codes for the compression/decompression functions. Negative values                                           // 23
 * are errors, positive values are used for special but normal events.                                                 // 24
 */                                                                                                                    // 25
var Z_OK            = 0;                                                                                               // 26
var Z_STREAM_END    = 1;                                                                                               // 27
//var Z_NEED_DICT     = 2;                                                                                             // 28
//var Z_ERRNO         = -1;                                                                                            // 29
var Z_STREAM_ERROR  = -2;                                                                                              // 30
var Z_DATA_ERROR    = -3;                                                                                              // 31
//var Z_MEM_ERROR     = -4;                                                                                            // 32
var Z_BUF_ERROR     = -5;                                                                                              // 33
//var Z_VERSION_ERROR = -6;                                                                                            // 34
                                                                                                                       // 35
                                                                                                                       // 36
/* compression levels */                                                                                               // 37
//var Z_NO_COMPRESSION      = 0;                                                                                       // 38
//var Z_BEST_SPEED          = 1;                                                                                       // 39
//var Z_BEST_COMPRESSION    = 9;                                                                                       // 40
var Z_DEFAULT_COMPRESSION = -1;                                                                                        // 41
                                                                                                                       // 42
                                                                                                                       // 43
var Z_FILTERED            = 1;                                                                                         // 44
var Z_HUFFMAN_ONLY        = 2;                                                                                         // 45
var Z_RLE                 = 3;                                                                                         // 46
var Z_FIXED               = 4;                                                                                         // 47
var Z_DEFAULT_STRATEGY    = 0;                                                                                         // 48
                                                                                                                       // 49
/* Possible values of the data_type field (though see inflate()) */                                                    // 50
//var Z_BINARY              = 0;                                                                                       // 51
//var Z_TEXT                = 1;                                                                                       // 52
//var Z_ASCII               = 1; // = Z_TEXT                                                                           // 53
var Z_UNKNOWN             = 2;                                                                                         // 54
                                                                                                                       // 55
                                                                                                                       // 56
/* The deflate compression method */                                                                                   // 57
var Z_DEFLATED  = 8;                                                                                                   // 58
                                                                                                                       // 59
/*============================================================================*/                                       // 60
                                                                                                                       // 61
                                                                                                                       // 62
var MAX_MEM_LEVEL = 9;                                                                                                 // 63
/* Maximum value for memLevel in deflateInit2 */                                                                       // 64
var MAX_WBITS = 15;                                                                                                    // 65
/* 32K LZ77 window */                                                                                                  // 66
var DEF_MEM_LEVEL = 8;                                                                                                 // 67
                                                                                                                       // 68
                                                                                                                       // 69
var LENGTH_CODES  = 29;                                                                                                // 70
/* number of length codes, not counting the special END_BLOCK code */                                                  // 71
var LITERALS      = 256;                                                                                               // 72
/* number of literal bytes 0..255 */                                                                                   // 73
var L_CODES       = LITERALS + 1 + LENGTH_CODES;                                                                       // 74
/* number of Literal or Length codes, including the END_BLOCK code */                                                  // 75
var D_CODES       = 30;                                                                                                // 76
/* number of distance codes */                                                                                         // 77
var BL_CODES      = 19;                                                                                                // 78
/* number of codes used to transfer the bit lengths */                                                                 // 79
var HEAP_SIZE     = 2*L_CODES + 1;                                                                                     // 80
/* maximum heap size */                                                                                                // 81
var MAX_BITS  = 15;                                                                                                    // 82
/* All codes must not exceed MAX_BITS bits */                                                                          // 83
                                                                                                                       // 84
var MIN_MATCH = 3;                                                                                                     // 85
var MAX_MATCH = 258;                                                                                                   // 86
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);                                                                       // 87
                                                                                                                       // 88
var PRESET_DICT = 0x20;                                                                                                // 89
                                                                                                                       // 90
var INIT_STATE = 42;                                                                                                   // 91
var EXTRA_STATE = 69;                                                                                                  // 92
var NAME_STATE = 73;                                                                                                   // 93
var COMMENT_STATE = 91;                                                                                                // 94
var HCRC_STATE = 103;                                                                                                  // 95
var BUSY_STATE = 113;                                                                                                  // 96
var FINISH_STATE = 666;                                                                                                // 97
                                                                                                                       // 98
var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */                                   // 99
var BS_BLOCK_DONE     = 2; /* block flush performed */                                                                 // 100
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */                                 // 101
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */                                           // 102
                                                                                                                       // 103
var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.                                                       // 104
                                                                                                                       // 105
function err(strm, errorCode) {                                                                                        // 106
  strm.msg = msg[errorCode];                                                                                           // 107
  return errorCode;                                                                                                    // 108
}                                                                                                                      // 109
                                                                                                                       // 110
function rank(f) {                                                                                                     // 111
  return ((f) << 1) - ((f) > 4 ? 9 : 0);                                                                               // 112
}                                                                                                                      // 113
                                                                                                                       // 114
function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }                                      // 115
                                                                                                                       // 116
                                                                                                                       // 117
/* =========================================================================                                           // 118
 * Flush as much pending output as possible. All deflate() output goes                                                 // 119
 * through this function so some applications may wish to modify it                                                    // 120
 * to avoid allocating a large strm->output buffer and copying into it.                                                // 121
 * (See also read_buf()).                                                                                              // 122
 */                                                                                                                    // 123
function flush_pending(strm) {                                                                                         // 124
  var s = strm.state;                                                                                                  // 125
                                                                                                                       // 126
  //_tr_flush_bits(s);                                                                                                 // 127
  var len = s.pending;                                                                                                 // 128
  if (len > strm.avail_out) {                                                                                          // 129
    len = strm.avail_out;                                                                                              // 130
  }                                                                                                                    // 131
  if (len === 0) { return; }                                                                                           // 132
                                                                                                                       // 133
  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);                                       // 134
  strm.next_out += len;                                                                                                // 135
  s.pending_out += len;                                                                                                // 136
  strm.total_out += len;                                                                                               // 137
  strm.avail_out -= len;                                                                                               // 138
  s.pending -= len;                                                                                                    // 139
  if (s.pending === 0) {                                                                                               // 140
    s.pending_out = 0;                                                                                                 // 141
  }                                                                                                                    // 142
}                                                                                                                      // 143
                                                                                                                       // 144
                                                                                                                       // 145
function flush_block_only (s, last) {                                                                                  // 146
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);               // 147
  s.block_start = s.strstart;                                                                                          // 148
  flush_pending(s.strm);                                                                                               // 149
}                                                                                                                      // 150
                                                                                                                       // 151
                                                                                                                       // 152
function put_byte(s, b) {                                                                                              // 153
  s.pending_buf[s.pending++] = b;                                                                                      // 154
}                                                                                                                      // 155
                                                                                                                       // 156
                                                                                                                       // 157
/* =========================================================================                                           // 158
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.                                            // 159
 * IN assertion: the stream state is correct and there is enough room in                                               // 160
 * pending_buf.                                                                                                        // 161
 */                                                                                                                    // 162
function putShortMSB(s, b) {                                                                                           // 163
//  put_byte(s, (Byte)(b >> 8));                                                                                       // 164
//  put_byte(s, (Byte)(b & 0xff));                                                                                     // 165
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;                                                                       // 166
  s.pending_buf[s.pending++] = b & 0xff;                                                                               // 167
}                                                                                                                      // 168
                                                                                                                       // 169
                                                                                                                       // 170
/* ===========================================================================                                         // 171
 * Read a new buffer from the current input stream, update the adler32                                                 // 172
 * and total number of bytes read.  All deflate() input goes through                                                   // 173
 * this function so some applications may wish to modify it to avoid                                                   // 174
 * allocating a large strm->input buffer and copying from it.                                                          // 175
 * (See also flush_pending()).                                                                                         // 176
 */                                                                                                                    // 177
function read_buf(strm, buf, start, size) {                                                                            // 178
  var len = strm.avail_in;                                                                                             // 179
                                                                                                                       // 180
  if (len > size) { len = size; }                                                                                      // 181
  if (len === 0) { return 0; }                                                                                         // 182
                                                                                                                       // 183
  strm.avail_in -= len;                                                                                                // 184
                                                                                                                       // 185
  utils.arraySet(buf, strm.input, strm.next_in, len, start);                                                           // 186
  if (strm.state.wrap === 1) {                                                                                         // 187
    strm.adler = adler32(strm.adler, buf, len, start);                                                                 // 188
  }                                                                                                                    // 189
                                                                                                                       // 190
  else if (strm.state.wrap === 2) {                                                                                    // 191
    strm.adler = crc32(strm.adler, buf, len, start);                                                                   // 192
  }                                                                                                                    // 193
                                                                                                                       // 194
  strm.next_in += len;                                                                                                 // 195
  strm.total_in += len;                                                                                                // 196
                                                                                                                       // 197
  return len;                                                                                                          // 198
}                                                                                                                      // 199
                                                                                                                       // 200
                                                                                                                       // 201
/* ===========================================================================                                         // 202
 * Set match_start to the longest match starting at the given string and                                               // 203
 * return its length. Matches shorter or equal to prev_length are discarded,                                           // 204
 * in which case the result is equal to prev_length and match_start is                                                 // 205
 * garbage.                                                                                                            // 206
 * IN assertions: cur_match is the head of the hash chain for the current                                              // 207
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1                                           // 208
 * OUT assertion: the match length is not greater than s->lookahead.                                                   // 209
 */                                                                                                                    // 210
function longest_match(s, cur_match) {                                                                                 // 211
  var chain_length = s.max_chain_length;      /* max hash chain length */                                              // 212
  var scan = s.strstart; /* current string */                                                                          // 213
  var match;                       /* matched string */                                                                // 214
  var len;                           /* length of current match */                                                     // 215
  var best_len = s.prev_length;              /* best match length so far */                                            // 216
  var nice_match = s.nice_match;             /* stop if match long enough */                                           // 217
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?                                                              // 218
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;                                                              // 219
                                                                                                                       // 220
  var _win = s.window; // shortcut                                                                                     // 221
                                                                                                                       // 222
  var wmask = s.w_mask;                                                                                                // 223
  var prev  = s.prev;                                                                                                  // 224
                                                                                                                       // 225
  /* Stop when cur_match becomes <= limit. To simplify the code,                                                       // 226
   * we prevent matches with the string of window index 0.                                                             // 227
   */                                                                                                                  // 228
                                                                                                                       // 229
  var strend = s.strstart + MAX_MATCH;                                                                                 // 230
  var scan_end1  = _win[scan + best_len - 1];                                                                          // 231
  var scan_end   = _win[scan + best_len];                                                                              // 232
                                                                                                                       // 233
  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.                                          // 234
   * It is easy to get rid of this optimization if necessary.                                                          // 235
   */                                                                                                                  // 236
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");                                                 // 237
                                                                                                                       // 238
  /* Do not waste too much time if we already have a good match: */                                                    // 239
  if (s.prev_length >= s.good_match) {                                                                                 // 240
    chain_length >>= 2;                                                                                                // 241
  }                                                                                                                    // 242
  /* Do not look for matches beyond the end of the input. This is necessary                                            // 243
   * to make deflate deterministic.                                                                                    // 244
   */                                                                                                                  // 245
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }                                                          // 246
                                                                                                                       // 247
  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");                                       // 248
                                                                                                                       // 249
  do {                                                                                                                 // 250
    // Assert(cur_match < s->strstart, "no future");                                                                   // 251
    match = cur_match;                                                                                                 // 252
                                                                                                                       // 253
    /* Skip to next match if the match length cannot increase                                                          // 254
     * or if the match length is less than 2.  Note that the checks below                                              // 255
     * for insufficient lookahead only occur occasionally for performance                                              // 256
     * reasons.  Therefore uninitialized memory will be accessed, and                                                  // 257
     * conditional jumps will be made that depend on those values.                                                     // 258
     * However the length of the match is limited to the lookahead, so                                                 // 259
     * the output of deflate is not affected by the uninitialized values.                                              // 260
     */                                                                                                                // 261
                                                                                                                       // 262
    if (_win[match + best_len]     !== scan_end  ||                                                                    // 263
        _win[match + best_len - 1] !== scan_end1 ||                                                                    // 264
        _win[match]                !== _win[scan] ||                                                                   // 265
        _win[++match]              !== _win[scan + 1]) {                                                               // 266
      continue;                                                                                                        // 267
    }                                                                                                                  // 268
                                                                                                                       // 269
    /* The check at best_len-1 can be removed because it will be made                                                  // 270
     * again later. (This heuristic is not always a win.)                                                              // 271
     * It is not necessary to compare scan[2] and match[2] since they                                                  // 272
     * are always equal when the other bytes match, given that                                                         // 273
     * the hash keys are equal and that HASH_BITS >= 8.                                                                // 274
     */                                                                                                                // 275
    scan += 2;                                                                                                         // 276
    match++;                                                                                                           // 277
    // Assert(*scan == *match, "match[2]?");                                                                           // 278
                                                                                                                       // 279
    /* We check for insufficient lookahead only every 8th comparison;                                                  // 280
     * the 256th check will be made at strstart+258.                                                                   // 281
     */                                                                                                                // 282
    do {                                                                                                               // 283
      /*jshint noempty:false*/                                                                                         // 284
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&                                       // 285
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&                                       // 286
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&                                       // 287
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&                                       // 288
             scan < strend);                                                                                           // 289
                                                                                                                       // 290
    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");                                            // 291
                                                                                                                       // 292
    len = MAX_MATCH - (strend - scan);                                                                                 // 293
    scan = strend - MAX_MATCH;                                                                                         // 294
                                                                                                                       // 295
    if (len > best_len) {                                                                                              // 296
      s.match_start = cur_match;                                                                                       // 297
      best_len = len;                                                                                                  // 298
      if (len >= nice_match) {                                                                                         // 299
        break;                                                                                                         // 300
      }                                                                                                                // 301
      scan_end1  = _win[scan + best_len - 1];                                                                          // 302
      scan_end   = _win[scan + best_len];                                                                              // 303
    }                                                                                                                  // 304
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);                                     // 305
                                                                                                                       // 306
  if (best_len <= s.lookahead) {                                                                                       // 307
    return best_len;                                                                                                   // 308
  }                                                                                                                    // 309
  return s.lookahead;                                                                                                  // 310
}                                                                                                                      // 311
                                                                                                                       // 312
                                                                                                                       // 313
/* ===========================================================================                                         // 314
 * Fill the window when the lookahead becomes insufficient.                                                            // 315
 * Updates strstart and lookahead.                                                                                     // 316
 *                                                                                                                     // 317
 * IN assertion: lookahead < MIN_LOOKAHEAD                                                                             // 318
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD                                                               // 319
 *    At least one byte has been read, or avail_in == 0; reads are                                                     // 320
 *    performed for at least two bytes (required for the zip translate_eol                                             // 321
 *    option -- not supported here).                                                                                   // 322
 */                                                                                                                    // 323
function fill_window(s) {                                                                                              // 324
  var _w_size = s.w_size;                                                                                              // 325
  var p, n, m, more, str;                                                                                              // 326
                                                                                                                       // 327
  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");                                                  // 328
                                                                                                                       // 329
  do {                                                                                                                 // 330
    more = s.window_size - s.lookahead - s.strstart;                                                                   // 331
                                                                                                                       // 332
    // JS ints have 32 bit, block below not needed                                                                     // 333
    /* Deal with !@#$% 64K limit: */                                                                                   // 334
    //if (sizeof(int) <= 2) {                                                                                          // 335
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {                                                    // 336
    //        more = wsize;                                                                                            // 337
    //                                                                                                                 // 338
    //  } else if (more == (unsigned)(-1)) {                                                                           // 339
    //        /* Very unlikely, but possible on 16 bit machine if                                                      // 340
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)                                           // 341
    //         */                                                                                                      // 342
    //        more--;                                                                                                  // 343
    //    }                                                                                                            // 344
    //}                                                                                                                // 345
                                                                                                                       // 346
                                                                                                                       // 347
    /* If the window is almost full and there is insufficient lookahead,                                               // 348
     * move the upper half to the lower one to make room in the upper half.                                            // 349
     */                                                                                                                // 350
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {                                                           // 351
                                                                                                                       // 352
      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);                                                         // 353
      s.match_start -= _w_size;                                                                                        // 354
      s.strstart -= _w_size;                                                                                           // 355
      /* we now have strstart >= MAX_DIST */                                                                           // 356
      s.block_start -= _w_size;                                                                                        // 357
                                                                                                                       // 358
      /* Slide the hash table (could be avoided with 32 bit values                                                     // 359
       at the expense of memory usage). We slide even when level == 0                                                  // 360
       to keep the hash table consistent if we switch back to level > 0                                                // 361
       later. (Using level 0 permanently is not an optimal usage of                                                    // 362
       zlib, so we don't care about this pathological case.)                                                           // 363
       */                                                                                                              // 364
                                                                                                                       // 365
      n = s.hash_size;                                                                                                 // 366
      p = n;                                                                                                           // 367
      do {                                                                                                             // 368
        m = s.head[--p];                                                                                               // 369
        s.head[p] = (m >= _w_size ? m - _w_size : 0);                                                                  // 370
      } while (--n);                                                                                                   // 371
                                                                                                                       // 372
      n = _w_size;                                                                                                     // 373
      p = n;                                                                                                           // 374
      do {                                                                                                             // 375
        m = s.prev[--p];                                                                                               // 376
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);                                                                  // 377
        /* If n is not on any hash chain, prev[n] is garbage but                                                       // 378
         * its value will never be used.                                                                               // 379
         */                                                                                                            // 380
      } while (--n);                                                                                                   // 381
                                                                                                                       // 382
      more += _w_size;                                                                                                 // 383
    }                                                                                                                  // 384
    if (s.strm.avail_in === 0) {                                                                                       // 385
      break;                                                                                                           // 386
    }                                                                                                                  // 387
                                                                                                                       // 388
    /* If there was no sliding:                                                                                        // 389
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&                                            // 390
     *    more == window_size - lookahead - strstart                                                                   // 391
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)                                                 // 392
     * => more >= window_size - 2*WSIZE + 2                                                                            // 393
     * In the BIG_MEM or MMAP case (not yet supported),                                                                // 394
     *   window_size == input_size + MIN_LOOKAHEAD  &&                                                                 // 395
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.                                               // 396
     * Otherwise, window_size == 2*WSIZE so more >= 2.                                                                 // 397
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.                                                // 398
     */                                                                                                                // 399
    //Assert(more >= 2, "more < 2");                                                                                   // 400
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);                                                    // 401
    s.lookahead += n;                                                                                                  // 402
                                                                                                                       // 403
    /* Initialize the hash value now that we have some input: */                                                       // 404
    if (s.lookahead + s.insert >= MIN_MATCH) {                                                                         // 405
      str = s.strstart - s.insert;                                                                                     // 406
      s.ins_h = s.window[str];                                                                                         // 407
                                                                                                                       // 408
      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */                                                              // 409
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;                                         // 410
//#if MIN_MATCH != 3                                                                                                   // 411
//        Call update_hash() MIN_MATCH-3 more times                                                                    // 412
//#endif                                                                                                               // 413
      while (s.insert) {                                                                                               // 414
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */                                                  // 415
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;                             // 416
                                                                                                                       // 417
        s.prev[str & s.w_mask] = s.head[s.ins_h];                                                                      // 418
        s.head[s.ins_h] = str;                                                                                         // 419
        str++;                                                                                                         // 420
        s.insert--;                                                                                                    // 421
        if (s.lookahead + s.insert < MIN_MATCH) {                                                                      // 422
          break;                                                                                                       // 423
        }                                                                                                              // 424
      }                                                                                                                // 425
    }                                                                                                                  // 426
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,                                             // 427
     * but this is not important since only literal bytes will be emitted.                                             // 428
     */                                                                                                                // 429
                                                                                                                       // 430
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);                                                      // 431
                                                                                                                       // 432
  /* If the WIN_INIT bytes after the end of the current data have never been                                           // 433
   * written, then zero those bytes in order to avoid memory check reports of                                          // 434
   * the use of uninitialized (or uninitialised as Julian writes) bytes by                                             // 435
   * the longest match routines.  Update the high water mark for the next                                              // 436
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match                                          // 437
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.                                              // 438
   */                                                                                                                  // 439
//  if (s.high_water < s.window_size) {                                                                                // 440
//    var curr = s.strstart + s.lookahead;                                                                             // 441
//    var init = 0;                                                                                                    // 442
//                                                                                                                     // 443
//    if (s.high_water < curr) {                                                                                       // 444
//      /* Previous high water mark below current data -- zero WIN_INIT                                                // 445
//       * bytes or up to end of window, whichever is less.                                                            // 446
//       */                                                                                                            // 447
//      init = s.window_size - curr;                                                                                   // 448
//      if (init > WIN_INIT)                                                                                           // 449
//        init = WIN_INIT;                                                                                             // 450
//      zmemzero(s->window + curr, (unsigned)init);                                                                    // 451
//      s->high_water = curr + init;                                                                                   // 452
//    }                                                                                                                // 453
//    else if (s->high_water < (ulg)curr + WIN_INIT) {                                                                 // 454
//      /* High water mark at or above current data, but below current data                                            // 455
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up                                              // 456
//       * to end of window, whichever is less.                                                                        // 457
//       */                                                                                                            // 458
//      init = (ulg)curr + WIN_INIT - s->high_water;                                                                   // 459
//      if (init > s->window_size - s->high_water)                                                                     // 460
//        init = s->window_size - s->high_water;                                                                       // 461
//      zmemzero(s->window + s->high_water, (unsigned)init);                                                           // 462
//      s->high_water += init;                                                                                         // 463
//    }                                                                                                                // 464
//  }                                                                                                                  // 465
//                                                                                                                     // 466
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,                                                         // 467
//    "not enough room for search");                                                                                   // 468
}                                                                                                                      // 469
                                                                                                                       // 470
/* ===========================================================================                                         // 471
 * Copy without compression as much as possible from the input stream, return                                          // 472
 * the current block state.                                                                                            // 473
 * This function does not insert new strings in the dictionary since                                                   // 474
 * uncompressible data is probably not useful. This function is used                                                   // 475
 * only for the level=0 compression option.                                                                            // 476
 * NOTE: this function should be optimized to avoid extra copying from                                                 // 477
 * window to pending_buf.                                                                                              // 478
 */                                                                                                                    // 479
function deflate_stored(s, flush) {                                                                                    // 480
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited                                                 // 481
   * to pending_buf_size, and each stored block has a 5 byte header:                                                   // 482
   */                                                                                                                  // 483
  var max_block_size = 0xffff;                                                                                         // 484
                                                                                                                       // 485
  if (max_block_size > s.pending_buf_size - 5) {                                                                       // 486
    max_block_size = s.pending_buf_size - 5;                                                                           // 487
  }                                                                                                                    // 488
                                                                                                                       // 489
  /* Copy as much as possible from input to output: */                                                                 // 490
  for (;;) {                                                                                                           // 491
    /* Fill the window as much as possible: */                                                                         // 492
    if (s.lookahead <= 1) {                                                                                            // 493
                                                                                                                       // 494
      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||                                                                  // 495
      //  s->block_start >= (long)s->w_size, "slide too late");                                                        // 496
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||                                                    // 497
//        s.block_start >= s.w_size)) {                                                                                // 498
//        throw  new Error("slide too late");                                                                          // 499
//      }                                                                                                              // 500
                                                                                                                       // 501
      fill_window(s);                                                                                                  // 502
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {                                                                 // 503
        return BS_NEED_MORE;                                                                                           // 504
      }                                                                                                                // 505
                                                                                                                       // 506
      if (s.lookahead === 0) {                                                                                         // 507
        break;                                                                                                         // 508
      }                                                                                                                // 509
      /* flush the current block */                                                                                    // 510
    }                                                                                                                  // 511
    //Assert(s->block_start >= 0L, "block gone");                                                                      // 512
//    if (s.block_start < 0) throw new Error("block gone");                                                            // 513
                                                                                                                       // 514
    s.strstart += s.lookahead;                                                                                         // 515
    s.lookahead = 0;                                                                                                   // 516
                                                                                                                       // 517
    /* Emit a stored block if pending_buf will be full: */                                                             // 518
    var max_start = s.block_start + max_block_size;                                                                    // 519
                                                                                                                       // 520
    if (s.strstart === 0 || s.strstart >= max_start) {                                                                 // 521
      /* strstart == 0 is possible when wraparound on 16-bit machine */                                                // 522
      s.lookahead = s.strstart - max_start;                                                                            // 523
      s.strstart = max_start;                                                                                          // 524
      /*** FLUSH_BLOCK(s, 0); ***/                                                                                     // 525
      flush_block_only(s, false);                                                                                      // 526
      if (s.strm.avail_out === 0) {                                                                                    // 527
        return BS_NEED_MORE;                                                                                           // 528
      }                                                                                                                // 529
      /***/                                                                                                            // 530
                                                                                                                       // 531
                                                                                                                       // 532
    }                                                                                                                  // 533
    /* Flush if we may have to slide, otherwise block_start may become                                                 // 534
     * negative and the data will be gone:                                                                             // 535
     */                                                                                                                // 536
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {                                                    // 537
      /*** FLUSH_BLOCK(s, 0); ***/                                                                                     // 538
      flush_block_only(s, false);                                                                                      // 539
      if (s.strm.avail_out === 0) {                                                                                    // 540
        return BS_NEED_MORE;                                                                                           // 541
      }                                                                                                                // 542
      /***/                                                                                                            // 543
    }                                                                                                                  // 544
  }                                                                                                                    // 545
                                                                                                                       // 546
  s.insert = 0;                                                                                                        // 547
                                                                                                                       // 548
  if (flush === Z_FINISH) {                                                                                            // 549
    /*** FLUSH_BLOCK(s, 1); ***/                                                                                       // 550
    flush_block_only(s, true);                                                                                         // 551
    if (s.strm.avail_out === 0) {                                                                                      // 552
      return BS_FINISH_STARTED;                                                                                        // 553
    }                                                                                                                  // 554
    /***/                                                                                                              // 555
    return BS_FINISH_DONE;                                                                                             // 556
  }                                                                                                                    // 557
                                                                                                                       // 558
  if (s.strstart > s.block_start) {                                                                                    // 559
    /*** FLUSH_BLOCK(s, 0); ***/                                                                                       // 560
    flush_block_only(s, false);                                                                                        // 561
    if (s.strm.avail_out === 0) {                                                                                      // 562
      return BS_NEED_MORE;                                                                                             // 563
    }                                                                                                                  // 564
    /***/                                                                                                              // 565
  }                                                                                                                    // 566
                                                                                                                       // 567
  return BS_NEED_MORE;                                                                                                 // 568
}                                                                                                                      // 569
                                                                                                                       // 570
/* ===========================================================================                                         // 571
 * Compress as much as possible from the input stream, return the current                                              // 572
 * block state.                                                                                                        // 573
 * This function does not perform lazy evaluation of matches and inserts                                               // 574
 * new strings in the dictionary only for unmatched strings or for short                                               // 575
 * matches. It is used only for the fast compression options.                                                          // 576
 */                                                                                                                    // 577
function deflate_fast(s, flush) {                                                                                      // 578
  var hash_head;        /* head of the hash chain */                                                                   // 579
  var bflush;           /* set if current block must be flushed */                                                     // 580
                                                                                                                       // 581
  for (;;) {                                                                                                           // 582
    /* Make sure that we always have enough lookahead, except                                                          // 583
     * at the end of the input file. We need MAX_MATCH bytes                                                           // 584
     * for the next match, plus MIN_MATCH bytes to insert the                                                          // 585
     * string following the next match.                                                                                // 586
     */                                                                                                                // 587
    if (s.lookahead < MIN_LOOKAHEAD) {                                                                                 // 588
      fill_window(s);                                                                                                  // 589
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {                                                       // 590
        return BS_NEED_MORE;                                                                                           // 591
      }                                                                                                                // 592
      if (s.lookahead === 0) {                                                                                         // 593
        break; /* flush the current block */                                                                           // 594
      }                                                                                                                // 595
    }                                                                                                                  // 596
                                                                                                                       // 597
    /* Insert the string window[strstart .. strstart+2] in the                                                         // 598
     * dictionary, and set hash_head to the head of the hash chain:                                                    // 599
     */                                                                                                                // 600
    hash_head = 0/*NIL*/;                                                                                              // 601
    if (s.lookahead >= MIN_MATCH) {                                                                                    // 602
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/                                                               // 603
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;                      // 604
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];                                                     // 605
      s.head[s.ins_h] = s.strstart;                                                                                    // 606
      /***/                                                                                                            // 607
    }                                                                                                                  // 608
                                                                                                                       // 609
    /* Find the longest match, discarding those <= prev_length.                                                        // 610
     * At this point we have always match_length < MIN_MATCH                                                           // 611
     */                                                                                                                // 612
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {                          // 613
      /* To simplify the code, we prevent matches with the string                                                      // 614
       * of window index 0 (in particular we have to avoid a match                                                     // 615
       * of the string with itself at the start of the input file).                                                    // 616
       */                                                                                                              // 617
      s.match_length = longest_match(s, hash_head);                                                                    // 618
      /* longest_match() sets match_start */                                                                           // 619
    }                                                                                                                  // 620
    if (s.match_length >= MIN_MATCH) {                                                                                 // 621
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only                                  // 622
                                                                                                                       // 623
      /*** _tr_tally_dist(s, s.strstart - s.match_start,                                                               // 624
                     s.match_length - MIN_MATCH, bflush); ***/                                                         // 625
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);                             // 626
                                                                                                                       // 627
      s.lookahead -= s.match_length;                                                                                   // 628
                                                                                                                       // 629
      /* Insert new strings in the hash table only if the match length                                                 // 630
       * is not too large. This saves time but degrades compression.                                                   // 631
       */                                                                                                              // 632
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {                       // 633
        s.match_length--; /* string at strstart already in table */                                                    // 634
        do {                                                                                                           // 635
          s.strstart++;                                                                                                // 636
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/                                                           // 637
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;                  // 638
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];                                                 // 639
          s.head[s.ins_h] = s.strstart;                                                                                // 640
          /***/                                                                                                        // 641
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are                                                      // 642
           * always MIN_MATCH bytes ahead.                                                                             // 643
           */                                                                                                          // 644
        } while (--s.match_length !== 0);                                                                              // 645
        s.strstart++;                                                                                                  // 646
      } else                                                                                                           // 647
      {                                                                                                                // 648
        s.strstart += s.match_length;                                                                                  // 649
        s.match_length = 0;                                                                                            // 650
        s.ins_h = s.window[s.strstart];                                                                                // 651
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */                                                         // 652
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;                                // 653
                                                                                                                       // 654
//#if MIN_MATCH != 3                                                                                                   // 655
//                Call UPDATE_HASH() MIN_MATCH-3 more times                                                            // 656
//#endif                                                                                                               // 657
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not                                                 // 658
         * matter since it will be recomputed at next deflate call.                                                    // 659
         */                                                                                                            // 660
      }                                                                                                                // 661
    } else {                                                                                                           // 662
      /* No match, output a literal byte */                                                                            // 663
      //Tracevv((stderr,"%c", s.window[s.strstart]));                                                                  // 664
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/                                                        // 665
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);                                                            // 666
                                                                                                                       // 667
      s.lookahead--;                                                                                                   // 668
      s.strstart++;                                                                                                    // 669
    }                                                                                                                  // 670
    if (bflush) {                                                                                                      // 671
      /*** FLUSH_BLOCK(s, 0); ***/                                                                                     // 672
      flush_block_only(s, false);                                                                                      // 673
      if (s.strm.avail_out === 0) {                                                                                    // 674
        return BS_NEED_MORE;                                                                                           // 675
      }                                                                                                                // 676
      /***/                                                                                                            // 677
    }                                                                                                                  // 678
  }                                                                                                                    // 679
  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);                                                // 680
  if (flush === Z_FINISH) {                                                                                            // 681
    /*** FLUSH_BLOCK(s, 1); ***/                                                                                       // 682
    flush_block_only(s, true);                                                                                         // 683
    if (s.strm.avail_out === 0) {                                                                                      // 684
      return BS_FINISH_STARTED;                                                                                        // 685
    }                                                                                                                  // 686
    /***/                                                                                                              // 687
    return BS_FINISH_DONE;                                                                                             // 688
  }                                                                                                                    // 689
  if (s.last_lit) {                                                                                                    // 690
    /*** FLUSH_BLOCK(s, 0); ***/                                                                                       // 691
    flush_block_only(s, false);                                                                                        // 692
    if (s.strm.avail_out === 0) {                                                                                      // 693
      return BS_NEED_MORE;                                                                                             // 694
    }                                                                                                                  // 695
    /***/                                                                                                              // 696
  }                                                                                                                    // 697
  return BS_BLOCK_DONE;                                                                                                // 698
}                                                                                                                      // 699
                                                                                                                       // 700
/* ===========================================================================                                         // 701
 * Same as above, but achieves better compression. We use a lazy                                                       // 702
 * evaluation for matches: a match is finally adopted only if there is                                                 // 703
 * no better match at the next window position.                                                                        // 704
 */                                                                                                                    // 705
function deflate_slow(s, flush) {                                                                                      // 706
  var hash_head;          /* head of hash chain */                                                                     // 707
  var bflush;              /* set if current block must be flushed */                                                  // 708
                                                                                                                       // 709
  var max_insert;                                                                                                      // 710
                                                                                                                       // 711
  /* Process the input block. */                                                                                       // 712
  for (;;) {                                                                                                           // 713
    /* Make sure that we always have enough lookahead, except                                                          // 714
     * at the end of the input file. We need MAX_MATCH bytes                                                           // 715
     * for the next match, plus MIN_MATCH bytes to insert the                                                          // 716
     * string following the next match.                                                                                // 717
     */                                                                                                                // 718
    if (s.lookahead < MIN_LOOKAHEAD) {                                                                                 // 719
      fill_window(s);                                                                                                  // 720
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {                                                       // 721
        return BS_NEED_MORE;                                                                                           // 722
      }                                                                                                                // 723
      if (s.lookahead === 0) { break; } /* flush the current block */                                                  // 724
    }                                                                                                                  // 725
                                                                                                                       // 726
    /* Insert the string window[strstart .. strstart+2] in the                                                         // 727
     * dictionary, and set hash_head to the head of the hash chain:                                                    // 728
     */                                                                                                                // 729
    hash_head = 0/*NIL*/;                                                                                              // 730
    if (s.lookahead >= MIN_MATCH) {                                                                                    // 731
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/                                                               // 732
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;                      // 733
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];                                                     // 734
      s.head[s.ins_h] = s.strstart;                                                                                    // 735
      /***/                                                                                                            // 736
    }                                                                                                                  // 737
                                                                                                                       // 738
    /* Find the longest match, discarding those <= prev_length.                                                        // 739
     */                                                                                                                // 740
    s.prev_length = s.match_length;                                                                                    // 741
    s.prev_match = s.match_start;                                                                                      // 742
    s.match_length = MIN_MATCH-1;                                                                                      // 743
                                                                                                                       // 744
    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&                                                  // 745
        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {                                           // 746
      /* To simplify the code, we prevent matches with the string                                                      // 747
       * of window index 0 (in particular we have to avoid a match                                                     // 748
       * of the string with itself at the start of the input file).                                                    // 749
       */                                                                                                              // 750
      s.match_length = longest_match(s, hash_head);                                                                    // 751
      /* longest_match() sets match_start */                                                                           // 752
                                                                                                                       // 753
      if (s.match_length <= 5 &&                                                                                       // 754
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {
                                                                                                                       // 756
        /* If prev_match is also MIN_MATCH, match_start is garbage                                                     // 757
         * but we will ignore the current match anyway.                                                                // 758
         */                                                                                                            // 759
        s.match_length = MIN_MATCH-1;                                                                                  // 760
      }                                                                                                                // 761
    }                                                                                                                  // 762
    /* If there was a match at the previous step and the current                                                       // 763
     * match is not better, output the previous match:                                                                 // 764
     */                                                                                                                // 765
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {                                               // 766
      max_insert = s.strstart + s.lookahead - MIN_MATCH;                                                               // 767
      /* Do not insert strings in hash table beyond this. */                                                           // 768
                                                                                                                       // 769
      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);                                                     // 770
                                                                                                                       // 771
      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,                                                             // 772
                     s.prev_length - MIN_MATCH, bflush);***/                                                           // 773
      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);                            // 774
      /* Insert in hash table all strings up to the end of the match.                                                  // 775
       * strstart-1 and strstart are already inserted. If there is not                                                 // 776
       * enough lookahead, the last two strings are not inserted in                                                    // 777
       * the hash table.                                                                                               // 778
       */                                                                                                              // 779
      s.lookahead -= s.prev_length-1;                                                                                  // 780
      s.prev_length -= 2;                                                                                              // 781
      do {                                                                                                             // 782
        if (++s.strstart <= max_insert) {                                                                              // 783
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/                                                           // 784
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;                  // 785
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];                                                 // 786
          s.head[s.ins_h] = s.strstart;                                                                                // 787
          /***/                                                                                                        // 788
        }                                                                                                              // 789
      } while (--s.prev_length !== 0);                                                                                 // 790
      s.match_available = 0;                                                                                           // 791
      s.match_length = MIN_MATCH-1;                                                                                    // 792
      s.strstart++;                                                                                                    // 793
                                                                                                                       // 794
      if (bflush) {                                                                                                    // 795
        /*** FLUSH_BLOCK(s, 0); ***/                                                                                   // 796
        flush_block_only(s, false);                                                                                    // 797
        if (s.strm.avail_out === 0) {                                                                                  // 798
          return BS_NEED_MORE;                                                                                         // 799
        }                                                                                                              // 800
        /***/                                                                                                          // 801
      }                                                                                                                // 802
                                                                                                                       // 803
    } else if (s.match_available) {                                                                                    // 804
      /* If there was no match at the previous position, output a                                                      // 805
       * single literal. If there was a match but the current match                                                    // 806
       * is longer, truncate the previous match to a single literal.                                                   // 807
       */                                                                                                              // 808
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));                                                              // 809
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/                                                      // 810
      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);                                                          // 811
                                                                                                                       // 812
      if (bflush) {                                                                                                    // 813
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/                                                                               // 814
        flush_block_only(s, false);                                                                                    // 815
        /***/                                                                                                          // 816
      }                                                                                                                // 817
      s.strstart++;                                                                                                    // 818
      s.lookahead--;                                                                                                   // 819
      if (s.strm.avail_out === 0) {                                                                                    // 820
        return BS_NEED_MORE;                                                                                           // 821
      }                                                                                                                // 822
    } else {                                                                                                           // 823
      /* There is no previous match to compare with, wait for                                                          // 824
       * the next step to decide.                                                                                      // 825
       */                                                                                                              // 826
      s.match_available = 1;                                                                                           // 827
      s.strstart++;                                                                                                    // 828
      s.lookahead--;                                                                                                   // 829
    }                                                                                                                  // 830
  }                                                                                                                    // 831
  //Assert (flush != Z_NO_FLUSH, "no flush?");                                                                         // 832
  if (s.match_available) {                                                                                             // 833
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));                                                                // 834
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/                                                        // 835
    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);                                                            // 836
                                                                                                                       // 837
    s.match_available = 0;                                                                                             // 838
  }                                                                                                                    // 839
  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;                                                      // 840
  if (flush === Z_FINISH) {                                                                                            // 841
    /*** FLUSH_BLOCK(s, 1); ***/                                                                                       // 842
    flush_block_only(s, true);                                                                                         // 843
    if (s.strm.avail_out === 0) {                                                                                      // 844
      return BS_FINISH_STARTED;                                                                                        // 845
    }                                                                                                                  // 846
    /***/                                                                                                              // 847
    return BS_FINISH_DONE;                                                                                             // 848
  }                                                                                                                    // 849
  if (s.last_lit) {                                                                                                    // 850
    /*** FLUSH_BLOCK(s, 0); ***/                                                                                       // 851
    flush_block_only(s, false);                                                                                        // 852
    if (s.strm.avail_out === 0) {                                                                                      // 853
      return BS_NEED_MORE;                                                                                             // 854
    }                                                                                                                  // 855
    /***/                                                                                                              // 856
  }                                                                                                                    // 857
                                                                                                                       // 858
  return BS_BLOCK_DONE;                                                                                                // 859
}                                                                                                                      // 860
                                                                                                                       // 861
                                                                                                                       // 862
/* ===========================================================================                                         // 863
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance                                         // 864
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of                                         // 865
 * deflate switches away from Z_RLE.)                                                                                  // 866
 */                                                                                                                    // 867
function deflate_rle(s, flush) {                                                                                       // 868
  var bflush;            /* set if current block must be flushed */                                                    // 869
  var prev;              /* byte at distance one to match */                                                           // 870
  var scan, strend;      /* scan goes up to strend for length of run */                                                // 871
                                                                                                                       // 872
  var _win = s.window;                                                                                                 // 873
                                                                                                                       // 874
  for (;;) {                                                                                                           // 875
    /* Make sure that we always have enough lookahead, except                                                          // 876
     * at the end of the input file. We need MAX_MATCH bytes                                                           // 877
     * for the longest run, plus one for the unrolled loop.                                                            // 878
     */                                                                                                                // 879
    if (s.lookahead <= MAX_MATCH) {                                                                                    // 880
      fill_window(s);                                                                                                  // 881
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {                                                          // 882
        return BS_NEED_MORE;                                                                                           // 883
      }                                                                                                                // 884
      if (s.lookahead === 0) { break; } /* flush the current block */                                                  // 885
    }                                                                                                                  // 886
                                                                                                                       // 887
    /* See how many times the previous byte repeats */                                                                 // 888
    s.match_length = 0;                                                                                                // 889
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {                                                                  // 890
      scan = s.strstart - 1;                                                                                           // 891
      prev = _win[scan];                                                                                               // 892
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {                                   // 893
        strend = s.strstart + MAX_MATCH;                                                                               // 894
        do {                                                                                                           // 895
          /*jshint noempty:false*/                                                                                     // 896
        } while (prev === _win[++scan] && prev === _win[++scan] &&                                                     // 897
                 prev === _win[++scan] && prev === _win[++scan] &&                                                     // 898
                 prev === _win[++scan] && prev === _win[++scan] &&                                                     // 899
                 prev === _win[++scan] && prev === _win[++scan] &&                                                     // 900
                 scan < strend);                                                                                       // 901
        s.match_length = MAX_MATCH - (strend - scan);                                                                  // 902
        if (s.match_length > s.lookahead) {                                                                            // 903
          s.match_length = s.lookahead;                                                                                // 904
        }                                                                                                              // 905
      }                                                                                                                // 906
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");                                               // 907
    }                                                                                                                  // 908
                                                                                                                       // 909
    /* Emit match if have run of MIN_MATCH or longer, else emit literal */                                             // 910
    if (s.match_length >= MIN_MATCH) {                                                                                 // 911
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);                                                    // 912
                                                                                                                       // 913
      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/                                              // 914
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);                                                      // 915
                                                                                                                       // 916
      s.lookahead -= s.match_length;                                                                                   // 917
      s.strstart += s.match_length;                                                                                    // 918
      s.match_length = 0;                                                                                              // 919
    } else {                                                                                                           // 920
      /* No match, output a literal byte */                                                                            // 921
      //Tracevv((stderr,"%c", s->window[s->strstart]));                                                                // 922
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/                                                        // 923
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);                                                            // 924
                                                                                                                       // 925
      s.lookahead--;                                                                                                   // 926
      s.strstart++;                                                                                                    // 927
    }                                                                                                                  // 928
    if (bflush) {                                                                                                      // 929
      /*** FLUSH_BLOCK(s, 0); ***/                                                                                     // 930
      flush_block_only(s, false);                                                                                      // 931
      if (s.strm.avail_out === 0) {                                                                                    // 932
        return BS_NEED_MORE;                                                                                           // 933
      }                                                                                                                // 934
      /***/                                                                                                            // 935
    }                                                                                                                  // 936
  }                                                                                                                    // 937
  s.insert = 0;                                                                                                        // 938
  if (flush === Z_FINISH) {                                                                                            // 939
    /*** FLUSH_BLOCK(s, 1); ***/                                                                                       // 940
    flush_block_only(s, true);                                                                                         // 941
    if (s.strm.avail_out === 0) {                                                                                      // 942
      return BS_FINISH_STARTED;                                                                                        // 943
    }                                                                                                                  // 944
    /***/                                                                                                              // 945
    return BS_FINISH_DONE;                                                                                             // 946
  }                                                                                                                    // 947
  if (s.last_lit) {                                                                                                    // 948
    /*** FLUSH_BLOCK(s, 0); ***/                                                                                       // 949
    flush_block_only(s, false);                                                                                        // 950
    if (s.strm.avail_out === 0) {                                                                                      // 951
      return BS_NEED_MORE;                                                                                             // 952
    }                                                                                                                  // 953
    /***/                                                                                                              // 954
  }                                                                                                                    // 955
  return BS_BLOCK_DONE;                                                                                                // 956
}                                                                                                                      // 957
                                                                                                                       // 958
/* ===========================================================================                                         // 959
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.                                         // 960
 * (It will be regenerated if this run of deflate switches away from Huffman.)                                         // 961
 */                                                                                                                    // 962
function deflate_huff(s, flush) {                                                                                      // 963
  var bflush;             /* set if current block must be flushed */                                                   // 964
                                                                                                                       // 965
  for (;;) {                                                                                                           // 966
    /* Make sure that we have a literal to write. */                                                                   // 967
    if (s.lookahead === 0) {                                                                                           // 968
      fill_window(s);                                                                                                  // 969
      if (s.lookahead === 0) {                                                                                         // 970
        if (flush === Z_NO_FLUSH) {                                                                                    // 971
          return BS_NEED_MORE;                                                                                         // 972
        }                                                                                                              // 973
        break;      /* flush the current block */                                                                      // 974
      }                                                                                                                // 975
    }                                                                                                                  // 976
                                                                                                                       // 977
    /* Output a literal byte */                                                                                        // 978
    s.match_length = 0;                                                                                                // 979
    //Tracevv((stderr,"%c", s->window[s->strstart]));                                                                  // 980
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/                                                          // 981
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);                                                              // 982
    s.lookahead--;                                                                                                     // 983
    s.strstart++;                                                                                                      // 984
    if (bflush) {                                                                                                      // 985
      /*** FLUSH_BLOCK(s, 0); ***/                                                                                     // 986
      flush_block_only(s, false);                                                                                      // 987
      if (s.strm.avail_out === 0) {                                                                                    // 988
        return BS_NEED_MORE;                                                                                           // 989
      }                                                                                                                // 990
      /***/                                                                                                            // 991
    }                                                                                                                  // 992
  }                                                                                                                    // 993
  s.insert = 0;                                                                                                        // 994
  if (flush === Z_FINISH) {                                                                                            // 995
    /*** FLUSH_BLOCK(s, 1); ***/                                                                                       // 996
    flush_block_only(s, true);                                                                                         // 997
    if (s.strm.avail_out === 0) {                                                                                      // 998
      return BS_FINISH_STARTED;                                                                                        // 999
    }                                                                                                                  // 1000
    /***/                                                                                                              // 1001
    return BS_FINISH_DONE;                                                                                             // 1002
  }                                                                                                                    // 1003
  if (s.last_lit) {                                                                                                    // 1004
    /*** FLUSH_BLOCK(s, 0); ***/                                                                                       // 1005
    flush_block_only(s, false);                                                                                        // 1006
    if (s.strm.avail_out === 0) {                                                                                      // 1007
      return BS_NEED_MORE;                                                                                             // 1008
    }                                                                                                                  // 1009
    /***/                                                                                                              // 1010
  }                                                                                                                    // 1011
  return BS_BLOCK_DONE;                                                                                                // 1012
}                                                                                                                      // 1013
                                                                                                                       // 1014
/* Values for max_lazy_match, good_match and max_chain_length, depending on                                            // 1015
 * the desired pack level (0..9). The values given below have been tuned to                                            // 1016
 * exclude worst case performance for pathological files. Better values may be                                         // 1017
 * found for specific files.                                                                                           // 1018
 */                                                                                                                    // 1019
var Config = function (good_length, max_lazy, nice_length, max_chain, func) {                                          // 1020
  this.good_length = good_length;                                                                                      // 1021
  this.max_lazy = max_lazy;                                                                                            // 1022
  this.nice_length = nice_length;                                                                                      // 1023
  this.max_chain = max_chain;                                                                                          // 1024
  this.func = func;                                                                                                    // 1025
};                                                                                                                     // 1026
                                                                                                                       // 1027
var configuration_table;                                                                                               // 1028
                                                                                                                       // 1029
configuration_table = [                                                                                                // 1030
  /*      good lazy nice chain */                                                                                      // 1031
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */                                                  // 1032
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */                                  // 1033
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */                                                             // 1034
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */                                                             // 1035
                                                                                                                       // 1036
  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */                                                // 1037
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */                                                             // 1038
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */                                                             // 1039
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */                                                             // 1040
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */                                                             // 1041
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */                                             // 1042
];                                                                                                                     // 1043
                                                                                                                       // 1044
                                                                                                                       // 1045
/* ===========================================================================                                         // 1046
 * Initialize the "longest match" routines for a new zlib stream                                                       // 1047
 */                                                                                                                    // 1048
function lm_init(s) {                                                                                                  // 1049
  s.window_size = 2 * s.w_size;                                                                                        // 1050
                                                                                                                       // 1051
  /*** CLEAR_HASH(s); ***/                                                                                             // 1052
  zero(s.head); // Fill with NIL (= 0);                                                                                // 1053
                                                                                                                       // 1054
  /* Set the default configuration parameters:                                                                         // 1055
   */                                                                                                                  // 1056
  s.max_lazy_match = configuration_table[s.level].max_lazy;                                                            // 1057
  s.good_match = configuration_table[s.level].good_length;                                                             // 1058
  s.nice_match = configuration_table[s.level].nice_length;                                                             // 1059
  s.max_chain_length = configuration_table[s.level].max_chain;                                                         // 1060
                                                                                                                       // 1061
  s.strstart = 0;                                                                                                      // 1062
  s.block_start = 0;                                                                                                   // 1063
  s.lookahead = 0;                                                                                                     // 1064
  s.insert = 0;                                                                                                        // 1065
  s.match_length = s.prev_length = MIN_MATCH - 1;                                                                      // 1066
  s.match_available = 0;                                                                                               // 1067
  s.ins_h = 0;                                                                                                         // 1068
}                                                                                                                      // 1069
                                                                                                                       // 1070
                                                                                                                       // 1071
function DeflateState() {                                                                                              // 1072
  this.strm = null;            /* pointer back to this zlib stream */                                                  // 1073
  this.status = 0;            /* as the name implies */                                                                // 1074
  this.pending_buf = null;      /* output still pending */                                                             // 1075
  this.pending_buf_size = 0;  /* size of pending_buf */                                                                // 1076
  this.pending_out = 0;       /* next pending byte to output to the stream */                                          // 1077
  this.pending = 0;           /* nb of bytes in the pending buffer */                                                  // 1078
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */                                           // 1079
  this.gzhead = null;         /* gzip header information to write */                                                   // 1080
  this.gzindex = 0;           /* where in extra, name, or comment */                                                   // 1081
  this.method = Z_DEFLATED; /* can only be DEFLATED */                                                                 // 1082
  this.last_flush = -1;   /* value of flush param for previous deflate call */                                         // 1083
                                                                                                                       // 1084
  this.w_size = 0;  /* LZ77 window size (32K by default) */                                                            // 1085
  this.w_bits = 0;  /* log2(w_size)  (8..16) */                                                                        // 1086
  this.w_mask = 0;  /* w_size - 1 */                                                                                   // 1087
                                                                                                                       // 1088
  this.window = null;                                                                                                  // 1089
  /* Sliding window. Input bytes are read into the second half of the window,                                          // 1090
   * and move to the first half later to keep a dictionary of at least wSize                                           // 1091
   * bytes. With this organization, matches are limited to a distance of                                               // 1092
   * wSize-MAX_MATCH bytes, but this ensures that IO is always                                                         // 1093
   * performed with a length multiple of the block size.                                                               // 1094
   */                                                                                                                  // 1095
                                                                                                                       // 1096
  this.window_size = 0;                                                                                                // 1097
  /* Actual size of window: 2*wSize, except when the user input buffer                                                 // 1098
   * is directly used as sliding window.                                                                               // 1099
   */                                                                                                                  // 1100
                                                                                                                       // 1101
  this.prev = null;                                                                                                    // 1102
  /* Link to older string with same hash index. To limit the size of this                                              // 1103
   * array to 64K, this link is maintained only for the last 32K strings.                                              // 1104
   * An index in this array is thus a window index modulo 32K.                                                         // 1105
   */                                                                                                                  // 1106
                                                                                                                       // 1107
  this.head = null;   /* Heads of the hash chains or NIL. */                                                           // 1108
                                                                                                                       // 1109
  this.ins_h = 0;       /* hash index of string to be inserted */                                                      // 1110
  this.hash_size = 0;   /* number of elements in hash table */                                                         // 1111
  this.hash_bits = 0;   /* log2(hash_size) */                                                                          // 1112
  this.hash_mask = 0;   /* hash_size-1 */                                                                              // 1113
                                                                                                                       // 1114
  this.hash_shift = 0;                                                                                                 // 1115
  /* Number of bits by which ins_h must be shifted at each input                                                       // 1116
   * step. It must be such that after MIN_MATCH steps, the oldest                                                      // 1117
   * byte no longer takes part in the hash key, that is:                                                               // 1118
   *   hash_shift * MIN_MATCH >= hash_bits                                                                             // 1119
   */                                                                                                                  // 1120
                                                                                                                       // 1121
  this.block_start = 0;                                                                                                // 1122
  /* Window position at the beginning of the current output block. Gets                                                // 1123
   * negative when the window is moved backwards.                                                                      // 1124
   */                                                                                                                  // 1125
                                                                                                                       // 1126
  this.match_length = 0;      /* length of best match */                                                               // 1127
  this.prev_match = 0;        /* previous match */                                                                     // 1128
  this.match_available = 0;   /* set if previous match exists */                                                       // 1129
  this.strstart = 0;          /* start of string to insert */                                                          // 1130
  this.match_start = 0;       /* start of matching string */                                                           // 1131
  this.lookahead = 0;         /* number of valid bytes ahead in window */                                              // 1132
                                                                                                                       // 1133
  this.prev_length = 0;                                                                                                // 1134
  /* Length of the best match at previous step. Matches not greater than this                                          // 1135
   * are discarded. This is used in the lazy match evaluation.                                                         // 1136
   */                                                                                                                  // 1137
                                                                                                                       // 1138
  this.max_chain_length = 0;                                                                                           // 1139
  /* To speed up deflation, hash chains are never searched beyond this                                                 // 1140
   * length.  A higher limit improves compression ratio but degrades the                                               // 1141
   * speed.                                                                                                            // 1142
   */                                                                                                                  // 1143
                                                                                                                       // 1144
  this.max_lazy_match = 0;                                                                                             // 1145
  /* Attempt to find a better match only when the current match is strictly                                            // 1146
   * smaller than this value. This mechanism is used only for compression                                              // 1147
   * levels >= 4.                                                                                                      // 1148
   */                                                                                                                  // 1149
  // That's alias to max_lazy_match, don't use directly                                                                // 1150
  //this.max_insert_length = 0;                                                                                        // 1151
  /* Insert new strings in the hash table only if the match length is not                                              // 1152
   * greater than this length. This saves time but degrades compression.                                               // 1153
   * max_insert_length is used only for compression levels <= 3.                                                       // 1154
   */                                                                                                                  // 1155
                                                                                                                       // 1156
  this.level = 0;     /* compression level (1..9) */                                                                   // 1157
  this.strategy = 0;  /* favor or force Huffman coding*/                                                               // 1158
                                                                                                                       // 1159
  this.good_match = 0;                                                                                                 // 1160
  /* Use a faster search when the previous match is longer than this */                                                // 1161
                                                                                                                       // 1162
  this.nice_match = 0; /* Stop searching when current match exceeds this */                                            // 1163
                                                                                                                       // 1164
              /* used by trees.c: */                                                                                   // 1165
                                                                                                                       // 1166
  /* Didn't use ct_data typedef below to suppress compiler warning */                                                  // 1167
                                                                                                                       // 1168
  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */                                            // 1169
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */                                                      // 1170
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */                                       // 1171
                                                                                                                       // 1172
  // Use flat array of DOUBLE size, with interleaved fata,                                                             // 1173
  // because JS does not support effective                                                                             // 1174
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);                                                                    // 1175
  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);                                                                // 1176
  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);                                                               // 1177
  zero(this.dyn_ltree);                                                                                                // 1178
  zero(this.dyn_dtree);                                                                                                // 1179
  zero(this.bl_tree);                                                                                                  // 1180
                                                                                                                       // 1181
  this.l_desc   = null;         /* desc. for literal tree */                                                           // 1182
  this.d_desc   = null;         /* desc. for distance tree */                                                          // 1183
  this.bl_desc  = null;         /* desc. for bit length tree */                                                        // 1184
                                                                                                                       // 1185
  //ush bl_count[MAX_BITS+1];                                                                                          // 1186
  this.bl_count = new utils.Buf16(MAX_BITS+1);                                                                         // 1187
  /* number of codes at each bit length for an optimal tree */                                                         // 1188
                                                                                                                       // 1189
  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */                                             // 1190
  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */                                // 1191
  zero(this.heap);                                                                                                     // 1192
                                                                                                                       // 1193
  this.heap_len = 0;               /* number of elements in the heap */                                                // 1194
  this.heap_max = 0;               /* element of largest frequency */                                                  // 1195
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.                                           // 1196
   * The same heap array is used to build all trees.                                                                   // 1197
   */                                                                                                                  // 1198
                                                                                                                       // 1199
  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];                                                 // 1200
  zero(this.depth);                                                                                                    // 1201
  /* Depth of each subtree used as tie breaker for trees of equal frequency                                            // 1202
   */                                                                                                                  // 1203
                                                                                                                       // 1204
  this.l_buf = 0;          /* buffer index for literals or lengths */                                                  // 1205
                                                                                                                       // 1206
  this.lit_bufsize = 0;                                                                                                // 1207
  /* Size of match buffer for literals/lengths.  There are 4 reasons for                                               // 1208
   * limiting lit_bufsize to 64K:                                                                                      // 1209
   *   - frequencies can be kept in 16 bit counters                                                                    // 1210
   *   - if compression is not successful for the first block, all input                                               // 1211
   *     data is still in the window so we can still emit a stored block even                                          // 1212
   *     when input comes from standard input.  (This can also be done for                                             // 1213
   *     all blocks if lit_bufsize is not greater than 32K.)                                                           // 1214
   *   - if compression is not successful for a file smaller than 64K, we can                                          // 1215
   *     even emit a stored file instead of a stored block (saving 5 bytes).                                           // 1216
   *     This is applicable only for zip (not gzip or zlib).                                                           // 1217
   *   - creating new Huffman trees less frequently may not provide fast                                               // 1218
   *     adaptation to changes in the input data statistics. (Take for                                                 // 1219
   *     example a binary file with poorly compressible code followed by                                               // 1220
   *     a highly compressible string table.) Smaller buffer sizes give                                                // 1221
   *     fast adaptation but have of course the overhead of transmitting                                               // 1222
   *     trees more frequently.                                                                                        // 1223
   *   - I can't count above 4                                                                                         // 1224
   */                                                                                                                  // 1225
                                                                                                                       // 1226
  this.last_lit = 0;      /* running index in l_buf */                                                                 // 1227
                                                                                                                       // 1228
  this.d_buf = 0;                                                                                                      // 1229
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have                                            // 1230
   * the same number of elements. To use different lengths, an extra flag                                              // 1231
   * array would be necessary.                                                                                         // 1232
   */                                                                                                                  // 1233
                                                                                                                       // 1234
  this.opt_len = 0;       /* bit length of current block with optimal trees */                                         // 1235
  this.static_len = 0;    /* bit length of current block with static trees */                                          // 1236
  this.matches = 0;       /* number of string matches in current block */                                              // 1237
  this.insert = 0;        /* bytes at end of window left to insert */                                                  // 1238
                                                                                                                       // 1239
                                                                                                                       // 1240
  this.bi_buf = 0;                                                                                                     // 1241
  /* Output buffer. bits are inserted starting at the bottom (least                                                    // 1242
   * significant bits).                                                                                                // 1243
   */                                                                                                                  // 1244
  this.bi_valid = 0;                                                                                                   // 1245
  /* Number of valid bits in bi_buf.  All bits above the last valid bit                                                // 1246
   * are always zero.                                                                                                  // 1247
   */                                                                                                                  // 1248
                                                                                                                       // 1249
  // Used for window memory init. We safely ignore it for JS. That makes                                               // 1250
  // sense only for pointers and memory check tools.                                                                   // 1251
  //this.high_water = 0;                                                                                               // 1252
  /* High water mark offset in window for initialized bytes -- bytes above                                             // 1253
   * this are set to zero in order to avoid memory check warnings when                                                 // 1254
   * longest match routines access bytes past the input.  This is then                                                 // 1255
   * updated to the new high water mark.                                                                               // 1256
   */                                                                                                                  // 1257
}                                                                                                                      // 1258
                                                                                                                       // 1259
                                                                                                                       // 1260
function deflateResetKeep(strm) {                                                                                      // 1261
  var s;                                                                                                               // 1262
                                                                                                                       // 1263
  if (!strm || !strm.state) {                                                                                          // 1264
    return err(strm, Z_STREAM_ERROR);                                                                                  // 1265
  }                                                                                                                    // 1266
                                                                                                                       // 1267
  strm.total_in = strm.total_out = 0;                                                                                  // 1268
  strm.data_type = Z_UNKNOWN;                                                                                          // 1269
                                                                                                                       // 1270
  s = strm.state;                                                                                                      // 1271
  s.pending = 0;                                                                                                       // 1272
  s.pending_out = 0;                                                                                                   // 1273
                                                                                                                       // 1274
  if (s.wrap < 0) {                                                                                                    // 1275
    s.wrap = -s.wrap;                                                                                                  // 1276
    /* was made negative by deflate(..., Z_FINISH); */                                                                 // 1277
  }                                                                                                                    // 1278
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);                                                                       // 1279
  strm.adler = (s.wrap === 2) ?                                                                                        // 1280
    0  // crc32(0, Z_NULL, 0)                                                                                          // 1281
  :                                                                                                                    // 1282
    1; // adler32(0, Z_NULL, 0)                                                                                        // 1283
  s.last_flush = Z_NO_FLUSH;                                                                                           // 1284
  trees._tr_init(s);                                                                                                   // 1285
  return Z_OK;                                                                                                         // 1286
}                                                                                                                      // 1287
                                                                                                                       // 1288
                                                                                                                       // 1289
function deflateReset(strm) {                                                                                          // 1290
  var ret = deflateResetKeep(strm);                                                                                    // 1291
  if (ret === Z_OK) {                                                                                                  // 1292
    lm_init(strm.state);                                                                                               // 1293
  }                                                                                                                    // 1294
  return ret;                                                                                                          // 1295
}                                                                                                                      // 1296
                                                                                                                       // 1297
                                                                                                                       // 1298
function deflateSetHeader(strm, head) {                                                                                // 1299
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }                                                                 // 1300
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }                                                                // 1301
  strm.state.gzhead = head;                                                                                            // 1302
  return Z_OK;                                                                                                         // 1303
}                                                                                                                      // 1304
                                                                                                                       // 1305
                                                                                                                       // 1306
function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {                                           // 1307
  if (!strm) { // === Z_NULL                                                                                           // 1308
    return Z_STREAM_ERROR;                                                                                             // 1309
  }                                                                                                                    // 1310
  var wrap = 1;                                                                                                        // 1311
                                                                                                                       // 1312
  if (level === Z_DEFAULT_COMPRESSION) {                                                                               // 1313
    level = 6;                                                                                                         // 1314
  }                                                                                                                    // 1315
                                                                                                                       // 1316
  if (windowBits < 0) { /* suppress zlib wrapper */                                                                    // 1317
    wrap = 0;                                                                                                          // 1318
    windowBits = -windowBits;                                                                                          // 1319
  }                                                                                                                    // 1320
                                                                                                                       // 1321
  else if (windowBits > 15) {                                                                                          // 1322
    wrap = 2;           /* write gzip wrapper instead */                                                               // 1323
    windowBits -= 16;                                                                                                  // 1324
  }                                                                                                                    // 1325
                                                                                                                       // 1326
                                                                                                                       // 1327
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||                                             // 1328
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||                                                     // 1329
    strategy < 0 || strategy > Z_FIXED) {                                                                              // 1330
    return err(strm, Z_STREAM_ERROR);                                                                                  // 1331
  }                                                                                                                    // 1332
                                                                                                                       // 1333
                                                                                                                       // 1334
  if (windowBits === 8) {                                                                                              // 1335
    windowBits = 9;                                                                                                    // 1336
  }                                                                                                                    // 1337
  /* until 256-byte window bug fixed */                                                                                // 1338
                                                                                                                       // 1339
  var s = new DeflateState();                                                                                          // 1340
                                                                                                                       // 1341
  strm.state = s;                                                                                                      // 1342
  s.strm = strm;                                                                                                       // 1343
                                                                                                                       // 1344
  s.wrap = wrap;                                                                                                       // 1345
  s.gzhead = null;                                                                                                     // 1346
  s.w_bits = windowBits;                                                                                               // 1347
  s.w_size = 1 << s.w_bits;                                                                                            // 1348
  s.w_mask = s.w_size - 1;                                                                                             // 1349
                                                                                                                       // 1350
  s.hash_bits = memLevel + 7;                                                                                          // 1351
  s.hash_size = 1 << s.hash_bits;                                                                                      // 1352
  s.hash_mask = s.hash_size - 1;                                                                                       // 1353
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);                                                        // 1354
                                                                                                                       // 1355
  s.window = new utils.Buf8(s.w_size * 2);                                                                             // 1356
  s.head = new utils.Buf16(s.hash_size);                                                                               // 1357
  s.prev = new utils.Buf16(s.w_size);                                                                                  // 1358
                                                                                                                       // 1359
  // Don't need mem init magic for JS.                                                                                 // 1360
  //s.high_water = 0;  /* nothing written to s->window yet */                                                          // 1361
                                                                                                                       // 1362
  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */                                                   // 1363
                                                                                                                       // 1364
  s.pending_buf_size = s.lit_bufsize * 4;                                                                              // 1365
  s.pending_buf = new utils.Buf8(s.pending_buf_size);                                                                  // 1366
                                                                                                                       // 1367
  s.d_buf = s.lit_bufsize >> 1;                                                                                        // 1368
  s.l_buf = (1 + 2) * s.lit_bufsize;                                                                                   // 1369
                                                                                                                       // 1370
  s.level = level;                                                                                                     // 1371
  s.strategy = strategy;                                                                                               // 1372
  s.method = method;                                                                                                   // 1373
                                                                                                                       // 1374
  return deflateReset(strm);                                                                                           // 1375
}                                                                                                                      // 1376
                                                                                                                       // 1377
function deflateInit(strm, level) {                                                                                    // 1378
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);                          // 1379
}                                                                                                                      // 1380
                                                                                                                       // 1381
                                                                                                                       // 1382
function deflate(strm, flush) {                                                                                        // 1383
  var old_flush, s;                                                                                                    // 1384
  var beg, val; // for gzip header write only                                                                          // 1385
                                                                                                                       // 1386
  if (!strm || !strm.state ||                                                                                          // 1387
    flush > Z_BLOCK || flush < 0) {                                                                                    // 1388
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;                                                          // 1389
  }                                                                                                                    // 1390
                                                                                                                       // 1391
  s = strm.state;                                                                                                      // 1392
                                                                                                                       // 1393
  if (!strm.output ||                                                                                                  // 1394
      (!strm.input && strm.avail_in !== 0) ||                                                                          // 1395
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {                                                             // 1396
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);                                           // 1397
  }                                                                                                                    // 1398
                                                                                                                       // 1399
  s.strm = strm; /* just in case */                                                                                    // 1400
  old_flush = s.last_flush;                                                                                            // 1401
  s.last_flush = flush;                                                                                                // 1402
                                                                                                                       // 1403
  /* Write the header */                                                                                               // 1404
  if (s.status === INIT_STATE) {                                                                                       // 1405
                                                                                                                       // 1406
    if (s.wrap === 2) { // GZIP header                                                                                 // 1407
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);                                                                         // 1408
      put_byte(s, 31);                                                                                                 // 1409
      put_byte(s, 139);                                                                                                // 1410
      put_byte(s, 8);                                                                                                  // 1411
      if (!s.gzhead) { // s->gzhead == Z_NULL                                                                          // 1412
        put_byte(s, 0);                                                                                                // 1413
        put_byte(s, 0);                                                                                                // 1414
        put_byte(s, 0);                                                                                                // 1415
        put_byte(s, 0);                                                                                                // 1416
        put_byte(s, 0);                                                                                                // 1417
        put_byte(s, s.level === 9 ? 2 :                                                                                // 1418
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?                                                     // 1419
                     4 : 0));                                                                                          // 1420
        put_byte(s, OS_CODE);                                                                                          // 1421
        s.status = BUSY_STATE;                                                                                         // 1422
      }                                                                                                                // 1423
      else {                                                                                                           // 1424
        put_byte(s, (s.gzhead.text ? 1 : 0) +                                                                          // 1425
                    (s.gzhead.hcrc ? 2 : 0) +                                                                          // 1426
                    (!s.gzhead.extra ? 0 : 4) +                                                                        // 1427
                    (!s.gzhead.name ? 0 : 8) +                                                                         // 1428
                    (!s.gzhead.comment ? 0 : 16)                                                                       // 1429
                );                                                                                                     // 1430
        put_byte(s, s.gzhead.time & 0xff);                                                                             // 1431
        put_byte(s, (s.gzhead.time >> 8) & 0xff);                                                                      // 1432
        put_byte(s, (s.gzhead.time >> 16) & 0xff);                                                                     // 1433
        put_byte(s, (s.gzhead.time >> 24) & 0xff);                                                                     // 1434
        put_byte(s, s.level === 9 ? 2 :                                                                                // 1435
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?                                                     // 1436
                     4 : 0));                                                                                          // 1437
        put_byte(s, s.gzhead.os & 0xff);                                                                               // 1438
        if (s.gzhead.extra && s.gzhead.extra.length) {                                                                 // 1439
          put_byte(s, s.gzhead.extra.length & 0xff);                                                                   // 1440
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);                                                            // 1441
        }                                                                                                              // 1442
        if (s.gzhead.hcrc) {                                                                                           // 1443
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);                                                 // 1444
        }                                                                                                              // 1445
        s.gzindex = 0;                                                                                                 // 1446
        s.status = EXTRA_STATE;                                                                                        // 1447
      }                                                                                                                // 1448
    }                                                                                                                  // 1449
    else // DEFLATE header                                                                                             // 1450
    {                                                                                                                  // 1451
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;                                                          // 1452
      var level_flags = -1;                                                                                            // 1453
                                                                                                                       // 1454
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {                                                               // 1455
        level_flags = 0;                                                                                               // 1456
      } else if (s.level < 6) {                                                                                        // 1457
        level_flags = 1;                                                                                               // 1458
      } else if (s.level === 6) {                                                                                      // 1459
        level_flags = 2;                                                                                               // 1460
      } else {                                                                                                         // 1461
        level_flags = 3;                                                                                               // 1462
      }                                                                                                                // 1463
      header |= (level_flags << 6);                                                                                    // 1464
      if (s.strstart !== 0) { header |= PRESET_DICT; }                                                                 // 1465
      header += 31 - (header % 31);                                                                                    // 1466
                                                                                                                       // 1467
      s.status = BUSY_STATE;                                                                                           // 1468
      putShortMSB(s, header);                                                                                          // 1469
                                                                                                                       // 1470
      /* Save the adler32 of the preset dictionary: */                                                                 // 1471
      if (s.strstart !== 0) {                                                                                          // 1472
        putShortMSB(s, strm.adler >>> 16);                                                                             // 1473
        putShortMSB(s, strm.adler & 0xffff);                                                                           // 1474
      }                                                                                                                // 1475
      strm.adler = 1; // adler32(0L, Z_NULL, 0);                                                                       // 1476
    }                                                                                                                  // 1477
  }                                                                                                                    // 1478
                                                                                                                       // 1479
//#ifdef GZIP                                                                                                          // 1480
  if (s.status === EXTRA_STATE) {                                                                                      // 1481
    if (s.gzhead.extra/* != Z_NULL*/) {                                                                                // 1482
      beg = s.pending;  /* start of bytes to update crc */                                                             // 1483
                                                                                                                       // 1484
      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {                                                           // 1485
        if (s.pending === s.pending_buf_size) {                                                                        // 1486
          if (s.gzhead.hcrc && s.pending > beg) {                                                                      // 1487
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);                                       // 1488
          }                                                                                                            // 1489
          flush_pending(strm);                                                                                         // 1490
          beg = s.pending;                                                                                             // 1491
          if (s.pending === s.pending_buf_size) {                                                                      // 1492
            break;                                                                                                     // 1493
          }                                                                                                            // 1494
        }                                                                                                              // 1495
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);                                                                 // 1496
        s.gzindex++;                                                                                                   // 1497
      }                                                                                                                // 1498
      if (s.gzhead.hcrc && s.pending > beg) {                                                                          // 1499
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);                                           // 1500
      }                                                                                                                // 1501
      if (s.gzindex === s.gzhead.extra.length) {                                                                       // 1502
        s.gzindex = 0;                                                                                                 // 1503
        s.status = NAME_STATE;                                                                                         // 1504
      }                                                                                                                // 1505
    }                                                                                                                  // 1506
    else {                                                                                                             // 1507
      s.status = NAME_STATE;                                                                                           // 1508
    }                                                                                                                  // 1509
  }                                                                                                                    // 1510
  if (s.status === NAME_STATE) {                                                                                       // 1511
    if (s.gzhead.name/* != Z_NULL*/) {                                                                                 // 1512
      beg = s.pending;  /* start of bytes to update crc */                                                             // 1513
      //int val;                                                                                                       // 1514
                                                                                                                       // 1515
      do {                                                                                                             // 1516
        if (s.pending === s.pending_buf_size) {                                                                        // 1517
          if (s.gzhead.hcrc && s.pending > beg) {                                                                      // 1518
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);                                       // 1519
          }                                                                                                            // 1520
          flush_pending(strm);                                                                                         // 1521
          beg = s.pending;                                                                                             // 1522
          if (s.pending === s.pending_buf_size) {                                                                      // 1523
            val = 1;                                                                                                   // 1524
            break;                                                                                                     // 1525
          }                                                                                                            // 1526
        }                                                                                                              // 1527
        // JS specific: little magic to add zero terminator to end of string                                           // 1528
        if (s.gzindex < s.gzhead.name.length) {                                                                        // 1529
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;                                                          // 1530
        } else {                                                                                                       // 1531
          val = 0;                                                                                                     // 1532
        }                                                                                                              // 1533
        put_byte(s, val);                                                                                              // 1534
      } while (val !== 0);                                                                                             // 1535
                                                                                                                       // 1536
      if (s.gzhead.hcrc && s.pending > beg) {                                                                          // 1537
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);                                           // 1538
      }                                                                                                                // 1539
      if (val === 0) {                                                                                                 // 1540
        s.gzindex = 0;                                                                                                 // 1541
        s.status = COMMENT_STATE;                                                                                      // 1542
      }                                                                                                                // 1543
    }                                                                                                                  // 1544
    else {                                                                                                             // 1545
      s.status = COMMENT_STATE;                                                                                        // 1546
    }                                                                                                                  // 1547
  }                                                                                                                    // 1548
  if (s.status === COMMENT_STATE) {                                                                                    // 1549
    if (s.gzhead.comment/* != Z_NULL*/) {                                                                              // 1550
      beg = s.pending;  /* start of bytes to update crc */                                                             // 1551
      //int val;                                                                                                       // 1552
                                                                                                                       // 1553
      do {                                                                                                             // 1554
        if (s.pending === s.pending_buf_size) {                                                                        // 1555
          if (s.gzhead.hcrc && s.pending > beg) {                                                                      // 1556
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);                                       // 1557
          }                                                                                                            // 1558
          flush_pending(strm);                                                                                         // 1559
          beg = s.pending;                                                                                             // 1560
          if (s.pending === s.pending_buf_size) {                                                                      // 1561
            val = 1;                                                                                                   // 1562
            break;                                                                                                     // 1563
          }                                                                                                            // 1564
        }                                                                                                              // 1565
        // JS specific: little magic to add zero terminator to end of string                                           // 1566
        if (s.gzindex < s.gzhead.comment.length) {                                                                     // 1567
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;                                                       // 1568
        } else {                                                                                                       // 1569
          val = 0;                                                                                                     // 1570
        }                                                                                                              // 1571
        put_byte(s, val);                                                                                              // 1572
      } while (val !== 0);                                                                                             // 1573
                                                                                                                       // 1574
      if (s.gzhead.hcrc && s.pending > beg) {                                                                          // 1575
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);                                           // 1576
      }                                                                                                                // 1577
      if (val === 0) {                                                                                                 // 1578
        s.status = HCRC_STATE;                                                                                         // 1579
      }                                                                                                                // 1580
    }                                                                                                                  // 1581
    else {                                                                                                             // 1582
      s.status = HCRC_STATE;                                                                                           // 1583
    }                                                                                                                  // 1584
  }                                                                                                                    // 1585
  if (s.status === HCRC_STATE) {                                                                                       // 1586
    if (s.gzhead.hcrc) {                                                                                               // 1587
      if (s.pending + 2 > s.pending_buf_size) {                                                                        // 1588
        flush_pending(strm);                                                                                           // 1589
      }                                                                                                                // 1590
      if (s.pending + 2 <= s.pending_buf_size) {                                                                       // 1591
        put_byte(s, strm.adler & 0xff);                                                                                // 1592
        put_byte(s, (strm.adler >> 8) & 0xff);                                                                         // 1593
        strm.adler = 0; //crc32(0L, Z_NULL, 0);                                                                        // 1594
        s.status = BUSY_STATE;                                                                                         // 1595
      }                                                                                                                // 1596
    }                                                                                                                  // 1597
    else {                                                                                                             // 1598
      s.status = BUSY_STATE;                                                                                           // 1599
    }                                                                                                                  // 1600
  }                                                                                                                    // 1601
//#endif                                                                                                               // 1602
                                                                                                                       // 1603
  /* Flush as much pending output as possible */                                                                       // 1604
  if (s.pending !== 0) {                                                                                               // 1605
    flush_pending(strm);                                                                                               // 1606
    if (strm.avail_out === 0) {                                                                                        // 1607
      /* Since avail_out is 0, deflate will be called again with                                                       // 1608
       * more output space, but possibly with both pending and                                                         // 1609
       * avail_in equal to zero. There won't be anything to do,                                                        // 1610
       * but this is not an error situation so make sure we                                                            // 1611
       * return OK instead of BUF_ERROR at next call of deflate:                                                       // 1612
       */                                                                                                              // 1613
      s.last_flush = -1;                                                                                               // 1614
      return Z_OK;                                                                                                     // 1615
    }                                                                                                                  // 1616
                                                                                                                       // 1617
    /* Make sure there is something to do and avoid duplicate consecutive                                              // 1618
     * flushes. For repeated and useless calls with Z_FINISH, we keep                                                  // 1619
     * returning Z_STREAM_END instead of Z_BUF_ERROR.                                                                  // 1620
     */                                                                                                                // 1621
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&                                                  // 1622
    flush !== Z_FINISH) {                                                                                              // 1623
    return err(strm, Z_BUF_ERROR);                                                                                     // 1624
  }                                                                                                                    // 1625
                                                                                                                       // 1626
  /* User must not provide more input after the first FINISH: */                                                       // 1627
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {                                                              // 1628
    return err(strm, Z_BUF_ERROR);                                                                                     // 1629
  }                                                                                                                    // 1630
                                                                                                                       // 1631
  /* Start a new block or continue the current one.                                                                    // 1632
   */                                                                                                                  // 1633
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||                                                                      // 1634
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {                                                             // 1635
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :                                            // 1636
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :                                                                  // 1637
        configuration_table[s.level].func(s, flush));                                                                  // 1638
                                                                                                                       // 1639
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {                                                   // 1640
      s.status = FINISH_STATE;                                                                                         // 1641
    }                                                                                                                  // 1642
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {                                                     // 1643
      if (strm.avail_out === 0) {                                                                                      // 1644
        s.last_flush = -1;                                                                                             // 1645
        /* avoid BUF_ERROR next call, see above */                                                                     // 1646
      }                                                                                                                // 1647
      return Z_OK;                                                                                                     // 1648
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call                                                       // 1649
       * of deflate should use the same flush parameter to make sure                                                   // 1650
       * that the flush is complete. So we don't have to output an                                                     // 1651
       * empty block here, this will be done at next call. This also                                                   // 1652
       * ensures that for a very small output buffer, we emit at most                                                  // 1653
       * one empty block.                                                                                              // 1654
       */                                                                                                              // 1655
    }                                                                                                                  // 1656
    if (bstate === BS_BLOCK_DONE) {                                                                                    // 1657
      if (flush === Z_PARTIAL_FLUSH) {                                                                                 // 1658
        trees._tr_align(s);                                                                                            // 1659
      }                                                                                                                // 1660
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */                                                     // 1661
                                                                                                                       // 1662
        trees._tr_stored_block(s, 0, 0, false);                                                                        // 1663
        /* For a full flush, this empty block will be recognized                                                       // 1664
         * as a special marker by inflate_sync().                                                                      // 1665
         */                                                                                                            // 1666
        if (flush === Z_FULL_FLUSH) {                                                                                  // 1667
          /*** CLEAR_HASH(s); ***/             /* forget history */                                                    // 1668
          zero(s.head); // Fill with NIL (= 0);                                                                        // 1669
                                                                                                                       // 1670
          if (s.lookahead === 0) {                                                                                     // 1671
            s.strstart = 0;                                                                                            // 1672
            s.block_start = 0;                                                                                         // 1673
            s.insert = 0;                                                                                              // 1674
          }                                                                                                            // 1675
        }                                                                                                              // 1676
      }                                                                                                                // 1677
      flush_pending(strm);                                                                                             // 1678
      if (strm.avail_out === 0) {                                                                                      // 1679
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */                                               // 1680
        return Z_OK;                                                                                                   // 1681
      }                                                                                                                // 1682
    }                                                                                                                  // 1683
  }                                                                                                                    // 1684
  //Assert(strm->avail_out > 0, "bug2");                                                                               // 1685
  //if (strm.avail_out <= 0) { throw new Error("bug2");}                                                               // 1686
                                                                                                                       // 1687
  if (flush !== Z_FINISH) { return Z_OK; }                                                                             // 1688
  if (s.wrap <= 0) { return Z_STREAM_END; }                                                                            // 1689
                                                                                                                       // 1690
  /* Write the trailer */                                                                                              // 1691
  if (s.wrap === 2) {                                                                                                  // 1692
    put_byte(s, strm.adler & 0xff);                                                                                    // 1693
    put_byte(s, (strm.adler >> 8) & 0xff);                                                                             // 1694
    put_byte(s, (strm.adler >> 16) & 0xff);                                                                            // 1695
    put_byte(s, (strm.adler >> 24) & 0xff);                                                                            // 1696
    put_byte(s, strm.total_in & 0xff);                                                                                 // 1697
    put_byte(s, (strm.total_in >> 8) & 0xff);                                                                          // 1698
    put_byte(s, (strm.total_in >> 16) & 0xff);                                                                         // 1699
    put_byte(s, (strm.total_in >> 24) & 0xff);                                                                         // 1700
  }                                                                                                                    // 1701
  else                                                                                                                 // 1702
  {                                                                                                                    // 1703
    putShortMSB(s, strm.adler >>> 16);                                                                                 // 1704
    putShortMSB(s, strm.adler & 0xffff);                                                                               // 1705
  }                                                                                                                    // 1706
                                                                                                                       // 1707
  flush_pending(strm);                                                                                                 // 1708
  /* If avail_out is zero, the application will call deflate again                                                     // 1709
   * to flush the rest.                                                                                                // 1710
   */                                                                                                                  // 1711
  if (s.wrap > 0) { s.wrap = -s.wrap; }                                                                                // 1712
  /* write the trailer only once! */                                                                                   // 1713
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;                                                                        // 1714
}                                                                                                                      // 1715
                                                                                                                       // 1716
function deflateEnd(strm) {                                                                                            // 1717
  var status;                                                                                                          // 1718
                                                                                                                       // 1719
  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {                                                                // 1720
    return Z_STREAM_ERROR;                                                                                             // 1721
  }                                                                                                                    // 1722
                                                                                                                       // 1723
  status = strm.state.status;                                                                                          // 1724
  if (status !== INIT_STATE &&                                                                                         // 1725
    status !== EXTRA_STATE &&                                                                                          // 1726
    status !== NAME_STATE &&                                                                                           // 1727
    status !== COMMENT_STATE &&                                                                                        // 1728
    status !== HCRC_STATE &&                                                                                           // 1729
    status !== BUSY_STATE &&                                                                                           // 1730
    status !== FINISH_STATE                                                                                            // 1731
  ) {                                                                                                                  // 1732
    return err(strm, Z_STREAM_ERROR);                                                                                  // 1733
  }                                                                                                                    // 1734
                                                                                                                       // 1735
  strm.state = null;                                                                                                   // 1736
                                                                                                                       // 1737
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;                                                       // 1738
}                                                                                                                      // 1739
                                                                                                                       // 1740
/* =========================================================================                                           // 1741
 * Copy the source state to the destination state                                                                      // 1742
 */                                                                                                                    // 1743
//function deflateCopy(dest, source) {                                                                                 // 1744
//                                                                                                                     // 1745
//}                                                                                                                    // 1746
                                                                                                                       // 1747
exports.deflateInit = deflateInit;                                                                                     // 1748
exports.deflateInit2 = deflateInit2;                                                                                   // 1749
exports.deflateReset = deflateReset;                                                                                   // 1750
exports.deflateResetKeep = deflateResetKeep;                                                                           // 1751
exports.deflateSetHeader = deflateSetHeader;                                                                           // 1752
exports.deflate = deflate;                                                                                             // 1753
exports.deflateEnd = deflateEnd;                                                                                       // 1754
exports.deflateInfo = 'pako deflate (from Nodeca project)';                                                            // 1755
                                                                                                                       // 1756
/* Not implemented                                                                                                     // 1757
exports.deflateBound = deflateBound;                                                                                   // 1758
exports.deflateCopy = deflateCopy;                                                                                     // 1759
exports.deflateSetDictionary = deflateSetDictionary;                                                                   // 1760
exports.deflateParams = deflateParams;                                                                                 // 1761
exports.deflatePending = deflatePending;                                                                               // 1762
exports.deflatePrime = deflatePrime;                                                                                   // 1763
exports.deflateTune = deflateTune;                                                                                     // 1764
*/                                                                                                                     // 1765
                                                                                                                       // 1766
},{"../utils/common":4,"./adler32":5,"./crc32":7,"./messages":12,"./trees":13}],9:[function(require,module,exports){   //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
// See state defs from inflate.js                                                                                      // 3
var BAD = 30;       /* got a data error -- remain here until reset */                                                  // 4
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */                                            // 5
                                                                                                                       // 6
/*                                                                                                                     // 7
   Decode literal, length, and distance codes and write out the resulting                                              // 8
   literal and match bytes until either not enough input or output is                                                  // 9
   available, an end-of-block is encountered, or a data error is encountered.                                          // 10
   When large enough input and output buffers are supplied to inflate(), for                                           // 11
   example, a 16K input buffer and a 64K output buffer, more than 95% of the                                           // 12
   inflate execution time is spent in this routine.                                                                    // 13
                                                                                                                       // 14
   Entry assumptions:                                                                                                  // 15
                                                                                                                       // 16
        state.mode === LEN                                                                                             // 17
        strm.avail_in >= 6                                                                                             // 18
        strm.avail_out >= 258                                                                                          // 19
        start >= strm.avail_out                                                                                        // 20
        state.bits < 8                                                                                                 // 21
                                                                                                                       // 22
   On return, state.mode is one of:                                                                                    // 23
                                                                                                                       // 24
        LEN -- ran out of enough output space or enough available input                                                // 25
        TYPE -- reached end of block code, inflate() to interpret next block                                           // 26
        BAD -- error in block data                                                                                     // 27
                                                                                                                       // 28
   Notes:                                                                                                              // 29
                                                                                                                       // 30
    - The maximum input bits used by a length/distance pair is 15 bits for the                                         // 31
      length code, 5 bits for the length extra, 15 bits for the distance code,                                         // 32
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.                                          // 33
      Therefore if strm.avail_in >= 6, then there is enough input to avoid                                             // 34
      checking for available input while decoding.                                                                     // 35
                                                                                                                       // 36
    - The maximum bytes that a single length/distance pair can output is 258                                           // 37
      bytes, which is the maximum length that can be coded.  inflate_fast()                                            // 38
      requires strm.avail_out >= 258 for each loop to avoid checking for                                               // 39
      output space.                                                                                                    // 40
 */                                                                                                                    // 41
module.exports = function inflate_fast(strm, start) {                                                                  // 42
  var state;                                                                                                           // 43
  var _in;                    /* local strm.input */                                                                   // 44
  var last;                   /* have enough input while in < last */                                                  // 45
  var _out;                   /* local strm.output */                                                                  // 46
  var beg;                    /* inflate()'s initial strm.output */                                                    // 47
  var end;                    /* while out < end, enough space available */                                            // 48
//#ifdef INFLATE_STRICT                                                                                                // 49
  var dmax;                   /* maximum distance from zlib header */                                                  // 50
//#endif                                                                                                               // 51
  var wsize;                  /* window size or zero if not using window */                                            // 52
  var whave;                  /* valid bytes in the window */                                                          // 53
  var wnext;                  /* window write index */                                                                 // 54
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools                                        // 55
  var s_window;               /* allocated sliding window, if wsize != 0 */                                            // 56
  var hold;                   /* local strm.hold */                                                                    // 57
  var bits;                   /* local strm.bits */                                                                    // 58
  var lcode;                  /* local strm.lencode */                                                                 // 59
  var dcode;                  /* local strm.distcode */                                                                // 60
  var lmask;                  /* mask for first level of length codes */                                               // 61
  var dmask;                  /* mask for first level of distance codes */                                             // 62
  var here;                   /* retrieved table entry */                                                              // 63
  var op;                     /* code bits, operation, extra bits, or */                                               // 64
                              /*  window position, window bytes to copy */                                             // 65
  var len;                    /* match length, unused bytes */                                                         // 66
  var dist;                   /* match distance */                                                                     // 67
  var from;                   /* where to copy match from */                                                           // 68
  var from_source;                                                                                                     // 69
                                                                                                                       // 70
                                                                                                                       // 71
  var input, output; // JS specific, because we have no pointers                                                       // 72
                                                                                                                       // 73
  /* copy state to local variables */                                                                                  // 74
  state = strm.state;                                                                                                  // 75
  //here = state.here;                                                                                                 // 76
  _in = strm.next_in;                                                                                                  // 77
  input = strm.input;                                                                                                  // 78
  last = _in + (strm.avail_in - 5);                                                                                    // 79
  _out = strm.next_out;                                                                                                // 80
  output = strm.output;                                                                                                // 81
  beg = _out - (start - strm.avail_out);                                                                               // 82
  end = _out + (strm.avail_out - 257);                                                                                 // 83
//#ifdef INFLATE_STRICT                                                                                                // 84
  dmax = state.dmax;                                                                                                   // 85
//#endif                                                                                                               // 86
  wsize = state.wsize;                                                                                                 // 87
  whave = state.whave;                                                                                                 // 88
  wnext = state.wnext;                                                                                                 // 89
  s_window = state.window;                                                                                             // 90
  hold = state.hold;                                                                                                   // 91
  bits = state.bits;                                                                                                   // 92
  lcode = state.lencode;                                                                                               // 93
  dcode = state.distcode;                                                                                              // 94
  lmask = (1 << state.lenbits) - 1;                                                                                    // 95
  dmask = (1 << state.distbits) - 1;                                                                                   // 96
                                                                                                                       // 97
                                                                                                                       // 98
  /* decode literals and length/distances until end-of-block or not enough                                             // 99
     input data or output space */                                                                                     // 100
                                                                                                                       // 101
  top:                                                                                                                 // 102
  do {                                                                                                                 // 103
    if (bits < 15) {                                                                                                   // 104
      hold += input[_in++] << bits;                                                                                    // 105
      bits += 8;                                                                                                       // 106
      hold += input[_in++] << bits;                                                                                    // 107
      bits += 8;                                                                                                       // 108
    }                                                                                                                  // 109
                                                                                                                       // 110
    here = lcode[hold & lmask];                                                                                        // 111
                                                                                                                       // 112
    dolen:                                                                                                             // 113
    for (;;) { // Goto emulation                                                                                       // 114
      op = here >>> 24/*here.bits*/;                                                                                   // 115
      hold >>>= op;                                                                                                    // 116
      bits -= op;                                                                                                      // 117
      op = (here >>> 16) & 0xff/*here.op*/;                                                                            // 118
      if (op === 0) {                          /* literal */                                                           // 119
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?                                                       // 120
        //        "inflate:         literal '%c'\n" :                                                                  // 121
        //        "inflate:         literal 0x%02x\n", here.val));                                                     // 122
        output[_out++] = here & 0xffff/*here.val*/;                                                                    // 123
      }                                                                                                                // 124
      else if (op & 16) {                     /* length base */                                                        // 125
        len = here & 0xffff/*here.val*/;                                                                               // 126
        op &= 15;                           /* number of extra bits */                                                 // 127
        if (op) {                                                                                                      // 128
          if (bits < op) {                                                                                             // 129
            hold += input[_in++] << bits;                                                                              // 130
            bits += 8;                                                                                                 // 131
          }                                                                                                            // 132
          len += hold & ((1 << op) - 1);                                                                               // 133
          hold >>>= op;                                                                                                // 134
          bits -= op;                                                                                                  // 135
        }                                                                                                              // 136
        //Tracevv((stderr, "inflate:         length %u\n", len));                                                      // 137
        if (bits < 15) {                                                                                               // 138
          hold += input[_in++] << bits;                                                                                // 139
          bits += 8;                                                                                                   // 140
          hold += input[_in++] << bits;                                                                                // 141
          bits += 8;                                                                                                   // 142
        }                                                                                                              // 143
        here = dcode[hold & dmask];                                                                                    // 144
                                                                                                                       // 145
        dodist:                                                                                                        // 146
        for (;;) { // goto emulation                                                                                   // 147
          op = here >>> 24/*here.bits*/;                                                                               // 148
          hold >>>= op;                                                                                                // 149
          bits -= op;                                                                                                  // 150
          op = (here >>> 16) & 0xff/*here.op*/;                                                                        // 151
                                                                                                                       // 152
          if (op & 16) {                      /* distance base */                                                      // 153
            dist = here & 0xffff/*here.val*/;                                                                          // 154
            op &= 15;                       /* number of extra bits */                                                 // 155
            if (bits < op) {                                                                                           // 156
              hold += input[_in++] << bits;                                                                            // 157
              bits += 8;                                                                                               // 158
              if (bits < op) {                                                                                         // 159
                hold += input[_in++] << bits;                                                                          // 160
                bits += 8;                                                                                             // 161
              }                                                                                                        // 162
            }                                                                                                          // 163
            dist += hold & ((1 << op) - 1);                                                                            // 164
//#ifdef INFLATE_STRICT                                                                                                // 165
            if (dist > dmax) {                                                                                         // 166
              strm.msg = 'invalid distance too far back';                                                              // 167
              state.mode = BAD;                                                                                        // 168
              break top;                                                                                               // 169
            }                                                                                                          // 170
//#endif                                                                                                               // 171
            hold >>>= op;                                                                                              // 172
            bits -= op;                                                                                                // 173
            //Tracevv((stderr, "inflate:         distance %u\n", dist));                                               // 174
            op = _out - beg;                /* max distance in output */                                               // 175
            if (dist > op) {                /* see if copy from window */                                              // 176
              op = dist - op;               /* distance back in window */                                              // 177
              if (op > whave) {                                                                                        // 178
                if (state.sane) {                                                                                      // 179
                  strm.msg = 'invalid distance too far back';                                                          // 180
                  state.mode = BAD;                                                                                    // 181
                  break top;                                                                                           // 182
                }                                                                                                      // 183
                                                                                                                       // 184
// (!) This block is disabled in zlib defailts,                                                                        // 185
// don't enable it for binary compatibility                                                                            // 186
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR                                                                    // 187
//                if (len <= op - whave) {                                                                             // 188
//                  do {                                                                                               // 189
//                    output[_out++] = 0;                                                                              // 190
//                  } while (--len);                                                                                   // 191
//                  continue top;                                                                                      // 192
//                }                                                                                                    // 193
//                len -= op - whave;                                                                                   // 194
//                do {                                                                                                 // 195
//                  output[_out++] = 0;                                                                                // 196
//                } while (--op > whave);                                                                              // 197
//                if (op === 0) {                                                                                      // 198
//                  from = _out - dist;                                                                                // 199
//                  do {                                                                                               // 200
//                    output[_out++] = output[from++];                                                                 // 201
//                  } while (--len);                                                                                   // 202
//                  continue top;                                                                                      // 203
//                }                                                                                                    // 204
//#endif                                                                                                               // 205
              }                                                                                                        // 206
              from = 0; // window index                                                                                // 207
              from_source = s_window;                                                                                  // 208
              if (wnext === 0) {           /* very common case */                                                      // 209
                from += wsize - op;                                                                                    // 210
                if (op < len) {         /* some from window */                                                         // 211
                  len -= op;                                                                                           // 212
                  do {                                                                                                 // 213
                    output[_out++] = s_window[from++];                                                                 // 214
                  } while (--op);                                                                                      // 215
                  from = _out - dist;  /* rest from output */                                                          // 216
                  from_source = output;                                                                                // 217
                }                                                                                                      // 218
              }                                                                                                        // 219
              else if (wnext < op) {      /* wrap around window */                                                     // 220
                from += wsize + wnext - op;                                                                            // 221
                op -= wnext;                                                                                           // 222
                if (op < len) {         /* some from end of window */                                                  // 223
                  len -= op;                                                                                           // 224
                  do {                                                                                                 // 225
                    output[_out++] = s_window[from++];                                                                 // 226
                  } while (--op);                                                                                      // 227
                  from = 0;                                                                                            // 228
                  if (wnext < len) {  /* some from start of window */                                                  // 229
                    op = wnext;                                                                                        // 230
                    len -= op;                                                                                         // 231
                    do {                                                                                               // 232
                      output[_out++] = s_window[from++];                                                               // 233
                    } while (--op);                                                                                    // 234
                    from = _out - dist;      /* rest from output */                                                    // 235
                    from_source = output;                                                                              // 236
                  }                                                                                                    // 237
                }                                                                                                      // 238
              }                                                                                                        // 239
              else {                      /* contiguous in window */                                                   // 240
                from += wnext - op;                                                                                    // 241
                if (op < len) {         /* some from window */                                                         // 242
                  len -= op;                                                                                           // 243
                  do {                                                                                                 // 244
                    output[_out++] = s_window[from++];                                                                 // 245
                  } while (--op);                                                                                      // 246
                  from = _out - dist;  /* rest from output */                                                          // 247
                  from_source = output;                                                                                // 248
                }                                                                                                      // 249
              }                                                                                                        // 250
              while (len > 2) {                                                                                        // 251
                output[_out++] = from_source[from++];                                                                  // 252
                output[_out++] = from_source[from++];                                                                  // 253
                output[_out++] = from_source[from++];                                                                  // 254
                len -= 3;                                                                                              // 255
              }                                                                                                        // 256
              if (len) {                                                                                               // 257
                output[_out++] = from_source[from++];                                                                  // 258
                if (len > 1) {                                                                                         // 259
                  output[_out++] = from_source[from++];                                                                // 260
                }                                                                                                      // 261
              }                                                                                                        // 262
            }                                                                                                          // 263
            else {                                                                                                     // 264
              from = _out - dist;          /* copy direct from output */                                               // 265
              do {                        /* minimum length is three */                                                // 266
                output[_out++] = output[from++];                                                                       // 267
                output[_out++] = output[from++];                                                                       // 268
                output[_out++] = output[from++];                                                                       // 269
                len -= 3;                                                                                              // 270
              } while (len > 2);                                                                                       // 271
              if (len) {                                                                                               // 272
                output[_out++] = output[from++];                                                                       // 273
                if (len > 1) {                                                                                         // 274
                  output[_out++] = output[from++];                                                                     // 275
                }                                                                                                      // 276
              }                                                                                                        // 277
            }                                                                                                          // 278
          }                                                                                                            // 279
          else if ((op & 64) === 0) {          /* 2nd level distance code */                                           // 280
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];                                      // 281
            continue dodist;                                                                                           // 282
          }                                                                                                            // 283
          else {                                                                                                       // 284
            strm.msg = 'invalid distance code';                                                                        // 285
            state.mode = BAD;                                                                                          // 286
            break top;                                                                                                 // 287
          }                                                                                                            // 288
                                                                                                                       // 289
          break; // need to emulate goto via "continue"                                                                // 290
        }                                                                                                              // 291
      }                                                                                                                // 292
      else if ((op & 64) === 0) {              /* 2nd level length code */                                             // 293
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];                                          // 294
        continue dolen;                                                                                                // 295
      }                                                                                                                // 296
      else if (op & 32) {                     /* end-of-block */                                                       // 297
        //Tracevv((stderr, "inflate:         end of block\n"));                                                        // 298
        state.mode = TYPE;                                                                                             // 299
        break top;                                                                                                     // 300
      }                                                                                                                // 301
      else {                                                                                                           // 302
        strm.msg = 'invalid literal/length code';                                                                      // 303
        state.mode = BAD;                                                                                              // 304
        break top;                                                                                                     // 305
      }                                                                                                                // 306
                                                                                                                       // 307
      break; // need to emulate goto via "continue"                                                                    // 308
    }                                                                                                                  // 309
  } while (_in < last && _out < end);                                                                                  // 310
                                                                                                                       // 311
  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */                                          // 312
  len = bits >> 3;                                                                                                     // 313
  _in -= len;                                                                                                          // 314
  bits -= len << 3;                                                                                                    // 315
  hold &= (1 << bits) - 1;                                                                                             // 316
                                                                                                                       // 317
  /* update state and return */                                                                                        // 318
  strm.next_in = _in;                                                                                                  // 319
  strm.next_out = _out;                                                                                                // 320
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));                                                  // 321
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));                                             // 322
  state.hold = hold;                                                                                                   // 323
  state.bits = bits;                                                                                                   // 324
  return;                                                                                                              // 325
};                                                                                                                     // 326
                                                                                                                       // 327
},{}],10:[function(require,module,exports){                                                                            //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
                                                                                                                       // 3
var utils = require('../utils/common');                                                                                // 4
var adler32 = require('./adler32');                                                                                    // 5
var crc32   = require('./crc32');                                                                                      // 6
var inflate_fast = require('./inffast');                                                                               // 7
var inflate_table = require('./inftrees');                                                                             // 8
                                                                                                                       // 9
var CODES = 0;                                                                                                         // 10
var LENS = 1;                                                                                                          // 11
var DISTS = 2;                                                                                                         // 12
                                                                                                                       // 13
/* Public constants ==========================================================*/                                       // 14
/* ===========================================================================*/                                       // 15
                                                                                                                       // 16
                                                                                                                       // 17
/* Allowed flush values; see deflate() and inflate() below for details */                                              // 18
//var Z_NO_FLUSH      = 0;                                                                                             // 19
//var Z_PARTIAL_FLUSH = 1;                                                                                             // 20
//var Z_SYNC_FLUSH    = 2;                                                                                             // 21
//var Z_FULL_FLUSH    = 3;                                                                                             // 22
var Z_FINISH        = 4;                                                                                               // 23
var Z_BLOCK         = 5;                                                                                               // 24
var Z_TREES         = 6;                                                                                               // 25
                                                                                                                       // 26
                                                                                                                       // 27
/* Return codes for the compression/decompression functions. Negative values                                           // 28
 * are errors, positive values are used for special but normal events.                                                 // 29
 */                                                                                                                    // 30
var Z_OK            = 0;                                                                                               // 31
var Z_STREAM_END    = 1;                                                                                               // 32
var Z_NEED_DICT     = 2;                                                                                               // 33
//var Z_ERRNO         = -1;                                                                                            // 34
var Z_STREAM_ERROR  = -2;                                                                                              // 35
var Z_DATA_ERROR    = -3;                                                                                              // 36
var Z_MEM_ERROR     = -4;                                                                                              // 37
var Z_BUF_ERROR     = -5;                                                                                              // 38
//var Z_VERSION_ERROR = -6;                                                                                            // 39
                                                                                                                       // 40
/* The deflate compression method */                                                                                   // 41
var Z_DEFLATED  = 8;                                                                                                   // 42
                                                                                                                       // 43
                                                                                                                       // 44
/* STATES ====================================================================*/                                       // 45
/* ===========================================================================*/                                       // 46
                                                                                                                       // 47
                                                                                                                       // 48
var    HEAD = 1;       /* i: waiting for magic header */                                                               // 49
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */                                                    // 50
var    TIME = 3;       /* i: waiting for modification time (gzip) */                                                   // 51
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */                                    // 52
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */                                                        // 53
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */                                                         // 54
var    NAME = 7;       /* i: waiting for end of file name (gzip) */                                                    // 55
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */                                                      // 56
var    HCRC = 9;       /* i: waiting for header crc (gzip) */                                                          // 57
var    DICTID = 10;    /* i: waiting for dictionary check value */                                                     // 58
var    DICT = 11;      /* waiting for inflateSetDictionary() call */                                                   // 59
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */                                     // 60
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */                                  // 61
var        STORED = 14;    /* i: waiting for stored size (length and complement) */                                    // 62
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */                                       // 63
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */                                 // 64
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */                                            // 65
var        LENLENS = 18;   /* i: waiting for code length code lengths */                                               // 66
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */                                   // 67
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */                                      // 68
var            LEN = 21;       /* i: waiting for length/lit/eob code */                                                // 69
var            LENEXT = 22;    /* i: waiting for length extra bits */                                                  // 70
var            DIST = 23;      /* i: waiting for distance code */                                                      // 71
var            DISTEXT = 24;   /* i: waiting for distance extra bits */                                                // 72
var            MATCH = 25;     /* o: waiting for output space to copy string */                                        // 73
var            LIT = 26;       /* o: waiting for output space to write literal */                                      // 74
var    CHECK = 27;     /* i: waiting for 32-bit check value */                                                         // 75
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */                                                       // 76
var    DONE = 29;      /* finished check, done -- remain here until reset */                                           // 77
var    BAD = 30;       /* got a data error -- remain here until reset */                                               // 78
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */                                  // 79
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */                                    // 80
                                                                                                                       // 81
/* ===========================================================================*/                                       // 82
                                                                                                                       // 83
                                                                                                                       // 84
                                                                                                                       // 85
var ENOUGH_LENS = 852;                                                                                                 // 86
var ENOUGH_DISTS = 592;                                                                                                // 87
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);                                                                            // 88
                                                                                                                       // 89
var MAX_WBITS = 15;                                                                                                    // 90
/* 32K LZ77 window */                                                                                                  // 91
var DEF_WBITS = MAX_WBITS;                                                                                             // 92
                                                                                                                       // 93
                                                                                                                       // 94
function ZSWAP32(q) {                                                                                                  // 95
  return  (((q >>> 24) & 0xff) +                                                                                       // 96
          ((q >>> 8) & 0xff00) +                                                                                       // 97
          ((q & 0xff00) << 8) +                                                                                        // 98
          ((q & 0xff) << 24));                                                                                         // 99
}                                                                                                                      // 100
                                                                                                                       // 101
                                                                                                                       // 102
function InflateState() {                                                                                              // 103
  this.mode = 0;             /* current inflate mode */                                                                // 104
  this.last = false;          /* true if processing last block */                                                      // 105
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */                                           // 106
  this.havedict = false;      /* true if dictionary provided */                                                        // 107
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */                                           // 108
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */                                          // 109
  this.check = 0;             /* protected copy of check value */                                                      // 110
  this.total = 0;             /* protected copy of output count */                                                     // 111
  // TODO: may be {}                                                                                                   // 112
  this.head = null;           /* where to save gzip header information */                                              // 113
                                                                                                                       // 114
  /* sliding window */                                                                                                 // 115
  this.wbits = 0;             /* log base 2 of requested window size */                                                // 116
  this.wsize = 0;             /* window size or zero if not using window */                                            // 117
  this.whave = 0;             /* valid bytes in the window */                                                          // 118
  this.wnext = 0;             /* window write index */                                                                 // 119
  this.window = null;         /* allocated sliding window, if needed */                                                // 120
                                                                                                                       // 121
  /* bit accumulator */                                                                                                // 122
  this.hold = 0;              /* input bit accumulator */                                                              // 123
  this.bits = 0;              /* number of bits in "in" */                                                             // 124
                                                                                                                       // 125
  /* for string and stored block copying */                                                                            // 126
  this.length = 0;            /* literal or length of data to copy */                                                  // 127
  this.offset = 0;            /* distance back to copy string from */                                                  // 128
                                                                                                                       // 129
  /* for table and code decoding */                                                                                    // 130
  this.extra = 0;             /* extra bits needed */                                                                  // 131
                                                                                                                       // 132
  /* fixed and dynamic code tables */                                                                                  // 133
  this.lencode = null;          /* starting table for length/literal codes */                                          // 134
  this.distcode = null;         /* starting table for distance codes */                                                // 135
  this.lenbits = 0;           /* index bits for lencode */                                                             // 136
  this.distbits = 0;          /* index bits for distcode */                                                            // 137
                                                                                                                       // 138
  /* dynamic table building */                                                                                         // 139
  this.ncode = 0;             /* number of code length code lengths */                                                 // 140
  this.nlen = 0;              /* number of length code lengths */                                                      // 141
  this.ndist = 0;             /* number of distance code lengths */                                                    // 142
  this.have = 0;              /* number of code lengths in lens[] */                                                   // 143
  this.next = null;              /* next available space in codes[] */                                                 // 144
                                                                                                                       // 145
  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */                                           // 146
  this.work = new utils.Buf16(288); /* work area for code table building */                                            // 147
                                                                                                                       // 148
  /*                                                                                                                   // 149
   because we don't have pointers in js, we use lencode and distcode directly                                          // 150
   as buffers so we don't need codes                                                                                   // 151
  */                                                                                                                   // 152
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */                                            // 153
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */                          // 154
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */                                // 155
  this.sane = 0;                   /* if false, allow invalid distance too far */                                      // 156
  this.back = 0;                   /* bits back of last unprocessed length/lit */                                      // 157
  this.was = 0;                    /* initial length of match */                                                       // 158
}                                                                                                                      // 159
                                                                                                                       // 160
function inflateResetKeep(strm) {                                                                                      // 161
  var state;                                                                                                           // 162
                                                                                                                       // 163
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }                                                                 // 164
  state = strm.state;                                                                                                  // 165
  strm.total_in = strm.total_out = state.total = 0;                                                                    // 166
  strm.msg = ''; /*Z_NULL*/                                                                                            // 167
  if (state.wrap) {       /* to support ill-conceived Java test suite */                                               // 168
    strm.adler = state.wrap & 1;                                                                                       // 169
  }                                                                                                                    // 170
  state.mode = HEAD;                                                                                                   // 171
  state.last = 0;                                                                                                      // 172
  state.havedict = 0;                                                                                                  // 173
  state.dmax = 32768;                                                                                                  // 174
  state.head = null/*Z_NULL*/;                                                                                         // 175
  state.hold = 0;                                                                                                      // 176
  state.bits = 0;                                                                                                      // 177
  //state.lencode = state.distcode = state.next = state.codes;                                                         // 178
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);                                                         // 179
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);                                                      // 180
                                                                                                                       // 181
  state.sane = 1;                                                                                                      // 182
  state.back = -1;                                                                                                     // 183
  //Tracev((stderr, "inflate: reset\n"));                                                                              // 184
  return Z_OK;                                                                                                         // 185
}                                                                                                                      // 186
                                                                                                                       // 187
function inflateReset(strm) {                                                                                          // 188
  var state;                                                                                                           // 189
                                                                                                                       // 190
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }                                                                 // 191
  state = strm.state;                                                                                                  // 192
  state.wsize = 0;                                                                                                     // 193
  state.whave = 0;                                                                                                     // 194
  state.wnext = 0;                                                                                                     // 195
  return inflateResetKeep(strm);                                                                                       // 196
                                                                                                                       // 197
}                                                                                                                      // 198
                                                                                                                       // 199
function inflateReset2(strm, windowBits) {                                                                             // 200
  var wrap;                                                                                                            // 201
  var state;                                                                                                           // 202
                                                                                                                       // 203
  /* get the state */                                                                                                  // 204
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }                                                                 // 205
  state = strm.state;                                                                                                  // 206
                                                                                                                       // 207
  /* extract wrap request from windowBits parameter */                                                                 // 208
  if (windowBits < 0) {                                                                                                // 209
    wrap = 0;                                                                                                          // 210
    windowBits = -windowBits;                                                                                          // 211
  }                                                                                                                    // 212
  else {                                                                                                               // 213
    wrap = (windowBits >> 4) + 1;                                                                                      // 214
    if (windowBits < 48) {                                                                                             // 215
      windowBits &= 15;                                                                                                // 216
    }                                                                                                                  // 217
  }                                                                                                                    // 218
                                                                                                                       // 219
  /* set number of window bits, free window if different */                                                            // 220
  if (windowBits && (windowBits < 8 || windowBits > 15)) {                                                             // 221
    return Z_STREAM_ERROR;                                                                                             // 222
  }                                                                                                                    // 223
  if (state.window !== null && state.wbits !== windowBits) {                                                           // 224
    state.window = null;                                                                                               // 225
  }                                                                                                                    // 226
                                                                                                                       // 227
  /* update state and reset the rest of it */                                                                          // 228
  state.wrap = wrap;                                                                                                   // 229
  state.wbits = windowBits;                                                                                            // 230
  return inflateReset(strm);                                                                                           // 231
}                                                                                                                      // 232
                                                                                                                       // 233
function inflateInit2(strm, windowBits) {                                                                              // 234
  var ret;                                                                                                             // 235
  var state;                                                                                                           // 236
                                                                                                                       // 237
  if (!strm) { return Z_STREAM_ERROR; }                                                                                // 238
  //strm.msg = Z_NULL;                 /* in case we return an error */                                                // 239
                                                                                                                       // 240
  state = new InflateState();                                                                                          // 241
                                                                                                                       // 242
  //if (state === Z_NULL) return Z_MEM_ERROR;                                                                          // 243
  //Tracev((stderr, "inflate: allocated\n"));                                                                          // 244
  strm.state = state;                                                                                                  // 245
  state.window = null/*Z_NULL*/;                                                                                       // 246
  ret = inflateReset2(strm, windowBits);                                                                               // 247
  if (ret !== Z_OK) {                                                                                                  // 248
    strm.state = null/*Z_NULL*/;                                                                                       // 249
  }                                                                                                                    // 250
  return ret;                                                                                                          // 251
}                                                                                                                      // 252
                                                                                                                       // 253
function inflateInit(strm) {                                                                                           // 254
  return inflateInit2(strm, DEF_WBITS);                                                                                // 255
}                                                                                                                      // 256
                                                                                                                       // 257
                                                                                                                       // 258
/*                                                                                                                     // 259
 Return state with length and distance decoding tables and index sizes set to                                          // 260
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.                                             // 261
 If BUILDFIXED is defined, then instead this routine builds the tables the                                             // 262
 first time it's called, and returns those tables the first time and                                                   // 263
 thereafter.  This reduces the size of the code by about 2K bytes, in                                                  // 264
 exchange for a little execution time.  However, BUILDFIXED should not be                                              // 265
 used for threaded applications, since the rewriting of the tables and virgin                                          // 266
 may not be thread-safe.                                                                                               // 267
 */                                                                                                                    // 268
var virgin = true;                                                                                                     // 269
                                                                                                                       // 270
var lenfix, distfix; // We have no pointers in JS, so keep tables separate                                             // 271
                                                                                                                       // 272
function fixedtables(state) {                                                                                          // 273
  /* build fixed huffman tables if first call (may not be thread safe) */                                              // 274
  if (virgin) {                                                                                                        // 275
    var sym;                                                                                                           // 276
                                                                                                                       // 277
    lenfix = new utils.Buf32(512);                                                                                     // 278
    distfix = new utils.Buf32(32);                                                                                     // 279
                                                                                                                       // 280
    /* literal/length table */                                                                                         // 281
    sym = 0;                                                                                                           // 282
    while (sym < 144) { state.lens[sym++] = 8; }                                                                       // 283
    while (sym < 256) { state.lens[sym++] = 9; }                                                                       // 284
    while (sym < 280) { state.lens[sym++] = 7; }                                                                       // 285
    while (sym < 288) { state.lens[sym++] = 8; }                                                                       // 286
                                                                                                                       // 287
    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});                                      // 288
                                                                                                                       // 289
    /* distance table */                                                                                               // 290
    sym = 0;                                                                                                           // 291
    while (sym < 32) { state.lens[sym++] = 5; }                                                                        // 292
                                                                                                                       // 293
    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});                                      // 294
                                                                                                                       // 295
    /* do this just once */                                                                                            // 296
    virgin = false;                                                                                                    // 297
  }                                                                                                                    // 298
                                                                                                                       // 299
  state.lencode = lenfix;                                                                                              // 300
  state.lenbits = 9;                                                                                                   // 301
  state.distcode = distfix;                                                                                            // 302
  state.distbits = 5;                                                                                                  // 303
}                                                                                                                      // 304
                                                                                                                       // 305
                                                                                                                       // 306
/*                                                                                                                     // 307
 Update the window with the last wsize (normally 32K) bytes written before                                             // 308
 returning.  If window does not exist yet, create it.  This is only called                                             // 309
 when a window is already in use, or when output has been written during this                                          // 310
 inflate call, but the end of the deflate stream has not been reached yet.                                             // 311
 It is also called to create a window for dictionary data when a dictionary                                            // 312
 is loaded.                                                                                                            // 313
                                                                                                                       // 314
 Providing output buffers larger than 32K to inflate() should provide a speed                                          // 315
 advantage, since only the last 32K of output is copied to the sliding window                                          // 316
 upon return from inflate(), and since all distances after the first 32K of                                            // 317
 output will fall in the output data, making match copies simpler and faster.                                          // 318
 The advantage may be dependent on the size of the processor's data caches.                                            // 319
 */                                                                                                                    // 320
function updatewindow(strm, src, end, copy) {                                                                          // 321
  var dist;                                                                                                            // 322
  var state = strm.state;                                                                                              // 323
                                                                                                                       // 324
  /* if it hasn't been done already, allocate space for the window */                                                  // 325
  if (state.window === null) {                                                                                         // 326
    state.wsize = 1 << state.wbits;                                                                                    // 327
    state.wnext = 0;                                                                                                   // 328
    state.whave = 0;                                                                                                   // 329
                                                                                                                       // 330
    state.window = new utils.Buf8(state.wsize);                                                                        // 331
  }                                                                                                                    // 332
                                                                                                                       // 333
  /* copy state->wsize or less output bytes into the circular window */                                                // 334
  if (copy >= state.wsize) {                                                                                           // 335
    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);                                               // 336
    state.wnext = 0;                                                                                                   // 337
    state.whave = state.wsize;                                                                                         // 338
  }                                                                                                                    // 339
  else {                                                                                                               // 340
    dist = state.wsize - state.wnext;                                                                                  // 341
    if (dist > copy) {                                                                                                 // 342
      dist = copy;                                                                                                     // 343
    }                                                                                                                  // 344
    //zmemcpy(state->window + state->wnext, end - copy, dist);                                                         // 345
    utils.arraySet(state.window,src, end - copy, dist, state.wnext);                                                   // 346
    copy -= dist;                                                                                                      // 347
    if (copy) {                                                                                                        // 348
      //zmemcpy(state->window, end - copy, copy);                                                                      // 349
      utils.arraySet(state.window,src, end - copy, copy, 0);                                                           // 350
      state.wnext = copy;                                                                                              // 351
      state.whave = state.wsize;                                                                                       // 352
    }                                                                                                                  // 353
    else {                                                                                                             // 354
      state.wnext += dist;                                                                                             // 355
      if (state.wnext === state.wsize) { state.wnext = 0; }                                                            // 356
      if (state.whave < state.wsize) { state.whave += dist; }                                                          // 357
    }                                                                                                                  // 358
  }                                                                                                                    // 359
  return 0;                                                                                                            // 360
}                                                                                                                      // 361
                                                                                                                       // 362
function inflate(strm, flush) {                                                                                        // 363
  var state;                                                                                                           // 364
  var input, output;          // input/output buffers                                                                  // 365
  var next;                   /* next input INDEX */                                                                   // 366
  var put;                    /* next output INDEX */                                                                  // 367
  var have, left;             /* available input and output */                                                         // 368
  var hold;                   /* bit buffer */                                                                         // 369
  var bits;                   /* bits in bit buffer */                                                                 // 370
  var _in, _out;              /* save starting available input and output */                                           // 371
  var copy;                   /* number of stored or match bytes to copy */                                            // 372
  var from;                   /* where to copy match bytes from */                                                     // 373
  var from_source;                                                                                                     // 374
  var here = 0;               /* current decoding table entry */                                                       // 375
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)                                         // 376
  //var last;                   /* parent table entry */                                                               // 377
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)                                         // 378
  var len;                    /* length to copy for repeats, bits to drop */                                           // 379
  var ret;                    /* return code */                                                                        // 380
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */                                        // 381
  var opts;                                                                                                            // 382
                                                                                                                       // 383
  var n; // temporary var for NEED_BITS                                                                                // 384
                                                                                                                       // 385
  var order = /* permutation of code lengths */                                                                        // 386
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];                                                // 387
                                                                                                                       // 388
                                                                                                                       // 389
  if (!strm || !strm.state || !strm.output ||                                                                          // 390
      (!strm.input && strm.avail_in !== 0)) {                                                                          // 391
    return Z_STREAM_ERROR;                                                                                             // 392
  }                                                                                                                    // 393
                                                                                                                       // 394
  state = strm.state;                                                                                                  // 395
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */                                                // 396
                                                                                                                       // 397
                                                                                                                       // 398
  //--- LOAD() ---                                                                                                     // 399
  put = strm.next_out;                                                                                                 // 400
  output = strm.output;                                                                                                // 401
  left = strm.avail_out;                                                                                               // 402
  next = strm.next_in;                                                                                                 // 403
  input = strm.input;                                                                                                  // 404
  have = strm.avail_in;                                                                                                // 405
  hold = state.hold;                                                                                                   // 406
  bits = state.bits;                                                                                                   // 407
  //---                                                                                                                // 408
                                                                                                                       // 409
  _in = have;                                                                                                          // 410
  _out = left;                                                                                                         // 411
  ret = Z_OK;                                                                                                          // 412
                                                                                                                       // 413
  inf_leave: // goto emulation                                                                                         // 414
  for (;;) {                                                                                                           // 415
    switch (state.mode) {                                                                                              // 416
    case HEAD:                                                                                                         // 417
      if (state.wrap === 0) {                                                                                          // 418
        state.mode = TYPEDO;                                                                                           // 419
        break;                                                                                                         // 420
      }                                                                                                                // 421
      //=== NEEDBITS(16);                                                                                              // 422
      while (bits < 16) {                                                                                              // 423
        if (have === 0) { break inf_leave; }                                                                           // 424
        have--;                                                                                                        // 425
        hold += input[next++] << bits;                                                                                 // 426
        bits += 8;                                                                                                     // 427
      }                                                                                                                // 428
      //===//                                                                                                          // 429
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */                                                    // 430
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;                                                                       // 431
        //=== CRC2(state.check, hold);                                                                                 // 432
        hbuf[0] = hold & 0xff;                                                                                         // 433
        hbuf[1] = (hold >>> 8) & 0xff;                                                                                 // 434
        state.check = crc32(state.check, hbuf, 2, 0);                                                                  // 435
        //===//                                                                                                        // 436
                                                                                                                       // 437
        //=== INITBITS();                                                                                              // 438
        hold = 0;                                                                                                      // 439
        bits = 0;                                                                                                      // 440
        //===//                                                                                                        // 441
        state.mode = FLAGS;                                                                                            // 442
        break;                                                                                                         // 443
      }                                                                                                                // 444
      state.flags = 0;           /* expect zlib header */                                                              // 445
      if (state.head) {                                                                                                // 446
        state.head.done = false;                                                                                       // 447
      }                                                                                                                // 448
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */                                                    // 449
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {                                                        // 450
        strm.msg = 'incorrect header check';                                                                           // 451
        state.mode = BAD;                                                                                              // 452
        break;                                                                                                         // 453
      }                                                                                                                // 454
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {                                                                   // 455
        strm.msg = 'unknown compression method';                                                                       // 456
        state.mode = BAD;                                                                                              // 457
        break;                                                                                                         // 458
      }                                                                                                                // 459
      //--- DROPBITS(4) ---//                                                                                          // 460
      hold >>>= 4;                                                                                                     // 461
      bits -= 4;                                                                                                       // 462
      //---//                                                                                                          // 463
      len = (hold & 0x0f)/*BITS(4)*/ + 8;                                                                              // 464
      if (state.wbits === 0) {                                                                                         // 465
        state.wbits = len;                                                                                             // 466
      }                                                                                                                // 467
      else if (len > state.wbits) {                                                                                    // 468
        strm.msg = 'invalid window size';                                                                              // 469
        state.mode = BAD;                                                                                              // 470
        break;                                                                                                         // 471
      }                                                                                                                // 472
      state.dmax = 1 << len;                                                                                           // 473
      //Tracev((stderr, "inflate:   zlib header ok\n"));                                                               // 474
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;                                                          // 475
      state.mode = hold & 0x200 ? DICTID : TYPE;                                                                       // 476
      //=== INITBITS();                                                                                                // 477
      hold = 0;                                                                                                        // 478
      bits = 0;                                                                                                        // 479
      //===//                                                                                                          // 480
      break;                                                                                                           // 481
    case FLAGS:                                                                                                        // 482
      //=== NEEDBITS(16); */                                                                                           // 483
      while (bits < 16) {                                                                                              // 484
        if (have === 0) { break inf_leave; }                                                                           // 485
        have--;                                                                                                        // 486
        hold += input[next++] << bits;                                                                                 // 487
        bits += 8;                                                                                                     // 488
      }                                                                                                                // 489
      //===//                                                                                                          // 490
      state.flags = hold;                                                                                              // 491
      if ((state.flags & 0xff) !== Z_DEFLATED) {                                                                       // 492
        strm.msg = 'unknown compression method';                                                                       // 493
        state.mode = BAD;                                                                                              // 494
        break;                                                                                                         // 495
      }                                                                                                                // 496
      if (state.flags & 0xe000) {                                                                                      // 497
        strm.msg = 'unknown header flags set';                                                                         // 498
        state.mode = BAD;                                                                                              // 499
        break;                                                                                                         // 500
      }                                                                                                                // 501
      if (state.head) {                                                                                                // 502
        state.head.text = ((hold >> 8) & 1);                                                                           // 503
      }                                                                                                                // 504
      if (state.flags & 0x0200) {                                                                                      // 505
        //=== CRC2(state.check, hold);                                                                                 // 506
        hbuf[0] = hold & 0xff;                                                                                         // 507
        hbuf[1] = (hold >>> 8) & 0xff;                                                                                 // 508
        state.check = crc32(state.check, hbuf, 2, 0);                                                                  // 509
        //===//                                                                                                        // 510
      }                                                                                                                // 511
      //=== INITBITS();                                                                                                // 512
      hold = 0;                                                                                                        // 513
      bits = 0;                                                                                                        // 514
      //===//                                                                                                          // 515
      state.mode = TIME;                                                                                               // 516
      /* falls through */                                                                                              // 517
    case TIME:                                                                                                         // 518
      //=== NEEDBITS(32); */                                                                                           // 519
      while (bits < 32) {                                                                                              // 520
        if (have === 0) { break inf_leave; }                                                                           // 521
        have--;                                                                                                        // 522
        hold += input[next++] << bits;                                                                                 // 523
        bits += 8;                                                                                                     // 524
      }                                                                                                                // 525
      //===//                                                                                                          // 526
      if (state.head) {                                                                                                // 527
        state.head.time = hold;                                                                                        // 528
      }                                                                                                                // 529
      if (state.flags & 0x0200) {                                                                                      // 530
        //=== CRC4(state.check, hold)                                                                                  // 531
        hbuf[0] = hold & 0xff;                                                                                         // 532
        hbuf[1] = (hold >>> 8) & 0xff;                                                                                 // 533
        hbuf[2] = (hold >>> 16) & 0xff;                                                                                // 534
        hbuf[3] = (hold >>> 24) & 0xff;                                                                                // 535
        state.check = crc32(state.check, hbuf, 4, 0);                                                                  // 536
        //===                                                                                                          // 537
      }                                                                                                                // 538
      //=== INITBITS();                                                                                                // 539
      hold = 0;                                                                                                        // 540
      bits = 0;                                                                                                        // 541
      //===//                                                                                                          // 542
      state.mode = OS;                                                                                                 // 543
      /* falls through */                                                                                              // 544
    case OS:                                                                                                           // 545
      //=== NEEDBITS(16); */                                                                                           // 546
      while (bits < 16) {                                                                                              // 547
        if (have === 0) { break inf_leave; }                                                                           // 548
        have--;                                                                                                        // 549
        hold += input[next++] << bits;                                                                                 // 550
        bits += 8;                                                                                                     // 551
      }                                                                                                                // 552
      //===//                                                                                                          // 553
      if (state.head) {                                                                                                // 554
        state.head.xflags = (hold & 0xff);                                                                             // 555
        state.head.os = (hold >> 8);                                                                                   // 556
      }                                                                                                                // 557
      if (state.flags & 0x0200) {                                                                                      // 558
        //=== CRC2(state.check, hold);                                                                                 // 559
        hbuf[0] = hold & 0xff;                                                                                         // 560
        hbuf[1] = (hold >>> 8) & 0xff;                                                                                 // 561
        state.check = crc32(state.check, hbuf, 2, 0);                                                                  // 562
        //===//                                                                                                        // 563
      }                                                                                                                // 564
      //=== INITBITS();                                                                                                // 565
      hold = 0;                                                                                                        // 566
      bits = 0;                                                                                                        // 567
      //===//                                                                                                          // 568
      state.mode = EXLEN;                                                                                              // 569
      /* falls through */                                                                                              // 570
    case EXLEN:                                                                                                        // 571
      if (state.flags & 0x0400) {                                                                                      // 572
        //=== NEEDBITS(16); */                                                                                         // 573
        while (bits < 16) {                                                                                            // 574
          if (have === 0) { break inf_leave; }                                                                         // 575
          have--;                                                                                                      // 576
          hold += input[next++] << bits;                                                                               // 577
          bits += 8;                                                                                                   // 578
        }                                                                                                              // 579
        //===//                                                                                                        // 580
        state.length = hold;                                                                                           // 581
        if (state.head) {                                                                                              // 582
          state.head.extra_len = hold;                                                                                 // 583
        }                                                                                                              // 584
        if (state.flags & 0x0200) {                                                                                    // 585
          //=== CRC2(state.check, hold);                                                                               // 586
          hbuf[0] = hold & 0xff;                                                                                       // 587
          hbuf[1] = (hold >>> 8) & 0xff;                                                                               // 588
          state.check = crc32(state.check, hbuf, 2, 0);                                                                // 589
          //===//                                                                                                      // 590
        }                                                                                                              // 591
        //=== INITBITS();                                                                                              // 592
        hold = 0;                                                                                                      // 593
        bits = 0;                                                                                                      // 594
        //===//                                                                                                        // 595
      }                                                                                                                // 596
      else if (state.head) {                                                                                           // 597
        state.head.extra = null/*Z_NULL*/;                                                                             // 598
      }                                                                                                                // 599
      state.mode = EXTRA;                                                                                              // 600
      /* falls through */                                                                                              // 601
    case EXTRA:                                                                                                        // 602
      if (state.flags & 0x0400) {                                                                                      // 603
        copy = state.length;                                                                                           // 604
        if (copy > have) { copy = have; }                                                                              // 605
        if (copy) {                                                                                                    // 606
          if (state.head) {                                                                                            // 607
            len = state.head.extra_len - state.length;                                                                 // 608
            if (!state.head.extra) {                                                                                   // 609
              // Use untyped array for more conveniend processing later                                                // 610
              state.head.extra = new Array(state.head.extra_len);                                                      // 611
            }                                                                                                          // 612
            utils.arraySet(                                                                                            // 613
              state.head.extra,                                                                                        // 614
              input,                                                                                                   // 615
              next,                                                                                                    // 616
              // extra field is limited to 65536 bytes                                                                 // 617
              // - no need for additional size check                                                                   // 618
              copy,                                                                                                    // 619
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/                               // 620
              len                                                                                                      // 621
            );                                                                                                         // 622
            //zmemcpy(state.head.extra + len, next,                                                                    // 623
            //        len + copy > state.head.extra_max ?                                                              // 624
            //        state.head.extra_max - len : copy);                                                              // 625
          }                                                                                                            // 626
          if (state.flags & 0x0200) {                                                                                  // 627
            state.check = crc32(state.check, input, copy, next);                                                       // 628
          }                                                                                                            // 629
          have -= copy;                                                                                                // 630
          next += copy;                                                                                                // 631
          state.length -= copy;                                                                                        // 632
        }                                                                                                              // 633
        if (state.length) { break inf_leave; }                                                                         // 634
      }                                                                                                                // 635
      state.length = 0;                                                                                                // 636
      state.mode = NAME;                                                                                               // 637
      /* falls through */                                                                                              // 638
    case NAME:                                                                                                         // 639
      if (state.flags & 0x0800) {                                                                                      // 640
        if (have === 0) { break inf_leave; }                                                                           // 641
        copy = 0;                                                                                                      // 642
        do {                                                                                                           // 643
          // TODO: 2 or 1 bytes?                                                                                       // 644
          len = input[next + copy++];                                                                                  // 645
          /* use constant limit because in js we should not preallocate memory */                                      // 646
          if (state.head && len &&                                                                                     // 647
              (state.length < 65536 /*state.head.name_max*/)) {                                                        // 648
            state.head.name += String.fromCharCode(len);                                                               // 649
          }                                                                                                            // 650
        } while (len && copy < have);                                                                                  // 651
                                                                                                                       // 652
        if (state.flags & 0x0200) {                                                                                    // 653
          state.check = crc32(state.check, input, copy, next);                                                         // 654
        }                                                                                                              // 655
        have -= copy;                                                                                                  // 656
        next += copy;                                                                                                  // 657
        if (len) { break inf_leave; }                                                                                  // 658
      }                                                                                                                // 659
      else if (state.head) {                                                                                           // 660
        state.head.name = null;                                                                                        // 661
      }                                                                                                                // 662
      state.length = 0;                                                                                                // 663
      state.mode = COMMENT;                                                                                            // 664
      /* falls through */                                                                                              // 665
    case COMMENT:                                                                                                      // 666
      if (state.flags & 0x1000) {                                                                                      // 667
        if (have === 0) { break inf_leave; }                                                                           // 668
        copy = 0;                                                                                                      // 669
        do {                                                                                                           // 670
          len = input[next + copy++];                                                                                  // 671
          /* use constant limit because in js we should not preallocate memory */                                      // 672
          if (state.head && len &&                                                                                     // 673
              (state.length < 65536 /*state.head.comm_max*/)) {                                                        // 674
            state.head.comment += String.fromCharCode(len);                                                            // 675
          }                                                                                                            // 676
        } while (len && copy < have);                                                                                  // 677
        if (state.flags & 0x0200) {                                                                                    // 678
          state.check = crc32(state.check, input, copy, next);                                                         // 679
        }                                                                                                              // 680
        have -= copy;                                                                                                  // 681
        next += copy;                                                                                                  // 682
        if (len) { break inf_leave; }                                                                                  // 683
      }                                                                                                                // 684
      else if (state.head) {                                                                                           // 685
        state.head.comment = null;                                                                                     // 686
      }                                                                                                                // 687
      state.mode = HCRC;                                                                                               // 688
      /* falls through */                                                                                              // 689
    case HCRC:                                                                                                         // 690
      if (state.flags & 0x0200) {                                                                                      // 691
        //=== NEEDBITS(16); */                                                                                         // 692
        while (bits < 16) {                                                                                            // 693
          if (have === 0) { break inf_leave; }                                                                         // 694
          have--;                                                                                                      // 695
          hold += input[next++] << bits;                                                                               // 696
          bits += 8;                                                                                                   // 697
        }                                                                                                              // 698
        //===//                                                                                                        // 699
        if (hold !== (state.check & 0xffff)) {                                                                         // 700
          strm.msg = 'header crc mismatch';                                                                            // 701
          state.mode = BAD;                                                                                            // 702
          break;                                                                                                       // 703
        }                                                                                                              // 704
        //=== INITBITS();                                                                                              // 705
        hold = 0;                                                                                                      // 706
        bits = 0;                                                                                                      // 707
        //===//                                                                                                        // 708
      }                                                                                                                // 709
      if (state.head) {                                                                                                // 710
        state.head.hcrc = ((state.flags >> 9) & 1);                                                                    // 711
        state.head.done = true;                                                                                        // 712
      }                                                                                                                // 713
      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;                                                           // 714
      state.mode = TYPE;                                                                                               // 715
      break;                                                                                                           // 716
    case DICTID:                                                                                                       // 717
      //=== NEEDBITS(32); */                                                                                           // 718
      while (bits < 32) {                                                                                              // 719
        if (have === 0) { break inf_leave; }                                                                           // 720
        have--;                                                                                                        // 721
        hold += input[next++] << bits;                                                                                 // 722
        bits += 8;                                                                                                     // 723
      }                                                                                                                // 724
      //===//                                                                                                          // 725
      strm.adler = state.check = ZSWAP32(hold);                                                                        // 726
      //=== INITBITS();                                                                                                // 727
      hold = 0;                                                                                                        // 728
      bits = 0;                                                                                                        // 729
      //===//                                                                                                          // 730
      state.mode = DICT;                                                                                               // 731
      /* falls through */                                                                                              // 732
    case DICT:                                                                                                         // 733
      if (state.havedict === 0) {                                                                                      // 734
        //--- RESTORE() ---                                                                                            // 735
        strm.next_out = put;                                                                                           // 736
        strm.avail_out = left;                                                                                         // 737
        strm.next_in = next;                                                                                           // 738
        strm.avail_in = have;                                                                                          // 739
        state.hold = hold;                                                                                             // 740
        state.bits = bits;                                                                                             // 741
        //---                                                                                                          // 742
        return Z_NEED_DICT;                                                                                            // 743
      }                                                                                                                // 744
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;                                                          // 745
      state.mode = TYPE;                                                                                               // 746
      /* falls through */                                                                                              // 747
    case TYPE:                                                                                                         // 748
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }                                                 // 749
      /* falls through */                                                                                              // 750
    case TYPEDO:                                                                                                       // 751
      if (state.last) {                                                                                                // 752
        //--- BYTEBITS() ---//                                                                                         // 753
        hold >>>= bits & 7;                                                                                            // 754
        bits -= bits & 7;                                                                                              // 755
        //---//                                                                                                        // 756
        state.mode = CHECK;                                                                                            // 757
        break;                                                                                                         // 758
      }                                                                                                                // 759
      //=== NEEDBITS(3); */                                                                                            // 760
      while (bits < 3) {                                                                                               // 761
        if (have === 0) { break inf_leave; }                                                                           // 762
        have--;                                                                                                        // 763
        hold += input[next++] << bits;                                                                                 // 764
        bits += 8;                                                                                                     // 765
      }                                                                                                                // 766
      //===//                                                                                                          // 767
      state.last = (hold & 0x01)/*BITS(1)*/;                                                                           // 768
      //--- DROPBITS(1) ---//                                                                                          // 769
      hold >>>= 1;                                                                                                     // 770
      bits -= 1;                                                                                                       // 771
      //---//                                                                                                          // 772
                                                                                                                       // 773
      switch ((hold & 0x03)/*BITS(2)*/) {                                                                              // 774
      case 0:                             /* stored block */                                                           // 775
        //Tracev((stderr, "inflate:     stored block%s\n",                                                             // 776
        //        state.last ? " (last)" : ""));                                                                       // 777
        state.mode = STORED;                                                                                           // 778
        break;                                                                                                         // 779
      case 1:                             /* fixed block */                                                            // 780
        fixedtables(state);                                                                                            // 781
        //Tracev((stderr, "inflate:     fixed codes block%s\n",                                                        // 782
        //        state.last ? " (last)" : ""));                                                                       // 783
        state.mode = LEN_;             /* decode codes */                                                              // 784
        if (flush === Z_TREES) {                                                                                       // 785
          //--- DROPBITS(2) ---//                                                                                      // 786
          hold >>>= 2;                                                                                                 // 787
          bits -= 2;                                                                                                   // 788
          //---//                                                                                                      // 789
          break inf_leave;                                                                                             // 790
        }                                                                                                              // 791
        break;                                                                                                         // 792
      case 2:                             /* dynamic block */                                                          // 793
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",                                                      // 794
        //        state.last ? " (last)" : ""));                                                                       // 795
        state.mode = TABLE;                                                                                            // 796
        break;                                                                                                         // 797
      case 3:                                                                                                          // 798
        strm.msg = 'invalid block type';                                                                               // 799
        state.mode = BAD;                                                                                              // 800
      }                                                                                                                // 801
      //--- DROPBITS(2) ---//                                                                                          // 802
      hold >>>= 2;                                                                                                     // 803
      bits -= 2;                                                                                                       // 804
      //---//                                                                                                          // 805
      break;                                                                                                           // 806
    case STORED:                                                                                                       // 807
      //--- BYTEBITS() ---// /* go to byte boundary */                                                                 // 808
      hold >>>= bits & 7;                                                                                              // 809
      bits -= bits & 7;                                                                                                // 810
      //---//                                                                                                          // 811
      //=== NEEDBITS(32); */                                                                                           // 812
      while (bits < 32) {                                                                                              // 813
        if (have === 0) { break inf_leave; }                                                                           // 814
        have--;                                                                                                        // 815
        hold += input[next++] << bits;                                                                                 // 816
        bits += 8;                                                                                                     // 817
      }                                                                                                                // 818
      //===//                                                                                                          // 819
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {                                                              // 820
        strm.msg = 'invalid stored block lengths';                                                                     // 821
        state.mode = BAD;                                                                                              // 822
        break;                                                                                                         // 823
      }                                                                                                                // 824
      state.length = hold & 0xffff;                                                                                    // 825
      //Tracev((stderr, "inflate:       stored length %u\n",                                                           // 826
      //        state.length));                                                                                        // 827
      //=== INITBITS();                                                                                                // 828
      hold = 0;                                                                                                        // 829
      bits = 0;                                                                                                        // 830
      //===//                                                                                                          // 831
      state.mode = COPY_;                                                                                              // 832
      if (flush === Z_TREES) { break inf_leave; }                                                                      // 833
      /* falls through */                                                                                              // 834
    case COPY_:                                                                                                        // 835
      state.mode = COPY;                                                                                               // 836
      /* falls through */                                                                                              // 837
    case COPY:                                                                                                         // 838
      copy = state.length;                                                                                             // 839
      if (copy) {                                                                                                      // 840
        if (copy > have) { copy = have; }                                                                              // 841
        if (copy > left) { copy = left; }                                                                              // 842
        if (copy === 0) { break inf_leave; }                                                                           // 843
        //--- zmemcpy(put, next, copy); ---                                                                            // 844
        utils.arraySet(output, input, next, copy, put);                                                                // 845
        //---//                                                                                                        // 846
        have -= copy;                                                                                                  // 847
        next += copy;                                                                                                  // 848
        left -= copy;                                                                                                  // 849
        put += copy;                                                                                                   // 850
        state.length -= copy;                                                                                          // 851
        break;                                                                                                         // 852
      }                                                                                                                // 853
      //Tracev((stderr, "inflate:       stored end\n"));                                                               // 854
      state.mode = TYPE;                                                                                               // 855
      break;                                                                                                           // 856
    case TABLE:                                                                                                        // 857
      //=== NEEDBITS(14); */                                                                                           // 858
      while (bits < 14) {                                                                                              // 859
        if (have === 0) { break inf_leave; }                                                                           // 860
        have--;                                                                                                        // 861
        hold += input[next++] << bits;                                                                                 // 862
        bits += 8;                                                                                                     // 863
      }                                                                                                                // 864
      //===//                                                                                                          // 865
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;                                                                     // 866
      //--- DROPBITS(5) ---//                                                                                          // 867
      hold >>>= 5;                                                                                                     // 868
      bits -= 5;                                                                                                       // 869
      //---//                                                                                                          // 870
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;                                                                      // 871
      //--- DROPBITS(5) ---//                                                                                          // 872
      hold >>>= 5;                                                                                                     // 873
      bits -= 5;                                                                                                       // 874
      //---//                                                                                                          // 875
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;                                                                      // 876
      //--- DROPBITS(4) ---//                                                                                          // 877
      hold >>>= 4;                                                                                                     // 878
      bits -= 4;                                                                                                       // 879
      //---//                                                                                                          // 880
//#ifndef PKZIP_BUG_WORKAROUND                                                                                         // 881
      if (state.nlen > 286 || state.ndist > 30) {                                                                      // 882
        strm.msg = 'too many length or distance symbols';                                                              // 883
        state.mode = BAD;                                                                                              // 884
        break;                                                                                                         // 885
      }                                                                                                                // 886
//#endif                                                                                                               // 887
      //Tracev((stderr, "inflate:       table sizes ok\n"));                                                           // 888
      state.have = 0;                                                                                                  // 889
      state.mode = LENLENS;                                                                                            // 890
      /* falls through */                                                                                              // 891
    case LENLENS:                                                                                                      // 892
      while (state.have < state.ncode) {                                                                               // 893
        //=== NEEDBITS(3);                                                                                             // 894
        while (bits < 3) {                                                                                             // 895
          if (have === 0) { break inf_leave; }                                                                         // 896
          have--;                                                                                                      // 897
          hold += input[next++] << bits;                                                                               // 898
          bits += 8;                                                                                                   // 899
        }                                                                                                              // 900
        //===//                                                                                                        // 901
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);                                                     // 902
        //--- DROPBITS(3) ---//                                                                                        // 903
        hold >>>= 3;                                                                                                   // 904
        bits -= 3;                                                                                                     // 905
        //---//                                                                                                        // 906
      }                                                                                                                // 907
      while (state.have < 19) {                                                                                        // 908
        state.lens[order[state.have++]] = 0;                                                                           // 909
      }                                                                                                                // 910
      // We have separate tables & no pointers. 2 commented lines below not needed.                                    // 911
      //state.next = state.codes;                                                                                      // 912
      //state.lencode = state.next;                                                                                    // 913
      // Switch to use dynamic table                                                                                   // 914
      state.lencode = state.lendyn;                                                                                    // 915
      state.lenbits = 7;                                                                                               // 916
                                                                                                                       // 917
      opts = {bits: state.lenbits};                                                                                    // 918
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);                               // 919
      state.lenbits = opts.bits;                                                                                       // 920
                                                                                                                       // 921
      if (ret) {                                                                                                       // 922
        strm.msg = 'invalid code lengths set';                                                                         // 923
        state.mode = BAD;                                                                                              // 924
        break;                                                                                                         // 925
      }                                                                                                                // 926
      //Tracev((stderr, "inflate:       code lengths ok\n"));                                                          // 927
      state.have = 0;                                                                                                  // 928
      state.mode = CODELENS;                                                                                           // 929
      /* falls through */                                                                                              // 930
    case CODELENS:                                                                                                     // 931
      while (state.have < state.nlen + state.ndist) {                                                                  // 932
        for (;;) {                                                                                                     // 933
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/                              // 934
          here_bits = here >>> 24;                                                                                     // 935
          here_op = (here >>> 16) & 0xff;                                                                              // 936
          here_val = here & 0xffff;                                                                                    // 937
                                                                                                                       // 938
          if ((here_bits) <= bits) { break; }                                                                          // 939
          //--- PULLBYTE() ---//                                                                                       // 940
          if (have === 0) { break inf_leave; }                                                                         // 941
          have--;                                                                                                      // 942
          hold += input[next++] << bits;                                                                               // 943
          bits += 8;                                                                                                   // 944
          //---//                                                                                                      // 945
        }                                                                                                              // 946
        if (here_val < 16) {                                                                                           // 947
          //--- DROPBITS(here.bits) ---//                                                                              // 948
          hold >>>= here_bits;                                                                                         // 949
          bits -= here_bits;                                                                                           // 950
          //---//                                                                                                      // 951
          state.lens[state.have++] = here_val;                                                                         // 952
        }                                                                                                              // 953
        else {                                                                                                         // 954
          if (here_val === 16) {                                                                                       // 955
            //=== NEEDBITS(here.bits + 2);                                                                             // 956
            n = here_bits + 2;                                                                                         // 957
            while (bits < n) {                                                                                         // 958
              if (have === 0) { break inf_leave; }                                                                     // 959
              have--;                                                                                                  // 960
              hold += input[next++] << bits;                                                                           // 961
              bits += 8;                                                                                               // 962
            }                                                                                                          // 963
            //===//                                                                                                    // 964
            //--- DROPBITS(here.bits) ---//                                                                            // 965
            hold >>>= here_bits;                                                                                       // 966
            bits -= here_bits;                                                                                         // 967
            //---//                                                                                                    // 968
            if (state.have === 0) {                                                                                    // 969
              strm.msg = 'invalid bit length repeat';                                                                  // 970
              state.mode = BAD;                                                                                        // 971
              break;                                                                                                   // 972
            }                                                                                                          // 973
            len = state.lens[state.have - 1];                                                                          // 974
            copy = 3 + (hold & 0x03);//BITS(2);                                                                        // 975
            //--- DROPBITS(2) ---//                                                                                    // 976
            hold >>>= 2;                                                                                               // 977
            bits -= 2;                                                                                                 // 978
            //---//                                                                                                    // 979
          }                                                                                                            // 980
          else if (here_val === 17) {                                                                                  // 981
            //=== NEEDBITS(here.bits + 3);                                                                             // 982
            n = here_bits + 3;                                                                                         // 983
            while (bits < n) {                                                                                         // 984
              if (have === 0) { break inf_leave; }                                                                     // 985
              have--;                                                                                                  // 986
              hold += input[next++] << bits;                                                                           // 987
              bits += 8;                                                                                               // 988
            }                                                                                                          // 989
            //===//                                                                                                    // 990
            //--- DROPBITS(here.bits) ---//                                                                            // 991
            hold >>>= here_bits;                                                                                       // 992
            bits -= here_bits;                                                                                         // 993
            //---//                                                                                                    // 994
            len = 0;                                                                                                   // 995
            copy = 3 + (hold & 0x07);//BITS(3);                                                                        // 996
            //--- DROPBITS(3) ---//                                                                                    // 997
            hold >>>= 3;                                                                                               // 998
            bits -= 3;                                                                                                 // 999
            //---//                                                                                                    // 1000
          }                                                                                                            // 1001
          else {                                                                                                       // 1002
            //=== NEEDBITS(here.bits + 7);                                                                             // 1003
            n = here_bits + 7;                                                                                         // 1004
            while (bits < n) {                                                                                         // 1005
              if (have === 0) { break inf_leave; }                                                                     // 1006
              have--;                                                                                                  // 1007
              hold += input[next++] << bits;                                                                           // 1008
              bits += 8;                                                                                               // 1009
            }                                                                                                          // 1010
            //===//                                                                                                    // 1011
            //--- DROPBITS(here.bits) ---//                                                                            // 1012
            hold >>>= here_bits;                                                                                       // 1013
            bits -= here_bits;                                                                                         // 1014
            //---//                                                                                                    // 1015
            len = 0;                                                                                                   // 1016
            copy = 11 + (hold & 0x7f);//BITS(7);                                                                       // 1017
            //--- DROPBITS(7) ---//                                                                                    // 1018
            hold >>>= 7;                                                                                               // 1019
            bits -= 7;                                                                                                 // 1020
            //---//                                                                                                    // 1021
          }                                                                                                            // 1022
          if (state.have + copy > state.nlen + state.ndist) {                                                          // 1023
            strm.msg = 'invalid bit length repeat';                                                                    // 1024
            state.mode = BAD;                                                                                          // 1025
            break;                                                                                                     // 1026
          }                                                                                                            // 1027
          while (copy--) {                                                                                             // 1028
            state.lens[state.have++] = len;                                                                            // 1029
          }                                                                                                            // 1030
        }                                                                                                              // 1031
      }                                                                                                                // 1032
                                                                                                                       // 1033
      /* handle error breaks in while */                                                                               // 1034
      if (state.mode === BAD) { break; }                                                                               // 1035
                                                                                                                       // 1036
      /* check for end-of-block code (better have one) */                                                              // 1037
      if (state.lens[256] === 0) {                                                                                     // 1038
        strm.msg = 'invalid code -- missing end-of-block';                                                             // 1039
        state.mode = BAD;                                                                                              // 1040
        break;                                                                                                         // 1041
      }                                                                                                                // 1042
                                                                                                                       // 1043
      /* build code tables -- note: do not change the lenbits or distbits                                              // 1044
         values here (9 and 6) without reading the comments in inftrees.h                                              // 1045
         concerning the ENOUGH constants, which depend on those values */                                              // 1046
      state.lenbits = 9;                                                                                               // 1047
                                                                                                                       // 1048
      opts = {bits: state.lenbits};                                                                                    // 1049
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);                        // 1050
      // We have separate tables & no pointers. 2 commented lines below not needed.                                    // 1051
      // state.next_index = opts.table_index;                                                                          // 1052
      state.lenbits = opts.bits;                                                                                       // 1053
      // state.lencode = state.next;                                                                                   // 1054
                                                                                                                       // 1055
      if (ret) {                                                                                                       // 1056
        strm.msg = 'invalid literal/lengths set';                                                                      // 1057
        state.mode = BAD;                                                                                              // 1058
        break;                                                                                                         // 1059
      }                                                                                                                // 1060
                                                                                                                       // 1061
      state.distbits = 6;                                                                                              // 1062
      //state.distcode.copy(state.codes);                                                                              // 1063
      // Switch to use dynamic table                                                                                   // 1064
      state.distcode = state.distdyn;                                                                                  // 1065
      opts = {bits: state.distbits};                                                                                   // 1066
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);            // 1067
      // We have separate tables & no pointers. 2 commented lines below not needed.                                    // 1068
      // state.next_index = opts.table_index;                                                                          // 1069
      state.distbits = opts.bits;                                                                                      // 1070
      // state.distcode = state.next;                                                                                  // 1071
                                                                                                                       // 1072
      if (ret) {                                                                                                       // 1073
        strm.msg = 'invalid distances set';                                                                            // 1074
        state.mode = BAD;                                                                                              // 1075
        break;                                                                                                         // 1076
      }                                                                                                                // 1077
      //Tracev((stderr, 'inflate:       codes ok\n'));                                                                 // 1078
      state.mode = LEN_;                                                                                               // 1079
      if (flush === Z_TREES) { break inf_leave; }                                                                      // 1080
      /* falls through */                                                                                              // 1081
    case LEN_:                                                                                                         // 1082
      state.mode = LEN;                                                                                                // 1083
      /* falls through */                                                                                              // 1084
    case LEN:                                                                                                          // 1085
      if (have >= 6 && left >= 258) {                                                                                  // 1086
        //--- RESTORE() ---                                                                                            // 1087
        strm.next_out = put;                                                                                           // 1088
        strm.avail_out = left;                                                                                         // 1089
        strm.next_in = next;                                                                                           // 1090
        strm.avail_in = have;                                                                                          // 1091
        state.hold = hold;                                                                                             // 1092
        state.bits = bits;                                                                                             // 1093
        //---                                                                                                          // 1094
        inflate_fast(strm, _out);                                                                                      // 1095
        //--- LOAD() ---                                                                                               // 1096
        put = strm.next_out;                                                                                           // 1097
        output = strm.output;                                                                                          // 1098
        left = strm.avail_out;                                                                                         // 1099
        next = strm.next_in;                                                                                           // 1100
        input = strm.input;                                                                                            // 1101
        have = strm.avail_in;                                                                                          // 1102
        hold = state.hold;                                                                                             // 1103
        bits = state.bits;                                                                                             // 1104
        //---                                                                                                          // 1105
                                                                                                                       // 1106
        if (state.mode === TYPE) {                                                                                     // 1107
          state.back = -1;                                                                                             // 1108
        }                                                                                                              // 1109
        break;                                                                                                         // 1110
      }                                                                                                                // 1111
      state.back = 0;                                                                                                  // 1112
      for (;;) {                                                                                                       // 1113
        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/                               // 1114
        here_bits = here >>> 24;                                                                                       // 1115
        here_op = (here >>> 16) & 0xff;                                                                                // 1116
        here_val = here & 0xffff;                                                                                      // 1117
                                                                                                                       // 1118
        if (here_bits <= bits) { break; }                                                                              // 1119
        //--- PULLBYTE() ---//                                                                                         // 1120
        if (have === 0) { break inf_leave; }                                                                           // 1121
        have--;                                                                                                        // 1122
        hold += input[next++] << bits;                                                                                 // 1123
        bits += 8;                                                                                                     // 1124
        //---//                                                                                                        // 1125
      }                                                                                                                // 1126
      if (here_op && (here_op & 0xf0) === 0) {                                                                         // 1127
        last_bits = here_bits;                                                                                         // 1128
        last_op = here_op;                                                                                             // 1129
        last_val = here_val;                                                                                           // 1130
        for (;;) {                                                                                                     // 1131
          here = state.lencode[last_val +                                                                              // 1132
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];             // 1133
          here_bits = here >>> 24;                                                                                     // 1134
          here_op = (here >>> 16) & 0xff;                                                                              // 1135
          here_val = here & 0xffff;                                                                                    // 1136
                                                                                                                       // 1137
          if ((last_bits + here_bits) <= bits) { break; }                                                              // 1138
          //--- PULLBYTE() ---//                                                                                       // 1139
          if (have === 0) { break inf_leave; }                                                                         // 1140
          have--;                                                                                                      // 1141
          hold += input[next++] << bits;                                                                               // 1142
          bits += 8;                                                                                                   // 1143
          //---//                                                                                                      // 1144
        }                                                                                                              // 1145
        //--- DROPBITS(last.bits) ---//                                                                                // 1146
        hold >>>= last_bits;                                                                                           // 1147
        bits -= last_bits;                                                                                             // 1148
        //---//                                                                                                        // 1149
        state.back += last_bits;                                                                                       // 1150
      }                                                                                                                // 1151
      //--- DROPBITS(here.bits) ---//                                                                                  // 1152
      hold >>>= here_bits;                                                                                             // 1153
      bits -= here_bits;                                                                                               // 1154
      //---//                                                                                                          // 1155
      state.back += here_bits;                                                                                         // 1156
      state.length = here_val;                                                                                         // 1157
      if (here_op === 0) {                                                                                             // 1158
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?                                                       // 1159
        //        "inflate:         literal '%c'\n" :                                                                  // 1160
        //        "inflate:         literal 0x%02x\n", here.val));                                                     // 1161
        state.mode = LIT;                                                                                              // 1162
        break;                                                                                                         // 1163
      }                                                                                                                // 1164
      if (here_op & 32) {                                                                                              // 1165
        //Tracevv((stderr, "inflate:         end of block\n"));                                                        // 1166
        state.back = -1;                                                                                               // 1167
        state.mode = TYPE;                                                                                             // 1168
        break;                                                                                                         // 1169
      }                                                                                                                // 1170
      if (here_op & 64) {                                                                                              // 1171
        strm.msg = 'invalid literal/length code';                                                                      // 1172
        state.mode = BAD;                                                                                              // 1173
        break;                                                                                                         // 1174
      }                                                                                                                // 1175
      state.extra = here_op & 15;                                                                                      // 1176
      state.mode = LENEXT;                                                                                             // 1177
      /* falls through */                                                                                              // 1178
    case LENEXT:                                                                                                       // 1179
      if (state.extra) {                                                                                               // 1180
        //=== NEEDBITS(state.extra);                                                                                   // 1181
        n = state.extra;                                                                                               // 1182
        while (bits < n) {                                                                                             // 1183
          if (have === 0) { break inf_leave; }                                                                         // 1184
          have--;                                                                                                      // 1185
          hold += input[next++] << bits;                                                                               // 1186
          bits += 8;                                                                                                   // 1187
        }                                                                                                              // 1188
        //===//                                                                                                        // 1189
        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;                                           // 1190
        //--- DROPBITS(state.extra) ---//                                                                              // 1191
        hold >>>= state.extra;                                                                                         // 1192
        bits -= state.extra;                                                                                           // 1193
        //---//                                                                                                        // 1194
        state.back += state.extra;                                                                                     // 1195
      }                                                                                                                // 1196
      //Tracevv((stderr, "inflate:         length %u\n", state.length));                                               // 1197
      state.was = state.length;                                                                                        // 1198
      state.mode = DIST;                                                                                               // 1199
      /* falls through */                                                                                              // 1200
    case DIST:                                                                                                         // 1201
      for (;;) {                                                                                                       // 1202
        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/                              // 1203
        here_bits = here >>> 24;                                                                                       // 1204
        here_op = (here >>> 16) & 0xff;                                                                                // 1205
        here_val = here & 0xffff;                                                                                      // 1206
                                                                                                                       // 1207
        if ((here_bits) <= bits) { break; }                                                                            // 1208
        //--- PULLBYTE() ---//                                                                                         // 1209
        if (have === 0) { break inf_leave; }                                                                           // 1210
        have--;                                                                                                        // 1211
        hold += input[next++] << bits;                                                                                 // 1212
        bits += 8;                                                                                                     // 1213
        //---//                                                                                                        // 1214
      }                                                                                                                // 1215
      if ((here_op & 0xf0) === 0) {                                                                                    // 1216
        last_bits = here_bits;                                                                                         // 1217
        last_op = here_op;                                                                                             // 1218
        last_val = here_val;                                                                                           // 1219
        for (;;) {                                                                                                     // 1220
          here = state.distcode[last_val +                                                                             // 1221
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];             // 1222
          here_bits = here >>> 24;                                                                                     // 1223
          here_op = (here >>> 16) & 0xff;                                                                              // 1224
          here_val = here & 0xffff;                                                                                    // 1225
                                                                                                                       // 1226
          if ((last_bits + here_bits) <= bits) { break; }                                                              // 1227
          //--- PULLBYTE() ---//                                                                                       // 1228
          if (have === 0) { break inf_leave; }                                                                         // 1229
          have--;                                                                                                      // 1230
          hold += input[next++] << bits;                                                                               // 1231
          bits += 8;                                                                                                   // 1232
          //---//                                                                                                      // 1233
        }                                                                                                              // 1234
        //--- DROPBITS(last.bits) ---//                                                                                // 1235
        hold >>>= last_bits;                                                                                           // 1236
        bits -= last_bits;                                                                                             // 1237
        //---//                                                                                                        // 1238
        state.back += last_bits;                                                                                       // 1239
      }                                                                                                                // 1240
      //--- DROPBITS(here.bits) ---//                                                                                  // 1241
      hold >>>= here_bits;                                                                                             // 1242
      bits -= here_bits;                                                                                               // 1243
      //---//                                                                                                          // 1244
      state.back += here_bits;                                                                                         // 1245
      if (here_op & 64) {                                                                                              // 1246
        strm.msg = 'invalid distance code';                                                                            // 1247
        state.mode = BAD;                                                                                              // 1248
        break;                                                                                                         // 1249
      }                                                                                                                // 1250
      state.offset = here_val;                                                                                         // 1251
      state.extra = (here_op) & 15;                                                                                    // 1252
      state.mode = DISTEXT;                                                                                            // 1253
      /* falls through */                                                                                              // 1254
    case DISTEXT:                                                                                                      // 1255
      if (state.extra) {                                                                                               // 1256
        //=== NEEDBITS(state.extra);                                                                                   // 1257
        n = state.extra;                                                                                               // 1258
        while (bits < n) {                                                                                             // 1259
          if (have === 0) { break inf_leave; }                                                                         // 1260
          have--;                                                                                                      // 1261
          hold += input[next++] << bits;                                                                               // 1262
          bits += 8;                                                                                                   // 1263
        }                                                                                                              // 1264
        //===//                                                                                                        // 1265
        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;                                           // 1266
        //--- DROPBITS(state.extra) ---//                                                                              // 1267
        hold >>>= state.extra;                                                                                         // 1268
        bits -= state.extra;                                                                                           // 1269
        //---//                                                                                                        // 1270
        state.back += state.extra;                                                                                     // 1271
      }                                                                                                                // 1272
//#ifdef INFLATE_STRICT                                                                                                // 1273
      if (state.offset > state.dmax) {                                                                                 // 1274
        strm.msg = 'invalid distance too far back';                                                                    // 1275
        state.mode = BAD;                                                                                              // 1276
        break;                                                                                                         // 1277
      }                                                                                                                // 1278
//#endif                                                                                                               // 1279
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));                                             // 1280
      state.mode = MATCH;                                                                                              // 1281
      /* falls through */                                                                                              // 1282
    case MATCH:                                                                                                        // 1283
      if (left === 0) { break inf_leave; }                                                                             // 1284
      copy = _out - left;                                                                                              // 1285
      if (state.offset > copy) {         /* copy from window */                                                        // 1286
        copy = state.offset - copy;                                                                                    // 1287
        if (copy > state.whave) {                                                                                      // 1288
          if (state.sane) {                                                                                            // 1289
            strm.msg = 'invalid distance too far back';                                                                // 1290
            state.mode = BAD;                                                                                          // 1291
            break;                                                                                                     // 1292
          }                                                                                                            // 1293
// (!) This block is disabled in zlib defailts,                                                                        // 1294
// don't enable it for binary compatibility                                                                            // 1295
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR                                                                    // 1296
//          Trace((stderr, "inflate.c too far\n"));                                                                    // 1297
//          copy -= state.whave;                                                                                       // 1298
//          if (copy > state.length) { copy = state.length; }                                                          // 1299
//          if (copy > left) { copy = left; }                                                                          // 1300
//          left -= copy;                                                                                              // 1301
//          state.length -= copy;                                                                                      // 1302
//          do {                                                                                                       // 1303
//            output[put++] = 0;                                                                                       // 1304
//          } while (--copy);                                                                                          // 1305
//          if (state.length === 0) { state.mode = LEN; }                                                              // 1306
//          break;                                                                                                     // 1307
//#endif                                                                                                               // 1308
        }                                                                                                              // 1309
        if (copy > state.wnext) {                                                                                      // 1310
          copy -= state.wnext;                                                                                         // 1311
          from = state.wsize - copy;                                                                                   // 1312
        }                                                                                                              // 1313
        else {                                                                                                         // 1314
          from = state.wnext - copy;                                                                                   // 1315
        }                                                                                                              // 1316
        if (copy > state.length) { copy = state.length; }                                                              // 1317
        from_source = state.window;                                                                                    // 1318
      }                                                                                                                // 1319
      else {                              /* copy from output */                                                       // 1320
        from_source = output;                                                                                          // 1321
        from = put - state.offset;                                                                                     // 1322
        copy = state.length;                                                                                           // 1323
      }                                                                                                                // 1324
      if (copy > left) { copy = left; }                                                                                // 1325
      left -= copy;                                                                                                    // 1326
      state.length -= copy;                                                                                            // 1327
      do {                                                                                                             // 1328
        output[put++] = from_source[from++];                                                                           // 1329
      } while (--copy);                                                                                                // 1330
      if (state.length === 0) { state.mode = LEN; }                                                                    // 1331
      break;                                                                                                           // 1332
    case LIT:                                                                                                          // 1333
      if (left === 0) { break inf_leave; }                                                                             // 1334
      output[put++] = state.length;                                                                                    // 1335
      left--;                                                                                                          // 1336
      state.mode = LEN;                                                                                                // 1337
      break;                                                                                                           // 1338
    case CHECK:                                                                                                        // 1339
      if (state.wrap) {                                                                                                // 1340
        //=== NEEDBITS(32);                                                                                            // 1341
        while (bits < 32) {                                                                                            // 1342
          if (have === 0) { break inf_leave; }                                                                         // 1343
          have--;                                                                                                      // 1344
          // Use '|' insdead of '+' to make sure that result is signed                                                 // 1345
          hold |= input[next++] << bits;                                                                               // 1346
          bits += 8;                                                                                                   // 1347
        }                                                                                                              // 1348
        //===//                                                                                                        // 1349
        _out -= left;                                                                                                  // 1350
        strm.total_out += _out;                                                                                        // 1351
        state.total += _out;                                                                                           // 1352
        if (_out) {                                                                                                    // 1353
          strm.adler = state.check =                                                                                   // 1354
              /*UPDATE(state.check, put - _out, _out);*/                                                               // 1355
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
                                                                                                                       // 1357
        }                                                                                                              // 1358
        _out = left;                                                                                                   // 1359
        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too                                           // 1360
        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {                                                    // 1361
          strm.msg = 'incorrect data check';                                                                           // 1362
          state.mode = BAD;                                                                                            // 1363
          break;                                                                                                       // 1364
        }                                                                                                              // 1365
        //=== INITBITS();                                                                                              // 1366
        hold = 0;                                                                                                      // 1367
        bits = 0;                                                                                                      // 1368
        //===//                                                                                                        // 1369
        //Tracev((stderr, "inflate:   check matches trailer\n"));                                                      // 1370
      }                                                                                                                // 1371
      state.mode = LENGTH;                                                                                             // 1372
      /* falls through */                                                                                              // 1373
    case LENGTH:                                                                                                       // 1374
      if (state.wrap && state.flags) {                                                                                 // 1375
        //=== NEEDBITS(32);                                                                                            // 1376
        while (bits < 32) {                                                                                            // 1377
          if (have === 0) { break inf_leave; }                                                                         // 1378
          have--;                                                                                                      // 1379
          hold += input[next++] << bits;                                                                               // 1380
          bits += 8;                                                                                                   // 1381
        }                                                                                                              // 1382
        //===//                                                                                                        // 1383
        if (hold !== (state.total & 0xffffffff)) {                                                                     // 1384
          strm.msg = 'incorrect length check';                                                                         // 1385
          state.mode = BAD;                                                                                            // 1386
          break;                                                                                                       // 1387
        }                                                                                                              // 1388
        //=== INITBITS();                                                                                              // 1389
        hold = 0;                                                                                                      // 1390
        bits = 0;                                                                                                      // 1391
        //===//                                                                                                        // 1392
        //Tracev((stderr, "inflate:   length matches trailer\n"));                                                     // 1393
      }                                                                                                                // 1394
      state.mode = DONE;                                                                                               // 1395
      /* falls through */                                                                                              // 1396
    case DONE:                                                                                                         // 1397
      ret = Z_STREAM_END;                                                                                              // 1398
      break inf_leave;                                                                                                 // 1399
    case BAD:                                                                                                          // 1400
      ret = Z_DATA_ERROR;                                                                                              // 1401
      break inf_leave;                                                                                                 // 1402
    case MEM:                                                                                                          // 1403
      return Z_MEM_ERROR;                                                                                              // 1404
    case SYNC:                                                                                                         // 1405
      /* falls through */                                                                                              // 1406
    default:                                                                                                           // 1407
      return Z_STREAM_ERROR;                                                                                           // 1408
    }                                                                                                                  // 1409
  }                                                                                                                    // 1410
                                                                                                                       // 1411
  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"                              // 1412
                                                                                                                       // 1413
  /*                                                                                                                   // 1414
     Return from inflate(), updating the total counts and the check value.                                             // 1415
     If there was no progress during the inflate() call, return a buffer                                               // 1416
     error.  Call updatewindow() to create and/or update the window state.                                             // 1417
     Note: a memory error from inflate() is non-recoverable.                                                           // 1418
   */                                                                                                                  // 1419
                                                                                                                       // 1420
  //--- RESTORE() ---                                                                                                  // 1421
  strm.next_out = put;                                                                                                 // 1422
  strm.avail_out = left;                                                                                               // 1423
  strm.next_in = next;                                                                                                 // 1424
  strm.avail_in = have;                                                                                                // 1425
  state.hold = hold;                                                                                                   // 1426
  state.bits = bits;                                                                                                   // 1427
  //---                                                                                                                // 1428
                                                                                                                       // 1429
  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&                                                   // 1430
                      (state.mode < CHECK || flush !== Z_FINISH))) {                                                   // 1431
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {                                       // 1432
      state.mode = MEM;                                                                                                // 1433
      return Z_MEM_ERROR;                                                                                              // 1434
    }                                                                                                                  // 1435
  }                                                                                                                    // 1436
  _in -= strm.avail_in;                                                                                                // 1437
  _out -= strm.avail_out;                                                                                              // 1438
  strm.total_in += _in;                                                                                                // 1439
  strm.total_out += _out;                                                                                              // 1440
  state.total += _out;                                                                                                 // 1441
  if (state.wrap && _out) {                                                                                            // 1442
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/                                    // 1443
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }                                                                                                                    // 1445
  strm.data_type = state.bits + (state.last ? 64 : 0) +                                                                // 1446
                    (state.mode === TYPE ? 128 : 0) +                                                                  // 1447
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);                                           // 1448
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {                                             // 1449
    ret = Z_BUF_ERROR;                                                                                                 // 1450
  }                                                                                                                    // 1451
  return ret;                                                                                                          // 1452
}                                                                                                                      // 1453
                                                                                                                       // 1454
function inflateEnd(strm) {                                                                                            // 1455
                                                                                                                       // 1456
  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {                                                       // 1457
    return Z_STREAM_ERROR;                                                                                             // 1458
  }                                                                                                                    // 1459
                                                                                                                       // 1460
  var state = strm.state;                                                                                              // 1461
  if (state.window) {                                                                                                  // 1462
    state.window = null;                                                                                               // 1463
  }                                                                                                                    // 1464
  strm.state = null;                                                                                                   // 1465
  return Z_OK;                                                                                                         // 1466
}                                                                                                                      // 1467
                                                                                                                       // 1468
function inflateGetHeader(strm, head) {                                                                                // 1469
  var state;                                                                                                           // 1470
                                                                                                                       // 1471
  /* check state */                                                                                                    // 1472
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }                                                                 // 1473
  state = strm.state;                                                                                                  // 1474
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }                                                               // 1475
                                                                                                                       // 1476
  /* save header structure */                                                                                          // 1477
  state.head = head;                                                                                                   // 1478
  head.done = false;                                                                                                   // 1479
  return Z_OK;                                                                                                         // 1480
}                                                                                                                      // 1481
                                                                                                                       // 1482
                                                                                                                       // 1483
exports.inflateReset = inflateReset;                                                                                   // 1484
exports.inflateReset2 = inflateReset2;                                                                                 // 1485
exports.inflateResetKeep = inflateResetKeep;                                                                           // 1486
exports.inflateInit = inflateInit;                                                                                     // 1487
exports.inflateInit2 = inflateInit2;                                                                                   // 1488
exports.inflate = inflate;                                                                                             // 1489
exports.inflateEnd = inflateEnd;                                                                                       // 1490
exports.inflateGetHeader = inflateGetHeader;                                                                           // 1491
exports.inflateInfo = 'pako inflate (from Nodeca project)';                                                            // 1492
                                                                                                                       // 1493
/* Not implemented                                                                                                     // 1494
exports.inflateCopy = inflateCopy;                                                                                     // 1495
exports.inflateGetDictionary = inflateGetDictionary;                                                                   // 1496
exports.inflateMark = inflateMark;                                                                                     // 1497
exports.inflatePrime = inflatePrime;                                                                                   // 1498
exports.inflateSetDictionary = inflateSetDictionary;                                                                   // 1499
exports.inflateSync = inflateSync;                                                                                     // 1500
exports.inflateSyncPoint = inflateSyncPoint;                                                                           // 1501
exports.inflateUndermine = inflateUndermine;                                                                           // 1502
*/                                                                                                                     // 1503
                                                                                                                       // 1504
},{"../utils/common":4,"./adler32":5,"./crc32":7,"./inffast":9,"./inftrees":11}],11:[function(require,module,exports){
'use strict';                                                                                                          // 1
                                                                                                                       // 2
                                                                                                                       // 3
var utils = require('../utils/common');                                                                                // 4
                                                                                                                       // 5
var MAXBITS = 15;                                                                                                      // 6
var ENOUGH_LENS = 852;                                                                                                 // 7
var ENOUGH_DISTS = 592;                                                                                                // 8
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);                                                                             // 9
                                                                                                                       // 10
var CODES = 0;                                                                                                         // 11
var LENS = 1;                                                                                                          // 12
var DISTS = 2;                                                                                                         // 13
                                                                                                                       // 14
var lbase = [ /* Length codes 257..285 base */                                                                         // 15
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,                                                             // 16
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0                                                       // 17
];                                                                                                                     // 18
                                                                                                                       // 19
var lext = [ /* Length codes 257..285 extra */                                                                         // 20
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,                                                      // 21
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78                                                           // 22
];                                                                                                                     // 23
                                                                                                                       // 24
var dbase = [ /* Distance codes 0..29 base */                                                                          // 25
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,                                                           // 26
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,                                                              // 27
  8193, 12289, 16385, 24577, 0, 0                                                                                      // 28
];                                                                                                                     // 29
                                                                                                                       // 30
var dext = [ /* Distance codes 0..29 extra */                                                                          // 31
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,                                                      // 32
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,                                                                              // 33
  28, 28, 29, 29, 64, 64                                                                                               // 34
];                                                                                                                     // 35
                                                                                                                       // 36
module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)                 // 37
{                                                                                                                      // 38
  var bits = opts.bits;                                                                                                // 39
      //here = opts.here; /* table entry for duplication */                                                            // 40
                                                                                                                       // 41
  var len = 0;               /* a code's length in bits */                                                             // 42
  var sym = 0;               /* index of code symbols */                                                               // 43
  var min = 0, max = 0;          /* minimum and maximum code lengths */                                                // 44
  var root = 0;              /* number of index bits for root table */                                                 // 45
  var curr = 0;              /* number of index bits for current table */                                              // 46
  var drop = 0;              /* code bits to drop for sub-table */                                                     // 47
  var left = 0;                   /* number of prefix codes available */                                               // 48
  var used = 0;              /* code entries in table used */                                                          // 49
  var huff = 0;              /* Huffman code */                                                                        // 50
  var incr;              /* for incrementing code, index */                                                            // 51
  var fill;              /* index for replicating entries */                                                           // 52
  var low;               /* low bits for current root entry */                                                         // 53
  var mask;              /* mask for low root bits */                                                                  // 54
  var next;             /* next available space in table */                                                            // 55
  var base = null;     /* base value table to use */                                                                   // 56
  var base_index = 0;                                                                                                  // 57
//  var shoextra;    /* extra bits table to use */                                                                     // 58
  var end;                    /* use base and extra for symbol > end */                                                // 59
  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */                       // 60
  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */                     // 61
  var extra = null;                                                                                                    // 62
  var extra_index = 0;                                                                                                 // 63
                                                                                                                       // 64
  var here_bits, here_op, here_val;                                                                                    // 65
                                                                                                                       // 66
  /*                                                                                                                   // 67
   Process a set of code lengths to create a canonical Huffman code.  The                                              // 68
   code lengths are lens[0..codes-1].  Each length corresponds to the                                                  // 69
   symbols 0..codes-1.  The Huffman code is generated by first sorting the                                             // 70
   symbols by length from short to long, and retaining the symbol order                                                // 71
   for codes with equal lengths.  Then the code starts with all zero bits                                              // 72
   for the first code of the shortest length, and the codes are integer                                                // 73
   increments for the same length, and zeros are appended as the length                                                // 74
   increases.  For the deflate format, these bits are stored backwards                                                 // 75
   from their more natural integer increment ordering, and so when the                                                 // 76
   decoding tables are built in the large loop below, the integer codes                                                // 77
   are incremented backwards.                                                                                          // 78
                                                                                                                       // 79
   This routine assumes, but does not check, that all of the entries in                                                // 80
   lens[] are in the range 0..MAXBITS.  The caller must assure this.                                                   // 81
   1..MAXBITS is interpreted as that code length.  zero means that that                                                // 82
   symbol does not occur in this code.                                                                                 // 83
                                                                                                                       // 84
   The codes are sorted by computing a count of codes for each length,                                                 // 85
   creating from that a table of starting indices for each length in the                                               // 86
   sorted table, and then entering the symbols in order in the sorted                                                  // 87
   table.  The sorted table is work[], with that space being provided by                                               // 88
   the caller.                                                                                                         // 89
                                                                                                                       // 90
   The length counts are used for other purposes as well, i.e. finding                                                 // 91
   the minimum and maximum length codes, determining if there are any                                                  // 92
   codes at all, checking for a valid set of lengths, and looking ahead                                                // 93
   at length counts to determine sub-table sizes when building the                                                     // 94
   decoding tables.                                                                                                    // 95
   */                                                                                                                  // 96
                                                                                                                       // 97
  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */                                                // 98
  for (len = 0; len <= MAXBITS; len++) {                                                                               // 99
    count[len] = 0;                                                                                                    // 100
  }                                                                                                                    // 101
  for (sym = 0; sym < codes; sym++) {                                                                                  // 102
    count[lens[lens_index + sym]]++;                                                                                   // 103
  }                                                                                                                    // 104
                                                                                                                       // 105
  /* bound code lengths, force root to be within code lengths */                                                       // 106
  root = bits;                                                                                                         // 107
  for (max = MAXBITS; max >= 1; max--) {                                                                               // 108
    if (count[max] !== 0) { break; }                                                                                   // 109
  }                                                                                                                    // 110
  if (root > max) {                                                                                                    // 111
    root = max;                                                                                                        // 112
  }                                                                                                                    // 113
  if (max === 0) {                     /* no symbols to code at all */                                                 // 114
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */                         // 115
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;                                                   // 116
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;                                                  // 117
    table[table_index++] = (1 << 24) | (64 << 16) | 0;                                                                 // 118
                                                                                                                       // 119
                                                                                                                       // 120
    //table.op[opts.table_index] = 64;                                                                                 // 121
    //table.bits[opts.table_index] = 1;                                                                                // 122
    //table.val[opts.table_index++] = 0;                                                                               // 123
    table[table_index++] = (1 << 24) | (64 << 16) | 0;                                                                 // 124
                                                                                                                       // 125
    opts.bits = 1;                                                                                                     // 126
    return 0;     /* no symbols, but wait for decoding to report error */                                              // 127
  }                                                                                                                    // 128
  for (min = 1; min < max; min++) {                                                                                    // 129
    if (count[min] !== 0) { break; }                                                                                   // 130
  }                                                                                                                    // 131
  if (root < min) {                                                                                                    // 132
    root = min;                                                                                                        // 133
  }                                                                                                                    // 134
                                                                                                                       // 135
  /* check for an over-subscribed or incomplete set of lengths */                                                      // 136
  left = 1;                                                                                                            // 137
  for (len = 1; len <= MAXBITS; len++) {                                                                               // 138
    left <<= 1;                                                                                                        // 139
    left -= count[len];                                                                                                // 140
    if (left < 0) {                                                                                                    // 141
      return -1;                                                                                                       // 142
    }        /* over-subscribed */                                                                                     // 143
  }                                                                                                                    // 144
  if (left > 0 && (type === CODES || max !== 1)) {                                                                     // 145
    return -1;                      /* incomplete set */                                                               // 146
  }                                                                                                                    // 147
                                                                                                                       // 148
  /* generate offsets into symbol table for each length for sorting */                                                 // 149
  offs[1] = 0;                                                                                                         // 150
  for (len = 1; len < MAXBITS; len++) {                                                                                // 151
    offs[len + 1] = offs[len] + count[len];                                                                            // 152
  }                                                                                                                    // 153
                                                                                                                       // 154
  /* sort symbols by length, by symbol order within each length */                                                     // 155
  for (sym = 0; sym < codes; sym++) {                                                                                  // 156
    if (lens[lens_index + sym] !== 0) {                                                                                // 157
      work[offs[lens[lens_index + sym]]++] = sym;                                                                      // 158
    }                                                                                                                  // 159
  }                                                                                                                    // 160
                                                                                                                       // 161
  /*                                                                                                                   // 162
   Create and fill in decoding tables.  In this loop, the table being                                                  // 163
   filled is at next and has curr index bits.  The code being used is huff                                             // 164
   with length len.  That code is converted to an index by dropping drop                                               // 165
   bits off of the bottom.  For codes where len is less than drop + curr,                                              // 166
   those top drop + curr - len bits are incremented through all values to                                              // 167
   fill the table with replicated entries.                                                                             // 168
                                                                                                                       // 169
   root is the number of index bits for the root table.  When len exceeds                                              // 170
   root, sub-tables are created pointed to by the root entry with an index                                             // 171
   of the low root bits of huff.  This is saved in low to check for when a                                             // 172
   new sub-table should be started.  drop is zero when the root table is                                               // 173
   being filled, and drop is root when sub-tables are being filled.                                                    // 174
                                                                                                                       // 175
   When a new sub-table is needed, it is necessary to look ahead in the                                                // 176
   code lengths to determine what size sub-table is needed.  The length                                                // 177
   counts are used for this, and so count[] is decremented as codes are                                                // 178
   entered in the tables.                                                                                              // 179
                                                                                                                       // 180
   used keeps track of how many table entries have been allocated from the                                             // 181
   provided *table space.  It is checked for LENS and DIST tables against                                              // 182
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in                                              // 183
   the initial root table size constants.  See the comments in inftrees.h                                              // 184
   for more information.                                                                                               // 185
                                                                                                                       // 186
   sym increments through all symbols, and the loop terminates when                                                    // 187
   all codes of length max, i.e. all codes, have been processed.  This                                                 // 188
   routine permits incomplete codes, so another loop after this one fills                                              // 189
   in the rest of the decoding tables with invalid code markers.                                                       // 190
   */                                                                                                                  // 191
                                                                                                                       // 192
  /* set up for code type */                                                                                           // 193
  // poor man optimization - use if-else instead of switch,                                                            // 194
  // to avoid deopts in old v8                                                                                         // 195
  if (type === CODES) {                                                                                                // 196
    base = extra = work;    /* dummy value--not used */                                                                // 197
    end = 19;                                                                                                          // 198
                                                                                                                       // 199
  } else if (type === LENS) {                                                                                          // 200
    base = lbase;                                                                                                      // 201
    base_index -= 257;                                                                                                 // 202
    extra = lext;                                                                                                      // 203
    extra_index -= 257;                                                                                                // 204
    end = 256;                                                                                                         // 205
                                                                                                                       // 206
  } else {                    /* DISTS */                                                                              // 207
    base = dbase;                                                                                                      // 208
    extra = dext;                                                                                                      // 209
    end = -1;                                                                                                          // 210
  }                                                                                                                    // 211
                                                                                                                       // 212
  /* initialize opts for loop */                                                                                       // 213
  huff = 0;                   /* starting code */                                                                      // 214
  sym = 0;                    /* starting code symbol */                                                               // 215
  len = min;                  /* starting code length */                                                               // 216
  next = table_index;              /* current table to fill in */                                                      // 217
  curr = root;                /* current table index bits */                                                           // 218
  drop = 0;                   /* current bits to drop from code for index */                                           // 219
  low = -1;                   /* trigger new sub-table when len > root */                                              // 220
  used = 1 << root;          /* use root table entries */                                                              // 221
  mask = used - 1;            /* mask for comparing low */                                                             // 222
                                                                                                                       // 223
  /* check available table space */                                                                                    // 224
  if ((type === LENS && used > ENOUGH_LENS) ||                                                                         // 225
    (type === DISTS && used > ENOUGH_DISTS)) {                                                                         // 226
    return 1;                                                                                                          // 227
  }                                                                                                                    // 228
                                                                                                                       // 229
  var i=0;                                                                                                             // 230
  /* process all codes and make table entries */                                                                       // 231
  for (;;) {                                                                                                           // 232
    i++;                                                                                                               // 233
    /* create table entry */                                                                                           // 234
    here_bits = len - drop;                                                                                            // 235
    if (work[sym] < end) {                                                                                             // 236
      here_op = 0;                                                                                                     // 237
      here_val = work[sym];                                                                                            // 238
    }                                                                                                                  // 239
    else if (work[sym] > end) {                                                                                        // 240
      here_op = extra[extra_index + work[sym]];                                                                        // 241
      here_val = base[base_index + work[sym]];                                                                         // 242
    }                                                                                                                  // 243
    else {                                                                                                             // 244
      here_op = 32 + 64;         /* end of block */                                                                    // 245
      here_val = 0;                                                                                                    // 246
    }                                                                                                                  // 247
                                                                                                                       // 248
    /* replicate for those indices with low len bits equal to huff */                                                  // 249
    incr = 1 << (len - drop);                                                                                          // 250
    fill = 1 << curr;                                                                                                  // 251
    min = fill;                 /* save offset to next table */                                                        // 252
    do {                                                                                                               // 253
      fill -= incr;                                                                                                    // 254
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;                         // 255
    } while (fill !== 0);                                                                                              // 256
                                                                                                                       // 257
    /* backwards increment the len-bit code huff */                                                                    // 258
    incr = 1 << (len - 1);                                                                                             // 259
    while (huff & incr) {                                                                                              // 260
      incr >>= 1;                                                                                                      // 261
    }                                                                                                                  // 262
    if (incr !== 0) {                                                                                                  // 263
      huff &= incr - 1;                                                                                                // 264
      huff += incr;                                                                                                    // 265
    } else {                                                                                                           // 266
      huff = 0;                                                                                                        // 267
    }                                                                                                                  // 268
                                                                                                                       // 269
    /* go to next symbol, update count, len */                                                                         // 270
    sym++;                                                                                                             // 271
    if (--count[len] === 0) {                                                                                          // 272
      if (len === max) { break; }                                                                                      // 273
      len = lens[lens_index + work[sym]];                                                                              // 274
    }                                                                                                                  // 275
                                                                                                                       // 276
    /* create new sub-table if needed */                                                                               // 277
    if (len > root && (huff & mask) !== low) {                                                                         // 278
      /* if first time, transition to sub-tables */                                                                    // 279
      if (drop === 0) {                                                                                                // 280
        drop = root;                                                                                                   // 281
      }                                                                                                                // 282
                                                                                                                       // 283
      /* increment past last table */                                                                                  // 284
      next += min;            /* here min is 1 << curr */                                                              // 285
                                                                                                                       // 286
      /* determine length of next table */                                                                             // 287
      curr = len - drop;                                                                                               // 288
      left = 1 << curr;                                                                                                // 289
      while (curr + drop < max) {                                                                                      // 290
        left -= count[curr + drop];                                                                                    // 291
        if (left <= 0) { break; }                                                                                      // 292
        curr++;                                                                                                        // 293
        left <<= 1;                                                                                                    // 294
      }                                                                                                                // 295
                                                                                                                       // 296
      /* check for enough space */                                                                                     // 297
      used += 1 << curr;                                                                                               // 298
      if ((type === LENS && used > ENOUGH_LENS) ||                                                                     // 299
        (type === DISTS && used > ENOUGH_DISTS)) {                                                                     // 300
        return 1;                                                                                                      // 301
      }                                                                                                                // 302
                                                                                                                       // 303
      /* point entry in root table to sub-table */                                                                     // 304
      low = huff & mask;                                                                                               // 305
      /*table.op[low] = curr;                                                                                          // 306
      table.bits[low] = root;                                                                                          // 307
      table.val[low] = next - opts.table_index;*/                                                                      // 308
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;                                              // 309
    }                                                                                                                  // 310
  }                                                                                                                    // 311
                                                                                                                       // 312
  /* fill in remaining table entry if code is incomplete (guaranteed to have                                           // 313
   at most one remaining entry, since if the code is incomplete, the                                                   // 314
   maximum code length that was allowed to get this far is one bit) */                                                 // 315
  if (huff !== 0) {                                                                                                    // 316
    //table.op[next + huff] = 64;            /* invalid code marker */                                                 // 317
    //table.bits[next + huff] = len - drop;                                                                            // 318
    //table.val[next + huff] = 0;                                                                                      // 319
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;                                                         // 320
  }                                                                                                                    // 321
                                                                                                                       // 322
  /* set return parameters */                                                                                          // 323
  //opts.table_index += used;                                                                                          // 324
  opts.bits = root;                                                                                                    // 325
  return 0;                                                                                                            // 326
};                                                                                                                     // 327
                                                                                                                       // 328
},{"../utils/common":4}],12:[function(require,module,exports){                                                         //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
module.exports = {                                                                                                     // 3
  '2':    'need dictionary',     /* Z_NEED_DICT       2  */                                                            // 4
  '1':    'stream end',          /* Z_STREAM_END      1  */                                                            // 5
  '0':    '',                    /* Z_OK              0  */                                                            // 6
  '-1':   'file error',          /* Z_ERRNO         (-1) */                                                            // 7
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */                                                            // 8
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */                                                            // 9
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */                                                            // 10
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */                                                            // 11
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */                                                            // 12
};                                                                                                                     // 13
                                                                                                                       // 14
},{}],13:[function(require,module,exports){                                                                            //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
                                                                                                                       // 3
var utils = require('../utils/common');                                                                                // 4
                                                                                                                       // 5
/* Public constants ==========================================================*/                                       // 6
/* ===========================================================================*/                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
//var Z_FILTERED          = 1;                                                                                         // 10
//var Z_HUFFMAN_ONLY      = 2;                                                                                         // 11
//var Z_RLE               = 3;                                                                                         // 12
var Z_FIXED               = 4;                                                                                         // 13
//var Z_DEFAULT_STRATEGY  = 0;                                                                                         // 14
                                                                                                                       // 15
/* Possible values of the data_type field (though see inflate()) */                                                    // 16
var Z_BINARY              = 0;                                                                                         // 17
var Z_TEXT                = 1;                                                                                         // 18
//var Z_ASCII             = 1; // = Z_TEXT                                                                             // 19
var Z_UNKNOWN             = 2;                                                                                         // 20
                                                                                                                       // 21
/*============================================================================*/                                       // 22
                                                                                                                       // 23
                                                                                                                       // 24
function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }                                      // 25
                                                                                                                       // 26
// From zutil.h                                                                                                        // 27
                                                                                                                       // 28
var STORED_BLOCK = 0;                                                                                                  // 29
var STATIC_TREES = 1;                                                                                                  // 30
var DYN_TREES    = 2;                                                                                                  // 31
/* The three kinds of block type */                                                                                    // 32
                                                                                                                       // 33
var MIN_MATCH    = 3;                                                                                                  // 34
var MAX_MATCH    = 258;                                                                                                // 35
/* The minimum and maximum match lengths */                                                                            // 36
                                                                                                                       // 37
// From deflate.h                                                                                                      // 38
/* ===========================================================================                                         // 39
 * Internal compression state.                                                                                         // 40
 */                                                                                                                    // 41
                                                                                                                       // 42
var LENGTH_CODES  = 29;                                                                                                // 43
/* number of length codes, not counting the special END_BLOCK code */                                                  // 44
                                                                                                                       // 45
var LITERALS      = 256;                                                                                               // 46
/* number of literal bytes 0..255 */                                                                                   // 47
                                                                                                                       // 48
var L_CODES       = LITERALS + 1 + LENGTH_CODES;                                                                       // 49
/* number of Literal or Length codes, including the END_BLOCK code */                                                  // 50
                                                                                                                       // 51
var D_CODES       = 30;                                                                                                // 52
/* number of distance codes */                                                                                         // 53
                                                                                                                       // 54
var BL_CODES      = 19;                                                                                                // 55
/* number of codes used to transfer the bit lengths */                                                                 // 56
                                                                                                                       // 57
var HEAP_SIZE     = 2*L_CODES + 1;                                                                                     // 58
/* maximum heap size */                                                                                                // 59
                                                                                                                       // 60
var MAX_BITS      = 15;                                                                                                // 61
/* All codes must not exceed MAX_BITS bits */                                                                          // 62
                                                                                                                       // 63
var Buf_size      = 16;                                                                                                // 64
/* size of bit buffer in bi_buf */                                                                                     // 65
                                                                                                                       // 66
                                                                                                                       // 67
/* ===========================================================================                                         // 68
 * Constants                                                                                                           // 69
 */                                                                                                                    // 70
                                                                                                                       // 71
var MAX_BL_BITS = 7;                                                                                                   // 72
/* Bit length codes must not exceed MAX_BL_BITS bits */                                                                // 73
                                                                                                                       // 74
var END_BLOCK   = 256;                                                                                                 // 75
/* end of block literal code */                                                                                        // 76
                                                                                                                       // 77
var REP_3_6     = 16;                                                                                                  // 78
/* repeat previous bit length 3-6 times (2 bits of repeat count) */                                                    // 79
                                                                                                                       // 80
var REPZ_3_10   = 17;                                                                                                  // 81
/* repeat a zero length 3-10 times  (3 bits of repeat count) */                                                        // 82
                                                                                                                       // 83
var REPZ_11_138 = 18;                                                                                                  // 84
/* repeat a zero length 11-138 times  (7 bits of repeat count) */                                                      // 85
                                                                                                                       // 86
var extra_lbits =   /* extra bits for each length code */                                                              // 87
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];                                                         // 88
                                                                                                                       // 89
var extra_dbits =   /* extra bits for each distance code */                                                            // 90
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];                                               // 91
                                                                                                                       // 92
var extra_blbits =  /* extra bits for each bit length code */                                                          // 93
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];                                                                             // 94
                                                                                                                       // 95
var bl_order =                                                                                                         // 96
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];                                                                    // 97
/* The lengths of the bit length codes are sent in order of decreasing                                                 // 98
 * probability, to avoid transmitting the lengths for unused bit length codes.                                         // 99
 */                                                                                                                    // 100
                                                                                                                       // 101
/* ===========================================================================                                         // 102
 * Local data. These are initialized only once.                                                                        // 103
 */                                                                                                                    // 104
                                                                                                                       // 105
// We pre-fill arrays with 0 to avoid uninitialized gaps                                                               // 106
                                                                                                                       // 107
var DIST_CODE_LEN = 512; /* see definition of array dist_code below */                                                 // 108
                                                                                                                       // 109
// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1                                                   // 110
var static_ltree  = new Array((L_CODES+2) * 2);                                                                        // 111
zero(static_ltree);                                                                                                    // 112
/* The static literal tree. Since the bit lengths are imposed, there is no                                             // 113
 * need for the L_CODES extra codes used during heap construction. However                                             // 114
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init                                            // 115
 * below).                                                                                                             // 116
 */                                                                                                                    // 117
                                                                                                                       // 118
var static_dtree  = new Array(D_CODES * 2);                                                                            // 119
zero(static_dtree);                                                                                                    // 120
/* The static distance tree. (Actually a trivial tree since all codes use                                              // 121
 * 5 bits.)                                                                                                            // 122
 */                                                                                                                    // 123
                                                                                                                       // 124
var _dist_code    = new Array(DIST_CODE_LEN);                                                                          // 125
zero(_dist_code);                                                                                                      // 126
/* Distance codes. The first 256 values correspond to the distances                                                    // 127
 * 3 .. 258, the last 256 values correspond to the top 8 bits of                                                       // 128
 * the 15 bit distances.                                                                                               // 129
 */                                                                                                                    // 130
                                                                                                                       // 131
var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);                                                                  // 132
zero(_length_code);                                                                                                    // 133
/* length code for each normalized match length (0 == MIN_MATCH) */                                                    // 134
                                                                                                                       // 135
var base_length   = new Array(LENGTH_CODES);                                                                           // 136
zero(base_length);                                                                                                     // 137
/* First normalized length for each code (0 = MIN_MATCH) */                                                            // 138
                                                                                                                       // 139
var base_dist     = new Array(D_CODES);                                                                                // 140
zero(base_dist);                                                                                                       // 141
/* First normalized distance for each code (0 = distance of 1) */                                                      // 142
                                                                                                                       // 143
                                                                                                                       // 144
var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {                               // 145
                                                                                                                       // 146
  this.static_tree  = static_tree;  /* static tree or NULL */                                                          // 147
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */                                             // 148
  this.extra_base   = extra_base;   /* base index for extra_bits */                                                    // 149
  this.elems        = elems;        /* max number of elements in the tree */                                           // 150
  this.max_length   = max_length;   /* max bit length for the codes */                                                 // 151
                                                                                                                       // 152
  // show if `static_tree` has data or dummy - needed for monomorphic objects                                          // 153
  this.has_stree    = static_tree && static_tree.length;                                                               // 154
};                                                                                                                     // 155
                                                                                                                       // 156
                                                                                                                       // 157
var static_l_desc;                                                                                                     // 158
var static_d_desc;                                                                                                     // 159
var static_bl_desc;                                                                                                    // 160
                                                                                                                       // 161
                                                                                                                       // 162
var TreeDesc = function(dyn_tree, stat_desc) {                                                                         // 163
  this.dyn_tree = dyn_tree;     /* the dynamic tree */                                                                 // 164
  this.max_code = 0;            /* largest code with non zero frequency */                                             // 165
  this.stat_desc = stat_desc;   /* the corresponding static tree */                                                    // 166
};                                                                                                                     // 167
                                                                                                                       // 168
                                                                                                                       // 169
                                                                                                                       // 170
function d_code(dist) {                                                                                                // 171
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];                                               // 172
}                                                                                                                      // 173
                                                                                                                       // 174
                                                                                                                       // 175
/* ===========================================================================                                         // 176
 * Output a short LSB first on the stream.                                                                             // 177
 * IN assertion: there is enough room in pendingBuf.                                                                   // 178
 */                                                                                                                    // 179
function put_short (s, w) {                                                                                            // 180
//    put_byte(s, (uch)((w) & 0xff));                                                                                  // 181
//    put_byte(s, (uch)((ush)(w) >> 8));                                                                               // 182
  s.pending_buf[s.pending++] = (w) & 0xff;                                                                             // 183
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;                                                                       // 184
}                                                                                                                      // 185
                                                                                                                       // 186
                                                                                                                       // 187
/* ===========================================================================                                         // 188
 * Send a value on a given number of bits.                                                                             // 189
 * IN assertion: length <= 16 and value fits in length bits.                                                           // 190
 */                                                                                                                    // 191
function send_bits(s, value, length) {                                                                                 // 192
  if (s.bi_valid > (Buf_size - length)) {                                                                              // 193
    s.bi_buf |= (value << s.bi_valid) & 0xffff;                                                                        // 194
    put_short(s, s.bi_buf);                                                                                            // 195
    s.bi_buf = value >> (Buf_size - s.bi_valid);                                                                       // 196
    s.bi_valid += length - Buf_size;                                                                                   // 197
  } else {                                                                                                             // 198
    s.bi_buf |= (value << s.bi_valid) & 0xffff;                                                                        // 199
    s.bi_valid += length;                                                                                              // 200
  }                                                                                                                    // 201
}                                                                                                                      // 202
                                                                                                                       // 203
                                                                                                                       // 204
function send_code(s, c, tree) {                                                                                       // 205
  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);                                                             // 206
}                                                                                                                      // 207
                                                                                                                       // 208
                                                                                                                       // 209
/* ===========================================================================                                         // 210
 * Reverse the first len bits of a code, using straightforward code (a faster                                          // 211
 * method would use a table)                                                                                           // 212
 * IN assertion: 1 <= len <= 15                                                                                        // 213
 */                                                                                                                    // 214
function bi_reverse(code, len) {                                                                                       // 215
  var res = 0;                                                                                                         // 216
  do {                                                                                                                 // 217
    res |= code & 1;                                                                                                   // 218
    code >>>= 1;                                                                                                       // 219
    res <<= 1;                                                                                                         // 220
  } while (--len > 0);                                                                                                 // 221
  return res >>> 1;                                                                                                    // 222
}                                                                                                                      // 223
                                                                                                                       // 224
                                                                                                                       // 225
/* ===========================================================================                                         // 226
 * Flush the bit buffer, keeping at most 7 bits in it.                                                                 // 227
 */                                                                                                                    // 228
function bi_flush(s) {                                                                                                 // 229
  if (s.bi_valid === 16) {                                                                                             // 230
    put_short(s, s.bi_buf);                                                                                            // 231
    s.bi_buf = 0;                                                                                                      // 232
    s.bi_valid = 0;                                                                                                    // 233
                                                                                                                       // 234
  } else if (s.bi_valid >= 8) {                                                                                        // 235
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;                                                                      // 236
    s.bi_buf >>= 8;                                                                                                    // 237
    s.bi_valid -= 8;                                                                                                   // 238
  }                                                                                                                    // 239
}                                                                                                                      // 240
                                                                                                                       // 241
                                                                                                                       // 242
/* ===========================================================================                                         // 243
 * Compute the optimal bit lengths for a tree and update the total bit length                                          // 244
 * for the current block.                                                                                              // 245
 * IN assertion: the fields freq and dad are set, heap[heap_max] and                                                   // 246
 *    above are the tree nodes sorted by increasing frequency.                                                         // 247
 * OUT assertions: the field len is set to the optimal bit length, the                                                 // 248
 *     array bl_count contains the frequencies for each bit length.                                                    // 249
 *     The length opt_len is updated; static_len is also updated if stree is                                           // 250
 *     not null.                                                                                                       // 251
 */                                                                                                                    // 252
function gen_bitlen(s, desc)                                                                                           // 253
//    deflate_state *s;                                                                                                // 254
//    tree_desc *desc;    /* the tree descriptor */                                                                    // 255
{                                                                                                                      // 256
  var tree            = desc.dyn_tree;                                                                                 // 257
  var max_code        = desc.max_code;                                                                                 // 258
  var stree           = desc.stat_desc.static_tree;                                                                    // 259
  var has_stree       = desc.stat_desc.has_stree;                                                                      // 260
  var extra           = desc.stat_desc.extra_bits;                                                                     // 261
  var base            = desc.stat_desc.extra_base;                                                                     // 262
  var max_length      = desc.stat_desc.max_length;                                                                     // 263
  var h;              /* heap index */                                                                                 // 264
  var n, m;           /* iterate over the tree elements */                                                             // 265
  var bits;           /* bit length */                                                                                 // 266
  var xbits;          /* extra bits */                                                                                 // 267
  var f;              /* frequency */                                                                                  // 268
  var overflow = 0;   /* number of elements with bit length too large */                                               // 269
                                                                                                                       // 270
  for (bits = 0; bits <= MAX_BITS; bits++) {                                                                           // 271
    s.bl_count[bits] = 0;                                                                                              // 272
  }                                                                                                                    // 273
                                                                                                                       // 274
  /* In a first pass, compute the optimal bit lengths (which may                                                       // 275
   * overflow in the case of the bit length tree).                                                                     // 276
   */                                                                                                                  // 277
  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */                                                   // 278
                                                                                                                       // 279
  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {                                                                         // 280
    n = s.heap[h];                                                                                                     // 281
    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;                                                             // 282
    if (bits > max_length) {                                                                                           // 283
      bits = max_length;                                                                                               // 284
      overflow++;                                                                                                      // 285
    }                                                                                                                  // 286
    tree[n*2 + 1]/*.Len*/ = bits;                                                                                      // 287
    /* We overwrite tree[n].Dad which is no longer needed */                                                           // 288
                                                                                                                       // 289
    if (n > max_code) { continue; } /* not a leaf node */                                                              // 290
                                                                                                                       // 291
    s.bl_count[bits]++;                                                                                                // 292
    xbits = 0;                                                                                                         // 293
    if (n >= base) {                                                                                                   // 294
      xbits = extra[n-base];                                                                                           // 295
    }                                                                                                                  // 296
    f = tree[n * 2]/*.Freq*/;                                                                                          // 297
    s.opt_len += f * (bits + xbits);                                                                                   // 298
    if (has_stree) {                                                                                                   // 299
      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);                                                            // 300
    }                                                                                                                  // 301
  }                                                                                                                    // 302
  if (overflow === 0) { return; }                                                                                      // 303
                                                                                                                       // 304
  // Trace((stderr,"\nbit length overflow\n"));                                                                        // 305
  /* This happens for example on obj2 and pic of the Calgary corpus */                                                 // 306
                                                                                                                       // 307
  /* Find the first bit length which could increase: */                                                                // 308
  do {                                                                                                                 // 309
    bits = max_length-1;                                                                                               // 310
    while (s.bl_count[bits] === 0) { bits--; }                                                                         // 311
    s.bl_count[bits]--;      /* move one leaf down the tree */                                                         // 312
    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */                                               // 313
    s.bl_count[max_length]--;                                                                                          // 314
    /* The brother of the overflow item also moves one step up,                                                        // 315
     * but this does not affect bl_count[max_length]                                                                   // 316
     */                                                                                                                // 317
    overflow -= 2;                                                                                                     // 318
  } while (overflow > 0);                                                                                              // 319
                                                                                                                       // 320
  /* Now recompute all bit lengths, scanning in increasing frequency.                                                  // 321
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all                                                  // 322
   * lengths instead of fixing only the wrong ones. This idea is taken                                                 // 323
   * from 'ar' written by Haruhiko Okumura.)                                                                           // 324
   */                                                                                                                  // 325
  for (bits = max_length; bits !== 0; bits--) {                                                                        // 326
    n = s.bl_count[bits];                                                                                              // 327
    while (n !== 0) {                                                                                                  // 328
      m = s.heap[--h];                                                                                                 // 329
      if (m > max_code) { continue; }                                                                                  // 330
      if (tree[m*2 + 1]/*.Len*/ !== bits) {                                                                            // 331
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));                                              // 332
        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;                                                // 333
        tree[m*2 + 1]/*.Len*/ = bits;                                                                                  // 334
      }                                                                                                                // 335
      n--;                                                                                                             // 336
    }                                                                                                                  // 337
  }                                                                                                                    // 338
}                                                                                                                      // 339
                                                                                                                       // 340
                                                                                                                       // 341
/* ===========================================================================                                         // 342
 * Generate the codes for a given tree and bit counts (which need not be                                               // 343
 * optimal).                                                                                                           // 344
 * IN assertion: the array bl_count contains the bit length statistics for                                             // 345
 * the given tree and the field len is set for all tree elements.                                                      // 346
 * OUT assertion: the field code is set for all tree elements of non                                                   // 347
 *     zero code length.                                                                                               // 348
 */                                                                                                                    // 349
function gen_codes(tree, max_code, bl_count)                                                                           // 350
//    ct_data *tree;             /* the tree to decorate */                                                            // 351
//    int max_code;              /* largest code with non zero frequency */                                            // 352
//    ushf *bl_count;            /* number of codes at each bit length */                                              // 353
{                                                                                                                      // 354
  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */                                     // 355
  var code = 0;              /* running code value */                                                                  // 356
  var bits;                  /* bit index */                                                                           // 357
  var n;                     /* code index */                                                                          // 358
                                                                                                                       // 359
  /* The distribution counts are first used to generate the code values                                                // 360
   * without bit reversal.                                                                                             // 361
   */                                                                                                                  // 362
  for (bits = 1; bits <= MAX_BITS; bits++) {                                                                           // 363
    next_code[bits] = code = (code + bl_count[bits-1]) << 1;                                                           // 364
  }                                                                                                                    // 365
  /* Check that the bit counts in bl_count are consistent. The last code                                               // 366
   * must be all ones.                                                                                                 // 367
   */                                                                                                                  // 368
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,                                                            // 369
  //        "inconsistent bit counts");                                                                                // 370
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));                                                            // 371
                                                                                                                       // 372
  for (n = 0;  n <= max_code; n++) {                                                                                   // 373
    var len = tree[n*2 + 1]/*.Len*/;                                                                                   // 374
    if (len === 0) { continue; }                                                                                       // 375
    /* Now reverse the bits */                                                                                         // 376
    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);                                                            // 377
                                                                                                                       // 378
    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",                                            // 379
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));                                           // 380
  }                                                                                                                    // 381
}                                                                                                                      // 382
                                                                                                                       // 383
                                                                                                                       // 384
/* ===========================================================================                                         // 385
 * Initialize the various 'constant' tables.                                                                           // 386
 */                                                                                                                    // 387
function tr_static_init() {                                                                                            // 388
  var n;        /* iterates over tree elements */                                                                      // 389
  var bits;     /* bit counter */                                                                                      // 390
  var length;   /* length value */                                                                                     // 391
  var code;     /* code value */                                                                                       // 392
  var dist;     /* distance index */                                                                                   // 393
  var bl_count = new Array(MAX_BITS+1);                                                                                // 394
  /* number of codes at each bit length for an optimal tree */                                                         // 395
                                                                                                                       // 396
  // do check in _tr_init()                                                                                            // 397
  //if (static_init_done) return;                                                                                      // 398
                                                                                                                       // 399
  /* For some embedded targets, global variables are not initialized: */                                               // 400
/*#ifdef NO_INIT_GLOBAL_POINTERS                                                                                       // 401
  static_l_desc.static_tree = static_ltree;                                                                            // 402
  static_l_desc.extra_bits = extra_lbits;                                                                              // 403
  static_d_desc.static_tree = static_dtree;                                                                            // 404
  static_d_desc.extra_bits = extra_dbits;                                                                              // 405
  static_bl_desc.extra_bits = extra_blbits;                                                                            // 406
#endif*/                                                                                                               // 407
                                                                                                                       // 408
  /* Initialize the mapping length (0..255) -> length code (0..28) */                                                  // 409
  length = 0;                                                                                                          // 410
  for (code = 0; code < LENGTH_CODES-1; code++) {                                                                      // 411
    base_length[code] = length;                                                                                        // 412
    for (n = 0; n < (1<<extra_lbits[code]); n++) {                                                                     // 413
      _length_code[length++] = code;                                                                                   // 414
    }                                                                                                                  // 415
  }                                                                                                                    // 416
  //Assert (length == 256, "tr_static_init: length != 256");                                                           // 417
  /* Note that the length 255 (match length 258) can be represented                                                    // 418
   * in two different ways: code 284 + 5 bits or code 285, so we                                                       // 419
   * overwrite length_code[255] to use the best encoding:                                                              // 420
   */                                                                                                                  // 421
  _length_code[length-1] = code;                                                                                       // 422
                                                                                                                       // 423
  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */                                                      // 424
  dist = 0;                                                                                                            // 425
  for (code = 0 ; code < 16; code++) {                                                                                 // 426
    base_dist[code] = dist;                                                                                            // 427
    for (n = 0; n < (1<<extra_dbits[code]); n++) {                                                                     // 428
      _dist_code[dist++] = code;                                                                                       // 429
    }                                                                                                                  // 430
  }                                                                                                                    // 431
  //Assert (dist == 256, "tr_static_init: dist != 256");                                                               // 432
  dist >>= 7; /* from now on, all distances are divided by 128 */                                                      // 433
  for (; code < D_CODES; code++) {                                                                                     // 434
    base_dist[code] = dist << 7;                                                                                       // 435
    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {                                                                 // 436
      _dist_code[256 + dist++] = code;                                                                                 // 437
    }                                                                                                                  // 438
  }                                                                                                                    // 439
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");                                                           // 440
                                                                                                                       // 441
  /* Construct the codes of the static literal tree */                                                                 // 442
  for (bits = 0; bits <= MAX_BITS; bits++) {                                                                           // 443
    bl_count[bits] = 0;                                                                                                // 444
  }                                                                                                                    // 445
                                                                                                                       // 446
  n = 0;                                                                                                               // 447
  while (n <= 143) {                                                                                                   // 448
    static_ltree[n*2 + 1]/*.Len*/ = 8;                                                                                 // 449
    n++;                                                                                                               // 450
    bl_count[8]++;                                                                                                     // 451
  }                                                                                                                    // 452
  while (n <= 255) {                                                                                                   // 453
    static_ltree[n*2 + 1]/*.Len*/ = 9;                                                                                 // 454
    n++;                                                                                                               // 455
    bl_count[9]++;                                                                                                     // 456
  }                                                                                                                    // 457
  while (n <= 279) {                                                                                                   // 458
    static_ltree[n*2 + 1]/*.Len*/ = 7;                                                                                 // 459
    n++;                                                                                                               // 460
    bl_count[7]++;                                                                                                     // 461
  }                                                                                                                    // 462
  while (n <= 287) {                                                                                                   // 463
    static_ltree[n*2 + 1]/*.Len*/ = 8;                                                                                 // 464
    n++;                                                                                                               // 465
    bl_count[8]++;                                                                                                     // 466
  }                                                                                                                    // 467
  /* Codes 286 and 287 do not exist, but we must include them in the                                                   // 468
   * tree construction to get a canonical Huffman tree (longest code                                                   // 469
   * all ones)                                                                                                         // 470
   */                                                                                                                  // 471
  gen_codes(static_ltree, L_CODES+1, bl_count);                                                                        // 472
                                                                                                                       // 473
  /* The static distance tree is trivial: */                                                                           // 474
  for (n = 0; n < D_CODES; n++) {                                                                                      // 475
    static_dtree[n*2 + 1]/*.Len*/ = 5;                                                                                 // 476
    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);                                                                     // 477
  }                                                                                                                    // 478
                                                                                                                       // 479
  // Now data ready and we can init static trees                                                                       // 480
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);                        // 481
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);                        // 482
  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);                    // 483
                                                                                                                       // 484
  //static_init_done = true;                                                                                           // 485
}                                                                                                                      // 486
                                                                                                                       // 487
                                                                                                                       // 488
/* ===========================================================================                                         // 489
 * Initialize a new block.                                                                                             // 490
 */                                                                                                                    // 491
function init_block(s) {                                                                                               // 492
  var n; /* iterates over tree elements */                                                                             // 493
                                                                                                                       // 494
  /* Initialize the trees. */                                                                                          // 495
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }                                                    // 496
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }                                                    // 497
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }                                                      // 498
                                                                                                                       // 499
  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;                                                                               // 500
  s.opt_len = s.static_len = 0;                                                                                        // 501
  s.last_lit = s.matches = 0;                                                                                          // 502
}                                                                                                                      // 503
                                                                                                                       // 504
                                                                                                                       // 505
/* ===========================================================================                                         // 506
 * Flush the bit buffer and align the output on a byte boundary                                                        // 507
 */                                                                                                                    // 508
function bi_windup(s)                                                                                                  // 509
{                                                                                                                      // 510
  if (s.bi_valid > 8) {                                                                                                // 511
    put_short(s, s.bi_buf);                                                                                            // 512
  } else if (s.bi_valid > 0) {                                                                                         // 513
    //put_byte(s, (Byte)s->bi_buf);                                                                                    // 514
    s.pending_buf[s.pending++] = s.bi_buf;                                                                             // 515
  }                                                                                                                    // 516
  s.bi_buf = 0;                                                                                                        // 517
  s.bi_valid = 0;                                                                                                      // 518
}                                                                                                                      // 519
                                                                                                                       // 520
/* ===========================================================================                                         // 521
 * Copy a stored block, storing first the length and its                                                               // 522
 * one's complement if requested.                                                                                      // 523
 */                                                                                                                    // 524
function copy_block(s, buf, len, header)                                                                               // 525
//DeflateState *s;                                                                                                     // 526
//charf    *buf;    /* the input data */                                                                               // 527
//unsigned len;     /* its length */                                                                                   // 528
//int      header;  /* true if block header must be written */                                                         // 529
{                                                                                                                      // 530
  bi_windup(s);        /* align on byte boundary */                                                                    // 531
                                                                                                                       // 532
  if (header) {                                                                                                        // 533
    put_short(s, len);                                                                                                 // 534
    put_short(s, ~len);                                                                                                // 535
  }                                                                                                                    // 536
//  while (len--) {                                                                                                    // 537
//    put_byte(s, *buf++);                                                                                             // 538
//  }                                                                                                                  // 539
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);                                                        // 540
  s.pending += len;                                                                                                    // 541
}                                                                                                                      // 542
                                                                                                                       // 543
/* ===========================================================================                                         // 544
 * Compares to subtrees, using the tree depth as tie breaker when                                                      // 545
 * the subtrees have equal frequency. This minimizes the worst case length.                                            // 546
 */                                                                                                                    // 547
function smaller(tree, n, m, depth) {                                                                                  // 548
  var _n2 = n*2;                                                                                                       // 549
  var _m2 = m*2;                                                                                                       // 550
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||                                                                   // 551
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));                                         // 552
}                                                                                                                      // 553
                                                                                                                       // 554
/* ===========================================================================                                         // 555
 * Restore the heap property by moving down the tree starting at node k,                                               // 556
 * exchanging a node with the smallest of its two sons if necessary, stopping                                          // 557
 * when the heap property is re-established (each father smaller than its                                              // 558
 * two sons).                                                                                                          // 559
 */                                                                                                                    // 560
function pqdownheap(s, tree, k)                                                                                        // 561
//    deflate_state *s;                                                                                                // 562
//    ct_data *tree;  /* the tree to restore */                                                                        // 563
//    int k;               /* node to move down */                                                                     // 564
{                                                                                                                      // 565
  var v = s.heap[k];                                                                                                   // 566
  var j = k << 1;  /* left son of k */                                                                                 // 567
  while (j <= s.heap_len) {                                                                                            // 568
    /* Set j to the smallest of the two sons: */                                                                       // 569
    if (j < s.heap_len &&                                                                                              // 570
      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {                                                                // 571
      j++;                                                                                                             // 572
    }                                                                                                                  // 573
    /* Exit if v is smaller than both sons */                                                                          // 574
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }                                                               // 575
                                                                                                                       // 576
    /* Exchange v with the smallest son */                                                                             // 577
    s.heap[k] = s.heap[j];                                                                                             // 578
    k = j;                                                                                                             // 579
                                                                                                                       // 580
    /* And continue down the tree, setting j to the left son of k */                                                   // 581
    j <<= 1;                                                                                                           // 582
  }                                                                                                                    // 583
  s.heap[k] = v;                                                                                                       // 584
}                                                                                                                      // 585
                                                                                                                       // 586
                                                                                                                       // 587
// inlined manually                                                                                                    // 588
// var SMALLEST = 1;                                                                                                   // 589
                                                                                                                       // 590
/* ===========================================================================                                         // 591
 * Send the block data compressed using the given Huffman trees                                                        // 592
 */                                                                                                                    // 593
function compress_block(s, ltree, dtree)                                                                               // 594
//    deflate_state *s;                                                                                                // 595
//    const ct_data *ltree; /* literal tree */                                                                         // 596
//    const ct_data *dtree; /* distance tree */                                                                        // 597
{                                                                                                                      // 598
  var dist;           /* distance of matched string */                                                                 // 599
  var lc;             /* match length or unmatched char (if dist == 0) */                                              // 600
  var lx = 0;         /* running index in l_buf */                                                                     // 601
  var code;           /* the code to send */                                                                           // 602
  var extra;          /* number of extra bits to send */                                                               // 603
                                                                                                                       // 604
  if (s.last_lit !== 0) {                                                                                              // 605
    do {                                                                                                               // 606
      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);                               // 607
      lc = s.pending_buf[s.l_buf + lx];                                                                                // 608
      lx++;                                                                                                            // 609
                                                                                                                       // 610
      if (dist === 0) {                                                                                                // 611
        send_code(s, lc, ltree); /* send a literal byte */                                                             // 612
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));                                                                 // 613
      } else {                                                                                                         // 614
        /* Here, lc is the match length - MIN_MATCH */                                                                 // 615
        code = _length_code[lc];                                                                                       // 616
        send_code(s, code+LITERALS+1, ltree); /* send the length code */                                               // 617
        extra = extra_lbits[code];                                                                                     // 618
        if (extra !== 0) {                                                                                             // 619
          lc -= base_length[code];                                                                                     // 620
          send_bits(s, lc, extra);       /* send the extra length bits */                                              // 621
        }                                                                                                              // 622
        dist--; /* dist is now the match distance - 1 */                                                               // 623
        code = d_code(dist);                                                                                           // 624
        //Assert (code < D_CODES, "bad d_code");                                                                       // 625
                                                                                                                       // 626
        send_code(s, code, dtree);       /* send the distance code */                                                  // 627
        extra = extra_dbits[code];                                                                                     // 628
        if (extra !== 0) {                                                                                             // 629
          dist -= base_dist[code];                                                                                     // 630
          send_bits(s, dist, extra);   /* send the extra distance bits */                                              // 631
        }                                                                                                              // 632
      } /* literal or match pair ? */                                                                                  // 633
                                                                                                                       // 634
      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */                                          // 635
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,                                                             // 636
      //       "pendingBuf overflow");                                                                                 // 637
                                                                                                                       // 638
    } while (lx < s.last_lit);                                                                                         // 639
  }                                                                                                                    // 640
                                                                                                                       // 641
  send_code(s, END_BLOCK, ltree);                                                                                      // 642
}                                                                                                                      // 643
                                                                                                                       // 644
                                                                                                                       // 645
/* ===========================================================================                                         // 646
 * Construct one Huffman tree and assigns the code bit strings and lengths.                                            // 647
 * Update the total bit length for the current block.                                                                  // 648
 * IN assertion: the field freq is set for all tree elements.                                                          // 649
 * OUT assertions: the fields len and code are set to the optimal bit length                                           // 650
 *     and corresponding code. The length opt_len is updated; static_len is                                            // 651
 *     also updated if stree is not null. The field max_code is set.                                                   // 652
 */                                                                                                                    // 653
function build_tree(s, desc)                                                                                           // 654
//    deflate_state *s;                                                                                                // 655
//    tree_desc *desc; /* the tree descriptor */                                                                       // 656
{                                                                                                                      // 657
  var tree     = desc.dyn_tree;                                                                                        // 658
  var stree    = desc.stat_desc.static_tree;                                                                           // 659
  var has_stree = desc.stat_desc.has_stree;                                                                            // 660
  var elems    = desc.stat_desc.elems;                                                                                 // 661
  var n, m;          /* iterate over heap elements */                                                                  // 662
  var max_code = -1; /* largest code with non zero frequency */                                                        // 663
  var node;          /* new node being created */                                                                      // 664
                                                                                                                       // 665
  /* Construct the initial heap, with least frequent element in                                                        // 666
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].                                                // 667
   * heap[0] is not used.                                                                                              // 668
   */                                                                                                                  // 669
  s.heap_len = 0;                                                                                                      // 670
  s.heap_max = HEAP_SIZE;                                                                                              // 671
                                                                                                                       // 672
  for (n = 0; n < elems; n++) {                                                                                        // 673
    if (tree[n * 2]/*.Freq*/ !== 0) {                                                                                  // 674
      s.heap[++s.heap_len] = max_code = n;                                                                             // 675
      s.depth[n] = 0;                                                                                                  // 676
                                                                                                                       // 677
    } else {                                                                                                           // 678
      tree[n*2 + 1]/*.Len*/ = 0;                                                                                       // 679
    }                                                                                                                  // 680
  }                                                                                                                    // 681
                                                                                                                       // 682
  /* The pkzip format requires that at least one distance code exists,                                                 // 683
   * and that at least one bit should be sent even if there is only one                                                // 684
   * possible code. So to avoid special checks later on we force at least                                              // 685
   * two codes of non zero frequency.                                                                                  // 686
   */                                                                                                                  // 687
  while (s.heap_len < 2) {                                                                                             // 688
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);                                                     // 689
    tree[node * 2]/*.Freq*/ = 1;                                                                                       // 690
    s.depth[node] = 0;                                                                                                 // 691
    s.opt_len--;                                                                                                       // 692
                                                                                                                       // 693
    if (has_stree) {                                                                                                   // 694
      s.static_len -= stree[node*2 + 1]/*.Len*/;                                                                       // 695
    }                                                                                                                  // 696
    /* node is 0 or 1 so it does not have extra bits */                                                                // 697
  }                                                                                                                    // 698
  desc.max_code = max_code;                                                                                            // 699
                                                                                                                       // 700
  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,                                               // 701
   * establish sub-heaps of increasing lengths:                                                                        // 702
   */                                                                                                                  // 703
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }                                       // 704
                                                                                                                       // 705
  /* Construct the Huffman tree by repeatedly combining the least two                                                  // 706
   * frequent nodes.                                                                                                   // 707
   */                                                                                                                  // 708
  node = elems;              /* next internal node of the tree */                                                      // 709
  do {                                                                                                                 // 710
    //pqremove(s, tree, n);  /* n = node of least frequency */                                                         // 711
    /*** pqremove ***/                                                                                                 // 712
    n = s.heap[1/*SMALLEST*/];                                                                                         // 713
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];                                                                      // 714
    pqdownheap(s, tree, 1/*SMALLEST*/);                                                                                // 715
    /***/                                                                                                              // 716
                                                                                                                       // 717
    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */                                                  // 718
                                                                                                                       // 719
    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */                                                 // 720
    s.heap[--s.heap_max] = m;                                                                                          // 721
                                                                                                                       // 722
    /* Create a new node father of n and m */                                                                          // 723
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;                                             // 724
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;                                          // 725
    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;                                                              // 726
                                                                                                                       // 727
    /* and insert the new node in the heap */                                                                          // 728
    s.heap[1/*SMALLEST*/] = node++;                                                                                    // 729
    pqdownheap(s, tree, 1/*SMALLEST*/);                                                                                // 730
                                                                                                                       // 731
  } while (s.heap_len >= 2);                                                                                           // 732
                                                                                                                       // 733
  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];                                                                        // 734
                                                                                                                       // 735
  /* At this point, the fields freq and dad are set. We can now                                                        // 736
   * generate the bit lengths.                                                                                         // 737
   */                                                                                                                  // 738
  gen_bitlen(s, desc);                                                                                                 // 739
                                                                                                                       // 740
  /* The field len is now set, we can generate the bit codes */                                                        // 741
  gen_codes(tree, max_code, s.bl_count);                                                                               // 742
}                                                                                                                      // 743
                                                                                                                       // 744
                                                                                                                       // 745
/* ===========================================================================                                         // 746
 * Scan a literal or distance tree to determine the frequencies of the codes                                           // 747
 * in the bit length tree.                                                                                             // 748
 */                                                                                                                    // 749
function scan_tree(s, tree, max_code)                                                                                  // 750
//    deflate_state *s;                                                                                                // 751
//    ct_data *tree;   /* the tree to be scanned */                                                                    // 752
//    int max_code;    /* and its largest code of non zero frequency */                                                // 753
{                                                                                                                      // 754
  var n;                     /* iterates over all tree elements */                                                     // 755
  var prevlen = -1;          /* last emitted length */                                                                 // 756
  var curlen;                /* length of current code */                                                              // 757
                                                                                                                       // 758
  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */                                                       // 759
                                                                                                                       // 760
  var count = 0;             /* repeat count of the current code */                                                    // 761
  var max_count = 7;         /* max repeat count */                                                                    // 762
  var min_count = 4;         /* min repeat count */                                                                    // 763
                                                                                                                       // 764
  if (nextlen === 0) {                                                                                                 // 765
    max_count = 138;                                                                                                   // 766
    min_count = 3;                                                                                                     // 767
  }                                                                                                                    // 768
  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */                                                               // 769
                                                                                                                       // 770
  for (n = 0; n <= max_code; n++) {                                                                                    // 771
    curlen = nextlen;                                                                                                  // 772
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;                                                                               // 773
                                                                                                                       // 774
    if (++count < max_count && curlen === nextlen) {                                                                   // 775
      continue;                                                                                                        // 776
                                                                                                                       // 777
    } else if (count < min_count) {                                                                                    // 778
      s.bl_tree[curlen * 2]/*.Freq*/ += count;                                                                         // 779
                                                                                                                       // 780
    } else if (curlen !== 0) {                                                                                         // 781
                                                                                                                       // 782
      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }                                                    // 783
      s.bl_tree[REP_3_6*2]/*.Freq*/++;                                                                                 // 784
                                                                                                                       // 785
    } else if (count <= 10) {                                                                                          // 786
      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;                                                                               // 787
                                                                                                                       // 788
    } else {                                                                                                           // 789
      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;                                                                             // 790
    }                                                                                                                  // 791
                                                                                                                       // 792
    count = 0;                                                                                                         // 793
    prevlen = curlen;                                                                                                  // 794
                                                                                                                       // 795
    if (nextlen === 0) {                                                                                               // 796
      max_count = 138;                                                                                                 // 797
      min_count = 3;                                                                                                   // 798
                                                                                                                       // 799
    } else if (curlen === nextlen) {                                                                                   // 800
      max_count = 6;                                                                                                   // 801
      min_count = 3;                                                                                                   // 802
                                                                                                                       // 803
    } else {                                                                                                           // 804
      max_count = 7;                                                                                                   // 805
      min_count = 4;                                                                                                   // 806
    }                                                                                                                  // 807
  }                                                                                                                    // 808
}                                                                                                                      // 809
                                                                                                                       // 810
                                                                                                                       // 811
/* ===========================================================================                                         // 812
 * Send a literal or distance tree in compressed form, using the codes in                                              // 813
 * bl_tree.                                                                                                            // 814
 */                                                                                                                    // 815
function send_tree(s, tree, max_code)                                                                                  // 816
//    deflate_state *s;                                                                                                // 817
//    ct_data *tree; /* the tree to be scanned */                                                                      // 818
//    int max_code;       /* and its largest code of non zero frequency */                                             // 819
{                                                                                                                      // 820
  var n;                     /* iterates over all tree elements */                                                     // 821
  var prevlen = -1;          /* last emitted length */                                                                 // 822
  var curlen;                /* length of current code */                                                              // 823
                                                                                                                       // 824
  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */                                                       // 825
                                                                                                                       // 826
  var count = 0;             /* repeat count of the current code */                                                    // 827
  var max_count = 7;         /* max repeat count */                                                                    // 828
  var min_count = 4;         /* min repeat count */                                                                    // 829
                                                                                                                       // 830
  /* tree[max_code+1].Len = -1; */  /* guard already set */                                                            // 831
  if (nextlen === 0) {                                                                                                 // 832
    max_count = 138;                                                                                                   // 833
    min_count = 3;                                                                                                     // 834
  }                                                                                                                    // 835
                                                                                                                       // 836
  for (n = 0; n <= max_code; n++) {                                                                                    // 837
    curlen = nextlen;                                                                                                  // 838
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;                                                                               // 839
                                                                                                                       // 840
    if (++count < max_count && curlen === nextlen) {                                                                   // 841
      continue;                                                                                                        // 842
                                                                                                                       // 843
    } else if (count < min_count) {                                                                                    // 844
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);                                                   // 845
                                                                                                                       // 846
    } else if (curlen !== 0) {                                                                                         // 847
      if (curlen !== prevlen) {                                                                                        // 848
        send_code(s, curlen, s.bl_tree);                                                                               // 849
        count--;                                                                                                       // 850
      }                                                                                                                // 851
      //Assert(count >= 3 && count <= 6, " 3_6?");                                                                     // 852
      send_code(s, REP_3_6, s.bl_tree);                                                                                // 853
      send_bits(s, count-3, 2);                                                                                        // 854
                                                                                                                       // 855
    } else if (count <= 10) {                                                                                          // 856
      send_code(s, REPZ_3_10, s.bl_tree);                                                                              // 857
      send_bits(s, count-3, 3);                                                                                        // 858
                                                                                                                       // 859
    } else {                                                                                                           // 860
      send_code(s, REPZ_11_138, s.bl_tree);                                                                            // 861
      send_bits(s, count-11, 7);                                                                                       // 862
    }                                                                                                                  // 863
                                                                                                                       // 864
    count = 0;                                                                                                         // 865
    prevlen = curlen;                                                                                                  // 866
    if (nextlen === 0) {                                                                                               // 867
      max_count = 138;                                                                                                 // 868
      min_count = 3;                                                                                                   // 869
                                                                                                                       // 870
    } else if (curlen === nextlen) {                                                                                   // 871
      max_count = 6;                                                                                                   // 872
      min_count = 3;                                                                                                   // 873
                                                                                                                       // 874
    } else {                                                                                                           // 875
      max_count = 7;                                                                                                   // 876
      min_count = 4;                                                                                                   // 877
    }                                                                                                                  // 878
  }                                                                                                                    // 879
}                                                                                                                      // 880
                                                                                                                       // 881
                                                                                                                       // 882
/* ===========================================================================                                         // 883
 * Construct the Huffman tree for the bit lengths and return the index in                                              // 884
 * bl_order of the last bit length code to send.                                                                       // 885
 */                                                                                                                    // 886
function build_bl_tree(s) {                                                                                            // 887
  var max_blindex;  /* index of last bit length code of non zero freq */                                               // 888
                                                                                                                       // 889
  /* Determine the bit length frequencies for literal and distance trees */                                            // 890
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);                                                                        // 891
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);                                                                        // 892
                                                                                                                       // 893
  /* Build the bit length tree: */                                                                                     // 894
  build_tree(s, s.bl_desc);                                                                                            // 895
  /* opt_len now includes the length of the tree representations, except                                               // 896
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.                                           // 897
   */                                                                                                                  // 898
                                                                                                                       // 899
  /* Determine the number of bit length codes to send. The pkzip format                                                // 900
   * requires that at least 4 bit length codes be sent. (appnote.txt says                                              // 901
   * 3 but the actual value used is 4.)                                                                                // 902
   */                                                                                                                  // 903
  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {                                                    // 904
    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {                                                        // 905
      break;                                                                                                           // 906
    }                                                                                                                  // 907
  }                                                                                                                    // 908
  /* Update opt_len to include the bit length tree and counts */                                                       // 909
  s.opt_len += 3*(max_blindex+1) + 5+5+4;                                                                              // 910
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",                                                                  // 911
  //        s->opt_len, s->static_len));                                                                               // 912
                                                                                                                       // 913
  return max_blindex;                                                                                                  // 914
}                                                                                                                      // 915
                                                                                                                       // 916
                                                                                                                       // 917
/* ===========================================================================                                         // 918
 * Send the header for a block using dynamic Huffman trees: the counts, the                                            // 919
 * lengths of the bit length codes, the literal tree and the distance tree.                                            // 920
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.                                                             // 921
 */                                                                                                                    // 922
function send_all_trees(s, lcodes, dcodes, blcodes)                                                                    // 923
//    deflate_state *s;                                                                                                // 924
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */                                                 // 925
{                                                                                                                      // 926
  var rank;                    /* index in bl_order */                                                                 // 927
                                                                                                                       // 928
  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");                                         // 929
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,                                             // 930
  //        "too many codes");                                                                                         // 931
  //Tracev((stderr, "\nbl counts: "));                                                                                 // 932
  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */                                                 // 933
  send_bits(s, dcodes-1,   5);                                                                                         // 934
  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */                                                   // 935
  for (rank = 0; rank < blcodes; rank++) {                                                                             // 936
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));                                                              // 937
    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);                                                          // 938
  }                                                                                                                    // 939
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));                                                             // 940
                                                                                                                       // 941
  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */                                                              // 942
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));                                                            // 943
                                                                                                                       // 944
  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */                                                             // 945
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));                                                           // 946
}                                                                                                                      // 947
                                                                                                                       // 948
                                                                                                                       // 949
/* ===========================================================================                                         // 950
 * Check if the data type is TEXT or BINARY, using the following algorithm:                                            // 951
 * - TEXT if the two conditions below are satisfied:                                                                   // 952
 *    a) There are no non-portable control characters belonging to the                                                 // 953
 *       "black list" (0..6, 14..25, 28..31).                                                                          // 954
 *    b) There is at least one printable character belonging to the                                                    // 955
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).                                                            // 956
 * - BINARY otherwise.                                                                                                 // 957
 * - The following partially-portable control characters form a                                                        // 958
 *   "gray list" that is ignored in this detection algorithm:                                                          // 959
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).                                                          // 960
 * IN assertion: the fields Freq of dyn_ltree are set.                                                                 // 961
 */                                                                                                                    // 962
function detect_data_type(s) {                                                                                         // 963
  /* black_mask is the bit mask of black-listed bytes                                                                  // 964
   * set bits 0..6, 14..25, and 28..31                                                                                 // 965
   * 0xf3ffc07f = binary 11110011111111111100000001111111                                                              // 966
   */                                                                                                                  // 967
  var black_mask = 0xf3ffc07f;                                                                                         // 968
  var n;                                                                                                               // 969
                                                                                                                       // 970
  /* Check for non-textual ("black-listed") bytes. */                                                                  // 971
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {                                                                       // 972
    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {                                                       // 973
      return Z_BINARY;                                                                                                 // 974
    }                                                                                                                  // 975
  }                                                                                                                    // 976
                                                                                                                       // 977
  /* Check for textual ("white-listed") bytes. */                                                                      // 978
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||                                       // 979
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {                                                                            // 980
    return Z_TEXT;                                                                                                     // 981
  }                                                                                                                    // 982
  for (n = 32; n < LITERALS; n++) {                                                                                    // 983
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {                                                                           // 984
      return Z_TEXT;                                                                                                   // 985
    }                                                                                                                  // 986
  }                                                                                                                    // 987
                                                                                                                       // 988
  /* There are no "black-listed" or "white-listed" bytes:                                                              // 989
   * this stream either is empty or has tolerated ("gray-listed") bytes only.                                          // 990
   */                                                                                                                  // 991
  return Z_BINARY;                                                                                                     // 992
}                                                                                                                      // 993
                                                                                                                       // 994
                                                                                                                       // 995
var static_init_done = false;                                                                                          // 996
                                                                                                                       // 997
/* ===========================================================================                                         // 998
 * Initialize the tree data structures for a new zlib stream.                                                          // 999
 */                                                                                                                    // 1000
function _tr_init(s)                                                                                                   // 1001
{                                                                                                                      // 1002
                                                                                                                       // 1003
  if (!static_init_done) {                                                                                             // 1004
    tr_static_init();                                                                                                  // 1005
    static_init_done = true;                                                                                           // 1006
  }                                                                                                                    // 1007
                                                                                                                       // 1008
  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);                                                                // 1009
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);                                                                // 1010
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);                                                                 // 1011
                                                                                                                       // 1012
  s.bi_buf = 0;                                                                                                        // 1013
  s.bi_valid = 0;                                                                                                      // 1014
                                                                                                                       // 1015
  /* Initialize the first block of the first file: */                                                                  // 1016
  init_block(s);                                                                                                       // 1017
}                                                                                                                      // 1018
                                                                                                                       // 1019
                                                                                                                       // 1020
/* ===========================================================================                                         // 1021
 * Send a stored block                                                                                                 // 1022
 */                                                                                                                    // 1023
function _tr_stored_block(s, buf, stored_len, last)                                                                    // 1024
//DeflateState *s;                                                                                                     // 1025
//charf *buf;       /* input block */                                                                                  // 1026
//ulg stored_len;   /* length of input block */                                                                        // 1027
//int last;         /* one if this is the last block for a file */                                                     // 1028
{                                                                                                                      // 1029
  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */                                          // 1030
  copy_block(s, buf, stored_len, true); /* with header */                                                              // 1031
}                                                                                                                      // 1032
                                                                                                                       // 1033
                                                                                                                       // 1034
/* ===========================================================================                                         // 1035
 * Send one empty static block to give enough lookahead for inflate.                                                   // 1036
 * This takes 10 bits, of which 7 may remain in the bit buffer.                                                        // 1037
 */                                                                                                                    // 1038
function _tr_align(s) {                                                                                                // 1039
  send_bits(s, STATIC_TREES<<1, 3);                                                                                    // 1040
  send_code(s, END_BLOCK, static_ltree);                                                                               // 1041
  bi_flush(s);                                                                                                         // 1042
}                                                                                                                      // 1043
                                                                                                                       // 1044
                                                                                                                       // 1045
/* ===========================================================================                                         // 1046
 * Determine the best encoding for the current block: dynamic trees, static                                            // 1047
 * trees or store, and output the encoded block to the zip file.                                                       // 1048
 */                                                                                                                    // 1049
function _tr_flush_block(s, buf, stored_len, last)                                                                     // 1050
//DeflateState *s;                                                                                                     // 1051
//charf *buf;       /* input block, or NULL if too old */                                                              // 1052
//ulg stored_len;   /* length of input block */                                                                        // 1053
//int last;         /* one if this is the last block for a file */                                                     // 1054
{                                                                                                                      // 1055
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */                                                    // 1056
  var max_blindex = 0;        /* index of last bit length code of non zero freq */                                     // 1057
                                                                                                                       // 1058
  /* Build the Huffman trees unless a stored block is forced */                                                        // 1059
  if (s.level > 0) {                                                                                                   // 1060
                                                                                                                       // 1061
    /* Check if the file is binary or text */                                                                          // 1062
    if (s.strm.data_type === Z_UNKNOWN) {                                                                              // 1063
      s.strm.data_type = detect_data_type(s);                                                                          // 1064
    }                                                                                                                  // 1065
                                                                                                                       // 1066
    /* Construct the literal and distance trees */                                                                     // 1067
    build_tree(s, s.l_desc);                                                                                           // 1068
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,                                                    // 1069
    //        s->static_len));                                                                                         // 1070
                                                                                                                       // 1071
    build_tree(s, s.d_desc);                                                                                           // 1072
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,                                                   // 1073
    //        s->static_len));                                                                                         // 1074
    /* At this point, opt_len and static_len are the total bit lengths of                                              // 1075
     * the compressed block data, excluding the tree representations.                                                  // 1076
     */                                                                                                                // 1077
                                                                                                                       // 1078
    /* Build the bit length tree for the above two trees, and get the index                                            // 1079
     * in bl_order of the last bit length code to send.                                                                // 1080
     */                                                                                                                // 1081
    max_blindex = build_bl_tree(s);                                                                                    // 1082
                                                                                                                       // 1083
    /* Determine the best encoding. Compute the block lengths in bytes. */                                             // 1084
    opt_lenb = (s.opt_len+3+7) >>> 3;                                                                                  // 1085
    static_lenb = (s.static_len+3+7) >>> 3;                                                                            // 1086
                                                                                                                       // 1087
    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",                                              // 1088
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,                                            // 1089
    //        s->last_lit));                                                                                           // 1090
                                                                                                                       // 1091
    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }                                                           // 1092
                                                                                                                       // 1093
  } else {                                                                                                             // 1094
    // Assert(buf != (char*)0, "lost buf");                                                                            // 1095
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */                                                // 1096
  }                                                                                                                    // 1097
                                                                                                                       // 1098
  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {                                                                    // 1099
    /* 4: two words for the lengths */                                                                                 // 1100
                                                                                                                       // 1101
    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.                                                  // 1102
     * Otherwise we can't have processed more than WSIZE input bytes since                                             // 1103
     * the last block flush, because compression would have been                                                       // 1104
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to                                                    // 1105
     * transform a block into a stored block.                                                                          // 1106
     */                                                                                                                // 1107
    _tr_stored_block(s, buf, stored_len, last);                                                                        // 1108
                                                                                                                       // 1109
  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {                                                     // 1110
                                                                                                                       // 1111
    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);                                                               // 1112
    compress_block(s, static_ltree, static_dtree);                                                                     // 1113
                                                                                                                       // 1114
  } else {                                                                                                             // 1115
    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);                                                                  // 1116
    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);                                        // 1117
    compress_block(s, s.dyn_ltree, s.dyn_dtree);                                                                       // 1118
  }                                                                                                                    // 1119
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");                                                // 1120
  /* The above check is made mod 2^32, for files larger than 512 MB                                                    // 1121
   * and uLong implemented on 32 bits.                                                                                 // 1122
   */                                                                                                                  // 1123
  init_block(s);                                                                                                       // 1124
                                                                                                                       // 1125
  if (last) {                                                                                                          // 1126
    bi_windup(s);                                                                                                      // 1127
  }                                                                                                                    // 1128
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,                                                      // 1129
  //       s->compressed_len-7*last));                                                                                 // 1130
}                                                                                                                      // 1131
                                                                                                                       // 1132
/* ===========================================================================                                         // 1133
 * Save the match info and tally the frequency counts. Return true if                                                  // 1134
 * the current block must be flushed.                                                                                  // 1135
 */                                                                                                                    // 1136
function _tr_tally(s, dist, lc)                                                                                        // 1137
//    deflate_state *s;                                                                                                // 1138
//    unsigned dist;  /* distance of matched string */                                                                 // 1139
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */                                      // 1140
{                                                                                                                      // 1141
  //var out_length, in_length, dcode;                                                                                  // 1142
                                                                                                                       // 1143
  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;                                                   // 1144
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;                                                           // 1145
                                                                                                                       // 1146
  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;                                                                     // 1147
  s.last_lit++;                                                                                                        // 1148
                                                                                                                       // 1149
  if (dist === 0) {                                                                                                    // 1150
    /* lc is the unmatched char */                                                                                     // 1151
    s.dyn_ltree[lc*2]/*.Freq*/++;                                                                                      // 1152
  } else {                                                                                                             // 1153
    s.matches++;                                                                                                       // 1154
    /* Here, lc is the match length - MIN_MATCH */                                                                     // 1155
    dist--;             /* dist = match distance - 1 */                                                                // 1156
    //Assert((ush)dist < (ush)MAX_DIST(s) &&                                                                           // 1157
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&                                                                  // 1158
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");                                               // 1159
                                                                                                                       // 1160
    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;                                                         // 1161
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;                                                                          // 1162
  }                                                                                                                    // 1163
                                                                                                                       // 1164
// (!) This block is disabled in zlib defailts,                                                                        // 1165
// don't enable it for binary compatibility                                                                            // 1166
                                                                                                                       // 1167
//#ifdef TRUNCATE_BLOCK                                                                                                // 1168
//  /* Try to guess if it is profitable to stop the current block here */                                              // 1169
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {                                                                  // 1170
//    /* Compute an upper bound for the compressed length */                                                           // 1171
//    out_length = s.last_lit*8;                                                                                       // 1172
//    in_length = s.strstart - s.block_start;                                                                          // 1173
//                                                                                                                     // 1174
//    for (dcode = 0; dcode < D_CODES; dcode++) {                                                                      // 1175
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);                                        // 1176
//    }                                                                                                                // 1177
//    out_length >>>= 3;                                                                                               // 1178
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",                                                      // 1179
//    //       s->last_lit, in_length, out_length,                                                                     // 1180
//    //       100L - out_length*100L/in_length));                                                                     // 1181
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {                            // 1182
//      return true;                                                                                                   // 1183
//    }                                                                                                                // 1184
//  }                                                                                                                  // 1185
//#endif                                                                                                               // 1186
                                                                                                                       // 1187
  return (s.last_lit === s.lit_bufsize-1);                                                                             // 1188
  /* We avoid equality with lit_bufsize because of wraparound at 64K                                                   // 1189
   * on 16 bit machines and because stored blocks are restricted to                                                    // 1190
   * 64K-1 bytes.                                                                                                      // 1191
   */                                                                                                                  // 1192
}                                                                                                                      // 1193
                                                                                                                       // 1194
exports._tr_init  = _tr_init;                                                                                          // 1195
exports._tr_stored_block = _tr_stored_block;                                                                           // 1196
exports._tr_flush_block  = _tr_flush_block;                                                                            // 1197
exports._tr_tally = _tr_tally;                                                                                         // 1198
exports._tr_align = _tr_align;                                                                                         // 1199
                                                                                                                       // 1200
},{"../utils/common":4}],14:[function(require,module,exports){                                                         //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
                                                                                                                       // 3
function ZStream() {                                                                                                   // 4
  /* next input byte */                                                                                                // 5
  this.input = null; // JS specific, because we have no pointers                                                       // 6
  this.next_in = 0;                                                                                                    // 7
  /* number of bytes available at input */                                                                             // 8
  this.avail_in = 0;                                                                                                   // 9
  /* total number of input bytes read so far */                                                                        // 10
  this.total_in = 0;                                                                                                   // 11
  /* next output byte should be put there */                                                                           // 12
  this.output = null; // JS specific, because we have no pointers                                                      // 13
  this.next_out = 0;                                                                                                   // 14
  /* remaining free space at output */                                                                                 // 15
  this.avail_out = 0;                                                                                                  // 16
  /* total number of bytes output so far */                                                                            // 17
  this.total_out = 0;                                                                                                  // 18
  /* last error message, NULL if no error */                                                                           // 19
  this.msg = ''/*Z_NULL*/;                                                                                             // 20
  /* not visible by applications */                                                                                    // 21
  this.state = null;                                                                                                   // 22
  /* best guess about the data type: binary or text */                                                                 // 23
  this.data_type = 2/*Z_UNKNOWN*/;                                                                                     // 24
  /* adler32 value of the uncompressed data */                                                                         // 25
  this.adler = 0;                                                                                                      // 26
}                                                                                                                      // 27
                                                                                                                       // 28
module.exports = ZStream;                                                                                              // 29
                                                                                                                       // 30
},{}],15:[function(require,module,exports){                                                                            //
(function (process,Buffer){                                                                                            //
var msg = require('pako/lib/zlib/messages');                                                                           // 1
var zstream = require('pako/lib/zlib/zstream');                                                                        // 2
var zlib_deflate = require('pako/lib/zlib/deflate.js');                                                                // 3
var zlib_inflate = require('pako/lib/zlib/inflate.js');                                                                // 4
var constants = require('pako/lib/zlib/constants');                                                                    // 5
                                                                                                                       // 6
for (var key in constants) {                                                                                           // 7
  exports[key] = constants[key];                                                                                       // 8
}                                                                                                                      // 9
                                                                                                                       // 10
// zlib modes                                                                                                          // 11
exports.NONE = 0;                                                                                                      // 12
exports.DEFLATE = 1;                                                                                                   // 13
exports.INFLATE = 2;                                                                                                   // 14
exports.GZIP = 3;                                                                                                      // 15
exports.GUNZIP = 4;                                                                                                    // 16
exports.DEFLATERAW = 5;                                                                                                // 17
exports.INFLATERAW = 6;                                                                                                // 18
exports.UNZIP = 7;                                                                                                     // 19
                                                                                                                       // 20
/**                                                                                                                    // 21
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js                                                   // 22
 */                                                                                                                    // 23
function Zlib(mode) {                                                                                                  // 24
  if (mode < exports.DEFLATE || mode > exports.UNZIP)                                                                  // 25
    throw new TypeError("Bad argument");                                                                               // 26
                                                                                                                       // 27
  this.mode = mode;                                                                                                    // 28
  this.init_done = false;                                                                                              // 29
  this.write_in_progress = false;                                                                                      // 30
  this.pending_close = false;                                                                                          // 31
  this.windowBits = 0;                                                                                                 // 32
  this.level = 0;                                                                                                      // 33
  this.memLevel = 0;                                                                                                   // 34
  this.strategy = 0;                                                                                                   // 35
  this.dictionary = null;                                                                                              // 36
}                                                                                                                      // 37
                                                                                                                       // 38
Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {                                    // 39
  this.windowBits = windowBits;                                                                                        // 40
  this.level = level;                                                                                                  // 41
  this.memLevel = memLevel;                                                                                            // 42
  this.strategy = strategy;                                                                                            // 43
  // dictionary not supported.                                                                                         // 44
                                                                                                                       // 45
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)                                                      // 46
    this.windowBits += 16;                                                                                             // 47
                                                                                                                       // 48
  if (this.mode === exports.UNZIP)                                                                                     // 49
    this.windowBits += 32;                                                                                             // 50
                                                                                                                       // 51
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)                                            // 52
    this.windowBits = -this.windowBits;                                                                                // 53
                                                                                                                       // 54
  this.strm = new zstream();                                                                                           // 55
                                                                                                                       // 56
  switch (this.mode) {                                                                                                 // 57
    case exports.DEFLATE:                                                                                              // 58
    case exports.GZIP:                                                                                                 // 59
    case exports.DEFLATERAW:                                                                                           // 60
      var status = zlib_deflate.deflateInit2(                                                                          // 61
        this.strm,                                                                                                     // 62
        this.level,                                                                                                    // 63
        exports.Z_DEFLATED,                                                                                            // 64
        this.windowBits,                                                                                               // 65
        this.memLevel,                                                                                                 // 66
        this.strategy                                                                                                  // 67
      );                                                                                                               // 68
      break;                                                                                                           // 69
    case exports.INFLATE:                                                                                              // 70
    case exports.GUNZIP:                                                                                               // 71
    case exports.INFLATERAW:                                                                                           // 72
    case exports.UNZIP:                                                                                                // 73
      var status  = zlib_inflate.inflateInit2(                                                                         // 74
        this.strm,                                                                                                     // 75
        this.windowBits                                                                                                // 76
      );                                                                                                               // 77
      break;                                                                                                           // 78
    default:                                                                                                           // 79
      throw new Error("Unknown mode " + this.mode);                                                                    // 80
  }                                                                                                                    // 81
                                                                                                                       // 82
  if (status !== exports.Z_OK) {                                                                                       // 83
    this._error(status);                                                                                               // 84
    return;                                                                                                            // 85
  }                                                                                                                    // 86
                                                                                                                       // 87
  this.write_in_progress = false;                                                                                      // 88
  this.init_done = true;                                                                                               // 89
};                                                                                                                     // 90
                                                                                                                       // 91
Zlib.prototype.params = function() {                                                                                   // 92
  throw new Error("deflateParams Not supported");                                                                      // 93
};                                                                                                                     // 94
                                                                                                                       // 95
Zlib.prototype._writeCheck = function() {                                                                              // 96
  if (!this.init_done)                                                                                                 // 97
    throw new Error("write before init");                                                                              // 98
                                                                                                                       // 99
  if (this.mode === exports.NONE)                                                                                      // 100
    throw new Error("already finalized");                                                                              // 101
                                                                                                                       // 102
  if (this.write_in_progress)                                                                                          // 103
    throw new Error("write already in progress");                                                                      // 104
                                                                                                                       // 105
  if (this.pending_close)                                                                                              // 106
    throw new Error("close is pending");                                                                               // 107
};                                                                                                                     // 108
                                                                                                                       // 109
Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {                                 // 110
  this._writeCheck();                                                                                                  // 111
  this.write_in_progress = true;                                                                                       // 112
                                                                                                                       // 113
  var self = this;                                                                                                     // 114
  process.nextTick(function() {                                                                                        // 115
    self.write_in_progress = false;                                                                                    // 116
    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);                                        // 117
    self.callback(res[0], res[1]);                                                                                     // 118
                                                                                                                       // 119
    if (self.pending_close)                                                                                            // 120
      self.close();                                                                                                    // 121
  });                                                                                                                  // 122
                                                                                                                       // 123
  return this;                                                                                                         // 124
};                                                                                                                     // 125
                                                                                                                       // 126
// set method for Node buffers, used by pako                                                                           // 127
function bufferSet(data, offset) {                                                                                     // 128
  for (var i = 0; i < data.length; i++) {                                                                              // 129
    this[offset + i] = data[i];                                                                                        // 130
  }                                                                                                                    // 131
}                                                                                                                      // 132
                                                                                                                       // 133
Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {                             // 134
  this._writeCheck();                                                                                                  // 135
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);                                             // 136
};                                                                                                                     // 137
                                                                                                                       // 138
Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {                                // 139
  this.write_in_progress = true;                                                                                       // 140
                                                                                                                       // 141
  if (flush !== exports.Z_NO_FLUSH &&                                                                                  // 142
      flush !== exports.Z_PARTIAL_FLUSH &&                                                                             // 143
      flush !== exports.Z_SYNC_FLUSH &&                                                                                // 144
      flush !== exports.Z_FULL_FLUSH &&                                                                                // 145
      flush !== exports.Z_FINISH &&                                                                                    // 146
      flush !== exports.Z_BLOCK) {                                                                                     // 147
    throw new Error("Invalid flush value");                                                                            // 148
  }                                                                                                                    // 149
                                                                                                                       // 150
  if (input == null) {                                                                                                 // 151
    input = new Buffer(0);                                                                                             // 152
    in_len = 0;                                                                                                        // 153
    in_off = 0;                                                                                                        // 154
  }                                                                                                                    // 155
                                                                                                                       // 156
  if (out._set)                                                                                                        // 157
    out.set = out._set;                                                                                                // 158
  else                                                                                                                 // 159
    out.set = bufferSet;                                                                                               // 160
                                                                                                                       // 161
  var strm = this.strm;                                                                                                // 162
  strm.avail_in = in_len;                                                                                              // 163
  strm.input = input;                                                                                                  // 164
  strm.next_in = in_off;                                                                                               // 165
  strm.avail_out = out_len;                                                                                            // 166
  strm.output = out;                                                                                                   // 167
  strm.next_out = out_off;                                                                                             // 168
                                                                                                                       // 169
  switch (this.mode) {                                                                                                 // 170
    case exports.DEFLATE:                                                                                              // 171
    case exports.GZIP:                                                                                                 // 172
    case exports.DEFLATERAW:                                                                                           // 173
      var status = zlib_deflate.deflate(strm, flush);                                                                  // 174
      break;                                                                                                           // 175
    case exports.UNZIP:                                                                                                // 176
    case exports.INFLATE:                                                                                              // 177
    case exports.GUNZIP:                                                                                               // 178
    case exports.INFLATERAW:                                                                                           // 179
      var status = zlib_inflate.inflate(strm, flush);                                                                  // 180
      break;                                                                                                           // 181
    default:                                                                                                           // 182
      throw new Error("Unknown mode " + this.mode);                                                                    // 183
  }                                                                                                                    // 184
                                                                                                                       // 185
  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {                                                    // 186
    this._error(status);                                                                                               // 187
  }                                                                                                                    // 188
                                                                                                                       // 189
  this.write_in_progress = false;                                                                                      // 190
  return [strm.avail_in, strm.avail_out];                                                                              // 191
};                                                                                                                     // 192
                                                                                                                       // 193
Zlib.prototype.close = function() {                                                                                    // 194
  if (this.write_in_progress) {                                                                                        // 195
    this.pending_close = true;                                                                                         // 196
    return;                                                                                                            // 197
  }                                                                                                                    // 198
                                                                                                                       // 199
  this.pending_close = false;                                                                                          // 200
                                                                                                                       // 201
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {               // 202
    zlib_deflate.deflateEnd(this.strm);                                                                                // 203
  } else {                                                                                                             // 204
    zlib_inflate.inflateEnd(this.strm);                                                                                // 205
  }                                                                                                                    // 206
                                                                                                                       // 207
  this.mode = exports.NONE;                                                                                            // 208
};                                                                                                                     // 209
                                                                                                                       // 210
Zlib.prototype.reset = function() {                                                                                    // 211
  switch (this.mode) {                                                                                                 // 212
    case exports.DEFLATE:                                                                                              // 213
    case exports.DEFLATERAW:                                                                                           // 214
      var status = zlib_deflate.deflateReset(this.strm);                                                               // 215
      break;                                                                                                           // 216
    case exports.INFLATE:                                                                                              // 217
    case exports.INFLATERAW:                                                                                           // 218
      var status = zlib_inflate.inflateReset(this.strm);                                                               // 219
      break;                                                                                                           // 220
  }                                                                                                                    // 221
                                                                                                                       // 222
  if (status !== exports.Z_OK) {                                                                                       // 223
    this._error(status);                                                                                               // 224
  }                                                                                                                    // 225
};                                                                                                                     // 226
                                                                                                                       // 227
Zlib.prototype._error = function(status) {                                                                             // 228
  this.onerror(msg[status] + ': ' + this.strm.msg, status);                                                            // 229
                                                                                                                       // 230
  this.write_in_progress = false;                                                                                      // 231
  if (this.pending_close)                                                                                              // 232
    this.close();                                                                                                      // 233
};                                                                                                                     // 234
                                                                                                                       // 235
exports.Zlib = Zlib;                                                                                                   // 236
                                                                                                                       // 237
}).call(this,require('_process'),require("buffer").Buffer)                                                             //
                                                                                                                       //
},{"_process":25,"buffer":17,"pako/lib/zlib/constants":6,"pako/lib/zlib/deflate.js":8,"pako/lib/zlib/inflate.js":10,"pako/lib/zlib/messages":12,"pako/lib/zlib/zstream":14}],16:[function(require,module,exports){
(function (process,Buffer){                                                                                            //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
var Transform = require('_stream_transform');                                                                          // 22
                                                                                                                       // 23
var binding = require('./binding');                                                                                    // 24
var util = require('util');                                                                                            // 25
var assert = require('assert').ok;                                                                                     // 26
                                                                                                                       // 27
// zlib doesn't provide these, so kludge them in following the same                                                    // 28
// const naming scheme zlib uses.                                                                                      // 29
binding.Z_MIN_WINDOWBITS = 8;                                                                                          // 30
binding.Z_MAX_WINDOWBITS = 15;                                                                                         // 31
binding.Z_DEFAULT_WINDOWBITS = 15;                                                                                     // 32
                                                                                                                       // 33
// fewer than 64 bytes per chunk is stupid.                                                                            // 34
// technically it could work with as few as 8, but even 64 bytes                                                       // 35
// is absurdly low.  Usually a MB or more is best.                                                                     // 36
binding.Z_MIN_CHUNK = 64;                                                                                              // 37
binding.Z_MAX_CHUNK = Infinity;                                                                                        // 38
binding.Z_DEFAULT_CHUNK = (16 * 1024);                                                                                 // 39
                                                                                                                       // 40
binding.Z_MIN_MEMLEVEL = 1;                                                                                            // 41
binding.Z_MAX_MEMLEVEL = 9;                                                                                            // 42
binding.Z_DEFAULT_MEMLEVEL = 8;                                                                                        // 43
                                                                                                                       // 44
binding.Z_MIN_LEVEL = -1;                                                                                              // 45
binding.Z_MAX_LEVEL = 9;                                                                                               // 46
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;                                                               // 47
                                                                                                                       // 48
// expose all the zlib constants                                                                                       // 49
Object.keys(binding).forEach(function(k) {                                                                             // 50
  if (k.match(/^Z/)) exports[k] = binding[k];                                                                          // 51
});                                                                                                                    // 52
                                                                                                                       // 53
// translation table for return codes.                                                                                 // 54
exports.codes = {                                                                                                      // 55
  Z_OK: binding.Z_OK,                                                                                                  // 56
  Z_STREAM_END: binding.Z_STREAM_END,                                                                                  // 57
  Z_NEED_DICT: binding.Z_NEED_DICT,                                                                                    // 58
  Z_ERRNO: binding.Z_ERRNO,                                                                                            // 59
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,                                                                              // 60
  Z_DATA_ERROR: binding.Z_DATA_ERROR,                                                                                  // 61
  Z_MEM_ERROR: binding.Z_MEM_ERROR,                                                                                    // 62
  Z_BUF_ERROR: binding.Z_BUF_ERROR,                                                                                    // 63
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR                                                                             // 64
};                                                                                                                     // 65
                                                                                                                       // 66
Object.keys(exports.codes).forEach(function(k) {                                                                       // 67
  exports.codes[exports.codes[k]] = k;                                                                                 // 68
});                                                                                                                    // 69
                                                                                                                       // 70
exports.Deflate = Deflate;                                                                                             // 71
exports.Inflate = Inflate;                                                                                             // 72
exports.Gzip = Gzip;                                                                                                   // 73
exports.Gunzip = Gunzip;                                                                                               // 74
exports.DeflateRaw = DeflateRaw;                                                                                       // 75
exports.InflateRaw = InflateRaw;                                                                                       // 76
exports.Unzip = Unzip;                                                                                                 // 77
                                                                                                                       // 78
exports.createDeflate = function(o) {                                                                                  // 79
  return new Deflate(o);                                                                                               // 80
};                                                                                                                     // 81
                                                                                                                       // 82
exports.createInflate = function(o) {                                                                                  // 83
  return new Inflate(o);                                                                                               // 84
};                                                                                                                     // 85
                                                                                                                       // 86
exports.createDeflateRaw = function(o) {                                                                               // 87
  return new DeflateRaw(o);                                                                                            // 88
};                                                                                                                     // 89
                                                                                                                       // 90
exports.createInflateRaw = function(o) {                                                                               // 91
  return new InflateRaw(o);                                                                                            // 92
};                                                                                                                     // 93
                                                                                                                       // 94
exports.createGzip = function(o) {                                                                                     // 95
  return new Gzip(o);                                                                                                  // 96
};                                                                                                                     // 97
                                                                                                                       // 98
exports.createGunzip = function(o) {                                                                                   // 99
  return new Gunzip(o);                                                                                                // 100
};                                                                                                                     // 101
                                                                                                                       // 102
exports.createUnzip = function(o) {                                                                                    // 103
  return new Unzip(o);                                                                                                 // 104
};                                                                                                                     // 105
                                                                                                                       // 106
                                                                                                                       // 107
// Convenience methods.                                                                                                // 108
// compress/decompress a string or buffer in one step.                                                                 // 109
exports.deflate = function(buffer, opts, callback) {                                                                   // 110
  if (typeof opts === 'function') {                                                                                    // 111
    callback = opts;                                                                                                   // 112
    opts = {};                                                                                                         // 113
  }                                                                                                                    // 114
  return zlibBuffer(new Deflate(opts), buffer, callback);                                                              // 115
};                                                                                                                     // 116
                                                                                                                       // 117
exports.deflateSync = function(buffer, opts) {                                                                         // 118
  return zlibBufferSync(new Deflate(opts), buffer);                                                                    // 119
};                                                                                                                     // 120
                                                                                                                       // 121
exports.gzip = function(buffer, opts, callback) {                                                                      // 122
  if (typeof opts === 'function') {                                                                                    // 123
    callback = opts;                                                                                                   // 124
    opts = {};                                                                                                         // 125
  }                                                                                                                    // 126
  return zlibBuffer(new Gzip(opts), buffer, callback);                                                                 // 127
};                                                                                                                     // 128
                                                                                                                       // 129
exports.gzipSync = function(buffer, opts) {                                                                            // 130
  return zlibBufferSync(new Gzip(opts), buffer);                                                                       // 131
};                                                                                                                     // 132
                                                                                                                       // 133
exports.deflateRaw = function(buffer, opts, callback) {                                                                // 134
  if (typeof opts === 'function') {                                                                                    // 135
    callback = opts;                                                                                                   // 136
    opts = {};                                                                                                         // 137
  }                                                                                                                    // 138
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);                                                           // 139
};                                                                                                                     // 140
                                                                                                                       // 141
exports.deflateRawSync = function(buffer, opts) {                                                                      // 142
  return zlibBufferSync(new DeflateRaw(opts), buffer);                                                                 // 143
};                                                                                                                     // 144
                                                                                                                       // 145
exports.unzip = function(buffer, opts, callback) {                                                                     // 146
  if (typeof opts === 'function') {                                                                                    // 147
    callback = opts;                                                                                                   // 148
    opts = {};                                                                                                         // 149
  }                                                                                                                    // 150
  return zlibBuffer(new Unzip(opts), buffer, callback);                                                                // 151
};                                                                                                                     // 152
                                                                                                                       // 153
exports.unzipSync = function(buffer, opts) {                                                                           // 154
  return zlibBufferSync(new Unzip(opts), buffer);                                                                      // 155
};                                                                                                                     // 156
                                                                                                                       // 157
exports.inflate = function(buffer, opts, callback) {                                                                   // 158
  if (typeof opts === 'function') {                                                                                    // 159
    callback = opts;                                                                                                   // 160
    opts = {};                                                                                                         // 161
  }                                                                                                                    // 162
  return zlibBuffer(new Inflate(opts), buffer, callback);                                                              // 163
};                                                                                                                     // 164
                                                                                                                       // 165
exports.inflateSync = function(buffer, opts) {                                                                         // 166
  return zlibBufferSync(new Inflate(opts), buffer);                                                                    // 167
};                                                                                                                     // 168
                                                                                                                       // 169
exports.gunzip = function(buffer, opts, callback) {                                                                    // 170
  if (typeof opts === 'function') {                                                                                    // 171
    callback = opts;                                                                                                   // 172
    opts = {};                                                                                                         // 173
  }                                                                                                                    // 174
  return zlibBuffer(new Gunzip(opts), buffer, callback);                                                               // 175
};                                                                                                                     // 176
                                                                                                                       // 177
exports.gunzipSync = function(buffer, opts) {                                                                          // 178
  return zlibBufferSync(new Gunzip(opts), buffer);                                                                     // 179
};                                                                                                                     // 180
                                                                                                                       // 181
exports.inflateRaw = function(buffer, opts, callback) {                                                                // 182
  if (typeof opts === 'function') {                                                                                    // 183
    callback = opts;                                                                                                   // 184
    opts = {};                                                                                                         // 185
  }                                                                                                                    // 186
  return zlibBuffer(new InflateRaw(opts), buffer, callback);                                                           // 187
};                                                                                                                     // 188
                                                                                                                       // 189
exports.inflateRawSync = function(buffer, opts) {                                                                      // 190
  return zlibBufferSync(new InflateRaw(opts), buffer);                                                                 // 191
};                                                                                                                     // 192
                                                                                                                       // 193
function zlibBuffer(engine, buffer, callback) {                                                                        // 194
  var buffers = [];                                                                                                    // 195
  var nread = 0;                                                                                                       // 196
                                                                                                                       // 197
  engine.on('error', onError);                                                                                         // 198
  engine.on('end', onEnd);                                                                                             // 199
                                                                                                                       // 200
  engine.end(buffer);                                                                                                  // 201
  flow();                                                                                                              // 202
                                                                                                                       // 203
  function flow() {                                                                                                    // 204
    var chunk;                                                                                                         // 205
    while (null !== (chunk = engine.read())) {                                                                         // 206
      buffers.push(chunk);                                                                                             // 207
      nread += chunk.length;                                                                                           // 208
    }                                                                                                                  // 209
    engine.once('readable', flow);                                                                                     // 210
  }                                                                                                                    // 211
                                                                                                                       // 212
  function onError(err) {                                                                                              // 213
    engine.removeListener('end', onEnd);                                                                               // 214
    engine.removeListener('readable', flow);                                                                           // 215
    callback(err);                                                                                                     // 216
  }                                                                                                                    // 217
                                                                                                                       // 218
  function onEnd() {                                                                                                   // 219
    var buf = Buffer.concat(buffers, nread);                                                                           // 220
    buffers = [];                                                                                                      // 221
    callback(null, buf);                                                                                               // 222
    engine.close();                                                                                                    // 223
  }                                                                                                                    // 224
}                                                                                                                      // 225
                                                                                                                       // 226
function zlibBufferSync(engine, buffer) {                                                                              // 227
  if (typeof buffer === 'string')                                                                                      // 228
    buffer = new Buffer(buffer);                                                                                       // 229
  if (!Buffer.isBuffer(buffer))                                                                                        // 230
    throw new TypeError('Not a string or buffer');                                                                     // 231
                                                                                                                       // 232
  var flushFlag = binding.Z_FINISH;                                                                                    // 233
                                                                                                                       // 234
  return engine._processChunk(buffer, flushFlag);                                                                      // 235
}                                                                                                                      // 236
                                                                                                                       // 237
// generic zlib                                                                                                        // 238
// minimal 2-byte header                                                                                               // 239
function Deflate(opts) {                                                                                               // 240
  if (!(this instanceof Deflate)) return new Deflate(opts);                                                            // 241
  Zlib.call(this, opts, binding.DEFLATE);                                                                              // 242
}                                                                                                                      // 243
                                                                                                                       // 244
function Inflate(opts) {                                                                                               // 245
  if (!(this instanceof Inflate)) return new Inflate(opts);                                                            // 246
  Zlib.call(this, opts, binding.INFLATE);                                                                              // 247
}                                                                                                                      // 248
                                                                                                                       // 249
                                                                                                                       // 250
                                                                                                                       // 251
// gzip - bigger header, same deflate compression                                                                      // 252
function Gzip(opts) {                                                                                                  // 253
  if (!(this instanceof Gzip)) return new Gzip(opts);                                                                  // 254
  Zlib.call(this, opts, binding.GZIP);                                                                                 // 255
}                                                                                                                      // 256
                                                                                                                       // 257
function Gunzip(opts) {                                                                                                // 258
  if (!(this instanceof Gunzip)) return new Gunzip(opts);                                                              // 259
  Zlib.call(this, opts, binding.GUNZIP);                                                                               // 260
}                                                                                                                      // 261
                                                                                                                       // 262
                                                                                                                       // 263
                                                                                                                       // 264
// raw - no header                                                                                                     // 265
function DeflateRaw(opts) {                                                                                            // 266
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);                                                      // 267
  Zlib.call(this, opts, binding.DEFLATERAW);                                                                           // 268
}                                                                                                                      // 269
                                                                                                                       // 270
function InflateRaw(opts) {                                                                                            // 271
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);                                                      // 272
  Zlib.call(this, opts, binding.INFLATERAW);                                                                           // 273
}                                                                                                                      // 274
                                                                                                                       // 275
                                                                                                                       // 276
// auto-detect header.                                                                                                 // 277
function Unzip(opts) {                                                                                                 // 278
  if (!(this instanceof Unzip)) return new Unzip(opts);                                                                // 279
  Zlib.call(this, opts, binding.UNZIP);                                                                                // 280
}                                                                                                                      // 281
                                                                                                                       // 282
                                                                                                                       // 283
// the Zlib class they all inherit from                                                                                // 284
// This thing manages the queue of requests, and returns                                                               // 285
// true or false if there is anything in the queue when                                                                // 286
// you call the .write() method.                                                                                       // 287
                                                                                                                       // 288
function Zlib(opts, mode) {                                                                                            // 289
  this._opts = opts = opts || {};                                                                                      // 290
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;                                                         // 291
                                                                                                                       // 292
  Transform.call(this, opts);                                                                                          // 293
                                                                                                                       // 294
  if (opts.flush) {                                                                                                    // 295
    if (opts.flush !== binding.Z_NO_FLUSH &&                                                                           // 296
        opts.flush !== binding.Z_PARTIAL_FLUSH &&                                                                      // 297
        opts.flush !== binding.Z_SYNC_FLUSH &&                                                                         // 298
        opts.flush !== binding.Z_FULL_FLUSH &&                                                                         // 299
        opts.flush !== binding.Z_FINISH &&                                                                             // 300
        opts.flush !== binding.Z_BLOCK) {                                                                              // 301
      throw new Error('Invalid flush flag: ' + opts.flush);                                                            // 302
    }                                                                                                                  // 303
  }                                                                                                                    // 304
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;                                                                  // 305
                                                                                                                       // 306
  if (opts.chunkSize) {                                                                                                // 307
    if (opts.chunkSize < exports.Z_MIN_CHUNK ||                                                                        // 308
        opts.chunkSize > exports.Z_MAX_CHUNK) {                                                                        // 309
      throw new Error('Invalid chunk size: ' + opts.chunkSize);                                                        // 310
    }                                                                                                                  // 311
  }                                                                                                                    // 312
                                                                                                                       // 313
  if (opts.windowBits) {                                                                                               // 314
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||                                                                  // 315
        opts.windowBits > exports.Z_MAX_WINDOWBITS) {                                                                  // 316
      throw new Error('Invalid windowBits: ' + opts.windowBits);                                                       // 317
    }                                                                                                                  // 318
  }                                                                                                                    // 319
                                                                                                                       // 320
  if (opts.level) {                                                                                                    // 321
    if (opts.level < exports.Z_MIN_LEVEL ||                                                                            // 322
        opts.level > exports.Z_MAX_LEVEL) {                                                                            // 323
      throw new Error('Invalid compression level: ' + opts.level);                                                     // 324
    }                                                                                                                  // 325
  }                                                                                                                    // 326
                                                                                                                       // 327
  if (opts.memLevel) {                                                                                                 // 328
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||                                                                      // 329
        opts.memLevel > exports.Z_MAX_MEMLEVEL) {                                                                      // 330
      throw new Error('Invalid memLevel: ' + opts.memLevel);                                                           // 331
    }                                                                                                                  // 332
  }                                                                                                                    // 333
                                                                                                                       // 334
  if (opts.strategy) {                                                                                                 // 335
    if (opts.strategy != exports.Z_FILTERED &&                                                                         // 336
        opts.strategy != exports.Z_HUFFMAN_ONLY &&                                                                     // 337
        opts.strategy != exports.Z_RLE &&                                                                              // 338
        opts.strategy != exports.Z_FIXED &&                                                                            // 339
        opts.strategy != exports.Z_DEFAULT_STRATEGY) {                                                                 // 340
      throw new Error('Invalid strategy: ' + opts.strategy);                                                           // 341
    }                                                                                                                  // 342
  }                                                                                                                    // 343
                                                                                                                       // 344
  if (opts.dictionary) {                                                                                               // 345
    if (!Buffer.isBuffer(opts.dictionary)) {                                                                           // 346
      throw new Error('Invalid dictionary: it should be a Buffer instance');                                           // 347
    }                                                                                                                  // 348
  }                                                                                                                    // 349
                                                                                                                       // 350
  this._binding = new binding.Zlib(mode);                                                                              // 351
                                                                                                                       // 352
  var self = this;                                                                                                     // 353
  this._hadError = false;                                                                                              // 354
  this._binding.onerror = function(message, errno) {                                                                   // 355
    // there is no way to cleanly recover.                                                                             // 356
    // continuing only obscures problems.                                                                              // 357
    self._binding = null;                                                                                              // 358
    self._hadError = true;                                                                                             // 359
                                                                                                                       // 360
    var error = new Error(message);                                                                                    // 361
    error.errno = errno;                                                                                               // 362
    error.code = exports.codes[errno];                                                                                 // 363
    self.emit('error', error);                                                                                         // 364
  };                                                                                                                   // 365
                                                                                                                       // 366
  var level = exports.Z_DEFAULT_COMPRESSION;                                                                           // 367
  if (typeof opts.level === 'number') level = opts.level;                                                              // 368
                                                                                                                       // 369
  var strategy = exports.Z_DEFAULT_STRATEGY;                                                                           // 370
  if (typeof opts.strategy === 'number') strategy = opts.strategy;                                                     // 371
                                                                                                                       // 372
  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,                                                  // 373
                     level,                                                                                            // 374
                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,                                                      // 375
                     strategy,                                                                                         // 376
                     opts.dictionary);                                                                                 // 377
                                                                                                                       // 378
  this._buffer = new Buffer(this._chunkSize);                                                                          // 379
  this._offset = 0;                                                                                                    // 380
  this._closed = false;                                                                                                // 381
  this._level = level;                                                                                                 // 382
  this._strategy = strategy;                                                                                           // 383
                                                                                                                       // 384
  this.once('end', this.close);                                                                                        // 385
}                                                                                                                      // 386
                                                                                                                       // 387
util.inherits(Zlib, Transform);                                                                                        // 388
                                                                                                                       // 389
Zlib.prototype.params = function(level, strategy, callback) {                                                          // 390
  if (level < exports.Z_MIN_LEVEL ||                                                                                   // 391
      level > exports.Z_MAX_LEVEL) {                                                                                   // 392
    throw new RangeError('Invalid compression level: ' + level);                                                       // 393
  }                                                                                                                    // 394
  if (strategy != exports.Z_FILTERED &&                                                                                // 395
      strategy != exports.Z_HUFFMAN_ONLY &&                                                                            // 396
      strategy != exports.Z_RLE &&                                                                                     // 397
      strategy != exports.Z_FIXED &&                                                                                   // 398
      strategy != exports.Z_DEFAULT_STRATEGY) {                                                                        // 399
    throw new TypeError('Invalid strategy: ' + strategy);                                                              // 400
  }                                                                                                                    // 401
                                                                                                                       // 402
  if (this._level !== level || this._strategy !== strategy) {                                                          // 403
    var self = this;                                                                                                   // 404
    this.flush(binding.Z_SYNC_FLUSH, function() {                                                                      // 405
      self._binding.params(level, strategy);                                                                           // 406
      if (!self._hadError) {                                                                                           // 407
        self._level = level;                                                                                           // 408
        self._strategy = strategy;                                                                                     // 409
        if (callback) callback();                                                                                      // 410
      }                                                                                                                // 411
    });                                                                                                                // 412
  } else {                                                                                                             // 413
    process.nextTick(callback);                                                                                        // 414
  }                                                                                                                    // 415
};                                                                                                                     // 416
                                                                                                                       // 417
Zlib.prototype.reset = function() {                                                                                    // 418
  return this._binding.reset();                                                                                        // 419
};                                                                                                                     // 420
                                                                                                                       // 421
// This is the _flush function called by the transform class,                                                          // 422
// internally, when the last chunk has been written.                                                                   // 423
Zlib.prototype._flush = function(callback) {                                                                           // 424
  this._transform(new Buffer(0), '', callback);                                                                        // 425
};                                                                                                                     // 426
                                                                                                                       // 427
Zlib.prototype.flush = function(kind, callback) {                                                                      // 428
  var ws = this._writableState;                                                                                        // 429
                                                                                                                       // 430
  if (typeof kind === 'function' || (kind === void 0 && !callback)) {                                                  // 431
    callback = kind;                                                                                                   // 432
    kind = binding.Z_FULL_FLUSH;                                                                                       // 433
  }                                                                                                                    // 434
                                                                                                                       // 435
  if (ws.ended) {                                                                                                      // 436
    if (callback)                                                                                                      // 437
      process.nextTick(callback);                                                                                      // 438
  } else if (ws.ending) {                                                                                              // 439
    if (callback)                                                                                                      // 440
      this.once('end', callback);                                                                                      // 441
  } else if (ws.needDrain) {                                                                                           // 442
    var self = this;                                                                                                   // 443
    this.once('drain', function() {                                                                                    // 444
      self.flush(callback);                                                                                            // 445
    });                                                                                                                // 446
  } else {                                                                                                             // 447
    this._flushFlag = kind;                                                                                            // 448
    this.write(new Buffer(0), '', callback);                                                                           // 449
  }                                                                                                                    // 450
};                                                                                                                     // 451
                                                                                                                       // 452
Zlib.prototype.close = function(callback) {                                                                            // 453
  if (callback)                                                                                                        // 454
    process.nextTick(callback);                                                                                        // 455
                                                                                                                       // 456
  if (this._closed)                                                                                                    // 457
    return;                                                                                                            // 458
                                                                                                                       // 459
  this._closed = true;                                                                                                 // 460
                                                                                                                       // 461
  this._binding.close();                                                                                               // 462
                                                                                                                       // 463
  var self = this;                                                                                                     // 464
  process.nextTick(function() {                                                                                        // 465
    self.emit('close');                                                                                                // 466
  });                                                                                                                  // 467
};                                                                                                                     // 468
                                                                                                                       // 469
Zlib.prototype._transform = function(chunk, encoding, cb) {                                                            // 470
  var flushFlag;                                                                                                       // 471
  var ws = this._writableState;                                                                                        // 472
  var ending = ws.ending || ws.ended;                                                                                  // 473
  var last = ending && (!chunk || ws.length === chunk.length);                                                         // 474
                                                                                                                       // 475
  if (!chunk === null && !Buffer.isBuffer(chunk))                                                                      // 476
    return cb(new Error('invalid input'));                                                                             // 477
                                                                                                                       // 478
  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.                                         // 479
  // If it's explicitly flushing at some other time, then we use                                                       // 480
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression                                                   // 481
  // goodness.                                                                                                         // 482
  if (last)                                                                                                            // 483
    flushFlag = binding.Z_FINISH;                                                                                      // 484
  else {                                                                                                               // 485
    flushFlag = this._flushFlag;                                                                                       // 486
    // once we've flushed the last of the queue, stop flushing and                                                     // 487
    // go back to the normal behavior.                                                                                 // 488
    if (chunk.length >= ws.length) {                                                                                   // 489
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;                                                        // 490
    }                                                                                                                  // 491
  }                                                                                                                    // 492
                                                                                                                       // 493
  var self = this;                                                                                                     // 494
  this._processChunk(chunk, flushFlag, cb);                                                                            // 495
};                                                                                                                     // 496
                                                                                                                       // 497
Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {                                                        // 498
  var availInBefore = chunk && chunk.length;                                                                           // 499
  var availOutBefore = this._chunkSize - this._offset;                                                                 // 500
  var inOff = 0;                                                                                                       // 501
                                                                                                                       // 502
  var self = this;                                                                                                     // 503
                                                                                                                       // 504
  var async = typeof cb === 'function';                                                                                // 505
                                                                                                                       // 506
  if (!async) {                                                                                                        // 507
    var buffers = [];                                                                                                  // 508
    var nread = 0;                                                                                                     // 509
                                                                                                                       // 510
    var error;                                                                                                         // 511
    this.on('error', function(er) {                                                                                    // 512
      error = er;                                                                                                      // 513
    });                                                                                                                // 514
                                                                                                                       // 515
    do {                                                                                                               // 516
      var res = this._binding.writeSync(flushFlag,                                                                     // 517
                                        chunk, // in                                                                   // 518
                                        inOff, // in_off                                                               // 519
                                        availInBefore, // in_len                                                       // 520
                                        this._buffer, // out                                                           // 521
                                        this._offset, //out_off                                                        // 522
                                        availOutBefore); // out_len                                                    // 523
    } while (!this._hadError && callback(res[0], res[1]));                                                             // 524
                                                                                                                       // 525
    if (this._hadError) {                                                                                              // 526
      throw error;                                                                                                     // 527
    }                                                                                                                  // 528
                                                                                                                       // 529
    var buf = Buffer.concat(buffers, nread);                                                                           // 530
    this.close();                                                                                                      // 531
                                                                                                                       // 532
    return buf;                                                                                                        // 533
  }                                                                                                                    // 534
                                                                                                                       // 535
  var req = this._binding.write(flushFlag,                                                                             // 536
                                chunk, // in                                                                           // 537
                                inOff, // in_off                                                                       // 538
                                availInBefore, // in_len                                                               // 539
                                this._buffer, // out                                                                   // 540
                                this._offset, //out_off                                                                // 541
                                availOutBefore); // out_len                                                            // 542
                                                                                                                       // 543
  req.buffer = chunk;                                                                                                  // 544
  req.callback = callback;                                                                                             // 545
                                                                                                                       // 546
  function callback(availInAfter, availOutAfter) {                                                                     // 547
    if (self._hadError)                                                                                                // 548
      return;                                                                                                          // 549
                                                                                                                       // 550
    var have = availOutBefore - availOutAfter;                                                                         // 551
    assert(have >= 0, 'have should not go down');                                                                      // 552
                                                                                                                       // 553
    if (have > 0) {                                                                                                    // 554
      var out = self._buffer.slice(self._offset, self._offset + have);                                                 // 555
      self._offset += have;                                                                                            // 556
      // serve some output to the consumer.                                                                            // 557
      if (async) {                                                                                                     // 558
        self.push(out);                                                                                                // 559
      } else {                                                                                                         // 560
        buffers.push(out);                                                                                             // 561
        nread += out.length;                                                                                           // 562
      }                                                                                                                // 563
    }                                                                                                                  // 564
                                                                                                                       // 565
    // exhausted the output buffer, or used all the input create a new one.                                            // 566
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {                                                      // 567
      availOutBefore = self._chunkSize;                                                                                // 568
      self._offset = 0;                                                                                                // 569
      self._buffer = new Buffer(self._chunkSize);                                                                      // 570
    }                                                                                                                  // 571
                                                                                                                       // 572
    if (availOutAfter === 0) {                                                                                         // 573
      // Not actually done.  Need to reprocess.                                                                        // 574
      // Also, update the availInBefore to the availInAfter value,                                                     // 575
      // so that if we have to hit it a third (fourth, etc.) time,                                                     // 576
      // it'll have the correct byte counts.                                                                           // 577
      inOff += (availInBefore - availInAfter);                                                                         // 578
      availInBefore = availInAfter;                                                                                    // 579
                                                                                                                       // 580
      if (!async)                                                                                                      // 581
        return true;                                                                                                   // 582
                                                                                                                       // 583
      var newReq = self._binding.write(flushFlag,                                                                      // 584
                                       chunk,                                                                          // 585
                                       inOff,                                                                          // 586
                                       availInBefore,                                                                  // 587
                                       self._buffer,                                                                   // 588
                                       self._offset,                                                                   // 589
                                       self._chunkSize);                                                               // 590
      newReq.callback = callback; // this same function                                                                // 591
      newReq.buffer = chunk;                                                                                           // 592
      return;                                                                                                          // 593
    }                                                                                                                  // 594
                                                                                                                       // 595
    if (!async)                                                                                                        // 596
      return false;                                                                                                    // 597
                                                                                                                       // 598
    // finished with the chunk.                                                                                        // 599
    cb();                                                                                                              // 600
  }                                                                                                                    // 601
};                                                                                                                     // 602
                                                                                                                       // 603
util.inherits(Deflate, Zlib);                                                                                          // 604
util.inherits(Inflate, Zlib);                                                                                          // 605
util.inherits(Gzip, Zlib);                                                                                             // 606
util.inherits(Gunzip, Zlib);                                                                                           // 607
util.inherits(DeflateRaw, Zlib);                                                                                       // 608
util.inherits(InflateRaw, Zlib);                                                                                       // 609
util.inherits(Unzip, Zlib);                                                                                            // 610
                                                                                                                       // 611
}).call(this,require('_process'),require("buffer").Buffer)                                                             //
                                                                                                                       //
},{"./binding":15,"_process":25,"_stream_transform":37,"assert":2,"buffer":17,"util":42}],17:[function(require,module,exports){
(function (global){                                                                                                    //
/*!                                                                                                                    // 1
 * The buffer module from node.js, for the browser.                                                                    // 2
 *                                                                                                                     // 3
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4
 * @license  MIT                                                                                                       // 5
 */                                                                                                                    // 6
/* eslint-disable no-proto */                                                                                          // 7
                                                                                                                       // 8
'use strict'                                                                                                           // 9
                                                                                                                       // 10
var base64 = require('base64-js')                                                                                      // 11
var ieee754 = require('ieee754')                                                                                       // 12
var isArray = require('isarray')                                                                                       // 13
                                                                                                                       // 14
exports.Buffer = Buffer                                                                                                // 15
exports.SlowBuffer = SlowBuffer                                                                                        // 16
exports.INSPECT_MAX_BYTES = 50                                                                                         // 17
Buffer.poolSize = 8192 // not used by this implementation                                                              // 18
                                                                                                                       // 19
var rootParent = {}                                                                                                    // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 23
 *   === true    Use Uint8Array implementation (fastest)                                                               // 24
 *   === false   Use Object implementation (most compatible, even IE6)                                                 // 25
 *                                                                                                                     // 26
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 27
 * Opera 11.6+, iOS 4.2+.                                                                                              // 28
 *                                                                                                                     // 29
 * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 30
 * when the browser supports typed arrays.                                                                             // 31
 *                                                                                                                     // 32
 * Note:                                                                                                               // 33
 *                                                                                                                     // 34
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 35
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 36
 *                                                                                                                     // 37
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property                               // 38
 *     on objects.                                                                                                     // 39
 *                                                                                                                     // 40
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 41
 *                                                                                                                     // 42
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 43
 *     incorrect length in some situations.                                                                            // 44
                                                                                                                       // 45
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 46
 * get the Object implementation, which is slower but behaves correctly.                                               // 47
 */                                                                                                                    // 48
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 49
  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 50
  : typedArraySupport()                                                                                                // 51
                                                                                                                       // 52
function typedArraySupport () {                                                                                        // 53
  function Bar () {}                                                                                                   // 54
  try {                                                                                                                // 55
    var arr = new Uint8Array(1)                                                                                        // 56
    arr.foo = function () { return 42 }                                                                                // 57
    arr.constructor = Bar                                                                                              // 58
    return arr.foo() === 42 && // typed array instances can be augmented                                               // 59
        arr.constructor === Bar && // constructor can be set                                                           // 60
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 61
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 62
  } catch (e) {                                                                                                        // 63
    return false                                                                                                       // 64
  }                                                                                                                    // 65
}                                                                                                                      // 66
                                                                                                                       // 67
function kMaxLength () {                                                                                               // 68
  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 69
    ? 0x7fffffff                                                                                                       // 70
    : 0x3fffffff                                                                                                       // 71
}                                                                                                                      // 72
                                                                                                                       // 73
/**                                                                                                                    // 74
 * Class: Buffer                                                                                                       // 75
 * =============                                                                                                       // 76
 *                                                                                                                     // 77
 * The Buffer constructor returns instances of `Uint8Array` that are augmented                                         // 78
 * with function properties for all the node `Buffer` API functions. We use                                            // 79
 * `Uint8Array` so that square bracket notation works as expected -- it returns                                        // 80
 * a single octet.                                                                                                     // 81
 *                                                                                                                     // 82
 * By augmenting the instances, we can avoid modifying the `Uint8Array`                                                // 83
 * prototype.                                                                                                          // 84
 */                                                                                                                    // 85
function Buffer (arg) {                                                                                                // 86
  if (!(this instanceof Buffer)) {                                                                                     // 87
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                           // 88
    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                     // 89
    return new Buffer(arg)                                                                                             // 90
  }                                                                                                                    // 91
                                                                                                                       // 92
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 93
    this.length = 0                                                                                                    // 94
    this.parent = undefined                                                                                            // 95
  }                                                                                                                    // 96
                                                                                                                       // 97
  // Common case.                                                                                                      // 98
  if (typeof arg === 'number') {                                                                                       // 99
    return fromNumber(this, arg)                                                                                       // 100
  }                                                                                                                    // 101
                                                                                                                       // 102
  // Slightly less common case.                                                                                        // 103
  if (typeof arg === 'string') {                                                                                       // 104
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                         // 105
  }                                                                                                                    // 106
                                                                                                                       // 107
  // Unusual.                                                                                                          // 108
  return fromObject(this, arg)                                                                                         // 109
}                                                                                                                      // 110
                                                                                                                       // 111
function fromNumber (that, length) {                                                                                   // 112
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                          // 113
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 114
    for (var i = 0; i < length; i++) {                                                                                 // 115
      that[i] = 0                                                                                                      // 116
    }                                                                                                                  // 117
  }                                                                                                                    // 118
  return that                                                                                                          // 119
}                                                                                                                      // 120
                                                                                                                       // 121
function fromString (that, string, encoding) {                                                                         // 122
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                               // 123
                                                                                                                       // 124
  // Assumption: byteLength() return value is always < kMaxLength.                                                     // 125
  var length = byteLength(string, encoding) | 0                                                                        // 126
  that = allocate(that, length)                                                                                        // 127
                                                                                                                       // 128
  that.write(string, encoding)                                                                                         // 129
  return that                                                                                                          // 130
}                                                                                                                      // 131
                                                                                                                       // 132
function fromObject (that, object) {                                                                                   // 133
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                         // 134
                                                                                                                       // 135
  if (isArray(object)) return fromArray(that, object)                                                                  // 136
                                                                                                                       // 137
  if (object == null) {                                                                                                // 138
    throw new TypeError('must start with number, buffer, array or string')                                             // 139
  }                                                                                                                    // 140
                                                                                                                       // 141
  if (typeof ArrayBuffer !== 'undefined') {                                                                            // 142
    if (object.buffer instanceof ArrayBuffer) {                                                                        // 143
      return fromTypedArray(that, object)                                                                              // 144
    }                                                                                                                  // 145
    if (object instanceof ArrayBuffer) {                                                                               // 146
      return fromArrayBuffer(that, object)                                                                             // 147
    }                                                                                                                  // 148
  }                                                                                                                    // 149
                                                                                                                       // 150
  if (object.length) return fromArrayLike(that, object)                                                                // 151
                                                                                                                       // 152
  return fromJsonObject(that, object)                                                                                  // 153
}                                                                                                                      // 154
                                                                                                                       // 155
function fromBuffer (that, buffer) {                                                                                   // 156
  var length = checked(buffer.length) | 0                                                                              // 157
  that = allocate(that, length)                                                                                        // 158
  buffer.copy(that, 0, 0, length)                                                                                      // 159
  return that                                                                                                          // 160
}                                                                                                                      // 161
                                                                                                                       // 162
function fromArray (that, array) {                                                                                     // 163
  var length = checked(array.length) | 0                                                                               // 164
  that = allocate(that, length)                                                                                        // 165
  for (var i = 0; i < length; i += 1) {                                                                                // 166
    that[i] = array[i] & 255                                                                                           // 167
  }                                                                                                                    // 168
  return that                                                                                                          // 169
}                                                                                                                      // 170
                                                                                                                       // 171
// Duplicate of fromArray() to keep fromArray() monomorphic.                                                           // 172
function fromTypedArray (that, array) {                                                                                // 173
  var length = checked(array.length) | 0                                                                               // 174
  that = allocate(that, length)                                                                                        // 175
  // Truncating the elements is probably not what people expect from typed                                             // 176
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                           // 177
  // of the old Buffer constructor.                                                                                    // 178
  for (var i = 0; i < length; i += 1) {                                                                                // 179
    that[i] = array[i] & 255                                                                                           // 180
  }                                                                                                                    // 181
  return that                                                                                                          // 182
}                                                                                                                      // 183
                                                                                                                       // 184
function fromArrayBuffer (that, array) {                                                                               // 185
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 186
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 187
    array.byteLength                                                                                                   // 188
    that = Buffer._augment(new Uint8Array(array))                                                                      // 189
  } else {                                                                                                             // 190
    // Fallback: Return an object instance of the Buffer class                                                         // 191
    that = fromTypedArray(that, new Uint8Array(array))                                                                 // 192
  }                                                                                                                    // 193
  return that                                                                                                          // 194
}                                                                                                                      // 195
                                                                                                                       // 196
function fromArrayLike (that, array) {                                                                                 // 197
  var length = checked(array.length) | 0                                                                               // 198
  that = allocate(that, length)                                                                                        // 199
  for (var i = 0; i < length; i += 1) {                                                                                // 200
    that[i] = array[i] & 255                                                                                           // 201
  }                                                                                                                    // 202
  return that                                                                                                          // 203
}                                                                                                                      // 204
                                                                                                                       // 205
// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                             // 206
// Returns a zero-length buffer for inputs that don't conform to the spec.                                             // 207
function fromJsonObject (that, object) {                                                                               // 208
  var array                                                                                                            // 209
  var length = 0                                                                                                       // 210
                                                                                                                       // 211
  if (object.type === 'Buffer' && isArray(object.data)) {                                                              // 212
    array = object.data                                                                                                // 213
    length = checked(array.length) | 0                                                                                 // 214
  }                                                                                                                    // 215
  that = allocate(that, length)                                                                                        // 216
                                                                                                                       // 217
  for (var i = 0; i < length; i += 1) {                                                                                // 218
    that[i] = array[i] & 255                                                                                           // 219
  }                                                                                                                    // 220
  return that                                                                                                          // 221
}                                                                                                                      // 222
                                                                                                                       // 223
if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 224
  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 225
  Buffer.__proto__ = Uint8Array                                                                                        // 226
} else {                                                                                                               // 227
  // pre-set for values that may exist in the future                                                                   // 228
  Buffer.prototype.length = undefined                                                                                  // 229
  Buffer.prototype.parent = undefined                                                                                  // 230
}                                                                                                                      // 231
                                                                                                                       // 232
function allocate (that, length) {                                                                                     // 233
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 234
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 235
    that = Buffer._augment(new Uint8Array(length))                                                                     // 236
    that.__proto__ = Buffer.prototype                                                                                  // 237
  } else {                                                                                                             // 238
    // Fallback: Return an object instance of the Buffer class                                                         // 239
    that.length = length                                                                                               // 240
    that._isBuffer = true                                                                                              // 241
  }                                                                                                                    // 242
                                                                                                                       // 243
  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                       // 244
  if (fromPool) that.parent = rootParent                                                                               // 245
                                                                                                                       // 246
  return that                                                                                                          // 247
}                                                                                                                      // 248
                                                                                                                       // 249
function checked (length) {                                                                                            // 250
  // Note: cannot use `length < kMaxLength` here because that fails when                                               // 251
  // length is NaN (which is otherwise coerced to zero.)                                                               // 252
  if (length >= kMaxLength()) {                                                                                        // 253
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 254
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 255
  }                                                                                                                    // 256
  return length | 0                                                                                                    // 257
}                                                                                                                      // 258
                                                                                                                       // 259
function SlowBuffer (subject, encoding) {                                                                              // 260
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                          // 261
                                                                                                                       // 262
  var buf = new Buffer(subject, encoding)                                                                              // 263
  delete buf.parent                                                                                                    // 264
  return buf                                                                                                           // 265
}                                                                                                                      // 266
                                                                                                                       // 267
Buffer.isBuffer = function isBuffer (b) {                                                                              // 268
  return !!(b != null && b._isBuffer)                                                                                  // 269
}                                                                                                                      // 270
                                                                                                                       // 271
Buffer.compare = function compare (a, b) {                                                                             // 272
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 273
    throw new TypeError('Arguments must be Buffers')                                                                   // 274
  }                                                                                                                    // 275
                                                                                                                       // 276
  if (a === b) return 0                                                                                                // 277
                                                                                                                       // 278
  var x = a.length                                                                                                     // 279
  var y = b.length                                                                                                     // 280
                                                                                                                       // 281
  var i = 0                                                                                                            // 282
  var len = Math.min(x, y)                                                                                             // 283
  while (i < len) {                                                                                                    // 284
    if (a[i] !== b[i]) break                                                                                           // 285
                                                                                                                       // 286
    ++i                                                                                                                // 287
  }                                                                                                                    // 288
                                                                                                                       // 289
  if (i !== len) {                                                                                                     // 290
    x = a[i]                                                                                                           // 291
    y = b[i]                                                                                                           // 292
  }                                                                                                                    // 293
                                                                                                                       // 294
  if (x < y) return -1                                                                                                 // 295
  if (y < x) return 1                                                                                                  // 296
  return 0                                                                                                             // 297
}                                                                                                                      // 298
                                                                                                                       // 299
Buffer.isEncoding = function isEncoding (encoding) {                                                                   // 300
  switch (String(encoding).toLowerCase()) {                                                                            // 301
    case 'hex':                                                                                                        // 302
    case 'utf8':                                                                                                       // 303
    case 'utf-8':                                                                                                      // 304
    case 'ascii':                                                                                                      // 305
    case 'binary':                                                                                                     // 306
    case 'base64':                                                                                                     // 307
    case 'raw':                                                                                                        // 308
    case 'ucs2':                                                                                                       // 309
    case 'ucs-2':                                                                                                      // 310
    case 'utf16le':                                                                                                    // 311
    case 'utf-16le':                                                                                                   // 312
      return true                                                                                                      // 313
    default:                                                                                                           // 314
      return false                                                                                                     // 315
  }                                                                                                                    // 316
}                                                                                                                      // 317
                                                                                                                       // 318
Buffer.concat = function concat (list, length) {                                                                       // 319
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                                // 320
                                                                                                                       // 321
  if (list.length === 0) {                                                                                             // 322
    return new Buffer(0)                                                                                               // 323
  }                                                                                                                    // 324
                                                                                                                       // 325
  var i                                                                                                                // 326
  if (length === undefined) {                                                                                          // 327
    length = 0                                                                                                         // 328
    for (i = 0; i < list.length; i++) {                                                                                // 329
      length += list[i].length                                                                                         // 330
    }                                                                                                                  // 331
  }                                                                                                                    // 332
                                                                                                                       // 333
  var buf = new Buffer(length)                                                                                         // 334
  var pos = 0                                                                                                          // 335
  for (i = 0; i < list.length; i++) {                                                                                  // 336
    var item = list[i]                                                                                                 // 337
    item.copy(buf, pos)                                                                                                // 338
    pos += item.length                                                                                                 // 339
  }                                                                                                                    // 340
  return buf                                                                                                           // 341
}                                                                                                                      // 342
                                                                                                                       // 343
function byteLength (string, encoding) {                                                                               // 344
  if (typeof string !== 'string') string = '' + string                                                                 // 345
                                                                                                                       // 346
  var len = string.length                                                                                              // 347
  if (len === 0) return 0                                                                                              // 348
                                                                                                                       // 349
  // Use a for loop to avoid recursion                                                                                 // 350
  var loweredCase = false                                                                                              // 351
  for (;;) {                                                                                                           // 352
    switch (encoding) {                                                                                                // 353
      case 'ascii':                                                                                                    // 354
      case 'binary':                                                                                                   // 355
      // Deprecated                                                                                                    // 356
      case 'raw':                                                                                                      // 357
      case 'raws':                                                                                                     // 358
        return len                                                                                                     // 359
      case 'utf8':                                                                                                     // 360
      case 'utf-8':                                                                                                    // 361
        return utf8ToBytes(string).length                                                                              // 362
      case 'ucs2':                                                                                                     // 363
      case 'ucs-2':                                                                                                    // 364
      case 'utf16le':                                                                                                  // 365
      case 'utf-16le':                                                                                                 // 366
        return len * 2                                                                                                 // 367
      case 'hex':                                                                                                      // 368
        return len >>> 1                                                                                               // 369
      case 'base64':                                                                                                   // 370
        return base64ToBytes(string).length                                                                            // 371
      default:                                                                                                         // 372
        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 373
        encoding = ('' + encoding).toLowerCase()                                                                       // 374
        loweredCase = true                                                                                             // 375
    }                                                                                                                  // 376
  }                                                                                                                    // 377
}                                                                                                                      // 378
Buffer.byteLength = byteLength                                                                                         // 379
                                                                                                                       // 380
function slowToString (encoding, start, end) {                                                                         // 381
  var loweredCase = false                                                                                              // 382
                                                                                                                       // 383
  start = start | 0                                                                                                    // 384
  end = end === undefined || end === Infinity ? this.length : end | 0                                                  // 385
                                                                                                                       // 386
  if (!encoding) encoding = 'utf8'                                                                                     // 387
  if (start < 0) start = 0                                                                                             // 388
  if (end > this.length) end = this.length                                                                             // 389
  if (end <= start) return ''                                                                                          // 390
                                                                                                                       // 391
  while (true) {                                                                                                       // 392
    switch (encoding) {                                                                                                // 393
      case 'hex':                                                                                                      // 394
        return hexSlice(this, start, end)                                                                              // 395
                                                                                                                       // 396
      case 'utf8':                                                                                                     // 397
      case 'utf-8':                                                                                                    // 398
        return utf8Slice(this, start, end)                                                                             // 399
                                                                                                                       // 400
      case 'ascii':                                                                                                    // 401
        return asciiSlice(this, start, end)                                                                            // 402
                                                                                                                       // 403
      case 'binary':                                                                                                   // 404
        return binarySlice(this, start, end)                                                                           // 405
                                                                                                                       // 406
      case 'base64':                                                                                                   // 407
        return base64Slice(this, start, end)                                                                           // 408
                                                                                                                       // 409
      case 'ucs2':                                                                                                     // 410
      case 'ucs-2':                                                                                                    // 411
      case 'utf16le':                                                                                                  // 412
      case 'utf-16le':                                                                                                 // 413
        return utf16leSlice(this, start, end)                                                                          // 414
                                                                                                                       // 415
      default:                                                                                                         // 416
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 417
        encoding = (encoding + '').toLowerCase()                                                                       // 418
        loweredCase = true                                                                                             // 419
    }                                                                                                                  // 420
  }                                                                                                                    // 421
}                                                                                                                      // 422
                                                                                                                       // 423
Buffer.prototype.toString = function toString () {                                                                     // 424
  var length = this.length | 0                                                                                         // 425
  if (length === 0) return ''                                                                                          // 426
  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 427
  return slowToString.apply(this, arguments)                                                                           // 428
}                                                                                                                      // 429
                                                                                                                       // 430
Buffer.prototype.equals = function equals (b) {                                                                        // 431
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 432
  if (this === b) return true                                                                                          // 433
  return Buffer.compare(this, b) === 0                                                                                 // 434
}                                                                                                                      // 435
                                                                                                                       // 436
Buffer.prototype.inspect = function inspect () {                                                                       // 437
  var str = ''                                                                                                         // 438
  var max = exports.INSPECT_MAX_BYTES                                                                                  // 439
  if (this.length > 0) {                                                                                               // 440
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 441
    if (this.length > max) str += ' ... '                                                                              // 442
  }                                                                                                                    // 443
  return '<Buffer ' + str + '>'                                                                                        // 444
}                                                                                                                      // 445
                                                                                                                       // 446
Buffer.prototype.compare = function compare (b) {                                                                      // 447
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 448
  if (this === b) return 0                                                                                             // 449
  return Buffer.compare(this, b)                                                                                       // 450
}                                                                                                                      // 451
                                                                                                                       // 452
Buffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                        // 453
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                                 // 454
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                          // 455
  byteOffset >>= 0                                                                                                     // 456
                                                                                                                       // 457
  if (this.length === 0) return -1                                                                                     // 458
  if (byteOffset >= this.length) return -1                                                                             // 459
                                                                                                                       // 460
  // Negative offsets start from the end of the buffer                                                                 // 461
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                               // 462
                                                                                                                       // 463
  if (typeof val === 'string') {                                                                                       // 464
    if (val.length === 0) return -1 // special case: looking for empty string always fails                             // 465
    return String.prototype.indexOf.call(this, val, byteOffset)                                                        // 466
  }                                                                                                                    // 467
  if (Buffer.isBuffer(val)) {                                                                                          // 468
    return arrayIndexOf(this, val, byteOffset)                                                                         // 469
  }                                                                                                                    // 470
  if (typeof val === 'number') {                                                                                       // 471
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                   // 472
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                                  // 473
    }                                                                                                                  // 474
    return arrayIndexOf(this, [ val ], byteOffset)                                                                     // 475
  }                                                                                                                    // 476
                                                                                                                       // 477
  function arrayIndexOf (arr, val, byteOffset) {                                                                       // 478
    var foundIndex = -1                                                                                                // 479
    for (var i = 0; byteOffset + i < arr.length; i++) {                                                                // 480
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                       // 481
        if (foundIndex === -1) foundIndex = i                                                                          // 482
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                          // 483
      } else {                                                                                                         // 484
        foundIndex = -1                                                                                                // 485
      }                                                                                                                // 486
    }                                                                                                                  // 487
    return -1                                                                                                          // 488
  }                                                                                                                    // 489
                                                                                                                       // 490
  throw new TypeError('val must be string, number or Buffer')                                                          // 491
}                                                                                                                      // 492
                                                                                                                       // 493
// `get` is deprecated                                                                                                 // 494
Buffer.prototype.get = function get (offset) {                                                                         // 495
  console.log('.get() is deprecated. Access using array indexes instead.')                                             // 496
  return this.readUInt8(offset)                                                                                        // 497
}                                                                                                                      // 498
                                                                                                                       // 499
// `set` is deprecated                                                                                                 // 500
Buffer.prototype.set = function set (v, offset) {                                                                      // 501
  console.log('.set() is deprecated. Access using array indexes instead.')                                             // 502
  return this.writeUInt8(v, offset)                                                                                    // 503
}                                                                                                                      // 504
                                                                                                                       // 505
function hexWrite (buf, string, offset, length) {                                                                      // 506
  offset = Number(offset) || 0                                                                                         // 507
  var remaining = buf.length - offset                                                                                  // 508
  if (!length) {                                                                                                       // 509
    length = remaining                                                                                                 // 510
  } else {                                                                                                             // 511
    length = Number(length)                                                                                            // 512
    if (length > remaining) {                                                                                          // 513
      length = remaining                                                                                               // 514
    }                                                                                                                  // 515
  }                                                                                                                    // 516
                                                                                                                       // 517
  // must be an even number of digits                                                                                  // 518
  var strLen = string.length                                                                                           // 519
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                          // 520
                                                                                                                       // 521
  if (length > strLen / 2) {                                                                                           // 522
    length = strLen / 2                                                                                                // 523
  }                                                                                                                    // 524
  for (var i = 0; i < length; i++) {                                                                                   // 525
    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 526
    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                           // 527
    buf[offset + i] = parsed                                                                                           // 528
  }                                                                                                                    // 529
  return i                                                                                                             // 530
}                                                                                                                      // 531
                                                                                                                       // 532
function utf8Write (buf, string, offset, length) {                                                                     // 533
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 534
}                                                                                                                      // 535
                                                                                                                       // 536
function asciiWrite (buf, string, offset, length) {                                                                    // 537
  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 538
}                                                                                                                      // 539
                                                                                                                       // 540
function binaryWrite (buf, string, offset, length) {                                                                   // 541
  return asciiWrite(buf, string, offset, length)                                                                       // 542
}                                                                                                                      // 543
                                                                                                                       // 544
function base64Write (buf, string, offset, length) {                                                                   // 545
  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 546
}                                                                                                                      // 547
                                                                                                                       // 548
function ucs2Write (buf, string, offset, length) {                                                                     // 549
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 550
}                                                                                                                      // 551
                                                                                                                       // 552
Buffer.prototype.write = function write (string, offset, length, encoding) {                                           // 553
  // Buffer#write(string)                                                                                              // 554
  if (offset === undefined) {                                                                                          // 555
    encoding = 'utf8'                                                                                                  // 556
    length = this.length                                                                                               // 557
    offset = 0                                                                                                         // 558
  // Buffer#write(string, encoding)                                                                                    // 559
  } else if (length === undefined && typeof offset === 'string') {                                                     // 560
    encoding = offset                                                                                                  // 561
    length = this.length                                                                                               // 562
    offset = 0                                                                                                         // 563
  // Buffer#write(string, offset[, length][, encoding])                                                                // 564
  } else if (isFinite(offset)) {                                                                                       // 565
    offset = offset | 0                                                                                                // 566
    if (isFinite(length)) {                                                                                            // 567
      length = length | 0                                                                                              // 568
      if (encoding === undefined) encoding = 'utf8'                                                                    // 569
    } else {                                                                                                           // 570
      encoding = length                                                                                                // 571
      length = undefined                                                                                               // 572
    }                                                                                                                  // 573
  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 574
  } else {                                                                                                             // 575
    var swap = encoding                                                                                                // 576
    encoding = offset                                                                                                  // 577
    offset = length | 0                                                                                                // 578
    length = swap                                                                                                      // 579
  }                                                                                                                    // 580
                                                                                                                       // 581
  var remaining = this.length - offset                                                                                 // 582
  if (length === undefined || length > remaining) length = remaining                                                   // 583
                                                                                                                       // 584
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 585
    throw new RangeError('attempt to write outside buffer bounds')                                                     // 586
  }                                                                                                                    // 587
                                                                                                                       // 588
  if (!encoding) encoding = 'utf8'                                                                                     // 589
                                                                                                                       // 590
  var loweredCase = false                                                                                              // 591
  for (;;) {                                                                                                           // 592
    switch (encoding) {                                                                                                // 593
      case 'hex':                                                                                                      // 594
        return hexWrite(this, string, offset, length)                                                                  // 595
                                                                                                                       // 596
      case 'utf8':                                                                                                     // 597
      case 'utf-8':                                                                                                    // 598
        return utf8Write(this, string, offset, length)                                                                 // 599
                                                                                                                       // 600
      case 'ascii':                                                                                                    // 601
        return asciiWrite(this, string, offset, length)                                                                // 602
                                                                                                                       // 603
      case 'binary':                                                                                                   // 604
        return binaryWrite(this, string, offset, length)                                                               // 605
                                                                                                                       // 606
      case 'base64':                                                                                                   // 607
        // Warning: maxLength not taken into account in base64Write                                                    // 608
        return base64Write(this, string, offset, length)                                                               // 609
                                                                                                                       // 610
      case 'ucs2':                                                                                                     // 611
      case 'ucs-2':                                                                                                    // 612
      case 'utf16le':                                                                                                  // 613
      case 'utf-16le':                                                                                                 // 614
        return ucs2Write(this, string, offset, length)                                                                 // 615
                                                                                                                       // 616
      default:                                                                                                         // 617
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 618
        encoding = ('' + encoding).toLowerCase()                                                                       // 619
        loweredCase = true                                                                                             // 620
    }                                                                                                                  // 621
  }                                                                                                                    // 622
}                                                                                                                      // 623
                                                                                                                       // 624
Buffer.prototype.toJSON = function toJSON () {                                                                         // 625
  return {                                                                                                             // 626
    type: 'Buffer',                                                                                                    // 627
    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 628
  }                                                                                                                    // 629
}                                                                                                                      // 630
                                                                                                                       // 631
function base64Slice (buf, start, end) {                                                                               // 632
  if (start === 0 && end === buf.length) {                                                                             // 633
    return base64.fromByteArray(buf)                                                                                   // 634
  } else {                                                                                                             // 635
    return base64.fromByteArray(buf.slice(start, end))                                                                 // 636
  }                                                                                                                    // 637
}                                                                                                                      // 638
                                                                                                                       // 639
function utf8Slice (buf, start, end) {                                                                                 // 640
  end = Math.min(buf.length, end)                                                                                      // 641
  var res = []                                                                                                         // 642
                                                                                                                       // 643
  var i = start                                                                                                        // 644
  while (i < end) {                                                                                                    // 645
    var firstByte = buf[i]                                                                                             // 646
    var codePoint = null                                                                                               // 647
    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 648
      : (firstByte > 0xDF) ? 3                                                                                         // 649
      : (firstByte > 0xBF) ? 2                                                                                         // 650
      : 1                                                                                                              // 651
                                                                                                                       // 652
    if (i + bytesPerSequence <= end) {                                                                                 // 653
      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 654
                                                                                                                       // 655
      switch (bytesPerSequence) {                                                                                      // 656
        case 1:                                                                                                        // 657
          if (firstByte < 0x80) {                                                                                      // 658
            codePoint = firstByte                                                                                      // 659
          }                                                                                                            // 660
          break                                                                                                        // 661
        case 2:                                                                                                        // 662
          secondByte = buf[i + 1]                                                                                      // 663
          if ((secondByte & 0xC0) === 0x80) {                                                                          // 664
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 665
            if (tempCodePoint > 0x7F) {                                                                                // 666
              codePoint = tempCodePoint                                                                                // 667
            }                                                                                                          // 668
          }                                                                                                            // 669
          break                                                                                                        // 670
        case 3:                                                                                                        // 671
          secondByte = buf[i + 1]                                                                                      // 672
          thirdByte = buf[i + 2]                                                                                       // 673
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 674
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 675
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 676
              codePoint = tempCodePoint                                                                                // 677
            }                                                                                                          // 678
          }                                                                                                            // 679
          break                                                                                                        // 680
        case 4:                                                                                                        // 681
          secondByte = buf[i + 1]                                                                                      // 682
          thirdByte = buf[i + 2]                                                                                       // 683
          fourthByte = buf[i + 3]                                                                                      // 684
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 685
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 687
              codePoint = tempCodePoint                                                                                // 688
            }                                                                                                          // 689
          }                                                                                                            // 690
      }                                                                                                                // 691
    }                                                                                                                  // 692
                                                                                                                       // 693
    if (codePoint === null) {                                                                                          // 694
      // we did not generate a valid codePoint so insert a                                                             // 695
      // replacement char (U+FFFD) and advance only 1 byte                                                             // 696
      codePoint = 0xFFFD                                                                                               // 697
      bytesPerSequence = 1                                                                                             // 698
    } else if (codePoint > 0xFFFF) {                                                                                   // 699
      // encode to utf16 (surrogate pair dance)                                                                        // 700
      codePoint -= 0x10000                                                                                             // 701
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 702
      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 703
    }                                                                                                                  // 704
                                                                                                                       // 705
    res.push(codePoint)                                                                                                // 706
    i += bytesPerSequence                                                                                              // 707
  }                                                                                                                    // 708
                                                                                                                       // 709
  return decodeCodePointsArray(res)                                                                                    // 710
}                                                                                                                      // 711
                                                                                                                       // 712
// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 713
// the lowest limit is Chrome, with 0x10000 args.                                                                      // 714
// We go 1 magnitude less, for safety                                                                                  // 715
var MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 716
                                                                                                                       // 717
function decodeCodePointsArray (codePoints) {                                                                          // 718
  var len = codePoints.length                                                                                          // 719
  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 720
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 721
  }                                                                                                                    // 722
                                                                                                                       // 723
  // Decode in chunks to avoid "call stack size exceeded".                                                             // 724
  var res = ''                                                                                                         // 725
  var i = 0                                                                                                            // 726
  while (i < len) {                                                                                                    // 727
    res += String.fromCharCode.apply(                                                                                  // 728
      String,                                                                                                          // 729
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 730
    )                                                                                                                  // 731
  }                                                                                                                    // 732
  return res                                                                                                           // 733
}                                                                                                                      // 734
                                                                                                                       // 735
function asciiSlice (buf, start, end) {                                                                                // 736
  var ret = ''                                                                                                         // 737
  end = Math.min(buf.length, end)                                                                                      // 738
                                                                                                                       // 739
  for (var i = start; i < end; i++) {                                                                                  // 740
    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 741
  }                                                                                                                    // 742
  return ret                                                                                                           // 743
}                                                                                                                      // 744
                                                                                                                       // 745
function binarySlice (buf, start, end) {                                                                               // 746
  var ret = ''                                                                                                         // 747
  end = Math.min(buf.length, end)                                                                                      // 748
                                                                                                                       // 749
  for (var i = start; i < end; i++) {                                                                                  // 750
    ret += String.fromCharCode(buf[i])                                                                                 // 751
  }                                                                                                                    // 752
  return ret                                                                                                           // 753
}                                                                                                                      // 754
                                                                                                                       // 755
function hexSlice (buf, start, end) {                                                                                  // 756
  var len = buf.length                                                                                                 // 757
                                                                                                                       // 758
  if (!start || start < 0) start = 0                                                                                   // 759
  if (!end || end < 0 || end > len) end = len                                                                          // 760
                                                                                                                       // 761
  var out = ''                                                                                                         // 762
  for (var i = start; i < end; i++) {                                                                                  // 763
    out += toHex(buf[i])                                                                                               // 764
  }                                                                                                                    // 765
  return out                                                                                                           // 766
}                                                                                                                      // 767
                                                                                                                       // 768
function utf16leSlice (buf, start, end) {                                                                              // 769
  var bytes = buf.slice(start, end)                                                                                    // 770
  var res = ''                                                                                                         // 771
  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 772
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 773
  }                                                                                                                    // 774
  return res                                                                                                           // 775
}                                                                                                                      // 776
                                                                                                                       // 777
Buffer.prototype.slice = function slice (start, end) {                                                                 // 778
  var len = this.length                                                                                                // 779
  start = ~~start                                                                                                      // 780
  end = end === undefined ? len : ~~end                                                                                // 781
                                                                                                                       // 782
  if (start < 0) {                                                                                                     // 783
    start += len                                                                                                       // 784
    if (start < 0) start = 0                                                                                           // 785
  } else if (start > len) {                                                                                            // 786
    start = len                                                                                                        // 787
  }                                                                                                                    // 788
                                                                                                                       // 789
  if (end < 0) {                                                                                                       // 790
    end += len                                                                                                         // 791
    if (end < 0) end = 0                                                                                               // 792
  } else if (end > len) {                                                                                              // 793
    end = len                                                                                                          // 794
  }                                                                                                                    // 795
                                                                                                                       // 796
  if (end < start) end = start                                                                                         // 797
                                                                                                                       // 798
  var newBuf                                                                                                           // 799
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 800
    newBuf = Buffer._augment(this.subarray(start, end))                                                                // 801
  } else {                                                                                                             // 802
    var sliceLen = end - start                                                                                         // 803
    newBuf = new Buffer(sliceLen, undefined)                                                                           // 804
    for (var i = 0; i < sliceLen; i++) {                                                                               // 805
      newBuf[i] = this[i + start]                                                                                      // 806
    }                                                                                                                  // 807
  }                                                                                                                    // 808
                                                                                                                       // 809
  if (newBuf.length) newBuf.parent = this.parent || this                                                               // 810
                                                                                                                       // 811
  return newBuf                                                                                                        // 812
}                                                                                                                      // 813
                                                                                                                       // 814
/*                                                                                                                     // 815
 * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 816
 */                                                                                                                    // 817
function checkOffset (offset, ext, length) {                                                                           // 818
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 819
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 820
}                                                                                                                      // 821
                                                                                                                       // 822
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 823
  offset = offset | 0                                                                                                  // 824
  byteLength = byteLength | 0                                                                                          // 825
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 826
                                                                                                                       // 827
  var val = this[offset]                                                                                               // 828
  var mul = 1                                                                                                          // 829
  var i = 0                                                                                                            // 830
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 831
    val += this[offset + i] * mul                                                                                      // 832
  }                                                                                                                    // 833
                                                                                                                       // 834
  return val                                                                                                           // 835
}                                                                                                                      // 836
                                                                                                                       // 837
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 838
  offset = offset | 0                                                                                                  // 839
  byteLength = byteLength | 0                                                                                          // 840
  if (!noAssert) {                                                                                                     // 841
    checkOffset(offset, byteLength, this.length)                                                                       // 842
  }                                                                                                                    // 843
                                                                                                                       // 844
  var val = this[offset + --byteLength]                                                                                // 845
  var mul = 1                                                                                                          // 846
  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 847
    val += this[offset + --byteLength] * mul                                                                           // 848
  }                                                                                                                    // 849
                                                                                                                       // 850
  return val                                                                                                           // 851
}                                                                                                                      // 852
                                                                                                                       // 853
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 854
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 855
  return this[offset]                                                                                                  // 856
}                                                                                                                      // 857
                                                                                                                       // 858
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 859
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 860
  return this[offset] | (this[offset + 1] << 8)                                                                        // 861
}                                                                                                                      // 862
                                                                                                                       // 863
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 864
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 865
  return (this[offset] << 8) | this[offset + 1]                                                                        // 866
}                                                                                                                      // 867
                                                                                                                       // 868
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 869
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 870
                                                                                                                       // 871
  return ((this[offset]) |                                                                                             // 872
      (this[offset + 1] << 8) |                                                                                        // 873
      (this[offset + 2] << 16)) +                                                                                      // 874
      (this[offset + 3] * 0x1000000)                                                                                   // 875
}                                                                                                                      // 876
                                                                                                                       // 877
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 878
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 879
                                                                                                                       // 880
  return (this[offset] * 0x1000000) +                                                                                  // 881
    ((this[offset + 1] << 16) |                                                                                        // 882
    (this[offset + 2] << 8) |                                                                                          // 883
    this[offset + 3])                                                                                                  // 884
}                                                                                                                      // 885
                                                                                                                       // 886
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 887
  offset = offset | 0                                                                                                  // 888
  byteLength = byteLength | 0                                                                                          // 889
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 890
                                                                                                                       // 891
  var val = this[offset]                                                                                               // 892
  var mul = 1                                                                                                          // 893
  var i = 0                                                                                                            // 894
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 895
    val += this[offset + i] * mul                                                                                      // 896
  }                                                                                                                    // 897
  mul *= 0x80                                                                                                          // 898
                                                                                                                       // 899
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 900
                                                                                                                       // 901
  return val                                                                                                           // 902
}                                                                                                                      // 903
                                                                                                                       // 904
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 905
  offset = offset | 0                                                                                                  // 906
  byteLength = byteLength | 0                                                                                          // 907
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 908
                                                                                                                       // 909
  var i = byteLength                                                                                                   // 910
  var mul = 1                                                                                                          // 911
  var val = this[offset + --i]                                                                                         // 912
  while (i > 0 && (mul *= 0x100)) {                                                                                    // 913
    val += this[offset + --i] * mul                                                                                    // 914
  }                                                                                                                    // 915
  mul *= 0x80                                                                                                          // 916
                                                                                                                       // 917
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 918
                                                                                                                       // 919
  return val                                                                                                           // 920
}                                                                                                                      // 921
                                                                                                                       // 922
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 923
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 924
  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 925
  return ((0xff - this[offset] + 1) * -1)                                                                              // 926
}                                                                                                                      // 927
                                                                                                                       // 928
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 929
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 930
  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 931
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 932
}                                                                                                                      // 933
                                                                                                                       // 934
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 935
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 936
  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 937
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 938
}                                                                                                                      // 939
                                                                                                                       // 940
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 941
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 942
                                                                                                                       // 943
  return (this[offset]) |                                                                                              // 944
    (this[offset + 1] << 8) |                                                                                          // 945
    (this[offset + 2] << 16) |                                                                                         // 946
    (this[offset + 3] << 24)                                                                                           // 947
}                                                                                                                      // 948
                                                                                                                       // 949
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 950
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 951
                                                                                                                       // 952
  return (this[offset] << 24) |                                                                                        // 953
    (this[offset + 1] << 16) |                                                                                         // 954
    (this[offset + 2] << 8) |                                                                                          // 955
    (this[offset + 3])                                                                                                 // 956
}                                                                                                                      // 957
                                                                                                                       // 958
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 959
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 960
  return ieee754.read(this, offset, true, 23, 4)                                                                       // 961
}                                                                                                                      // 962
                                                                                                                       // 963
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 964
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 965
  return ieee754.read(this, offset, false, 23, 4)                                                                      // 966
}                                                                                                                      // 967
                                                                                                                       // 968
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 969
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 970
  return ieee754.read(this, offset, true, 52, 8)                                                                       // 971
}                                                                                                                      // 972
                                                                                                                       // 973
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 974
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 975
  return ieee754.read(this, offset, false, 52, 8)                                                                      // 976
}                                                                                                                      // 977
                                                                                                                       // 978
function checkInt (buf, value, offset, ext, max, min) {                                                                // 979
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                   // 980
  if (value > max || value < min) throw new RangeError('value is out of bounds')                                       // 981
  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 982
}                                                                                                                      // 983
                                                                                                                       // 984
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 985
  value = +value                                                                                                       // 986
  offset = offset | 0                                                                                                  // 987
  byteLength = byteLength | 0                                                                                          // 988
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 989
                                                                                                                       // 990
  var mul = 1                                                                                                          // 991
  var i = 0                                                                                                            // 992
  this[offset] = value & 0xFF                                                                                          // 993
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 994
    this[offset + i] = (value / mul) & 0xFF                                                                            // 995
  }                                                                                                                    // 996
                                                                                                                       // 997
  return offset + byteLength                                                                                           // 998
}                                                                                                                      // 999
                                                                                                                       // 1000
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 1001
  value = +value                                                                                                       // 1002
  offset = offset | 0                                                                                                  // 1003
  byteLength = byteLength | 0                                                                                          // 1004
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 1005
                                                                                                                       // 1006
  var i = byteLength - 1                                                                                               // 1007
  var mul = 1                                                                                                          // 1008
  this[offset + i] = value & 0xFF                                                                                      // 1009
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1010
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1011
  }                                                                                                                    // 1012
                                                                                                                       // 1013
  return offset + byteLength                                                                                           // 1014
}                                                                                                                      // 1015
                                                                                                                       // 1016
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1017
  value = +value                                                                                                       // 1018
  offset = offset | 0                                                                                                  // 1019
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1020
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1021
  this[offset] = (value & 0xff)                                                                                        // 1022
  return offset + 1                                                                                                    // 1023
}                                                                                                                      // 1024
                                                                                                                       // 1025
function objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1026
  if (value < 0) value = 0xffff + value + 1                                                                            // 1027
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                                  // 1028
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1029
      (littleEndian ? i : 1 - i) * 8                                                                                   // 1030
  }                                                                                                                    // 1031
}                                                                                                                      // 1032
                                                                                                                       // 1033
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1034
  value = +value                                                                                                       // 1035
  offset = offset | 0                                                                                                  // 1036
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1037
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1038
    this[offset] = (value & 0xff)                                                                                      // 1039
    this[offset + 1] = (value >>> 8)                                                                                   // 1040
  } else {                                                                                                             // 1041
    objectWriteUInt16(this, value, offset, true)                                                                       // 1042
  }                                                                                                                    // 1043
  return offset + 2                                                                                                    // 1044
}                                                                                                                      // 1045
                                                                                                                       // 1046
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1047
  value = +value                                                                                                       // 1048
  offset = offset | 0                                                                                                  // 1049
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1050
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1051
    this[offset] = (value >>> 8)                                                                                       // 1052
    this[offset + 1] = (value & 0xff)                                                                                  // 1053
  } else {                                                                                                             // 1054
    objectWriteUInt16(this, value, offset, false)                                                                      // 1055
  }                                                                                                                    // 1056
  return offset + 2                                                                                                    // 1057
}                                                                                                                      // 1058
                                                                                                                       // 1059
function objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1060
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1061
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                                  // 1062
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1063
  }                                                                                                                    // 1064
}                                                                                                                      // 1065
                                                                                                                       // 1066
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1067
  value = +value                                                                                                       // 1068
  offset = offset | 0                                                                                                  // 1069
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1070
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1071
    this[offset + 3] = (value >>> 24)                                                                                  // 1072
    this[offset + 2] = (value >>> 16)                                                                                  // 1073
    this[offset + 1] = (value >>> 8)                                                                                   // 1074
    this[offset] = (value & 0xff)                                                                                      // 1075
  } else {                                                                                                             // 1076
    objectWriteUInt32(this, value, offset, true)                                                                       // 1077
  }                                                                                                                    // 1078
  return offset + 4                                                                                                    // 1079
}                                                                                                                      // 1080
                                                                                                                       // 1081
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1082
  value = +value                                                                                                       // 1083
  offset = offset | 0                                                                                                  // 1084
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1085
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1086
    this[offset] = (value >>> 24)                                                                                      // 1087
    this[offset + 1] = (value >>> 16)                                                                                  // 1088
    this[offset + 2] = (value >>> 8)                                                                                   // 1089
    this[offset + 3] = (value & 0xff)                                                                                  // 1090
  } else {                                                                                                             // 1091
    objectWriteUInt32(this, value, offset, false)                                                                      // 1092
  }                                                                                                                    // 1093
  return offset + 4                                                                                                    // 1094
}                                                                                                                      // 1095
                                                                                                                       // 1096
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1097
  value = +value                                                                                                       // 1098
  offset = offset | 0                                                                                                  // 1099
  if (!noAssert) {                                                                                                     // 1100
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1101
                                                                                                                       // 1102
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1103
  }                                                                                                                    // 1104
                                                                                                                       // 1105
  var i = 0                                                                                                            // 1106
  var mul = 1                                                                                                          // 1107
  var sub = value < 0 ? 1 : 0                                                                                          // 1108
  this[offset] = value & 0xFF                                                                                          // 1109
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1110
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1111
  }                                                                                                                    // 1112
                                                                                                                       // 1113
  return offset + byteLength                                                                                           // 1114
}                                                                                                                      // 1115
                                                                                                                       // 1116
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1117
  value = +value                                                                                                       // 1118
  offset = offset | 0                                                                                                  // 1119
  if (!noAssert) {                                                                                                     // 1120
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1121
                                                                                                                       // 1122
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1123
  }                                                                                                                    // 1124
                                                                                                                       // 1125
  var i = byteLength - 1                                                                                               // 1126
  var mul = 1                                                                                                          // 1127
  var sub = value < 0 ? 1 : 0                                                                                          // 1128
  this[offset + i] = value & 0xFF                                                                                      // 1129
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1130
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1131
  }                                                                                                                    // 1132
                                                                                                                       // 1133
  return offset + byteLength                                                                                           // 1134
}                                                                                                                      // 1135
                                                                                                                       // 1136
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1137
  value = +value                                                                                                       // 1138
  offset = offset | 0                                                                                                  // 1139
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1140
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1141
  if (value < 0) value = 0xff + value + 1                                                                              // 1142
  this[offset] = (value & 0xff)                                                                                        // 1143
  return offset + 1                                                                                                    // 1144
}                                                                                                                      // 1145
                                                                                                                       // 1146
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1147
  value = +value                                                                                                       // 1148
  offset = offset | 0                                                                                                  // 1149
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1150
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1151
    this[offset] = (value & 0xff)                                                                                      // 1152
    this[offset + 1] = (value >>> 8)                                                                                   // 1153
  } else {                                                                                                             // 1154
    objectWriteUInt16(this, value, offset, true)                                                                       // 1155
  }                                                                                                                    // 1156
  return offset + 2                                                                                                    // 1157
}                                                                                                                      // 1158
                                                                                                                       // 1159
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1160
  value = +value                                                                                                       // 1161
  offset = offset | 0                                                                                                  // 1162
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1163
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1164
    this[offset] = (value >>> 8)                                                                                       // 1165
    this[offset + 1] = (value & 0xff)                                                                                  // 1166
  } else {                                                                                                             // 1167
    objectWriteUInt16(this, value, offset, false)                                                                      // 1168
  }                                                                                                                    // 1169
  return offset + 2                                                                                                    // 1170
}                                                                                                                      // 1171
                                                                                                                       // 1172
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1173
  value = +value                                                                                                       // 1174
  offset = offset | 0                                                                                                  // 1175
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1176
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1177
    this[offset] = (value & 0xff)                                                                                      // 1178
    this[offset + 1] = (value >>> 8)                                                                                   // 1179
    this[offset + 2] = (value >>> 16)                                                                                  // 1180
    this[offset + 3] = (value >>> 24)                                                                                  // 1181
  } else {                                                                                                             // 1182
    objectWriteUInt32(this, value, offset, true)                                                                       // 1183
  }                                                                                                                    // 1184
  return offset + 4                                                                                                    // 1185
}                                                                                                                      // 1186
                                                                                                                       // 1187
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1188
  value = +value                                                                                                       // 1189
  offset = offset | 0                                                                                                  // 1190
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1191
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1192
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1193
    this[offset] = (value >>> 24)                                                                                      // 1194
    this[offset + 1] = (value >>> 16)                                                                                  // 1195
    this[offset + 2] = (value >>> 8)                                                                                   // 1196
    this[offset + 3] = (value & 0xff)                                                                                  // 1197
  } else {                                                                                                             // 1198
    objectWriteUInt32(this, value, offset, false)                                                                      // 1199
  }                                                                                                                    // 1200
  return offset + 4                                                                                                    // 1201
}                                                                                                                      // 1202
                                                                                                                       // 1203
function checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1204
  if (value > max || value < min) throw new RangeError('value is out of bounds')                                       // 1205
  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 1206
  if (offset < 0) throw new RangeError('index out of range')                                                           // 1207
}                                                                                                                      // 1208
                                                                                                                       // 1209
function writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1210
  if (!noAssert) {                                                                                                     // 1211
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1212
  }                                                                                                                    // 1213
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1214
  return offset + 4                                                                                                    // 1215
}                                                                                                                      // 1216
                                                                                                                       // 1217
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1218
  return writeFloat(this, value, offset, true, noAssert)                                                               // 1219
}                                                                                                                      // 1220
                                                                                                                       // 1221
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1222
  return writeFloat(this, value, offset, false, noAssert)                                                              // 1223
}                                                                                                                      // 1224
                                                                                                                       // 1225
function writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1226
  if (!noAssert) {                                                                                                     // 1227
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1228
  }                                                                                                                    // 1229
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1230
  return offset + 8                                                                                                    // 1231
}                                                                                                                      // 1232
                                                                                                                       // 1233
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1234
  return writeDouble(this, value, offset, true, noAssert)                                                              // 1235
}                                                                                                                      // 1236
                                                                                                                       // 1237
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1238
  return writeDouble(this, value, offset, false, noAssert)                                                             // 1239
}                                                                                                                      // 1240
                                                                                                                       // 1241
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1242
Buffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1243
  if (!start) start = 0                                                                                                // 1244
  if (!end && end !== 0) end = this.length                                                                             // 1245
  if (targetStart >= target.length) targetStart = target.length                                                        // 1246
  if (!targetStart) targetStart = 0                                                                                    // 1247
  if (end > 0 && end < start) end = start                                                                              // 1248
                                                                                                                       // 1249
  // Copy 0 bytes; we're done                                                                                          // 1250
  if (end === start) return 0                                                                                          // 1251
  if (target.length === 0 || this.length === 0) return 0                                                               // 1252
                                                                                                                       // 1253
  // Fatal error conditions                                                                                            // 1254
  if (targetStart < 0) {                                                                                               // 1255
    throw new RangeError('targetStart out of bounds')                                                                  // 1256
  }                                                                                                                    // 1257
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1258
  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1259
                                                                                                                       // 1260
  // Are we oob?                                                                                                       // 1261
  if (end > this.length) end = this.length                                                                             // 1262
  if (target.length - targetStart < end - start) {                                                                     // 1263
    end = target.length - targetStart + start                                                                          // 1264
  }                                                                                                                    // 1265
                                                                                                                       // 1266
  var len = end - start                                                                                                // 1267
  var i                                                                                                                // 1268
                                                                                                                       // 1269
  if (this === target && start < targetStart && targetStart < end) {                                                   // 1270
    // descending copy from end                                                                                        // 1271
    for (i = len - 1; i >= 0; i--) {                                                                                   // 1272
      target[i + targetStart] = this[i + start]                                                                        // 1273
    }                                                                                                                  // 1274
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1275
    // ascending copy from start                                                                                       // 1276
    for (i = 0; i < len; i++) {                                                                                        // 1277
      target[i + targetStart] = this[i + start]                                                                        // 1278
    }                                                                                                                  // 1279
  } else {                                                                                                             // 1280
    target._set(this.subarray(start, start + len), targetStart)                                                        // 1281
  }                                                                                                                    // 1282
                                                                                                                       // 1283
  return len                                                                                                           // 1284
}                                                                                                                      // 1285
                                                                                                                       // 1286
// fill(value, start=0, end=buffer.length)                                                                             // 1287
Buffer.prototype.fill = function fill (value, start, end) {                                                            // 1288
  if (!value) value = 0                                                                                                // 1289
  if (!start) start = 0                                                                                                // 1290
  if (!end) end = this.length                                                                                          // 1291
                                                                                                                       // 1292
  if (end < start) throw new RangeError('end < start')                                                                 // 1293
                                                                                                                       // 1294
  // Fill 0 bytes; we're done                                                                                          // 1295
  if (end === start) return                                                                                            // 1296
  if (this.length === 0) return                                                                                        // 1297
                                                                                                                       // 1298
  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                   // 1299
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                          // 1300
                                                                                                                       // 1301
  var i                                                                                                                // 1302
  if (typeof value === 'number') {                                                                                     // 1303
    for (i = start; i < end; i++) {                                                                                    // 1304
      this[i] = value                                                                                                  // 1305
    }                                                                                                                  // 1306
  } else {                                                                                                             // 1307
    var bytes = utf8ToBytes(value.toString())                                                                          // 1308
    var len = bytes.length                                                                                             // 1309
    for (i = start; i < end; i++) {                                                                                    // 1310
      this[i] = bytes[i % len]                                                                                         // 1311
    }                                                                                                                  // 1312
  }                                                                                                                    // 1313
                                                                                                                       // 1314
  return this                                                                                                          // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
/**                                                                                                                    // 1318
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.                                        // 1319
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.                                            // 1320
 */                                                                                                                    // 1321
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {                                                           // 1322
  if (typeof Uint8Array !== 'undefined') {                                                                             // 1323
    if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                  // 1324
      return (new Buffer(this)).buffer                                                                                 // 1325
    } else {                                                                                                           // 1326
      var buf = new Uint8Array(this.length)                                                                            // 1327
      for (var i = 0, len = buf.length; i < len; i += 1) {                                                             // 1328
        buf[i] = this[i]                                                                                               // 1329
      }                                                                                                                // 1330
      return buf.buffer                                                                                                // 1331
    }                                                                                                                  // 1332
  } else {                                                                                                             // 1333
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')                                          // 1334
  }                                                                                                                    // 1335
}                                                                                                                      // 1336
                                                                                                                       // 1337
// HELPER FUNCTIONS                                                                                                    // 1338
// ================                                                                                                    // 1339
                                                                                                                       // 1340
var BP = Buffer.prototype                                                                                              // 1341
                                                                                                                       // 1342
/**                                                                                                                    // 1343
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods                                     // 1344
 */                                                                                                                    // 1345
Buffer._augment = function _augment (arr) {                                                                            // 1346
  arr.constructor = Buffer                                                                                             // 1347
  arr._isBuffer = true                                                                                                 // 1348
                                                                                                                       // 1349
  // save reference to original Uint8Array set method before overwriting                                               // 1350
  arr._set = arr.set                                                                                                   // 1351
                                                                                                                       // 1352
  // deprecated                                                                                                        // 1353
  arr.get = BP.get                                                                                                     // 1354
  arr.set = BP.set                                                                                                     // 1355
                                                                                                                       // 1356
  arr.write = BP.write                                                                                                 // 1357
  arr.toString = BP.toString                                                                                           // 1358
  arr.toLocaleString = BP.toString                                                                                     // 1359
  arr.toJSON = BP.toJSON                                                                                               // 1360
  arr.equals = BP.equals                                                                                               // 1361
  arr.compare = BP.compare                                                                                             // 1362
  arr.indexOf = BP.indexOf                                                                                             // 1363
  arr.copy = BP.copy                                                                                                   // 1364
  arr.slice = BP.slice                                                                                                 // 1365
  arr.readUIntLE = BP.readUIntLE                                                                                       // 1366
  arr.readUIntBE = BP.readUIntBE                                                                                       // 1367
  arr.readUInt8 = BP.readUInt8                                                                                         // 1368
  arr.readUInt16LE = BP.readUInt16LE                                                                                   // 1369
  arr.readUInt16BE = BP.readUInt16BE                                                                                   // 1370
  arr.readUInt32LE = BP.readUInt32LE                                                                                   // 1371
  arr.readUInt32BE = BP.readUInt32BE                                                                                   // 1372
  arr.readIntLE = BP.readIntLE                                                                                         // 1373
  arr.readIntBE = BP.readIntBE                                                                                         // 1374
  arr.readInt8 = BP.readInt8                                                                                           // 1375
  arr.readInt16LE = BP.readInt16LE                                                                                     // 1376
  arr.readInt16BE = BP.readInt16BE                                                                                     // 1377
  arr.readInt32LE = BP.readInt32LE                                                                                     // 1378
  arr.readInt32BE = BP.readInt32BE                                                                                     // 1379
  arr.readFloatLE = BP.readFloatLE                                                                                     // 1380
  arr.readFloatBE = BP.readFloatBE                                                                                     // 1381
  arr.readDoubleLE = BP.readDoubleLE                                                                                   // 1382
  arr.readDoubleBE = BP.readDoubleBE                                                                                   // 1383
  arr.writeUInt8 = BP.writeUInt8                                                                                       // 1384
  arr.writeUIntLE = BP.writeUIntLE                                                                                     // 1385
  arr.writeUIntBE = BP.writeUIntBE                                                                                     // 1386
  arr.writeUInt16LE = BP.writeUInt16LE                                                                                 // 1387
  arr.writeUInt16BE = BP.writeUInt16BE                                                                                 // 1388
  arr.writeUInt32LE = BP.writeUInt32LE                                                                                 // 1389
  arr.writeUInt32BE = BP.writeUInt32BE                                                                                 // 1390
  arr.writeIntLE = BP.writeIntLE                                                                                       // 1391
  arr.writeIntBE = BP.writeIntBE                                                                                       // 1392
  arr.writeInt8 = BP.writeInt8                                                                                         // 1393
  arr.writeInt16LE = BP.writeInt16LE                                                                                   // 1394
  arr.writeInt16BE = BP.writeInt16BE                                                                                   // 1395
  arr.writeInt32LE = BP.writeInt32LE                                                                                   // 1396
  arr.writeInt32BE = BP.writeInt32BE                                                                                   // 1397
  arr.writeFloatLE = BP.writeFloatLE                                                                                   // 1398
  arr.writeFloatBE = BP.writeFloatBE                                                                                   // 1399
  arr.writeDoubleLE = BP.writeDoubleLE                                                                                 // 1400
  arr.writeDoubleBE = BP.writeDoubleBE                                                                                 // 1401
  arr.fill = BP.fill                                                                                                   // 1402
  arr.inspect = BP.inspect                                                                                             // 1403
  arr.toArrayBuffer = BP.toArrayBuffer                                                                                 // 1404
                                                                                                                       // 1405
  return arr                                                                                                           // 1406
}                                                                                                                      // 1407
                                                                                                                       // 1408
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g                                                                           // 1409
                                                                                                                       // 1410
function base64clean (str) {                                                                                           // 1411
  // Node strips out invalid characters like \n and \t from the string, base64-js does not                             // 1412
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1413
  // Node converts strings with length < 2 to ''                                                                       // 1414
  if (str.length < 2) return ''                                                                                        // 1415
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1416
  while (str.length % 4 !== 0) {                                                                                       // 1417
    str = str + '='                                                                                                    // 1418
  }                                                                                                                    // 1419
  return str                                                                                                           // 1420
}                                                                                                                      // 1421
                                                                                                                       // 1422
function stringtrim (str) {                                                                                            // 1423
  if (str.trim) return str.trim()                                                                                      // 1424
  return str.replace(/^\s+|\s+$/g, '')                                                                                 // 1425
}                                                                                                                      // 1426
                                                                                                                       // 1427
function toHex (n) {                                                                                                   // 1428
  if (n < 16) return '0' + n.toString(16)                                                                              // 1429
  return n.toString(16)                                                                                                // 1430
}                                                                                                                      // 1431
                                                                                                                       // 1432
function utf8ToBytes (string, units) {                                                                                 // 1433
  units = units || Infinity                                                                                            // 1434
  var codePoint                                                                                                        // 1435
  var length = string.length                                                                                           // 1436
  var leadSurrogate = null                                                                                             // 1437
  var bytes = []                                                                                                       // 1438
                                                                                                                       // 1439
  for (var i = 0; i < length; i++) {                                                                                   // 1440
    codePoint = string.charCodeAt(i)                                                                                   // 1441
                                                                                                                       // 1442
    // is surrogate component                                                                                          // 1443
    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1444
      // last char was a lead                                                                                          // 1445
      if (!leadSurrogate) {                                                                                            // 1446
        // no lead yet                                                                                                 // 1447
        if (codePoint > 0xDBFF) {                                                                                      // 1448
          // unexpected trail                                                                                          // 1449
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1450
          continue                                                                                                     // 1451
        } else if (i + 1 === length) {                                                                                 // 1452
          // unpaired lead                                                                                             // 1453
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1454
          continue                                                                                                     // 1455
        }                                                                                                              // 1456
                                                                                                                       // 1457
        // valid lead                                                                                                  // 1458
        leadSurrogate = codePoint                                                                                      // 1459
                                                                                                                       // 1460
        continue                                                                                                       // 1461
      }                                                                                                                // 1462
                                                                                                                       // 1463
      // 2 leads in a row                                                                                              // 1464
      if (codePoint < 0xDC00) {                                                                                        // 1465
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1466
        leadSurrogate = codePoint                                                                                      // 1467
        continue                                                                                                       // 1468
      }                                                                                                                // 1469
                                                                                                                       // 1470
      // valid surrogate pair                                                                                          // 1471
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1472
    } else if (leadSurrogate) {                                                                                        // 1473
      // valid bmp char, but last char was a lead                                                                      // 1474
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1475
    }                                                                                                                  // 1476
                                                                                                                       // 1477
    leadSurrogate = null                                                                                               // 1478
                                                                                                                       // 1479
    // encode utf8                                                                                                     // 1480
    if (codePoint < 0x80) {                                                                                            // 1481
      if ((units -= 1) < 0) break                                                                                      // 1482
      bytes.push(codePoint)                                                                                            // 1483
    } else if (codePoint < 0x800) {                                                                                    // 1484
      if ((units -= 2) < 0) break                                                                                      // 1485
      bytes.push(                                                                                                      // 1486
        codePoint >> 0x6 | 0xC0,                                                                                       // 1487
        codePoint & 0x3F | 0x80                                                                                        // 1488
      )                                                                                                                // 1489
    } else if (codePoint < 0x10000) {                                                                                  // 1490
      if ((units -= 3) < 0) break                                                                                      // 1491
      bytes.push(                                                                                                      // 1492
        codePoint >> 0xC | 0xE0,                                                                                       // 1493
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1494
        codePoint & 0x3F | 0x80                                                                                        // 1495
      )                                                                                                                // 1496
    } else if (codePoint < 0x110000) {                                                                                 // 1497
      if ((units -= 4) < 0) break                                                                                      // 1498
      bytes.push(                                                                                                      // 1499
        codePoint >> 0x12 | 0xF0,                                                                                      // 1500
        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1501
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1502
        codePoint & 0x3F | 0x80                                                                                        // 1503
      )                                                                                                                // 1504
    } else {                                                                                                           // 1505
      throw new Error('Invalid code point')                                                                            // 1506
    }                                                                                                                  // 1507
  }                                                                                                                    // 1508
                                                                                                                       // 1509
  return bytes                                                                                                         // 1510
}                                                                                                                      // 1511
                                                                                                                       // 1512
function asciiToBytes (str) {                                                                                          // 1513
  var byteArray = []                                                                                                   // 1514
  for (var i = 0; i < str.length; i++) {                                                                               // 1515
    // Node's code seems to be doing this and not & 0x7F..                                                             // 1516
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1517
  }                                                                                                                    // 1518
  return byteArray                                                                                                     // 1519
}                                                                                                                      // 1520
                                                                                                                       // 1521
function utf16leToBytes (str, units) {                                                                                 // 1522
  var c, hi, lo                                                                                                        // 1523
  var byteArray = []                                                                                                   // 1524
  for (var i = 0; i < str.length; i++) {                                                                               // 1525
    if ((units -= 2) < 0) break                                                                                        // 1526
                                                                                                                       // 1527
    c = str.charCodeAt(i)                                                                                              // 1528
    hi = c >> 8                                                                                                        // 1529
    lo = c % 256                                                                                                       // 1530
    byteArray.push(lo)                                                                                                 // 1531
    byteArray.push(hi)                                                                                                 // 1532
  }                                                                                                                    // 1533
                                                                                                                       // 1534
  return byteArray                                                                                                     // 1535
}                                                                                                                      // 1536
                                                                                                                       // 1537
function base64ToBytes (str) {                                                                                         // 1538
  return base64.toByteArray(base64clean(str))                                                                          // 1539
}                                                                                                                      // 1540
                                                                                                                       // 1541
function blitBuffer (src, dst, offset, length) {                                                                       // 1542
  for (var i = 0; i < length; i++) {                                                                                   // 1543
    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1544
    dst[i + offset] = src[i]                                                                                           // 1545
  }                                                                                                                    // 1546
  return i                                                                                                             // 1547
}                                                                                                                      // 1548
                                                                                                                       // 1549
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                                                                                                                       //
},{"base64-js":18,"ieee754":19,"isarray":20}],18:[function(require,module,exports){                                    //
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                                       // 1
                                                                                                                       // 2
;(function (exports) {                                                                                                 // 3
	'use strict';                                                                                                         // 4
                                                                                                                       // 5
  var Arr = (typeof Uint8Array !== 'undefined')                                                                        // 6
    ? Uint8Array                                                                                                       // 7
    : Array                                                                                                            // 8
                                                                                                                       // 9
	var PLUS   = '+'.charCodeAt(0)                                                                                        // 10
	var SLASH  = '/'.charCodeAt(0)                                                                                        // 11
	var NUMBER = '0'.charCodeAt(0)                                                                                        // 12
	var LOWER  = 'a'.charCodeAt(0)                                                                                        // 13
	var UPPER  = 'A'.charCodeAt(0)                                                                                        // 14
	var PLUS_URL_SAFE = '-'.charCodeAt(0)                                                                                 // 15
	var SLASH_URL_SAFE = '_'.charCodeAt(0)                                                                                // 16
                                                                                                                       // 17
	function decode (elt) {                                                                                               // 18
		var code = elt.charCodeAt(0)                                                                                         // 19
		if (code === PLUS ||                                                                                                 // 20
		    code === PLUS_URL_SAFE)                                                                                          // 21
			return 62 // '+'                                                                                                    // 22
		if (code === SLASH ||                                                                                                // 23
		    code === SLASH_URL_SAFE)                                                                                         // 24
			return 63 // '/'                                                                                                    // 25
		if (code < NUMBER)                                                                                                   // 26
			return -1 //no match                                                                                                // 27
		if (code < NUMBER + 10)                                                                                              // 28
			return code - NUMBER + 26 + 26                                                                                      // 29
		if (code < UPPER + 26)                                                                                               // 30
			return code - UPPER                                                                                                 // 31
		if (code < LOWER + 26)                                                                                               // 32
			return code - LOWER + 26                                                                                            // 33
	}                                                                                                                     // 34
                                                                                                                       // 35
	function b64ToByteArray (b64) {                                                                                       // 36
		var i, j, l, tmp, placeHolders, arr                                                                                  // 37
                                                                                                                       // 38
		if (b64.length % 4 > 0) {                                                                                            // 39
			throw new Error('Invalid string. Length must be a multiple of 4')                                                   // 40
		}                                                                                                                    // 41
                                                                                                                       // 42
		// the number of equal signs (place holders)                                                                         // 43
		// if there are two placeholders, than the two characters before it                                                  // 44
		// represent one byte                                                                                                // 45
		// if there is only one, then the three characters before it represent 2 bytes                                       // 46
		// this is just a cheap hack to not do indexOf twice                                                                 // 47
		var len = b64.length                                                                                                 // 48
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0                                 // 49
                                                                                                                       // 50
		// base64 is 4/3 + up to two characters of the original data                                                         // 51
		arr = new Arr(b64.length * 3 / 4 - placeHolders)                                                                     // 52
                                                                                                                       // 53
		// if there are placeholders, only get up to the last complete 4 chars                                               // 54
		l = placeHolders > 0 ? b64.length - 4 : b64.length                                                                   // 55
                                                                                                                       // 56
		var L = 0                                                                                                            // 57
                                                                                                                       // 58
		function push (v) {                                                                                                  // 59
			arr[L++] = v                                                                                                        // 60
		}                                                                                                                    // 61
                                                                                                                       // 62
		for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 63
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)                                                                                        // 65
			push((tmp & 0xFF00) >> 8)                                                                                           // 66
			push(tmp & 0xFF)                                                                                                    // 67
		}                                                                                                                    // 68
                                                                                                                       // 69
		if (placeHolders === 2) {                                                                                            // 70
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                               // 71
			push(tmp & 0xFF)                                                                                                    // 72
		} else if (placeHolders === 1) {                                                                                     // 73
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)           // 74
			push((tmp >> 8) & 0xFF)                                                                                             // 75
			push(tmp & 0xFF)                                                                                                    // 76
		}                                                                                                                    // 77
                                                                                                                       // 78
		return arr                                                                                                           // 79
	}                                                                                                                     // 80
                                                                                                                       // 81
	function uint8ToBase64 (uint8) {                                                                                      // 82
		var i,                                                                                                               // 83
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes                                               // 84
			output = "",                                                                                                        // 85
			temp, length                                                                                                        // 86
                                                                                                                       // 87
		function encode (num) {                                                                                              // 88
			return lookup.charAt(num)                                                                                           // 89
		}                                                                                                                    // 90
                                                                                                                       // 91
		function tripletToBase64 (num) {                                                                                     // 92
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)           // 93
		}                                                                                                                    // 94
                                                                                                                       // 95
		// go through the array every three bytes, we'll deal with trailing stuff later                                      // 96
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {                                                // 97
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 98
			output += tripletToBase64(temp)                                                                                     // 99
		}                                                                                                                    // 100
                                                                                                                       // 101
		// pad the end with zeros, but make sure to not forget the extra bytes                                               // 102
		switch (extraBytes) {                                                                                                // 103
			case 1:                                                                                                             // 104
				temp = uint8[uint8.length - 1]                                                                                     // 105
				output += encode(temp >> 2)                                                                                        // 106
				output += encode((temp << 4) & 0x3F)                                                                               // 107
				output += '=='                                                                                                     // 108
				break                                                                                                              // 109
			case 2:                                                                                                             // 110
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                                  // 111
				output += encode(temp >> 10)                                                                                       // 112
				output += encode((temp >> 4) & 0x3F)                                                                               // 113
				output += encode((temp << 2) & 0x3F)                                                                               // 114
				output += '='                                                                                                      // 115
				break                                                                                                              // 116
		}                                                                                                                    // 117
                                                                                                                       // 118
		return output                                                                                                        // 119
	}                                                                                                                     // 120
                                                                                                                       // 121
	exports.toByteArray = b64ToByteArray                                                                                  // 122
	exports.fromByteArray = uint8ToBase64                                                                                 // 123
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                                    // 124
                                                                                                                       // 125
},{}],19:[function(require,module,exports){                                                                            //
exports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1
  var e, m                                                                                                             // 2
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3
  var eMax = (1 << eLen) - 1                                                                                           // 4
  var eBias = eMax >> 1                                                                                                // 5
  var nBits = -7                                                                                                       // 6
  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7
  var d = isLE ? -1 : 1                                                                                                // 8
  var s = buffer[offset + i]                                                                                           // 9
                                                                                                                       // 10
  i += d                                                                                                               // 11
                                                                                                                       // 12
  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13
  s >>= (-nBits)                                                                                                       // 14
  nBits += eLen                                                                                                        // 15
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16
                                                                                                                       // 17
  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18
  e >>= (-nBits)                                                                                                       // 19
  nBits += mLen                                                                                                        // 20
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21
                                                                                                                       // 22
  if (e === 0) {                                                                                                       // 23
    e = 1 - eBias                                                                                                      // 24
  } else if (e === eMax) {                                                                                             // 25
    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26
  } else {                                                                                                             // 27
    m = m + Math.pow(2, mLen)                                                                                          // 28
    e = e - eBias                                                                                                      // 29
  }                                                                                                                    // 30
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31
}                                                                                                                      // 32
                                                                                                                       // 33
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34
  var e, m, c                                                                                                          // 35
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36
  var eMax = (1 << eLen) - 1                                                                                           // 37
  var eBias = eMax >> 1                                                                                                // 38
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39
  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40
  var d = isLE ? 1 : -1                                                                                                // 41
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42
                                                                                                                       // 43
  value = Math.abs(value)                                                                                              // 44
                                                                                                                       // 45
  if (isNaN(value) || value === Infinity) {                                                                            // 46
    m = isNaN(value) ? 1 : 0                                                                                           // 47
    e = eMax                                                                                                           // 48
  } else {                                                                                                             // 49
    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51
      e--                                                                                                              // 52
      c *= 2                                                                                                           // 53
    }                                                                                                                  // 54
    if (e + eBias >= 1) {                                                                                              // 55
      value += rt / c                                                                                                  // 56
    } else {                                                                                                           // 57
      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58
    }                                                                                                                  // 59
    if (value * c >= 2) {                                                                                              // 60
      e++                                                                                                              // 61
      c /= 2                                                                                                           // 62
    }                                                                                                                  // 63
                                                                                                                       // 64
    if (e + eBias >= eMax) {                                                                                           // 65
      m = 0                                                                                                            // 66
      e = eMax                                                                                                         // 67
    } else if (e + eBias >= 1) {                                                                                       // 68
      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69
      e = e + eBias                                                                                                    // 70
    } else {                                                                                                           // 71
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72
      e = 0                                                                                                            // 73
    }                                                                                                                  // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77
                                                                                                                       // 78
  e = (e << mLen) | m                                                                                                  // 79
  eLen += mLen                                                                                                         // 80
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81
                                                                                                                       // 82
  buffer[offset + i - d] |= s * 128                                                                                    // 83
}                                                                                                                      // 84
                                                                                                                       // 85
},{}],20:[function(require,module,exports){                                                                            //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = Array.isArray || function (arr) {                                                                     // 3
  return toString.call(arr) == '[object Array]';                                                                       // 4
};                                                                                                                     // 5
                                                                                                                       // 6
},{}],21:[function(require,module,exports){                                                                            //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
function EventEmitter() {                                                                                              // 22
  this._events = this._events || {};                                                                                   // 23
  this._maxListeners = this._maxListeners || undefined;                                                                // 24
}                                                                                                                      // 25
module.exports = EventEmitter;                                                                                         // 26
                                                                                                                       // 27
// Backwards-compat with node 0.10.x                                                                                   // 28
EventEmitter.EventEmitter = EventEmitter;                                                                              // 29
                                                                                                                       // 30
EventEmitter.prototype._events = undefined;                                                                            // 31
EventEmitter.prototype._maxListeners = undefined;                                                                      // 32
                                                                                                                       // 33
// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
// added to it. This is a useful default which helps finding memory leaks.                                             // 35
EventEmitter.defaultMaxListeners = 10;                                                                                 // 36
                                                                                                                       // 37
// Obviously not all Emitters should be limited to 10. This function allows                                            // 38
// that to be increased. Set to zero for unlimited.                                                                    // 39
EventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41
    throw TypeError('n must be a positive number');                                                                    // 42
  this._maxListeners = n;                                                                                              // 43
  return this;                                                                                                         // 44
};                                                                                                                     // 45
                                                                                                                       // 46
EventEmitter.prototype.emit = function(type) {                                                                         // 47
  var er, handler, len, args, i, listeners;                                                                            // 48
                                                                                                                       // 49
  if (!this._events)                                                                                                   // 50
    this._events = {};                                                                                                 // 51
                                                                                                                       // 52
  // If there is no 'error' event listener then throw.                                                                 // 53
  if (type === 'error') {                                                                                              // 54
    if (!this._events.error ||                                                                                         // 55
        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56
      er = arguments[1];                                                                                               // 57
      if (er instanceof Error) {                                                                                       // 58
        throw er; // Unhandled 'error' event                                                                           // 59
      }                                                                                                                // 60
      throw TypeError('Uncaught, unspecified "error" event.');                                                         // 61
    }                                                                                                                  // 62
  }                                                                                                                    // 63
                                                                                                                       // 64
  handler = this._events[type];                                                                                        // 65
                                                                                                                       // 66
  if (isUndefined(handler))                                                                                            // 67
    return false;                                                                                                      // 68
                                                                                                                       // 69
  if (isFunction(handler)) {                                                                                           // 70
    switch (arguments.length) {                                                                                        // 71
      // fast cases                                                                                                    // 72
      case 1:                                                                                                          // 73
        handler.call(this);                                                                                            // 74
        break;                                                                                                         // 75
      case 2:                                                                                                          // 76
        handler.call(this, arguments[1]);                                                                              // 77
        break;                                                                                                         // 78
      case 3:                                                                                                          // 79
        handler.call(this, arguments[1], arguments[2]);                                                                // 80
        break;                                                                                                         // 81
      // slower                                                                                                        // 82
      default:                                                                                                         // 83
        args = Array.prototype.slice.call(arguments, 1);                                                               // 84
        handler.apply(this, args);                                                                                     // 85
    }                                                                                                                  // 86
  } else if (isObject(handler)) {                                                                                      // 87
    args = Array.prototype.slice.call(arguments, 1);                                                                   // 88
    listeners = handler.slice();                                                                                       // 89
    len = listeners.length;                                                                                            // 90
    for (i = 0; i < len; i++)                                                                                          // 91
      listeners[i].apply(this, args);                                                                                  // 92
  }                                                                                                                    // 93
                                                                                                                       // 94
  return true;                                                                                                         // 95
};                                                                                                                     // 96
                                                                                                                       // 97
EventEmitter.prototype.addListener = function(type, listener) {                                                        // 98
  var m;                                                                                                               // 99
                                                                                                                       // 100
  if (!isFunction(listener))                                                                                           // 101
    throw TypeError('listener must be a function');                                                                    // 102
                                                                                                                       // 103
  if (!this._events)                                                                                                   // 104
    this._events = {};                                                                                                 // 105
                                                                                                                       // 106
  // To avoid recursion in the case that type === "newListener"! Before                                                // 107
  // adding it to the listeners, first emit "newListener".                                                             // 108
  if (this._events.newListener)                                                                                        // 109
    this.emit('newListener', type,                                                                                     // 110
              isFunction(listener.listener) ?                                                                          // 111
              listener.listener : listener);                                                                           // 112
                                                                                                                       // 113
  if (!this._events[type])                                                                                             // 114
    // Optimize the case of one listener. Don't need the extra array object.                                           // 115
    this._events[type] = listener;                                                                                     // 116
  else if (isObject(this._events[type]))                                                                               // 117
    // If we've already got an array, just append.                                                                     // 118
    this._events[type].push(listener);                                                                                 // 119
  else                                                                                                                 // 120
    // Adding the second element, need to change to array.                                                             // 121
    this._events[type] = [this._events[type], listener];                                                               // 122
                                                                                                                       // 123
  // Check for listener leak                                                                                           // 124
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 125
    if (!isUndefined(this._maxListeners)) {                                                                            // 126
      m = this._maxListeners;                                                                                          // 127
    } else {                                                                                                           // 128
      m = EventEmitter.defaultMaxListeners;                                                                            // 129
    }                                                                                                                  // 130
                                                                                                                       // 131
    if (m && m > 0 && this._events[type].length > m) {                                                                 // 132
      this._events[type].warned = true;                                                                                // 133
      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 134
                    'leak detected. %d listeners added. ' +                                                            // 135
                    'Use emitter.setMaxListeners() to increase limit.',                                                // 136
                    this._events[type].length);                                                                        // 137
      if (typeof console.trace === 'function') {                                                                       // 138
        // not supported in IE 10                                                                                      // 139
        console.trace();                                                                                               // 140
      }                                                                                                                // 141
    }                                                                                                                  // 142
  }                                                                                                                    // 143
                                                                                                                       // 144
  return this;                                                                                                         // 145
};                                                                                                                     // 146
                                                                                                                       // 147
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 148
                                                                                                                       // 149
EventEmitter.prototype.once = function(type, listener) {                                                               // 150
  if (!isFunction(listener))                                                                                           // 151
    throw TypeError('listener must be a function');                                                                    // 152
                                                                                                                       // 153
  var fired = false;                                                                                                   // 154
                                                                                                                       // 155
  function g() {                                                                                                       // 156
    this.removeListener(type, g);                                                                                      // 157
                                                                                                                       // 158
    if (!fired) {                                                                                                      // 159
      fired = true;                                                                                                    // 160
      listener.apply(this, arguments);                                                                                 // 161
    }                                                                                                                  // 162
  }                                                                                                                    // 163
                                                                                                                       // 164
  g.listener = listener;                                                                                               // 165
  this.on(type, g);                                                                                                    // 166
                                                                                                                       // 167
  return this;                                                                                                         // 168
};                                                                                                                     // 169
                                                                                                                       // 170
// emits a 'removeListener' event iff the listener was removed                                                         // 171
EventEmitter.prototype.removeListener = function(type, listener) {                                                     // 172
  var list, position, length, i;                                                                                       // 173
                                                                                                                       // 174
  if (!isFunction(listener))                                                                                           // 175
    throw TypeError('listener must be a function');                                                                    // 176
                                                                                                                       // 177
  if (!this._events || !this._events[type])                                                                            // 178
    return this;                                                                                                       // 179
                                                                                                                       // 180
  list = this._events[type];                                                                                           // 181
  length = list.length;                                                                                                // 182
  position = -1;                                                                                                       // 183
                                                                                                                       // 184
  if (list === listener ||                                                                                             // 185
      (isFunction(list.listener) && list.listener === listener)) {                                                     // 186
    delete this._events[type];                                                                                         // 187
    if (this._events.removeListener)                                                                                   // 188
      this.emit('removeListener', type, listener);                                                                     // 189
                                                                                                                       // 190
  } else if (isObject(list)) {                                                                                         // 191
    for (i = length; i-- > 0;) {                                                                                       // 192
      if (list[i] === listener ||                                                                                      // 193
          (list[i].listener && list[i].listener === listener)) {                                                       // 194
        position = i;                                                                                                  // 195
        break;                                                                                                         // 196
      }                                                                                                                // 197
    }                                                                                                                  // 198
                                                                                                                       // 199
    if (position < 0)                                                                                                  // 200
      return this;                                                                                                     // 201
                                                                                                                       // 202
    if (list.length === 1) {                                                                                           // 203
      list.length = 0;                                                                                                 // 204
      delete this._events[type];                                                                                       // 205
    } else {                                                                                                           // 206
      list.splice(position, 1);                                                                                        // 207
    }                                                                                                                  // 208
                                                                                                                       // 209
    if (this._events.removeListener)                                                                                   // 210
      this.emit('removeListener', type, listener);                                                                     // 211
  }                                                                                                                    // 212
                                                                                                                       // 213
  return this;                                                                                                         // 214
};                                                                                                                     // 215
                                                                                                                       // 216
EventEmitter.prototype.removeAllListeners = function(type) {                                                           // 217
  var key, listeners;                                                                                                  // 218
                                                                                                                       // 219
  if (!this._events)                                                                                                   // 220
    return this;                                                                                                       // 221
                                                                                                                       // 222
  // not listening for removeListener, no need to emit                                                                 // 223
  if (!this._events.removeListener) {                                                                                  // 224
    if (arguments.length === 0)                                                                                        // 225
      this._events = {};                                                                                               // 226
    else if (this._events[type])                                                                                       // 227
      delete this._events[type];                                                                                       // 228
    return this;                                                                                                       // 229
  }                                                                                                                    // 230
                                                                                                                       // 231
  // emit removeListener for all listeners on all events                                                               // 232
  if (arguments.length === 0) {                                                                                        // 233
    for (key in this._events) {                                                                                        // 234
      if (key === 'removeListener') continue;                                                                          // 235
      this.removeAllListeners(key);                                                                                    // 236
    }                                                                                                                  // 237
    this.removeAllListeners('removeListener');                                                                         // 238
    this._events = {};                                                                                                 // 239
    return this;                                                                                                       // 240
  }                                                                                                                    // 241
                                                                                                                       // 242
  listeners = this._events[type];                                                                                      // 243
                                                                                                                       // 244
  if (isFunction(listeners)) {                                                                                         // 245
    this.removeListener(type, listeners);                                                                              // 246
  } else if (listeners) {                                                                                              // 247
    // LIFO order                                                                                                      // 248
    while (listeners.length)                                                                                           // 249
      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 250
  }                                                                                                                    // 251
  delete this._events[type];                                                                                           // 252
                                                                                                                       // 253
  return this;                                                                                                         // 254
};                                                                                                                     // 255
                                                                                                                       // 256
EventEmitter.prototype.listeners = function(type) {                                                                    // 257
  var ret;                                                                                                             // 258
  if (!this._events || !this._events[type])                                                                            // 259
    ret = [];                                                                                                          // 260
  else if (isFunction(this._events[type]))                                                                             // 261
    ret = [this._events[type]];                                                                                        // 262
  else                                                                                                                 // 263
    ret = this._events[type].slice();                                                                                  // 264
  return ret;                                                                                                          // 265
};                                                                                                                     // 266
                                                                                                                       // 267
EventEmitter.prototype.listenerCount = function(type) {                                                                // 268
  if (this._events) {                                                                                                  // 269
    var evlistener = this._events[type];                                                                               // 270
                                                                                                                       // 271
    if (isFunction(evlistener))                                                                                        // 272
      return 1;                                                                                                        // 273
    else if (evlistener)                                                                                               // 274
      return evlistener.length;                                                                                        // 275
  }                                                                                                                    // 276
  return 0;                                                                                                            // 277
};                                                                                                                     // 278
                                                                                                                       // 279
EventEmitter.listenerCount = function(emitter, type) {                                                                 // 280
  return emitter.listenerCount(type);                                                                                  // 281
};                                                                                                                     // 282
                                                                                                                       // 283
function isFunction(arg) {                                                                                             // 284
  return typeof arg === 'function';                                                                                    // 285
}                                                                                                                      // 286
                                                                                                                       // 287
function isNumber(arg) {                                                                                               // 288
  return typeof arg === 'number';                                                                                      // 289
}                                                                                                                      // 290
                                                                                                                       // 291
function isObject(arg) {                                                                                               // 292
  return typeof arg === 'object' && arg !== null;                                                                      // 293
}                                                                                                                      // 294
                                                                                                                       // 295
function isUndefined(arg) {                                                                                            // 296
  return arg === void 0;                                                                                               // 297
}                                                                                                                      // 298
                                                                                                                       // 299
},{}],22:[function(require,module,exports){                                                                            //
if (typeof Object.create === 'function') {                                                                             // 1
  // implementation from standard node.js 'util' module                                                                // 2
  module.exports = function inherits(ctor, superCtor) {                                                                // 3
    ctor.super_ = superCtor                                                                                            // 4
    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 5
      constructor: {                                                                                                   // 6
        value: ctor,                                                                                                   // 7
        enumerable: false,                                                                                             // 8
        writable: true,                                                                                                // 9
        configurable: true                                                                                             // 10
      }                                                                                                                // 11
    });                                                                                                                // 12
  };                                                                                                                   // 13
} else {                                                                                                               // 14
  // old school shim for old browsers                                                                                  // 15
  module.exports = function inherits(ctor, superCtor) {                                                                // 16
    ctor.super_ = superCtor                                                                                            // 17
    var TempCtor = function () {}                                                                                      // 18
    TempCtor.prototype = superCtor.prototype                                                                           // 19
    ctor.prototype = new TempCtor()                                                                                    // 20
    ctor.prototype.constructor = ctor                                                                                  // 21
  }                                                                                                                    // 22
}                                                                                                                      // 23
                                                                                                                       // 24
},{}],23:[function(require,module,exports){                                                                            //
/**                                                                                                                    // 1
 * Determine if an object is Buffer                                                                                    // 2
 *                                                                                                                     // 3
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4
 * License:  MIT                                                                                                       // 5
 *                                                                                                                     // 6
 * `npm install is-buffer`                                                                                             // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
module.exports = function (obj) {                                                                                      // 10
  return !!(obj != null &&                                                                                             // 11
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)                                         // 12
      (obj.constructor &&                                                                                              // 13
      typeof obj.constructor.isBuffer === 'function' &&                                                                // 14
      obj.constructor.isBuffer(obj))                                                                                   // 15
    ))                                                                                                                 // 16
}                                                                                                                      // 17
                                                                                                                       // 18
},{}],24:[function(require,module,exports){                                                                            //
module.exports = Array.isArray || function (arr) {                                                                     // 1
  return Object.prototype.toString.call(arr) == '[object Array]';                                                      // 2
};                                                                                                                     // 3
                                                                                                                       // 4
},{}],25:[function(require,module,exports){                                                                            //
// shim for using process in browser                                                                                   // 1
                                                                                                                       // 2
var process = module.exports = {};                                                                                     // 3
var queue = [];                                                                                                        // 4
var draining = false;                                                                                                  // 5
var currentQueue;                                                                                                      // 6
var queueIndex = -1;                                                                                                   // 7
                                                                                                                       // 8
function cleanUpNextTick() {                                                                                           // 9
    draining = false;                                                                                                  // 10
    if (currentQueue.length) {                                                                                         // 11
        queue = currentQueue.concat(queue);                                                                            // 12
    } else {                                                                                                           // 13
        queueIndex = -1;                                                                                               // 14
    }                                                                                                                  // 15
    if (queue.length) {                                                                                                // 16
        drainQueue();                                                                                                  // 17
    }                                                                                                                  // 18
}                                                                                                                      // 19
                                                                                                                       // 20
function drainQueue() {                                                                                                // 21
    if (draining) {                                                                                                    // 22
        return;                                                                                                        // 23
    }                                                                                                                  // 24
    var timeout = setTimeout(cleanUpNextTick);                                                                         // 25
    draining = true;                                                                                                   // 26
                                                                                                                       // 27
    var len = queue.length;                                                                                            // 28
    while(len) {                                                                                                       // 29
        currentQueue = queue;                                                                                          // 30
        queue = [];                                                                                                    // 31
        while (++queueIndex < len) {                                                                                   // 32
            if (currentQueue) {                                                                                        // 33
                currentQueue[queueIndex].run();                                                                        // 34
            }                                                                                                          // 35
        }                                                                                                              // 36
        queueIndex = -1;                                                                                               // 37
        len = queue.length;                                                                                            // 38
    }                                                                                                                  // 39
    currentQueue = null;                                                                                               // 40
    draining = false;                                                                                                  // 41
    clearTimeout(timeout);                                                                                             // 42
}                                                                                                                      // 43
                                                                                                                       // 44
process.nextTick = function (fun) {                                                                                    // 45
    var args = new Array(arguments.length - 1);                                                                        // 46
    if (arguments.length > 1) {                                                                                        // 47
        for (var i = 1; i < arguments.length; i++) {                                                                   // 48
            args[i - 1] = arguments[i];                                                                                // 49
        }                                                                                                              // 50
    }                                                                                                                  // 51
    queue.push(new Item(fun, args));                                                                                   // 52
    if (queue.length === 1 && !draining) {                                                                             // 53
        setTimeout(drainQueue, 0);                                                                                     // 54
    }                                                                                                                  // 55
};                                                                                                                     // 56
                                                                                                                       // 57
// v8 likes predictible objects                                                                                        // 58
function Item(fun, array) {                                                                                            // 59
    this.fun = fun;                                                                                                    // 60
    this.array = array;                                                                                                // 61
}                                                                                                                      // 62
Item.prototype.run = function () {                                                                                     // 63
    this.fun.apply(null, this.array);                                                                                  // 64
};                                                                                                                     // 65
process.title = 'browser';                                                                                             // 66
process.browser = true;                                                                                                // 67
process.env = {};                                                                                                      // 68
process.argv = [];                                                                                                     // 69
process.version = ''; // empty string to avoid regexp issues                                                           // 70
process.versions = {};                                                                                                 // 71
                                                                                                                       // 72
function noop() {}                                                                                                     // 73
                                                                                                                       // 74
process.on = noop;                                                                                                     // 75
process.addListener = noop;                                                                                            // 76
process.once = noop;                                                                                                   // 77
process.off = noop;                                                                                                    // 78
process.removeListener = noop;                                                                                         // 79
process.removeAllListeners = noop;                                                                                     // 80
process.emit = noop;                                                                                                   // 81
                                                                                                                       // 82
process.binding = function (name) {                                                                                    // 83
    throw new Error('process.binding is not supported');                                                               // 84
};                                                                                                                     // 85
                                                                                                                       // 86
process.cwd = function () { return '/' };                                                                              // 87
process.chdir = function (dir) {                                                                                       // 88
    throw new Error('process.chdir is not supported');                                                                 // 89
};                                                                                                                     // 90
process.umask = function() { return 0; };                                                                              // 91
                                                                                                                       // 92
},{}],26:[function(require,module,exports){                                                                            //
module.exports = require("./lib/_stream_duplex.js")                                                                    // 1
                                                                                                                       // 2
},{"./lib/_stream_duplex.js":27}],27:[function(require,module,exports){                                                //
// a duplex stream is just a stream that is both readable and writable.                                                // 1
// Since JS doesn't have multiple prototypal inheritance, this class                                                   // 2
// prototypally inherits from Readable, and then parasitically from                                                    // 3
// Writable.                                                                                                           // 4
                                                                                                                       // 5
'use strict';                                                                                                          // 6
                                                                                                                       // 7
/*<replacement>*/                                                                                                      // 8
var objectKeys = Object.keys || function (obj) {                                                                       // 9
  var keys = [];                                                                                                       // 10
  for (var key in obj) keys.push(key);                                                                                 // 11
  return keys;                                                                                                         // 12
}                                                                                                                      // 13
/*</replacement>*/                                                                                                     // 14
                                                                                                                       // 15
                                                                                                                       // 16
module.exports = Duplex;                                                                                               // 17
                                                                                                                       // 18
/*<replacement>*/                                                                                                      // 19
var processNextTick = require('process-nextick-args');                                                                 // 20
/*</replacement>*/                                                                                                     // 21
                                                                                                                       // 22
                                                                                                                       // 23
                                                                                                                       // 24
/*<replacement>*/                                                                                                      // 25
var util = require('core-util-is');                                                                                    // 26
util.inherits = require('inherits');                                                                                   // 27
/*</replacement>*/                                                                                                     // 28
                                                                                                                       // 29
var Readable = require('./_stream_readable');                                                                          // 30
var Writable = require('./_stream_writable');                                                                          // 31
                                                                                                                       // 32
util.inherits(Duplex, Readable);                                                                                       // 33
                                                                                                                       // 34
var keys = objectKeys(Writable.prototype);                                                                             // 35
for (var v = 0; v < keys.length; v++) {                                                                                // 36
  var method = keys[v];                                                                                                // 37
  if (!Duplex.prototype[method])                                                                                       // 38
    Duplex.prototype[method] = Writable.prototype[method];                                                             // 39
}                                                                                                                      // 40
                                                                                                                       // 41
function Duplex(options) {                                                                                             // 42
  if (!(this instanceof Duplex))                                                                                       // 43
    return new Duplex(options);                                                                                        // 44
                                                                                                                       // 45
  Readable.call(this, options);                                                                                        // 46
  Writable.call(this, options);                                                                                        // 47
                                                                                                                       // 48
  if (options && options.readable === false)                                                                           // 49
    this.readable = false;                                                                                             // 50
                                                                                                                       // 51
  if (options && options.writable === false)                                                                           // 52
    this.writable = false;                                                                                             // 53
                                                                                                                       // 54
  this.allowHalfOpen = true;                                                                                           // 55
  if (options && options.allowHalfOpen === false)                                                                      // 56
    this.allowHalfOpen = false;                                                                                        // 57
                                                                                                                       // 58
  this.once('end', onend);                                                                                             // 59
}                                                                                                                      // 60
                                                                                                                       // 61
// the no-half-open enforcer                                                                                           // 62
function onend() {                                                                                                     // 63
  // if we allow half-open state, or if the writable side ended,                                                       // 64
  // then we're ok.                                                                                                    // 65
  if (this.allowHalfOpen || this._writableState.ended)                                                                 // 66
    return;                                                                                                            // 67
                                                                                                                       // 68
  // no more data can be written.                                                                                      // 69
  // But allow more writes to happen in this tick.                                                                     // 70
  processNextTick(onEndNT, this);                                                                                      // 71
}                                                                                                                      // 72
                                                                                                                       // 73
function onEndNT(self) {                                                                                               // 74
  self.end();                                                                                                          // 75
}                                                                                                                      // 76
                                                                                                                       // 77
function forEach (xs, f) {                                                                                             // 78
  for (var i = 0, l = xs.length; i < l; i++) {                                                                         // 79
    f(xs[i], i);                                                                                                       // 80
  }                                                                                                                    // 81
}                                                                                                                      // 82
                                                                                                                       // 83
},{"./_stream_readable":29,"./_stream_writable":31,"core-util-is":32,"inherits":22,"process-nextick-args":33}],28:[function(require,module,exports){
// a passthrough stream.                                                                                               // 1
// basically just the most minimal sort of Transform stream.                                                           // 2
// Every written chunk gets output as-is.                                                                              // 3
                                                                                                                       // 4
'use strict';                                                                                                          // 5
                                                                                                                       // 6
module.exports = PassThrough;                                                                                          // 7
                                                                                                                       // 8
var Transform = require('./_stream_transform');                                                                        // 9
                                                                                                                       // 10
/*<replacement>*/                                                                                                      // 11
var util = require('core-util-is');                                                                                    // 12
util.inherits = require('inherits');                                                                                   // 13
/*</replacement>*/                                                                                                     // 14
                                                                                                                       // 15
util.inherits(PassThrough, Transform);                                                                                 // 16
                                                                                                                       // 17
function PassThrough(options) {                                                                                        // 18
  if (!(this instanceof PassThrough))                                                                                  // 19
    return new PassThrough(options);                                                                                   // 20
                                                                                                                       // 21
  Transform.call(this, options);                                                                                       // 22
}                                                                                                                      // 23
                                                                                                                       // 24
PassThrough.prototype._transform = function(chunk, encoding, cb) {                                                     // 25
  cb(null, chunk);                                                                                                     // 26
};                                                                                                                     // 27
                                                                                                                       // 28
},{"./_stream_transform":30,"core-util-is":32,"inherits":22}],29:[function(require,module,exports){                    //
(function (process){                                                                                                   //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
module.exports = Readable;                                                                                             // 3
                                                                                                                       // 4
/*<replacement>*/                                                                                                      // 5
var processNextTick = require('process-nextick-args');                                                                 // 6
/*</replacement>*/                                                                                                     // 7
                                                                                                                       // 8
                                                                                                                       // 9
/*<replacement>*/                                                                                                      // 10
var isArray = require('isarray');                                                                                      // 11
/*</replacement>*/                                                                                                     // 12
                                                                                                                       // 13
                                                                                                                       // 14
/*<replacement>*/                                                                                                      // 15
var Buffer = require('buffer').Buffer;                                                                                 // 16
/*</replacement>*/                                                                                                     // 17
                                                                                                                       // 18
Readable.ReadableState = ReadableState;                                                                                // 19
                                                                                                                       // 20
var EE = require('events');                                                                                            // 21
                                                                                                                       // 22
/*<replacement>*/                                                                                                      // 23
var EElistenerCount = function(emitter, type) {                                                                        // 24
  return emitter.listeners(type).length;                                                                               // 25
};                                                                                                                     // 26
/*</replacement>*/                                                                                                     // 27
                                                                                                                       // 28
                                                                                                                       // 29
                                                                                                                       // 30
/*<replacement>*/                                                                                                      // 31
var Stream;                                                                                                            // 32
(function (){try{                                                                                                      // 33
  Stream = require('st' + 'ream');                                                                                     // 34
}catch(_){}finally{                                                                                                    // 35
  if (!Stream)                                                                                                         // 36
    Stream = require('events').EventEmitter;                                                                           // 37
}}())                                                                                                                  // 38
/*</replacement>*/                                                                                                     // 39
                                                                                                                       // 40
var Buffer = require('buffer').Buffer;                                                                                 // 41
                                                                                                                       // 42
/*<replacement>*/                                                                                                      // 43
var util = require('core-util-is');                                                                                    // 44
util.inherits = require('inherits');                                                                                   // 45
/*</replacement>*/                                                                                                     // 46
                                                                                                                       // 47
                                                                                                                       // 48
                                                                                                                       // 49
/*<replacement>*/                                                                                                      // 50
var debugUtil = require('util');                                                                                       // 51
var debug;                                                                                                             // 52
if (debugUtil && debugUtil.debuglog) {                                                                                 // 53
  debug = debugUtil.debuglog('stream');                                                                                // 54
} else {                                                                                                               // 55
  debug = function () {};                                                                                              // 56
}                                                                                                                      // 57
/*</replacement>*/                                                                                                     // 58
                                                                                                                       // 59
var StringDecoder;                                                                                                     // 60
                                                                                                                       // 61
util.inherits(Readable, Stream);                                                                                       // 62
                                                                                                                       // 63
var Duplex;                                                                                                            // 64
function ReadableState(options, stream) {                                                                              // 65
  Duplex = Duplex || require('./_stream_duplex');                                                                      // 66
                                                                                                                       // 67
  options = options || {};                                                                                             // 68
                                                                                                                       // 69
  // object stream flag. Used to make read(n) ignore n and to                                                          // 70
  // make all the buffer merging and length checks go away                                                             // 71
  this.objectMode = !!options.objectMode;                                                                              // 72
                                                                                                                       // 73
  if (stream instanceof Duplex)                                                                                        // 74
    this.objectMode = this.objectMode || !!options.readableObjectMode;                                                 // 75
                                                                                                                       // 76
  // the point at which it stops calling _read() to fill the buffer                                                    // 77
  // Note: 0 is a valid value, means "don't call _read preemptively ever"                                              // 78
  var hwm = options.highWaterMark;                                                                                     // 79
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;                                                                   // 80
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                          // 81
                                                                                                                       // 82
  // cast to ints.                                                                                                     // 83
  this.highWaterMark = ~~this.highWaterMark;                                                                           // 84
                                                                                                                       // 85
  this.buffer = [];                                                                                                    // 86
  this.length = 0;                                                                                                     // 87
  this.pipes = null;                                                                                                   // 88
  this.pipesCount = 0;                                                                                                 // 89
  this.flowing = null;                                                                                                 // 90
  this.ended = false;                                                                                                  // 91
  this.endEmitted = false;                                                                                             // 92
  this.reading = false;                                                                                                // 93
                                                                                                                       // 94
  // a flag to be able to tell if the onwrite cb is called immediately,                                                // 95
  // or on a later tick.  We set this to true at first, because any                                                    // 96
  // actions that shouldn't happen until "later" should generally also                                                 // 97
  // not happen before the first write call.                                                                           // 98
  this.sync = true;                                                                                                    // 99
                                                                                                                       // 100
  // whenever we return null, then we set a flag to say                                                                // 101
  // that we're awaiting a 'readable' event emission.                                                                  // 102
  this.needReadable = false;                                                                                           // 103
  this.emittedReadable = false;                                                                                        // 104
  this.readableListening = false;                                                                                      // 105
                                                                                                                       // 106
  // Crypto is kind of old and crusty.  Historically, its default string                                               // 107
  // encoding is 'binary' so we have to make this configurable.                                                        // 108
  // Everything else in the universe uses 'utf8', though.                                                              // 109
  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                            // 110
                                                                                                                       // 111
  // when piping, we only care about 'readable' events that happen                                                     // 112
  // after read()ing all the bytes and not getting any pushback.                                                       // 113
  this.ranOut = false;                                                                                                 // 114
                                                                                                                       // 115
  // the number of writers that are awaiting a drain event in .pipe()s                                                 // 116
  this.awaitDrain = 0;                                                                                                 // 117
                                                                                                                       // 118
  // if true, a maybeReadMore has been scheduled                                                                       // 119
  this.readingMore = false;                                                                                            // 120
                                                                                                                       // 121
  this.decoder = null;                                                                                                 // 122
  this.encoding = null;                                                                                                // 123
  if (options.encoding) {                                                                                              // 124
    if (!StringDecoder)                                                                                                // 125
      StringDecoder = require('string_decoder/').StringDecoder;                                                        // 126
    this.decoder = new StringDecoder(options.encoding);                                                                // 127
    this.encoding = options.encoding;                                                                                  // 128
  }                                                                                                                    // 129
}                                                                                                                      // 130
                                                                                                                       // 131
var Duplex;                                                                                                            // 132
function Readable(options) {                                                                                           // 133
  Duplex = Duplex || require('./_stream_duplex');                                                                      // 134
                                                                                                                       // 135
  if (!(this instanceof Readable))                                                                                     // 136
    return new Readable(options);                                                                                      // 137
                                                                                                                       // 138
  this._readableState = new ReadableState(options, this);                                                              // 139
                                                                                                                       // 140
  // legacy                                                                                                            // 141
  this.readable = true;                                                                                                // 142
                                                                                                                       // 143
  if (options && typeof options.read === 'function')                                                                   // 144
    this._read = options.read;                                                                                         // 145
                                                                                                                       // 146
  Stream.call(this);                                                                                                   // 147
}                                                                                                                      // 148
                                                                                                                       // 149
// Manually shove something into the read() buffer.                                                                    // 150
// This returns true if the highWaterMark has not been hit yet,                                                        // 151
// similar to how Writable.write() returns true if you should                                                          // 152
// write() some more.                                                                                                  // 153
Readable.prototype.push = function(chunk, encoding) {                                                                  // 154
  var state = this._readableState;                                                                                     // 155
                                                                                                                       // 156
  if (!state.objectMode && typeof chunk === 'string') {                                                                // 157
    encoding = encoding || state.defaultEncoding;                                                                      // 158
    if (encoding !== state.encoding) {                                                                                 // 159
      chunk = new Buffer(chunk, encoding);                                                                             // 160
      encoding = '';                                                                                                   // 161
    }                                                                                                                  // 162
  }                                                                                                                    // 163
                                                                                                                       // 164
  return readableAddChunk(this, state, chunk, encoding, false);                                                        // 165
};                                                                                                                     // 166
                                                                                                                       // 167
// Unshift should *always* be something directly out of read()                                                         // 168
Readable.prototype.unshift = function(chunk) {                                                                         // 169
  var state = this._readableState;                                                                                     // 170
  return readableAddChunk(this, state, chunk, '', true);                                                               // 171
};                                                                                                                     // 172
                                                                                                                       // 173
Readable.prototype.isPaused = function() {                                                                             // 174
  return this._readableState.flowing === false;                                                                        // 175
};                                                                                                                     // 176
                                                                                                                       // 177
function readableAddChunk(stream, state, chunk, encoding, addToFront) {                                                // 178
  var er = chunkInvalid(state, chunk);                                                                                 // 179
  if (er) {                                                                                                            // 180
    stream.emit('error', er);                                                                                          // 181
  } else if (chunk === null) {                                                                                         // 182
    state.reading = false;                                                                                             // 183
    onEofChunk(stream, state);                                                                                         // 184
  } else if (state.objectMode || chunk && chunk.length > 0) {                                                          // 185
    if (state.ended && !addToFront) {                                                                                  // 186
      var e = new Error('stream.push() after EOF');                                                                    // 187
      stream.emit('error', e);                                                                                         // 188
    } else if (state.endEmitted && addToFront) {                                                                       // 189
      var e = new Error('stream.unshift() after end event');                                                           // 190
      stream.emit('error', e);                                                                                         // 191
    } else {                                                                                                           // 192
      if (state.decoder && !addToFront && !encoding)                                                                   // 193
        chunk = state.decoder.write(chunk);                                                                            // 194
                                                                                                                       // 195
      if (!addToFront)                                                                                                 // 196
        state.reading = false;                                                                                         // 197
                                                                                                                       // 198
      // if we want the data now, just emit it.                                                                        // 199
      if (state.flowing && state.length === 0 && !state.sync) {                                                        // 200
        stream.emit('data', chunk);                                                                                    // 201
        stream.read(0);                                                                                                // 202
      } else {                                                                                                         // 203
        // update the buffer info.                                                                                     // 204
        state.length += state.objectMode ? 1 : chunk.length;                                                           // 205
        if (addToFront)                                                                                                // 206
          state.buffer.unshift(chunk);                                                                                 // 207
        else                                                                                                           // 208
          state.buffer.push(chunk);                                                                                    // 209
                                                                                                                       // 210
        if (state.needReadable)                                                                                        // 211
          emitReadable(stream);                                                                                        // 212
      }                                                                                                                // 213
                                                                                                                       // 214
      maybeReadMore(stream, state);                                                                                    // 215
    }                                                                                                                  // 216
  } else if (!addToFront) {                                                                                            // 217
    state.reading = false;                                                                                             // 218
  }                                                                                                                    // 219
                                                                                                                       // 220
  return needMoreData(state);                                                                                          // 221
}                                                                                                                      // 222
                                                                                                                       // 223
                                                                                                                       // 224
// if it's past the high water mark, we can push in some more.                                                         // 225
// Also, if we have no data yet, we can stand some                                                                     // 226
// more bytes.  This is to work around cases where hwm=0,                                                              // 227
// such as the repl.  Also, if the push() triggered a                                                                  // 228
// readable event, and the user called read(largeNumber) such that                                                     // 229
// needReadable was set, then we ought to push more, so that another                                                   // 230
// 'readable' event will be triggered.                                                                                 // 231
function needMoreData(state) {                                                                                         // 232
  return !state.ended &&                                                                                               // 233
         (state.needReadable ||                                                                                        // 234
          state.length < state.highWaterMark ||                                                                        // 235
          state.length === 0);                                                                                         // 236
}                                                                                                                      // 237
                                                                                                                       // 238
// backwards compatibility.                                                                                            // 239
Readable.prototype.setEncoding = function(enc) {                                                                       // 240
  if (!StringDecoder)                                                                                                  // 241
    StringDecoder = require('string_decoder/').StringDecoder;                                                          // 242
  this._readableState.decoder = new StringDecoder(enc);                                                                // 243
  this._readableState.encoding = enc;                                                                                  // 244
  return this;                                                                                                         // 245
};                                                                                                                     // 246
                                                                                                                       // 247
// Don't raise the hwm > 8MB                                                                                           // 248
var MAX_HWM = 0x800000;                                                                                                // 249
function computeNewHighWaterMark(n) {                                                                                  // 250
  if (n >= MAX_HWM) {                                                                                                  // 251
    n = MAX_HWM;                                                                                                       // 252
  } else {                                                                                                             // 253
    // Get the next highest power of 2                                                                                 // 254
    n--;                                                                                                               // 255
    n |= n >>> 1;                                                                                                      // 256
    n |= n >>> 2;                                                                                                      // 257
    n |= n >>> 4;                                                                                                      // 258
    n |= n >>> 8;                                                                                                      // 259
    n |= n >>> 16;                                                                                                     // 260
    n++;                                                                                                               // 261
  }                                                                                                                    // 262
  return n;                                                                                                            // 263
}                                                                                                                      // 264
                                                                                                                       // 265
function howMuchToRead(n, state) {                                                                                     // 266
  if (state.length === 0 && state.ended)                                                                               // 267
    return 0;                                                                                                          // 268
                                                                                                                       // 269
  if (state.objectMode)                                                                                                // 270
    return n === 0 ? 0 : 1;                                                                                            // 271
                                                                                                                       // 272
  if (n === null || isNaN(n)) {                                                                                        // 273
    // only flow one buffer at a time                                                                                  // 274
    if (state.flowing && state.buffer.length)                                                                          // 275
      return state.buffer[0].length;                                                                                   // 276
    else                                                                                                               // 277
      return state.length;                                                                                             // 278
  }                                                                                                                    // 279
                                                                                                                       // 280
  if (n <= 0)                                                                                                          // 281
    return 0;                                                                                                          // 282
                                                                                                                       // 283
  // If we're asking for more than the target buffer level,                                                            // 284
  // then raise the water mark.  Bump up to the next highest                                                           // 285
  // power of 2, to prevent increasing it excessively in tiny                                                          // 286
  // amounts.                                                                                                          // 287
  if (n > state.highWaterMark)                                                                                         // 288
    state.highWaterMark = computeNewHighWaterMark(n);                                                                  // 289
                                                                                                                       // 290
  // don't have that much.  return null, unless we've ended.                                                           // 291
  if (n > state.length) {                                                                                              // 292
    if (!state.ended) {                                                                                                // 293
      state.needReadable = true;                                                                                       // 294
      return 0;                                                                                                        // 295
    } else {                                                                                                           // 296
      return state.length;                                                                                             // 297
    }                                                                                                                  // 298
  }                                                                                                                    // 299
                                                                                                                       // 300
  return n;                                                                                                            // 301
}                                                                                                                      // 302
                                                                                                                       // 303
// you can override either this method, or the async _read(n) below.                                                   // 304
Readable.prototype.read = function(n) {                                                                                // 305
  debug('read', n);                                                                                                    // 306
  var state = this._readableState;                                                                                     // 307
  var nOrig = n;                                                                                                       // 308
                                                                                                                       // 309
  if (typeof n !== 'number' || n > 0)                                                                                  // 310
    state.emittedReadable = false;                                                                                     // 311
                                                                                                                       // 312
  // if we're doing read(0) to trigger a readable event, but we                                                        // 313
  // already have a bunch of data in the buffer, then just trigger                                                     // 314
  // the 'readable' event and move on.                                                                                 // 315
  if (n === 0 &&                                                                                                       // 316
      state.needReadable &&                                                                                            // 317
      (state.length >= state.highWaterMark || state.ended)) {                                                          // 318
    debug('read: emitReadable', state.length, state.ended);                                                            // 319
    if (state.length === 0 && state.ended)                                                                             // 320
      endReadable(this);                                                                                               // 321
    else                                                                                                               // 322
      emitReadable(this);                                                                                              // 323
    return null;                                                                                                       // 324
  }                                                                                                                    // 325
                                                                                                                       // 326
  n = howMuchToRead(n, state);                                                                                         // 327
                                                                                                                       // 328
  // if we've ended, and we're now clear, then finish it up.                                                           // 329
  if (n === 0 && state.ended) {                                                                                        // 330
    if (state.length === 0)                                                                                            // 331
      endReadable(this);                                                                                               // 332
    return null;                                                                                                       // 333
  }                                                                                                                    // 334
                                                                                                                       // 335
  // All the actual chunk generation logic needs to be                                                                 // 336
  // *below* the call to _read.  The reason is that in certain                                                         // 337
  // synthetic stream cases, such as passthrough streams, _read                                                        // 338
  // may be a completely synchronous operation which may change                                                        // 339
  // the state of the read buffer, providing enough data when                                                          // 340
  // before there was *not* enough.                                                                                    // 341
  //                                                                                                                   // 342
  // So, the steps are:                                                                                                // 343
  // 1. Figure out what the state of things will be after we do                                                        // 344
  // a read from the buffer.                                                                                           // 345
  //                                                                                                                   // 346
  // 2. If that resulting state will trigger a _read, then call _read.                                                 // 347
  // Note that this may be asynchronous, or synchronous.  Yes, it is                                                   // 348
  // deeply ugly to write APIs this way, but that still doesn't mean                                                   // 349
  // that the Readable class should behave improperly, as streams are                                                  // 350
  // designed to be sync/async agnostic.                                                                               // 351
  // Take note if the _read call is sync or async (ie, if the read call                                                // 352
  // has returned yet), so that we know whether or not it's safe to emit                                               // 353
  // 'readable' etc.                                                                                                   // 354
  //                                                                                                                   // 355
  // 3. Actually pull the requested chunks out of the buffer and return.                                               // 356
                                                                                                                       // 357
  // if we need a readable event, then we need to do some reading.                                                     // 358
  var doRead = state.needReadable;                                                                                     // 359
  debug('need readable', doRead);                                                                                      // 360
                                                                                                                       // 361
  // if we currently have less than the highWaterMark, then also read some                                             // 362
  if (state.length === 0 || state.length - n < state.highWaterMark) {                                                  // 363
    doRead = true;                                                                                                     // 364
    debug('length less than watermark', doRead);                                                                       // 365
  }                                                                                                                    // 366
                                                                                                                       // 367
  // however, if we've ended, then there's no point, and if we're already                                              // 368
  // reading, then it's unnecessary.                                                                                   // 369
  if (state.ended || state.reading) {                                                                                  // 370
    doRead = false;                                                                                                    // 371
    debug('reading or ended', doRead);                                                                                 // 372
  }                                                                                                                    // 373
                                                                                                                       // 374
  if (doRead) {                                                                                                        // 375
    debug('do read');                                                                                                  // 376
    state.reading = true;                                                                                              // 377
    state.sync = true;                                                                                                 // 378
    // if the length is currently zero, then we *need* a readable event.                                               // 379
    if (state.length === 0)                                                                                            // 380
      state.needReadable = true;                                                                                       // 381
    // call internal read method                                                                                       // 382
    this._read(state.highWaterMark);                                                                                   // 383
    state.sync = false;                                                                                                // 384
  }                                                                                                                    // 385
                                                                                                                       // 386
  // If _read pushed data synchronously, then `reading` will be false,                                                 // 387
  // and we need to re-evaluate how much data we can return to the user.                                               // 388
  if (doRead && !state.reading)                                                                                        // 389
    n = howMuchToRead(nOrig, state);                                                                                   // 390
                                                                                                                       // 391
  var ret;                                                                                                             // 392
  if (n > 0)                                                                                                           // 393
    ret = fromList(n, state);                                                                                          // 394
  else                                                                                                                 // 395
    ret = null;                                                                                                        // 396
                                                                                                                       // 397
  if (ret === null) {                                                                                                  // 398
    state.needReadable = true;                                                                                         // 399
    n = 0;                                                                                                             // 400
  }                                                                                                                    // 401
                                                                                                                       // 402
  state.length -= n;                                                                                                   // 403
                                                                                                                       // 404
  // If we have nothing in the buffer, then we want to know                                                            // 405
  // as soon as we *do* get something into the buffer.                                                                 // 406
  if (state.length === 0 && !state.ended)                                                                              // 407
    state.needReadable = true;                                                                                         // 408
                                                                                                                       // 409
  // If we tried to read() past the EOF, then emit end on the next tick.                                               // 410
  if (nOrig !== n && state.ended && state.length === 0)                                                                // 411
    endReadable(this);                                                                                                 // 412
                                                                                                                       // 413
  if (ret !== null)                                                                                                    // 414
    this.emit('data', ret);                                                                                            // 415
                                                                                                                       // 416
  return ret;                                                                                                          // 417
};                                                                                                                     // 418
                                                                                                                       // 419
function chunkInvalid(state, chunk) {                                                                                  // 420
  var er = null;                                                                                                       // 421
  if (!(Buffer.isBuffer(chunk)) &&                                                                                     // 422
      typeof chunk !== 'string' &&                                                                                     // 423
      chunk !== null &&                                                                                                // 424
      chunk !== undefined &&                                                                                           // 425
      !state.objectMode) {                                                                                             // 426
    er = new TypeError('Invalid non-string/buffer chunk');                                                             // 427
  }                                                                                                                    // 428
  return er;                                                                                                           // 429
}                                                                                                                      // 430
                                                                                                                       // 431
                                                                                                                       // 432
function onEofChunk(stream, state) {                                                                                   // 433
  if (state.ended) return;                                                                                             // 434
  if (state.decoder) {                                                                                                 // 435
    var chunk = state.decoder.end();                                                                                   // 436
    if (chunk && chunk.length) {                                                                                       // 437
      state.buffer.push(chunk);                                                                                        // 438
      state.length += state.objectMode ? 1 : chunk.length;                                                             // 439
    }                                                                                                                  // 440
  }                                                                                                                    // 441
  state.ended = true;                                                                                                  // 442
                                                                                                                       // 443
  // emit 'readable' now to make sure it gets picked up.                                                               // 444
  emitReadable(stream);                                                                                                // 445
}                                                                                                                      // 446
                                                                                                                       // 447
// Don't emit readable right away in sync mode, because this can trigger                                               // 448
// another read() call => stack overflow.  This way, it might trigger                                                  // 449
// a nextTick recursion warning, but that's not so bad.                                                                // 450
function emitReadable(stream) {                                                                                        // 451
  var state = stream._readableState;                                                                                   // 452
  state.needReadable = false;                                                                                          // 453
  if (!state.emittedReadable) {                                                                                        // 454
    debug('emitReadable', state.flowing);                                                                              // 455
    state.emittedReadable = true;                                                                                      // 456
    if (state.sync)                                                                                                    // 457
      processNextTick(emitReadable_, stream);                                                                          // 458
    else                                                                                                               // 459
      emitReadable_(stream);                                                                                           // 460
  }                                                                                                                    // 461
}                                                                                                                      // 462
                                                                                                                       // 463
function emitReadable_(stream) {                                                                                       // 464
  debug('emit readable');                                                                                              // 465
  stream.emit('readable');                                                                                             // 466
  flow(stream);                                                                                                        // 467
}                                                                                                                      // 468
                                                                                                                       // 469
                                                                                                                       // 470
// at this point, the user has presumably seen the 'readable' event,                                                   // 471
// and called read() to consume some data.  that may have triggered                                                    // 472
// in turn another _read(n) call, in which case reading = true if                                                      // 473
// it's in progress.                                                                                                   // 474
// However, if we're not ended, or reading, and the length < hwm,                                                      // 475
// then go ahead and try to read some more preemptively.                                                               // 476
function maybeReadMore(stream, state) {                                                                                // 477
  if (!state.readingMore) {                                                                                            // 478
    state.readingMore = true;                                                                                          // 479
    processNextTick(maybeReadMore_, stream, state);                                                                    // 480
  }                                                                                                                    // 481
}                                                                                                                      // 482
                                                                                                                       // 483
function maybeReadMore_(stream, state) {                                                                               // 484
  var len = state.length;                                                                                              // 485
  while (!state.reading && !state.flowing && !state.ended &&                                                           // 486
         state.length < state.highWaterMark) {                                                                         // 487
    debug('maybeReadMore read 0');                                                                                     // 488
    stream.read(0);                                                                                                    // 489
    if (len === state.length)                                                                                          // 490
      // didn't get any data, stop spinning.                                                                           // 491
      break;                                                                                                           // 492
    else                                                                                                               // 493
      len = state.length;                                                                                              // 494
  }                                                                                                                    // 495
  state.readingMore = false;                                                                                           // 496
}                                                                                                                      // 497
                                                                                                                       // 498
// abstract method.  to be overridden in specific implementation classes.                                              // 499
// call cb(er, data) where data is <= n in length.                                                                     // 500
// for virtual (non-string, non-buffer) streams, "length" is somewhat                                                  // 501
// arbitrary, and perhaps not very meaningful.                                                                         // 502
Readable.prototype._read = function(n) {                                                                               // 503
  this.emit('error', new Error('not implemented'));                                                                    // 504
};                                                                                                                     // 505
                                                                                                                       // 506
Readable.prototype.pipe = function(dest, pipeOpts) {                                                                   // 507
  var src = this;                                                                                                      // 508
  var state = this._readableState;                                                                                     // 509
                                                                                                                       // 510
  switch (state.pipesCount) {                                                                                          // 511
    case 0:                                                                                                            // 512
      state.pipes = dest;                                                                                              // 513
      break;                                                                                                           // 514
    case 1:                                                                                                            // 515
      state.pipes = [state.pipes, dest];                                                                               // 516
      break;                                                                                                           // 517
    default:                                                                                                           // 518
      state.pipes.push(dest);                                                                                          // 519
      break;                                                                                                           // 520
  }                                                                                                                    // 521
  state.pipesCount += 1;                                                                                               // 522
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);                                                          // 523
                                                                                                                       // 524
  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&                                                                 // 525
              dest !== process.stdout &&                                                                               // 526
              dest !== process.stderr;                                                                                 // 527
                                                                                                                       // 528
  var endFn = doEnd ? onend : cleanup;                                                                                 // 529
  if (state.endEmitted)                                                                                                // 530
    processNextTick(endFn);                                                                                            // 531
  else                                                                                                                 // 532
    src.once('end', endFn);                                                                                            // 533
                                                                                                                       // 534
  dest.on('unpipe', onunpipe);                                                                                         // 535
  function onunpipe(readable) {                                                                                        // 536
    debug('onunpipe');                                                                                                 // 537
    if (readable === src) {                                                                                            // 538
      cleanup();                                                                                                       // 539
    }                                                                                                                  // 540
  }                                                                                                                    // 541
                                                                                                                       // 542
  function onend() {                                                                                                   // 543
    debug('onend');                                                                                                    // 544
    dest.end();                                                                                                        // 545
  }                                                                                                                    // 546
                                                                                                                       // 547
  // when the dest drains, it reduces the awaitDrain counter                                                           // 548
  // on the source.  This would be more elegant with a .once()                                                         // 549
  // handler in flow(), but adding and removing repeatedly is                                                          // 550
  // too slow.                                                                                                         // 551
  var ondrain = pipeOnDrain(src);                                                                                      // 552
  dest.on('drain', ondrain);                                                                                           // 553
                                                                                                                       // 554
  var cleanedUp = false;                                                                                               // 555
  function cleanup() {                                                                                                 // 556
    debug('cleanup');                                                                                                  // 557
    // cleanup event handlers once the pipe is broken                                                                  // 558
    dest.removeListener('close', onclose);                                                                             // 559
    dest.removeListener('finish', onfinish);                                                                           // 560
    dest.removeListener('drain', ondrain);                                                                             // 561
    dest.removeListener('error', onerror);                                                                             // 562
    dest.removeListener('unpipe', onunpipe);                                                                           // 563
    src.removeListener('end', onend);                                                                                  // 564
    src.removeListener('end', cleanup);                                                                                // 565
    src.removeListener('data', ondata);                                                                                // 566
                                                                                                                       // 567
    cleanedUp = true;                                                                                                  // 568
                                                                                                                       // 569
    // if the reader is waiting for a drain event from this                                                            // 570
    // specific writer, then it would cause it to never start                                                          // 571
    // flowing again.                                                                                                  // 572
    // So, if this is awaiting a drain, then we just call it now.                                                      // 573
    // If we don't know, then assume that we are waiting for one.                                                      // 574
    if (state.awaitDrain &&                                                                                            // 575
        (!dest._writableState || dest._writableState.needDrain))                                                       // 576
      ondrain();                                                                                                       // 577
  }                                                                                                                    // 578
                                                                                                                       // 579
  src.on('data', ondata);                                                                                              // 580
  function ondata(chunk) {                                                                                             // 581
    debug('ondata');                                                                                                   // 582
    var ret = dest.write(chunk);                                                                                       // 583
    if (false === ret) {                                                                                               // 584
      // If the user unpiped during `dest.write()`, it is possible                                                     // 585
      // to get stuck in a permanently paused state if that write                                                      // 586
      // also returned false.                                                                                          // 587
      if (state.pipesCount === 1 &&                                                                                    // 588
          state.pipes[0] === dest &&                                                                                   // 589
          src.listenerCount('data') === 1 &&                                                                           // 590
          !cleanedUp) {                                                                                                // 591
        debug('false write response, pause', src._readableState.awaitDrain);                                           // 592
        src._readableState.awaitDrain++;                                                                               // 593
      }                                                                                                                // 594
      src.pause();                                                                                                     // 595
    }                                                                                                                  // 596
  }                                                                                                                    // 597
                                                                                                                       // 598
  // if the dest has an error, then stop piping into it.                                                               // 599
  // however, don't suppress the throwing behavior for this.                                                           // 600
  function onerror(er) {                                                                                               // 601
    debug('onerror', er);                                                                                              // 602
    unpipe();                                                                                                          // 603
    dest.removeListener('error', onerror);                                                                             // 604
    if (EElistenerCount(dest, 'error') === 0)                                                                          // 605
      dest.emit('error', er);                                                                                          // 606
  }                                                                                                                    // 607
  // This is a brutally ugly hack to make sure that our error handler                                                  // 608
  // is attached before any userland ones.  NEVER DO THIS.                                                             // 609
  if (!dest._events || !dest._events.error)                                                                            // 610
    dest.on('error', onerror);                                                                                         // 611
  else if (isArray(dest._events.error))                                                                                // 612
    dest._events.error.unshift(onerror);                                                                               // 613
  else                                                                                                                 // 614
    dest._events.error = [onerror, dest._events.error];                                                                // 615
                                                                                                                       // 616
                                                                                                                       // 617
  // Both close and finish should trigger unpipe, but only once.                                                       // 618
  function onclose() {                                                                                                 // 619
    dest.removeListener('finish', onfinish);                                                                           // 620
    unpipe();                                                                                                          // 621
  }                                                                                                                    // 622
  dest.once('close', onclose);                                                                                         // 623
  function onfinish() {                                                                                                // 624
    debug('onfinish');                                                                                                 // 625
    dest.removeListener('close', onclose);                                                                             // 626
    unpipe();                                                                                                          // 627
  }                                                                                                                    // 628
  dest.once('finish', onfinish);                                                                                       // 629
                                                                                                                       // 630
  function unpipe() {                                                                                                  // 631
    debug('unpipe');                                                                                                   // 632
    src.unpipe(dest);                                                                                                  // 633
  }                                                                                                                    // 634
                                                                                                                       // 635
  // tell the dest that it's being piped to                                                                            // 636
  dest.emit('pipe', src);                                                                                              // 637
                                                                                                                       // 638
  // start the flow if it hasn't been started already.                                                                 // 639
  if (!state.flowing) {                                                                                                // 640
    debug('pipe resume');                                                                                              // 641
    src.resume();                                                                                                      // 642
  }                                                                                                                    // 643
                                                                                                                       // 644
  return dest;                                                                                                         // 645
};                                                                                                                     // 646
                                                                                                                       // 647
function pipeOnDrain(src) {                                                                                            // 648
  return function() {                                                                                                  // 649
    var state = src._readableState;                                                                                    // 650
    debug('pipeOnDrain', state.awaitDrain);                                                                            // 651
    if (state.awaitDrain)                                                                                              // 652
      state.awaitDrain--;                                                                                              // 653
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {                                                      // 654
      state.flowing = true;                                                                                            // 655
      flow(src);                                                                                                       // 656
    }                                                                                                                  // 657
  };                                                                                                                   // 658
}                                                                                                                      // 659
                                                                                                                       // 660
                                                                                                                       // 661
Readable.prototype.unpipe = function(dest) {                                                                           // 662
  var state = this._readableState;                                                                                     // 663
                                                                                                                       // 664
  // if we're not piping anywhere, then do nothing.                                                                    // 665
  if (state.pipesCount === 0)                                                                                          // 666
    return this;                                                                                                       // 667
                                                                                                                       // 668
  // just one destination.  most common case.                                                                          // 669
  if (state.pipesCount === 1) {                                                                                        // 670
    // passed in one, but it's not the right one.                                                                      // 671
    if (dest && dest !== state.pipes)                                                                                  // 672
      return this;                                                                                                     // 673
                                                                                                                       // 674
    if (!dest)                                                                                                         // 675
      dest = state.pipes;                                                                                              // 676
                                                                                                                       // 677
    // got a match.                                                                                                    // 678
    state.pipes = null;                                                                                                // 679
    state.pipesCount = 0;                                                                                              // 680
    state.flowing = false;                                                                                             // 681
    if (dest)                                                                                                          // 682
      dest.emit('unpipe', this);                                                                                       // 683
    return this;                                                                                                       // 684
  }                                                                                                                    // 685
                                                                                                                       // 686
  // slow case. multiple pipe destinations.                                                                            // 687
                                                                                                                       // 688
  if (!dest) {                                                                                                         // 689
    // remove all.                                                                                                     // 690
    var dests = state.pipes;                                                                                           // 691
    var len = state.pipesCount;                                                                                        // 692
    state.pipes = null;                                                                                                // 693
    state.pipesCount = 0;                                                                                              // 694
    state.flowing = false;                                                                                             // 695
                                                                                                                       // 696
    for (var i = 0; i < len; i++)                                                                                      // 697
      dests[i].emit('unpipe', this);                                                                                   // 698
    return this;                                                                                                       // 699
  }                                                                                                                    // 700
                                                                                                                       // 701
  // try to find the right one.                                                                                        // 702
  var i = indexOf(state.pipes, dest);                                                                                  // 703
  if (i === -1)                                                                                                        // 704
    return this;                                                                                                       // 705
                                                                                                                       // 706
  state.pipes.splice(i, 1);                                                                                            // 707
  state.pipesCount -= 1;                                                                                               // 708
  if (state.pipesCount === 1)                                                                                          // 709
    state.pipes = state.pipes[0];                                                                                      // 710
                                                                                                                       // 711
  dest.emit('unpipe', this);                                                                                           // 712
                                                                                                                       // 713
  return this;                                                                                                         // 714
};                                                                                                                     // 715
                                                                                                                       // 716
// set up data events if they are asked for                                                                            // 717
// Ensure readable listeners eventually get something                                                                  // 718
Readable.prototype.on = function(ev, fn) {                                                                             // 719
  var res = Stream.prototype.on.call(this, ev, fn);                                                                    // 720
                                                                                                                       // 721
  // If listening to data, and it has not explicitly been paused,                                                      // 722
  // then call resume to start the flow of data on the next tick.                                                      // 723
  if (ev === 'data' && false !== this._readableState.flowing) {                                                        // 724
    this.resume();                                                                                                     // 725
  }                                                                                                                    // 726
                                                                                                                       // 727
  if (ev === 'readable' && this.readable) {                                                                            // 728
    var state = this._readableState;                                                                                   // 729
    if (!state.readableListening) {                                                                                    // 730
      state.readableListening = true;                                                                                  // 731
      state.emittedReadable = false;                                                                                   // 732
      state.needReadable = true;                                                                                       // 733
      if (!state.reading) {                                                                                            // 734
        processNextTick(nReadingNextTick, this);                                                                       // 735
      } else if (state.length) {                                                                                       // 736
        emitReadable(this, state);                                                                                     // 737
      }                                                                                                                // 738
    }                                                                                                                  // 739
  }                                                                                                                    // 740
                                                                                                                       // 741
  return res;                                                                                                          // 742
};                                                                                                                     // 743
Readable.prototype.addListener = Readable.prototype.on;                                                                // 744
                                                                                                                       // 745
function nReadingNextTick(self) {                                                                                      // 746
  debug('readable nexttick read 0');                                                                                   // 747
  self.read(0);                                                                                                        // 748
}                                                                                                                      // 749
                                                                                                                       // 750
// pause() and resume() are remnants of the legacy readable stream API                                                 // 751
// If the user uses them, then switch into old mode.                                                                   // 752
Readable.prototype.resume = function() {                                                                               // 753
  var state = this._readableState;                                                                                     // 754
  if (!state.flowing) {                                                                                                // 755
    debug('resume');                                                                                                   // 756
    state.flowing = true;                                                                                              // 757
    resume(this, state);                                                                                               // 758
  }                                                                                                                    // 759
  return this;                                                                                                         // 760
};                                                                                                                     // 761
                                                                                                                       // 762
function resume(stream, state) {                                                                                       // 763
  if (!state.resumeScheduled) {                                                                                        // 764
    state.resumeScheduled = true;                                                                                      // 765
    processNextTick(resume_, stream, state);                                                                           // 766
  }                                                                                                                    // 767
}                                                                                                                      // 768
                                                                                                                       // 769
function resume_(stream, state) {                                                                                      // 770
  if (!state.reading) {                                                                                                // 771
    debug('resume read 0');                                                                                            // 772
    stream.read(0);                                                                                                    // 773
  }                                                                                                                    // 774
                                                                                                                       // 775
  state.resumeScheduled = false;                                                                                       // 776
  stream.emit('resume');                                                                                               // 777
  flow(stream);                                                                                                        // 778
  if (state.flowing && !state.reading)                                                                                 // 779
    stream.read(0);                                                                                                    // 780
}                                                                                                                      // 781
                                                                                                                       // 782
Readable.prototype.pause = function() {                                                                                // 783
  debug('call pause flowing=%j', this._readableState.flowing);                                                         // 784
  if (false !== this._readableState.flowing) {                                                                         // 785
    debug('pause');                                                                                                    // 786
    this._readableState.flowing = false;                                                                               // 787
    this.emit('pause');                                                                                                // 788
  }                                                                                                                    // 789
  return this;                                                                                                         // 790
};                                                                                                                     // 791
                                                                                                                       // 792
function flow(stream) {                                                                                                // 793
  var state = stream._readableState;                                                                                   // 794
  debug('flow', state.flowing);                                                                                        // 795
  if (state.flowing) {                                                                                                 // 796
    do {                                                                                                               // 797
      var chunk = stream.read();                                                                                       // 798
    } while (null !== chunk && state.flowing);                                                                         // 799
  }                                                                                                                    // 800
}                                                                                                                      // 801
                                                                                                                       // 802
// wrap an old-style stream as the async data source.                                                                  // 803
// This is *not* part of the readable stream interface.                                                                // 804
// It is an ugly unfortunate mess of history.                                                                          // 805
Readable.prototype.wrap = function(stream) {                                                                           // 806
  var state = this._readableState;                                                                                     // 807
  var paused = false;                                                                                                  // 808
                                                                                                                       // 809
  var self = this;                                                                                                     // 810
  stream.on('end', function() {                                                                                        // 811
    debug('wrapped end');                                                                                              // 812
    if (state.decoder && !state.ended) {                                                                               // 813
      var chunk = state.decoder.end();                                                                                 // 814
      if (chunk && chunk.length)                                                                                       // 815
        self.push(chunk);                                                                                              // 816
    }                                                                                                                  // 817
                                                                                                                       // 818
    self.push(null);                                                                                                   // 819
  });                                                                                                                  // 820
                                                                                                                       // 821
  stream.on('data', function(chunk) {                                                                                  // 822
    debug('wrapped data');                                                                                             // 823
    if (state.decoder)                                                                                                 // 824
      chunk = state.decoder.write(chunk);                                                                              // 825
                                                                                                                       // 826
    // don't skip over falsy values in objectMode                                                                      // 827
    if (state.objectMode && (chunk === null || chunk === undefined))                                                   // 828
      return;                                                                                                          // 829
    else if (!state.objectMode && (!chunk || !chunk.length))                                                           // 830
      return;                                                                                                          // 831
                                                                                                                       // 832
    var ret = self.push(chunk);                                                                                        // 833
    if (!ret) {                                                                                                        // 834
      paused = true;                                                                                                   // 835
      stream.pause();                                                                                                  // 836
    }                                                                                                                  // 837
  });                                                                                                                  // 838
                                                                                                                       // 839
  // proxy all the other methods.                                                                                      // 840
  // important when wrapping filters and duplexes.                                                                     // 841
  for (var i in stream) {                                                                                              // 842
    if (this[i] === undefined && typeof stream[i] === 'function') {                                                    // 843
      this[i] = function(method) { return function() {                                                                 // 844
        return stream[method].apply(stream, arguments);                                                                // 845
      }; }(i);                                                                                                         // 846
    }                                                                                                                  // 847
  }                                                                                                                    // 848
                                                                                                                       // 849
  // proxy certain important events.                                                                                   // 850
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];                                                       // 851
  forEach(events, function(ev) {                                                                                       // 852
    stream.on(ev, self.emit.bind(self, ev));                                                                           // 853
  });                                                                                                                  // 854
                                                                                                                       // 855
  // when we try to consume some more bytes, simply unpause the                                                        // 856
  // underlying stream.                                                                                                // 857
  self._read = function(n) {                                                                                           // 858
    debug('wrapped _read', n);                                                                                         // 859
    if (paused) {                                                                                                      // 860
      paused = false;                                                                                                  // 861
      stream.resume();                                                                                                 // 862
    }                                                                                                                  // 863
  };                                                                                                                   // 864
                                                                                                                       // 865
  return self;                                                                                                         // 866
};                                                                                                                     // 867
                                                                                                                       // 868
                                                                                                                       // 869
// exposed for testing purposes only.                                                                                  // 870
Readable._fromList = fromList;                                                                                         // 871
                                                                                                                       // 872
// Pluck off n bytes from an array of buffers.                                                                         // 873
// Length is the combined lengths of all the buffers in the list.                                                      // 874
function fromList(n, state) {                                                                                          // 875
  var list = state.buffer;                                                                                             // 876
  var length = state.length;                                                                                           // 877
  var stringMode = !!state.decoder;                                                                                    // 878
  var objectMode = !!state.objectMode;                                                                                 // 879
  var ret;                                                                                                             // 880
                                                                                                                       // 881
  // nothing in the list, definitely empty.                                                                            // 882
  if (list.length === 0)                                                                                               // 883
    return null;                                                                                                       // 884
                                                                                                                       // 885
  if (length === 0)                                                                                                    // 886
    ret = null;                                                                                                        // 887
  else if (objectMode)                                                                                                 // 888
    ret = list.shift();                                                                                                // 889
  else if (!n || n >= length) {                                                                                        // 890
    // read it all, truncate the array.                                                                                // 891
    if (stringMode)                                                                                                    // 892
      ret = list.join('');                                                                                             // 893
    else if (list.length === 1)                                                                                        // 894
      ret = list[0];                                                                                                   // 895
    else                                                                                                               // 896
      ret = Buffer.concat(list, length);                                                                               // 897
    list.length = 0;                                                                                                   // 898
  } else {                                                                                                             // 899
    // read just some of it.                                                                                           // 900
    if (n < list[0].length) {                                                                                          // 901
      // just take a part of the first list item.                                                                      // 902
      // slice is the same for buffers and strings.                                                                    // 903
      var buf = list[0];                                                                                               // 904
      ret = buf.slice(0, n);                                                                                           // 905
      list[0] = buf.slice(n);                                                                                          // 906
    } else if (n === list[0].length) {                                                                                 // 907
      // first list is a perfect match                                                                                 // 908
      ret = list.shift();                                                                                              // 909
    } else {                                                                                                           // 910
      // complex case.                                                                                                 // 911
      // we have enough to cover it, but it spans past the first buffer.                                               // 912
      if (stringMode)                                                                                                  // 913
        ret = '';                                                                                                      // 914
      else                                                                                                             // 915
        ret = new Buffer(n);                                                                                           // 916
                                                                                                                       // 917
      var c = 0;                                                                                                       // 918
      for (var i = 0, l = list.length; i < l && c < n; i++) {                                                          // 919
        var buf = list[0];                                                                                             // 920
        var cpy = Math.min(n - c, buf.length);                                                                         // 921
                                                                                                                       // 922
        if (stringMode)                                                                                                // 923
          ret += buf.slice(0, cpy);                                                                                    // 924
        else                                                                                                           // 925
          buf.copy(ret, c, 0, cpy);                                                                                    // 926
                                                                                                                       // 927
        if (cpy < buf.length)                                                                                          // 928
          list[0] = buf.slice(cpy);                                                                                    // 929
        else                                                                                                           // 930
          list.shift();                                                                                                // 931
                                                                                                                       // 932
        c += cpy;                                                                                                      // 933
      }                                                                                                                // 934
    }                                                                                                                  // 935
  }                                                                                                                    // 936
                                                                                                                       // 937
  return ret;                                                                                                          // 938
}                                                                                                                      // 939
                                                                                                                       // 940
function endReadable(stream) {                                                                                         // 941
  var state = stream._readableState;                                                                                   // 942
                                                                                                                       // 943
  // If we get here before consuming all the bytes, then that is a                                                     // 944
  // bug in node.  Should never happen.                                                                                // 945
  if (state.length > 0)                                                                                                // 946
    throw new Error('endReadable called on non-empty stream');                                                         // 947
                                                                                                                       // 948
  if (!state.endEmitted) {                                                                                             // 949
    state.ended = true;                                                                                                // 950
    processNextTick(endReadableNT, state, stream);                                                                     // 951
  }                                                                                                                    // 952
}                                                                                                                      // 953
                                                                                                                       // 954
function endReadableNT(state, stream) {                                                                                // 955
  // Check that we didn't get one last unshift.                                                                        // 956
  if (!state.endEmitted && state.length === 0) {                                                                       // 957
    state.endEmitted = true;                                                                                           // 958
    stream.readable = false;                                                                                           // 959
    stream.emit('end');                                                                                                // 960
  }                                                                                                                    // 961
}                                                                                                                      // 962
                                                                                                                       // 963
function forEach (xs, f) {                                                                                             // 964
  for (var i = 0, l = xs.length; i < l; i++) {                                                                         // 965
    f(xs[i], i);                                                                                                       // 966
  }                                                                                                                    // 967
}                                                                                                                      // 968
                                                                                                                       // 969
function indexOf (xs, x) {                                                                                             // 970
  for (var i = 0, l = xs.length; i < l; i++) {                                                                         // 971
    if (xs[i] === x) return i;                                                                                         // 972
  }                                                                                                                    // 973
  return -1;                                                                                                           // 974
}                                                                                                                      // 975
                                                                                                                       // 976
}).call(this,require('_process'))                                                                                      //
                                                                                                                       //
},{"./_stream_duplex":27,"_process":25,"buffer":17,"core-util-is":32,"events":21,"inherits":22,"isarray":24,"process-nextick-args":33,"string_decoder/":40,"util":3}],30:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do                                                       // 1
// something with the data.  Sometimes it's called a "filter",                                                         // 2
// but that's not a great name for it, since that implies a thing where                                                // 3
// some bits pass through, and others are simply ignored.  (That would                                                 // 4
// be a valid example of a transform, of course.)                                                                      // 5
//                                                                                                                     // 6
// While the output is causally related to the input, it's not a                                                       // 7
// necessarily symmetric or synchronous transformation.  For example,                                                  // 8
// a zlib stream might take multiple plain-text writes(), and then                                                     // 9
// emit a single compressed chunk some time in the future.                                                             // 10
//                                                                                                                     // 11
// Here's how this works:                                                                                              // 12
//                                                                                                                     // 13
// The Transform stream has all the aspects of the readable and writable                                               // 14
// stream classes.  When you write(chunk), that calls _write(chunk,cb)                                                 // 15
// internally, and returns false if there's a lot of pending writes                                                    // 16
// buffered up.  When you call read(), that calls _read(n) until                                                       // 17
// there's enough pending readable data buffered up.                                                                   // 18
//                                                                                                                     // 19
// In a transform stream, the written data is placed in a buffer.  When                                                // 20
// _read(n) is called, it transforms the queued up data, calling the                                                   // 21
// buffered _write cb's as it consumes chunks.  If consuming a single                                                  // 22
// written chunk would result in multiple output chunks, then the first                                                // 23
// outputted bit calls the readcb, and subsequent chunks just go into                                                  // 24
// the read buffer, and will cause it to emit 'readable' if necessary.                                                 // 25
//                                                                                                                     // 26
// This way, back-pressure is actually determined by the reading side,                                                 // 27
// since _read has to be called to start processing a new chunk.  However,                                             // 28
// a pathological inflate type of transform can cause excessive buffering                                              // 29
// here.  For example, imagine a stream where every byte of input is                                                   // 30
// interpreted as an integer from 0-255, and then results in that many                                                 // 31
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in                                                 // 32
// 1kb of data being output.  In this case, you could write a very small                                               // 33
// amount of input, and end up with a very large amount of output.  In                                                 // 34
// such a pathological inflating mechanism, there'd be no way to tell                                                  // 35
// the system to stop doing the transform.  A single 4MB write could                                                   // 36
// cause the system to run out of memory.                                                                              // 37
//                                                                                                                     // 38
// However, even in such a pathological case, only a single written chunk                                              // 39
// would be consumed, and then the rest would wait (un-transformed) until                                              // 40
// the results of the previous transformed chunk were consumed.                                                        // 41
                                                                                                                       // 42
'use strict';                                                                                                          // 43
                                                                                                                       // 44
module.exports = Transform;                                                                                            // 45
                                                                                                                       // 46
var Duplex = require('./_stream_duplex');                                                                              // 47
                                                                                                                       // 48
/*<replacement>*/                                                                                                      // 49
var util = require('core-util-is');                                                                                    // 50
util.inherits = require('inherits');                                                                                   // 51
/*</replacement>*/                                                                                                     // 52
                                                                                                                       // 53
util.inherits(Transform, Duplex);                                                                                      // 54
                                                                                                                       // 55
                                                                                                                       // 56
function TransformState(stream) {                                                                                      // 57
  this.afterTransform = function(er, data) {                                                                           // 58
    return afterTransform(stream, er, data);                                                                           // 59
  };                                                                                                                   // 60
                                                                                                                       // 61
  this.needTransform = false;                                                                                          // 62
  this.transforming = false;                                                                                           // 63
  this.writecb = null;                                                                                                 // 64
  this.writechunk = null;                                                                                              // 65
}                                                                                                                      // 66
                                                                                                                       // 67
function afterTransform(stream, er, data) {                                                                            // 68
  var ts = stream._transformState;                                                                                     // 69
  ts.transforming = false;                                                                                             // 70
                                                                                                                       // 71
  var cb = ts.writecb;                                                                                                 // 72
                                                                                                                       // 73
  if (!cb)                                                                                                             // 74
    return stream.emit('error', new Error('no writecb in Transform class'));                                           // 75
                                                                                                                       // 76
  ts.writechunk = null;                                                                                                // 77
  ts.writecb = null;                                                                                                   // 78
                                                                                                                       // 79
  if (data !== null && data !== undefined)                                                                             // 80
    stream.push(data);                                                                                                 // 81
                                                                                                                       // 82
  if (cb)                                                                                                              // 83
    cb(er);                                                                                                            // 84
                                                                                                                       // 85
  var rs = stream._readableState;                                                                                      // 86
  rs.reading = false;                                                                                                  // 87
  if (rs.needReadable || rs.length < rs.highWaterMark) {                                                               // 88
    stream._read(rs.highWaterMark);                                                                                    // 89
  }                                                                                                                    // 90
}                                                                                                                      // 91
                                                                                                                       // 92
                                                                                                                       // 93
function Transform(options) {                                                                                          // 94
  if (!(this instanceof Transform))                                                                                    // 95
    return new Transform(options);                                                                                     // 96
                                                                                                                       // 97
  Duplex.call(this, options);                                                                                          // 98
                                                                                                                       // 99
  this._transformState = new TransformState(this);                                                                     // 100
                                                                                                                       // 101
  // when the writable side finishes, then flush out anything remaining.                                               // 102
  var stream = this;                                                                                                   // 103
                                                                                                                       // 104
  // start out asking for a readable event once data is transformed.                                                   // 105
  this._readableState.needReadable = true;                                                                             // 106
                                                                                                                       // 107
  // we have implemented the _read method, and done the other things                                                   // 108
  // that Readable wants before the first _read call, so unset the                                                     // 109
  // sync guard flag.                                                                                                  // 110
  this._readableState.sync = false;                                                                                    // 111
                                                                                                                       // 112
  if (options) {                                                                                                       // 113
    if (typeof options.transform === 'function')                                                                       // 114
      this._transform = options.transform;                                                                             // 115
                                                                                                                       // 116
    if (typeof options.flush === 'function')                                                                           // 117
      this._flush = options.flush;                                                                                     // 118
  }                                                                                                                    // 119
                                                                                                                       // 120
  this.once('prefinish', function() {                                                                                  // 121
    if (typeof this._flush === 'function')                                                                             // 122
      this._flush(function(er) {                                                                                       // 123
        done(stream, er);                                                                                              // 124
      });                                                                                                              // 125
    else                                                                                                               // 126
      done(stream);                                                                                                    // 127
  });                                                                                                                  // 128
}                                                                                                                      // 129
                                                                                                                       // 130
Transform.prototype.push = function(chunk, encoding) {                                                                 // 131
  this._transformState.needTransform = false;                                                                          // 132
  return Duplex.prototype.push.call(this, chunk, encoding);                                                            // 133
};                                                                                                                     // 134
                                                                                                                       // 135
// This is the part where you do stuff!                                                                                // 136
// override this function in implementation classes.                                                                   // 137
// 'chunk' is an input chunk.                                                                                          // 138
//                                                                                                                     // 139
// Call `push(newChunk)` to pass along transformed output                                                              // 140
// to the readable side.  You may call 'push' zero or more times.                                                      // 141
//                                                                                                                     // 142
// Call `cb(err)` when you are done with this chunk.  If you pass                                                      // 143
// an error, then that'll put the hurt on the whole operation.  If you                                                 // 144
// never call cb(), then you'll never get another chunk.                                                               // 145
Transform.prototype._transform = function(chunk, encoding, cb) {                                                       // 146
  throw new Error('not implemented');                                                                                  // 147
};                                                                                                                     // 148
                                                                                                                       // 149
Transform.prototype._write = function(chunk, encoding, cb) {                                                           // 150
  var ts = this._transformState;                                                                                       // 151
  ts.writecb = cb;                                                                                                     // 152
  ts.writechunk = chunk;                                                                                               // 153
  ts.writeencoding = encoding;                                                                                         // 154
  if (!ts.transforming) {                                                                                              // 155
    var rs = this._readableState;                                                                                      // 156
    if (ts.needTransform ||                                                                                            // 157
        rs.needReadable ||                                                                                             // 158
        rs.length < rs.highWaterMark)                                                                                  // 159
      this._read(rs.highWaterMark);                                                                                    // 160
  }                                                                                                                    // 161
};                                                                                                                     // 162
                                                                                                                       // 163
// Doesn't matter what the args are here.                                                                              // 164
// _transform does all the work.                                                                                       // 165
// That we got here means that the readable side wants more data.                                                      // 166
Transform.prototype._read = function(n) {                                                                              // 167
  var ts = this._transformState;                                                                                       // 168
                                                                                                                       // 169
  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {                                                      // 170
    ts.transforming = true;                                                                                            // 171
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);                                               // 172
  } else {                                                                                                             // 173
    // mark that we need a transform, so that any data that comes in                                                   // 174
    // will get processed, now that we've asked for it.                                                                // 175
    ts.needTransform = true;                                                                                           // 176
  }                                                                                                                    // 177
};                                                                                                                     // 178
                                                                                                                       // 179
                                                                                                                       // 180
function done(stream, er) {                                                                                            // 181
  if (er)                                                                                                              // 182
    return stream.emit('error', er);                                                                                   // 183
                                                                                                                       // 184
  // if there's nothing in the write buffer, then that means                                                           // 185
  // that nothing more will ever be provided                                                                           // 186
  var ws = stream._writableState;                                                                                      // 187
  var ts = stream._transformState;                                                                                     // 188
                                                                                                                       // 189
  if (ws.length)                                                                                                       // 190
    throw new Error('calling transform done when ws.length != 0');                                                     // 191
                                                                                                                       // 192
  if (ts.transforming)                                                                                                 // 193
    throw new Error('calling transform done when still transforming');                                                 // 194
                                                                                                                       // 195
  return stream.push(null);                                                                                            // 196
}                                                                                                                      // 197
                                                                                                                       // 198
},{"./_stream_duplex":27,"core-util-is":32,"inherits":22}],31:[function(require,module,exports){                       //
// A bit simpler than readable streams.                                                                                // 1
// Implement an async ._write(chunk, encoding, cb), and it'll handle all                                               // 2
// the drain event emission and buffering.                                                                             // 3
                                                                                                                       // 4
'use strict';                                                                                                          // 5
                                                                                                                       // 6
module.exports = Writable;                                                                                             // 7
                                                                                                                       // 8
/*<replacement>*/                                                                                                      // 9
var processNextTick = require('process-nextick-args');                                                                 // 10
/*</replacement>*/                                                                                                     // 11
                                                                                                                       // 12
                                                                                                                       // 13
/*<replacement>*/                                                                                                      // 14
var Buffer = require('buffer').Buffer;                                                                                 // 15
/*</replacement>*/                                                                                                     // 16
                                                                                                                       // 17
Writable.WritableState = WritableState;                                                                                // 18
                                                                                                                       // 19
                                                                                                                       // 20
/*<replacement>*/                                                                                                      // 21
var util = require('core-util-is');                                                                                    // 22
util.inherits = require('inherits');                                                                                   // 23
/*</replacement>*/                                                                                                     // 24
                                                                                                                       // 25
                                                                                                                       // 26
/*<replacement>*/                                                                                                      // 27
var internalUtil = {                                                                                                   // 28
  deprecate: require('util-deprecate')                                                                                 // 29
};                                                                                                                     // 30
/*</replacement>*/                                                                                                     // 31
                                                                                                                       // 32
                                                                                                                       // 33
                                                                                                                       // 34
/*<replacement>*/                                                                                                      // 35
var Stream;                                                                                                            // 36
(function (){try{                                                                                                      // 37
  Stream = require('st' + 'ream');                                                                                     // 38
}catch(_){}finally{                                                                                                    // 39
  if (!Stream)                                                                                                         // 40
    Stream = require('events').EventEmitter;                                                                           // 41
}}())                                                                                                                  // 42
/*</replacement>*/                                                                                                     // 43
                                                                                                                       // 44
var Buffer = require('buffer').Buffer;                                                                                 // 45
                                                                                                                       // 46
util.inherits(Writable, Stream);                                                                                       // 47
                                                                                                                       // 48
function nop() {}                                                                                                      // 49
                                                                                                                       // 50
function WriteReq(chunk, encoding, cb) {                                                                               // 51
  this.chunk = chunk;                                                                                                  // 52
  this.encoding = encoding;                                                                                            // 53
  this.callback = cb;                                                                                                  // 54
  this.next = null;                                                                                                    // 55
}                                                                                                                      // 56
                                                                                                                       // 57
var Duplex;                                                                                                            // 58
function WritableState(options, stream) {                                                                              // 59
  Duplex = Duplex || require('./_stream_duplex');                                                                      // 60
                                                                                                                       // 61
  options = options || {};                                                                                             // 62
                                                                                                                       // 63
  // object stream flag to indicate whether or not this stream                                                         // 64
  // contains buffers or objects.                                                                                      // 65
  this.objectMode = !!options.objectMode;                                                                              // 66
                                                                                                                       // 67
  if (stream instanceof Duplex)                                                                                        // 68
    this.objectMode = this.objectMode || !!options.writableObjectMode;                                                 // 69
                                                                                                                       // 70
  // the point at which write() starts returning false                                                                 // 71
  // Note: 0 is a valid value, means that we always return false if                                                    // 72
  // the entire buffer is not flushed immediately on write()                                                           // 73
  var hwm = options.highWaterMark;                                                                                     // 74
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;                                                                   // 75
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                          // 76
                                                                                                                       // 77
  // cast to ints.                                                                                                     // 78
  this.highWaterMark = ~~this.highWaterMark;                                                                           // 79
                                                                                                                       // 80
  this.needDrain = false;                                                                                              // 81
  // at the start of calling end()                                                                                     // 82
  this.ending = false;                                                                                                 // 83
  // when end() has been called, and returned                                                                          // 84
  this.ended = false;                                                                                                  // 85
  // when 'finish' is emitted                                                                                          // 86
  this.finished = false;                                                                                               // 87
                                                                                                                       // 88
  // should we decode strings into buffers before passing to _write?                                                   // 89
  // this is here so that some node-core streams can optimize string                                                   // 90
  // handling at a lower level.                                                                                        // 91
  var noDecode = options.decodeStrings === false;                                                                      // 92
  this.decodeStrings = !noDecode;                                                                                      // 93
                                                                                                                       // 94
  // Crypto is kind of old and crusty.  Historically, its default string                                               // 95
  // encoding is 'binary' so we have to make this configurable.                                                        // 96
  // Everything else in the universe uses 'utf8', though.                                                              // 97
  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                            // 98
                                                                                                                       // 99
  // not an actual buffer we keep track of, but a measurement                                                          // 100
  // of how much we're waiting to get pushed to some underlying                                                        // 101
  // socket or file.                                                                                                   // 102
  this.length = 0;                                                                                                     // 103
                                                                                                                       // 104
  // a flag to see when we're in the middle of a write.                                                                // 105
  this.writing = false;                                                                                                // 106
                                                                                                                       // 107
  // when true all writes will be buffered until .uncork() call                                                        // 108
  this.corked = 0;                                                                                                     // 109
                                                                                                                       // 110
  // a flag to be able to tell if the onwrite cb is called immediately,                                                // 111
  // or on a later tick.  We set this to true at first, because any                                                    // 112
  // actions that shouldn't happen until "later" should generally also                                                 // 113
  // not happen before the first write call.                                                                           // 114
  this.sync = true;                                                                                                    // 115
                                                                                                                       // 116
  // a flag to know if we're processing previously buffered items, which                                               // 117
  // may call the _write() callback in the same tick, so that we don't                                                 // 118
  // end up in an overlapped onwrite situation.                                                                        // 119
  this.bufferProcessing = false;                                                                                       // 120
                                                                                                                       // 121
  // the callback that's passed to _write(chunk,cb)                                                                    // 122
  this.onwrite = function(er) {                                                                                        // 123
    onwrite(stream, er);                                                                                               // 124
  };                                                                                                                   // 125
                                                                                                                       // 126
  // the callback that the user supplies to write(chunk,encoding,cb)                                                   // 127
  this.writecb = null;                                                                                                 // 128
                                                                                                                       // 129
  // the amount that is being written when _write is called.                                                           // 130
  this.writelen = 0;                                                                                                   // 131
                                                                                                                       // 132
  this.bufferedRequest = null;                                                                                         // 133
  this.lastBufferedRequest = null;                                                                                     // 134
                                                                                                                       // 135
  // number of pending user-supplied write callbacks                                                                   // 136
  // this must be 0 before 'finish' can be emitted                                                                     // 137
  this.pendingcb = 0;                                                                                                  // 138
                                                                                                                       // 139
  // emit prefinish if the only thing we're waiting for is _write cbs                                                  // 140
  // This is relevant for synchronous Transform streams                                                                // 141
  this.prefinished = false;                                                                                            // 142
                                                                                                                       // 143
  // True if the error was already emitted and should not be thrown again                                              // 144
  this.errorEmitted = false;                                                                                           // 145
}                                                                                                                      // 146
                                                                                                                       // 147
WritableState.prototype.getBuffer = function writableStateGetBuffer() {                                                // 148
  var current = this.bufferedRequest;                                                                                  // 149
  var out = [];                                                                                                        // 150
  while (current) {                                                                                                    // 151
    out.push(current);                                                                                                 // 152
    current = current.next;                                                                                            // 153
  }                                                                                                                    // 154
  return out;                                                                                                          // 155
};                                                                                                                     // 156
                                                                                                                       // 157
(function (){try {                                                                                                     // 158
Object.defineProperty(WritableState.prototype, 'buffer', {                                                             // 159
  get: internalUtil.deprecate(function() {                                                                             // 160
    return this.getBuffer();                                                                                           // 161
  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +                                            // 162
     'instead.')                                                                                                       // 163
});                                                                                                                    // 164
}catch(_){}}());                                                                                                       // 165
                                                                                                                       // 166
                                                                                                                       // 167
var Duplex;                                                                                                            // 168
function Writable(options) {                                                                                           // 169
  Duplex = Duplex || require('./_stream_duplex');                                                                      // 170
                                                                                                                       // 171
  // Writable ctor is applied to Duplexes, though they're not                                                          // 172
  // instanceof Writable, they're instanceof Readable.                                                                 // 173
  if (!(this instanceof Writable) && !(this instanceof Duplex))                                                        // 174
    return new Writable(options);                                                                                      // 175
                                                                                                                       // 176
  this._writableState = new WritableState(options, this);                                                              // 177
                                                                                                                       // 178
  // legacy.                                                                                                           // 179
  this.writable = true;                                                                                                // 180
                                                                                                                       // 181
  if (options) {                                                                                                       // 182
    if (typeof options.write === 'function')                                                                           // 183
      this._write = options.write;                                                                                     // 184
                                                                                                                       // 185
    if (typeof options.writev === 'function')                                                                          // 186
      this._writev = options.writev;                                                                                   // 187
  }                                                                                                                    // 188
                                                                                                                       // 189
  Stream.call(this);                                                                                                   // 190
}                                                                                                                      // 191
                                                                                                                       // 192
// Otherwise people can pipe Writable streams, which is just wrong.                                                    // 193
Writable.prototype.pipe = function() {                                                                                 // 194
  this.emit('error', new Error('Cannot pipe. Not readable.'));                                                         // 195
};                                                                                                                     // 196
                                                                                                                       // 197
                                                                                                                       // 198
function writeAfterEnd(stream, cb) {                                                                                   // 199
  var er = new Error('write after end');                                                                               // 200
  // TODO: defer error events consistently everywhere, not just the cb                                                 // 201
  stream.emit('error', er);                                                                                            // 202
  processNextTick(cb, er);                                                                                             // 203
}                                                                                                                      // 204
                                                                                                                       // 205
// If we get something that is not a buffer, string, null, or undefined,                                               // 206
// and we're not in objectMode, then that's an error.                                                                  // 207
// Otherwise stream chunks are all considered to be of length=1, and the                                               // 208
// watermarks determine how many objects to keep in the buffer, rather than                                            // 209
// how many bytes or characters.                                                                                       // 210
function validChunk(stream, state, chunk, cb) {                                                                        // 211
  var valid = true;                                                                                                    // 212
                                                                                                                       // 213
  if (!(Buffer.isBuffer(chunk)) &&                                                                                     // 214
      typeof chunk !== 'string' &&                                                                                     // 215
      chunk !== null &&                                                                                                // 216
      chunk !== undefined &&                                                                                           // 217
      !state.objectMode) {                                                                                             // 218
    var er = new TypeError('Invalid non-string/buffer chunk');                                                         // 219
    stream.emit('error', er);                                                                                          // 220
    processNextTick(cb, er);                                                                                           // 221
    valid = false;                                                                                                     // 222
  }                                                                                                                    // 223
  return valid;                                                                                                        // 224
}                                                                                                                      // 225
                                                                                                                       // 226
Writable.prototype.write = function(chunk, encoding, cb) {                                                             // 227
  var state = this._writableState;                                                                                     // 228
  var ret = false;                                                                                                     // 229
                                                                                                                       // 230
  if (typeof encoding === 'function') {                                                                                // 231
    cb = encoding;                                                                                                     // 232
    encoding = null;                                                                                                   // 233
  }                                                                                                                    // 234
                                                                                                                       // 235
  if (Buffer.isBuffer(chunk))                                                                                          // 236
    encoding = 'buffer';                                                                                               // 237
  else if (!encoding)                                                                                                  // 238
    encoding = state.defaultEncoding;                                                                                  // 239
                                                                                                                       // 240
  if (typeof cb !== 'function')                                                                                        // 241
    cb = nop;                                                                                                          // 242
                                                                                                                       // 243
  if (state.ended)                                                                                                     // 244
    writeAfterEnd(this, cb);                                                                                           // 245
  else if (validChunk(this, state, chunk, cb)) {                                                                       // 246
    state.pendingcb++;                                                                                                 // 247
    ret = writeOrBuffer(this, state, chunk, encoding, cb);                                                             // 248
  }                                                                                                                    // 249
                                                                                                                       // 250
  return ret;                                                                                                          // 251
};                                                                                                                     // 252
                                                                                                                       // 253
Writable.prototype.cork = function() {                                                                                 // 254
  var state = this._writableState;                                                                                     // 255
                                                                                                                       // 256
  state.corked++;                                                                                                      // 257
};                                                                                                                     // 258
                                                                                                                       // 259
Writable.prototype.uncork = function() {                                                                               // 260
  var state = this._writableState;                                                                                     // 261
                                                                                                                       // 262
  if (state.corked) {                                                                                                  // 263
    state.corked--;                                                                                                    // 264
                                                                                                                       // 265
    if (!state.writing &&                                                                                              // 266
        !state.corked &&                                                                                               // 267
        !state.finished &&                                                                                             // 268
        !state.bufferProcessing &&                                                                                     // 269
        state.bufferedRequest)                                                                                         // 270
      clearBuffer(this, state);                                                                                        // 271
  }                                                                                                                    // 272
};                                                                                                                     // 273
                                                                                                                       // 274
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {                                        // 275
  // node::ParseEncoding() requires lower case.                                                                        // 276
  if (typeof encoding === 'string')                                                                                    // 277
    encoding = encoding.toLowerCase();                                                                                 // 278
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',                                                          // 279
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']                                                                          // 280
.indexOf((encoding + '').toLowerCase()) > -1))                                                                         // 281
    throw new TypeError('Unknown encoding: ' + encoding);                                                              // 282
  this._writableState.defaultEncoding = encoding;                                                                      // 283
};                                                                                                                     // 284
                                                                                                                       // 285
function decodeChunk(state, chunk, encoding) {                                                                         // 286
  if (!state.objectMode &&                                                                                             // 287
      state.decodeStrings !== false &&                                                                                 // 288
      typeof chunk === 'string') {                                                                                     // 289
    chunk = new Buffer(chunk, encoding);                                                                               // 290
  }                                                                                                                    // 291
  return chunk;                                                                                                        // 292
}                                                                                                                      // 293
                                                                                                                       // 294
// if we're already writing something, then just put this                                                              // 295
// in the queue, and wait our turn.  Otherwise, call _write                                                            // 296
// If we return false, then we need a drain event, so set that flag.                                                   // 297
function writeOrBuffer(stream, state, chunk, encoding, cb) {                                                           // 298
  chunk = decodeChunk(state, chunk, encoding);                                                                         // 299
                                                                                                                       // 300
  if (Buffer.isBuffer(chunk))                                                                                          // 301
    encoding = 'buffer';                                                                                               // 302
  var len = state.objectMode ? 1 : chunk.length;                                                                       // 303
                                                                                                                       // 304
  state.length += len;                                                                                                 // 305
                                                                                                                       // 306
  var ret = state.length < state.highWaterMark;                                                                        // 307
  // we must ensure that previous needDrain will not be reset to false.                                                // 308
  if (!ret)                                                                                                            // 309
    state.needDrain = true;                                                                                            // 310
                                                                                                                       // 311
  if (state.writing || state.corked) {                                                                                 // 312
    var last = state.lastBufferedRequest;                                                                              // 313
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);                                                     // 314
    if (last) {                                                                                                        // 315
      last.next = state.lastBufferedRequest;                                                                           // 316
    } else {                                                                                                           // 317
      state.bufferedRequest = state.lastBufferedRequest;                                                               // 318
    }                                                                                                                  // 319
  } else {                                                                                                             // 320
    doWrite(stream, state, false, len, chunk, encoding, cb);                                                           // 321
  }                                                                                                                    // 322
                                                                                                                       // 323
  return ret;                                                                                                          // 324
}                                                                                                                      // 325
                                                                                                                       // 326
function doWrite(stream, state, writev, len, chunk, encoding, cb) {                                                    // 327
  state.writelen = len;                                                                                                // 328
  state.writecb = cb;                                                                                                  // 329
  state.writing = true;                                                                                                // 330
  state.sync = true;                                                                                                   // 331
  if (writev)                                                                                                          // 332
    stream._writev(chunk, state.onwrite);                                                                              // 333
  else                                                                                                                 // 334
    stream._write(chunk, encoding, state.onwrite);                                                                     // 335
  state.sync = false;                                                                                                  // 336
}                                                                                                                      // 337
                                                                                                                       // 338
function onwriteError(stream, state, sync, er, cb) {                                                                   // 339
  --state.pendingcb;                                                                                                   // 340
  if (sync)                                                                                                            // 341
    processNextTick(cb, er);                                                                                           // 342
  else                                                                                                                 // 343
    cb(er);                                                                                                            // 344
                                                                                                                       // 345
  stream._writableState.errorEmitted = true;                                                                           // 346
  stream.emit('error', er);                                                                                            // 347
}                                                                                                                      // 348
                                                                                                                       // 349
function onwriteStateUpdate(state) {                                                                                   // 350
  state.writing = false;                                                                                               // 351
  state.writecb = null;                                                                                                // 352
  state.length -= state.writelen;                                                                                      // 353
  state.writelen = 0;                                                                                                  // 354
}                                                                                                                      // 355
                                                                                                                       // 356
function onwrite(stream, er) {                                                                                         // 357
  var state = stream._writableState;                                                                                   // 358
  var sync = state.sync;                                                                                               // 359
  var cb = state.writecb;                                                                                              // 360
                                                                                                                       // 361
  onwriteStateUpdate(state);                                                                                           // 362
                                                                                                                       // 363
  if (er)                                                                                                              // 364
    onwriteError(stream, state, sync, er, cb);                                                                         // 365
  else {                                                                                                               // 366
    // Check if we're actually ready to finish, but don't emit yet                                                     // 367
    var finished = needFinish(state);                                                                                  // 368
                                                                                                                       // 369
    if (!finished &&                                                                                                   // 370
        !state.corked &&                                                                                               // 371
        !state.bufferProcessing &&                                                                                     // 372
        state.bufferedRequest) {                                                                                       // 373
      clearBuffer(stream, state);                                                                                      // 374
    }                                                                                                                  // 375
                                                                                                                       // 376
    if (sync) {                                                                                                        // 377
      processNextTick(afterWrite, stream, state, finished, cb);                                                        // 378
    } else {                                                                                                           // 379
      afterWrite(stream, state, finished, cb);                                                                         // 380
    }                                                                                                                  // 381
  }                                                                                                                    // 382
}                                                                                                                      // 383
                                                                                                                       // 384
function afterWrite(stream, state, finished, cb) {                                                                     // 385
  if (!finished)                                                                                                       // 386
    onwriteDrain(stream, state);                                                                                       // 387
  state.pendingcb--;                                                                                                   // 388
  cb();                                                                                                                // 389
  finishMaybe(stream, state);                                                                                          // 390
}                                                                                                                      // 391
                                                                                                                       // 392
// Must force callback to be called on nextTick, so that we don't                                                      // 393
// emit 'drain' before the write() consumer gets the 'false' return                                                    // 394
// value, and has a chance to attach a 'drain' listener.                                                               // 395
function onwriteDrain(stream, state) {                                                                                 // 396
  if (state.length === 0 && state.needDrain) {                                                                         // 397
    state.needDrain = false;                                                                                           // 398
    stream.emit('drain');                                                                                              // 399
  }                                                                                                                    // 400
}                                                                                                                      // 401
                                                                                                                       // 402
                                                                                                                       // 403
// if there's something in the buffer waiting, then process it                                                         // 404
function clearBuffer(stream, state) {                                                                                  // 405
  state.bufferProcessing = true;                                                                                       // 406
  var entry = state.bufferedRequest;                                                                                   // 407
                                                                                                                       // 408
  if (stream._writev && entry && entry.next) {                                                                         // 409
    // Fast case, write everything using _writev()                                                                     // 410
    var buffer = [];                                                                                                   // 411
    var cbs = [];                                                                                                      // 412
    while (entry) {                                                                                                    // 413
      cbs.push(entry.callback);                                                                                        // 414
      buffer.push(entry);                                                                                              // 415
      entry = entry.next;                                                                                              // 416
    }                                                                                                                  // 417
                                                                                                                       // 418
    // count the one we are adding, as well.                                                                           // 419
    // TODO(isaacs) clean this up                                                                                      // 420
    state.pendingcb++;                                                                                                 // 421
    state.lastBufferedRequest = null;                                                                                  // 422
    doWrite(stream, state, true, state.length, buffer, '', function(err) {                                             // 423
      for (var i = 0; i < cbs.length; i++) {                                                                           // 424
        state.pendingcb--;                                                                                             // 425
        cbs[i](err);                                                                                                   // 426
      }                                                                                                                // 427
    });                                                                                                                // 428
                                                                                                                       // 429
    // Clear buffer                                                                                                    // 430
  } else {                                                                                                             // 431
    // Slow case, write chunks one-by-one                                                                              // 432
    while (entry) {                                                                                                    // 433
      var chunk = entry.chunk;                                                                                         // 434
      var encoding = entry.encoding;                                                                                   // 435
      var cb = entry.callback;                                                                                         // 436
      var len = state.objectMode ? 1 : chunk.length;                                                                   // 437
                                                                                                                       // 438
      doWrite(stream, state, false, len, chunk, encoding, cb);                                                         // 439
      entry = entry.next;                                                                                              // 440
      // if we didn't call the onwrite immediately, then                                                               // 441
      // it means that we need to wait until it does.                                                                  // 442
      // also, that means that the chunk and cb are currently                                                          // 443
      // being processed, so move the buffer counter past them.                                                        // 444
      if (state.writing) {                                                                                             // 445
        break;                                                                                                         // 446
      }                                                                                                                // 447
    }                                                                                                                  // 448
                                                                                                                       // 449
    if (entry === null)                                                                                                // 450
      state.lastBufferedRequest = null;                                                                                // 451
  }                                                                                                                    // 452
  state.bufferedRequest = entry;                                                                                       // 453
  state.bufferProcessing = false;                                                                                      // 454
}                                                                                                                      // 455
                                                                                                                       // 456
Writable.prototype._write = function(chunk, encoding, cb) {                                                            // 457
  cb(new Error('not implemented'));                                                                                    // 458
};                                                                                                                     // 459
                                                                                                                       // 460
Writable.prototype._writev = null;                                                                                     // 461
                                                                                                                       // 462
Writable.prototype.end = function(chunk, encoding, cb) {                                                               // 463
  var state = this._writableState;                                                                                     // 464
                                                                                                                       // 465
  if (typeof chunk === 'function') {                                                                                   // 466
    cb = chunk;                                                                                                        // 467
    chunk = null;                                                                                                      // 468
    encoding = null;                                                                                                   // 469
  } else if (typeof encoding === 'function') {                                                                         // 470
    cb = encoding;                                                                                                     // 471
    encoding = null;                                                                                                   // 472
  }                                                                                                                    // 473
                                                                                                                       // 474
  if (chunk !== null && chunk !== undefined)                                                                           // 475
    this.write(chunk, encoding);                                                                                       // 476
                                                                                                                       // 477
  // .end() fully uncorks                                                                                              // 478
  if (state.corked) {                                                                                                  // 479
    state.corked = 1;                                                                                                  // 480
    this.uncork();                                                                                                     // 481
  }                                                                                                                    // 482
                                                                                                                       // 483
  // ignore unnecessary end() calls.                                                                                   // 484
  if (!state.ending && !state.finished)                                                                                // 485
    endWritable(this, state, cb);                                                                                      // 486
};                                                                                                                     // 487
                                                                                                                       // 488
                                                                                                                       // 489
function needFinish(state) {                                                                                           // 490
  return (state.ending &&                                                                                              // 491
          state.length === 0 &&                                                                                        // 492
          state.bufferedRequest === null &&                                                                            // 493
          !state.finished &&                                                                                           // 494
          !state.writing);                                                                                             // 495
}                                                                                                                      // 496
                                                                                                                       // 497
function prefinish(stream, state) {                                                                                    // 498
  if (!state.prefinished) {                                                                                            // 499
    state.prefinished = true;                                                                                          // 500
    stream.emit('prefinish');                                                                                          // 501
  }                                                                                                                    // 502
}                                                                                                                      // 503
                                                                                                                       // 504
function finishMaybe(stream, state) {                                                                                  // 505
  var need = needFinish(state);                                                                                        // 506
  if (need) {                                                                                                          // 507
    if (state.pendingcb === 0) {                                                                                       // 508
      prefinish(stream, state);                                                                                        // 509
      state.finished = true;                                                                                           // 510
      stream.emit('finish');                                                                                           // 511
    } else {                                                                                                           // 512
      prefinish(stream, state);                                                                                        // 513
    }                                                                                                                  // 514
  }                                                                                                                    // 515
  return need;                                                                                                         // 516
}                                                                                                                      // 517
                                                                                                                       // 518
function endWritable(stream, state, cb) {                                                                              // 519
  state.ending = true;                                                                                                 // 520
  finishMaybe(stream, state);                                                                                          // 521
  if (cb) {                                                                                                            // 522
    if (state.finished)                                                                                                // 523
      processNextTick(cb);                                                                                             // 524
    else                                                                                                               // 525
      stream.once('finish', cb);                                                                                       // 526
  }                                                                                                                    // 527
  state.ended = true;                                                                                                  // 528
}                                                                                                                      // 529
                                                                                                                       // 530
},{"./_stream_duplex":27,"buffer":17,"core-util-is":32,"events":21,"inherits":22,"process-nextick-args":33,"util-deprecate":34}],32:[function(require,module,exports){
(function (Buffer){                                                                                                    //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
// NOTE: These type checking functions intentionally don't use `instanceof`                                            // 22
// because it is fragile and can be easily faked with `Object.create()`.                                               // 23
                                                                                                                       // 24
function isArray(arg) {                                                                                                // 25
  if (Array.isArray) {                                                                                                 // 26
    return Array.isArray(arg);                                                                                         // 27
  }                                                                                                                    // 28
  return objectToString(arg) === '[object Array]';                                                                     // 29
}                                                                                                                      // 30
exports.isArray = isArray;                                                                                             // 31
                                                                                                                       // 32
function isBoolean(arg) {                                                                                              // 33
  return typeof arg === 'boolean';                                                                                     // 34
}                                                                                                                      // 35
exports.isBoolean = isBoolean;                                                                                         // 36
                                                                                                                       // 37
function isNull(arg) {                                                                                                 // 38
  return arg === null;                                                                                                 // 39
}                                                                                                                      // 40
exports.isNull = isNull;                                                                                               // 41
                                                                                                                       // 42
function isNullOrUndefined(arg) {                                                                                      // 43
  return arg == null;                                                                                                  // 44
}                                                                                                                      // 45
exports.isNullOrUndefined = isNullOrUndefined;                                                                         // 46
                                                                                                                       // 47
function isNumber(arg) {                                                                                               // 48
  return typeof arg === 'number';                                                                                      // 49
}                                                                                                                      // 50
exports.isNumber = isNumber;                                                                                           // 51
                                                                                                                       // 52
function isString(arg) {                                                                                               // 53
  return typeof arg === 'string';                                                                                      // 54
}                                                                                                                      // 55
exports.isString = isString;                                                                                           // 56
                                                                                                                       // 57
function isSymbol(arg) {                                                                                               // 58
  return typeof arg === 'symbol';                                                                                      // 59
}                                                                                                                      // 60
exports.isSymbol = isSymbol;                                                                                           // 61
                                                                                                                       // 62
function isUndefined(arg) {                                                                                            // 63
  return arg === void 0;                                                                                               // 64
}                                                                                                                      // 65
exports.isUndefined = isUndefined;                                                                                     // 66
                                                                                                                       // 67
function isRegExp(re) {                                                                                                // 68
  return objectToString(re) === '[object RegExp]';                                                                     // 69
}                                                                                                                      // 70
exports.isRegExp = isRegExp;                                                                                           // 71
                                                                                                                       // 72
function isObject(arg) {                                                                                               // 73
  return typeof arg === 'object' && arg !== null;                                                                      // 74
}                                                                                                                      // 75
exports.isObject = isObject;                                                                                           // 76
                                                                                                                       // 77
function isDate(d) {                                                                                                   // 78
  return objectToString(d) === '[object Date]';                                                                        // 79
}                                                                                                                      // 80
exports.isDate = isDate;                                                                                               // 81
                                                                                                                       // 82
function isError(e) {                                                                                                  // 83
  return (objectToString(e) === '[object Error]' || e instanceof Error);                                               // 84
}                                                                                                                      // 85
exports.isError = isError;                                                                                             // 86
                                                                                                                       // 87
function isFunction(arg) {                                                                                             // 88
  return typeof arg === 'function';                                                                                    // 89
}                                                                                                                      // 90
exports.isFunction = isFunction;                                                                                       // 91
                                                                                                                       // 92
function isPrimitive(arg) {                                                                                            // 93
  return arg === null ||                                                                                               // 94
         typeof arg === 'boolean' ||                                                                                   // 95
         typeof arg === 'number' ||                                                                                    // 96
         typeof arg === 'string' ||                                                                                    // 97
         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 98
         typeof arg === 'undefined';                                                                                   // 99
}                                                                                                                      // 100
exports.isPrimitive = isPrimitive;                                                                                     // 101
                                                                                                                       // 102
exports.isBuffer = Buffer.isBuffer;                                                                                    // 103
                                                                                                                       // 104
function objectToString(o) {                                                                                           // 105
  return Object.prototype.toString.call(o);                                                                            // 106
}                                                                                                                      // 107
                                                                                                                       // 108
}).call(this,{"isBuffer":require("../../../../insert-module-globals/node_modules/is-buffer/index.js")})                //
                                                                                                                       //
},{"../../../../insert-module-globals/node_modules/is-buffer/index.js":23}],33:[function(require,module,exports){      //
(function (process){                                                                                                   //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
if (!process.version ||                                                                                                // 3
    process.version.indexOf('v0.') === 0 ||                                                                            // 4
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {                                  // 5
  module.exports = nextTick;                                                                                           // 6
} else {                                                                                                               // 7
  module.exports = process.nextTick;                                                                                   // 8
}                                                                                                                      // 9
                                                                                                                       // 10
function nextTick(fn) {                                                                                                // 11
  var args = new Array(arguments.length - 1);                                                                          // 12
  var i = 0;                                                                                                           // 13
  while (i < args.length) {                                                                                            // 14
    args[i++] = arguments[i];                                                                                          // 15
  }                                                                                                                    // 16
  process.nextTick(function afterTick() {                                                                              // 17
    fn.apply(null, args);                                                                                              // 18
  });                                                                                                                  // 19
}                                                                                                                      // 20
                                                                                                                       // 21
}).call(this,require('_process'))                                                                                      //
                                                                                                                       //
},{"_process":25}],34:[function(require,module,exports){                                                               //
(function (global){                                                                                                    //
                                                                                                                       // 1
/**                                                                                                                    // 2
 * Module exports.                                                                                                     // 3
 */                                                                                                                    // 4
                                                                                                                       // 5
module.exports = deprecate;                                                                                            // 6
                                                                                                                       // 7
/**                                                                                                                    // 8
 * Mark that a method should not be used.                                                                              // 9
 * Returns a modified function which warns once by default.                                                            // 10
 *                                                                                                                     // 11
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.                                                  // 12
 *                                                                                                                     // 13
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions                                         // 14
 * will throw an Error when invoked.                                                                                   // 15
 *                                                                                                                     // 16
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions                                         // 17
 * will invoke `console.trace()` instead of `console.error()`.                                                         // 18
 *                                                                                                                     // 19
 * @param {Function} fn - the function to deprecate                                                                    // 20
 * @param {String} msg - the string to print to the console when `fn` is invoked                                       // 21
 * @returns {Function} a new "deprecated" version of `fn`                                                              // 22
 * @api public                                                                                                         // 23
 */                                                                                                                    // 24
                                                                                                                       // 25
function deprecate (fn, msg) {                                                                                         // 26
  if (config('noDeprecation')) {                                                                                       // 27
    return fn;                                                                                                         // 28
  }                                                                                                                    // 29
                                                                                                                       // 30
  var warned = false;                                                                                                  // 31
  function deprecated() {                                                                                              // 32
    if (!warned) {                                                                                                     // 33
      if (config('throwDeprecation')) {                                                                                // 34
        throw new Error(msg);                                                                                          // 35
      } else if (config('traceDeprecation')) {                                                                         // 36
        console.trace(msg);                                                                                            // 37
      } else {                                                                                                         // 38
        console.warn(msg);                                                                                             // 39
      }                                                                                                                // 40
      warned = true;                                                                                                   // 41
    }                                                                                                                  // 42
    return fn.apply(this, arguments);                                                                                  // 43
  }                                                                                                                    // 44
                                                                                                                       // 45
  return deprecated;                                                                                                   // 46
}                                                                                                                      // 47
                                                                                                                       // 48
/**                                                                                                                    // 49
 * Checks `localStorage` for boolean values for the given `name`.                                                      // 50
 *                                                                                                                     // 51
 * @param {String} name                                                                                                // 52
 * @returns {Boolean}                                                                                                  // 53
 * @api private                                                                                                        // 54
 */                                                                                                                    // 55
                                                                                                                       // 56
function config (name) {                                                                                               // 57
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes                                     // 58
  try {                                                                                                                // 59
    if (!global.localStorage) return false;                                                                            // 60
  } catch (_) {                                                                                                        // 61
    return false;                                                                                                      // 62
  }                                                                                                                    // 63
  var val = global.localStorage[name];                                                                                 // 64
  if (null == val) return false;                                                                                       // 65
  return String(val).toLowerCase() === 'true';                                                                         // 66
}                                                                                                                      // 67
                                                                                                                       // 68
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                                                                                                                       //
},{}],35:[function(require,module,exports){                                                                            //
module.exports = require("./lib/_stream_passthrough.js")                                                               // 1
                                                                                                                       // 2
},{"./lib/_stream_passthrough.js":28}],36:[function(require,module,exports){                                           //
var Stream = (function (){                                                                                             // 1
  try {                                                                                                                // 2
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify                // 3
  } catch(_){}                                                                                                         // 4
}());                                                                                                                  // 5
exports = module.exports = require('./lib/_stream_readable.js');                                                       // 6
exports.Stream = Stream || exports;                                                                                    // 7
exports.Readable = exports;                                                                                            // 8
exports.Writable = require('./lib/_stream_writable.js');                                                               // 9
exports.Duplex = require('./lib/_stream_duplex.js');                                                                   // 10
exports.Transform = require('./lib/_stream_transform.js');                                                             // 11
exports.PassThrough = require('./lib/_stream_passthrough.js');                                                         // 12
                                                                                                                       // 13
},{"./lib/_stream_duplex.js":27,"./lib/_stream_passthrough.js":28,"./lib/_stream_readable.js":29,"./lib/_stream_transform.js":30,"./lib/_stream_writable.js":31}],37:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")                                                                 // 1
                                                                                                                       // 2
},{"./lib/_stream_transform.js":30}],38:[function(require,module,exports){                                             //
module.exports = require("./lib/_stream_writable.js")                                                                  // 1
                                                                                                                       // 2
},{"./lib/_stream_writable.js":31}],39:[function(require,module,exports){                                              //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
module.exports = Stream;                                                                                               // 22
                                                                                                                       // 23
var EE = require('events').EventEmitter;                                                                               // 24
var inherits = require('inherits');                                                                                    // 25
                                                                                                                       // 26
inherits(Stream, EE);                                                                                                  // 27
Stream.Readable = require('readable-stream/readable.js');                                                              // 28
Stream.Writable = require('readable-stream/writable.js');                                                              // 29
Stream.Duplex = require('readable-stream/duplex.js');                                                                  // 30
Stream.Transform = require('readable-stream/transform.js');                                                            // 31
Stream.PassThrough = require('readable-stream/passthrough.js');                                                        // 32
                                                                                                                       // 33
// Backwards-compat with node 0.4.x                                                                                    // 34
Stream.Stream = Stream;                                                                                                // 35
                                                                                                                       // 36
                                                                                                                       // 37
                                                                                                                       // 38
// old-style streams.  Note that the pipe method (the only relevant                                                    // 39
// part of this class) is overridden in the Readable class.                                                            // 40
                                                                                                                       // 41
function Stream() {                                                                                                    // 42
  EE.call(this);                                                                                                       // 43
}                                                                                                                      // 44
                                                                                                                       // 45
Stream.prototype.pipe = function(dest, options) {                                                                      // 46
  var source = this;                                                                                                   // 47
                                                                                                                       // 48
  function ondata(chunk) {                                                                                             // 49
    if (dest.writable) {                                                                                               // 50
      if (false === dest.write(chunk) && source.pause) {                                                               // 51
        source.pause();                                                                                                // 52
      }                                                                                                                // 53
    }                                                                                                                  // 54
  }                                                                                                                    // 55
                                                                                                                       // 56
  source.on('data', ondata);                                                                                           // 57
                                                                                                                       // 58
  function ondrain() {                                                                                                 // 59
    if (source.readable && source.resume) {                                                                            // 60
      source.resume();                                                                                                 // 61
    }                                                                                                                  // 62
  }                                                                                                                    // 63
                                                                                                                       // 64
  dest.on('drain', ondrain);                                                                                           // 65
                                                                                                                       // 66
  // If the 'end' option is not supplied, dest.end() will be called when                                               // 67
  // source gets the 'end' or 'close' events.  Only dest.end() once.                                                   // 68
  if (!dest._isStdio && (!options || options.end !== false)) {                                                         // 69
    source.on('end', onend);                                                                                           // 70
    source.on('close', onclose);                                                                                       // 71
  }                                                                                                                    // 72
                                                                                                                       // 73
  var didOnEnd = false;                                                                                                // 74
  function onend() {                                                                                                   // 75
    if (didOnEnd) return;                                                                                              // 76
    didOnEnd = true;                                                                                                   // 77
                                                                                                                       // 78
    dest.end();                                                                                                        // 79
  }                                                                                                                    // 80
                                                                                                                       // 81
                                                                                                                       // 82
  function onclose() {                                                                                                 // 83
    if (didOnEnd) return;                                                                                              // 84
    didOnEnd = true;                                                                                                   // 85
                                                                                                                       // 86
    if (typeof dest.destroy === 'function') dest.destroy();                                                            // 87
  }                                                                                                                    // 88
                                                                                                                       // 89
  // don't leave dangling pipes when there are errors.                                                                 // 90
  function onerror(er) {                                                                                               // 91
    cleanup();                                                                                                         // 92
    if (EE.listenerCount(this, 'error') === 0) {                                                                       // 93
      throw er; // Unhandled stream error in pipe.                                                                     // 94
    }                                                                                                                  // 95
  }                                                                                                                    // 96
                                                                                                                       // 97
  source.on('error', onerror);                                                                                         // 98
  dest.on('error', onerror);                                                                                           // 99
                                                                                                                       // 100
  // remove all the event listeners that were added.                                                                   // 101
  function cleanup() {                                                                                                 // 102
    source.removeListener('data', ondata);                                                                             // 103
    dest.removeListener('drain', ondrain);                                                                             // 104
                                                                                                                       // 105
    source.removeListener('end', onend);                                                                               // 106
    source.removeListener('close', onclose);                                                                           // 107
                                                                                                                       // 108
    source.removeListener('error', onerror);                                                                           // 109
    dest.removeListener('error', onerror);                                                                             // 110
                                                                                                                       // 111
    source.removeListener('end', cleanup);                                                                             // 112
    source.removeListener('close', cleanup);                                                                           // 113
                                                                                                                       // 114
    dest.removeListener('close', cleanup);                                                                             // 115
  }                                                                                                                    // 116
                                                                                                                       // 117
  source.on('end', cleanup);                                                                                           // 118
  source.on('close', cleanup);                                                                                         // 119
                                                                                                                       // 120
  dest.on('close', cleanup);                                                                                           // 121
                                                                                                                       // 122
  dest.emit('pipe', source);                                                                                           // 123
                                                                                                                       // 124
  // Allow for unix-like usage: A.pipe(B).pipe(C)                                                                      // 125
  return dest;                                                                                                         // 126
};                                                                                                                     // 127
                                                                                                                       // 128
},{"events":21,"inherits":22,"readable-stream/duplex.js":26,"readable-stream/passthrough.js":35,"readable-stream/readable.js":36,"readable-stream/transform.js":37,"readable-stream/writable.js":38}],40:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
var Buffer = require('buffer').Buffer;                                                                                 // 22
                                                                                                                       // 23
var isBufferEncoding = Buffer.isEncoding                                                                               // 24
  || function(encoding) {                                                                                              // 25
       switch (encoding && encoding.toLowerCase()) {                                                                   // 26
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;                                                                                        // 28
       }                                                                                                               // 29
     }                                                                                                                 // 30
                                                                                                                       // 31
                                                                                                                       // 32
function assertEncoding(encoding) {                                                                                    // 33
  if (encoding && !isBufferEncoding(encoding)) {                                                                       // 34
    throw new Error('Unknown encoding: ' + encoding);                                                                  // 35
  }                                                                                                                    // 36
}                                                                                                                      // 37
                                                                                                                       // 38
// StringDecoder provides an interface for efficiently splitting a series of                                           // 39
// buffers into a series of JS strings without breaking apart multi-byte                                               // 40
// characters. CESU-8 is handled as part of the UTF-8 encoding.                                                        // 41
//                                                                                                                     // 42
// @TODO Handling all encodings inside a single object makes it very difficult                                         // 43
// to reason about this code, so it should be split up in the future.                                                  // 44
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code                                        // 45
// points as used by CESU-8.                                                                                           // 46
var StringDecoder = exports.StringDecoder = function(encoding) {                                                       // 47
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');                                              // 48
  assertEncoding(encoding);                                                                                            // 49
  switch (this.encoding) {                                                                                             // 50
    case 'utf8':                                                                                                       // 51
      // CESU-8 represents each of Surrogate Pair by 3-bytes                                                           // 52
      this.surrogateSize = 3;                                                                                          // 53
      break;                                                                                                           // 54
    case 'ucs2':                                                                                                       // 55
    case 'utf16le':                                                                                                    // 56
      // UTF-16 represents each of Surrogate Pair by 2-bytes                                                           // 57
      this.surrogateSize = 2;                                                                                          // 58
      this.detectIncompleteChar = utf16DetectIncompleteChar;                                                           // 59
      break;                                                                                                           // 60
    case 'base64':                                                                                                     // 61
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.                                                    // 62
      this.surrogateSize = 3;                                                                                          // 63
      this.detectIncompleteChar = base64DetectIncompleteChar;                                                          // 64
      break;                                                                                                           // 65
    default:                                                                                                           // 66
      this.write = passThroughWrite;                                                                                   // 67
      return;                                                                                                          // 68
  }                                                                                                                    // 69
                                                                                                                       // 70
  // Enough space to store all bytes of a single character. UTF-8 needs 4                                              // 71
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).                                                    // 72
  this.charBuffer = new Buffer(6);                                                                                     // 73
  // Number of bytes received for the current incomplete multi-byte character.                                         // 74
  this.charReceived = 0;                                                                                               // 75
  // Number of bytes expected for the current incomplete multi-byte character.                                         // 76
  this.charLength = 0;                                                                                                 // 77
};                                                                                                                     // 78
                                                                                                                       // 79
                                                                                                                       // 80
// write decodes the given buffer and returns it as JS string that is                                                  // 81
// guaranteed to not contain any partial multi-byte characters. Any partial                                            // 82
// character found at the end of the buffer is buffered up, and will be                                                // 83
// returned when calling write again with the remaining bytes.                                                         // 84
//                                                                                                                     // 85
// Note: Converting a Buffer containing an orphan surrogate to a String                                                // 86
// currently works, but converting a String to a Buffer (via `new Buffer`, or                                          // 87
// Buffer#write) will replace incomplete surrogates with the unicode                                                   // 88
// replacement character. See https://codereview.chromium.org/121173009/ .                                             // 89
StringDecoder.prototype.write = function(buffer) {                                                                     // 90
  var charStr = '';                                                                                                    // 91
  // if our last write ended with an incomplete multibyte character                                                    // 92
  while (this.charLength) {                                                                                            // 93
    // determine how many remaining bytes this buffer has to offer for this char                                       // 94
    var available = (buffer.length >= this.charLength - this.charReceived) ?                                           // 95
        this.charLength - this.charReceived :                                                                          // 96
        buffer.length;                                                                                                 // 97
                                                                                                                       // 98
    // add the new bytes to the char buffer                                                                            // 99
    buffer.copy(this.charBuffer, this.charReceived, 0, available);                                                     // 100
    this.charReceived += available;                                                                                    // 101
                                                                                                                       // 102
    if (this.charReceived < this.charLength) {                                                                         // 103
      // still not enough chars in this buffer? wait for more ...                                                      // 104
      return '';                                                                                                       // 105
    }                                                                                                                  // 106
                                                                                                                       // 107
    // remove bytes belonging to the current character from the buffer                                                 // 108
    buffer = buffer.slice(available, buffer.length);                                                                   // 109
                                                                                                                       // 110
    // get the character that was split                                                                                // 111
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);                                       // 112
                                                                                                                       // 113
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                             // 114
    var charCode = charStr.charCodeAt(charStr.length - 1);                                                             // 115
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                    // 116
      this.charLength += this.surrogateSize;                                                                           // 117
      charStr = '';                                                                                                    // 118
      continue;                                                                                                        // 119
    }                                                                                                                  // 120
    this.charReceived = this.charLength = 0;                                                                           // 121
                                                                                                                       // 122
    // if there are no more bytes in this buffer, just emit our char                                                   // 123
    if (buffer.length === 0) {                                                                                         // 124
      return charStr;                                                                                                  // 125
    }                                                                                                                  // 126
    break;                                                                                                             // 127
  }                                                                                                                    // 128
                                                                                                                       // 129
  // determine and set charLength / charReceived                                                                       // 130
  this.detectIncompleteChar(buffer);                                                                                   // 131
                                                                                                                       // 132
  var end = buffer.length;                                                                                             // 133
  if (this.charLength) {                                                                                               // 134
    // buffer the incomplete character bytes we got                                                                    // 135
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);                                           // 136
    end -= this.charReceived;                                                                                          // 137
  }                                                                                                                    // 138
                                                                                                                       // 139
  charStr += buffer.toString(this.encoding, 0, end);                                                                   // 140
                                                                                                                       // 141
  var end = charStr.length - 1;                                                                                        // 142
  var charCode = charStr.charCodeAt(end);                                                                              // 143
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                               // 144
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                      // 145
    var size = this.surrogateSize;                                                                                     // 146
    this.charLength += size;                                                                                           // 147
    this.charReceived += size;                                                                                         // 148
    this.charBuffer.copy(this.charBuffer, size, 0, size);                                                              // 149
    buffer.copy(this.charBuffer, 0, 0, size);                                                                          // 150
    return charStr.substring(0, end);                                                                                  // 151
  }                                                                                                                    // 152
                                                                                                                       // 153
  // or just emit the charStr                                                                                          // 154
  return charStr;                                                                                                      // 155
};                                                                                                                     // 156
                                                                                                                       // 157
// detectIncompleteChar determines if there is an incomplete UTF-8 character at                                        // 158
// the end of the given buffer. If so, it sets this.charLength to the byte                                             // 159
// length that character, and sets this.charReceived to the number of bytes                                            // 160
// that are available for this character.                                                                              // 161
StringDecoder.prototype.detectIncompleteChar = function(buffer) {                                                      // 162
  // determine how many bytes we have to check at the end of this buffer                                               // 163
  var i = (buffer.length >= 3) ? 3 : buffer.length;                                                                    // 164
                                                                                                                       // 165
  // Figure out if one of the last i bytes of our buffer announces an                                                  // 166
  // incomplete char.                                                                                                  // 167
  for (; i > 0; i--) {                                                                                                 // 168
    var c = buffer[buffer.length - i];                                                                                 // 169
                                                                                                                       // 170
    // See http://en.wikipedia.org/wiki/UTF-8#Description                                                              // 171
                                                                                                                       // 172
    // 110XXXXX                                                                                                        // 173
    if (i == 1 && c >> 5 == 0x06) {                                                                                    // 174
      this.charLength = 2;                                                                                             // 175
      break;                                                                                                           // 176
    }                                                                                                                  // 177
                                                                                                                       // 178
    // 1110XXXX                                                                                                        // 179
    if (i <= 2 && c >> 4 == 0x0E) {                                                                                    // 180
      this.charLength = 3;                                                                                             // 181
      break;                                                                                                           // 182
    }                                                                                                                  // 183
                                                                                                                       // 184
    // 11110XXX                                                                                                        // 185
    if (i <= 3 && c >> 3 == 0x1E) {                                                                                    // 186
      this.charLength = 4;                                                                                             // 187
      break;                                                                                                           // 188
    }                                                                                                                  // 189
  }                                                                                                                    // 190
  this.charReceived = i;                                                                                               // 191
};                                                                                                                     // 192
                                                                                                                       // 193
StringDecoder.prototype.end = function(buffer) {                                                                       // 194
  var res = '';                                                                                                        // 195
  if (buffer && buffer.length)                                                                                         // 196
    res = this.write(buffer);                                                                                          // 197
                                                                                                                       // 198
  if (this.charReceived) {                                                                                             // 199
    var cr = this.charReceived;                                                                                        // 200
    var buf = this.charBuffer;                                                                                         // 201
    var enc = this.encoding;                                                                                           // 202
    res += buf.slice(0, cr).toString(enc);                                                                             // 203
  }                                                                                                                    // 204
                                                                                                                       // 205
  return res;                                                                                                          // 206
};                                                                                                                     // 207
                                                                                                                       // 208
function passThroughWrite(buffer) {                                                                                    // 209
  return buffer.toString(this.encoding);                                                                               // 210
}                                                                                                                      // 211
                                                                                                                       // 212
function utf16DetectIncompleteChar(buffer) {                                                                           // 213
  this.charReceived = buffer.length % 2;                                                                               // 214
  this.charLength = this.charReceived ? 2 : 0;                                                                         // 215
}                                                                                                                      // 216
                                                                                                                       // 217
function base64DetectIncompleteChar(buffer) {                                                                          // 218
  this.charReceived = buffer.length % 3;                                                                               // 219
  this.charLength = this.charReceived ? 3 : 0;                                                                         // 220
}                                                                                                                      // 221
                                                                                                                       // 222
},{"buffer":17}],41:[function(require,module,exports){                                                                 //
module.exports = function isBuffer(arg) {                                                                              // 1
  return arg && typeof arg === 'object'                                                                                // 2
    && typeof arg.copy === 'function'                                                                                  // 3
    && typeof arg.fill === 'function'                                                                                  // 4
    && typeof arg.readUInt8 === 'function';                                                                            // 5
}                                                                                                                      // 6
},{}],42:[function(require,module,exports){                                                                            //
(function (process,global){                                                                                            //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
var formatRegExp = /%[sdj%]/g;                                                                                         // 22
exports.format = function(f) {                                                                                         // 23
  if (!isString(f)) {                                                                                                  // 24
    var objects = [];                                                                                                  // 25
    for (var i = 0; i < arguments.length; i++) {                                                                       // 26
      objects.push(inspect(arguments[i]));                                                                             // 27
    }                                                                                                                  // 28
    return objects.join(' ');                                                                                          // 29
  }                                                                                                                    // 30
                                                                                                                       // 31
  var i = 1;                                                                                                           // 32
  var args = arguments;                                                                                                // 33
  var len = args.length;                                                                                               // 34
  var str = String(f).replace(formatRegExp, function(x) {                                                              // 35
    if (x === '%%') return '%';                                                                                        // 36
    if (i >= len) return x;                                                                                            // 37
    switch (x) {                                                                                                       // 38
      case '%s': return String(args[i++]);                                                                             // 39
      case '%d': return Number(args[i++]);                                                                             // 40
      case '%j':                                                                                                       // 41
        try {                                                                                                          // 42
          return JSON.stringify(args[i++]);                                                                            // 43
        } catch (_) {                                                                                                  // 44
          return '[Circular]';                                                                                         // 45
        }                                                                                                              // 46
      default:                                                                                                         // 47
        return x;                                                                                                      // 48
    }                                                                                                                  // 49
  });                                                                                                                  // 50
  for (var x = args[i]; i < len; x = args[++i]) {                                                                      // 51
    if (isNull(x) || !isObject(x)) {                                                                                   // 52
      str += ' ' + x;                                                                                                  // 53
    } else {                                                                                                           // 54
      str += ' ' + inspect(x);                                                                                         // 55
    }                                                                                                                  // 56
  }                                                                                                                    // 57
  return str;                                                                                                          // 58
};                                                                                                                     // 59
                                                                                                                       // 60
                                                                                                                       // 61
// Mark that a method should not be used.                                                                              // 62
// Returns a modified function which warns once by default.                                                            // 63
// If --no-deprecation is set, then it is a no-op.                                                                     // 64
exports.deprecate = function(fn, msg) {                                                                                // 65
  // Allow for deprecating things in the process of starting up.                                                       // 66
  if (isUndefined(global.process)) {                                                                                   // 67
    return function() {                                                                                                // 68
      return exports.deprecate(fn, msg).apply(this, arguments);                                                        // 69
    };                                                                                                                 // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  if (process.noDeprecation === true) {                                                                                // 73
    return fn;                                                                                                         // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  var warned = false;                                                                                                  // 77
  function deprecated() {                                                                                              // 78
    if (!warned) {                                                                                                     // 79
      if (process.throwDeprecation) {                                                                                  // 80
        throw new Error(msg);                                                                                          // 81
      } else if (process.traceDeprecation) {                                                                           // 82
        console.trace(msg);                                                                                            // 83
      } else {                                                                                                         // 84
        console.error(msg);                                                                                            // 85
      }                                                                                                                // 86
      warned = true;                                                                                                   // 87
    }                                                                                                                  // 88
    return fn.apply(this, arguments);                                                                                  // 89
  }                                                                                                                    // 90
                                                                                                                       // 91
  return deprecated;                                                                                                   // 92
};                                                                                                                     // 93
                                                                                                                       // 94
                                                                                                                       // 95
var debugs = {};                                                                                                       // 96
var debugEnviron;                                                                                                      // 97
exports.debuglog = function(set) {                                                                                     // 98
  if (isUndefined(debugEnviron))                                                                                       // 99
    debugEnviron = process.env.NODE_DEBUG || '';                                                                       // 100
  set = set.toUpperCase();                                                                                             // 101
  if (!debugs[set]) {                                                                                                  // 102
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {                                                     // 103
      var pid = process.pid;                                                                                           // 104
      debugs[set] = function() {                                                                                       // 105
        var msg = exports.format.apply(exports, arguments);                                                            // 106
        console.error('%s %d: %s', set, pid, msg);                                                                     // 107
      };                                                                                                               // 108
    } else {                                                                                                           // 109
      debugs[set] = function() {};                                                                                     // 110
    }                                                                                                                  // 111
  }                                                                                                                    // 112
  return debugs[set];                                                                                                  // 113
};                                                                                                                     // 114
                                                                                                                       // 115
                                                                                                                       // 116
/**                                                                                                                    // 117
 * Echos the value of a value. Trys to print the value out                                                             // 118
 * in the best way possible given the different types.                                                                 // 119
 *                                                                                                                     // 120
 * @param {Object} obj The object to print out.                                                                        // 121
 * @param {Object} opts Optional options object that alters the output.                                                // 122
 */                                                                                                                    // 123
/* legacy: obj, showHidden, depth, colors*/                                                                            // 124
function inspect(obj, opts) {                                                                                          // 125
  // default options                                                                                                   // 126
  var ctx = {                                                                                                          // 127
    seen: [],                                                                                                          // 128
    stylize: stylizeNoColor                                                                                            // 129
  };                                                                                                                   // 130
  // legacy...                                                                                                         // 131
  if (arguments.length >= 3) ctx.depth = arguments[2];                                                                 // 132
  if (arguments.length >= 4) ctx.colors = arguments[3];                                                                // 133
  if (isBoolean(opts)) {                                                                                               // 134
    // legacy...                                                                                                       // 135
    ctx.showHidden = opts;                                                                                             // 136
  } else if (opts) {                                                                                                   // 137
    // got an "options" object                                                                                         // 138
    exports._extend(ctx, opts);                                                                                        // 139
  }                                                                                                                    // 140
  // set default options                                                                                               // 141
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;                                                             // 142
  if (isUndefined(ctx.depth)) ctx.depth = 2;                                                                           // 143
  if (isUndefined(ctx.colors)) ctx.colors = false;                                                                     // 144
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;                                                        // 145
  if (ctx.colors) ctx.stylize = stylizeWithColor;                                                                      // 146
  return formatValue(ctx, obj, ctx.depth);                                                                             // 147
}                                                                                                                      // 148
exports.inspect = inspect;                                                                                             // 149
                                                                                                                       // 150
                                                                                                                       // 151
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics                                                              // 152
inspect.colors = {                                                                                                     // 153
  'bold' : [1, 22],                                                                                                    // 154
  'italic' : [3, 23],                                                                                                  // 155
  'underline' : [4, 24],                                                                                               // 156
  'inverse' : [7, 27],                                                                                                 // 157
  'white' : [37, 39],                                                                                                  // 158
  'grey' : [90, 39],                                                                                                   // 159
  'black' : [30, 39],                                                                                                  // 160
  'blue' : [34, 39],                                                                                                   // 161
  'cyan' : [36, 39],                                                                                                   // 162
  'green' : [32, 39],                                                                                                  // 163
  'magenta' : [35, 39],                                                                                                // 164
  'red' : [31, 39],                                                                                                    // 165
  'yellow' : [33, 39]                                                                                                  // 166
};                                                                                                                     // 167
                                                                                                                       // 168
// Don't use 'blue' not visible on cmd.exe                                                                             // 169
inspect.styles = {                                                                                                     // 170
  'special': 'cyan',                                                                                                   // 171
  'number': 'yellow',                                                                                                  // 172
  'boolean': 'yellow',                                                                                                 // 173
  'undefined': 'grey',                                                                                                 // 174
  'null': 'bold',                                                                                                      // 175
  'string': 'green',                                                                                                   // 176
  'date': 'magenta',                                                                                                   // 177
  // "name": intentionally not styling                                                                                 // 178
  'regexp': 'red'                                                                                                      // 179
};                                                                                                                     // 180
                                                                                                                       // 181
                                                                                                                       // 182
function stylizeWithColor(str, styleType) {                                                                            // 183
  var style = inspect.styles[styleType];                                                                               // 184
                                                                                                                       // 185
  if (style) {                                                                                                         // 186
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +                                                          // 187
           '\u001b[' + inspect.colors[style][1] + 'm';                                                                 // 188
  } else {                                                                                                             // 189
    return str;                                                                                                        // 190
  }                                                                                                                    // 191
}                                                                                                                      // 192
                                                                                                                       // 193
                                                                                                                       // 194
function stylizeNoColor(str, styleType) {                                                                              // 195
  return str;                                                                                                          // 196
}                                                                                                                      // 197
                                                                                                                       // 198
                                                                                                                       // 199
function arrayToHash(array) {                                                                                          // 200
  var hash = {};                                                                                                       // 201
                                                                                                                       // 202
  array.forEach(function(val, idx) {                                                                                   // 203
    hash[val] = true;                                                                                                  // 204
  });                                                                                                                  // 205
                                                                                                                       // 206
  return hash;                                                                                                         // 207
}                                                                                                                      // 208
                                                                                                                       // 209
                                                                                                                       // 210
function formatValue(ctx, value, recurseTimes) {                                                                       // 211
  // Provide a hook for user-specified inspect functions.                                                              // 212
  // Check that value is an object with an inspect function on it                                                      // 213
  if (ctx.customInspect &&                                                                                             // 214
      value &&                                                                                                         // 215
      isFunction(value.inspect) &&                                                                                     // 216
      // Filter out the util module, it's inspect function is special                                                  // 217
      value.inspect !== exports.inspect &&                                                                             // 218
      // Also filter out any prototype objects using the circular check.                                               // 219
      !(value.constructor && value.constructor.prototype === value)) {                                                 // 220
    var ret = value.inspect(recurseTimes, ctx);                                                                        // 221
    if (!isString(ret)) {                                                                                              // 222
      ret = formatValue(ctx, ret, recurseTimes);                                                                       // 223
    }                                                                                                                  // 224
    return ret;                                                                                                        // 225
  }                                                                                                                    // 226
                                                                                                                       // 227
  // Primitive types cannot have properties                                                                            // 228
  var primitive = formatPrimitive(ctx, value);                                                                         // 229
  if (primitive) {                                                                                                     // 230
    return primitive;                                                                                                  // 231
  }                                                                                                                    // 232
                                                                                                                       // 233
  // Look up the keys of the object.                                                                                   // 234
  var keys = Object.keys(value);                                                                                       // 235
  var visibleKeys = arrayToHash(keys);                                                                                 // 236
                                                                                                                       // 237
  if (ctx.showHidden) {                                                                                                // 238
    keys = Object.getOwnPropertyNames(value);                                                                          // 239
  }                                                                                                                    // 240
                                                                                                                       // 241
  // IE doesn't make error fields non-enumerable                                                                       // 242
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx                                                 // 243
  if (isError(value)                                                                                                   // 244
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {                                         // 245
    return formatError(value);                                                                                         // 246
  }                                                                                                                    // 247
                                                                                                                       // 248
  // Some type of object without properties can be shortcutted.                                                        // 249
  if (keys.length === 0) {                                                                                             // 250
    if (isFunction(value)) {                                                                                           // 251
      var name = value.name ? ': ' + value.name : '';                                                                  // 252
      return ctx.stylize('[Function' + name + ']', 'special');                                                         // 253
    }                                                                                                                  // 254
    if (isRegExp(value)) {                                                                                             // 255
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 256
    }                                                                                                                  // 257
    if (isDate(value)) {                                                                                               // 258
      return ctx.stylize(Date.prototype.toString.call(value), 'date');                                                 // 259
    }                                                                                                                  // 260
    if (isError(value)) {                                                                                              // 261
      return formatError(value);                                                                                       // 262
    }                                                                                                                  // 263
  }                                                                                                                    // 264
                                                                                                                       // 265
  var base = '', array = false, braces = ['{', '}'];                                                                   // 266
                                                                                                                       // 267
  // Make Array say that they are Array                                                                                // 268
  if (isArray(value)) {                                                                                                // 269
    array = true;                                                                                                      // 270
    braces = ['[', ']'];                                                                                               // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  // Make functions say that they are functions                                                                        // 274
  if (isFunction(value)) {                                                                                             // 275
    var n = value.name ? ': ' + value.name : '';                                                                       // 276
    base = ' [Function' + n + ']';                                                                                     // 277
  }                                                                                                                    // 278
                                                                                                                       // 279
  // Make RegExps say that they are RegExps                                                                            // 280
  if (isRegExp(value)) {                                                                                               // 281
    base = ' ' + RegExp.prototype.toString.call(value);                                                                // 282
  }                                                                                                                    // 283
                                                                                                                       // 284
  // Make dates with properties first say the date                                                                     // 285
  if (isDate(value)) {                                                                                                 // 286
    base = ' ' + Date.prototype.toUTCString.call(value);                                                               // 287
  }                                                                                                                    // 288
                                                                                                                       // 289
  // Make error with message first say the error                                                                       // 290
  if (isError(value)) {                                                                                                // 291
    base = ' ' + formatError(value);                                                                                   // 292
  }                                                                                                                    // 293
                                                                                                                       // 294
  if (keys.length === 0 && (!array || value.length == 0)) {                                                            // 295
    return braces[0] + base + braces[1];                                                                               // 296
  }                                                                                                                    // 297
                                                                                                                       // 298
  if (recurseTimes < 0) {                                                                                              // 299
    if (isRegExp(value)) {                                                                                             // 300
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 301
    } else {                                                                                                           // 302
      return ctx.stylize('[Object]', 'special');                                                                       // 303
    }                                                                                                                  // 304
  }                                                                                                                    // 305
                                                                                                                       // 306
  ctx.seen.push(value);                                                                                                // 307
                                                                                                                       // 308
  var output;                                                                                                          // 309
  if (array) {                                                                                                         // 310
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);                                                 // 311
  } else {                                                                                                             // 312
    output = keys.map(function(key) {                                                                                  // 313
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);                                        // 314
    });                                                                                                                // 315
  }                                                                                                                    // 316
                                                                                                                       // 317
  ctx.seen.pop();                                                                                                      // 318
                                                                                                                       // 319
  return reduceToSingleString(output, base, braces);                                                                   // 320
}                                                                                                                      // 321
                                                                                                                       // 322
                                                                                                                       // 323
function formatPrimitive(ctx, value) {                                                                                 // 324
  if (isUndefined(value))                                                                                              // 325
    return ctx.stylize('undefined', 'undefined');                                                                      // 326
  if (isString(value)) {                                                                                               // 327
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')                                                    // 328
                                             .replace(/'/g, "\\'")                                                     // 329
                                             .replace(/\\"/g, '"') + '\'';                                             // 330
    return ctx.stylize(simple, 'string');                                                                              // 331
  }                                                                                                                    // 332
  if (isNumber(value))                                                                                                 // 333
    return ctx.stylize('' + value, 'number');                                                                          // 334
  if (isBoolean(value))                                                                                                // 335
    return ctx.stylize('' + value, 'boolean');                                                                         // 336
  // For some reason typeof null is "object", so special case here.                                                    // 337
  if (isNull(value))                                                                                                   // 338
    return ctx.stylize('null', 'null');                                                                                // 339
}                                                                                                                      // 340
                                                                                                                       // 341
                                                                                                                       // 342
function formatError(value) {                                                                                          // 343
  return '[' + Error.prototype.toString.call(value) + ']';                                                             // 344
}                                                                                                                      // 345
                                                                                                                       // 346
                                                                                                                       // 347
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {                                                    // 348
  var output = [];                                                                                                     // 349
  for (var i = 0, l = value.length; i < l; ++i) {                                                                      // 350
    if (hasOwnProperty(value, String(i))) {                                                                            // 351
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 352
          String(i), true));                                                                                           // 353
    } else {                                                                                                           // 354
      output.push('');                                                                                                 // 355
    }                                                                                                                  // 356
  }                                                                                                                    // 357
  keys.forEach(function(key) {                                                                                         // 358
    if (!key.match(/^\d+$/)) {                                                                                         // 359
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 360
          key, true));                                                                                                 // 361
    }                                                                                                                  // 362
  });                                                                                                                  // 363
  return output;                                                                                                       // 364
}                                                                                                                      // 365
                                                                                                                       // 366
                                                                                                                       // 367
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {                                           // 368
  var name, str, desc;                                                                                                 // 369
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };                                         // 370
  if (desc.get) {                                                                                                      // 371
    if (desc.set) {                                                                                                    // 372
      str = ctx.stylize('[Getter/Setter]', 'special');                                                                 // 373
    } else {                                                                                                           // 374
      str = ctx.stylize('[Getter]', 'special');                                                                        // 375
    }                                                                                                                  // 376
  } else {                                                                                                             // 377
    if (desc.set) {                                                                                                    // 378
      str = ctx.stylize('[Setter]', 'special');                                                                        // 379
    }                                                                                                                  // 380
  }                                                                                                                    // 381
  if (!hasOwnProperty(visibleKeys, key)) {                                                                             // 382
    name = '[' + key + ']';                                                                                            // 383
  }                                                                                                                    // 384
  if (!str) {                                                                                                          // 385
    if (ctx.seen.indexOf(desc.value) < 0) {                                                                            // 386
      if (isNull(recurseTimes)) {                                                                                      // 387
        str = formatValue(ctx, desc.value, null);                                                                      // 388
      } else {                                                                                                         // 389
        str = formatValue(ctx, desc.value, recurseTimes - 1);                                                          // 390
      }                                                                                                                // 391
      if (str.indexOf('\n') > -1) {                                                                                    // 392
        if (array) {                                                                                                   // 393
          str = str.split('\n').map(function(line) {                                                                   // 394
            return '  ' + line;                                                                                        // 395
          }).join('\n').substr(2);                                                                                     // 396
        } else {                                                                                                       // 397
          str = '\n' + str.split('\n').map(function(line) {                                                            // 398
            return '   ' + line;                                                                                       // 399
          }).join('\n');                                                                                               // 400
        }                                                                                                              // 401
      }                                                                                                                // 402
    } else {                                                                                                           // 403
      str = ctx.stylize('[Circular]', 'special');                                                                      // 404
    }                                                                                                                  // 405
  }                                                                                                                    // 406
  if (isUndefined(name)) {                                                                                             // 407
    if (array && key.match(/^\d+$/)) {                                                                                 // 408
      return str;                                                                                                      // 409
    }                                                                                                                  // 410
    name = JSON.stringify('' + key);                                                                                   // 411
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {                                                                  // 412
      name = name.substr(1, name.length - 2);                                                                          // 413
      name = ctx.stylize(name, 'name');                                                                                // 414
    } else {                                                                                                           // 415
      name = name.replace(/'/g, "\\'")                                                                                 // 416
                 .replace(/\\"/g, '"')                                                                                 // 417
                 .replace(/(^"|"$)/g, "'");                                                                            // 418
      name = ctx.stylize(name, 'string');                                                                              // 419
    }                                                                                                                  // 420
  }                                                                                                                    // 421
                                                                                                                       // 422
  return name + ': ' + str;                                                                                            // 423
}                                                                                                                      // 424
                                                                                                                       // 425
                                                                                                                       // 426
function reduceToSingleString(output, base, braces) {                                                                  // 427
  var numLinesEst = 0;                                                                                                 // 428
  var length = output.reduce(function(prev, cur) {                                                                     // 429
    numLinesEst++;                                                                                                     // 430
    if (cur.indexOf('\n') >= 0) numLinesEst++;                                                                         // 431
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;                                                       // 432
  }, 0);                                                                                                               // 433
                                                                                                                       // 434
  if (length > 60) {                                                                                                   // 435
    return braces[0] +                                                                                                 // 436
           (base === '' ? '' : base + '\n ') +                                                                         // 437
           ' ' +                                                                                                       // 438
           output.join(',\n  ') +                                                                                      // 439
           ' ' +                                                                                                       // 440
           braces[1];                                                                                                  // 441
  }                                                                                                                    // 442
                                                                                                                       // 443
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];                                                 // 444
}                                                                                                                      // 445
                                                                                                                       // 446
                                                                                                                       // 447
// NOTE: These type checking functions intentionally don't use `instanceof`                                            // 448
// because it is fragile and can be easily faked with `Object.create()`.                                               // 449
function isArray(ar) {                                                                                                 // 450
  return Array.isArray(ar);                                                                                            // 451
}                                                                                                                      // 452
exports.isArray = isArray;                                                                                             // 453
                                                                                                                       // 454
function isBoolean(arg) {                                                                                              // 455
  return typeof arg === 'boolean';                                                                                     // 456
}                                                                                                                      // 457
exports.isBoolean = isBoolean;                                                                                         // 458
                                                                                                                       // 459
function isNull(arg) {                                                                                                 // 460
  return arg === null;                                                                                                 // 461
}                                                                                                                      // 462
exports.isNull = isNull;                                                                                               // 463
                                                                                                                       // 464
function isNullOrUndefined(arg) {                                                                                      // 465
  return arg == null;                                                                                                  // 466
}                                                                                                                      // 467
exports.isNullOrUndefined = isNullOrUndefined;                                                                         // 468
                                                                                                                       // 469
function isNumber(arg) {                                                                                               // 470
  return typeof arg === 'number';                                                                                      // 471
}                                                                                                                      // 472
exports.isNumber = isNumber;                                                                                           // 473
                                                                                                                       // 474
function isString(arg) {                                                                                               // 475
  return typeof arg === 'string';                                                                                      // 476
}                                                                                                                      // 477
exports.isString = isString;                                                                                           // 478
                                                                                                                       // 479
function isSymbol(arg) {                                                                                               // 480
  return typeof arg === 'symbol';                                                                                      // 481
}                                                                                                                      // 482
exports.isSymbol = isSymbol;                                                                                           // 483
                                                                                                                       // 484
function isUndefined(arg) {                                                                                            // 485
  return arg === void 0;                                                                                               // 486
}                                                                                                                      // 487
exports.isUndefined = isUndefined;                                                                                     // 488
                                                                                                                       // 489
function isRegExp(re) {                                                                                                // 490
  return isObject(re) && objectToString(re) === '[object RegExp]';                                                     // 491
}                                                                                                                      // 492
exports.isRegExp = isRegExp;                                                                                           // 493
                                                                                                                       // 494
function isObject(arg) {                                                                                               // 495
  return typeof arg === 'object' && arg !== null;                                                                      // 496
}                                                                                                                      // 497
exports.isObject = isObject;                                                                                           // 498
                                                                                                                       // 499
function isDate(d) {                                                                                                   // 500
  return isObject(d) && objectToString(d) === '[object Date]';                                                         // 501
}                                                                                                                      // 502
exports.isDate = isDate;                                                                                               // 503
                                                                                                                       // 504
function isError(e) {                                                                                                  // 505
  return isObject(e) &&                                                                                                // 506
      (objectToString(e) === '[object Error]' || e instanceof Error);                                                  // 507
}                                                                                                                      // 508
exports.isError = isError;                                                                                             // 509
                                                                                                                       // 510
function isFunction(arg) {                                                                                             // 511
  return typeof arg === 'function';                                                                                    // 512
}                                                                                                                      // 513
exports.isFunction = isFunction;                                                                                       // 514
                                                                                                                       // 515
function isPrimitive(arg) {                                                                                            // 516
  return arg === null ||                                                                                               // 517
         typeof arg === 'boolean' ||                                                                                   // 518
         typeof arg === 'number' ||                                                                                    // 519
         typeof arg === 'string' ||                                                                                    // 520
         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 521
         typeof arg === 'undefined';                                                                                   // 522
}                                                                                                                      // 523
exports.isPrimitive = isPrimitive;                                                                                     // 524
                                                                                                                       // 525
exports.isBuffer = require('./support/isBuffer');                                                                      // 526
                                                                                                                       // 527
function objectToString(o) {                                                                                           // 528
  return Object.prototype.toString.call(o);                                                                            // 529
}                                                                                                                      // 530
                                                                                                                       // 531
                                                                                                                       // 532
function pad(n) {                                                                                                      // 533
  return n < 10 ? '0' + n.toString(10) : n.toString(10);                                                               // 534
}                                                                                                                      // 535
                                                                                                                       // 536
                                                                                                                       // 537
var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',                                           // 538
              'Oct', 'Nov', 'Dec'];                                                                                    // 539
                                                                                                                       // 540
// 26 Feb 16:19:34                                                                                                     // 541
function timestamp() {                                                                                                 // 542
  var d = new Date();                                                                                                  // 543
  var time = [pad(d.getHours()),                                                                                       // 544
              pad(d.getMinutes()),                                                                                     // 545
              pad(d.getSeconds())].join(':');                                                                          // 546
  return [d.getDate(), months[d.getMonth()], time].join(' ');                                                          // 547
}                                                                                                                      // 548
                                                                                                                       // 549
                                                                                                                       // 550
// log is just a thin wrapper to console.log that prepends a timestamp                                                 // 551
exports.log = function() {                                                                                             // 552
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));                                       // 553
};                                                                                                                     // 554
                                                                                                                       // 555
                                                                                                                       // 556
/**                                                                                                                    // 557
 * Inherit the prototype methods from one constructor into another.                                                    // 558
 *                                                                                                                     // 559
 * The Function.prototype.inherits from lang.js rewritten as a standalone                                              // 560
 * function (not on Function.prototype). NOTE: If this file is to be loaded                                            // 561
 * during bootstrapping this function needs to be rewritten using some native                                          // 562
 * functions as prototype setup using normal JavaScript does not work as                                               // 563
 * expected during bootstrapping (see mirror.js in r114903).                                                           // 564
 *                                                                                                                     // 565
 * @param {function} ctor Constructor function which needs to inherit the                                              // 566
 *     prototype.                                                                                                      // 567
 * @param {function} superCtor Constructor function to inherit prototype from.                                         // 568
 */                                                                                                                    // 569
exports.inherits = require('inherits');                                                                                // 570
                                                                                                                       // 571
exports._extend = function(origin, add) {                                                                              // 572
  // Don't do anything if add isn't an object                                                                          // 573
  if (!add || !isObject(add)) return origin;                                                                           // 574
                                                                                                                       // 575
  var keys = Object.keys(add);                                                                                         // 576
  var i = keys.length;                                                                                                 // 577
  while (i--) {                                                                                                        // 578
    origin[keys[i]] = add[keys[i]];                                                                                    // 579
  }                                                                                                                    // 580
  return origin;                                                                                                       // 581
};                                                                                                                     // 582
                                                                                                                       // 583
function hasOwnProperty(obj, prop) {                                                                                   // 584
  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 585
}                                                                                                                      // 586
                                                                                                                       // 587
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                                                                                                                       //
},{"./support/isBuffer":41,"_process":25,"inherits":22}],43:[function(require,module,exports){                         //
PDFDocument = require('pdfkit');                                                                                       // 1
blobStream  = require('blob-stream');                                                                                  // 2
                                                                                                                       // 3
},{"blob-stream":44,"pdfkit":47}],44:[function(require,module,exports){                                                //
(function (global){                                                                                                    //
var WritableStream = require('stream').Writable;                                                                       // 1
var util = require('util');                                                                                            // 2
var Blob = require('blob');                                                                                            // 3
var URL = global.URL || global.webkitURL || global.mozURL;                                                             // 4
                                                                                                                       // 5
function BlobStream() {                                                                                                // 6
  if (!(this instanceof BlobStream))                                                                                   // 7
    return new BlobStream;                                                                                             // 8
                                                                                                                       // 9
  WritableStream.call(this);                                                                                           // 10
  this._chunks = [];                                                                                                   // 11
  this._blob = null;                                                                                                   // 12
  this.length = 0;                                                                                                     // 13
}                                                                                                                      // 14
                                                                                                                       // 15
util.inherits(BlobStream, WritableStream);                                                                             // 16
                                                                                                                       // 17
BlobStream.prototype._write = function(chunk, encoding, callback) {                                                    // 18
  // convert chunks to Uint8Arrays (e.g. Buffer when array fallback is being used)                                     // 19
  if (!(chunk instanceof Uint8Array))                                                                                  // 20
    chunk = new Uint8Array(chunk);                                                                                     // 21
                                                                                                                       // 22
  this.length += chunk.length;                                                                                         // 23
  this._chunks.push(chunk);                                                                                            // 24
  callback();                                                                                                          // 25
};                                                                                                                     // 26
                                                                                                                       // 27
BlobStream.prototype.toBlob = function(type) {                                                                         // 28
  type = type || 'application/octet-stream';                                                                           // 29
                                                                                                                       // 30
  // cache the blob if needed                                                                                          // 31
  if (!this._blob) {                                                                                                   // 32
    this._blob = new Blob(this._chunks, {                                                                              // 33
      type: type                                                                                                       // 34
    });                                                                                                                // 35
                                                                                                                       // 36
    this._chunks = []; // free memory                                                                                  // 37
  }                                                                                                                    // 38
                                                                                                                       // 39
  // if the cached blob's type doesn't match the requested type, make a new blob                                       // 40
  if (this._blob.type !== type)                                                                                        // 41
    this._blob = new Blob([this._blob], { type: type });                                                               // 42
                                                                                                                       // 43
  return this._blob;                                                                                                   // 44
};                                                                                                                     // 45
                                                                                                                       // 46
BlobStream.prototype.toBlobURL = function(type) {                                                                      // 47
  return URL.createObjectURL(this.toBlob(type));                                                                       // 48
};                                                                                                                     // 49
                                                                                                                       // 50
module.exports = BlobStream;                                                                                           // 51
                                                                                                                       // 52
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                                                                                                                       //
},{"blob":45,"stream":39,"util":42}],45:[function(require,module,exports){                                             //
(function (global){                                                                                                    //
/**                                                                                                                    // 1
 * Create a blob builder even when vendor prefixes exist                                                               // 2
 */                                                                                                                    // 3
                                                                                                                       // 4
var BlobBuilder = global.BlobBuilder                                                                                   // 5
  || global.WebKitBlobBuilder                                                                                          // 6
  || global.MSBlobBuilder                                                                                              // 7
  || global.MozBlobBuilder;                                                                                            // 8
                                                                                                                       // 9
/**                                                                                                                    // 10
 * Check if Blob constructor is supported                                                                              // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var blobSupported = (function() {                                                                                      // 14
  try {                                                                                                                // 15
    var a = new Blob(['hi']);                                                                                          // 16
    return a.size === 2;                                                                                               // 17
  } catch(e) {                                                                                                         // 18
    return false;                                                                                                      // 19
  }                                                                                                                    // 20
})();                                                                                                                  // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Check if Blob constructor supports ArrayBufferViews                                                                 // 24
 * Fails in Safari 6, so we need to map to ArrayBuffers there.                                                         // 25
 */                                                                                                                    // 26
                                                                                                                       // 27
var blobSupportsArrayBufferView = blobSupported && (function() {                                                       // 28
  try {                                                                                                                // 29
    var b = new Blob([new Uint8Array([1,2])]);                                                                         // 30
    return b.size === 2;                                                                                               // 31
  } catch(e) {                                                                                                         // 32
    return false;                                                                                                      // 33
  }                                                                                                                    // 34
})();                                                                                                                  // 35
                                                                                                                       // 36
/**                                                                                                                    // 37
 * Check if BlobBuilder is supported                                                                                   // 38
 */                                                                                                                    // 39
                                                                                                                       // 40
var blobBuilderSupported = BlobBuilder                                                                                 // 41
  && BlobBuilder.prototype.append                                                                                      // 42
  && BlobBuilder.prototype.getBlob;                                                                                    // 43
                                                                                                                       // 44
/**                                                                                                                    // 45
 * Helper function that maps ArrayBufferViews to ArrayBuffers                                                          // 46
 * Used by BlobBuilder constructor and old browsers that didn't                                                        // 47
 * support it in the Blob constructor.                                                                                 // 48
 */                                                                                                                    // 49
                                                                                                                       // 50
function mapArrayBufferViews(ary) {                                                                                    // 51
  for (var i = 0; i < ary.length; i++) {                                                                               // 52
    var chunk = ary[i];                                                                                                // 53
    if (chunk.buffer instanceof ArrayBuffer) {                                                                         // 54
      var buf = chunk.buffer;                                                                                          // 55
                                                                                                                       // 56
      // if this is a subarray, make a copy so we only                                                                 // 57
      // include the subarray region from the underlying buffer                                                        // 58
      if (chunk.byteLength !== buf.byteLength) {                                                                       // 59
        var copy = new Uint8Array(chunk.byteLength);                                                                   // 60
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));                                             // 61
        buf = copy.buffer;                                                                                             // 62
      }                                                                                                                // 63
                                                                                                                       // 64
      ary[i] = buf;                                                                                                    // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function BlobBuilderConstructor(ary, options) {                                                                        // 70
  options = options || {};                                                                                             // 71
                                                                                                                       // 72
  var bb = new BlobBuilder();                                                                                          // 73
  mapArrayBufferViews(ary);                                                                                            // 74
                                                                                                                       // 75
  for (var i = 0; i < ary.length; i++) {                                                                               // 76
    bb.append(ary[i]);                                                                                                 // 77
  }                                                                                                                    // 78
                                                                                                                       // 79
  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();                                                     // 80
};                                                                                                                     // 81
                                                                                                                       // 82
function BlobConstructor(ary, options) {                                                                               // 83
  mapArrayBufferViews(ary);                                                                                            // 84
  return new Blob(ary, options || {});                                                                                 // 85
};                                                                                                                     // 86
                                                                                                                       // 87
module.exports = (function() {                                                                                         // 88
  if (blobSupported) {                                                                                                 // 89
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;                                                // 90
  } else if (blobBuilderSupported) {                                                                                   // 91
    return BlobBuilderConstructor;                                                                                     // 92
  } else {                                                                                                             // 93
    return undefined;                                                                                                  // 94
  }                                                                                                                    // 95
})();                                                                                                                  // 96
                                                                                                                       // 97
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                                                                                                                       //
},{}],46:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data;                                                                                                            // 3
                                                                                                                       // 4
  Data = (function() {                                                                                                 // 5
    function Data(data) {                                                                                              // 6
      this.data = data != null ? data : [];                                                                            // 7
      this.pos = 0;                                                                                                    // 8
      this.length = this.data.length;                                                                                  // 9
    }                                                                                                                  // 10
                                                                                                                       // 11
    Data.prototype.readByte = function() {                                                                             // 12
      return this.data[this.pos++];                                                                                    // 13
    };                                                                                                                 // 14
                                                                                                                       // 15
    Data.prototype.writeByte = function(byte) {                                                                        // 16
      return this.data[this.pos++] = byte;                                                                             // 17
    };                                                                                                                 // 18
                                                                                                                       // 19
    Data.prototype.byteAt = function(index) {                                                                          // 20
      return this.data[index];                                                                                         // 21
    };                                                                                                                 // 22
                                                                                                                       // 23
    Data.prototype.readBool = function() {                                                                             // 24
      return !!this.readByte();                                                                                        // 25
    };                                                                                                                 // 26
                                                                                                                       // 27
    Data.prototype.writeBool = function(val) {                                                                         // 28
      return this.writeByte(val ? 1 : 0);                                                                              // 29
    };                                                                                                                 // 30
                                                                                                                       // 31
    Data.prototype.readUInt32 = function() {                                                                           // 32
      var b1, b2, b3, b4;                                                                                              // 33
      b1 = this.readByte() * 0x1000000;                                                                                // 34
      b2 = this.readByte() << 16;                                                                                      // 35
      b3 = this.readByte() << 8;                                                                                       // 36
      b4 = this.readByte();                                                                                            // 37
      return b1 + b2 + b3 + b4;                                                                                        // 38
    };                                                                                                                 // 39
                                                                                                                       // 40
    Data.prototype.writeUInt32 = function(val) {                                                                       // 41
      this.writeByte((val >>> 24) & 0xff);                                                                             // 42
      this.writeByte((val >> 16) & 0xff);                                                                              // 43
      this.writeByte((val >> 8) & 0xff);                                                                               // 44
      return this.writeByte(val & 0xff);                                                                               // 45
    };                                                                                                                 // 46
                                                                                                                       // 47
    Data.prototype.readInt32 = function() {                                                                            // 48
      var int;                                                                                                         // 49
      int = this.readUInt32();                                                                                         // 50
      if (int >= 0x80000000) {                                                                                         // 51
        return int - 0x100000000;                                                                                      // 52
      } else {                                                                                                         // 53
        return int;                                                                                                    // 54
      }                                                                                                                // 55
    };                                                                                                                 // 56
                                                                                                                       // 57
    Data.prototype.writeInt32 = function(val) {                                                                        // 58
      if (val < 0) {                                                                                                   // 59
        val += 0x100000000;                                                                                            // 60
      }                                                                                                                // 61
      return this.writeUInt32(val);                                                                                    // 62
    };                                                                                                                 // 63
                                                                                                                       // 64
    Data.prototype.readUInt16 = function() {                                                                           // 65
      var b1, b2;                                                                                                      // 66
      b1 = this.readByte() << 8;                                                                                       // 67
      b2 = this.readByte();                                                                                            // 68
      return b1 | b2;                                                                                                  // 69
    };                                                                                                                 // 70
                                                                                                                       // 71
    Data.prototype.writeUInt16 = function(val) {                                                                       // 72
      this.writeByte((val >> 8) & 0xff);                                                                               // 73
      return this.writeByte(val & 0xff);                                                                               // 74
    };                                                                                                                 // 75
                                                                                                                       // 76
    Data.prototype.readInt16 = function() {                                                                            // 77
      var int;                                                                                                         // 78
      int = this.readUInt16();                                                                                         // 79
      if (int >= 0x8000) {                                                                                             // 80
        return int - 0x10000;                                                                                          // 81
      } else {                                                                                                         // 82
        return int;                                                                                                    // 83
      }                                                                                                                // 84
    };                                                                                                                 // 85
                                                                                                                       // 86
    Data.prototype.writeInt16 = function(val) {                                                                        // 87
      if (val < 0) {                                                                                                   // 88
        val += 0x10000;                                                                                                // 89
      }                                                                                                                // 90
      return this.writeUInt16(val);                                                                                    // 91
    };                                                                                                                 // 92
                                                                                                                       // 93
    Data.prototype.readString = function(length) {                                                                     // 94
      var i, ret, _i;                                                                                                  // 95
      ret = [];                                                                                                        // 96
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {                       // 97
        ret[i] = String.fromCharCode(this.readByte());                                                                 // 98
      }                                                                                                                // 99
      return ret.join('');                                                                                             // 100
    };                                                                                                                 // 101
                                                                                                                       // 102
    Data.prototype.writeString = function(val) {                                                                       // 103
      var i, _i, _ref, _results;                                                                                       // 104
      _results = [];                                                                                                   // 105
      for (i = _i = 0, _ref = val.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {            // 106
        _results.push(this.writeByte(val.charCodeAt(i)));                                                              // 107
      }                                                                                                                // 108
      return _results;                                                                                                 // 109
    };                                                                                                                 // 110
                                                                                                                       // 111
    Data.prototype.stringAt = function(pos, length) {                                                                  // 112
      this.pos = pos;                                                                                                  // 113
      return this.readString(length);                                                                                  // 114
    };                                                                                                                 // 115
                                                                                                                       // 116
    Data.prototype.readShort = function() {                                                                            // 117
      return this.readInt16();                                                                                         // 118
    };                                                                                                                 // 119
                                                                                                                       // 120
    Data.prototype.writeShort = function(val) {                                                                        // 121
      return this.writeInt16(val);                                                                                     // 122
    };                                                                                                                 // 123
                                                                                                                       // 124
    Data.prototype.readLongLong = function() {                                                                         // 125
      var b1, b2, b3, b4, b5, b6, b7, b8;                                                                              // 126
      b1 = this.readByte();                                                                                            // 127
      b2 = this.readByte();                                                                                            // 128
      b3 = this.readByte();                                                                                            // 129
      b4 = this.readByte();                                                                                            // 130
      b5 = this.readByte();                                                                                            // 131
      b6 = this.readByte();                                                                                            // 132
      b7 = this.readByte();                                                                                            // 133
      b8 = this.readByte();                                                                                            // 134
      if (b1 & 0x80) {                                                                                                 // 135
        return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;
      }                                                                                                                // 137
      return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;
    };                                                                                                                 // 139
                                                                                                                       // 140
    Data.prototype.writeLongLong = function(val) {                                                                     // 141
      var high, low;                                                                                                   // 142
      high = Math.floor(val / 0x100000000);                                                                            // 143
      low = val & 0xffffffff;                                                                                          // 144
      this.writeByte((high >> 24) & 0xff);                                                                             // 145
      this.writeByte((high >> 16) & 0xff);                                                                             // 146
      this.writeByte((high >> 8) & 0xff);                                                                              // 147
      this.writeByte(high & 0xff);                                                                                     // 148
      this.writeByte((low >> 24) & 0xff);                                                                              // 149
      this.writeByte((low >> 16) & 0xff);                                                                              // 150
      this.writeByte((low >> 8) & 0xff);                                                                               // 151
      return this.writeByte(low & 0xff);                                                                               // 152
    };                                                                                                                 // 153
                                                                                                                       // 154
    Data.prototype.readInt = function() {                                                                              // 155
      return this.readInt32();                                                                                         // 156
    };                                                                                                                 // 157
                                                                                                                       // 158
    Data.prototype.writeInt = function(val) {                                                                          // 159
      return this.writeInt32(val);                                                                                     // 160
    };                                                                                                                 // 161
                                                                                                                       // 162
    Data.prototype.slice = function(start, end) {                                                                      // 163
      return this.data.slice(start, end);                                                                              // 164
    };                                                                                                                 // 165
                                                                                                                       // 166
    Data.prototype.read = function(bytes) {                                                                            // 167
      var buf, i, _i;                                                                                                  // 168
      buf = [];                                                                                                        // 169
      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {                           // 170
        buf.push(this.readByte());                                                                                     // 171
      }                                                                                                                // 172
      return buf;                                                                                                      // 173
    };                                                                                                                 // 174
                                                                                                                       // 175
    Data.prototype.write = function(bytes) {                                                                           // 176
      var byte, _i, _len, _results;                                                                                    // 177
      _results = [];                                                                                                   // 178
      for (_i = 0, _len = bytes.length; _i < _len; _i++) {                                                             // 179
        byte = bytes[_i];                                                                                              // 180
        _results.push(this.writeByte(byte));                                                                           // 181
      }                                                                                                                // 182
      return _results;                                                                                                 // 183
    };                                                                                                                 // 184
                                                                                                                       // 185
    return Data;                                                                                                       // 186
                                                                                                                       // 187
  })();                                                                                                                // 188
                                                                                                                       // 189
  module.exports = Data;                                                                                               // 190
                                                                                                                       // 191
}).call(this);                                                                                                         // 192
                                                                                                                       // 193
},{}],47:[function(require,module,exports){                                                                            //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
PDFDocument - represents an entire PDF document                                                                        // 4
By Devon Govett                                                                                                        // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
(function() {                                                                                                          // 8
  var PDFDocument, PDFObject, PDFPage, PDFReference, fs, stream,                                                       // 9
    __hasProp = {}.hasOwnProperty,                                                                                     // 10
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 12
  stream = require('stream');                                                                                          // 13
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       // 16
  PDFObject = require('./object');                                                                                     // 17
                                                                                                                       // 18
  PDFReference = require('./reference');                                                                               // 19
                                                                                                                       // 20
  PDFPage = require('./page');                                                                                         // 21
                                                                                                                       // 22
  PDFDocument = (function(_super) {                                                                                    // 23
    var mixin;                                                                                                         // 24
                                                                                                                       // 25
    __extends(PDFDocument, _super);                                                                                    // 26
                                                                                                                       // 27
    function PDFDocument(options) {                                                                                    // 28
      var key, val, _ref, _ref1;                                                                                       // 29
      this.options = options != null ? options : {};                                                                   // 30
      PDFDocument.__super__.constructor.apply(this, arguments);                                                        // 31
      this.version = 1.3;                                                                                              // 32
      this.compress = (_ref = this.options.compress) != null ? _ref : true;                                            // 33
      this._pageBuffer = [];                                                                                           // 34
      this._pageBufferStart = 0;                                                                                       // 35
      this._offsets = [];                                                                                              // 36
      this._waiting = 0;                                                                                               // 37
      this._ended = false;                                                                                             // 38
      this._offset = 0;                                                                                                // 39
      this._root = this.ref({                                                                                          // 40
        Type: 'Catalog',                                                                                               // 41
        Pages: this.ref({                                                                                              // 42
          Type: 'Pages',                                                                                               // 43
          Count: 0,                                                                                                    // 44
          Kids: []                                                                                                     // 45
        })                                                                                                             // 46
      });                                                                                                              // 47
      this.page = null;                                                                                                // 48
      this.initColor();                                                                                                // 49
      this.initVector();                                                                                               // 50
      this.initFonts();                                                                                                // 51
      this.initText();                                                                                                 // 52
      this.initImages();                                                                                               // 53
      this.info = {                                                                                                    // 54
        Producer: 'PDFKit',                                                                                            // 55
        Creator: 'PDFKit',                                                                                             // 56
        CreationDate: new Date()                                                                                       // 57
      };                                                                                                               // 58
      if (this.options.info) {                                                                                         // 59
        _ref1 = this.options.info;                                                                                     // 60
        for (key in _ref1) {                                                                                           // 61
          val = _ref1[key];                                                                                            // 62
          this.info[key] = val;                                                                                        // 63
        }                                                                                                              // 64
      }                                                                                                                // 65
      this._write("%PDF-" + this.version);                                                                             // 66
      this._write("%\xFF\xFF\xFF\xFF");                                                                                // 67
      this.addPage();                                                                                                  // 68
    }                                                                                                                  // 69
                                                                                                                       // 70
    mixin = function(methods) {                                                                                        // 71
      var method, name, _results;                                                                                      // 72
      _results = [];                                                                                                   // 73
      for (name in methods) {                                                                                          // 74
        method = methods[name];                                                                                        // 75
        _results.push(PDFDocument.prototype[name] = method);                                                           // 76
      }                                                                                                                // 77
      return _results;                                                                                                 // 78
    };                                                                                                                 // 79
                                                                                                                       // 80
    mixin(require('./mixins/color'));                                                                                  // 81
                                                                                                                       // 82
    mixin(require('./mixins/vector'));                                                                                 // 83
                                                                                                                       // 84
    mixin(require('./mixins/fonts'));                                                                                  // 85
                                                                                                                       // 86
    mixin(require('./mixins/text'));                                                                                   // 87
                                                                                                                       // 88
    mixin(require('./mixins/images'));                                                                                 // 89
                                                                                                                       // 90
    mixin(require('./mixins/annotations'));                                                                            // 91
                                                                                                                       // 92
    PDFDocument.prototype.addPage = function(options) {                                                                // 93
      var pages;                                                                                                       // 94
      if (options == null) {                                                                                           // 95
        options = this.options;                                                                                        // 96
      }                                                                                                                // 97
      if (!this.options.bufferPages) {                                                                                 // 98
        this.flushPages();                                                                                             // 99
      }                                                                                                                // 100
      this.page = new PDFPage(this, options);                                                                          // 101
      this._pageBuffer.push(this.page);                                                                                // 102
      pages = this._root.data.Pages.data;                                                                              // 103
      pages.Kids.push(this.page.dictionary);                                                                           // 104
      pages.Count++;                                                                                                   // 105
      this.x = this.page.margins.left;                                                                                 // 106
      this.y = this.page.margins.top;                                                                                  // 107
      this._ctm = [1, 0, 0, 1, 0, 0];                                                                                  // 108
      this.transform(1, 0, 0, -1, 0, this.page.height);                                                                // 109
      return this;                                                                                                     // 110
    };                                                                                                                 // 111
                                                                                                                       // 112
    PDFDocument.prototype.bufferedPageRange = function() {                                                             // 113
      return {                                                                                                         // 114
        start: this._pageBufferStart,                                                                                  // 115
        count: this._pageBuffer.length                                                                                 // 116
      };                                                                                                               // 117
    };                                                                                                                 // 118
                                                                                                                       // 119
    PDFDocument.prototype.switchToPage = function(n) {                                                                 // 120
      var page;                                                                                                        // 121
      if (!(page = this._pageBuffer[n - this._pageBufferStart])) {                                                     // 122
        throw new Error("switchToPage(" + n + ") out of bounds, current buffer covers pages " + this._pageBufferStart + " to " + (this._pageBufferStart + this._pageBuffer.length - 1));
      }                                                                                                                // 124
      return this.page = page;                                                                                         // 125
    };                                                                                                                 // 126
                                                                                                                       // 127
    PDFDocument.prototype.flushPages = function() {                                                                    // 128
      var page, pages, _i, _len;                                                                                       // 129
      pages = this._pageBuffer;                                                                                        // 130
      this._pageBuffer = [];                                                                                           // 131
      this._pageBufferStart += pages.length;                                                                           // 132
      for (_i = 0, _len = pages.length; _i < _len; _i++) {                                                             // 133
        page = pages[_i];                                                                                              // 134
        page.end();                                                                                                    // 135
      }                                                                                                                // 136
    };                                                                                                                 // 137
                                                                                                                       // 138
    PDFDocument.prototype.ref = function(data) {                                                                       // 139
      var ref;                                                                                                         // 140
      ref = new PDFReference(this, this._offsets.length + 1, data);                                                    // 141
      this._offsets.push(null);                                                                                        // 142
      this._waiting++;                                                                                                 // 143
      return ref;                                                                                                      // 144
    };                                                                                                                 // 145
                                                                                                                       // 146
    PDFDocument.prototype._read = function() {};                                                                       // 147
                                                                                                                       // 148
    PDFDocument.prototype._write = function(data) {                                                                    // 149
      if (!Buffer.isBuffer(data)) {                                                                                    // 150
        data = new Buffer(data + '\n', 'binary');                                                                      // 151
      }                                                                                                                // 152
      this.push(data);                                                                                                 // 153
      return this._offset += data.length;                                                                              // 154
    };                                                                                                                 // 155
                                                                                                                       // 156
    PDFDocument.prototype.addContent = function(data) {                                                                // 157
      this.page.write(data);                                                                                           // 158
      return this;                                                                                                     // 159
    };                                                                                                                 // 160
                                                                                                                       // 161
    PDFDocument.prototype._refEnd = function(ref) {                                                                    // 162
      this._offsets[ref.id - 1] = ref.offset;                                                                          // 163
      if (--this._waiting === 0 && this._ended) {                                                                      // 164
        this._finalize();                                                                                              // 165
        return this._ended = false;                                                                                    // 166
      }                                                                                                                // 167
    };                                                                                                                 // 168
                                                                                                                       // 169
    PDFDocument.prototype.write = function(filename, fn) {                                                             // 170
      var err;                                                                                                         // 171
      err = new Error('PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.');
      console.warn(err.stack);                                                                                         // 173
      this.pipe(fs.createWriteStream(filename));                                                                       // 174
      this.end();                                                                                                      // 175
      return this.once('end', fn);                                                                                     // 176
    };                                                                                                                 // 177
                                                                                                                       // 178
    PDFDocument.prototype.output = function(fn) {                                                                      // 179
      throw new Error('PDFDocument#output is deprecated, and has been removed from PDFKit. Please pipe the document into a Node stream.');
    };                                                                                                                 // 181
                                                                                                                       // 182
    PDFDocument.prototype.end = function() {                                                                           // 183
      var font, key, name, val, _ref, _ref1;                                                                           // 184
      this.flushPages();                                                                                               // 185
      this._info = this.ref();                                                                                         // 186
      _ref = this.info;                                                                                                // 187
      for (key in _ref) {                                                                                              // 188
        val = _ref[key];                                                                                               // 189
        if (typeof val === 'string') {                                                                                 // 190
          val = new String(val);                                                                                       // 191
        }                                                                                                              // 192
        this._info.data[key] = val;                                                                                    // 193
      }                                                                                                                // 194
      this._info.end();                                                                                                // 195
      _ref1 = this._fontFamilies;                                                                                      // 196
      for (name in _ref1) {                                                                                            // 197
        font = _ref1[name];                                                                                            // 198
        font.embed();                                                                                                  // 199
      }                                                                                                                // 200
      this._root.end();                                                                                                // 201
      this._root.data.Pages.end();                                                                                     // 202
      if (this._waiting === 0) {                                                                                       // 203
        return this._finalize();                                                                                       // 204
      } else {                                                                                                         // 205
        return this._ended = true;                                                                                     // 206
      }                                                                                                                // 207
    };                                                                                                                 // 208
                                                                                                                       // 209
    PDFDocument.prototype._finalize = function(fn) {                                                                   // 210
      var offset, xRefOffset, _i, _len, _ref;                                                                          // 211
      xRefOffset = this._offset;                                                                                       // 212
      this._write("xref");                                                                                             // 213
      this._write("0 " + (this._offsets.length + 1));                                                                  // 214
      this._write("0000000000 65535 f ");                                                                              // 215
      _ref = this._offsets;                                                                                            // 216
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                              // 217
        offset = _ref[_i];                                                                                             // 218
        offset = ('0000000000' + offset).slice(-10);                                                                   // 219
        this._write(offset + ' 00000 n ');                                                                             // 220
      }                                                                                                                // 221
      this._write('trailer');                                                                                          // 222
      this._write(PDFObject.convert({                                                                                  // 223
        Size: this._offsets.length + 1,                                                                                // 224
        Root: this._root,                                                                                              // 225
        Info: this._info                                                                                               // 226
      }));                                                                                                             // 227
      this._write('startxref');                                                                                        // 228
      this._write("" + xRefOffset);                                                                                    // 229
      this._write('%%EOF');                                                                                            // 230
      return this.push(null);                                                                                          // 231
    };                                                                                                                 // 232
                                                                                                                       // 233
    PDFDocument.prototype.toString = function() {                                                                      // 234
      return "[object PDFDocument]";                                                                                   // 235
    };                                                                                                                 // 236
                                                                                                                       // 237
    return PDFDocument;                                                                                                // 238
                                                                                                                       // 239
  })(stream.Readable);                                                                                                 // 240
                                                                                                                       // 241
  module.exports = PDFDocument;                                                                                        // 242
                                                                                                                       // 243
}).call(this);                                                                                                         // 244
                                                                                                                       // 245
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"./mixins/annotations":71,"./mixins/color":72,"./mixins/fonts":73,"./mixins/images":74,"./mixins/text":75,"./mixins/vector":76,"./object":77,"./page":78,"./reference":80,"buffer":17,"stream":39}],48:[function(require,module,exports){
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
PDFFont - embeds fonts in PDF documents                                                                                // 4
By Devon Govett                                                                                                        // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
(function() {                                                                                                          // 8
  var AFMFont, PDFFont, Subset, TTFFont, fs;                                                                           // 9
                                                                                                                       // 10
  TTFFont = require('./font/ttf');                                                                                     // 11
                                                                                                                       // 12
  AFMFont = require('./font/afm');                                                                                     // 13
                                                                                                                       // 14
  Subset = require('./font/subset');                                                                                   // 15
                                                                                                                       // 16
                                                                                                                       // 17
                                                                                                                       // 18
  PDFFont = (function() {                                                                                              // 19
    var STANDARD_FONTS, toUnicodeCmap;                                                                                 // 20
                                                                                                                       // 21
    function PDFFont(document, src, family, id) {                                                                      // 22
      this.document = document;                                                                                        // 23
      this.id = id;                                                                                                    // 24
      if (typeof src === 'string') {                                                                                   // 25
        if (src in STANDARD_FONTS) {                                                                                   // 26
          this.isAFM = true;                                                                                           // 27
          this.font = new AFMFont(STANDARD_FONTS[src]());                                                              // 28
          this.registerAFM(src);                                                                                       // 29
          return;                                                                                                      // 30
        } else if (/\.(ttf|ttc)$/i.test(src)) {                                                                        // 31
          this.font = TTFFont.open(src, family);                                                                       // 32
        } else if (/\.dfont$/i.test(src)) {                                                                            // 33
          this.font = TTFFont.fromDFont(src, family);                                                                  // 34
        } else {                                                                                                       // 35
          throw new Error('Not a supported font format or standard PDF font.');                                        // 36
        }                                                                                                              // 37
      } else if (Buffer.isBuffer(src)) {                                                                               // 38
        this.font = TTFFont.fromBuffer(src, family);                                                                   // 39
      } else if (src instanceof Uint8Array) {                                                                          // 40
        this.font = TTFFont.fromBuffer(new Buffer(src), family);                                                       // 41
      } else if (src instanceof ArrayBuffer) {                                                                         // 42
        this.font = TTFFont.fromBuffer(new Buffer(new Uint8Array(src)), family);                                       // 43
      } else {                                                                                                         // 44
        throw new Error('Not a supported font format or standard PDF font.');                                          // 45
      }                                                                                                                // 46
      this.subset = new Subset(this.font);                                                                             // 47
      this.registerTTF();                                                                                              // 48
    }                                                                                                                  // 49
                                                                                                                       // 50
    STANDARD_FONTS = {                                                                                                 // 51
      "Courier": function() {                                                                                          // 52
        return "StartFontMetrics 4.1\nComment Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 17:27:09 1997\nComment UniqueID 43050\nComment VMusage 39754 50779\nFontName Courier\nFullName Courier\nFamilyName Courier\nWeight Medium\nItalicAngle 0\nIsFixedPitch true\nCharacterSet ExtendedRoman\nFontBBox -23 -250 715 805 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 003.000\nNotice Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nEncodingScheme AdobeStandardEncoding\nCapHeight 562\nXHeight 426\nAscender 629\nDescender -157\nStdHW 51\nStdVW 51\nStartCharMetrics 315\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 600 ; N exclam ; B 236 -15 364 572 ;\nC 34 ; WX 600 ; N quotedbl ; B 187 328 413 562 ;\nC 35 ; WX 600 ; N numbersign ; B 93 -32 507 639 ;\nC 36 ; WX 600 ; N dollar ; B 105 -126 496 662 ;\nC 37 ; WX 600 ; N percent ; B 81 -15 518 622 ;\nC 38 ; WX 600 ; N ampersand ; B 63 -15 538 543 ;\nC 39 ; WX 600 ; N quoteright ; B 213 328 376 562 ;\nC 40 ; WX 600 ; N parenleft ; B 269 -108 440 622 ;\nC 41 ; WX 600 ; N parenright ; B 160 -108 331 622 ;\nC 42 ; WX 600 ; N asterisk ; B 116 257 484 607 ;\nC 43 ; WX 600 ; N plus ; B 80 44 520 470 ;\nC 44 ; WX 600 ; N comma ; B 181 -112 344 122 ;\nC 45 ; WX 600 ; N hyphen ; B 103 231 497 285 ;\nC 46 ; WX 600 ; N period ; B 229 -15 371 109 ;\nC 47 ; WX 600 ; N slash ; B 125 -80 475 629 ;\nC 48 ; WX 600 ; N zero ; B 106 -15 494 622 ;\nC 49 ; WX 600 ; N one ; B 96 0 505 622 ;\nC 50 ; WX 600 ; N two ; B 70 0 471 622 ;\nC 51 ; WX 600 ; N three ; B 75 -15 466 622 ;\nC 52 ; WX 600 ; N four ; B 78 0 500 622 ;\nC 53 ; WX 600 ; N five ; B 92 -15 497 607 ;\nC 54 ; WX 600 ; N six ; B 111 -15 497 622 ;\nC 55 ; WX 600 ; N seven ; B 82 0 483 607 ;\nC 56 ; WX 600 ; N eight ; B 102 -15 498 622 ;\nC 57 ; WX 600 ; N nine ; B 96 -15 489 622 ;\nC 58 ; WX 600 ; N colon ; B 229 -15 371 385 ;\nC 59 ; WX 600 ; N semicolon ; B 181 -112 371 385 ;\nC 60 ; WX 600 ; N less ; B 41 42 519 472 ;\nC 61 ; WX 600 ; N equal ; B 80 138 520 376 ;\nC 62 ; WX 600 ; N greater ; B 66 42 544 472 ;\nC 63 ; WX 600 ; N question ; B 129 -15 492 572 ;\nC 64 ; WX 600 ; N at ; B 77 -15 533 622 ;\nC 65 ; WX 600 ; N A ; B 3 0 597 562 ;\nC 66 ; WX 600 ; N B ; B 43 0 559 562 ;\nC 67 ; WX 600 ; N C ; B 41 -18 540 580 ;\nC 68 ; WX 600 ; N D ; B 43 0 574 562 ;\nC 69 ; WX 600 ; N E ; B 53 0 550 562 ;\nC 70 ; WX 600 ; N F ; B 53 0 545 562 ;\nC 71 ; WX 600 ; N G ; B 31 -18 575 580 ;\nC 72 ; WX 600 ; N H ; B 32 0 568 562 ;\nC 73 ; WX 600 ; N I ; B 96 0 504 562 ;\nC 74 ; WX 600 ; N J ; B 34 -18 566 562 ;\nC 75 ; WX 600 ; N K ; B 38 0 582 562 ;\nC 76 ; WX 600 ; N L ; B 47 0 554 562 ;\nC 77 ; WX 600 ; N M ; B 4 0 596 562 ;\nC 78 ; WX 600 ; N N ; B 7 -13 593 562 ;\nC 79 ; WX 600 ; N O ; B 43 -18 557 580 ;\nC 80 ; WX 600 ; N P ; B 79 0 558 562 ;\nC 81 ; WX 600 ; N Q ; B 43 -138 557 580 ;\nC 82 ; WX 600 ; N R ; B 38 0 588 562 ;\nC 83 ; WX 600 ; N S ; B 72 -20 529 580 ;\nC 84 ; WX 600 ; N T ; B 38 0 563 562 ;\nC 85 ; WX 600 ; N U ; B 17 -18 583 562 ;\nC 86 ; WX 600 ; N V ; B -4 -13 604 562 ;\nC 87 ; WX 600 ; N W ; B -3 -13 603 562 ;\nC 88 ; WX 600 ; N X ; B 23 0 577 562 ;\nC 89 ; WX 600 ; N Y ; B 24 0 576 562 ;\nC 90 ; WX 600 ; N Z ; B 86 0 514 562 ;\nC 91 ; WX 600 ; N bracketleft ; B 269 -108 442 622 ;\nC 92 ; WX 600 ; N backslash ; B 118 -80 482 629 ;\nC 93 ; WX 600 ; N bracketright ; B 158 -108 331 622 ;\nC 94 ; WX 600 ; N asciicircum ; B 94 354 506 622 ;\nC 95 ; WX 600 ; N underscore ; B 0 -125 600 -75 ;\nC 96 ; WX 600 ; N quoteleft ; B 224 328 387 562 ;\nC 97 ; WX 600 ; N a ; B 53 -15 559 441 ;\nC 98 ; WX 600 ; N b ; B 14 -15 575 629 ;\nC 99 ; WX 600 ; N c ; B 66 -15 529 441 ;\nC 100 ; WX 600 ; N d ; B 45 -15 591 629 ;\nC 101 ; WX 600 ; N e ; B 66 -15 548 441 ;\nC 102 ; WX 600 ; N f ; B 114 0 531 629 ; L i fi ; L l fl ;\nC 103 ; WX 600 ; N g ; B 45 -157 566 441 ;\nC 104 ; WX 600 ; N h ; B 18 0 582 629 ;\nC 105 ; WX 600 ; N i ; B 95 0 505 657 ;\nC 106 ; WX 600 ; N j ; B 82 -157 410 657 ;\nC 107 ; WX 600 ; N k ; B 43 0 580 629 ;\nC 108 ; WX 600 ; N l ; B 95 0 505 629 ;\nC 109 ; WX 600 ; N m ; B -5 0 605 441 ;\nC 110 ; WX 600 ; N n ; B 26 0 575 441 ;\nC 111 ; WX 600 ; N o ; B 62 -15 538 441 ;\nC 112 ; WX 600 ; N p ; B 9 -157 555 441 ;\nC 113 ; WX 600 ; N q ; B 45 -157 591 441 ;\nC 114 ; WX 600 ; N r ; B 60 0 559 441 ;\nC 115 ; WX 600 ; N s ; B 80 -15 513 441 ;\nC 116 ; WX 600 ; N t ; B 87 -15 530 561 ;\nC 117 ; WX 600 ; N u ; B 21 -15 562 426 ;\nC 118 ; WX 600 ; N v ; B 10 -10 590 426 ;\nC 119 ; WX 600 ; N w ; B -4 -10 604 426 ;\nC 120 ; WX 600 ; N x ; B 20 0 580 426 ;\nC 121 ; WX 600 ; N y ; B 7 -157 592 426 ;\nC 122 ; WX 600 ; N z ; B 99 0 502 426 ;\nC 123 ; WX 600 ; N braceleft ; B 182 -108 437 622 ;\nC 124 ; WX 600 ; N bar ; B 275 -250 326 750 ;\nC 125 ; WX 600 ; N braceright ; B 163 -108 418 622 ;\nC 126 ; WX 600 ; N asciitilde ; B 63 197 540 320 ;\nC 161 ; WX 600 ; N exclamdown ; B 236 -157 364 430 ;\nC 162 ; WX 600 ; N cent ; B 96 -49 500 614 ;\nC 163 ; WX 600 ; N sterling ; B 84 -21 521 611 ;\nC 164 ; WX 600 ; N fraction ; B 92 -57 509 665 ;\nC 165 ; WX 600 ; N yen ; B 26 0 574 562 ;\nC 166 ; WX 600 ; N florin ; B 4 -143 539 622 ;\nC 167 ; WX 600 ; N section ; B 113 -78 488 580 ;\nC 168 ; WX 600 ; N currency ; B 73 58 527 506 ;\nC 169 ; WX 600 ; N quotesingle ; B 259 328 341 562 ;\nC 170 ; WX 600 ; N quotedblleft ; B 143 328 471 562 ;\nC 171 ; WX 600 ; N guillemotleft ; B 37 70 563 446 ;\nC 172 ; WX 600 ; N guilsinglleft ; B 149 70 451 446 ;\nC 173 ; WX 600 ; N guilsinglright ; B 149 70 451 446 ;\nC 174 ; WX 600 ; N fi ; B 3 0 597 629 ;\nC 175 ; WX 600 ; N fl ; B 3 0 597 629 ;\nC 177 ; WX 600 ; N endash ; B 75 231 525 285 ;\nC 178 ; WX 600 ; N dagger ; B 141 -78 459 580 ;\nC 179 ; WX 600 ; N daggerdbl ; B 141 -78 459 580 ;\nC 180 ; WX 600 ; N periodcentered ; B 222 189 378 327 ;\nC 182 ; WX 600 ; N paragraph ; B 50 -78 511 562 ;\nC 183 ; WX 600 ; N bullet ; B 172 130 428 383 ;\nC 184 ; WX 600 ; N quotesinglbase ; B 213 -134 376 100 ;\nC 185 ; WX 600 ; N quotedblbase ; B 143 -134 457 100 ;\nC 186 ; WX 600 ; N quotedblright ; B 143 328 457 562 ;\nC 187 ; WX 600 ; N guillemotright ; B 37 70 563 446 ;\nC 188 ; WX 600 ; N ellipsis ; B 37 -15 563 111 ;\nC 189 ; WX 600 ; N perthousand ; B 3 -15 600 622 ;\nC 191 ; WX 600 ; N questiondown ; B 108 -157 471 430 ;\nC 193 ; WX 600 ; N grave ; B 151 497 378 672 ;\nC 194 ; WX 600 ; N acute ; B 242 497 469 672 ;\nC 195 ; WX 600 ; N circumflex ; B 124 477 476 654 ;\nC 196 ; WX 600 ; N tilde ; B 105 489 503 606 ;\nC 197 ; WX 600 ; N macron ; B 120 525 480 565 ;\nC 198 ; WX 600 ; N breve ; B 153 501 447 609 ;\nC 199 ; WX 600 ; N dotaccent ; B 249 537 352 640 ;\nC 200 ; WX 600 ; N dieresis ; B 148 537 453 640 ;\nC 202 ; WX 600 ; N ring ; B 218 463 382 627 ;\nC 203 ; WX 600 ; N cedilla ; B 224 -151 362 10 ;\nC 205 ; WX 600 ; N hungarumlaut ; B 133 497 540 672 ;\nC 206 ; WX 600 ; N ogonek ; B 211 -172 407 4 ;\nC 207 ; WX 600 ; N caron ; B 124 492 476 669 ;\nC 208 ; WX 600 ; N emdash ; B 0 231 600 285 ;\nC 225 ; WX 600 ; N AE ; B 3 0 550 562 ;\nC 227 ; WX 600 ; N ordfeminine ; B 156 249 442 580 ;\nC 232 ; WX 600 ; N Lslash ; B 47 0 554 562 ;\nC 233 ; WX 600 ; N Oslash ; B 43 -80 557 629 ;\nC 234 ; WX 600 ; N OE ; B 7 0 567 562 ;\nC 235 ; WX 600 ; N ordmasculine ; B 157 249 443 580 ;\nC 241 ; WX 600 ; N ae ; B 19 -15 570 441 ;\nC 245 ; WX 600 ; N dotlessi ; B 95 0 505 426 ;\nC 248 ; WX 600 ; N lslash ; B 95 0 505 629 ;\nC 249 ; WX 600 ; N oslash ; B 62 -80 538 506 ;\nC 250 ; WX 600 ; N oe ; B 19 -15 559 441 ;\nC 251 ; WX 600 ; N germandbls ; B 48 -15 588 629 ;\nC -1 ; WX 600 ; N Idieresis ; B 96 0 504 753 ;\nC -1 ; WX 600 ; N eacute ; B 66 -15 548 672 ;\nC -1 ; WX 600 ; N abreve ; B 53 -15 559 609 ;\nC -1 ; WX 600 ; N uhungarumlaut ; B 21 -15 580 672 ;\nC -1 ; WX 600 ; N ecaron ; B 66 -15 548 669 ;\nC -1 ; WX 600 ; N Ydieresis ; B 24 0 576 753 ;\nC -1 ; WX 600 ; N divide ; B 87 48 513 467 ;\nC -1 ; WX 600 ; N Yacute ; B 24 0 576 805 ;\nC -1 ; WX 600 ; N Acircumflex ; B 3 0 597 787 ;\nC -1 ; WX 600 ; N aacute ; B 53 -15 559 672 ;\nC -1 ; WX 600 ; N Ucircumflex ; B 17 -18 583 787 ;\nC -1 ; WX 600 ; N yacute ; B 7 -157 592 672 ;\nC -1 ; WX 600 ; N scommaaccent ; B 80 -250 513 441 ;\nC -1 ; WX 600 ; N ecircumflex ; B 66 -15 548 654 ;\nC -1 ; WX 600 ; N Uring ; B 17 -18 583 760 ;\nC -1 ; WX 600 ; N Udieresis ; B 17 -18 583 753 ;\nC -1 ; WX 600 ; N aogonek ; B 53 -172 587 441 ;\nC -1 ; WX 600 ; N Uacute ; B 17 -18 583 805 ;\nC -1 ; WX 600 ; N uogonek ; B 21 -172 590 426 ;\nC -1 ; WX 600 ; N Edieresis ; B 53 0 550 753 ;\nC -1 ; WX 600 ; N Dcroat ; B 30 0 574 562 ;\nC -1 ; WX 600 ; N commaaccent ; B 198 -250 335 -58 ;\nC -1 ; WX 600 ; N copyright ; B 0 -18 600 580 ;\nC -1 ; WX 600 ; N Emacron ; B 53 0 550 698 ;\nC -1 ; WX 600 ; N ccaron ; B 66 -15 529 669 ;\nC -1 ; WX 600 ; N aring ; B 53 -15 559 627 ;\nC -1 ; WX 600 ; N Ncommaaccent ; B 7 -250 593 562 ;\nC -1 ; WX 600 ; N lacute ; B 95 0 505 805 ;\nC -1 ; WX 600 ; N agrave ; B 53 -15 559 672 ;\nC -1 ; WX 600 ; N Tcommaaccent ; B 38 -250 563 562 ;\nC -1 ; WX 600 ; N Cacute ; B 41 -18 540 805 ;\nC -1 ; WX 600 ; N atilde ; B 53 -15 559 606 ;\nC -1 ; WX 600 ; N Edotaccent ; B 53 0 550 753 ;\nC -1 ; WX 600 ; N scaron ; B 80 -15 513 669 ;\nC -1 ; WX 600 ; N scedilla ; B 80 -151 513 441 ;\nC -1 ; WX 600 ; N iacute ; B 95 0 505 672 ;\nC -1 ; WX 600 ; N lozenge ; B 18 0 443 706 ;\nC -1 ; WX 600 ; N Rcaron ; B 38 0 588 802 ;\nC -1 ; WX 600 ; N Gcommaaccent ; B 31 -250 575 580 ;\nC -1 ; WX 600 ; N ucircumflex ; B 21 -15 562 654 ;\nC -1 ; WX 600 ; N acircumflex ; B 53 -15 559 654 ;\nC -1 ; WX 600 ; N Amacron ; B 3 0 597 698 ;\nC -1 ; WX 600 ; N rcaron ; B 60 0 559 669 ;\nC -1 ; WX 600 ; N ccedilla ; B 66 -151 529 441 ;\nC -1 ; WX 600 ; N Zdotaccent ; B 86 0 514 753 ;\nC -1 ; WX 600 ; N Thorn ; B 79 0 538 562 ;\nC -1 ; WX 600 ; N Omacron ; B 43 -18 557 698 ;\nC -1 ; WX 600 ; N Racute ; B 38 0 588 805 ;\nC -1 ; WX 600 ; N Sacute ; B 72 -20 529 805 ;\nC -1 ; WX 600 ; N dcaron ; B 45 -15 715 629 ;\nC -1 ; WX 600 ; N Umacron ; B 17 -18 583 698 ;\nC -1 ; WX 600 ; N uring ; B 21 -15 562 627 ;\nC -1 ; WX 600 ; N threesuperior ; B 155 240 406 622 ;\nC -1 ; WX 600 ; N Ograve ; B 43 -18 557 805 ;\nC -1 ; WX 600 ; N Agrave ; B 3 0 597 805 ;\nC -1 ; WX 600 ; N Abreve ; B 3 0 597 732 ;\nC -1 ; WX 600 ; N multiply ; B 87 43 515 470 ;\nC -1 ; WX 600 ; N uacute ; B 21 -15 562 672 ;\nC -1 ; WX 600 ; N Tcaron ; B 38 0 563 802 ;\nC -1 ; WX 600 ; N partialdiff ; B 17 -38 459 710 ;\nC -1 ; WX 600 ; N ydieresis ; B 7 -157 592 620 ;\nC -1 ; WX 600 ; N Nacute ; B 7 -13 593 805 ;\nC -1 ; WX 600 ; N icircumflex ; B 94 0 505 654 ;\nC -1 ; WX 600 ; N Ecircumflex ; B 53 0 550 787 ;\nC -1 ; WX 600 ; N adieresis ; B 53 -15 559 620 ;\nC -1 ; WX 600 ; N edieresis ; B 66 -15 548 620 ;\nC -1 ; WX 600 ; N cacute ; B 66 -15 529 672 ;\nC -1 ; WX 600 ; N nacute ; B 26 0 575 672 ;\nC -1 ; WX 600 ; N umacron ; B 21 -15 562 565 ;\nC -1 ; WX 600 ; N Ncaron ; B 7 -13 593 802 ;\nC -1 ; WX 600 ; N Iacute ; B 96 0 504 805 ;\nC -1 ; WX 600 ; N plusminus ; B 87 44 513 558 ;\nC -1 ; WX 600 ; N brokenbar ; B 275 -175 326 675 ;\nC -1 ; WX 600 ; N registered ; B 0 -18 600 580 ;\nC -1 ; WX 600 ; N Gbreve ; B 31 -18 575 732 ;\nC -1 ; WX 600 ; N Idotaccent ; B 96 0 504 753 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 585 706 ;\nC -1 ; WX 600 ; N Egrave ; B 53 0 550 805 ;\nC -1 ; WX 600 ; N racute ; B 60 0 559 672 ;\nC -1 ; WX 600 ; N omacron ; B 62 -15 538 565 ;\nC -1 ; WX 600 ; N Zacute ; B 86 0 514 805 ;\nC -1 ; WX 600 ; N Zcaron ; B 86 0 514 802 ;\nC -1 ; WX 600 ; N greaterequal ; B 98 0 502 710 ;\nC -1 ; WX 600 ; N Eth ; B 30 0 574 562 ;\nC -1 ; WX 600 ; N Ccedilla ; B 41 -151 540 580 ;\nC -1 ; WX 600 ; N lcommaaccent ; B 95 -250 505 629 ;\nC -1 ; WX 600 ; N tcaron ; B 87 -15 530 717 ;\nC -1 ; WX 600 ; N eogonek ; B 66 -172 548 441 ;\nC -1 ; WX 600 ; N Uogonek ; B 17 -172 583 562 ;\nC -1 ; WX 600 ; N Aacute ; B 3 0 597 805 ;\nC -1 ; WX 600 ; N Adieresis ; B 3 0 597 753 ;\nC -1 ; WX 600 ; N egrave ; B 66 -15 548 672 ;\nC -1 ; WX 600 ; N zacute ; B 99 0 502 672 ;\nC -1 ; WX 600 ; N iogonek ; B 95 -172 505 657 ;\nC -1 ; WX 600 ; N Oacute ; B 43 -18 557 805 ;\nC -1 ; WX 600 ; N oacute ; B 62 -15 538 672 ;\nC -1 ; WX 600 ; N amacron ; B 53 -15 559 565 ;\nC -1 ; WX 600 ; N sacute ; B 80 -15 513 672 ;\nC -1 ; WX 600 ; N idieresis ; B 95 0 505 620 ;\nC -1 ; WX 600 ; N Ocircumflex ; B 43 -18 557 787 ;\nC -1 ; WX 600 ; N Ugrave ; B 17 -18 583 805 ;\nC -1 ; WX 600 ; N Delta ; B 6 0 598 688 ;\nC -1 ; WX 600 ; N thorn ; B -6 -157 555 629 ;\nC -1 ; WX 600 ; N twosuperior ; B 177 249 424 622 ;\nC -1 ; WX 600 ; N Odieresis ; B 43 -18 557 753 ;\nC -1 ; WX 600 ; N mu ; B 21 -157 562 426 ;\nC -1 ; WX 600 ; N igrave ; B 95 0 505 672 ;\nC -1 ; WX 600 ; N ohungarumlaut ; B 62 -15 580 672 ;\nC -1 ; WX 600 ; N Eogonek ; B 53 -172 561 562 ;\nC -1 ; WX 600 ; N dcroat ; B 45 -15 591 629 ;\nC -1 ; WX 600 ; N threequarters ; B 8 -56 593 666 ;\nC -1 ; WX 600 ; N Scedilla ; B 72 -151 529 580 ;\nC -1 ; WX 600 ; N lcaron ; B 95 0 533 629 ;\nC -1 ; WX 600 ; N Kcommaaccent ; B 38 -250 582 562 ;\nC -1 ; WX 600 ; N Lacute ; B 47 0 554 805 ;\nC -1 ; WX 600 ; N trademark ; B -23 263 623 562 ;\nC -1 ; WX 600 ; N edotaccent ; B 66 -15 548 620 ;\nC -1 ; WX 600 ; N Igrave ; B 96 0 504 805 ;\nC -1 ; WX 600 ; N Imacron ; B 96 0 504 698 ;\nC -1 ; WX 600 ; N Lcaron ; B 47 0 554 562 ;\nC -1 ; WX 600 ; N onehalf ; B 0 -57 611 665 ;\nC -1 ; WX 600 ; N lessequal ; B 98 0 502 710 ;\nC -1 ; WX 600 ; N ocircumflex ; B 62 -15 538 654 ;\nC -1 ; WX 600 ; N ntilde ; B 26 0 575 606 ;\nC -1 ; WX 600 ; N Uhungarumlaut ; B 17 -18 590 805 ;\nC -1 ; WX 600 ; N Eacute ; B 53 0 550 805 ;\nC -1 ; WX 600 ; N emacron ; B 66 -15 548 565 ;\nC -1 ; WX 600 ; N gbreve ; B 45 -157 566 609 ;\nC -1 ; WX 600 ; N onequarter ; B 0 -57 600 665 ;\nC -1 ; WX 600 ; N Scaron ; B 72 -20 529 802 ;\nC -1 ; WX 600 ; N Scommaaccent ; B 72 -250 529 580 ;\nC -1 ; WX 600 ; N Ohungarumlaut ; B 43 -18 580 805 ;\nC -1 ; WX 600 ; N degree ; B 123 269 477 622 ;\nC -1 ; WX 600 ; N ograve ; B 62 -15 538 672 ;\nC -1 ; WX 600 ; N Ccaron ; B 41 -18 540 802 ;\nC -1 ; WX 600 ; N ugrave ; B 21 -15 562 672 ;\nC -1 ; WX 600 ; N radical ; B 3 -15 597 792 ;\nC -1 ; WX 600 ; N Dcaron ; B 43 0 574 802 ;\nC -1 ; WX 600 ; N rcommaaccent ; B 60 -250 559 441 ;\nC -1 ; WX 600 ; N Ntilde ; B 7 -13 593 729 ;\nC -1 ; WX 600 ; N otilde ; B 62 -15 538 606 ;\nC -1 ; WX 600 ; N Rcommaaccent ; B 38 -250 588 562 ;\nC -1 ; WX 600 ; N Lcommaaccent ; B 47 -250 554 562 ;\nC -1 ; WX 600 ; N Atilde ; B 3 0 597 729 ;\nC -1 ; WX 600 ; N Aogonek ; B 3 -172 608 562 ;\nC -1 ; WX 600 ; N Aring ; B 3 0 597 750 ;\nC -1 ; WX 600 ; N Otilde ; B 43 -18 557 729 ;\nC -1 ; WX 600 ; N zdotaccent ; B 99 0 502 620 ;\nC -1 ; WX 600 ; N Ecaron ; B 53 0 550 802 ;\nC -1 ; WX 600 ; N Iogonek ; B 96 -172 504 562 ;\nC -1 ; WX 600 ; N kcommaaccent ; B 43 -250 580 629 ;\nC -1 ; WX 600 ; N minus ; B 80 232 520 283 ;\nC -1 ; WX 600 ; N Icircumflex ; B 96 0 504 787 ;\nC -1 ; WX 600 ; N ncaron ; B 26 0 575 669 ;\nC -1 ; WX 600 ; N tcommaaccent ; B 87 -250 530 561 ;\nC -1 ; WX 600 ; N logicalnot ; B 87 108 513 369 ;\nC -1 ; WX 600 ; N odieresis ; B 62 -15 538 620 ;\nC -1 ; WX 600 ; N udieresis ; B 21 -15 562 620 ;\nC -1 ; WX 600 ; N notequal ; B 15 -16 540 529 ;\nC -1 ; WX 600 ; N gcommaaccent ; B 45 -157 566 708 ;\nC -1 ; WX 600 ; N eth ; B 62 -15 538 629 ;\nC -1 ; WX 600 ; N zcaron ; B 99 0 502 669 ;\nC -1 ; WX 600 ; N ncommaaccent ; B 26 -250 575 441 ;\nC -1 ; WX 600 ; N onesuperior ; B 172 249 428 622 ;\nC -1 ; WX 600 ; N imacron ; B 95 0 505 565 ;\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nEndFontMetrics\n";
      },                                                                                                               // 54
      "Courier-Bold": function() {                                                                                     // 55
        return "StartFontMetrics 4.1\nComment Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Mon Jun 23 16:28:00 1997\nComment UniqueID 43048\nComment VMusage 41139 52164\nFontName Courier-Bold\nFullName Courier Bold\nFamilyName Courier\nWeight Bold\nItalicAngle 0\nIsFixedPitch true\nCharacterSet ExtendedRoman\nFontBBox -113 -250 749 801 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 003.000\nNotice Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nEncodingScheme AdobeStandardEncoding\nCapHeight 562\nXHeight 439\nAscender 629\nDescender -157\nStdHW 84\nStdVW 106\nStartCharMetrics 315\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 600 ; N exclam ; B 202 -15 398 572 ;\nC 34 ; WX 600 ; N quotedbl ; B 135 277 465 562 ;\nC 35 ; WX 600 ; N numbersign ; B 56 -45 544 651 ;\nC 36 ; WX 600 ; N dollar ; B 82 -126 519 666 ;\nC 37 ; WX 600 ; N percent ; B 5 -15 595 616 ;\nC 38 ; WX 600 ; N ampersand ; B 36 -15 546 543 ;\nC 39 ; WX 600 ; N quoteright ; B 171 277 423 562 ;\nC 40 ; WX 600 ; N parenleft ; B 219 -102 461 616 ;\nC 41 ; WX 600 ; N parenright ; B 139 -102 381 616 ;\nC 42 ; WX 600 ; N asterisk ; B 91 219 509 601 ;\nC 43 ; WX 600 ; N plus ; B 71 39 529 478 ;\nC 44 ; WX 600 ; N comma ; B 123 -111 393 174 ;\nC 45 ; WX 600 ; N hyphen ; B 100 203 500 313 ;\nC 46 ; WX 600 ; N period ; B 192 -15 408 171 ;\nC 47 ; WX 600 ; N slash ; B 98 -77 502 626 ;\nC 48 ; WX 600 ; N zero ; B 87 -15 513 616 ;\nC 49 ; WX 600 ; N one ; B 81 0 539 616 ;\nC 50 ; WX 600 ; N two ; B 61 0 499 616 ;\nC 51 ; WX 600 ; N three ; B 63 -15 501 616 ;\nC 52 ; WX 600 ; N four ; B 53 0 507 616 ;\nC 53 ; WX 600 ; N five ; B 70 -15 521 601 ;\nC 54 ; WX 600 ; N six ; B 90 -15 521 616 ;\nC 55 ; WX 600 ; N seven ; B 55 0 494 601 ;\nC 56 ; WX 600 ; N eight ; B 83 -15 517 616 ;\nC 57 ; WX 600 ; N nine ; B 79 -15 510 616 ;\nC 58 ; WX 600 ; N colon ; B 191 -15 407 425 ;\nC 59 ; WX 600 ; N semicolon ; B 123 -111 408 425 ;\nC 60 ; WX 600 ; N less ; B 66 15 523 501 ;\nC 61 ; WX 600 ; N equal ; B 71 118 529 398 ;\nC 62 ; WX 600 ; N greater ; B 77 15 534 501 ;\nC 63 ; WX 600 ; N question ; B 98 -14 501 580 ;\nC 64 ; WX 600 ; N at ; B 16 -15 584 616 ;\nC 65 ; WX 600 ; N A ; B -9 0 609 562 ;\nC 66 ; WX 600 ; N B ; B 30 0 573 562 ;\nC 67 ; WX 600 ; N C ; B 22 -18 560 580 ;\nC 68 ; WX 600 ; N D ; B 30 0 594 562 ;\nC 69 ; WX 600 ; N E ; B 25 0 560 562 ;\nC 70 ; WX 600 ; N F ; B 39 0 570 562 ;\nC 71 ; WX 600 ; N G ; B 22 -18 594 580 ;\nC 72 ; WX 600 ; N H ; B 20 0 580 562 ;\nC 73 ; WX 600 ; N I ; B 77 0 523 562 ;\nC 74 ; WX 600 ; N J ; B 37 -18 601 562 ;\nC 75 ; WX 600 ; N K ; B 21 0 599 562 ;\nC 76 ; WX 600 ; N L ; B 39 0 578 562 ;\nC 77 ; WX 600 ; N M ; B -2 0 602 562 ;\nC 78 ; WX 600 ; N N ; B 8 -12 610 562 ;\nC 79 ; WX 600 ; N O ; B 22 -18 578 580 ;\nC 80 ; WX 600 ; N P ; B 48 0 559 562 ;\nC 81 ; WX 600 ; N Q ; B 32 -138 578 580 ;\nC 82 ; WX 600 ; N R ; B 24 0 599 562 ;\nC 83 ; WX 600 ; N S ; B 47 -22 553 582 ;\nC 84 ; WX 600 ; N T ; B 21 0 579 562 ;\nC 85 ; WX 600 ; N U ; B 4 -18 596 562 ;\nC 86 ; WX 600 ; N V ; B -13 0 613 562 ;\nC 87 ; WX 600 ; N W ; B -18 0 618 562 ;\nC 88 ; WX 600 ; N X ; B 12 0 588 562 ;\nC 89 ; WX 600 ; N Y ; B 12 0 589 562 ;\nC 90 ; WX 600 ; N Z ; B 62 0 539 562 ;\nC 91 ; WX 600 ; N bracketleft ; B 245 -102 475 616 ;\nC 92 ; WX 600 ; N backslash ; B 99 -77 503 626 ;\nC 93 ; WX 600 ; N bracketright ; B 125 -102 355 616 ;\nC 94 ; WX 600 ; N asciicircum ; B 108 250 492 616 ;\nC 95 ; WX 600 ; N underscore ; B 0 -125 600 -75 ;\nC 96 ; WX 600 ; N quoteleft ; B 178 277 428 562 ;\nC 97 ; WX 600 ; N a ; B 35 -15 570 454 ;\nC 98 ; WX 600 ; N b ; B 0 -15 584 626 ;\nC 99 ; WX 600 ; N c ; B 40 -15 545 459 ;\nC 100 ; WX 600 ; N d ; B 20 -15 591 626 ;\nC 101 ; WX 600 ; N e ; B 40 -15 563 454 ;\nC 102 ; WX 600 ; N f ; B 83 0 547 626 ; L i fi ; L l fl ;\nC 103 ; WX 600 ; N g ; B 30 -146 580 454 ;\nC 104 ; WX 600 ; N h ; B 5 0 592 626 ;\nC 105 ; WX 600 ; N i ; B 77 0 523 658 ;\nC 106 ; WX 600 ; N j ; B 63 -146 440 658 ;\nC 107 ; WX 600 ; N k ; B 20 0 585 626 ;\nC 108 ; WX 600 ; N l ; B 77 0 523 626 ;\nC 109 ; WX 600 ; N m ; B -22 0 626 454 ;\nC 110 ; WX 600 ; N n ; B 18 0 592 454 ;\nC 111 ; WX 600 ; N o ; B 30 -15 570 454 ;\nC 112 ; WX 600 ; N p ; B -1 -142 570 454 ;\nC 113 ; WX 600 ; N q ; B 20 -142 591 454 ;\nC 114 ; WX 600 ; N r ; B 47 0 580 454 ;\nC 115 ; WX 600 ; N s ; B 68 -17 535 459 ;\nC 116 ; WX 600 ; N t ; B 47 -15 532 562 ;\nC 117 ; WX 600 ; N u ; B -1 -15 569 439 ;\nC 118 ; WX 600 ; N v ; B -1 0 601 439 ;\nC 119 ; WX 600 ; N w ; B -18 0 618 439 ;\nC 120 ; WX 600 ; N x ; B 6 0 594 439 ;\nC 121 ; WX 600 ; N y ; B -4 -142 601 439 ;\nC 122 ; WX 600 ; N z ; B 81 0 520 439 ;\nC 123 ; WX 600 ; N braceleft ; B 160 -102 464 616 ;\nC 124 ; WX 600 ; N bar ; B 255 -250 345 750 ;\nC 125 ; WX 600 ; N braceright ; B 136 -102 440 616 ;\nC 126 ; WX 600 ; N asciitilde ; B 71 153 530 356 ;\nC 161 ; WX 600 ; N exclamdown ; B 202 -146 398 449 ;\nC 162 ; WX 600 ; N cent ; B 66 -49 518 614 ;\nC 163 ; WX 600 ; N sterling ; B 72 -28 558 611 ;\nC 164 ; WX 600 ; N fraction ; B 25 -60 576 661 ;\nC 165 ; WX 600 ; N yen ; B 10 0 590 562 ;\nC 166 ; WX 600 ; N florin ; B -30 -131 572 616 ;\nC 167 ; WX 600 ; N section ; B 83 -70 517 580 ;\nC 168 ; WX 600 ; N currency ; B 54 49 546 517 ;\nC 169 ; WX 600 ; N quotesingle ; B 227 277 373 562 ;\nC 170 ; WX 600 ; N quotedblleft ; B 71 277 535 562 ;\nC 171 ; WX 600 ; N guillemotleft ; B 8 70 553 446 ;\nC 172 ; WX 600 ; N guilsinglleft ; B 141 70 459 446 ;\nC 173 ; WX 600 ; N guilsinglright ; B 141 70 459 446 ;\nC 174 ; WX 600 ; N fi ; B 12 0 593 626 ;\nC 175 ; WX 600 ; N fl ; B 12 0 593 626 ;\nC 177 ; WX 600 ; N endash ; B 65 203 535 313 ;\nC 178 ; WX 600 ; N dagger ; B 106 -70 494 580 ;\nC 179 ; WX 600 ; N daggerdbl ; B 106 -70 494 580 ;\nC 180 ; WX 600 ; N periodcentered ; B 196 165 404 351 ;\nC 182 ; WX 600 ; N paragraph ; B 6 -70 576 580 ;\nC 183 ; WX 600 ; N bullet ; B 140 132 460 430 ;\nC 184 ; WX 600 ; N quotesinglbase ; B 175 -142 427 143 ;\nC 185 ; WX 600 ; N quotedblbase ; B 65 -142 529 143 ;\nC 186 ; WX 600 ; N quotedblright ; B 61 277 525 562 ;\nC 187 ; WX 600 ; N guillemotright ; B 47 70 592 446 ;\nC 188 ; WX 600 ; N ellipsis ; B 26 -15 574 116 ;\nC 189 ; WX 600 ; N perthousand ; B -113 -15 713 616 ;\nC 191 ; WX 600 ; N questiondown ; B 99 -146 502 449 ;\nC 193 ; WX 600 ; N grave ; B 132 508 395 661 ;\nC 194 ; WX 600 ; N acute ; B 205 508 468 661 ;\nC 195 ; WX 600 ; N circumflex ; B 103 483 497 657 ;\nC 196 ; WX 600 ; N tilde ; B 89 493 512 636 ;\nC 197 ; WX 600 ; N macron ; B 88 505 512 585 ;\nC 198 ; WX 600 ; N breve ; B 83 468 517 631 ;\nC 199 ; WX 600 ; N dotaccent ; B 230 498 370 638 ;\nC 200 ; WX 600 ; N dieresis ; B 128 498 472 638 ;\nC 202 ; WX 600 ; N ring ; B 198 481 402 678 ;\nC 203 ; WX 600 ; N cedilla ; B 205 -206 387 0 ;\nC 205 ; WX 600 ; N hungarumlaut ; B 68 488 588 661 ;\nC 206 ; WX 600 ; N ogonek ; B 169 -199 400 0 ;\nC 207 ; WX 600 ; N caron ; B 103 493 497 667 ;\nC 208 ; WX 600 ; N emdash ; B -10 203 610 313 ;\nC 225 ; WX 600 ; N AE ; B -29 0 602 562 ;\nC 227 ; WX 600 ; N ordfeminine ; B 147 196 453 580 ;\nC 232 ; WX 600 ; N Lslash ; B 39 0 578 562 ;\nC 233 ; WX 600 ; N Oslash ; B 22 -22 578 584 ;\nC 234 ; WX 600 ; N OE ; B -25 0 595 562 ;\nC 235 ; WX 600 ; N ordmasculine ; B 147 196 453 580 ;\nC 241 ; WX 600 ; N ae ; B -4 -15 601 454 ;\nC 245 ; WX 600 ; N dotlessi ; B 77 0 523 439 ;\nC 248 ; WX 600 ; N lslash ; B 77 0 523 626 ;\nC 249 ; WX 600 ; N oslash ; B 30 -24 570 463 ;\nC 250 ; WX 600 ; N oe ; B -18 -15 611 454 ;\nC 251 ; WX 600 ; N germandbls ; B 22 -15 596 626 ;\nC -1 ; WX 600 ; N Idieresis ; B 77 0 523 761 ;\nC -1 ; WX 600 ; N eacute ; B 40 -15 563 661 ;\nC -1 ; WX 600 ; N abreve ; B 35 -15 570 661 ;\nC -1 ; WX 600 ; N uhungarumlaut ; B -1 -15 628 661 ;\nC -1 ; WX 600 ; N ecaron ; B 40 -15 563 667 ;\nC -1 ; WX 600 ; N Ydieresis ; B 12 0 589 761 ;\nC -1 ; WX 600 ; N divide ; B 71 16 529 500 ;\nC -1 ; WX 600 ; N Yacute ; B 12 0 589 784 ;\nC -1 ; WX 600 ; N Acircumflex ; B -9 0 609 780 ;\nC -1 ; WX 600 ; N aacute ; B 35 -15 570 661 ;\nC -1 ; WX 600 ; N Ucircumflex ; B 4 -18 596 780 ;\nC -1 ; WX 600 ; N yacute ; B -4 -142 601 661 ;\nC -1 ; WX 600 ; N scommaaccent ; B 68 -250 535 459 ;\nC -1 ; WX 600 ; N ecircumflex ; B 40 -15 563 657 ;\nC -1 ; WX 600 ; N Uring ; B 4 -18 596 801 ;\nC -1 ; WX 600 ; N Udieresis ; B 4 -18 596 761 ;\nC -1 ; WX 600 ; N aogonek ; B 35 -199 586 454 ;\nC -1 ; WX 600 ; N Uacute ; B 4 -18 596 784 ;\nC -1 ; WX 600 ; N uogonek ; B -1 -199 585 439 ;\nC -1 ; WX 600 ; N Edieresis ; B 25 0 560 761 ;\nC -1 ; WX 600 ; N Dcroat ; B 30 0 594 562 ;\nC -1 ; WX 600 ; N commaaccent ; B 205 -250 397 -57 ;\nC -1 ; WX 600 ; N copyright ; B 0 -18 600 580 ;\nC -1 ; WX 600 ; N Emacron ; B 25 0 560 708 ;\nC -1 ; WX 600 ; N ccaron ; B 40 -15 545 667 ;\nC -1 ; WX 600 ; N aring ; B 35 -15 570 678 ;\nC -1 ; WX 600 ; N Ncommaaccent ; B 8 -250 610 562 ;\nC -1 ; WX 600 ; N lacute ; B 77 0 523 801 ;\nC -1 ; WX 600 ; N agrave ; B 35 -15 570 661 ;\nC -1 ; WX 600 ; N Tcommaaccent ; B 21 -250 579 562 ;\nC -1 ; WX 600 ; N Cacute ; B 22 -18 560 784 ;\nC -1 ; WX 600 ; N atilde ; B 35 -15 570 636 ;\nC -1 ; WX 600 ; N Edotaccent ; B 25 0 560 761 ;\nC -1 ; WX 600 ; N scaron ; B 68 -17 535 667 ;\nC -1 ; WX 600 ; N scedilla ; B 68 -206 535 459 ;\nC -1 ; WX 600 ; N iacute ; B 77 0 523 661 ;\nC -1 ; WX 600 ; N lozenge ; B 66 0 534 740 ;\nC -1 ; WX 600 ; N Rcaron ; B 24 0 599 790 ;\nC -1 ; WX 600 ; N Gcommaaccent ; B 22 -250 594 580 ;\nC -1 ; WX 600 ; N ucircumflex ; B -1 -15 569 657 ;\nC -1 ; WX 600 ; N acircumflex ; B 35 -15 570 657 ;\nC -1 ; WX 600 ; N Amacron ; B -9 0 609 708 ;\nC -1 ; WX 600 ; N rcaron ; B 47 0 580 667 ;\nC -1 ; WX 600 ; N ccedilla ; B 40 -206 545 459 ;\nC -1 ; WX 600 ; N Zdotaccent ; B 62 0 539 761 ;\nC -1 ; WX 600 ; N Thorn ; B 48 0 557 562 ;\nC -1 ; WX 600 ; N Omacron ; B 22 -18 578 708 ;\nC -1 ; WX 600 ; N Racute ; B 24 0 599 784 ;\nC -1 ; WX 600 ; N Sacute ; B 47 -22 553 784 ;\nC -1 ; WX 600 ; N dcaron ; B 20 -15 727 626 ;\nC -1 ; WX 600 ; N Umacron ; B 4 -18 596 708 ;\nC -1 ; WX 600 ; N uring ; B -1 -15 569 678 ;\nC -1 ; WX 600 ; N threesuperior ; B 138 222 433 616 ;\nC -1 ; WX 600 ; N Ograve ; B 22 -18 578 784 ;\nC -1 ; WX 600 ; N Agrave ; B -9 0 609 784 ;\nC -1 ; WX 600 ; N Abreve ; B -9 0 609 784 ;\nC -1 ; WX 600 ; N multiply ; B 81 39 520 478 ;\nC -1 ; WX 600 ; N uacute ; B -1 -15 569 661 ;\nC -1 ; WX 600 ; N Tcaron ; B 21 0 579 790 ;\nC -1 ; WX 600 ; N partialdiff ; B 63 -38 537 728 ;\nC -1 ; WX 600 ; N ydieresis ; B -4 -142 601 638 ;\nC -1 ; WX 600 ; N Nacute ; B 8 -12 610 784 ;\nC -1 ; WX 600 ; N icircumflex ; B 73 0 523 657 ;\nC -1 ; WX 600 ; N Ecircumflex ; B 25 0 560 780 ;\nC -1 ; WX 600 ; N adieresis ; B 35 -15 570 638 ;\nC -1 ; WX 600 ; N edieresis ; B 40 -15 563 638 ;\nC -1 ; WX 600 ; N cacute ; B 40 -15 545 661 ;\nC -1 ; WX 600 ; N nacute ; B 18 0 592 661 ;\nC -1 ; WX 600 ; N umacron ; B -1 -15 569 585 ;\nC -1 ; WX 600 ; N Ncaron ; B 8 -12 610 790 ;\nC -1 ; WX 600 ; N Iacute ; B 77 0 523 784 ;\nC -1 ; WX 600 ; N plusminus ; B 71 24 529 515 ;\nC -1 ; WX 600 ; N brokenbar ; B 255 -175 345 675 ;\nC -1 ; WX 600 ; N registered ; B 0 -18 600 580 ;\nC -1 ; WX 600 ; N Gbreve ; B 22 -18 594 784 ;\nC -1 ; WX 600 ; N Idotaccent ; B 77 0 523 761 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 586 706 ;\nC -1 ; WX 600 ; N Egrave ; B 25 0 560 784 ;\nC -1 ; WX 600 ; N racute ; B 47 0 580 661 ;\nC -1 ; WX 600 ; N omacron ; B 30 -15 570 585 ;\nC -1 ; WX 600 ; N Zacute ; B 62 0 539 784 ;\nC -1 ; WX 600 ; N Zcaron ; B 62 0 539 790 ;\nC -1 ; WX 600 ; N greaterequal ; B 26 0 523 696 ;\nC -1 ; WX 600 ; N Eth ; B 30 0 594 562 ;\nC -1 ; WX 600 ; N Ccedilla ; B 22 -206 560 580 ;\nC -1 ; WX 600 ; N lcommaaccent ; B 77 -250 523 626 ;\nC -1 ; WX 600 ; N tcaron ; B 47 -15 532 703 ;\nC -1 ; WX 600 ; N eogonek ; B 40 -199 563 454 ;\nC -1 ; WX 600 ; N Uogonek ; B 4 -199 596 562 ;\nC -1 ; WX 600 ; N Aacute ; B -9 0 609 784 ;\nC -1 ; WX 600 ; N Adieresis ; B -9 0 609 761 ;\nC -1 ; WX 600 ; N egrave ; B 40 -15 563 661 ;\nC -1 ; WX 600 ; N zacute ; B 81 0 520 661 ;\nC -1 ; WX 600 ; N iogonek ; B 77 -199 523 658 ;\nC -1 ; WX 600 ; N Oacute ; B 22 -18 578 784 ;\nC -1 ; WX 600 ; N oacute ; B 30 -15 570 661 ;\nC -1 ; WX 600 ; N amacron ; B 35 -15 570 585 ;\nC -1 ; WX 600 ; N sacute ; B 68 -17 535 661 ;\nC -1 ; WX 600 ; N idieresis ; B 77 0 523 618 ;\nC -1 ; WX 600 ; N Ocircumflex ; B 22 -18 578 780 ;\nC -1 ; WX 600 ; N Ugrave ; B 4 -18 596 784 ;\nC -1 ; WX 600 ; N Delta ; B 6 0 594 688 ;\nC -1 ; WX 600 ; N thorn ; B -14 -142 570 626 ;\nC -1 ; WX 600 ; N twosuperior ; B 143 230 436 616 ;\nC -1 ; WX 600 ; N Odieresis ; B 22 -18 578 761 ;\nC -1 ; WX 600 ; N mu ; B -1 -142 569 439 ;\nC -1 ; WX 600 ; N igrave ; B 77 0 523 661 ;\nC -1 ; WX 600 ; N ohungarumlaut ; B 30 -15 668 661 ;\nC -1 ; WX 600 ; N Eogonek ; B 25 -199 576 562 ;\nC -1 ; WX 600 ; N dcroat ; B 20 -15 591 626 ;\nC -1 ; WX 600 ; N threequarters ; B -47 -60 648 661 ;\nC -1 ; WX 600 ; N Scedilla ; B 47 -206 553 582 ;\nC -1 ; WX 600 ; N lcaron ; B 77 0 597 626 ;\nC -1 ; WX 600 ; N Kcommaaccent ; B 21 -250 599 562 ;\nC -1 ; WX 600 ; N Lacute ; B 39 0 578 784 ;\nC -1 ; WX 600 ; N trademark ; B -9 230 749 562 ;\nC -1 ; WX 600 ; N edotaccent ; B 40 -15 563 638 ;\nC -1 ; WX 600 ; N Igrave ; B 77 0 523 784 ;\nC -1 ; WX 600 ; N Imacron ; B 77 0 523 708 ;\nC -1 ; WX 600 ; N Lcaron ; B 39 0 637 562 ;\nC -1 ; WX 600 ; N onehalf ; B -47 -60 648 661 ;\nC -1 ; WX 600 ; N lessequal ; B 26 0 523 696 ;\nC -1 ; WX 600 ; N ocircumflex ; B 30 -15 570 657 ;\nC -1 ; WX 600 ; N ntilde ; B 18 0 592 636 ;\nC -1 ; WX 600 ; N Uhungarumlaut ; B 4 -18 638 784 ;\nC -1 ; WX 600 ; N Eacute ; B 25 0 560 784 ;\nC -1 ; WX 600 ; N emacron ; B 40 -15 563 585 ;\nC -1 ; WX 600 ; N gbreve ; B 30 -146 580 661 ;\nC -1 ; WX 600 ; N onequarter ; B -56 -60 656 661 ;\nC -1 ; WX 600 ; N Scaron ; B 47 -22 553 790 ;\nC -1 ; WX 600 ; N Scommaaccent ; B 47 -250 553 582 ;\nC -1 ; WX 600 ; N Ohungarumlaut ; B 22 -18 628 784 ;\nC -1 ; WX 600 ; N degree ; B 86 243 474 616 ;\nC -1 ; WX 600 ; N ograve ; B 30 -15 570 661 ;\nC -1 ; WX 600 ; N Ccaron ; B 22 -18 560 790 ;\nC -1 ; WX 600 ; N ugrave ; B -1 -15 569 661 ;\nC -1 ; WX 600 ; N radical ; B -19 -104 473 778 ;\nC -1 ; WX 600 ; N Dcaron ; B 30 0 594 790 ;\nC -1 ; WX 600 ; N rcommaaccent ; B 47 -250 580 454 ;\nC -1 ; WX 600 ; N Ntilde ; B 8 -12 610 759 ;\nC -1 ; WX 600 ; N otilde ; B 30 -15 570 636 ;\nC -1 ; WX 600 ; N Rcommaaccent ; B 24 -250 599 562 ;\nC -1 ; WX 600 ; N Lcommaaccent ; B 39 -250 578 562 ;\nC -1 ; WX 600 ; N Atilde ; B -9 0 609 759 ;\nC -1 ; WX 600 ; N Aogonek ; B -9 -199 625 562 ;\nC -1 ; WX 600 ; N Aring ; B -9 0 609 801 ;\nC -1 ; WX 600 ; N Otilde ; B 22 -18 578 759 ;\nC -1 ; WX 600 ; N zdotaccent ; B 81 0 520 638 ;\nC -1 ; WX 600 ; N Ecaron ; B 25 0 560 790 ;\nC -1 ; WX 600 ; N Iogonek ; B 77 -199 523 562 ;\nC -1 ; WX 600 ; N kcommaaccent ; B 20 -250 585 626 ;\nC -1 ; WX 600 ; N minus ; B 71 203 529 313 ;\nC -1 ; WX 600 ; N Icircumflex ; B 77 0 523 780 ;\nC -1 ; WX 600 ; N ncaron ; B 18 0 592 667 ;\nC -1 ; WX 600 ; N tcommaaccent ; B 47 -250 532 562 ;\nC -1 ; WX 600 ; N logicalnot ; B 71 103 529 413 ;\nC -1 ; WX 600 ; N odieresis ; B 30 -15 570 638 ;\nC -1 ; WX 600 ; N udieresis ; B -1 -15 569 638 ;\nC -1 ; WX 600 ; N notequal ; B 12 -47 537 563 ;\nC -1 ; WX 600 ; N gcommaaccent ; B 30 -146 580 714 ;\nC -1 ; WX 600 ; N eth ; B 58 -27 543 626 ;\nC -1 ; WX 600 ; N zcaron ; B 81 0 520 667 ;\nC -1 ; WX 600 ; N ncommaaccent ; B 18 -250 592 454 ;\nC -1 ; WX 600 ; N onesuperior ; B 153 230 447 616 ;\nC -1 ; WX 600 ; N imacron ; B 77 0 523 585 ;\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nEndFontMetrics\n";
      },                                                                                                               // 57
      "Courier-Oblique": function() {                                                                                  // 58
        return "StartFontMetrics 4.1\nComment Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 17:37:52 1997\nComment UniqueID 43051\nComment VMusage 16248 75829\nFontName Courier-Oblique\nFullName Courier Oblique\nFamilyName Courier\nWeight Medium\nItalicAngle -12\nIsFixedPitch true\nCharacterSet ExtendedRoman\nFontBBox -27 -250 849 805 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 003.000\nNotice Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nEncodingScheme AdobeStandardEncoding\nCapHeight 562\nXHeight 426\nAscender 629\nDescender -157\nStdHW 51\nStdVW 51\nStartCharMetrics 315\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 600 ; N exclam ; B 243 -15 464 572 ;\nC 34 ; WX 600 ; N quotedbl ; B 273 328 532 562 ;\nC 35 ; WX 600 ; N numbersign ; B 133 -32 596 639 ;\nC 36 ; WX 600 ; N dollar ; B 108 -126 596 662 ;\nC 37 ; WX 600 ; N percent ; B 134 -15 599 622 ;\nC 38 ; WX 600 ; N ampersand ; B 87 -15 580 543 ;\nC 39 ; WX 600 ; N quoteright ; B 283 328 495 562 ;\nC 40 ; WX 600 ; N parenleft ; B 313 -108 572 622 ;\nC 41 ; WX 600 ; N parenright ; B 137 -108 396 622 ;\nC 42 ; WX 600 ; N asterisk ; B 212 257 580 607 ;\nC 43 ; WX 600 ; N plus ; B 129 44 580 470 ;\nC 44 ; WX 600 ; N comma ; B 157 -112 370 122 ;\nC 45 ; WX 600 ; N hyphen ; B 152 231 558 285 ;\nC 46 ; WX 600 ; N period ; B 238 -15 382 109 ;\nC 47 ; WX 600 ; N slash ; B 112 -80 604 629 ;\nC 48 ; WX 600 ; N zero ; B 154 -15 575 622 ;\nC 49 ; WX 600 ; N one ; B 98 0 515 622 ;\nC 50 ; WX 600 ; N two ; B 70 0 568 622 ;\nC 51 ; WX 600 ; N three ; B 82 -15 538 622 ;\nC 52 ; WX 600 ; N four ; B 108 0 541 622 ;\nC 53 ; WX 600 ; N five ; B 99 -15 589 607 ;\nC 54 ; WX 600 ; N six ; B 155 -15 629 622 ;\nC 55 ; WX 600 ; N seven ; B 182 0 612 607 ;\nC 56 ; WX 600 ; N eight ; B 132 -15 588 622 ;\nC 57 ; WX 600 ; N nine ; B 93 -15 574 622 ;\nC 58 ; WX 600 ; N colon ; B 238 -15 441 385 ;\nC 59 ; WX 600 ; N semicolon ; B 157 -112 441 385 ;\nC 60 ; WX 600 ; N less ; B 96 42 610 472 ;\nC 61 ; WX 600 ; N equal ; B 109 138 600 376 ;\nC 62 ; WX 600 ; N greater ; B 85 42 599 472 ;\nC 63 ; WX 600 ; N question ; B 222 -15 583 572 ;\nC 64 ; WX 600 ; N at ; B 127 -15 582 622 ;\nC 65 ; WX 600 ; N A ; B 3 0 607 562 ;\nC 66 ; WX 600 ; N B ; B 43 0 616 562 ;\nC 67 ; WX 600 ; N C ; B 93 -18 655 580 ;\nC 68 ; WX 600 ; N D ; B 43 0 645 562 ;\nC 69 ; WX 600 ; N E ; B 53 0 660 562 ;\nC 70 ; WX 600 ; N F ; B 53 0 660 562 ;\nC 71 ; WX 600 ; N G ; B 83 -18 645 580 ;\nC 72 ; WX 600 ; N H ; B 32 0 687 562 ;\nC 73 ; WX 600 ; N I ; B 96 0 623 562 ;\nC 74 ; WX 600 ; N J ; B 52 -18 685 562 ;\nC 75 ; WX 600 ; N K ; B 38 0 671 562 ;\nC 76 ; WX 600 ; N L ; B 47 0 607 562 ;\nC 77 ; WX 600 ; N M ; B 4 0 715 562 ;\nC 78 ; WX 600 ; N N ; B 7 -13 712 562 ;\nC 79 ; WX 600 ; N O ; B 94 -18 625 580 ;\nC 80 ; WX 600 ; N P ; B 79 0 644 562 ;\nC 81 ; WX 600 ; N Q ; B 95 -138 625 580 ;\nC 82 ; WX 600 ; N R ; B 38 0 598 562 ;\nC 83 ; WX 600 ; N S ; B 76 -20 650 580 ;\nC 84 ; WX 600 ; N T ; B 108 0 665 562 ;\nC 85 ; WX 600 ; N U ; B 125 -18 702 562 ;\nC 86 ; WX 600 ; N V ; B 105 -13 723 562 ;\nC 87 ; WX 600 ; N W ; B 106 -13 722 562 ;\nC 88 ; WX 600 ; N X ; B 23 0 675 562 ;\nC 89 ; WX 600 ; N Y ; B 133 0 695 562 ;\nC 90 ; WX 600 ; N Z ; B 86 0 610 562 ;\nC 91 ; WX 600 ; N bracketleft ; B 246 -108 574 622 ;\nC 92 ; WX 600 ; N backslash ; B 249 -80 468 629 ;\nC 93 ; WX 600 ; N bracketright ; B 135 -108 463 622 ;\nC 94 ; WX 600 ; N asciicircum ; B 175 354 587 622 ;\nC 95 ; WX 600 ; N underscore ; B -27 -125 584 -75 ;\nC 96 ; WX 600 ; N quoteleft ; B 343 328 457 562 ;\nC 97 ; WX 600 ; N a ; B 76 -15 569 441 ;\nC 98 ; WX 600 ; N b ; B 29 -15 625 629 ;\nC 99 ; WX 600 ; N c ; B 106 -15 608 441 ;\nC 100 ; WX 600 ; N d ; B 85 -15 640 629 ;\nC 101 ; WX 600 ; N e ; B 106 -15 598 441 ;\nC 102 ; WX 600 ; N f ; B 114 0 662 629 ; L i fi ; L l fl ;\nC 103 ; WX 600 ; N g ; B 61 -157 657 441 ;\nC 104 ; WX 600 ; N h ; B 33 0 592 629 ;\nC 105 ; WX 600 ; N i ; B 95 0 515 657 ;\nC 106 ; WX 600 ; N j ; B 52 -157 550 657 ;\nC 107 ; WX 600 ; N k ; B 58 0 633 629 ;\nC 108 ; WX 600 ; N l ; B 95 0 515 629 ;\nC 109 ; WX 600 ; N m ; B -5 0 615 441 ;\nC 110 ; WX 600 ; N n ; B 26 0 585 441 ;\nC 111 ; WX 600 ; N o ; B 102 -15 588 441 ;\nC 112 ; WX 600 ; N p ; B -24 -157 605 441 ;\nC 113 ; WX 600 ; N q ; B 85 -157 682 441 ;\nC 114 ; WX 600 ; N r ; B 60 0 636 441 ;\nC 115 ; WX 600 ; N s ; B 78 -15 584 441 ;\nC 116 ; WX 600 ; N t ; B 167 -15 561 561 ;\nC 117 ; WX 600 ; N u ; B 101 -15 572 426 ;\nC 118 ; WX 600 ; N v ; B 90 -10 681 426 ;\nC 119 ; WX 600 ; N w ; B 76 -10 695 426 ;\nC 120 ; WX 600 ; N x ; B 20 0 655 426 ;\nC 121 ; WX 600 ; N y ; B -4 -157 683 426 ;\nC 122 ; WX 600 ; N z ; B 99 0 593 426 ;\nC 123 ; WX 600 ; N braceleft ; B 233 -108 569 622 ;\nC 124 ; WX 600 ; N bar ; B 222 -250 485 750 ;\nC 125 ; WX 600 ; N braceright ; B 140 -108 477 622 ;\nC 126 ; WX 600 ; N asciitilde ; B 116 197 600 320 ;\nC 161 ; WX 600 ; N exclamdown ; B 225 -157 445 430 ;\nC 162 ; WX 600 ; N cent ; B 151 -49 588 614 ;\nC 163 ; WX 600 ; N sterling ; B 124 -21 621 611 ;\nC 164 ; WX 600 ; N fraction ; B 84 -57 646 665 ;\nC 165 ; WX 600 ; N yen ; B 120 0 693 562 ;\nC 166 ; WX 600 ; N florin ; B -26 -143 671 622 ;\nC 167 ; WX 600 ; N section ; B 104 -78 590 580 ;\nC 168 ; WX 600 ; N currency ; B 94 58 628 506 ;\nC 169 ; WX 600 ; N quotesingle ; B 345 328 460 562 ;\nC 170 ; WX 600 ; N quotedblleft ; B 262 328 541 562 ;\nC 171 ; WX 600 ; N guillemotleft ; B 92 70 652 446 ;\nC 172 ; WX 600 ; N guilsinglleft ; B 204 70 540 446 ;\nC 173 ; WX 600 ; N guilsinglright ; B 170 70 506 446 ;\nC 174 ; WX 600 ; N fi ; B 3 0 619 629 ;\nC 175 ; WX 600 ; N fl ; B 3 0 619 629 ;\nC 177 ; WX 600 ; N endash ; B 124 231 586 285 ;\nC 178 ; WX 600 ; N dagger ; B 217 -78 546 580 ;\nC 179 ; WX 600 ; N daggerdbl ; B 163 -78 546 580 ;\nC 180 ; WX 600 ; N periodcentered ; B 275 189 434 327 ;\nC 182 ; WX 600 ; N paragraph ; B 100 -78 630 562 ;\nC 183 ; WX 600 ; N bullet ; B 224 130 485 383 ;\nC 184 ; WX 600 ; N quotesinglbase ; B 185 -134 397 100 ;\nC 185 ; WX 600 ; N quotedblbase ; B 115 -134 478 100 ;\nC 186 ; WX 600 ; N quotedblright ; B 213 328 576 562 ;\nC 187 ; WX 600 ; N guillemotright ; B 58 70 618 446 ;\nC 188 ; WX 600 ; N ellipsis ; B 46 -15 575 111 ;\nC 189 ; WX 600 ; N perthousand ; B 59 -15 627 622 ;\nC 191 ; WX 600 ; N questiondown ; B 105 -157 466 430 ;\nC 193 ; WX 600 ; N grave ; B 294 497 484 672 ;\nC 194 ; WX 600 ; N acute ; B 348 497 612 672 ;\nC 195 ; WX 600 ; N circumflex ; B 229 477 581 654 ;\nC 196 ; WX 600 ; N tilde ; B 212 489 629 606 ;\nC 197 ; WX 600 ; N macron ; B 232 525 600 565 ;\nC 198 ; WX 600 ; N breve ; B 279 501 576 609 ;\nC 199 ; WX 600 ; N dotaccent ; B 373 537 478 640 ;\nC 200 ; WX 600 ; N dieresis ; B 272 537 579 640 ;\nC 202 ; WX 600 ; N ring ; B 332 463 500 627 ;\nC 203 ; WX 600 ; N cedilla ; B 197 -151 344 10 ;\nC 205 ; WX 600 ; N hungarumlaut ; B 239 497 683 672 ;\nC 206 ; WX 600 ; N ogonek ; B 189 -172 377 4 ;\nC 207 ; WX 600 ; N caron ; B 262 492 614 669 ;\nC 208 ; WX 600 ; N emdash ; B 49 231 661 285 ;\nC 225 ; WX 600 ; N AE ; B 3 0 655 562 ;\nC 227 ; WX 600 ; N ordfeminine ; B 209 249 512 580 ;\nC 232 ; WX 600 ; N Lslash ; B 47 0 607 562 ;\nC 233 ; WX 600 ; N Oslash ; B 94 -80 625 629 ;\nC 234 ; WX 600 ; N OE ; B 59 0 672 562 ;\nC 235 ; WX 600 ; N ordmasculine ; B 210 249 535 580 ;\nC 241 ; WX 600 ; N ae ; B 41 -15 626 441 ;\nC 245 ; WX 600 ; N dotlessi ; B 95 0 515 426 ;\nC 248 ; WX 600 ; N lslash ; B 95 0 587 629 ;\nC 249 ; WX 600 ; N oslash ; B 102 -80 588 506 ;\nC 250 ; WX 600 ; N oe ; B 54 -15 615 441 ;\nC 251 ; WX 600 ; N germandbls ; B 48 -15 617 629 ;\nC -1 ; WX 600 ; N Idieresis ; B 96 0 623 753 ;\nC -1 ; WX 600 ; N eacute ; B 106 -15 612 672 ;\nC -1 ; WX 600 ; N abreve ; B 76 -15 576 609 ;\nC -1 ; WX 600 ; N uhungarumlaut ; B 101 -15 723 672 ;\nC -1 ; WX 600 ; N ecaron ; B 106 -15 614 669 ;\nC -1 ; WX 600 ; N Ydieresis ; B 133 0 695 753 ;\nC -1 ; WX 600 ; N divide ; B 136 48 573 467 ;\nC -1 ; WX 600 ; N Yacute ; B 133 0 695 805 ;\nC -1 ; WX 600 ; N Acircumflex ; B 3 0 607 787 ;\nC -1 ; WX 600 ; N aacute ; B 76 -15 612 672 ;\nC -1 ; WX 600 ; N Ucircumflex ; B 125 -18 702 787 ;\nC -1 ; WX 600 ; N yacute ; B -4 -157 683 672 ;\nC -1 ; WX 600 ; N scommaaccent ; B 78 -250 584 441 ;\nC -1 ; WX 600 ; N ecircumflex ; B 106 -15 598 654 ;\nC -1 ; WX 600 ; N Uring ; B 125 -18 702 760 ;\nC -1 ; WX 600 ; N Udieresis ; B 125 -18 702 753 ;\nC -1 ; WX 600 ; N aogonek ; B 76 -172 569 441 ;\nC -1 ; WX 600 ; N Uacute ; B 125 -18 702 805 ;\nC -1 ; WX 600 ; N uogonek ; B 101 -172 572 426 ;\nC -1 ; WX 600 ; N Edieresis ; B 53 0 660 753 ;\nC -1 ; WX 600 ; N Dcroat ; B 43 0 645 562 ;\nC -1 ; WX 600 ; N commaaccent ; B 145 -250 323 -58 ;\nC -1 ; WX 600 ; N copyright ; B 53 -18 667 580 ;\nC -1 ; WX 600 ; N Emacron ; B 53 0 660 698 ;\nC -1 ; WX 600 ; N ccaron ; B 106 -15 614 669 ;\nC -1 ; WX 600 ; N aring ; B 76 -15 569 627 ;\nC -1 ; WX 600 ; N Ncommaaccent ; B 7 -250 712 562 ;\nC -1 ; WX 600 ; N lacute ; B 95 0 640 805 ;\nC -1 ; WX 600 ; N agrave ; B 76 -15 569 672 ;\nC -1 ; WX 600 ; N Tcommaaccent ; B 108 -250 665 562 ;\nC -1 ; WX 600 ; N Cacute ; B 93 -18 655 805 ;\nC -1 ; WX 600 ; N atilde ; B 76 -15 629 606 ;\nC -1 ; WX 600 ; N Edotaccent ; B 53 0 660 753 ;\nC -1 ; WX 600 ; N scaron ; B 78 -15 614 669 ;\nC -1 ; WX 600 ; N scedilla ; B 78 -151 584 441 ;\nC -1 ; WX 600 ; N iacute ; B 95 0 612 672 ;\nC -1 ; WX 600 ; N lozenge ; B 94 0 519 706 ;\nC -1 ; WX 600 ; N Rcaron ; B 38 0 642 802 ;\nC -1 ; WX 600 ; N Gcommaaccent ; B 83 -250 645 580 ;\nC -1 ; WX 600 ; N ucircumflex ; B 101 -15 572 654 ;\nC -1 ; WX 600 ; N acircumflex ; B 76 -15 581 654 ;\nC -1 ; WX 600 ; N Amacron ; B 3 0 607 698 ;\nC -1 ; WX 600 ; N rcaron ; B 60 0 636 669 ;\nC -1 ; WX 600 ; N ccedilla ; B 106 -151 614 441 ;\nC -1 ; WX 600 ; N Zdotaccent ; B 86 0 610 753 ;\nC -1 ; WX 600 ; N Thorn ; B 79 0 606 562 ;\nC -1 ; WX 600 ; N Omacron ; B 94 -18 628 698 ;\nC -1 ; WX 600 ; N Racute ; B 38 0 670 805 ;\nC -1 ; WX 600 ; N Sacute ; B 76 -20 650 805 ;\nC -1 ; WX 600 ; N dcaron ; B 85 -15 849 629 ;\nC -1 ; WX 600 ; N Umacron ; B 125 -18 702 698 ;\nC -1 ; WX 600 ; N uring ; B 101 -15 572 627 ;\nC -1 ; WX 600 ; N threesuperior ; B 213 240 501 622 ;\nC -1 ; WX 600 ; N Ograve ; B 94 -18 625 805 ;\nC -1 ; WX 600 ; N Agrave ; B 3 0 607 805 ;\nC -1 ; WX 600 ; N Abreve ; B 3 0 607 732 ;\nC -1 ; WX 600 ; N multiply ; B 103 43 607 470 ;\nC -1 ; WX 600 ; N uacute ; B 101 -15 602 672 ;\nC -1 ; WX 600 ; N Tcaron ; B 108 0 665 802 ;\nC -1 ; WX 600 ; N partialdiff ; B 45 -38 546 710 ;\nC -1 ; WX 600 ; N ydieresis ; B -4 -157 683 620 ;\nC -1 ; WX 600 ; N Nacute ; B 7 -13 712 805 ;\nC -1 ; WX 600 ; N icircumflex ; B 95 0 551 654 ;\nC -1 ; WX 600 ; N Ecircumflex ; B 53 0 660 787 ;\nC -1 ; WX 600 ; N adieresis ; B 76 -15 575 620 ;\nC -1 ; WX 600 ; N edieresis ; B 106 -15 598 620 ;\nC -1 ; WX 600 ; N cacute ; B 106 -15 612 672 ;\nC -1 ; WX 600 ; N nacute ; B 26 0 602 672 ;\nC -1 ; WX 600 ; N umacron ; B 101 -15 600 565 ;\nC -1 ; WX 600 ; N Ncaron ; B 7 -13 712 802 ;\nC -1 ; WX 600 ; N Iacute ; B 96 0 640 805 ;\nC -1 ; WX 600 ; N plusminus ; B 96 44 594 558 ;\nC -1 ; WX 600 ; N brokenbar ; B 238 -175 469 675 ;\nC -1 ; WX 600 ; N registered ; B 53 -18 667 580 ;\nC -1 ; WX 600 ; N Gbreve ; B 83 -18 645 732 ;\nC -1 ; WX 600 ; N Idotaccent ; B 96 0 623 753 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 670 706 ;\nC -1 ; WX 600 ; N Egrave ; B 53 0 660 805 ;\nC -1 ; WX 600 ; N racute ; B 60 0 636 672 ;\nC -1 ; WX 600 ; N omacron ; B 102 -15 600 565 ;\nC -1 ; WX 600 ; N Zacute ; B 86 0 670 805 ;\nC -1 ; WX 600 ; N Zcaron ; B 86 0 642 802 ;\nC -1 ; WX 600 ; N greaterequal ; B 98 0 594 710 ;\nC -1 ; WX 600 ; N Eth ; B 43 0 645 562 ;\nC -1 ; WX 600 ; N Ccedilla ; B 93 -151 658 580 ;\nC -1 ; WX 600 ; N lcommaaccent ; B 95 -250 515 629 ;\nC -1 ; WX 600 ; N tcaron ; B 167 -15 587 717 ;\nC -1 ; WX 600 ; N eogonek ; B 106 -172 598 441 ;\nC -1 ; WX 600 ; N Uogonek ; B 124 -172 702 562 ;\nC -1 ; WX 600 ; N Aacute ; B 3 0 660 805 ;\nC -1 ; WX 600 ; N Adieresis ; B 3 0 607 753 ;\nC -1 ; WX 600 ; N egrave ; B 106 -15 598 672 ;\nC -1 ; WX 600 ; N zacute ; B 99 0 612 672 ;\nC -1 ; WX 600 ; N iogonek ; B 95 -172 515 657 ;\nC -1 ; WX 600 ; N Oacute ; B 94 -18 640 805 ;\nC -1 ; WX 600 ; N oacute ; B 102 -15 612 672 ;\nC -1 ; WX 600 ; N amacron ; B 76 -15 600 565 ;\nC -1 ; WX 600 ; N sacute ; B 78 -15 612 672 ;\nC -1 ; WX 600 ; N idieresis ; B 95 0 545 620 ;\nC -1 ; WX 600 ; N Ocircumflex ; B 94 -18 625 787 ;\nC -1 ; WX 600 ; N Ugrave ; B 125 -18 702 805 ;\nC -1 ; WX 600 ; N Delta ; B 6 0 598 688 ;\nC -1 ; WX 600 ; N thorn ; B -24 -157 605 629 ;\nC -1 ; WX 600 ; N twosuperior ; B 230 249 535 622 ;\nC -1 ; WX 600 ; N Odieresis ; B 94 -18 625 753 ;\nC -1 ; WX 600 ; N mu ; B 72 -157 572 426 ;\nC -1 ; WX 600 ; N igrave ; B 95 0 515 672 ;\nC -1 ; WX 600 ; N ohungarumlaut ; B 102 -15 723 672 ;\nC -1 ; WX 600 ; N Eogonek ; B 53 -172 660 562 ;\nC -1 ; WX 600 ; N dcroat ; B 85 -15 704 629 ;\nC -1 ; WX 600 ; N threequarters ; B 73 -56 659 666 ;\nC -1 ; WX 600 ; N Scedilla ; B 76 -151 650 580 ;\nC -1 ; WX 600 ; N lcaron ; B 95 0 667 629 ;\nC -1 ; WX 600 ; N Kcommaaccent ; B 38 -250 671 562 ;\nC -1 ; WX 600 ; N Lacute ; B 47 0 607 805 ;\nC -1 ; WX 600 ; N trademark ; B 75 263 742 562 ;\nC -1 ; WX 600 ; N edotaccent ; B 106 -15 598 620 ;\nC -1 ; WX 600 ; N Igrave ; B 96 0 623 805 ;\nC -1 ; WX 600 ; N Imacron ; B 96 0 628 698 ;\nC -1 ; WX 600 ; N Lcaron ; B 47 0 632 562 ;\nC -1 ; WX 600 ; N onehalf ; B 65 -57 669 665 ;\nC -1 ; WX 600 ; N lessequal ; B 98 0 645 710 ;\nC -1 ; WX 600 ; N ocircumflex ; B 102 -15 588 654 ;\nC -1 ; WX 600 ; N ntilde ; B 26 0 629 606 ;\nC -1 ; WX 600 ; N Uhungarumlaut ; B 125 -18 761 805 ;\nC -1 ; WX 600 ; N Eacute ; B 53 0 670 805 ;\nC -1 ; WX 600 ; N emacron ; B 106 -15 600 565 ;\nC -1 ; WX 600 ; N gbreve ; B 61 -157 657 609 ;\nC -1 ; WX 600 ; N onequarter ; B 65 -57 674 665 ;\nC -1 ; WX 600 ; N Scaron ; B 76 -20 672 802 ;\nC -1 ; WX 600 ; N Scommaaccent ; B 76 -250 650 580 ;\nC -1 ; WX 600 ; N Ohungarumlaut ; B 94 -18 751 805 ;\nC -1 ; WX 600 ; N degree ; B 214 269 576 622 ;\nC -1 ; WX 600 ; N ograve ; B 102 -15 588 672 ;\nC -1 ; WX 600 ; N Ccaron ; B 93 -18 672 802 ;\nC -1 ; WX 600 ; N ugrave ; B 101 -15 572 672 ;\nC -1 ; WX 600 ; N radical ; B 85 -15 765 792 ;\nC -1 ; WX 600 ; N Dcaron ; B 43 0 645 802 ;\nC -1 ; WX 600 ; N rcommaaccent ; B 60 -250 636 441 ;\nC -1 ; WX 600 ; N Ntilde ; B 7 -13 712 729 ;\nC -1 ; WX 600 ; N otilde ; B 102 -15 629 606 ;\nC -1 ; WX 600 ; N Rcommaaccent ; B 38 -250 598 562 ;\nC -1 ; WX 600 ; N Lcommaaccent ; B 47 -250 607 562 ;\nC -1 ; WX 600 ; N Atilde ; B 3 0 655 729 ;\nC -1 ; WX 600 ; N Aogonek ; B 3 -172 607 562 ;\nC -1 ; WX 600 ; N Aring ; B 3 0 607 750 ;\nC -1 ; WX 600 ; N Otilde ; B 94 -18 655 729 ;\nC -1 ; WX 600 ; N zdotaccent ; B 99 0 593 620 ;\nC -1 ; WX 600 ; N Ecaron ; B 53 0 660 802 ;\nC -1 ; WX 600 ; N Iogonek ; B 96 -172 623 562 ;\nC -1 ; WX 600 ; N kcommaaccent ; B 58 -250 633 629 ;\nC -1 ; WX 600 ; N minus ; B 129 232 580 283 ;\nC -1 ; WX 600 ; N Icircumflex ; B 96 0 623 787 ;\nC -1 ; WX 600 ; N ncaron ; B 26 0 614 669 ;\nC -1 ; WX 600 ; N tcommaaccent ; B 165 -250 561 561 ;\nC -1 ; WX 600 ; N logicalnot ; B 155 108 591 369 ;\nC -1 ; WX 600 ; N odieresis ; B 102 -15 588 620 ;\nC -1 ; WX 600 ; N udieresis ; B 101 -15 575 620 ;\nC -1 ; WX 600 ; N notequal ; B 43 -16 621 529 ;\nC -1 ; WX 600 ; N gcommaaccent ; B 61 -157 657 708 ;\nC -1 ; WX 600 ; N eth ; B 102 -15 639 629 ;\nC -1 ; WX 600 ; N zcaron ; B 99 0 624 669 ;\nC -1 ; WX 600 ; N ncommaaccent ; B 26 -250 585 441 ;\nC -1 ; WX 600 ; N onesuperior ; B 231 249 491 622 ;\nC -1 ; WX 600 ; N imacron ; B 95 0 543 565 ;\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nEndFontMetrics\n";
      },                                                                                                               // 60
      "Courier-BoldOblique": function() {                                                                              // 61
        return "StartFontMetrics 4.1\nComment Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Mon Jun 23 16:28:46 1997\nComment UniqueID 43049\nComment VMusage 17529 79244\nFontName Courier-BoldOblique\nFullName Courier Bold Oblique\nFamilyName Courier\nWeight Bold\nItalicAngle -12\nIsFixedPitch true\nCharacterSet ExtendedRoman\nFontBBox -57 -250 869 801 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 003.000\nNotice Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nEncodingScheme AdobeStandardEncoding\nCapHeight 562\nXHeight 439\nAscender 629\nDescender -157\nStdHW 84\nStdVW 106\nStartCharMetrics 315\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 600 ; N exclam ; B 215 -15 495 572 ;\nC 34 ; WX 600 ; N quotedbl ; B 211 277 585 562 ;\nC 35 ; WX 600 ; N numbersign ; B 88 -45 641 651 ;\nC 36 ; WX 600 ; N dollar ; B 87 -126 630 666 ;\nC 37 ; WX 600 ; N percent ; B 101 -15 625 616 ;\nC 38 ; WX 600 ; N ampersand ; B 61 -15 595 543 ;\nC 39 ; WX 600 ; N quoteright ; B 229 277 543 562 ;\nC 40 ; WX 600 ; N parenleft ; B 265 -102 592 616 ;\nC 41 ; WX 600 ; N parenright ; B 117 -102 444 616 ;\nC 42 ; WX 600 ; N asterisk ; B 179 219 598 601 ;\nC 43 ; WX 600 ; N plus ; B 114 39 596 478 ;\nC 44 ; WX 600 ; N comma ; B 99 -111 430 174 ;\nC 45 ; WX 600 ; N hyphen ; B 143 203 567 313 ;\nC 46 ; WX 600 ; N period ; B 206 -15 427 171 ;\nC 47 ; WX 600 ; N slash ; B 90 -77 626 626 ;\nC 48 ; WX 600 ; N zero ; B 135 -15 593 616 ;\nC 49 ; WX 600 ; N one ; B 93 0 562 616 ;\nC 50 ; WX 600 ; N two ; B 61 0 594 616 ;\nC 51 ; WX 600 ; N three ; B 71 -15 571 616 ;\nC 52 ; WX 600 ; N four ; B 81 0 559 616 ;\nC 53 ; WX 600 ; N five ; B 77 -15 621 601 ;\nC 54 ; WX 600 ; N six ; B 135 -15 652 616 ;\nC 55 ; WX 600 ; N seven ; B 147 0 622 601 ;\nC 56 ; WX 600 ; N eight ; B 115 -15 604 616 ;\nC 57 ; WX 600 ; N nine ; B 75 -15 592 616 ;\nC 58 ; WX 600 ; N colon ; B 205 -15 480 425 ;\nC 59 ; WX 600 ; N semicolon ; B 99 -111 481 425 ;\nC 60 ; WX 600 ; N less ; B 120 15 613 501 ;\nC 61 ; WX 600 ; N equal ; B 96 118 614 398 ;\nC 62 ; WX 600 ; N greater ; B 97 15 589 501 ;\nC 63 ; WX 600 ; N question ; B 183 -14 592 580 ;\nC 64 ; WX 600 ; N at ; B 65 -15 642 616 ;\nC 65 ; WX 600 ; N A ; B -9 0 632 562 ;\nC 66 ; WX 600 ; N B ; B 30 0 630 562 ;\nC 67 ; WX 600 ; N C ; B 74 -18 675 580 ;\nC 68 ; WX 600 ; N D ; B 30 0 664 562 ;\nC 69 ; WX 600 ; N E ; B 25 0 670 562 ;\nC 70 ; WX 600 ; N F ; B 39 0 684 562 ;\nC 71 ; WX 600 ; N G ; B 74 -18 675 580 ;\nC 72 ; WX 600 ; N H ; B 20 0 700 562 ;\nC 73 ; WX 600 ; N I ; B 77 0 643 562 ;\nC 74 ; WX 600 ; N J ; B 58 -18 721 562 ;\nC 75 ; WX 600 ; N K ; B 21 0 692 562 ;\nC 76 ; WX 600 ; N L ; B 39 0 636 562 ;\nC 77 ; WX 600 ; N M ; B -2 0 722 562 ;\nC 78 ; WX 600 ; N N ; B 8 -12 730 562 ;\nC 79 ; WX 600 ; N O ; B 74 -18 645 580 ;\nC 80 ; WX 600 ; N P ; B 48 0 643 562 ;\nC 81 ; WX 600 ; N Q ; B 83 -138 636 580 ;\nC 82 ; WX 600 ; N R ; B 24 0 617 562 ;\nC 83 ; WX 600 ; N S ; B 54 -22 673 582 ;\nC 84 ; WX 600 ; N T ; B 86 0 679 562 ;\nC 85 ; WX 600 ; N U ; B 101 -18 716 562 ;\nC 86 ; WX 600 ; N V ; B 84 0 733 562 ;\nC 87 ; WX 600 ; N W ; B 79 0 738 562 ;\nC 88 ; WX 600 ; N X ; B 12 0 690 562 ;\nC 89 ; WX 600 ; N Y ; B 109 0 709 562 ;\nC 90 ; WX 600 ; N Z ; B 62 0 637 562 ;\nC 91 ; WX 600 ; N bracketleft ; B 223 -102 606 616 ;\nC 92 ; WX 600 ; N backslash ; B 222 -77 496 626 ;\nC 93 ; WX 600 ; N bracketright ; B 103 -102 486 616 ;\nC 94 ; WX 600 ; N asciicircum ; B 171 250 556 616 ;\nC 95 ; WX 600 ; N underscore ; B -27 -125 585 -75 ;\nC 96 ; WX 600 ; N quoteleft ; B 297 277 487 562 ;\nC 97 ; WX 600 ; N a ; B 61 -15 593 454 ;\nC 98 ; WX 600 ; N b ; B 13 -15 636 626 ;\nC 99 ; WX 600 ; N c ; B 81 -15 631 459 ;\nC 100 ; WX 600 ; N d ; B 60 -15 645 626 ;\nC 101 ; WX 600 ; N e ; B 81 -15 605 454 ;\nC 102 ; WX 600 ; N f ; B 83 0 677 626 ; L i fi ; L l fl ;\nC 103 ; WX 600 ; N g ; B 40 -146 674 454 ;\nC 104 ; WX 600 ; N h ; B 18 0 615 626 ;\nC 105 ; WX 600 ; N i ; B 77 0 546 658 ;\nC 106 ; WX 600 ; N j ; B 36 -146 580 658 ;\nC 107 ; WX 600 ; N k ; B 33 0 643 626 ;\nC 108 ; WX 600 ; N l ; B 77 0 546 626 ;\nC 109 ; WX 600 ; N m ; B -22 0 649 454 ;\nC 110 ; WX 600 ; N n ; B 18 0 615 454 ;\nC 111 ; WX 600 ; N o ; B 71 -15 622 454 ;\nC 112 ; WX 600 ; N p ; B -32 -142 622 454 ;\nC 113 ; WX 600 ; N q ; B 60 -142 685 454 ;\nC 114 ; WX 600 ; N r ; B 47 0 655 454 ;\nC 115 ; WX 600 ; N s ; B 66 -17 608 459 ;\nC 116 ; WX 600 ; N t ; B 118 -15 567 562 ;\nC 117 ; WX 600 ; N u ; B 70 -15 592 439 ;\nC 118 ; WX 600 ; N v ; B 70 0 695 439 ;\nC 119 ; WX 600 ; N w ; B 53 0 712 439 ;\nC 120 ; WX 600 ; N x ; B 6 0 671 439 ;\nC 121 ; WX 600 ; N y ; B -21 -142 695 439 ;\nC 122 ; WX 600 ; N z ; B 81 0 614 439 ;\nC 123 ; WX 600 ; N braceleft ; B 203 -102 595 616 ;\nC 124 ; WX 600 ; N bar ; B 201 -250 505 750 ;\nC 125 ; WX 600 ; N braceright ; B 114 -102 506 616 ;\nC 126 ; WX 600 ; N asciitilde ; B 120 153 590 356 ;\nC 161 ; WX 600 ; N exclamdown ; B 196 -146 477 449 ;\nC 162 ; WX 600 ; N cent ; B 121 -49 605 614 ;\nC 163 ; WX 600 ; N sterling ; B 106 -28 650 611 ;\nC 164 ; WX 600 ; N fraction ; B 22 -60 708 661 ;\nC 165 ; WX 600 ; N yen ; B 98 0 710 562 ;\nC 166 ; WX 600 ; N florin ; B -57 -131 702 616 ;\nC 167 ; WX 600 ; N section ; B 74 -70 620 580 ;\nC 168 ; WX 600 ; N currency ; B 77 49 644 517 ;\nC 169 ; WX 600 ; N quotesingle ; B 303 277 493 562 ;\nC 170 ; WX 600 ; N quotedblleft ; B 190 277 594 562 ;\nC 171 ; WX 600 ; N guillemotleft ; B 62 70 639 446 ;\nC 172 ; WX 600 ; N guilsinglleft ; B 195 70 545 446 ;\nC 173 ; WX 600 ; N guilsinglright ; B 165 70 514 446 ;\nC 174 ; WX 600 ; N fi ; B 12 0 644 626 ;\nC 175 ; WX 600 ; N fl ; B 12 0 644 626 ;\nC 177 ; WX 600 ; N endash ; B 108 203 602 313 ;\nC 178 ; WX 600 ; N dagger ; B 175 -70 586 580 ;\nC 179 ; WX 600 ; N daggerdbl ; B 121 -70 587 580 ;\nC 180 ; WX 600 ; N periodcentered ; B 248 165 461 351 ;\nC 182 ; WX 600 ; N paragraph ; B 61 -70 700 580 ;\nC 183 ; WX 600 ; N bullet ; B 196 132 523 430 ;\nC 184 ; WX 600 ; N quotesinglbase ; B 144 -142 458 143 ;\nC 185 ; WX 600 ; N quotedblbase ; B 34 -142 560 143 ;\nC 186 ; WX 600 ; N quotedblright ; B 119 277 645 562 ;\nC 187 ; WX 600 ; N guillemotright ; B 71 70 647 446 ;\nC 188 ; WX 600 ; N ellipsis ; B 35 -15 587 116 ;\nC 189 ; WX 600 ; N perthousand ; B -45 -15 743 616 ;\nC 191 ; WX 600 ; N questiondown ; B 100 -146 509 449 ;\nC 193 ; WX 600 ; N grave ; B 272 508 503 661 ;\nC 194 ; WX 600 ; N acute ; B 312 508 609 661 ;\nC 195 ; WX 600 ; N circumflex ; B 212 483 607 657 ;\nC 196 ; WX 600 ; N tilde ; B 199 493 643 636 ;\nC 197 ; WX 600 ; N macron ; B 195 505 637 585 ;\nC 198 ; WX 600 ; N breve ; B 217 468 652 631 ;\nC 199 ; WX 600 ; N dotaccent ; B 348 498 493 638 ;\nC 200 ; WX 600 ; N dieresis ; B 246 498 595 638 ;\nC 202 ; WX 600 ; N ring ; B 319 481 528 678 ;\nC 203 ; WX 600 ; N cedilla ; B 168 -206 368 0 ;\nC 205 ; WX 600 ; N hungarumlaut ; B 171 488 729 661 ;\nC 206 ; WX 600 ; N ogonek ; B 143 -199 367 0 ;\nC 207 ; WX 600 ; N caron ; B 238 493 633 667 ;\nC 208 ; WX 600 ; N emdash ; B 33 203 677 313 ;\nC 225 ; WX 600 ; N AE ; B -29 0 708 562 ;\nC 227 ; WX 600 ; N ordfeminine ; B 188 196 526 580 ;\nC 232 ; WX 600 ; N Lslash ; B 39 0 636 562 ;\nC 233 ; WX 600 ; N Oslash ; B 48 -22 673 584 ;\nC 234 ; WX 600 ; N OE ; B 26 0 701 562 ;\nC 235 ; WX 600 ; N ordmasculine ; B 188 196 543 580 ;\nC 241 ; WX 600 ; N ae ; B 21 -15 652 454 ;\nC 245 ; WX 600 ; N dotlessi ; B 77 0 546 439 ;\nC 248 ; WX 600 ; N lslash ; B 77 0 587 626 ;\nC 249 ; WX 600 ; N oslash ; B 54 -24 638 463 ;\nC 250 ; WX 600 ; N oe ; B 18 -15 662 454 ;\nC 251 ; WX 600 ; N germandbls ; B 22 -15 629 626 ;\nC -1 ; WX 600 ; N Idieresis ; B 77 0 643 761 ;\nC -1 ; WX 600 ; N eacute ; B 81 -15 609 661 ;\nC -1 ; WX 600 ; N abreve ; B 61 -15 658 661 ;\nC -1 ; WX 600 ; N uhungarumlaut ; B 70 -15 769 661 ;\nC -1 ; WX 600 ; N ecaron ; B 81 -15 633 667 ;\nC -1 ; WX 600 ; N Ydieresis ; B 109 0 709 761 ;\nC -1 ; WX 600 ; N divide ; B 114 16 596 500 ;\nC -1 ; WX 600 ; N Yacute ; B 109 0 709 784 ;\nC -1 ; WX 600 ; N Acircumflex ; B -9 0 632 780 ;\nC -1 ; WX 600 ; N aacute ; B 61 -15 609 661 ;\nC -1 ; WX 600 ; N Ucircumflex ; B 101 -18 716 780 ;\nC -1 ; WX 600 ; N yacute ; B -21 -142 695 661 ;\nC -1 ; WX 600 ; N scommaaccent ; B 66 -250 608 459 ;\nC -1 ; WX 600 ; N ecircumflex ; B 81 -15 607 657 ;\nC -1 ; WX 600 ; N Uring ; B 101 -18 716 801 ;\nC -1 ; WX 600 ; N Udieresis ; B 101 -18 716 761 ;\nC -1 ; WX 600 ; N aogonek ; B 61 -199 593 454 ;\nC -1 ; WX 600 ; N Uacute ; B 101 -18 716 784 ;\nC -1 ; WX 600 ; N uogonek ; B 70 -199 592 439 ;\nC -1 ; WX 600 ; N Edieresis ; B 25 0 670 761 ;\nC -1 ; WX 600 ; N Dcroat ; B 30 0 664 562 ;\nC -1 ; WX 600 ; N commaaccent ; B 151 -250 385 -57 ;\nC -1 ; WX 600 ; N copyright ; B 53 -18 667 580 ;\nC -1 ; WX 600 ; N Emacron ; B 25 0 670 708 ;\nC -1 ; WX 600 ; N ccaron ; B 81 -15 633 667 ;\nC -1 ; WX 600 ; N aring ; B 61 -15 593 678 ;\nC -1 ; WX 600 ; N Ncommaaccent ; B 8 -250 730 562 ;\nC -1 ; WX 600 ; N lacute ; B 77 0 639 801 ;\nC -1 ; WX 600 ; N agrave ; B 61 -15 593 661 ;\nC -1 ; WX 600 ; N Tcommaaccent ; B 86 -250 679 562 ;\nC -1 ; WX 600 ; N Cacute ; B 74 -18 675 784 ;\nC -1 ; WX 600 ; N atilde ; B 61 -15 643 636 ;\nC -1 ; WX 600 ; N Edotaccent ; B 25 0 670 761 ;\nC -1 ; WX 600 ; N scaron ; B 66 -17 633 667 ;\nC -1 ; WX 600 ; N scedilla ; B 66 -206 608 459 ;\nC -1 ; WX 600 ; N iacute ; B 77 0 609 661 ;\nC -1 ; WX 600 ; N lozenge ; B 145 0 614 740 ;\nC -1 ; WX 600 ; N Rcaron ; B 24 0 659 790 ;\nC -1 ; WX 600 ; N Gcommaaccent ; B 74 -250 675 580 ;\nC -1 ; WX 600 ; N ucircumflex ; B 70 -15 597 657 ;\nC -1 ; WX 600 ; N acircumflex ; B 61 -15 607 657 ;\nC -1 ; WX 600 ; N Amacron ; B -9 0 633 708 ;\nC -1 ; WX 600 ; N rcaron ; B 47 0 655 667 ;\nC -1 ; WX 600 ; N ccedilla ; B 81 -206 631 459 ;\nC -1 ; WX 600 ; N Zdotaccent ; B 62 0 637 761 ;\nC -1 ; WX 600 ; N Thorn ; B 48 0 620 562 ;\nC -1 ; WX 600 ; N Omacron ; B 74 -18 663 708 ;\nC -1 ; WX 600 ; N Racute ; B 24 0 665 784 ;\nC -1 ; WX 600 ; N Sacute ; B 54 -22 673 784 ;\nC -1 ; WX 600 ; N dcaron ; B 60 -15 861 626 ;\nC -1 ; WX 600 ; N Umacron ; B 101 -18 716 708 ;\nC -1 ; WX 600 ; N uring ; B 70 -15 592 678 ;\nC -1 ; WX 600 ; N threesuperior ; B 193 222 526 616 ;\nC -1 ; WX 600 ; N Ograve ; B 74 -18 645 784 ;\nC -1 ; WX 600 ; N Agrave ; B -9 0 632 784 ;\nC -1 ; WX 600 ; N Abreve ; B -9 0 684 784 ;\nC -1 ; WX 600 ; N multiply ; B 104 39 606 478 ;\nC -1 ; WX 600 ; N uacute ; B 70 -15 599 661 ;\nC -1 ; WX 600 ; N Tcaron ; B 86 0 679 790 ;\nC -1 ; WX 600 ; N partialdiff ; B 91 -38 627 728 ;\nC -1 ; WX 600 ; N ydieresis ; B -21 -142 695 638 ;\nC -1 ; WX 600 ; N Nacute ; B 8 -12 730 784 ;\nC -1 ; WX 600 ; N icircumflex ; B 77 0 577 657 ;\nC -1 ; WX 600 ; N Ecircumflex ; B 25 0 670 780 ;\nC -1 ; WX 600 ; N adieresis ; B 61 -15 595 638 ;\nC -1 ; WX 600 ; N edieresis ; B 81 -15 605 638 ;\nC -1 ; WX 600 ; N cacute ; B 81 -15 649 661 ;\nC -1 ; WX 600 ; N nacute ; B 18 0 639 661 ;\nC -1 ; WX 600 ; N umacron ; B 70 -15 637 585 ;\nC -1 ; WX 600 ; N Ncaron ; B 8 -12 730 790 ;\nC -1 ; WX 600 ; N Iacute ; B 77 0 643 784 ;\nC -1 ; WX 600 ; N plusminus ; B 76 24 614 515 ;\nC -1 ; WX 600 ; N brokenbar ; B 217 -175 489 675 ;\nC -1 ; WX 600 ; N registered ; B 53 -18 667 580 ;\nC -1 ; WX 600 ; N Gbreve ; B 74 -18 684 784 ;\nC -1 ; WX 600 ; N Idotaccent ; B 77 0 643 761 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 672 706 ;\nC -1 ; WX 600 ; N Egrave ; B 25 0 670 784 ;\nC -1 ; WX 600 ; N racute ; B 47 0 655 661 ;\nC -1 ; WX 600 ; N omacron ; B 71 -15 637 585 ;\nC -1 ; WX 600 ; N Zacute ; B 62 0 665 784 ;\nC -1 ; WX 600 ; N Zcaron ; B 62 0 659 790 ;\nC -1 ; WX 600 ; N greaterequal ; B 26 0 627 696 ;\nC -1 ; WX 600 ; N Eth ; B 30 0 664 562 ;\nC -1 ; WX 600 ; N Ccedilla ; B 74 -206 675 580 ;\nC -1 ; WX 600 ; N lcommaaccent ; B 77 -250 546 626 ;\nC -1 ; WX 600 ; N tcaron ; B 118 -15 627 703 ;\nC -1 ; WX 600 ; N eogonek ; B 81 -199 605 454 ;\nC -1 ; WX 600 ; N Uogonek ; B 101 -199 716 562 ;\nC -1 ; WX 600 ; N Aacute ; B -9 0 655 784 ;\nC -1 ; WX 600 ; N Adieresis ; B -9 0 632 761 ;\nC -1 ; WX 600 ; N egrave ; B 81 -15 605 661 ;\nC -1 ; WX 600 ; N zacute ; B 81 0 614 661 ;\nC -1 ; WX 600 ; N iogonek ; B 77 -199 546 658 ;\nC -1 ; WX 600 ; N Oacute ; B 74 -18 645 784 ;\nC -1 ; WX 600 ; N oacute ; B 71 -15 649 661 ;\nC -1 ; WX 600 ; N amacron ; B 61 -15 637 585 ;\nC -1 ; WX 600 ; N sacute ; B 66 -17 609 661 ;\nC -1 ; WX 600 ; N idieresis ; B 77 0 561 618 ;\nC -1 ; WX 600 ; N Ocircumflex ; B 74 -18 645 780 ;\nC -1 ; WX 600 ; N Ugrave ; B 101 -18 716 784 ;\nC -1 ; WX 600 ; N Delta ; B 6 0 594 688 ;\nC -1 ; WX 600 ; N thorn ; B -32 -142 622 626 ;\nC -1 ; WX 600 ; N twosuperior ; B 191 230 542 616 ;\nC -1 ; WX 600 ; N Odieresis ; B 74 -18 645 761 ;\nC -1 ; WX 600 ; N mu ; B 49 -142 592 439 ;\nC -1 ; WX 600 ; N igrave ; B 77 0 546 661 ;\nC -1 ; WX 600 ; N ohungarumlaut ; B 71 -15 809 661 ;\nC -1 ; WX 600 ; N Eogonek ; B 25 -199 670 562 ;\nC -1 ; WX 600 ; N dcroat ; B 60 -15 712 626 ;\nC -1 ; WX 600 ; N threequarters ; B 8 -60 699 661 ;\nC -1 ; WX 600 ; N Scedilla ; B 54 -206 673 582 ;\nC -1 ; WX 600 ; N lcaron ; B 77 0 731 626 ;\nC -1 ; WX 600 ; N Kcommaaccent ; B 21 -250 692 562 ;\nC -1 ; WX 600 ; N Lacute ; B 39 0 636 784 ;\nC -1 ; WX 600 ; N trademark ; B 86 230 869 562 ;\nC -1 ; WX 600 ; N edotaccent ; B 81 -15 605 638 ;\nC -1 ; WX 600 ; N Igrave ; B 77 0 643 784 ;\nC -1 ; WX 600 ; N Imacron ; B 77 0 663 708 ;\nC -1 ; WX 600 ; N Lcaron ; B 39 0 757 562 ;\nC -1 ; WX 600 ; N onehalf ; B 22 -60 716 661 ;\nC -1 ; WX 600 ; N lessequal ; B 26 0 671 696 ;\nC -1 ; WX 600 ; N ocircumflex ; B 71 -15 622 657 ;\nC -1 ; WX 600 ; N ntilde ; B 18 0 643 636 ;\nC -1 ; WX 600 ; N Uhungarumlaut ; B 101 -18 805 784 ;\nC -1 ; WX 600 ; N Eacute ; B 25 0 670 784 ;\nC -1 ; WX 600 ; N emacron ; B 81 -15 637 585 ;\nC -1 ; WX 600 ; N gbreve ; B 40 -146 674 661 ;\nC -1 ; WX 600 ; N onequarter ; B 13 -60 707 661 ;\nC -1 ; WX 600 ; N Scaron ; B 54 -22 689 790 ;\nC -1 ; WX 600 ; N Scommaaccent ; B 54 -250 673 582 ;\nC -1 ; WX 600 ; N Ohungarumlaut ; B 74 -18 795 784 ;\nC -1 ; WX 600 ; N degree ; B 173 243 570 616 ;\nC -1 ; WX 600 ; N ograve ; B 71 -15 622 661 ;\nC -1 ; WX 600 ; N Ccaron ; B 74 -18 689 790 ;\nC -1 ; WX 600 ; N ugrave ; B 70 -15 592 661 ;\nC -1 ; WX 600 ; N radical ; B 67 -104 635 778 ;\nC -1 ; WX 600 ; N Dcaron ; B 30 0 664 790 ;\nC -1 ; WX 600 ; N rcommaaccent ; B 47 -250 655 454 ;\nC -1 ; WX 600 ; N Ntilde ; B 8 -12 730 759 ;\nC -1 ; WX 600 ; N otilde ; B 71 -15 643 636 ;\nC -1 ; WX 600 ; N Rcommaaccent ; B 24 -250 617 562 ;\nC -1 ; WX 600 ; N Lcommaaccent ; B 39 -250 636 562 ;\nC -1 ; WX 600 ; N Atilde ; B -9 0 669 759 ;\nC -1 ; WX 600 ; N Aogonek ; B -9 -199 632 562 ;\nC -1 ; WX 600 ; N Aring ; B -9 0 632 801 ;\nC -1 ; WX 600 ; N Otilde ; B 74 -18 669 759 ;\nC -1 ; WX 600 ; N zdotaccent ; B 81 0 614 638 ;\nC -1 ; WX 600 ; N Ecaron ; B 25 0 670 790 ;\nC -1 ; WX 600 ; N Iogonek ; B 77 -199 643 562 ;\nC -1 ; WX 600 ; N kcommaaccent ; B 33 -250 643 626 ;\nC -1 ; WX 600 ; N minus ; B 114 203 596 313 ;\nC -1 ; WX 600 ; N Icircumflex ; B 77 0 643 780 ;\nC -1 ; WX 600 ; N ncaron ; B 18 0 633 667 ;\nC -1 ; WX 600 ; N tcommaaccent ; B 118 -250 567 562 ;\nC -1 ; WX 600 ; N logicalnot ; B 135 103 617 413 ;\nC -1 ; WX 600 ; N odieresis ; B 71 -15 622 638 ;\nC -1 ; WX 600 ; N udieresis ; B 70 -15 595 638 ;\nC -1 ; WX 600 ; N notequal ; B 30 -47 626 563 ;\nC -1 ; WX 600 ; N gcommaaccent ; B 40 -146 674 714 ;\nC -1 ; WX 600 ; N eth ; B 93 -27 661 626 ;\nC -1 ; WX 600 ; N zcaron ; B 81 0 643 667 ;\nC -1 ; WX 600 ; N ncommaaccent ; B 18 -250 615 454 ;\nC -1 ; WX 600 ; N onesuperior ; B 212 230 514 616 ;\nC -1 ; WX 600 ; N imacron ; B 77 0 575 585 ;\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nEndFontMetrics\n";
      },                                                                                                               // 63
      "Helvetica": function() {                                                                                        // 64
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:38:23 1997\nComment UniqueID 43054\nComment VMusage 37069 48094\nFontName Helvetica\nFullName Helvetica\nFamilyName Helvetica\nWeight Medium\nItalicAngle 0\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -166 -225 1000 931 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 718\nXHeight 523\nAscender 718\nDescender -207\nStdHW 76\nStdVW 88\nStartCharMetrics 315\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 278 ; N exclam ; B 90 0 187 718 ;\nC 34 ; WX 355 ; N quotedbl ; B 70 463 285 718 ;\nC 35 ; WX 556 ; N numbersign ; B 28 0 529 688 ;\nC 36 ; WX 556 ; N dollar ; B 32 -115 520 775 ;\nC 37 ; WX 889 ; N percent ; B 39 -19 850 703 ;\nC 38 ; WX 667 ; N ampersand ; B 44 -15 645 718 ;\nC 39 ; WX 222 ; N quoteright ; B 53 463 157 718 ;\nC 40 ; WX 333 ; N parenleft ; B 68 -207 299 733 ;\nC 41 ; WX 333 ; N parenright ; B 34 -207 265 733 ;\nC 42 ; WX 389 ; N asterisk ; B 39 431 349 718 ;\nC 43 ; WX 584 ; N plus ; B 39 0 545 505 ;\nC 44 ; WX 278 ; N comma ; B 87 -147 191 106 ;\nC 45 ; WX 333 ; N hyphen ; B 44 232 289 322 ;\nC 46 ; WX 278 ; N period ; B 87 0 191 106 ;\nC 47 ; WX 278 ; N slash ; B -17 -19 295 737 ;\nC 48 ; WX 556 ; N zero ; B 37 -19 519 703 ;\nC 49 ; WX 556 ; N one ; B 101 0 359 703 ;\nC 50 ; WX 556 ; N two ; B 26 0 507 703 ;\nC 51 ; WX 556 ; N three ; B 34 -19 522 703 ;\nC 52 ; WX 556 ; N four ; B 25 0 523 703 ;\nC 53 ; WX 556 ; N five ; B 32 -19 514 688 ;\nC 54 ; WX 556 ; N six ; B 38 -19 518 703 ;\nC 55 ; WX 556 ; N seven ; B 37 0 523 688 ;\nC 56 ; WX 556 ; N eight ; B 38 -19 517 703 ;\nC 57 ; WX 556 ; N nine ; B 42 -19 514 703 ;\nC 58 ; WX 278 ; N colon ; B 87 0 191 516 ;\nC 59 ; WX 278 ; N semicolon ; B 87 -147 191 516 ;\nC 60 ; WX 584 ; N less ; B 48 11 536 495 ;\nC 61 ; WX 584 ; N equal ; B 39 115 545 390 ;\nC 62 ; WX 584 ; N greater ; B 48 11 536 495 ;\nC 63 ; WX 556 ; N question ; B 56 0 492 727 ;\nC 64 ; WX 1015 ; N at ; B 147 -19 868 737 ;\nC 65 ; WX 667 ; N A ; B 14 0 654 718 ;\nC 66 ; WX 667 ; N B ; B 74 0 627 718 ;\nC 67 ; WX 722 ; N C ; B 44 -19 681 737 ;\nC 68 ; WX 722 ; N D ; B 81 0 674 718 ;\nC 69 ; WX 667 ; N E ; B 86 0 616 718 ;\nC 70 ; WX 611 ; N F ; B 86 0 583 718 ;\nC 71 ; WX 778 ; N G ; B 48 -19 704 737 ;\nC 72 ; WX 722 ; N H ; B 77 0 646 718 ;\nC 73 ; WX 278 ; N I ; B 91 0 188 718 ;\nC 74 ; WX 500 ; N J ; B 17 -19 428 718 ;\nC 75 ; WX 667 ; N K ; B 76 0 663 718 ;\nC 76 ; WX 556 ; N L ; B 76 0 537 718 ;\nC 77 ; WX 833 ; N M ; B 73 0 761 718 ;\nC 78 ; WX 722 ; N N ; B 76 0 646 718 ;\nC 79 ; WX 778 ; N O ; B 39 -19 739 737 ;\nC 80 ; WX 667 ; N P ; B 86 0 622 718 ;\nC 81 ; WX 778 ; N Q ; B 39 -56 739 737 ;\nC 82 ; WX 722 ; N R ; B 88 0 684 718 ;\nC 83 ; WX 667 ; N S ; B 49 -19 620 737 ;\nC 84 ; WX 611 ; N T ; B 14 0 597 718 ;\nC 85 ; WX 722 ; N U ; B 79 -19 644 718 ;\nC 86 ; WX 667 ; N V ; B 20 0 647 718 ;\nC 87 ; WX 944 ; N W ; B 16 0 928 718 ;\nC 88 ; WX 667 ; N X ; B 19 0 648 718 ;\nC 89 ; WX 667 ; N Y ; B 14 0 653 718 ;\nC 90 ; WX 611 ; N Z ; B 23 0 588 718 ;\nC 91 ; WX 278 ; N bracketleft ; B 63 -196 250 722 ;\nC 92 ; WX 278 ; N backslash ; B -17 -19 295 737 ;\nC 93 ; WX 278 ; N bracketright ; B 28 -196 215 722 ;\nC 94 ; WX 469 ; N asciicircum ; B -14 264 483 688 ;\nC 95 ; WX 556 ; N underscore ; B 0 -125 556 -75 ;\nC 96 ; WX 222 ; N quoteleft ; B 65 470 169 725 ;\nC 97 ; WX 556 ; N a ; B 36 -15 530 538 ;\nC 98 ; WX 556 ; N b ; B 58 -15 517 718 ;\nC 99 ; WX 500 ; N c ; B 30 -15 477 538 ;\nC 100 ; WX 556 ; N d ; B 35 -15 499 718 ;\nC 101 ; WX 556 ; N e ; B 40 -15 516 538 ;\nC 102 ; WX 278 ; N f ; B 14 0 262 728 ; L i fi ; L l fl ;\nC 103 ; WX 556 ; N g ; B 40 -220 499 538 ;\nC 104 ; WX 556 ; N h ; B 65 0 491 718 ;\nC 105 ; WX 222 ; N i ; B 67 0 155 718 ;\nC 106 ; WX 222 ; N j ; B -16 -210 155 718 ;\nC 107 ; WX 500 ; N k ; B 67 0 501 718 ;\nC 108 ; WX 222 ; N l ; B 67 0 155 718 ;\nC 109 ; WX 833 ; N m ; B 65 0 769 538 ;\nC 110 ; WX 556 ; N n ; B 65 0 491 538 ;\nC 111 ; WX 556 ; N o ; B 35 -14 521 538 ;\nC 112 ; WX 556 ; N p ; B 58 -207 517 538 ;\nC 113 ; WX 556 ; N q ; B 35 -207 494 538 ;\nC 114 ; WX 333 ; N r ; B 77 0 332 538 ;\nC 115 ; WX 500 ; N s ; B 32 -15 464 538 ;\nC 116 ; WX 278 ; N t ; B 14 -7 257 669 ;\nC 117 ; WX 556 ; N u ; B 68 -15 489 523 ;\nC 118 ; WX 500 ; N v ; B 8 0 492 523 ;\nC 119 ; WX 722 ; N w ; B 14 0 709 523 ;\nC 120 ; WX 500 ; N x ; B 11 0 490 523 ;\nC 121 ; WX 500 ; N y ; B 11 -214 489 523 ;\nC 122 ; WX 500 ; N z ; B 31 0 469 523 ;\nC 123 ; WX 334 ; N braceleft ; B 42 -196 292 722 ;\nC 124 ; WX 260 ; N bar ; B 94 -225 167 775 ;\nC 125 ; WX 334 ; N braceright ; B 42 -196 292 722 ;\nC 126 ; WX 584 ; N asciitilde ; B 61 180 523 326 ;\nC 161 ; WX 333 ; N exclamdown ; B 118 -195 215 523 ;\nC 162 ; WX 556 ; N cent ; B 51 -115 513 623 ;\nC 163 ; WX 556 ; N sterling ; B 33 -16 539 718 ;\nC 164 ; WX 167 ; N fraction ; B -166 -19 333 703 ;\nC 165 ; WX 556 ; N yen ; B 3 0 553 688 ;\nC 166 ; WX 556 ; N florin ; B -11 -207 501 737 ;\nC 167 ; WX 556 ; N section ; B 43 -191 512 737 ;\nC 168 ; WX 556 ; N currency ; B 28 99 528 603 ;\nC 169 ; WX 191 ; N quotesingle ; B 59 463 132 718 ;\nC 170 ; WX 333 ; N quotedblleft ; B 38 470 307 725 ;\nC 171 ; WX 556 ; N guillemotleft ; B 97 108 459 446 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 88 108 245 446 ;\nC 173 ; WX 333 ; N guilsinglright ; B 88 108 245 446 ;\nC 174 ; WX 500 ; N fi ; B 14 0 434 728 ;\nC 175 ; WX 500 ; N fl ; B 14 0 432 728 ;\nC 177 ; WX 556 ; N endash ; B 0 240 556 313 ;\nC 178 ; WX 556 ; N dagger ; B 43 -159 514 718 ;\nC 179 ; WX 556 ; N daggerdbl ; B 43 -159 514 718 ;\nC 180 ; WX 278 ; N periodcentered ; B 77 190 202 315 ;\nC 182 ; WX 537 ; N paragraph ; B 18 -173 497 718 ;\nC 183 ; WX 350 ; N bullet ; B 18 202 333 517 ;\nC 184 ; WX 222 ; N quotesinglbase ; B 53 -149 157 106 ;\nC 185 ; WX 333 ; N quotedblbase ; B 26 -149 295 106 ;\nC 186 ; WX 333 ; N quotedblright ; B 26 463 295 718 ;\nC 187 ; WX 556 ; N guillemotright ; B 97 108 459 446 ;\nC 188 ; WX 1000 ; N ellipsis ; B 115 0 885 106 ;\nC 189 ; WX 1000 ; N perthousand ; B 7 -19 994 703 ;\nC 191 ; WX 611 ; N questiondown ; B 91 -201 527 525 ;\nC 193 ; WX 333 ; N grave ; B 14 593 211 734 ;\nC 194 ; WX 333 ; N acute ; B 122 593 319 734 ;\nC 195 ; WX 333 ; N circumflex ; B 21 593 312 734 ;\nC 196 ; WX 333 ; N tilde ; B -4 606 337 722 ;\nC 197 ; WX 333 ; N macron ; B 10 627 323 684 ;\nC 198 ; WX 333 ; N breve ; B 13 595 321 731 ;\nC 199 ; WX 333 ; N dotaccent ; B 121 604 212 706 ;\nC 200 ; WX 333 ; N dieresis ; B 40 604 293 706 ;\nC 202 ; WX 333 ; N ring ; B 75 572 259 756 ;\nC 203 ; WX 333 ; N cedilla ; B 45 -225 259 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B 31 593 409 734 ;\nC 206 ; WX 333 ; N ogonek ; B 73 -225 287 0 ;\nC 207 ; WX 333 ; N caron ; B 21 593 312 734 ;\nC 208 ; WX 1000 ; N emdash ; B 0 240 1000 313 ;\nC 225 ; WX 1000 ; N AE ; B 8 0 951 718 ;\nC 227 ; WX 370 ; N ordfeminine ; B 24 405 346 737 ;\nC 232 ; WX 556 ; N Lslash ; B -20 0 537 718 ;\nC 233 ; WX 778 ; N Oslash ; B 39 -19 740 737 ;\nC 234 ; WX 1000 ; N OE ; B 36 -19 965 737 ;\nC 235 ; WX 365 ; N ordmasculine ; B 25 405 341 737 ;\nC 241 ; WX 889 ; N ae ; B 36 -15 847 538 ;\nC 245 ; WX 278 ; N dotlessi ; B 95 0 183 523 ;\nC 248 ; WX 222 ; N lslash ; B -20 0 242 718 ;\nC 249 ; WX 611 ; N oslash ; B 28 -22 537 545 ;\nC 250 ; WX 944 ; N oe ; B 35 -15 902 538 ;\nC 251 ; WX 611 ; N germandbls ; B 67 -15 571 728 ;\nC -1 ; WX 278 ; N Idieresis ; B 13 0 266 901 ;\nC -1 ; WX 556 ; N eacute ; B 40 -15 516 734 ;\nC -1 ; WX 556 ; N abreve ; B 36 -15 530 731 ;\nC -1 ; WX 556 ; N uhungarumlaut ; B 68 -15 521 734 ;\nC -1 ; WX 556 ; N ecaron ; B 40 -15 516 734 ;\nC -1 ; WX 667 ; N Ydieresis ; B 14 0 653 901 ;\nC -1 ; WX 584 ; N divide ; B 39 -19 545 524 ;\nC -1 ; WX 667 ; N Yacute ; B 14 0 653 929 ;\nC -1 ; WX 667 ; N Acircumflex ; B 14 0 654 929 ;\nC -1 ; WX 556 ; N aacute ; B 36 -15 530 734 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 79 -19 644 929 ;\nC -1 ; WX 500 ; N yacute ; B 11 -214 489 734 ;\nC -1 ; WX 500 ; N scommaaccent ; B 32 -225 464 538 ;\nC -1 ; WX 556 ; N ecircumflex ; B 40 -15 516 734 ;\nC -1 ; WX 722 ; N Uring ; B 79 -19 644 931 ;\nC -1 ; WX 722 ; N Udieresis ; B 79 -19 644 901 ;\nC -1 ; WX 556 ; N aogonek ; B 36 -220 547 538 ;\nC -1 ; WX 722 ; N Uacute ; B 79 -19 644 929 ;\nC -1 ; WX 556 ; N uogonek ; B 68 -225 519 523 ;\nC -1 ; WX 667 ; N Edieresis ; B 86 0 616 901 ;\nC -1 ; WX 722 ; N Dcroat ; B 0 0 674 718 ;\nC -1 ; WX 250 ; N commaaccent ; B 87 -225 181 -40 ;\nC -1 ; WX 737 ; N copyright ; B -14 -19 752 737 ;\nC -1 ; WX 667 ; N Emacron ; B 86 0 616 879 ;\nC -1 ; WX 500 ; N ccaron ; B 30 -15 477 734 ;\nC -1 ; WX 556 ; N aring ; B 36 -15 530 756 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B 76 -225 646 718 ;\nC -1 ; WX 222 ; N lacute ; B 67 0 264 929 ;\nC -1 ; WX 556 ; N agrave ; B 36 -15 530 734 ;\nC -1 ; WX 611 ; N Tcommaaccent ; B 14 -225 597 718 ;\nC -1 ; WX 722 ; N Cacute ; B 44 -19 681 929 ;\nC -1 ; WX 556 ; N atilde ; B 36 -15 530 722 ;\nC -1 ; WX 667 ; N Edotaccent ; B 86 0 616 901 ;\nC -1 ; WX 500 ; N scaron ; B 32 -15 464 734 ;\nC -1 ; WX 500 ; N scedilla ; B 32 -225 464 538 ;\nC -1 ; WX 278 ; N iacute ; B 95 0 292 734 ;\nC -1 ; WX 471 ; N lozenge ; B 10 0 462 728 ;\nC -1 ; WX 722 ; N Rcaron ; B 88 0 684 929 ;\nC -1 ; WX 778 ; N Gcommaaccent ; B 48 -225 704 737 ;\nC -1 ; WX 556 ; N ucircumflex ; B 68 -15 489 734 ;\nC -1 ; WX 556 ; N acircumflex ; B 36 -15 530 734 ;\nC -1 ; WX 667 ; N Amacron ; B 14 0 654 879 ;\nC -1 ; WX 333 ; N rcaron ; B 61 0 352 734 ;\nC -1 ; WX 500 ; N ccedilla ; B 30 -225 477 538 ;\nC -1 ; WX 611 ; N Zdotaccent ; B 23 0 588 901 ;\nC -1 ; WX 667 ; N Thorn ; B 86 0 622 718 ;\nC -1 ; WX 778 ; N Omacron ; B 39 -19 739 879 ;\nC -1 ; WX 722 ; N Racute ; B 88 0 684 929 ;\nC -1 ; WX 667 ; N Sacute ; B 49 -19 620 929 ;\nC -1 ; WX 643 ; N dcaron ; B 35 -15 655 718 ;\nC -1 ; WX 722 ; N Umacron ; B 79 -19 644 879 ;\nC -1 ; WX 556 ; N uring ; B 68 -15 489 756 ;\nC -1 ; WX 333 ; N threesuperior ; B 5 270 325 703 ;\nC -1 ; WX 778 ; N Ograve ; B 39 -19 739 929 ;\nC -1 ; WX 667 ; N Agrave ; B 14 0 654 929 ;\nC -1 ; WX 667 ; N Abreve ; B 14 0 654 926 ;\nC -1 ; WX 584 ; N multiply ; B 39 0 545 506 ;\nC -1 ; WX 556 ; N uacute ; B 68 -15 489 734 ;\nC -1 ; WX 611 ; N Tcaron ; B 14 0 597 929 ;\nC -1 ; WX 476 ; N partialdiff ; B 13 -38 463 714 ;\nC -1 ; WX 500 ; N ydieresis ; B 11 -214 489 706 ;\nC -1 ; WX 722 ; N Nacute ; B 76 0 646 929 ;\nC -1 ; WX 278 ; N icircumflex ; B -6 0 285 734 ;\nC -1 ; WX 667 ; N Ecircumflex ; B 86 0 616 929 ;\nC -1 ; WX 556 ; N adieresis ; B 36 -15 530 706 ;\nC -1 ; WX 556 ; N edieresis ; B 40 -15 516 706 ;\nC -1 ; WX 500 ; N cacute ; B 30 -15 477 734 ;\nC -1 ; WX 556 ; N nacute ; B 65 0 491 734 ;\nC -1 ; WX 556 ; N umacron ; B 68 -15 489 684 ;\nC -1 ; WX 722 ; N Ncaron ; B 76 0 646 929 ;\nC -1 ; WX 278 ; N Iacute ; B 91 0 292 929 ;\nC -1 ; WX 584 ; N plusminus ; B 39 0 545 506 ;\nC -1 ; WX 260 ; N brokenbar ; B 94 -150 167 700 ;\nC -1 ; WX 737 ; N registered ; B -14 -19 752 737 ;\nC -1 ; WX 778 ; N Gbreve ; B 48 -19 704 926 ;\nC -1 ; WX 278 ; N Idotaccent ; B 91 0 188 901 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 586 706 ;\nC -1 ; WX 667 ; N Egrave ; B 86 0 616 929 ;\nC -1 ; WX 333 ; N racute ; B 77 0 332 734 ;\nC -1 ; WX 556 ; N omacron ; B 35 -14 521 684 ;\nC -1 ; WX 611 ; N Zacute ; B 23 0 588 929 ;\nC -1 ; WX 611 ; N Zcaron ; B 23 0 588 929 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 674 ;\nC -1 ; WX 722 ; N Eth ; B 0 0 674 718 ;\nC -1 ; WX 722 ; N Ccedilla ; B 44 -225 681 737 ;\nC -1 ; WX 222 ; N lcommaaccent ; B 67 -225 167 718 ;\nC -1 ; WX 317 ; N tcaron ; B 14 -7 329 808 ;\nC -1 ; WX 556 ; N eogonek ; B 40 -225 516 538 ;\nC -1 ; WX 722 ; N Uogonek ; B 79 -225 644 718 ;\nC -1 ; WX 667 ; N Aacute ; B 14 0 654 929 ;\nC -1 ; WX 667 ; N Adieresis ; B 14 0 654 901 ;\nC -1 ; WX 556 ; N egrave ; B 40 -15 516 734 ;\nC -1 ; WX 500 ; N zacute ; B 31 0 469 734 ;\nC -1 ; WX 222 ; N iogonek ; B -31 -225 183 718 ;\nC -1 ; WX 778 ; N Oacute ; B 39 -19 739 929 ;\nC -1 ; WX 556 ; N oacute ; B 35 -14 521 734 ;\nC -1 ; WX 556 ; N amacron ; B 36 -15 530 684 ;\nC -1 ; WX 500 ; N sacute ; B 32 -15 464 734 ;\nC -1 ; WX 278 ; N idieresis ; B 13 0 266 706 ;\nC -1 ; WX 778 ; N Ocircumflex ; B 39 -19 739 929 ;\nC -1 ; WX 722 ; N Ugrave ; B 79 -19 644 929 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 556 ; N thorn ; B 58 -207 517 718 ;\nC -1 ; WX 333 ; N twosuperior ; B 4 281 323 703 ;\nC -1 ; WX 778 ; N Odieresis ; B 39 -19 739 901 ;\nC -1 ; WX 556 ; N mu ; B 68 -207 489 523 ;\nC -1 ; WX 278 ; N igrave ; B -13 0 184 734 ;\nC -1 ; WX 556 ; N ohungarumlaut ; B 35 -14 521 734 ;\nC -1 ; WX 667 ; N Eogonek ; B 86 -220 633 718 ;\nC -1 ; WX 556 ; N dcroat ; B 35 -15 550 718 ;\nC -1 ; WX 834 ; N threequarters ; B 45 -19 810 703 ;\nC -1 ; WX 667 ; N Scedilla ; B 49 -225 620 737 ;\nC -1 ; WX 299 ; N lcaron ; B 67 0 311 718 ;\nC -1 ; WX 667 ; N Kcommaaccent ; B 76 -225 663 718 ;\nC -1 ; WX 556 ; N Lacute ; B 76 0 537 929 ;\nC -1 ; WX 1000 ; N trademark ; B 46 306 903 718 ;\nC -1 ; WX 556 ; N edotaccent ; B 40 -15 516 706 ;\nC -1 ; WX 278 ; N Igrave ; B -13 0 188 929 ;\nC -1 ; WX 278 ; N Imacron ; B -17 0 296 879 ;\nC -1 ; WX 556 ; N Lcaron ; B 76 0 537 718 ;\nC -1 ; WX 834 ; N onehalf ; B 43 -19 773 703 ;\nC -1 ; WX 549 ; N lessequal ; B 26 0 523 674 ;\nC -1 ; WX 556 ; N ocircumflex ; B 35 -14 521 734 ;\nC -1 ; WX 556 ; N ntilde ; B 65 0 491 722 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 79 -19 644 929 ;\nC -1 ; WX 667 ; N Eacute ; B 86 0 616 929 ;\nC -1 ; WX 556 ; N emacron ; B 40 -15 516 684 ;\nC -1 ; WX 556 ; N gbreve ; B 40 -220 499 731 ;\nC -1 ; WX 834 ; N onequarter ; B 73 -19 756 703 ;\nC -1 ; WX 667 ; N Scaron ; B 49 -19 620 929 ;\nC -1 ; WX 667 ; N Scommaaccent ; B 49 -225 620 737 ;\nC -1 ; WX 778 ; N Ohungarumlaut ; B 39 -19 739 929 ;\nC -1 ; WX 400 ; N degree ; B 54 411 346 703 ;\nC -1 ; WX 556 ; N ograve ; B 35 -14 521 734 ;\nC -1 ; WX 722 ; N Ccaron ; B 44 -19 681 929 ;\nC -1 ; WX 556 ; N ugrave ; B 68 -15 489 734 ;\nC -1 ; WX 453 ; N radical ; B -4 -80 458 762 ;\nC -1 ; WX 722 ; N Dcaron ; B 81 0 674 929 ;\nC -1 ; WX 333 ; N rcommaaccent ; B 77 -225 332 538 ;\nC -1 ; WX 722 ; N Ntilde ; B 76 0 646 917 ;\nC -1 ; WX 556 ; N otilde ; B 35 -14 521 722 ;\nC -1 ; WX 722 ; N Rcommaaccent ; B 88 -225 684 718 ;\nC -1 ; WX 556 ; N Lcommaaccent ; B 76 -225 537 718 ;\nC -1 ; WX 667 ; N Atilde ; B 14 0 654 917 ;\nC -1 ; WX 667 ; N Aogonek ; B 14 -225 654 718 ;\nC -1 ; WX 667 ; N Aring ; B 14 0 654 931 ;\nC -1 ; WX 778 ; N Otilde ; B 39 -19 739 917 ;\nC -1 ; WX 500 ; N zdotaccent ; B 31 0 469 706 ;\nC -1 ; WX 667 ; N Ecaron ; B 86 0 616 929 ;\nC -1 ; WX 278 ; N Iogonek ; B -3 -225 211 718 ;\nC -1 ; WX 500 ; N kcommaaccent ; B 67 -225 501 718 ;\nC -1 ; WX 584 ; N minus ; B 39 216 545 289 ;\nC -1 ; WX 278 ; N Icircumflex ; B -6 0 285 929 ;\nC -1 ; WX 556 ; N ncaron ; B 65 0 491 734 ;\nC -1 ; WX 278 ; N tcommaaccent ; B 14 -225 257 669 ;\nC -1 ; WX 584 ; N logicalnot ; B 39 108 545 390 ;\nC -1 ; WX 556 ; N odieresis ; B 35 -14 521 706 ;\nC -1 ; WX 556 ; N udieresis ; B 68 -15 489 706 ;\nC -1 ; WX 549 ; N notequal ; B 12 -35 537 551 ;\nC -1 ; WX 556 ; N gcommaaccent ; B 40 -220 499 822 ;\nC -1 ; WX 556 ; N eth ; B 35 -15 522 737 ;\nC -1 ; WX 500 ; N zcaron ; B 31 0 469 734 ;\nC -1 ; WX 556 ; N ncommaaccent ; B 65 -225 491 538 ;\nC -1 ; WX 333 ; N onesuperior ; B 43 281 222 703 ;\nC -1 ; WX 278 ; N imacron ; B 5 0 272 684 ;\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2705\nKPX A C -30\nKPX A Cacute -30\nKPX A Ccaron -30\nKPX A Ccedilla -30\nKPX A G -30\nKPX A Gbreve -30\nKPX A Gcommaaccent -30\nKPX A O -30\nKPX A Oacute -30\nKPX A Ocircumflex -30\nKPX A Odieresis -30\nKPX A Ograve -30\nKPX A Ohungarumlaut -30\nKPX A Omacron -30\nKPX A Oslash -30\nKPX A Otilde -30\nKPX A Q -30\nKPX A T -120\nKPX A Tcaron -120\nKPX A Tcommaaccent -120\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -70\nKPX A W -50\nKPX A Y -100\nKPX A Yacute -100\nKPX A Ydieresis -100\nKPX A u -30\nKPX A uacute -30\nKPX A ucircumflex -30\nKPX A udieresis -30\nKPX A ugrave -30\nKPX A uhungarumlaut -30\nKPX A umacron -30\nKPX A uogonek -30\nKPX A uring -30\nKPX A v -40\nKPX A w -40\nKPX A y -40\nKPX A yacute -40\nKPX A ydieresis -40\nKPX Aacute C -30\nKPX Aacute Cacute -30\nKPX Aacute Ccaron -30\nKPX Aacute Ccedilla -30\nKPX Aacute G -30\nKPX Aacute Gbreve -30\nKPX Aacute Gcommaaccent -30\nKPX Aacute O -30\nKPX Aacute Oacute -30\nKPX Aacute Ocircumflex -30\nKPX Aacute Odieresis -30\nKPX Aacute Ograve -30\nKPX Aacute Ohungarumlaut -30\nKPX Aacute Omacron -30\nKPX Aacute Oslash -30\nKPX Aacute Otilde -30\nKPX Aacute Q -30\nKPX Aacute T -120\nKPX Aacute Tcaron -120\nKPX Aacute Tcommaaccent -120\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -70\nKPX Aacute W -50\nKPX Aacute Y -100\nKPX Aacute Yacute -100\nKPX Aacute Ydieresis -100\nKPX Aacute u -30\nKPX Aacute uacute -30\nKPX Aacute ucircumflex -30\nKPX Aacute udieresis -30\nKPX Aacute ugrave -30\nKPX Aacute uhungarumlaut -30\nKPX Aacute umacron -30\nKPX Aacute uogonek -30\nKPX Aacute uring -30\nKPX Aacute v -40\nKPX Aacute w -40\nKPX Aacute y -40\nKPX Aacute yacute -40\nKPX Aacute ydieresis -40\nKPX Abreve C -30\nKPX Abreve Cacute -30\nKPX Abreve Ccaron -30\nKPX Abreve Ccedilla -30\nKPX Abreve G -30\nKPX Abreve Gbreve -30\nKPX Abreve Gcommaaccent -30\nKPX Abreve O -30\nKPX Abreve Oacute -30\nKPX Abreve Ocircumflex -30\nKPX Abreve Odieresis -30\nKPX Abreve Ograve -30\nKPX Abreve Ohungarumlaut -30\nKPX Abreve Omacron -30\nKPX Abreve Oslash -30\nKPX Abreve Otilde -30\nKPX Abreve Q -30\nKPX Abreve T -120\nKPX Abreve Tcaron -120\nKPX Abreve Tcommaaccent -120\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -70\nKPX Abreve W -50\nKPX Abreve Y -100\nKPX Abreve Yacute -100\nKPX Abreve Ydieresis -100\nKPX Abreve u -30\nKPX Abreve uacute -30\nKPX Abreve ucircumflex -30\nKPX Abreve udieresis -30\nKPX Abreve ugrave -30\nKPX Abreve uhungarumlaut -30\nKPX Abreve umacron -30\nKPX Abreve uogonek -30\nKPX Abreve uring -30\nKPX Abreve v -40\nKPX Abreve w -40\nKPX Abreve y -40\nKPX Abreve yacute -40\nKPX Abreve ydieresis -40\nKPX Acircumflex C -30\nKPX Acircumflex Cacute -30\nKPX Acircumflex Ccaron -30\nKPX Acircumflex Ccedilla -30\nKPX Acircumflex G -30\nKPX Acircumflex Gbreve -30\nKPX Acircumflex Gcommaaccent -30\nKPX Acircumflex O -30\nKPX Acircumflex Oacute -30\nKPX Acircumflex Ocircumflex -30\nKPX Acircumflex Odieresis -30\nKPX Acircumflex Ograve -30\nKPX Acircumflex Ohungarumlaut -30\nKPX Acircumflex Omacron -30\nKPX Acircumflex Oslash -30\nKPX Acircumflex Otilde -30\nKPX Acircumflex Q -30\nKPX Acircumflex T -120\nKPX Acircumflex Tcaron -120\nKPX Acircumflex Tcommaaccent -120\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -70\nKPX Acircumflex W -50\nKPX Acircumflex Y -100\nKPX Acircumflex Yacute -100\nKPX Acircumflex Ydieresis -100\nKPX Acircumflex u -30\nKPX Acircumflex uacute -30\nKPX Acircumflex ucircumflex -30\nKPX Acircumflex udieresis -30\nKPX Acircumflex ugrave -30\nKPX Acircumflex uhungarumlaut -30\nKPX Acircumflex umacron -30\nKPX Acircumflex uogonek -30\nKPX Acircumflex uring -30\nKPX Acircumflex v -40\nKPX Acircumflex w -40\nKPX Acircumflex y -40\nKPX Acircumflex yacute -40\nKPX Acircumflex ydieresis -40\nKPX Adieresis C -30\nKPX Adieresis Cacute -30\nKPX Adieresis Ccaron -30\nKPX Adieresis Ccedilla -30\nKPX Adieresis G -30\nKPX Adieresis Gbreve -30\nKPX Adieresis Gcommaaccent -30\nKPX Adieresis O -30\nKPX Adieresis Oacute -30\nKPX Adieresis Ocircumflex -30\nKPX Adieresis Odieresis -30\nKPX Adieresis Ograve -30\nKPX Adieresis Ohungarumlaut -30\nKPX Adieresis Omacron -30\nKPX Adieresis Oslash -30\nKPX Adieresis Otilde -30\nKPX Adieresis Q -30\nKPX Adieresis T -120\nKPX Adieresis Tcaron -120\nKPX Adieresis Tcommaaccent -120\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -70\nKPX Adieresis W -50\nKPX Adieresis Y -100\nKPX Adieresis Yacute -100\nKPX Adieresis Ydieresis -100\nKPX Adieresis u -30\nKPX Adieresis uacute -30\nKPX Adieresis ucircumflex -30\nKPX Adieresis udieresis -30\nKPX Adieresis ugrave -30\nKPX Adieresis uhungarumlaut -30\nKPX Adieresis umacron -30\nKPX Adieresis uogonek -30\nKPX Adieresis uring -30\nKPX Adieresis v -40\nKPX Adieresis w -40\nKPX Adieresis y -40\nKPX Adieresis yacute -40\nKPX Adieresis ydieresis -40\nKPX Agrave C -30\nKPX Agrave Cacute -30\nKPX Agrave Ccaron -30\nKPX Agrave Ccedilla -30\nKPX Agrave G -30\nKPX Agrave Gbreve -30\nKPX Agrave Gcommaaccent -30\nKPX Agrave O -30\nKPX Agrave Oacute -30\nKPX Agrave Ocircumflex -30\nKPX Agrave Odieresis -30\nKPX Agrave Ograve -30\nKPX Agrave Ohungarumlaut -30\nKPX Agrave Omacron -30\nKPX Agrave Oslash -30\nKPX Agrave Otilde -30\nKPX Agrave Q -30\nKPX Agrave T -120\nKPX Agrave Tcaron -120\nKPX Agrave Tcommaaccent -120\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -70\nKPX Agrave W -50\nKPX Agrave Y -100\nKPX Agrave Yacute -100\nKPX Agrave Ydieresis -100\nKPX Agrave u -30\nKPX Agrave uacute -30\nKPX Agrave ucircumflex -30\nKPX Agrave udieresis -30\nKPX Agrave ugrave -30\nKPX Agrave uhungarumlaut -30\nKPX Agrave umacron -30\nKPX Agrave uogonek -30\nKPX Agrave uring -30\nKPX Agrave v -40\nKPX Agrave w -40\nKPX Agrave y -40\nKPX Agrave yacute -40\nKPX Agrave ydieresis -40\nKPX Amacron C -30\nKPX Amacron Cacute -30\nKPX Amacron Ccaron -30\nKPX Amacron Ccedilla -30\nKPX Amacron G -30\nKPX Amacron Gbreve -30\nKPX Amacron Gcommaaccent -30\nKPX Amacron O -30\nKPX Amacron Oacute -30\nKPX Amacron Ocircumflex -30\nKPX Amacron Odieresis -30\nKPX Amacron Ograve -30\nKPX Amacron Ohungarumlaut -30\nKPX Amacron Omacron -30\nKPX Amacron Oslash -30\nKPX Amacron Otilde -30\nKPX Amacron Q -30\nKPX Amacron T -120\nKPX Amacron Tcaron -120\nKPX Amacron Tcommaaccent -120\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -70\nKPX Amacron W -50\nKPX Amacron Y -100\nKPX Amacron Yacute -100\nKPX Amacron Ydieresis -100\nKPX Amacron u -30\nKPX Amacron uacute -30\nKPX Amacron ucircumflex -30\nKPX Amacron udieresis -30\nKPX Amacron ugrave -30\nKPX Amacron uhungarumlaut -30\nKPX Amacron umacron -30\nKPX Amacron uogonek -30\nKPX Amacron uring -30\nKPX Amacron v -40\nKPX Amacron w -40\nKPX Amacron y -40\nKPX Amacron yacute -40\nKPX Amacron ydieresis -40\nKPX Aogonek C -30\nKPX Aogonek Cacute -30\nKPX Aogonek Ccaron -30\nKPX Aogonek Ccedilla -30\nKPX Aogonek G -30\nKPX Aogonek Gbreve -30\nKPX Aogonek Gcommaaccent -30\nKPX Aogonek O -30\nKPX Aogonek Oacute -30\nKPX Aogonek Ocircumflex -30\nKPX Aogonek Odieresis -30\nKPX Aogonek Ograve -30\nKPX Aogonek Ohungarumlaut -30\nKPX Aogonek Omacron -30\nKPX Aogonek Oslash -30\nKPX Aogonek Otilde -30\nKPX Aogonek Q -30\nKPX Aogonek T -120\nKPX Aogonek Tcaron -120\nKPX Aogonek Tcommaaccent -120\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -70\nKPX Aogonek W -50\nKPX Aogonek Y -100\nKPX Aogonek Yacute -100\nKPX Aogonek Ydieresis -100\nKPX Aogonek u -30\nKPX Aogonek uacute -30\nKPX Aogonek ucircumflex -30\nKPX Aogonek udieresis -30\nKPX Aogonek ugrave -30\nKPX Aogonek uhungarumlaut -30\nKPX Aogonek umacron -30\nKPX Aogonek uogonek -30\nKPX Aogonek uring -30\nKPX Aogonek v -40\nKPX Aogonek w -40\nKPX Aogonek y -40\nKPX Aogonek yacute -40\nKPX Aogonek ydieresis -40\nKPX Aring C -30\nKPX Aring Cacute -30\nKPX Aring Ccaron -30\nKPX Aring Ccedilla -30\nKPX Aring G -30\nKPX Aring Gbreve -30\nKPX Aring Gcommaaccent -30\nKPX Aring O -30\nKPX Aring Oacute -30\nKPX Aring Ocircumflex -30\nKPX Aring Odieresis -30\nKPX Aring Ograve -30\nKPX Aring Ohungarumlaut -30\nKPX Aring Omacron -30\nKPX Aring Oslash -30\nKPX Aring Otilde -30\nKPX Aring Q -30\nKPX Aring T -120\nKPX Aring Tcaron -120\nKPX Aring Tcommaaccent -120\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -70\nKPX Aring W -50\nKPX Aring Y -100\nKPX Aring Yacute -100\nKPX Aring Ydieresis -100\nKPX Aring u -30\nKPX Aring uacute -30\nKPX Aring ucircumflex -30\nKPX Aring udieresis -30\nKPX Aring ugrave -30\nKPX Aring uhungarumlaut -30\nKPX Aring umacron -30\nKPX Aring uogonek -30\nKPX Aring uring -30\nKPX Aring v -40\nKPX Aring w -40\nKPX Aring y -40\nKPX Aring yacute -40\nKPX Aring ydieresis -40\nKPX Atilde C -30\nKPX Atilde Cacute -30\nKPX Atilde Ccaron -30\nKPX Atilde Ccedilla -30\nKPX Atilde G -30\nKPX Atilde Gbreve -30\nKPX Atilde Gcommaaccent -30\nKPX Atilde O -30\nKPX Atilde Oacute -30\nKPX Atilde Ocircumflex -30\nKPX Atilde Odieresis -30\nKPX Atilde Ograve -30\nKPX Atilde Ohungarumlaut -30\nKPX Atilde Omacron -30\nKPX Atilde Oslash -30\nKPX Atilde Otilde -30\nKPX Atilde Q -30\nKPX Atilde T -120\nKPX Atilde Tcaron -120\nKPX Atilde Tcommaaccent -120\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -70\nKPX Atilde W -50\nKPX Atilde Y -100\nKPX Atilde Yacute -100\nKPX Atilde Ydieresis -100\nKPX Atilde u -30\nKPX Atilde uacute -30\nKPX Atilde ucircumflex -30\nKPX Atilde udieresis -30\nKPX Atilde ugrave -30\nKPX Atilde uhungarumlaut -30\nKPX Atilde umacron -30\nKPX Atilde uogonek -30\nKPX Atilde uring -30\nKPX Atilde v -40\nKPX Atilde w -40\nKPX Atilde y -40\nKPX Atilde yacute -40\nKPX Atilde ydieresis -40\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX B comma -20\nKPX B period -20\nKPX C comma -30\nKPX C period -30\nKPX Cacute comma -30\nKPX Cacute period -30\nKPX Ccaron comma -30\nKPX Ccaron period -30\nKPX Ccedilla comma -30\nKPX Ccedilla period -30\nKPX D A -40\nKPX D Aacute -40\nKPX D Abreve -40\nKPX D Acircumflex -40\nKPX D Adieresis -40\nKPX D Agrave -40\nKPX D Amacron -40\nKPX D Aogonek -40\nKPX D Aring -40\nKPX D Atilde -40\nKPX D V -70\nKPX D W -40\nKPX D Y -90\nKPX D Yacute -90\nKPX D Ydieresis -90\nKPX D comma -70\nKPX D period -70\nKPX Dcaron A -40\nKPX Dcaron Aacute -40\nKPX Dcaron Abreve -40\nKPX Dcaron Acircumflex -40\nKPX Dcaron Adieresis -40\nKPX Dcaron Agrave -40\nKPX Dcaron Amacron -40\nKPX Dcaron Aogonek -40\nKPX Dcaron Aring -40\nKPX Dcaron Atilde -40\nKPX Dcaron V -70\nKPX Dcaron W -40\nKPX Dcaron Y -90\nKPX Dcaron Yacute -90\nKPX Dcaron Ydieresis -90\nKPX Dcaron comma -70\nKPX Dcaron period -70\nKPX Dcroat A -40\nKPX Dcroat Aacute -40\nKPX Dcroat Abreve -40\nKPX Dcroat Acircumflex -40\nKPX Dcroat Adieresis -40\nKPX Dcroat Agrave -40\nKPX Dcroat Amacron -40\nKPX Dcroat Aogonek -40\nKPX Dcroat Aring -40\nKPX Dcroat Atilde -40\nKPX Dcroat V -70\nKPX Dcroat W -40\nKPX Dcroat Y -90\nKPX Dcroat Yacute -90\nKPX Dcroat Ydieresis -90\nKPX Dcroat comma -70\nKPX Dcroat period -70\nKPX F A -80\nKPX F Aacute -80\nKPX F Abreve -80\nKPX F Acircumflex -80\nKPX F Adieresis -80\nKPX F Agrave -80\nKPX F Amacron -80\nKPX F Aogonek -80\nKPX F Aring -80\nKPX F Atilde -80\nKPX F a -50\nKPX F aacute -50\nKPX F abreve -50\nKPX F acircumflex -50\nKPX F adieresis -50\nKPX F agrave -50\nKPX F amacron -50\nKPX F aogonek -50\nKPX F aring -50\nKPX F atilde -50\nKPX F comma -150\nKPX F e -30\nKPX F eacute -30\nKPX F ecaron -30\nKPX F ecircumflex -30\nKPX F edieresis -30\nKPX F edotaccent -30\nKPX F egrave -30\nKPX F emacron -30\nKPX F eogonek -30\nKPX F o -30\nKPX F oacute -30\nKPX F ocircumflex -30\nKPX F odieresis -30\nKPX F ograve -30\nKPX F ohungarumlaut -30\nKPX F omacron -30\nKPX F oslash -30\nKPX F otilde -30\nKPX F period -150\nKPX F r -45\nKPX F racute -45\nKPX F rcaron -45\nKPX F rcommaaccent -45\nKPX J A -20\nKPX J Aacute -20\nKPX J Abreve -20\nKPX J Acircumflex -20\nKPX J Adieresis -20\nKPX J Agrave -20\nKPX J Amacron -20\nKPX J Aogonek -20\nKPX J Aring -20\nKPX J Atilde -20\nKPX J a -20\nKPX J aacute -20\nKPX J abreve -20\nKPX J acircumflex -20\nKPX J adieresis -20\nKPX J agrave -20\nKPX J amacron -20\nKPX J aogonek -20\nKPX J aring -20\nKPX J atilde -20\nKPX J comma -30\nKPX J period -30\nKPX J u -20\nKPX J uacute -20\nKPX J ucircumflex -20\nKPX J udieresis -20\nKPX J ugrave -20\nKPX J uhungarumlaut -20\nKPX J umacron -20\nKPX J uogonek -20\nKPX J uring -20\nKPX K O -50\nKPX K Oacute -50\nKPX K Ocircumflex -50\nKPX K Odieresis -50\nKPX K Ograve -50\nKPX K Ohungarumlaut -50\nKPX K Omacron -50\nKPX K Oslash -50\nKPX K Otilde -50\nKPX K e -40\nKPX K eacute -40\nKPX K ecaron -40\nKPX K ecircumflex -40\nKPX K edieresis -40\nKPX K edotaccent -40\nKPX K egrave -40\nKPX K emacron -40\nKPX K eogonek -40\nKPX K o -40\nKPX K oacute -40\nKPX K ocircumflex -40\nKPX K odieresis -40\nKPX K ograve -40\nKPX K ohungarumlaut -40\nKPX K omacron -40\nKPX K oslash -40\nKPX K otilde -40\nKPX K u -30\nKPX K uacute -30\nKPX K ucircumflex -30\nKPX K udieresis -30\nKPX K ugrave -30\nKPX K uhungarumlaut -30\nKPX K umacron -30\nKPX K uogonek -30\nKPX K uring -30\nKPX K y -50\nKPX K yacute -50\nKPX K ydieresis -50\nKPX Kcommaaccent O -50\nKPX Kcommaaccent Oacute -50\nKPX Kcommaaccent Ocircumflex -50\nKPX Kcommaaccent Odieresis -50\nKPX Kcommaaccent Ograve -50\nKPX Kcommaaccent Ohungarumlaut -50\nKPX Kcommaaccent Omacron -50\nKPX Kcommaaccent Oslash -50\nKPX Kcommaaccent Otilde -50\nKPX Kcommaaccent e -40\nKPX Kcommaaccent eacute -40\nKPX Kcommaaccent ecaron -40\nKPX Kcommaaccent ecircumflex -40\nKPX Kcommaaccent edieresis -40\nKPX Kcommaaccent edotaccent -40\nKPX Kcommaaccent egrave -40\nKPX Kcommaaccent emacron -40\nKPX Kcommaaccent eogonek -40\nKPX Kcommaaccent o -40\nKPX Kcommaaccent oacute -40\nKPX Kcommaaccent ocircumflex -40\nKPX Kcommaaccent odieresis -40\nKPX Kcommaaccent ograve -40\nKPX Kcommaaccent ohungarumlaut -40\nKPX Kcommaaccent omacron -40\nKPX Kcommaaccent oslash -40\nKPX Kcommaaccent otilde -40\nKPX Kcommaaccent u -30\nKPX Kcommaaccent uacute -30\nKPX Kcommaaccent ucircumflex -30\nKPX Kcommaaccent udieresis -30\nKPX Kcommaaccent ugrave -30\nKPX Kcommaaccent uhungarumlaut -30\nKPX Kcommaaccent umacron -30\nKPX Kcommaaccent uogonek -30\nKPX Kcommaaccent uring -30\nKPX Kcommaaccent y -50\nKPX Kcommaaccent yacute -50\nKPX Kcommaaccent ydieresis -50\nKPX L T -110\nKPX L Tcaron -110\nKPX L Tcommaaccent -110\nKPX L V -110\nKPX L W -70\nKPX L Y -140\nKPX L Yacute -140\nKPX L Ydieresis -140\nKPX L quotedblright -140\nKPX L quoteright -160\nKPX L y -30\nKPX L yacute -30\nKPX L ydieresis -30\nKPX Lacute T -110\nKPX Lacute Tcaron -110\nKPX Lacute Tcommaaccent -110\nKPX Lacute V -110\nKPX Lacute W -70\nKPX Lacute Y -140\nKPX Lacute Yacute -140\nKPX Lacute Ydieresis -140\nKPX Lacute quotedblright -140\nKPX Lacute quoteright -160\nKPX Lacute y -30\nKPX Lacute yacute -30\nKPX Lacute ydieresis -30\nKPX Lcaron T -110\nKPX Lcaron Tcaron -110\nKPX Lcaron Tcommaaccent -110\nKPX Lcaron V -110\nKPX Lcaron W -70\nKPX Lcaron Y -140\nKPX Lcaron Yacute -140\nKPX Lcaron Ydieresis -140\nKPX Lcaron quotedblright -140\nKPX Lcaron quoteright -160\nKPX Lcaron y -30\nKPX Lcaron yacute -30\nKPX Lcaron ydieresis -30\nKPX Lcommaaccent T -110\nKPX Lcommaaccent Tcaron -110\nKPX Lcommaaccent Tcommaaccent -110\nKPX Lcommaaccent V -110\nKPX Lcommaaccent W -70\nKPX Lcommaaccent Y -140\nKPX Lcommaaccent Yacute -140\nKPX Lcommaaccent Ydieresis -140\nKPX Lcommaaccent quotedblright -140\nKPX Lcommaaccent quoteright -160\nKPX Lcommaaccent y -30\nKPX Lcommaaccent yacute -30\nKPX Lcommaaccent ydieresis -30\nKPX Lslash T -110\nKPX Lslash Tcaron -110\nKPX Lslash Tcommaaccent -110\nKPX Lslash V -110\nKPX Lslash W -70\nKPX Lslash Y -140\nKPX Lslash Yacute -140\nKPX Lslash Ydieresis -140\nKPX Lslash quotedblright -140\nKPX Lslash quoteright -160\nKPX Lslash y -30\nKPX Lslash yacute -30\nKPX Lslash ydieresis -30\nKPX O A -20\nKPX O Aacute -20\nKPX O Abreve -20\nKPX O Acircumflex -20\nKPX O Adieresis -20\nKPX O Agrave -20\nKPX O Amacron -20\nKPX O Aogonek -20\nKPX O Aring -20\nKPX O Atilde -20\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -30\nKPX O X -60\nKPX O Y -70\nKPX O Yacute -70\nKPX O Ydieresis -70\nKPX O comma -40\nKPX O period -40\nKPX Oacute A -20\nKPX Oacute Aacute -20\nKPX Oacute Abreve -20\nKPX Oacute Acircumflex -20\nKPX Oacute Adieresis -20\nKPX Oacute Agrave -20\nKPX Oacute Amacron -20\nKPX Oacute Aogonek -20\nKPX Oacute Aring -20\nKPX Oacute Atilde -20\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -30\nKPX Oacute X -60\nKPX Oacute Y -70\nKPX Oacute Yacute -70\nKPX Oacute Ydieresis -70\nKPX Oacute comma -40\nKPX Oacute period -40\nKPX Ocircumflex A -20\nKPX Ocircumflex Aacute -20\nKPX Ocircumflex Abreve -20\nKPX Ocircumflex Acircumflex -20\nKPX Ocircumflex Adieresis -20\nKPX Ocircumflex Agrave -20\nKPX Ocircumflex Amacron -20\nKPX Ocircumflex Aogonek -20\nKPX Ocircumflex Aring -20\nKPX Ocircumflex Atilde -20\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -30\nKPX Ocircumflex X -60\nKPX Ocircumflex Y -70\nKPX Ocircumflex Yacute -70\nKPX Ocircumflex Ydieresis -70\nKPX Ocircumflex comma -40\nKPX Ocircumflex period -40\nKPX Odieresis A -20\nKPX Odieresis Aacute -20\nKPX Odieresis Abreve -20\nKPX Odieresis Acircumflex -20\nKPX Odieresis Adieresis -20\nKPX Odieresis Agrave -20\nKPX Odieresis Amacron -20\nKPX Odieresis Aogonek -20\nKPX Odieresis Aring -20\nKPX Odieresis Atilde -20\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -30\nKPX Odieresis X -60\nKPX Odieresis Y -70\nKPX Odieresis Yacute -70\nKPX Odieresis Ydieresis -70\nKPX Odieresis comma -40\nKPX Odieresis period -40\nKPX Ograve A -20\nKPX Ograve Aacute -20\nKPX Ograve Abreve -20\nKPX Ograve Acircumflex -20\nKPX Ograve Adieresis -20\nKPX Ograve Agrave -20\nKPX Ograve Amacron -20\nKPX Ograve Aogonek -20\nKPX Ograve Aring -20\nKPX Ograve Atilde -20\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -30\nKPX Ograve X -60\nKPX Ograve Y -70\nKPX Ograve Yacute -70\nKPX Ograve Ydieresis -70\nKPX Ograve comma -40\nKPX Ograve period -40\nKPX Ohungarumlaut A -20\nKPX Ohungarumlaut Aacute -20\nKPX Ohungarumlaut Abreve -20\nKPX Ohungarumlaut Acircumflex -20\nKPX Ohungarumlaut Adieresis -20\nKPX Ohungarumlaut Agrave -20\nKPX Ohungarumlaut Amacron -20\nKPX Ohungarumlaut Aogonek -20\nKPX Ohungarumlaut Aring -20\nKPX Ohungarumlaut Atilde -20\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -30\nKPX Ohungarumlaut X -60\nKPX Ohungarumlaut Y -70\nKPX Ohungarumlaut Yacute -70\nKPX Ohungarumlaut Ydieresis -70\nKPX Ohungarumlaut comma -40\nKPX Ohungarumlaut period -40\nKPX Omacron A -20\nKPX Omacron Aacute -20\nKPX Omacron Abreve -20\nKPX Omacron Acircumflex -20\nKPX Omacron Adieresis -20\nKPX Omacron Agrave -20\nKPX Omacron Amacron -20\nKPX Omacron Aogonek -20\nKPX Omacron Aring -20\nKPX Omacron Atilde -20\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -30\nKPX Omacron X -60\nKPX Omacron Y -70\nKPX Omacron Yacute -70\nKPX Omacron Ydieresis -70\nKPX Omacron comma -40\nKPX Omacron period -40\nKPX Oslash A -20\nKPX Oslash Aacute -20\nKPX Oslash Abreve -20\nKPX Oslash Acircumflex -20\nKPX Oslash Adieresis -20\nKPX Oslash Agrave -20\nKPX Oslash Amacron -20\nKPX Oslash Aogonek -20\nKPX Oslash Aring -20\nKPX Oslash Atilde -20\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -30\nKPX Oslash X -60\nKPX Oslash Y -70\nKPX Oslash Yacute -70\nKPX Oslash Ydieresis -70\nKPX Oslash comma -40\nKPX Oslash period -40\nKPX Otilde A -20\nKPX Otilde Aacute -20\nKPX Otilde Abreve -20\nKPX Otilde Acircumflex -20\nKPX Otilde Adieresis -20\nKPX Otilde Agrave -20\nKPX Otilde Amacron -20\nKPX Otilde Aogonek -20\nKPX Otilde Aring -20\nKPX Otilde Atilde -20\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -30\nKPX Otilde X -60\nKPX Otilde Y -70\nKPX Otilde Yacute -70\nKPX Otilde Ydieresis -70\nKPX Otilde comma -40\nKPX Otilde period -40\nKPX P A -120\nKPX P Aacute -120\nKPX P Abreve -120\nKPX P Acircumflex -120\nKPX P Adieresis -120\nKPX P Agrave -120\nKPX P Amacron -120\nKPX P Aogonek -120\nKPX P Aring -120\nKPX P Atilde -120\nKPX P a -40\nKPX P aacute -40\nKPX P abreve -40\nKPX P acircumflex -40\nKPX P adieresis -40\nKPX P agrave -40\nKPX P amacron -40\nKPX P aogonek -40\nKPX P aring -40\nKPX P atilde -40\nKPX P comma -180\nKPX P e -50\nKPX P eacute -50\nKPX P ecaron -50\nKPX P ecircumflex -50\nKPX P edieresis -50\nKPX P edotaccent -50\nKPX P egrave -50\nKPX P emacron -50\nKPX P eogonek -50\nKPX P o -50\nKPX P oacute -50\nKPX P ocircumflex -50\nKPX P odieresis -50\nKPX P ograve -50\nKPX P ohungarumlaut -50\nKPX P omacron -50\nKPX P oslash -50\nKPX P otilde -50\nKPX P period -180\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX R O -20\nKPX R Oacute -20\nKPX R Ocircumflex -20\nKPX R Odieresis -20\nKPX R Ograve -20\nKPX R Ohungarumlaut -20\nKPX R Omacron -20\nKPX R Oslash -20\nKPX R Otilde -20\nKPX R T -30\nKPX R Tcaron -30\nKPX R Tcommaaccent -30\nKPX R U -40\nKPX R Uacute -40\nKPX R Ucircumflex -40\nKPX R Udieresis -40\nKPX R Ugrave -40\nKPX R Uhungarumlaut -40\nKPX R Umacron -40\nKPX R Uogonek -40\nKPX R Uring -40\nKPX R V -50\nKPX R W -30\nKPX R Y -50\nKPX R Yacute -50\nKPX R Ydieresis -50\nKPX Racute O -20\nKPX Racute Oacute -20\nKPX Racute Ocircumflex -20\nKPX Racute Odieresis -20\nKPX Racute Ograve -20\nKPX Racute Ohungarumlaut -20\nKPX Racute Omacron -20\nKPX Racute Oslash -20\nKPX Racute Otilde -20\nKPX Racute T -30\nKPX Racute Tcaron -30\nKPX Racute Tcommaaccent -30\nKPX Racute U -40\nKPX Racute Uacute -40\nKPX Racute Ucircumflex -40\nKPX Racute Udieresis -40\nKPX Racute Ugrave -40\nKPX Racute Uhungarumlaut -40\nKPX Racute Umacron -40\nKPX Racute Uogonek -40\nKPX Racute Uring -40\nKPX Racute V -50\nKPX Racute W -30\nKPX Racute Y -50\nKPX Racute Yacute -50\nKPX Racute Ydieresis -50\nKPX Rcaron O -20\nKPX Rcaron Oacute -20\nKPX Rcaron Ocircumflex -20\nKPX Rcaron Odieresis -20\nKPX Rcaron Ograve -20\nKPX Rcaron Ohungarumlaut -20\nKPX Rcaron Omacron -20\nKPX Rcaron Oslash -20\nKPX Rcaron Otilde -20\nKPX Rcaron T -30\nKPX Rcaron Tcaron -30\nKPX Rcaron Tcommaaccent -30\nKPX Rcaron U -40\nKPX Rcaron Uacute -40\nKPX Rcaron Ucircumflex -40\nKPX Rcaron Udieresis -40\nKPX Rcaron Ugrave -40\nKPX Rcaron Uhungarumlaut -40\nKPX Rcaron Umacron -40\nKPX Rcaron Uogonek -40\nKPX Rcaron Uring -40\nKPX Rcaron V -50\nKPX Rcaron W -30\nKPX Rcaron Y -50\nKPX Rcaron Yacute -50\nKPX Rcaron Ydieresis -50\nKPX Rcommaaccent O -20\nKPX Rcommaaccent Oacute -20\nKPX Rcommaaccent Ocircumflex -20\nKPX Rcommaaccent Odieresis -20\nKPX Rcommaaccent Ograve -20\nKPX Rcommaaccent Ohungarumlaut -20\nKPX Rcommaaccent Omacron -20\nKPX Rcommaaccent Oslash -20\nKPX Rcommaaccent Otilde -20\nKPX Rcommaaccent T -30\nKPX Rcommaaccent Tcaron -30\nKPX Rcommaaccent Tcommaaccent -30\nKPX Rcommaaccent U -40\nKPX Rcommaaccent Uacute -40\nKPX Rcommaaccent Ucircumflex -40\nKPX Rcommaaccent Udieresis -40\nKPX Rcommaaccent Ugrave -40\nKPX Rcommaaccent Uhungarumlaut -40\nKPX Rcommaaccent Umacron -40\nKPX Rcommaaccent Uogonek -40\nKPX Rcommaaccent Uring -40\nKPX Rcommaaccent V -50\nKPX Rcommaaccent W -30\nKPX Rcommaaccent Y -50\nKPX Rcommaaccent Yacute -50\nKPX Rcommaaccent Ydieresis -50\nKPX S comma -20\nKPX S period -20\nKPX Sacute comma -20\nKPX Sacute period -20\nKPX Scaron comma -20\nKPX Scaron period -20\nKPX Scedilla comma -20\nKPX Scedilla period -20\nKPX Scommaaccent comma -20\nKPX Scommaaccent period -20\nKPX T A -120\nKPX T Aacute -120\nKPX T Abreve -120\nKPX T Acircumflex -120\nKPX T Adieresis -120\nKPX T Agrave -120\nKPX T Amacron -120\nKPX T Aogonek -120\nKPX T Aring -120\nKPX T Atilde -120\nKPX T O -40\nKPX T Oacute -40\nKPX T Ocircumflex -40\nKPX T Odieresis -40\nKPX T Ograve -40\nKPX T Ohungarumlaut -40\nKPX T Omacron -40\nKPX T Oslash -40\nKPX T Otilde -40\nKPX T a -120\nKPX T aacute -120\nKPX T abreve -60\nKPX T acircumflex -120\nKPX T adieresis -120\nKPX T agrave -120\nKPX T amacron -60\nKPX T aogonek -120\nKPX T aring -120\nKPX T atilde -60\nKPX T colon -20\nKPX T comma -120\nKPX T e -120\nKPX T eacute -120\nKPX T ecaron -120\nKPX T ecircumflex -120\nKPX T edieresis -120\nKPX T edotaccent -120\nKPX T egrave -60\nKPX T emacron -60\nKPX T eogonek -120\nKPX T hyphen -140\nKPX T o -120\nKPX T oacute -120\nKPX T ocircumflex -120\nKPX T odieresis -120\nKPX T ograve -120\nKPX T ohungarumlaut -120\nKPX T omacron -60\nKPX T oslash -120\nKPX T otilde -60\nKPX T period -120\nKPX T r -120\nKPX T racute -120\nKPX T rcaron -120\nKPX T rcommaaccent -120\nKPX T semicolon -20\nKPX T u -120\nKPX T uacute -120\nKPX T ucircumflex -120\nKPX T udieresis -120\nKPX T ugrave -120\nKPX T uhungarumlaut -120\nKPX T umacron -60\nKPX T uogonek -120\nKPX T uring -120\nKPX T w -120\nKPX T y -120\nKPX T yacute -120\nKPX T ydieresis -60\nKPX Tcaron A -120\nKPX Tcaron Aacute -120\nKPX Tcaron Abreve -120\nKPX Tcaron Acircumflex -120\nKPX Tcaron Adieresis -120\nKPX Tcaron Agrave -120\nKPX Tcaron Amacron -120\nKPX Tcaron Aogonek -120\nKPX Tcaron Aring -120\nKPX Tcaron Atilde -120\nKPX Tcaron O -40\nKPX Tcaron Oacute -40\nKPX Tcaron Ocircumflex -40\nKPX Tcaron Odieresis -40\nKPX Tcaron Ograve -40\nKPX Tcaron Ohungarumlaut -40\nKPX Tcaron Omacron -40\nKPX Tcaron Oslash -40\nKPX Tcaron Otilde -40\nKPX Tcaron a -120\nKPX Tcaron aacute -120\nKPX Tcaron abreve -60\nKPX Tcaron acircumflex -120\nKPX Tcaron adieresis -120\nKPX Tcaron agrave -120\nKPX Tcaron amacron -60\nKPX Tcaron aogonek -120\nKPX Tcaron aring -120\nKPX Tcaron atilde -60\nKPX Tcaron colon -20\nKPX Tcaron comma -120\nKPX Tcaron e -120\nKPX Tcaron eacute -120\nKPX Tcaron ecaron -120\nKPX Tcaron ecircumflex -120\nKPX Tcaron edieresis -120\nKPX Tcaron edotaccent -120\nKPX Tcaron egrave -60\nKPX Tcaron emacron -60\nKPX Tcaron eogonek -120\nKPX Tcaron hyphen -140\nKPX Tcaron o -120\nKPX Tcaron oacute -120\nKPX Tcaron ocircumflex -120\nKPX Tcaron odieresis -120\nKPX Tcaron ograve -120\nKPX Tcaron ohungarumlaut -120\nKPX Tcaron omacron -60\nKPX Tcaron oslash -120\nKPX Tcaron otilde -60\nKPX Tcaron period -120\nKPX Tcaron r -120\nKPX Tcaron racute -120\nKPX Tcaron rcaron -120\nKPX Tcaron rcommaaccent -120\nKPX Tcaron semicolon -20\nKPX Tcaron u -120\nKPX Tcaron uacute -120\nKPX Tcaron ucircumflex -120\nKPX Tcaron udieresis -120\nKPX Tcaron ugrave -120\nKPX Tcaron uhungarumlaut -120\nKPX Tcaron umacron -60\nKPX Tcaron uogonek -120\nKPX Tcaron uring -120\nKPX Tcaron w -120\nKPX Tcaron y -120\nKPX Tcaron yacute -120\nKPX Tcaron ydieresis -60\nKPX Tcommaaccent A -120\nKPX Tcommaaccent Aacute -120\nKPX Tcommaaccent Abreve -120\nKPX Tcommaaccent Acircumflex -120\nKPX Tcommaaccent Adieresis -120\nKPX Tcommaaccent Agrave -120\nKPX Tcommaaccent Amacron -120\nKPX Tcommaaccent Aogonek -120\nKPX Tcommaaccent Aring -120\nKPX Tcommaaccent Atilde -120\nKPX Tcommaaccent O -40\nKPX Tcommaaccent Oacute -40\nKPX Tcommaaccent Ocircumflex -40\nKPX Tcommaaccent Odieresis -40\nKPX Tcommaaccent Ograve -40\nKPX Tcommaaccent Ohungarumlaut -40\nKPX Tcommaaccent Omacron -40\nKPX Tcommaaccent Oslash -40\nKPX Tcommaaccent Otilde -40\nKPX Tcommaaccent a -120\nKPX Tcommaaccent aacute -120\nKPX Tcommaaccent abreve -60\nKPX Tcommaaccent acircumflex -120\nKPX Tcommaaccent adieresis -120\nKPX Tcommaaccent agrave -120\nKPX Tcommaaccent amacron -60\nKPX Tcommaaccent aogonek -120\nKPX Tcommaaccent aring -120\nKPX Tcommaaccent atilde -60\nKPX Tcommaaccent colon -20\nKPX Tcommaaccent comma -120\nKPX Tcommaaccent e -120\nKPX Tcommaaccent eacute -120\nKPX Tcommaaccent ecaron -120\nKPX Tcommaaccent ecircumflex -120\nKPX Tcommaaccent edieresis -120\nKPX Tcommaaccent edotaccent -120\nKPX Tcommaaccent egrave -60\nKPX Tcommaaccent emacron -60\nKPX Tcommaaccent eogonek -120\nKPX Tcommaaccent hyphen -140\nKPX Tcommaaccent o -120\nKPX Tcommaaccent oacute -120\nKPX Tcommaaccent ocircumflex -120\nKPX Tcommaaccent odieresis -120\nKPX Tcommaaccent ograve -120\nKPX Tcommaaccent ohungarumlaut -120\nKPX Tcommaaccent omacron -60\nKPX Tcommaaccent oslash -120\nKPX Tcommaaccent otilde -60\nKPX Tcommaaccent period -120\nKPX Tcommaaccent r -120\nKPX Tcommaaccent racute -120\nKPX Tcommaaccent rcaron -120\nKPX Tcommaaccent rcommaaccent -120\nKPX Tcommaaccent semicolon -20\nKPX Tcommaaccent u -120\nKPX Tcommaaccent uacute -120\nKPX Tcommaaccent ucircumflex -120\nKPX Tcommaaccent udieresis -120\nKPX Tcommaaccent ugrave -120\nKPX Tcommaaccent uhungarumlaut -120\nKPX Tcommaaccent umacron -60\nKPX Tcommaaccent uogonek -120\nKPX Tcommaaccent uring -120\nKPX Tcommaaccent w -120\nKPX Tcommaaccent y -120\nKPX Tcommaaccent yacute -120\nKPX Tcommaaccent ydieresis -60\nKPX U A -40\nKPX U Aacute -40\nKPX U Abreve -40\nKPX U Acircumflex -40\nKPX U Adieresis -40\nKPX U Agrave -40\nKPX U Amacron -40\nKPX U Aogonek -40\nKPX U Aring -40\nKPX U Atilde -40\nKPX U comma -40\nKPX U period -40\nKPX Uacute A -40\nKPX Uacute Aacute -40\nKPX Uacute Abreve -40\nKPX Uacute Acircumflex -40\nKPX Uacute Adieresis -40\nKPX Uacute Agrave -40\nKPX Uacute Amacron -40\nKPX Uacute Aogonek -40\nKPX Uacute Aring -40\nKPX Uacute Atilde -40\nKPX Uacute comma -40\nKPX Uacute period -40\nKPX Ucircumflex A -40\nKPX Ucircumflex Aacute -40\nKPX Ucircumflex Abreve -40\nKPX Ucircumflex Acircumflex -40\nKPX Ucircumflex Adieresis -40\nKPX Ucircumflex Agrave -40\nKPX Ucircumflex Amacron -40\nKPX Ucircumflex Aogonek -40\nKPX Ucircumflex Aring -40\nKPX Ucircumflex Atilde -40\nKPX Ucircumflex comma -40\nKPX Ucircumflex period -40\nKPX Udieresis A -40\nKPX Udieresis Aacute -40\nKPX Udieresis Abreve -40\nKPX Udieresis Acircumflex -40\nKPX Udieresis Adieresis -40\nKPX Udieresis Agrave -40\nKPX Udieresis Amacron -40\nKPX Udieresis Aogonek -40\nKPX Udieresis Aring -40\nKPX Udieresis Atilde -40\nKPX Udieresis comma -40\nKPX Udieresis period -40\nKPX Ugrave A -40\nKPX Ugrave Aacute -40\nKPX Ugrave Abreve -40\nKPX Ugrave Acircumflex -40\nKPX Ugrave Adieresis -40\nKPX Ugrave Agrave -40\nKPX Ugrave Amacron -40\nKPX Ugrave Aogonek -40\nKPX Ugrave Aring -40\nKPX Ugrave Atilde -40\nKPX Ugrave comma -40\nKPX Ugrave period -40\nKPX Uhungarumlaut A -40\nKPX Uhungarumlaut Aacute -40\nKPX Uhungarumlaut Abreve -40\nKPX Uhungarumlaut Acircumflex -40\nKPX Uhungarumlaut Adieresis -40\nKPX Uhungarumlaut Agrave -40\nKPX Uhungarumlaut Amacron -40\nKPX Uhungarumlaut Aogonek -40\nKPX Uhungarumlaut Aring -40\nKPX Uhungarumlaut Atilde -40\nKPX Uhungarumlaut comma -40\nKPX Uhungarumlaut period -40\nKPX Umacron A -40\nKPX Umacron Aacute -40\nKPX Umacron Abreve -40\nKPX Umacron Acircumflex -40\nKPX Umacron Adieresis -40\nKPX Umacron Agrave -40\nKPX Umacron Amacron -40\nKPX Umacron Aogonek -40\nKPX Umacron Aring -40\nKPX Umacron Atilde -40\nKPX Umacron comma -40\nKPX Umacron period -40\nKPX Uogonek A -40\nKPX Uogonek Aacute -40\nKPX Uogonek Abreve -40\nKPX Uogonek Acircumflex -40\nKPX Uogonek Adieresis -40\nKPX Uogonek Agrave -40\nKPX Uogonek Amacron -40\nKPX Uogonek Aogonek -40\nKPX Uogonek Aring -40\nKPX Uogonek Atilde -40\nKPX Uogonek comma -40\nKPX Uogonek period -40\nKPX Uring A -40\nKPX Uring Aacute -40\nKPX Uring Abreve -40\nKPX Uring Acircumflex -40\nKPX Uring Adieresis -40\nKPX Uring Agrave -40\nKPX Uring Amacron -40\nKPX Uring Aogonek -40\nKPX Uring Aring -40\nKPX Uring Atilde -40\nKPX Uring comma -40\nKPX Uring period -40\nKPX V A -80\nKPX V Aacute -80\nKPX V Abreve -80\nKPX V Acircumflex -80\nKPX V Adieresis -80\nKPX V Agrave -80\nKPX V Amacron -80\nKPX V Aogonek -80\nKPX V Aring -80\nKPX V Atilde -80\nKPX V G -40\nKPX V Gbreve -40\nKPX V Gcommaaccent -40\nKPX V O -40\nKPX V Oacute -40\nKPX V Ocircumflex -40\nKPX V Odieresis -40\nKPX V Ograve -40\nKPX V Ohungarumlaut -40\nKPX V Omacron -40\nKPX V Oslash -40\nKPX V Otilde -40\nKPX V a -70\nKPX V aacute -70\nKPX V abreve -70\nKPX V acircumflex -70\nKPX V adieresis -70\nKPX V agrave -70\nKPX V amacron -70\nKPX V aogonek -70\nKPX V aring -70\nKPX V atilde -70\nKPX V colon -40\nKPX V comma -125\nKPX V e -80\nKPX V eacute -80\nKPX V ecaron -80\nKPX V ecircumflex -80\nKPX V edieresis -80\nKPX V edotaccent -80\nKPX V egrave -80\nKPX V emacron -80\nKPX V eogonek -80\nKPX V hyphen -80\nKPX V o -80\nKPX V oacute -80\nKPX V ocircumflex -80\nKPX V odieresis -80\nKPX V ograve -80\nKPX V ohungarumlaut -80\nKPX V omacron -80\nKPX V oslash -80\nKPX V otilde -80\nKPX V period -125\nKPX V semicolon -40\nKPX V u -70\nKPX V uacute -70\nKPX V ucircumflex -70\nKPX V udieresis -70\nKPX V ugrave -70\nKPX V uhungarumlaut -70\nKPX V umacron -70\nKPX V uogonek -70\nKPX V uring -70\nKPX W A -50\nKPX W Aacute -50\nKPX W Abreve -50\nKPX W Acircumflex -50\nKPX W Adieresis -50\nKPX W Agrave -50\nKPX W Amacron -50\nKPX W Aogonek -50\nKPX W Aring -50\nKPX W Atilde -50\nKPX W O -20\nKPX W Oacute -20\nKPX W Ocircumflex -20\nKPX W Odieresis -20\nKPX W Ograve -20\nKPX W Ohungarumlaut -20\nKPX W Omacron -20\nKPX W Oslash -20\nKPX W Otilde -20\nKPX W a -40\nKPX W aacute -40\nKPX W abreve -40\nKPX W acircumflex -40\nKPX W adieresis -40\nKPX W agrave -40\nKPX W amacron -40\nKPX W aogonek -40\nKPX W aring -40\nKPX W atilde -40\nKPX W comma -80\nKPX W e -30\nKPX W eacute -30\nKPX W ecaron -30\nKPX W ecircumflex -30\nKPX W edieresis -30\nKPX W edotaccent -30\nKPX W egrave -30\nKPX W emacron -30\nKPX W eogonek -30\nKPX W hyphen -40\nKPX W o -30\nKPX W oacute -30\nKPX W ocircumflex -30\nKPX W odieresis -30\nKPX W ograve -30\nKPX W ohungarumlaut -30\nKPX W omacron -30\nKPX W oslash -30\nKPX W otilde -30\nKPX W period -80\nKPX W u -30\nKPX W uacute -30\nKPX W ucircumflex -30\nKPX W udieresis -30\nKPX W ugrave -30\nKPX W uhungarumlaut -30\nKPX W umacron -30\nKPX W uogonek -30\nKPX W uring -30\nKPX W y -20\nKPX W yacute -20\nKPX W ydieresis -20\nKPX Y A -110\nKPX Y Aacute -110\nKPX Y Abreve -110\nKPX Y Acircumflex -110\nKPX Y Adieresis -110\nKPX Y Agrave -110\nKPX Y Amacron -110\nKPX Y Aogonek -110\nKPX Y Aring -110\nKPX Y Atilde -110\nKPX Y O -85\nKPX Y Oacute -85\nKPX Y Ocircumflex -85\nKPX Y Odieresis -85\nKPX Y Ograve -85\nKPX Y Ohungarumlaut -85\nKPX Y Omacron -85\nKPX Y Oslash -85\nKPX Y Otilde -85\nKPX Y a -140\nKPX Y aacute -140\nKPX Y abreve -70\nKPX Y acircumflex -140\nKPX Y adieresis -140\nKPX Y agrave -140\nKPX Y amacron -70\nKPX Y aogonek -140\nKPX Y aring -140\nKPX Y atilde -140\nKPX Y colon -60\nKPX Y comma -140\nKPX Y e -140\nKPX Y eacute -140\nKPX Y ecaron -140\nKPX Y ecircumflex -140\nKPX Y edieresis -140\nKPX Y edotaccent -140\nKPX Y egrave -140\nKPX Y emacron -70\nKPX Y eogonek -140\nKPX Y hyphen -140\nKPX Y i -20\nKPX Y iacute -20\nKPX Y iogonek -20\nKPX Y o -140\nKPX Y oacute -140\nKPX Y ocircumflex -140\nKPX Y odieresis -140\nKPX Y ograve -140\nKPX Y ohungarumlaut -140\nKPX Y omacron -140\nKPX Y oslash -140\nKPX Y otilde -140\nKPX Y period -140\nKPX Y semicolon -60\nKPX Y u -110\nKPX Y uacute -110\nKPX Y ucircumflex -110\nKPX Y udieresis -110\nKPX Y ugrave -110\nKPX Y uhungarumlaut -110\nKPX Y umacron -110\nKPX Y uogonek -110\nKPX Y uring -110\nKPX Yacute A -110\nKPX Yacute Aacute -110\nKPX Yacute Abreve -110\nKPX Yacute Acircumflex -110\nKPX Yacute Adieresis -110\nKPX Yacute Agrave -110\nKPX Yacute Amacron -110\nKPX Yacute Aogonek -110\nKPX Yacute Aring -110\nKPX Yacute Atilde -110\nKPX Yacute O -85\nKPX Yacute Oacute -85\nKPX Yacute Ocircumflex -85\nKPX Yacute Odieresis -85\nKPX Yacute Ograve -85\nKPX Yacute Ohungarumlaut -85\nKPX Yacute Omacron -85\nKPX Yacute Oslash -85\nKPX Yacute Otilde -85\nKPX Yacute a -140\nKPX Yacute aacute -140\nKPX Yacute abreve -70\nKPX Yacute acircumflex -140\nKPX Yacute adieresis -140\nKPX Yacute agrave -140\nKPX Yacute amacron -70\nKPX Yacute aogonek -140\nKPX Yacute aring -140\nKPX Yacute atilde -70\nKPX Yacute colon -60\nKPX Yacute comma -140\nKPX Yacute e -140\nKPX Yacute eacute -140\nKPX Yacute ecaron -140\nKPX Yacute ecircumflex -140\nKPX Yacute edieresis -140\nKPX Yacute edotaccent -140\nKPX Yacute egrave -140\nKPX Yacute emacron -70\nKPX Yacute eogonek -140\nKPX Yacute hyphen -140\nKPX Yacute i -20\nKPX Yacute iacute -20\nKPX Yacute iogonek -20\nKPX Yacute o -140\nKPX Yacute oacute -140\nKPX Yacute ocircumflex -140\nKPX Yacute odieresis -140\nKPX Yacute ograve -140\nKPX Yacute ohungarumlaut -140\nKPX Yacute omacron -70\nKPX Yacute oslash -140\nKPX Yacute otilde -140\nKPX Yacute period -140\nKPX Yacute semicolon -60\nKPX Yacute u -110\nKPX Yacute uacute -110\nKPX Yacute ucircumflex -110\nKPX Yacute udieresis -110\nKPX Yacute ugrave -110\nKPX Yacute uhungarumlaut -110\nKPX Yacute umacron -110\nKPX Yacute uogonek -110\nKPX Yacute uring -110\nKPX Ydieresis A -110\nKPX Ydieresis Aacute -110\nKPX Ydieresis Abreve -110\nKPX Ydieresis Acircumflex -110\nKPX Ydieresis Adieresis -110\nKPX Ydieresis Agrave -110\nKPX Ydieresis Amacron -110\nKPX Ydieresis Aogonek -110\nKPX Ydieresis Aring -110\nKPX Ydieresis Atilde -110\nKPX Ydieresis O -85\nKPX Ydieresis Oacute -85\nKPX Ydieresis Ocircumflex -85\nKPX Ydieresis Odieresis -85\nKPX Ydieresis Ograve -85\nKPX Ydieresis Ohungarumlaut -85\nKPX Ydieresis Omacron -85\nKPX Ydieresis Oslash -85\nKPX Ydieresis Otilde -85\nKPX Ydieresis a -140\nKPX Ydieresis aacute -140\nKPX Ydieresis abreve -70\nKPX Ydieresis acircumflex -140\nKPX Ydieresis adieresis -140\nKPX Ydieresis agrave -140\nKPX Ydieresis amacron -70\nKPX Ydieresis aogonek -140\nKPX Ydieresis aring -140\nKPX Ydieresis atilde -70\nKPX Ydieresis colon -60\nKPX Ydieresis comma -140\nKPX Ydieresis e -140\nKPX Ydieresis eacute -140\nKPX Ydieresis ecaron -140\nKPX Ydieresis ecircumflex -140\nKPX Ydieresis edieresis -140\nKPX Ydieresis edotaccent -140\nKPX Ydieresis egrave -140\nKPX Ydieresis emacron -70\nKPX Ydieresis eogonek -140\nKPX Ydieresis hyphen -140\nKPX Ydieresis i -20\nKPX Ydieresis iacute -20\nKPX Ydieresis iogonek -20\nKPX Ydieresis o -140\nKPX Ydieresis oacute -140\nKPX Ydieresis ocircumflex -140\nKPX Ydieresis odieresis -140\nKPX Ydieresis ograve -140\nKPX Ydieresis ohungarumlaut -140\nKPX Ydieresis omacron -140\nKPX Ydieresis oslash -140\nKPX Ydieresis otilde -140\nKPX Ydieresis period -140\nKPX Ydieresis semicolon -60\nKPX Ydieresis u -110\nKPX Ydieresis uacute -110\nKPX Ydieresis ucircumflex -110\nKPX Ydieresis udieresis -110\nKPX Ydieresis ugrave -110\nKPX Ydieresis uhungarumlaut -110\nKPX Ydieresis umacron -110\nKPX Ydieresis uogonek -110\nKPX Ydieresis uring -110\nKPX a v -20\nKPX a w -20\nKPX a y -30\nKPX a yacute -30\nKPX a ydieresis -30\nKPX aacute v -20\nKPX aacute w -20\nKPX aacute y -30\nKPX aacute yacute -30\nKPX aacute ydieresis -30\nKPX abreve v -20\nKPX abreve w -20\nKPX abreve y -30\nKPX abreve yacute -30\nKPX abreve ydieresis -30\nKPX acircumflex v -20\nKPX acircumflex w -20\nKPX acircumflex y -30\nKPX acircumflex yacute -30\nKPX acircumflex ydieresis -30\nKPX adieresis v -20\nKPX adieresis w -20\nKPX adieresis y -30\nKPX adieresis yacute -30\nKPX adieresis ydieresis -30\nKPX agrave v -20\nKPX agrave w -20\nKPX agrave y -30\nKPX agrave yacute -30\nKPX agrave ydieresis -30\nKPX amacron v -20\nKPX amacron w -20\nKPX amacron y -30\nKPX amacron yacute -30\nKPX amacron ydieresis -30\nKPX aogonek v -20\nKPX aogonek w -20\nKPX aogonek y -30\nKPX aogonek yacute -30\nKPX aogonek ydieresis -30\nKPX aring v -20\nKPX aring w -20\nKPX aring y -30\nKPX aring yacute -30\nKPX aring ydieresis -30\nKPX atilde v -20\nKPX atilde w -20\nKPX atilde y -30\nKPX atilde yacute -30\nKPX atilde ydieresis -30\nKPX b b -10\nKPX b comma -40\nKPX b l -20\nKPX b lacute -20\nKPX b lcommaaccent -20\nKPX b lslash -20\nKPX b period -40\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX b v -20\nKPX b y -20\nKPX b yacute -20\nKPX b ydieresis -20\nKPX c comma -15\nKPX c k -20\nKPX c kcommaaccent -20\nKPX cacute comma -15\nKPX cacute k -20\nKPX cacute kcommaaccent -20\nKPX ccaron comma -15\nKPX ccaron k -20\nKPX ccaron kcommaaccent -20\nKPX ccedilla comma -15\nKPX ccedilla k -20\nKPX ccedilla kcommaaccent -20\nKPX colon space -50\nKPX comma quotedblright -100\nKPX comma quoteright -100\nKPX e comma -15\nKPX e period -15\nKPX e v -30\nKPX e w -20\nKPX e x -30\nKPX e y -20\nKPX e yacute -20\nKPX e ydieresis -20\nKPX eacute comma -15\nKPX eacute period -15\nKPX eacute v -30\nKPX eacute w -20\nKPX eacute x -30\nKPX eacute y -20\nKPX eacute yacute -20\nKPX eacute ydieresis -20\nKPX ecaron comma -15\nKPX ecaron period -15\nKPX ecaron v -30\nKPX ecaron w -20\nKPX ecaron x -30\nKPX ecaron y -20\nKPX ecaron yacute -20\nKPX ecaron ydieresis -20\nKPX ecircumflex comma -15\nKPX ecircumflex period -15\nKPX ecircumflex v -30\nKPX ecircumflex w -20\nKPX ecircumflex x -30\nKPX ecircumflex y -20\nKPX ecircumflex yacute -20\nKPX ecircumflex ydieresis -20\nKPX edieresis comma -15\nKPX edieresis period -15\nKPX edieresis v -30\nKPX edieresis w -20\nKPX edieresis x -30\nKPX edieresis y -20\nKPX edieresis yacute -20\nKPX edieresis ydieresis -20\nKPX edotaccent comma -15\nKPX edotaccent period -15\nKPX edotaccent v -30\nKPX edotaccent w -20\nKPX edotaccent x -30\nKPX edotaccent y -20\nKPX edotaccent yacute -20\nKPX edotaccent ydieresis -20\nKPX egrave comma -15\nKPX egrave period -15\nKPX egrave v -30\nKPX egrave w -20\nKPX egrave x -30\nKPX egrave y -20\nKPX egrave yacute -20\nKPX egrave ydieresis -20\nKPX emacron comma -15\nKPX emacron period -15\nKPX emacron v -30\nKPX emacron w -20\nKPX emacron x -30\nKPX emacron y -20\nKPX emacron yacute -20\nKPX emacron ydieresis -20\nKPX eogonek comma -15\nKPX eogonek period -15\nKPX eogonek v -30\nKPX eogonek w -20\nKPX eogonek x -30\nKPX eogonek y -20\nKPX eogonek yacute -20\nKPX eogonek ydieresis -20\nKPX f a -30\nKPX f aacute -30\nKPX f abreve -30\nKPX f acircumflex -30\nKPX f adieresis -30\nKPX f agrave -30\nKPX f amacron -30\nKPX f aogonek -30\nKPX f aring -30\nKPX f atilde -30\nKPX f comma -30\nKPX f dotlessi -28\nKPX f e -30\nKPX f eacute -30\nKPX f ecaron -30\nKPX f ecircumflex -30\nKPX f edieresis -30\nKPX f edotaccent -30\nKPX f egrave -30\nKPX f emacron -30\nKPX f eogonek -30\nKPX f o -30\nKPX f oacute -30\nKPX f ocircumflex -30\nKPX f odieresis -30\nKPX f ograve -30\nKPX f ohungarumlaut -30\nKPX f omacron -30\nKPX f oslash -30\nKPX f otilde -30\nKPX f period -30\nKPX f quotedblright 60\nKPX f quoteright 50\nKPX g r -10\nKPX g racute -10\nKPX g rcaron -10\nKPX g rcommaaccent -10\nKPX gbreve r -10\nKPX gbreve racute -10\nKPX gbreve rcaron -10\nKPX gbreve rcommaaccent -10\nKPX gcommaaccent r -10\nKPX gcommaaccent racute -10\nKPX gcommaaccent rcaron -10\nKPX gcommaaccent rcommaaccent -10\nKPX h y -30\nKPX h yacute -30\nKPX h ydieresis -30\nKPX k e -20\nKPX k eacute -20\nKPX k ecaron -20\nKPX k ecircumflex -20\nKPX k edieresis -20\nKPX k edotaccent -20\nKPX k egrave -20\nKPX k emacron -20\nKPX k eogonek -20\nKPX k o -20\nKPX k oacute -20\nKPX k ocircumflex -20\nKPX k odieresis -20\nKPX k ograve -20\nKPX k ohungarumlaut -20\nKPX k omacron -20\nKPX k oslash -20\nKPX k otilde -20\nKPX kcommaaccent e -20\nKPX kcommaaccent eacute -20\nKPX kcommaaccent ecaron -20\nKPX kcommaaccent ecircumflex -20\nKPX kcommaaccent edieresis -20\nKPX kcommaaccent edotaccent -20\nKPX kcommaaccent egrave -20\nKPX kcommaaccent emacron -20\nKPX kcommaaccent eogonek -20\nKPX kcommaaccent o -20\nKPX kcommaaccent oacute -20\nKPX kcommaaccent ocircumflex -20\nKPX kcommaaccent odieresis -20\nKPX kcommaaccent ograve -20\nKPX kcommaaccent ohungarumlaut -20\nKPX kcommaaccent omacron -20\nKPX kcommaaccent oslash -20\nKPX kcommaaccent otilde -20\nKPX m u -10\nKPX m uacute -10\nKPX m ucircumflex -10\nKPX m udieresis -10\nKPX m ugrave -10\nKPX m uhungarumlaut -10\nKPX m umacron -10\nKPX m uogonek -10\nKPX m uring -10\nKPX m y -15\nKPX m yacute -15\nKPX m ydieresis -15\nKPX n u -10\nKPX n uacute -10\nKPX n ucircumflex -10\nKPX n udieresis -10\nKPX n ugrave -10\nKPX n uhungarumlaut -10\nKPX n umacron -10\nKPX n uogonek -10\nKPX n uring -10\nKPX n v -20\nKPX n y -15\nKPX n yacute -15\nKPX n ydieresis -15\nKPX nacute u -10\nKPX nacute uacute -10\nKPX nacute ucircumflex -10\nKPX nacute udieresis -10\nKPX nacute ugrave -10\nKPX nacute uhungarumlaut -10\nKPX nacute umacron -10\nKPX nacute uogonek -10\nKPX nacute uring -10\nKPX nacute v -20\nKPX nacute y -15\nKPX nacute yacute -15\nKPX nacute ydieresis -15\nKPX ncaron u -10\nKPX ncaron uacute -10\nKPX ncaron ucircumflex -10\nKPX ncaron udieresis -10\nKPX ncaron ugrave -10\nKPX ncaron uhungarumlaut -10\nKPX ncaron umacron -10\nKPX ncaron uogonek -10\nKPX ncaron uring -10\nKPX ncaron v -20\nKPX ncaron y -15\nKPX ncaron yacute -15\nKPX ncaron ydieresis -15\nKPX ncommaaccent u -10\nKPX ncommaaccent uacute -10\nKPX ncommaaccent ucircumflex -10\nKPX ncommaaccent udieresis -10\nKPX ncommaaccent ugrave -10\nKPX ncommaaccent uhungarumlaut -10\nKPX ncommaaccent umacron -10\nKPX ncommaaccent uogonek -10\nKPX ncommaaccent uring -10\nKPX ncommaaccent v -20\nKPX ncommaaccent y -15\nKPX ncommaaccent yacute -15\nKPX ncommaaccent ydieresis -15\nKPX ntilde u -10\nKPX ntilde uacute -10\nKPX ntilde ucircumflex -10\nKPX ntilde udieresis -10\nKPX ntilde ugrave -10\nKPX ntilde uhungarumlaut -10\nKPX ntilde umacron -10\nKPX ntilde uogonek -10\nKPX ntilde uring -10\nKPX ntilde v -20\nKPX ntilde y -15\nKPX ntilde yacute -15\nKPX ntilde ydieresis -15\nKPX o comma -40\nKPX o period -40\nKPX o v -15\nKPX o w -15\nKPX o x -30\nKPX o y -30\nKPX o yacute -30\nKPX o ydieresis -30\nKPX oacute comma -40\nKPX oacute period -40\nKPX oacute v -15\nKPX oacute w -15\nKPX oacute x -30\nKPX oacute y -30\nKPX oacute yacute -30\nKPX oacute ydieresis -30\nKPX ocircumflex comma -40\nKPX ocircumflex period -40\nKPX ocircumflex v -15\nKPX ocircumflex w -15\nKPX ocircumflex x -30\nKPX ocircumflex y -30\nKPX ocircumflex yacute -30\nKPX ocircumflex ydieresis -30\nKPX odieresis comma -40\nKPX odieresis period -40\nKPX odieresis v -15\nKPX odieresis w -15\nKPX odieresis x -30\nKPX odieresis y -30\nKPX odieresis yacute -30\nKPX odieresis ydieresis -30\nKPX ograve comma -40\nKPX ograve period -40\nKPX ograve v -15\nKPX ograve w -15\nKPX ograve x -30\nKPX ograve y -30\nKPX ograve yacute -30\nKPX ograve ydieresis -30\nKPX ohungarumlaut comma -40\nKPX ohungarumlaut period -40\nKPX ohungarumlaut v -15\nKPX ohungarumlaut w -15\nKPX ohungarumlaut x -30\nKPX ohungarumlaut y -30\nKPX ohungarumlaut yacute -30\nKPX ohungarumlaut ydieresis -30\nKPX omacron comma -40\nKPX omacron period -40\nKPX omacron v -15\nKPX omacron w -15\nKPX omacron x -30\nKPX omacron y -30\nKPX omacron yacute -30\nKPX omacron ydieresis -30\nKPX oslash a -55\nKPX oslash aacute -55\nKPX oslash abreve -55\nKPX oslash acircumflex -55\nKPX oslash adieresis -55\nKPX oslash agrave -55\nKPX oslash amacron -55\nKPX oslash aogonek -55\nKPX oslash aring -55\nKPX oslash atilde -55\nKPX oslash b -55\nKPX oslash c -55\nKPX oslash cacute -55\nKPX oslash ccaron -55\nKPX oslash ccedilla -55\nKPX oslash comma -95\nKPX oslash d -55\nKPX oslash dcroat -55\nKPX oslash e -55\nKPX oslash eacute -55\nKPX oslash ecaron -55\nKPX oslash ecircumflex -55\nKPX oslash edieresis -55\nKPX oslash edotaccent -55\nKPX oslash egrave -55\nKPX oslash emacron -55\nKPX oslash eogonek -55\nKPX oslash f -55\nKPX oslash g -55\nKPX oslash gbreve -55\nKPX oslash gcommaaccent -55\nKPX oslash h -55\nKPX oslash i -55\nKPX oslash iacute -55\nKPX oslash icircumflex -55\nKPX oslash idieresis -55\nKPX oslash igrave -55\nKPX oslash imacron -55\nKPX oslash iogonek -55\nKPX oslash j -55\nKPX oslash k -55\nKPX oslash kcommaaccent -55\nKPX oslash l -55\nKPX oslash lacute -55\nKPX oslash lcommaaccent -55\nKPX oslash lslash -55\nKPX oslash m -55\nKPX oslash n -55\nKPX oslash nacute -55\nKPX oslash ncaron -55\nKPX oslash ncommaaccent -55\nKPX oslash ntilde -55\nKPX oslash o -55\nKPX oslash oacute -55\nKPX oslash ocircumflex -55\nKPX oslash odieresis -55\nKPX oslash ograve -55\nKPX oslash ohungarumlaut -55\nKPX oslash omacron -55\nKPX oslash oslash -55\nKPX oslash otilde -55\nKPX oslash p -55\nKPX oslash period -95\nKPX oslash q -55\nKPX oslash r -55\nKPX oslash racute -55\nKPX oslash rcaron -55\nKPX oslash rcommaaccent -55\nKPX oslash s -55\nKPX oslash sacute -55\nKPX oslash scaron -55\nKPX oslash scedilla -55\nKPX oslash scommaaccent -55\nKPX oslash t -55\nKPX oslash tcommaaccent -55\nKPX oslash u -55\nKPX oslash uacute -55\nKPX oslash ucircumflex -55\nKPX oslash udieresis -55\nKPX oslash ugrave -55\nKPX oslash uhungarumlaut -55\nKPX oslash umacron -55\nKPX oslash uogonek -55\nKPX oslash uring -55\nKPX oslash v -70\nKPX oslash w -70\nKPX oslash x -85\nKPX oslash y -70\nKPX oslash yacute -70\nKPX oslash ydieresis -70\nKPX oslash z -55\nKPX oslash zacute -55\nKPX oslash zcaron -55\nKPX oslash zdotaccent -55\nKPX otilde comma -40\nKPX otilde period -40\nKPX otilde v -15\nKPX otilde w -15\nKPX otilde x -30\nKPX otilde y -30\nKPX otilde yacute -30\nKPX otilde ydieresis -30\nKPX p comma -35\nKPX p period -35\nKPX p y -30\nKPX p yacute -30\nKPX p ydieresis -30\nKPX period quotedblright -100\nKPX period quoteright -100\nKPX period space -60\nKPX quotedblright space -40\nKPX quoteleft quoteleft -57\nKPX quoteright d -50\nKPX quoteright dcroat -50\nKPX quoteright quoteright -57\nKPX quoteright r -50\nKPX quoteright racute -50\nKPX quoteright rcaron -50\nKPX quoteright rcommaaccent -50\nKPX quoteright s -50\nKPX quoteright sacute -50\nKPX quoteright scaron -50\nKPX quoteright scedilla -50\nKPX quoteright scommaaccent -50\nKPX quoteright space -70\nKPX r a -10\nKPX r aacute -10\nKPX r abreve -10\nKPX r acircumflex -10\nKPX r adieresis -10\nKPX r agrave -10\nKPX r amacron -10\nKPX r aogonek -10\nKPX r aring -10\nKPX r atilde -10\nKPX r colon 30\nKPX r comma -50\nKPX r i 15\nKPX r iacute 15\nKPX r icircumflex 15\nKPX r idieresis 15\nKPX r igrave 15\nKPX r imacron 15\nKPX r iogonek 15\nKPX r k 15\nKPX r kcommaaccent 15\nKPX r l 15\nKPX r lacute 15\nKPX r lcommaaccent 15\nKPX r lslash 15\nKPX r m 25\nKPX r n 25\nKPX r nacute 25\nKPX r ncaron 25\nKPX r ncommaaccent 25\nKPX r ntilde 25\nKPX r p 30\nKPX r period -50\nKPX r semicolon 30\nKPX r t 40\nKPX r tcommaaccent 40\nKPX r u 15\nKPX r uacute 15\nKPX r ucircumflex 15\nKPX r udieresis 15\nKPX r ugrave 15\nKPX r uhungarumlaut 15\nKPX r umacron 15\nKPX r uogonek 15\nKPX r uring 15\nKPX r v 30\nKPX r y 30\nKPX r yacute 30\nKPX r ydieresis 30\nKPX racute a -10\nKPX racute aacute -10\nKPX racute abreve -10\nKPX racute acircumflex -10\nKPX racute adieresis -10\nKPX racute agrave -10\nKPX racute amacron -10\nKPX racute aogonek -10\nKPX racute aring -10\nKPX racute atilde -10\nKPX racute colon 30\nKPX racute comma -50\nKPX racute i 15\nKPX racute iacute 15\nKPX racute icircumflex 15\nKPX racute idieresis 15\nKPX racute igrave 15\nKPX racute imacron 15\nKPX racute iogonek 15\nKPX racute k 15\nKPX racute kcommaaccent 15\nKPX racute l 15\nKPX racute lacute 15\nKPX racute lcommaaccent 15\nKPX racute lslash 15\nKPX racute m 25\nKPX racute n 25\nKPX racute nacute 25\nKPX racute ncaron 25\nKPX racute ncommaaccent 25\nKPX racute ntilde 25\nKPX racute p 30\nKPX racute period -50\nKPX racute semicolon 30\nKPX racute t 40\nKPX racute tcommaaccent 40\nKPX racute u 15\nKPX racute uacute 15\nKPX racute ucircumflex 15\nKPX racute udieresis 15\nKPX racute ugrave 15\nKPX racute uhungarumlaut 15\nKPX racute umacron 15\nKPX racute uogonek 15\nKPX racute uring 15\nKPX racute v 30\nKPX racute y 30\nKPX racute yacute 30\nKPX racute ydieresis 30\nKPX rcaron a -10\nKPX rcaron aacute -10\nKPX rcaron abreve -10\nKPX rcaron acircumflex -10\nKPX rcaron adieresis -10\nKPX rcaron agrave -10\nKPX rcaron amacron -10\nKPX rcaron aogonek -10\nKPX rcaron aring -10\nKPX rcaron atilde -10\nKPX rcaron colon 30\nKPX rcaron comma -50\nKPX rcaron i 15\nKPX rcaron iacute 15\nKPX rcaron icircumflex 15\nKPX rcaron idieresis 15\nKPX rcaron igrave 15\nKPX rcaron imacron 15\nKPX rcaron iogonek 15\nKPX rcaron k 15\nKPX rcaron kcommaaccent 15\nKPX rcaron l 15\nKPX rcaron lacute 15\nKPX rcaron lcommaaccent 15\nKPX rcaron lslash 15\nKPX rcaron m 25\nKPX rcaron n 25\nKPX rcaron nacute 25\nKPX rcaron ncaron 25\nKPX rcaron ncommaaccent 25\nKPX rcaron ntilde 25\nKPX rcaron p 30\nKPX rcaron period -50\nKPX rcaron semicolon 30\nKPX rcaron t 40\nKPX rcaron tcommaaccent 40\nKPX rcaron u 15\nKPX rcaron uacute 15\nKPX rcaron ucircumflex 15\nKPX rcaron udieresis 15\nKPX rcaron ugrave 15\nKPX rcaron uhungarumlaut 15\nKPX rcaron umacron 15\nKPX rcaron uogonek 15\nKPX rcaron uring 15\nKPX rcaron v 30\nKPX rcaron y 30\nKPX rcaron yacute 30\nKPX rcaron ydieresis 30\nKPX rcommaaccent a -10\nKPX rcommaaccent aacute -10\nKPX rcommaaccent abreve -10\nKPX rcommaaccent acircumflex -10\nKPX rcommaaccent adieresis -10\nKPX rcommaaccent agrave -10\nKPX rcommaaccent amacron -10\nKPX rcommaaccent aogonek -10\nKPX rcommaaccent aring -10\nKPX rcommaaccent atilde -10\nKPX rcommaaccent colon 30\nKPX rcommaaccent comma -50\nKPX rcommaaccent i 15\nKPX rcommaaccent iacute 15\nKPX rcommaaccent icircumflex 15\nKPX rcommaaccent idieresis 15\nKPX rcommaaccent igrave 15\nKPX rcommaaccent imacron 15\nKPX rcommaaccent iogonek 15\nKPX rcommaaccent k 15\nKPX rcommaaccent kcommaaccent 15\nKPX rcommaaccent l 15\nKPX rcommaaccent lacute 15\nKPX rcommaaccent lcommaaccent 15\nKPX rcommaaccent lslash 15\nKPX rcommaaccent m 25\nKPX rcommaaccent n 25\nKPX rcommaaccent nacute 25\nKPX rcommaaccent ncaron 25\nKPX rcommaaccent ncommaaccent 25\nKPX rcommaaccent ntilde 25\nKPX rcommaaccent p 30\nKPX rcommaaccent period -50\nKPX rcommaaccent semicolon 30\nKPX rcommaaccent t 40\nKPX rcommaaccent tcommaaccent 40\nKPX rcommaaccent u 15\nKPX rcommaaccent uacute 15\nKPX rcommaaccent ucircumflex 15\nKPX rcommaaccent udieresis 15\nKPX rcommaaccent ugrave 15\nKPX rcommaaccent uhungarumlaut 15\nKPX rcommaaccent umacron 15\nKPX rcommaaccent uogonek 15\nKPX rcommaaccent uring 15\nKPX rcommaaccent v 30\nKPX rcommaaccent y 30\nKPX rcommaaccent yacute 30\nKPX rcommaaccent ydieresis 30\nKPX s comma -15\nKPX s period -15\nKPX s w -30\nKPX sacute comma -15\nKPX sacute period -15\nKPX sacute w -30\nKPX scaron comma -15\nKPX scaron period -15\nKPX scaron w -30\nKPX scedilla comma -15\nKPX scedilla period -15\nKPX scedilla w -30\nKPX scommaaccent comma -15\nKPX scommaaccent period -15\nKPX scommaaccent w -30\nKPX semicolon space -50\nKPX space T -50\nKPX space Tcaron -50\nKPX space Tcommaaccent -50\nKPX space V -50\nKPX space W -40\nKPX space Y -90\nKPX space Yacute -90\nKPX space Ydieresis -90\nKPX space quotedblleft -30\nKPX space quoteleft -60\nKPX v a -25\nKPX v aacute -25\nKPX v abreve -25\nKPX v acircumflex -25\nKPX v adieresis -25\nKPX v agrave -25\nKPX v amacron -25\nKPX v aogonek -25\nKPX v aring -25\nKPX v atilde -25\nKPX v comma -80\nKPX v e -25\nKPX v eacute -25\nKPX v ecaron -25\nKPX v ecircumflex -25\nKPX v edieresis -25\nKPX v edotaccent -25\nKPX v egrave -25\nKPX v emacron -25\nKPX v eogonek -25\nKPX v o -25\nKPX v oacute -25\nKPX v ocircumflex -25\nKPX v odieresis -25\nKPX v ograve -25\nKPX v ohungarumlaut -25\nKPX v omacron -25\nKPX v oslash -25\nKPX v otilde -25\nKPX v period -80\nKPX w a -15\nKPX w aacute -15\nKPX w abreve -15\nKPX w acircumflex -15\nKPX w adieresis -15\nKPX w agrave -15\nKPX w amacron -15\nKPX w aogonek -15\nKPX w aring -15\nKPX w atilde -15\nKPX w comma -60\nKPX w e -10\nKPX w eacute -10\nKPX w ecaron -10\nKPX w ecircumflex -10\nKPX w edieresis -10\nKPX w edotaccent -10\nKPX w egrave -10\nKPX w emacron -10\nKPX w eogonek -10\nKPX w o -10\nKPX w oacute -10\nKPX w ocircumflex -10\nKPX w odieresis -10\nKPX w ograve -10\nKPX w ohungarumlaut -10\nKPX w omacron -10\nKPX w oslash -10\nKPX w otilde -10\nKPX w period -60\nKPX x e -30\nKPX x eacute -30\nKPX x ecaron -30\nKPX x ecircumflex -30\nKPX x edieresis -30\nKPX x edotaccent -30\nKPX x egrave -30\nKPX x emacron -30\nKPX x eogonek -30\nKPX y a -20\nKPX y aacute -20\nKPX y abreve -20\nKPX y acircumflex -20\nKPX y adieresis -20\nKPX y agrave -20\nKPX y amacron -20\nKPX y aogonek -20\nKPX y aring -20\nKPX y atilde -20\nKPX y comma -100\nKPX y e -20\nKPX y eacute -20\nKPX y ecaron -20\nKPX y ecircumflex -20\nKPX y edieresis -20\nKPX y edotaccent -20\nKPX y egrave -20\nKPX y emacron -20\nKPX y eogonek -20\nKPX y o -20\nKPX y oacute -20\nKPX y ocircumflex -20\nKPX y odieresis -20\nKPX y ograve -20\nKPX y ohungarumlaut -20\nKPX y omacron -20\nKPX y oslash -20\nKPX y otilde -20\nKPX y period -100\nKPX yacute a -20\nKPX yacute aacute -20\nKPX yacute abreve -20\nKPX yacute acircumflex -20\nKPX yacute adieresis -20\nKPX yacute agrave -20\nKPX yacute amacron -20\nKPX yacute aogonek -20\nKPX yacute aring -20\nKPX yacute atilde -20\nKPX yacute comma -100\nKPX yacute e -20\nKPX yacute eacute -20\nKPX yacute ecaron -20\nKPX yacute ecircumflex -20\nKPX yacute edieresis -20\nKPX yacute edotaccent -20\nKPX yacute egrave -20\nKPX yacute emacron -20\nKPX yacute eogonek -20\nKPX yacute o -20\nKPX yacute oacute -20\nKPX yacute ocircumflex -20\nKPX yacute odieresis -20\nKPX yacute ograve -20\nKPX yacute ohungarumlaut -20\nKPX yacute omacron -20\nKPX yacute oslash -20\nKPX yacute otilde -20\nKPX yacute period -100\nKPX ydieresis a -20\nKPX ydieresis aacute -20\nKPX ydieresis abreve -20\nKPX ydieresis acircumflex -20\nKPX ydieresis adieresis -20\nKPX ydieresis agrave -20\nKPX ydieresis amacron -20\nKPX ydieresis aogonek -20\nKPX ydieresis aring -20\nKPX ydieresis atilde -20\nKPX ydieresis comma -100\nKPX ydieresis e -20\nKPX ydieresis eacute -20\nKPX ydieresis ecaron -20\nKPX ydieresis ecircumflex -20\nKPX ydieresis edieresis -20\nKPX ydieresis edotaccent -20\nKPX ydieresis egrave -20\nKPX ydieresis emacron -20\nKPX ydieresis eogonek -20\nKPX ydieresis o -20\nKPX ydieresis oacute -20\nKPX ydieresis ocircumflex -20\nKPX ydieresis odieresis -20\nKPX ydieresis ograve -20\nKPX ydieresis ohungarumlaut -20\nKPX ydieresis omacron -20\nKPX ydieresis oslash -20\nKPX ydieresis otilde -20\nKPX ydieresis period -100\nKPX z e -15\nKPX z eacute -15\nKPX z ecaron -15\nKPX z ecircumflex -15\nKPX z edieresis -15\nKPX z edotaccent -15\nKPX z egrave -15\nKPX z emacron -15\nKPX z eogonek -15\nKPX z o -15\nKPX z oacute -15\nKPX z ocircumflex -15\nKPX z odieresis -15\nKPX z ograve -15\nKPX z ohungarumlaut -15\nKPX z omacron -15\nKPX z oslash -15\nKPX z otilde -15\nKPX zacute e -15\nKPX zacute eacute -15\nKPX zacute ecaron -15\nKPX zacute ecircumflex -15\nKPX zacute edieresis -15\nKPX zacute edotaccent -15\nKPX zacute egrave -15\nKPX zacute emacron -15\nKPX zacute eogonek -15\nKPX zacute o -15\nKPX zacute oacute -15\nKPX zacute ocircumflex -15\nKPX zacute odieresis -15\nKPX zacute ograve -15\nKPX zacute ohungarumlaut -15\nKPX zacute omacron -15\nKPX zacute oslash -15\nKPX zacute otilde -15\nKPX zcaron e -15\nKPX zcaron eacute -15\nKPX zcaron ecaron -15\nKPX zcaron ecircumflex -15\nKPX zcaron edieresis -15\nKPX zcaron edotaccent -15\nKPX zcaron egrave -15\nKPX zcaron emacron -15\nKPX zcaron eogonek -15\nKPX zcaron o -15\nKPX zcaron oacute -15\nKPX zcaron ocircumflex -15\nKPX zcaron odieresis -15\nKPX zcaron ograve -15\nKPX zcaron ohungarumlaut -15\nKPX zcaron omacron -15\nKPX zcaron oslash -15\nKPX zcaron otilde -15\nKPX zdotaccent e -15\nKPX zdotaccent eacute -15\nKPX zdotaccent ecaron -15\nKPX zdotaccent ecircumflex -15\nKPX zdotaccent edieresis -15\nKPX zdotaccent edotaccent -15\nKPX zdotaccent egrave -15\nKPX zdotaccent emacron -15\nKPX zdotaccent eogonek -15\nKPX zdotaccent o -15\nKPX zdotaccent oacute -15\nKPX zdotaccent ocircumflex -15\nKPX zdotaccent odieresis -15\nKPX zdotaccent ograve -15\nKPX zdotaccent ohungarumlaut -15\nKPX zdotaccent omacron -15\nKPX zdotaccent oslash -15\nKPX zdotaccent otilde -15\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 66
      "Helvetica-Bold": function() {                                                                                   // 67
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:43:52 1997\nComment UniqueID 43052\nComment VMusage 37169 48194\nFontName Helvetica-Bold\nFullName Helvetica Bold\nFamilyName Helvetica\nWeight Bold\nItalicAngle 0\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -170 -228 1003 962 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 718\nXHeight 532\nAscender 718\nDescender -207\nStdHW 118\nStdVW 140\nStartCharMetrics 315\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 333 ; N exclam ; B 90 0 244 718 ;\nC 34 ; WX 474 ; N quotedbl ; B 98 447 376 718 ;\nC 35 ; WX 556 ; N numbersign ; B 18 0 538 698 ;\nC 36 ; WX 556 ; N dollar ; B 30 -115 523 775 ;\nC 37 ; WX 889 ; N percent ; B 28 -19 861 710 ;\nC 38 ; WX 722 ; N ampersand ; B 54 -19 701 718 ;\nC 39 ; WX 278 ; N quoteright ; B 69 445 209 718 ;\nC 40 ; WX 333 ; N parenleft ; B 35 -208 314 734 ;\nC 41 ; WX 333 ; N parenright ; B 19 -208 298 734 ;\nC 42 ; WX 389 ; N asterisk ; B 27 387 362 718 ;\nC 43 ; WX 584 ; N plus ; B 40 0 544 506 ;\nC 44 ; WX 278 ; N comma ; B 64 -168 214 146 ;\nC 45 ; WX 333 ; N hyphen ; B 27 215 306 345 ;\nC 46 ; WX 278 ; N period ; B 64 0 214 146 ;\nC 47 ; WX 278 ; N slash ; B -33 -19 311 737 ;\nC 48 ; WX 556 ; N zero ; B 32 -19 524 710 ;\nC 49 ; WX 556 ; N one ; B 69 0 378 710 ;\nC 50 ; WX 556 ; N two ; B 26 0 511 710 ;\nC 51 ; WX 556 ; N three ; B 27 -19 516 710 ;\nC 52 ; WX 556 ; N four ; B 27 0 526 710 ;\nC 53 ; WX 556 ; N five ; B 27 -19 516 698 ;\nC 54 ; WX 556 ; N six ; B 31 -19 520 710 ;\nC 55 ; WX 556 ; N seven ; B 25 0 528 698 ;\nC 56 ; WX 556 ; N eight ; B 32 -19 524 710 ;\nC 57 ; WX 556 ; N nine ; B 30 -19 522 710 ;\nC 58 ; WX 333 ; N colon ; B 92 0 242 512 ;\nC 59 ; WX 333 ; N semicolon ; B 92 -168 242 512 ;\nC 60 ; WX 584 ; N less ; B 38 -8 546 514 ;\nC 61 ; WX 584 ; N equal ; B 40 87 544 419 ;\nC 62 ; WX 584 ; N greater ; B 38 -8 546 514 ;\nC 63 ; WX 611 ; N question ; B 60 0 556 727 ;\nC 64 ; WX 975 ; N at ; B 118 -19 856 737 ;\nC 65 ; WX 722 ; N A ; B 20 0 702 718 ;\nC 66 ; WX 722 ; N B ; B 76 0 669 718 ;\nC 67 ; WX 722 ; N C ; B 44 -19 684 737 ;\nC 68 ; WX 722 ; N D ; B 76 0 685 718 ;\nC 69 ; WX 667 ; N E ; B 76 0 621 718 ;\nC 70 ; WX 611 ; N F ; B 76 0 587 718 ;\nC 71 ; WX 778 ; N G ; B 44 -19 713 737 ;\nC 72 ; WX 722 ; N H ; B 71 0 651 718 ;\nC 73 ; WX 278 ; N I ; B 64 0 214 718 ;\nC 74 ; WX 556 ; N J ; B 22 -18 484 718 ;\nC 75 ; WX 722 ; N K ; B 87 0 722 718 ;\nC 76 ; WX 611 ; N L ; B 76 0 583 718 ;\nC 77 ; WX 833 ; N M ; B 69 0 765 718 ;\nC 78 ; WX 722 ; N N ; B 69 0 654 718 ;\nC 79 ; WX 778 ; N O ; B 44 -19 734 737 ;\nC 80 ; WX 667 ; N P ; B 76 0 627 718 ;\nC 81 ; WX 778 ; N Q ; B 44 -52 737 737 ;\nC 82 ; WX 722 ; N R ; B 76 0 677 718 ;\nC 83 ; WX 667 ; N S ; B 39 -19 629 737 ;\nC 84 ; WX 611 ; N T ; B 14 0 598 718 ;\nC 85 ; WX 722 ; N U ; B 72 -19 651 718 ;\nC 86 ; WX 667 ; N V ; B 19 0 648 718 ;\nC 87 ; WX 944 ; N W ; B 16 0 929 718 ;\nC 88 ; WX 667 ; N X ; B 14 0 653 718 ;\nC 89 ; WX 667 ; N Y ; B 15 0 653 718 ;\nC 90 ; WX 611 ; N Z ; B 25 0 586 718 ;\nC 91 ; WX 333 ; N bracketleft ; B 63 -196 309 722 ;\nC 92 ; WX 278 ; N backslash ; B -33 -19 311 737 ;\nC 93 ; WX 333 ; N bracketright ; B 24 -196 270 722 ;\nC 94 ; WX 584 ; N asciicircum ; B 62 323 522 698 ;\nC 95 ; WX 556 ; N underscore ; B 0 -125 556 -75 ;\nC 96 ; WX 278 ; N quoteleft ; B 69 454 209 727 ;\nC 97 ; WX 556 ; N a ; B 29 -14 527 546 ;\nC 98 ; WX 611 ; N b ; B 61 -14 578 718 ;\nC 99 ; WX 556 ; N c ; B 34 -14 524 546 ;\nC 100 ; WX 611 ; N d ; B 34 -14 551 718 ;\nC 101 ; WX 556 ; N e ; B 23 -14 528 546 ;\nC 102 ; WX 333 ; N f ; B 10 0 318 727 ; L i fi ; L l fl ;\nC 103 ; WX 611 ; N g ; B 40 -217 553 546 ;\nC 104 ; WX 611 ; N h ; B 65 0 546 718 ;\nC 105 ; WX 278 ; N i ; B 69 0 209 725 ;\nC 106 ; WX 278 ; N j ; B 3 -214 209 725 ;\nC 107 ; WX 556 ; N k ; B 69 0 562 718 ;\nC 108 ; WX 278 ; N l ; B 69 0 209 718 ;\nC 109 ; WX 889 ; N m ; B 64 0 826 546 ;\nC 110 ; WX 611 ; N n ; B 65 0 546 546 ;\nC 111 ; WX 611 ; N o ; B 34 -14 578 546 ;\nC 112 ; WX 611 ; N p ; B 62 -207 578 546 ;\nC 113 ; WX 611 ; N q ; B 34 -207 552 546 ;\nC 114 ; WX 389 ; N r ; B 64 0 373 546 ;\nC 115 ; WX 556 ; N s ; B 30 -14 519 546 ;\nC 116 ; WX 333 ; N t ; B 10 -6 309 676 ;\nC 117 ; WX 611 ; N u ; B 66 -14 545 532 ;\nC 118 ; WX 556 ; N v ; B 13 0 543 532 ;\nC 119 ; WX 778 ; N w ; B 10 0 769 532 ;\nC 120 ; WX 556 ; N x ; B 15 0 541 532 ;\nC 121 ; WX 556 ; N y ; B 10 -214 539 532 ;\nC 122 ; WX 500 ; N z ; B 20 0 480 532 ;\nC 123 ; WX 389 ; N braceleft ; B 48 -196 365 722 ;\nC 124 ; WX 280 ; N bar ; B 84 -225 196 775 ;\nC 125 ; WX 389 ; N braceright ; B 24 -196 341 722 ;\nC 126 ; WX 584 ; N asciitilde ; B 61 163 523 343 ;\nC 161 ; WX 333 ; N exclamdown ; B 90 -186 244 532 ;\nC 162 ; WX 556 ; N cent ; B 34 -118 524 628 ;\nC 163 ; WX 556 ; N sterling ; B 28 -16 541 718 ;\nC 164 ; WX 167 ; N fraction ; B -170 -19 336 710 ;\nC 165 ; WX 556 ; N yen ; B -9 0 565 698 ;\nC 166 ; WX 556 ; N florin ; B -10 -210 516 737 ;\nC 167 ; WX 556 ; N section ; B 34 -184 522 727 ;\nC 168 ; WX 556 ; N currency ; B -3 76 559 636 ;\nC 169 ; WX 238 ; N quotesingle ; B 70 447 168 718 ;\nC 170 ; WX 500 ; N quotedblleft ; B 64 454 436 727 ;\nC 171 ; WX 556 ; N guillemotleft ; B 88 76 468 484 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 83 76 250 484 ;\nC 173 ; WX 333 ; N guilsinglright ; B 83 76 250 484 ;\nC 174 ; WX 611 ; N fi ; B 10 0 542 727 ;\nC 175 ; WX 611 ; N fl ; B 10 0 542 727 ;\nC 177 ; WX 556 ; N endash ; B 0 227 556 333 ;\nC 178 ; WX 556 ; N dagger ; B 36 -171 520 718 ;\nC 179 ; WX 556 ; N daggerdbl ; B 36 -171 520 718 ;\nC 180 ; WX 278 ; N periodcentered ; B 58 172 220 334 ;\nC 182 ; WX 556 ; N paragraph ; B -8 -191 539 700 ;\nC 183 ; WX 350 ; N bullet ; B 10 194 340 524 ;\nC 184 ; WX 278 ; N quotesinglbase ; B 69 -146 209 127 ;\nC 185 ; WX 500 ; N quotedblbase ; B 64 -146 436 127 ;\nC 186 ; WX 500 ; N quotedblright ; B 64 445 436 718 ;\nC 187 ; WX 556 ; N guillemotright ; B 88 76 468 484 ;\nC 188 ; WX 1000 ; N ellipsis ; B 92 0 908 146 ;\nC 189 ; WX 1000 ; N perthousand ; B -3 -19 1003 710 ;\nC 191 ; WX 611 ; N questiondown ; B 55 -195 551 532 ;\nC 193 ; WX 333 ; N grave ; B -23 604 225 750 ;\nC 194 ; WX 333 ; N acute ; B 108 604 356 750 ;\nC 195 ; WX 333 ; N circumflex ; B -10 604 343 750 ;\nC 196 ; WX 333 ; N tilde ; B -17 610 350 737 ;\nC 197 ; WX 333 ; N macron ; B -6 604 339 678 ;\nC 198 ; WX 333 ; N breve ; B -2 604 335 750 ;\nC 199 ; WX 333 ; N dotaccent ; B 104 614 230 729 ;\nC 200 ; WX 333 ; N dieresis ; B 6 614 327 729 ;\nC 202 ; WX 333 ; N ring ; B 59 568 275 776 ;\nC 203 ; WX 333 ; N cedilla ; B 6 -228 245 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B 9 604 486 750 ;\nC 206 ; WX 333 ; N ogonek ; B 71 -228 304 0 ;\nC 207 ; WX 333 ; N caron ; B -10 604 343 750 ;\nC 208 ; WX 1000 ; N emdash ; B 0 227 1000 333 ;\nC 225 ; WX 1000 ; N AE ; B 5 0 954 718 ;\nC 227 ; WX 370 ; N ordfeminine ; B 22 401 347 737 ;\nC 232 ; WX 611 ; N Lslash ; B -20 0 583 718 ;\nC 233 ; WX 778 ; N Oslash ; B 33 -27 744 745 ;\nC 234 ; WX 1000 ; N OE ; B 37 -19 961 737 ;\nC 235 ; WX 365 ; N ordmasculine ; B 6 401 360 737 ;\nC 241 ; WX 889 ; N ae ; B 29 -14 858 546 ;\nC 245 ; WX 278 ; N dotlessi ; B 69 0 209 532 ;\nC 248 ; WX 278 ; N lslash ; B -18 0 296 718 ;\nC 249 ; WX 611 ; N oslash ; B 22 -29 589 560 ;\nC 250 ; WX 944 ; N oe ; B 34 -14 912 546 ;\nC 251 ; WX 611 ; N germandbls ; B 69 -14 579 731 ;\nC -1 ; WX 278 ; N Idieresis ; B -21 0 300 915 ;\nC -1 ; WX 556 ; N eacute ; B 23 -14 528 750 ;\nC -1 ; WX 556 ; N abreve ; B 29 -14 527 750 ;\nC -1 ; WX 611 ; N uhungarumlaut ; B 66 -14 625 750 ;\nC -1 ; WX 556 ; N ecaron ; B 23 -14 528 750 ;\nC -1 ; WX 667 ; N Ydieresis ; B 15 0 653 915 ;\nC -1 ; WX 584 ; N divide ; B 40 -42 544 548 ;\nC -1 ; WX 667 ; N Yacute ; B 15 0 653 936 ;\nC -1 ; WX 722 ; N Acircumflex ; B 20 0 702 936 ;\nC -1 ; WX 556 ; N aacute ; B 29 -14 527 750 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 72 -19 651 936 ;\nC -1 ; WX 556 ; N yacute ; B 10 -214 539 750 ;\nC -1 ; WX 556 ; N scommaaccent ; B 30 -228 519 546 ;\nC -1 ; WX 556 ; N ecircumflex ; B 23 -14 528 750 ;\nC -1 ; WX 722 ; N Uring ; B 72 -19 651 962 ;\nC -1 ; WX 722 ; N Udieresis ; B 72 -19 651 915 ;\nC -1 ; WX 556 ; N aogonek ; B 29 -224 545 546 ;\nC -1 ; WX 722 ; N Uacute ; B 72 -19 651 936 ;\nC -1 ; WX 611 ; N uogonek ; B 66 -228 545 532 ;\nC -1 ; WX 667 ; N Edieresis ; B 76 0 621 915 ;\nC -1 ; WX 722 ; N Dcroat ; B -5 0 685 718 ;\nC -1 ; WX 250 ; N commaaccent ; B 64 -228 199 -50 ;\nC -1 ; WX 737 ; N copyright ; B -11 -19 749 737 ;\nC -1 ; WX 667 ; N Emacron ; B 76 0 621 864 ;\nC -1 ; WX 556 ; N ccaron ; B 34 -14 524 750 ;\nC -1 ; WX 556 ; N aring ; B 29 -14 527 776 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B 69 -228 654 718 ;\nC -1 ; WX 278 ; N lacute ; B 69 0 329 936 ;\nC -1 ; WX 556 ; N agrave ; B 29 -14 527 750 ;\nC -1 ; WX 611 ; N Tcommaaccent ; B 14 -228 598 718 ;\nC -1 ; WX 722 ; N Cacute ; B 44 -19 684 936 ;\nC -1 ; WX 556 ; N atilde ; B 29 -14 527 737 ;\nC -1 ; WX 667 ; N Edotaccent ; B 76 0 621 915 ;\nC -1 ; WX 556 ; N scaron ; B 30 -14 519 750 ;\nC -1 ; WX 556 ; N scedilla ; B 30 -228 519 546 ;\nC -1 ; WX 278 ; N iacute ; B 69 0 329 750 ;\nC -1 ; WX 494 ; N lozenge ; B 10 0 484 745 ;\nC -1 ; WX 722 ; N Rcaron ; B 76 0 677 936 ;\nC -1 ; WX 778 ; N Gcommaaccent ; B 44 -228 713 737 ;\nC -1 ; WX 611 ; N ucircumflex ; B 66 -14 545 750 ;\nC -1 ; WX 556 ; N acircumflex ; B 29 -14 527 750 ;\nC -1 ; WX 722 ; N Amacron ; B 20 0 702 864 ;\nC -1 ; WX 389 ; N rcaron ; B 18 0 373 750 ;\nC -1 ; WX 556 ; N ccedilla ; B 34 -228 524 546 ;\nC -1 ; WX 611 ; N Zdotaccent ; B 25 0 586 915 ;\nC -1 ; WX 667 ; N Thorn ; B 76 0 627 718 ;\nC -1 ; WX 778 ; N Omacron ; B 44 -19 734 864 ;\nC -1 ; WX 722 ; N Racute ; B 76 0 677 936 ;\nC -1 ; WX 667 ; N Sacute ; B 39 -19 629 936 ;\nC -1 ; WX 743 ; N dcaron ; B 34 -14 750 718 ;\nC -1 ; WX 722 ; N Umacron ; B 72 -19 651 864 ;\nC -1 ; WX 611 ; N uring ; B 66 -14 545 776 ;\nC -1 ; WX 333 ; N threesuperior ; B 8 271 326 710 ;\nC -1 ; WX 778 ; N Ograve ; B 44 -19 734 936 ;\nC -1 ; WX 722 ; N Agrave ; B 20 0 702 936 ;\nC -1 ; WX 722 ; N Abreve ; B 20 0 702 936 ;\nC -1 ; WX 584 ; N multiply ; B 40 1 545 505 ;\nC -1 ; WX 611 ; N uacute ; B 66 -14 545 750 ;\nC -1 ; WX 611 ; N Tcaron ; B 14 0 598 936 ;\nC -1 ; WX 494 ; N partialdiff ; B 11 -21 494 750 ;\nC -1 ; WX 556 ; N ydieresis ; B 10 -214 539 729 ;\nC -1 ; WX 722 ; N Nacute ; B 69 0 654 936 ;\nC -1 ; WX 278 ; N icircumflex ; B -37 0 316 750 ;\nC -1 ; WX 667 ; N Ecircumflex ; B 76 0 621 936 ;\nC -1 ; WX 556 ; N adieresis ; B 29 -14 527 729 ;\nC -1 ; WX 556 ; N edieresis ; B 23 -14 528 729 ;\nC -1 ; WX 556 ; N cacute ; B 34 -14 524 750 ;\nC -1 ; WX 611 ; N nacute ; B 65 0 546 750 ;\nC -1 ; WX 611 ; N umacron ; B 66 -14 545 678 ;\nC -1 ; WX 722 ; N Ncaron ; B 69 0 654 936 ;\nC -1 ; WX 278 ; N Iacute ; B 64 0 329 936 ;\nC -1 ; WX 584 ; N plusminus ; B 40 0 544 506 ;\nC -1 ; WX 280 ; N brokenbar ; B 84 -150 196 700 ;\nC -1 ; WX 737 ; N registered ; B -11 -19 748 737 ;\nC -1 ; WX 778 ; N Gbreve ; B 44 -19 713 936 ;\nC -1 ; WX 278 ; N Idotaccent ; B 64 0 214 915 ;\nC -1 ; WX 600 ; N summation ; B 14 -10 585 706 ;\nC -1 ; WX 667 ; N Egrave ; B 76 0 621 936 ;\nC -1 ; WX 389 ; N racute ; B 64 0 384 750 ;\nC -1 ; WX 611 ; N omacron ; B 34 -14 578 678 ;\nC -1 ; WX 611 ; N Zacute ; B 25 0 586 936 ;\nC -1 ; WX 611 ; N Zcaron ; B 25 0 586 936 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 704 ;\nC -1 ; WX 722 ; N Eth ; B -5 0 685 718 ;\nC -1 ; WX 722 ; N Ccedilla ; B 44 -228 684 737 ;\nC -1 ; WX 278 ; N lcommaaccent ; B 69 -228 213 718 ;\nC -1 ; WX 389 ; N tcaron ; B 10 -6 421 878 ;\nC -1 ; WX 556 ; N eogonek ; B 23 -228 528 546 ;\nC -1 ; WX 722 ; N Uogonek ; B 72 -228 651 718 ;\nC -1 ; WX 722 ; N Aacute ; B 20 0 702 936 ;\nC -1 ; WX 722 ; N Adieresis ; B 20 0 702 915 ;\nC -1 ; WX 556 ; N egrave ; B 23 -14 528 750 ;\nC -1 ; WX 500 ; N zacute ; B 20 0 480 750 ;\nC -1 ; WX 278 ; N iogonek ; B 16 -224 249 725 ;\nC -1 ; WX 778 ; N Oacute ; B 44 -19 734 936 ;\nC -1 ; WX 611 ; N oacute ; B 34 -14 578 750 ;\nC -1 ; WX 556 ; N amacron ; B 29 -14 527 678 ;\nC -1 ; WX 556 ; N sacute ; B 30 -14 519 750 ;\nC -1 ; WX 278 ; N idieresis ; B -21 0 300 729 ;\nC -1 ; WX 778 ; N Ocircumflex ; B 44 -19 734 936 ;\nC -1 ; WX 722 ; N Ugrave ; B 72 -19 651 936 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 611 ; N thorn ; B 62 -208 578 718 ;\nC -1 ; WX 333 ; N twosuperior ; B 9 283 324 710 ;\nC -1 ; WX 778 ; N Odieresis ; B 44 -19 734 915 ;\nC -1 ; WX 611 ; N mu ; B 66 -207 545 532 ;\nC -1 ; WX 278 ; N igrave ; B -50 0 209 750 ;\nC -1 ; WX 611 ; N ohungarumlaut ; B 34 -14 625 750 ;\nC -1 ; WX 667 ; N Eogonek ; B 76 -224 639 718 ;\nC -1 ; WX 611 ; N dcroat ; B 34 -14 650 718 ;\nC -1 ; WX 834 ; N threequarters ; B 16 -19 799 710 ;\nC -1 ; WX 667 ; N Scedilla ; B 39 -228 629 737 ;\nC -1 ; WX 400 ; N lcaron ; B 69 0 408 718 ;\nC -1 ; WX 722 ; N Kcommaaccent ; B 87 -228 722 718 ;\nC -1 ; WX 611 ; N Lacute ; B 76 0 583 936 ;\nC -1 ; WX 1000 ; N trademark ; B 44 306 956 718 ;\nC -1 ; WX 556 ; N edotaccent ; B 23 -14 528 729 ;\nC -1 ; WX 278 ; N Igrave ; B -50 0 214 936 ;\nC -1 ; WX 278 ; N Imacron ; B -33 0 312 864 ;\nC -1 ; WX 611 ; N Lcaron ; B 76 0 583 718 ;\nC -1 ; WX 834 ; N onehalf ; B 26 -19 794 710 ;\nC -1 ; WX 549 ; N lessequal ; B 29 0 526 704 ;\nC -1 ; WX 611 ; N ocircumflex ; B 34 -14 578 750 ;\nC -1 ; WX 611 ; N ntilde ; B 65 0 546 737 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 72 -19 681 936 ;\nC -1 ; WX 667 ; N Eacute ; B 76 0 621 936 ;\nC -1 ; WX 556 ; N emacron ; B 23 -14 528 678 ;\nC -1 ; WX 611 ; N gbreve ; B 40 -217 553 750 ;\nC -1 ; WX 834 ; N onequarter ; B 26 -19 766 710 ;\nC -1 ; WX 667 ; N Scaron ; B 39 -19 629 936 ;\nC -1 ; WX 667 ; N Scommaaccent ; B 39 -228 629 737 ;\nC -1 ; WX 778 ; N Ohungarumlaut ; B 44 -19 734 936 ;\nC -1 ; WX 400 ; N degree ; B 57 426 343 712 ;\nC -1 ; WX 611 ; N ograve ; B 34 -14 578 750 ;\nC -1 ; WX 722 ; N Ccaron ; B 44 -19 684 936 ;\nC -1 ; WX 611 ; N ugrave ; B 66 -14 545 750 ;\nC -1 ; WX 549 ; N radical ; B 10 -46 512 850 ;\nC -1 ; WX 722 ; N Dcaron ; B 76 0 685 936 ;\nC -1 ; WX 389 ; N rcommaaccent ; B 64 -228 373 546 ;\nC -1 ; WX 722 ; N Ntilde ; B 69 0 654 923 ;\nC -1 ; WX 611 ; N otilde ; B 34 -14 578 737 ;\nC -1 ; WX 722 ; N Rcommaaccent ; B 76 -228 677 718 ;\nC -1 ; WX 611 ; N Lcommaaccent ; B 76 -228 583 718 ;\nC -1 ; WX 722 ; N Atilde ; B 20 0 702 923 ;\nC -1 ; WX 722 ; N Aogonek ; B 20 -224 742 718 ;\nC -1 ; WX 722 ; N Aring ; B 20 0 702 962 ;\nC -1 ; WX 778 ; N Otilde ; B 44 -19 734 923 ;\nC -1 ; WX 500 ; N zdotaccent ; B 20 0 480 729 ;\nC -1 ; WX 667 ; N Ecaron ; B 76 0 621 936 ;\nC -1 ; WX 278 ; N Iogonek ; B -11 -228 222 718 ;\nC -1 ; WX 556 ; N kcommaaccent ; B 69 -228 562 718 ;\nC -1 ; WX 584 ; N minus ; B 40 197 544 309 ;\nC -1 ; WX 278 ; N Icircumflex ; B -37 0 316 936 ;\nC -1 ; WX 611 ; N ncaron ; B 65 0 546 750 ;\nC -1 ; WX 333 ; N tcommaaccent ; B 10 -228 309 676 ;\nC -1 ; WX 584 ; N logicalnot ; B 40 108 544 419 ;\nC -1 ; WX 611 ; N odieresis ; B 34 -14 578 729 ;\nC -1 ; WX 611 ; N udieresis ; B 66 -14 545 729 ;\nC -1 ; WX 549 ; N notequal ; B 15 -49 540 570 ;\nC -1 ; WX 611 ; N gcommaaccent ; B 40 -217 553 850 ;\nC -1 ; WX 611 ; N eth ; B 34 -14 578 737 ;\nC -1 ; WX 500 ; N zcaron ; B 20 0 480 750 ;\nC -1 ; WX 611 ; N ncommaaccent ; B 65 -228 546 546 ;\nC -1 ; WX 333 ; N onesuperior ; B 26 283 237 710 ;\nC -1 ; WX 278 ; N imacron ; B -8 0 285 678 ;\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2481\nKPX A C -40\nKPX A Cacute -40\nKPX A Ccaron -40\nKPX A Ccedilla -40\nKPX A G -50\nKPX A Gbreve -50\nKPX A Gcommaaccent -50\nKPX A O -40\nKPX A Oacute -40\nKPX A Ocircumflex -40\nKPX A Odieresis -40\nKPX A Ograve -40\nKPX A Ohungarumlaut -40\nKPX A Omacron -40\nKPX A Oslash -40\nKPX A Otilde -40\nKPX A Q -40\nKPX A T -90\nKPX A Tcaron -90\nKPX A Tcommaaccent -90\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -80\nKPX A W -60\nKPX A Y -110\nKPX A Yacute -110\nKPX A Ydieresis -110\nKPX A u -30\nKPX A uacute -30\nKPX A ucircumflex -30\nKPX A udieresis -30\nKPX A ugrave -30\nKPX A uhungarumlaut -30\nKPX A umacron -30\nKPX A uogonek -30\nKPX A uring -30\nKPX A v -40\nKPX A w -30\nKPX A y -30\nKPX A yacute -30\nKPX A ydieresis -30\nKPX Aacute C -40\nKPX Aacute Cacute -40\nKPX Aacute Ccaron -40\nKPX Aacute Ccedilla -40\nKPX Aacute G -50\nKPX Aacute Gbreve -50\nKPX Aacute Gcommaaccent -50\nKPX Aacute O -40\nKPX Aacute Oacute -40\nKPX Aacute Ocircumflex -40\nKPX Aacute Odieresis -40\nKPX Aacute Ograve -40\nKPX Aacute Ohungarumlaut -40\nKPX Aacute Omacron -40\nKPX Aacute Oslash -40\nKPX Aacute Otilde -40\nKPX Aacute Q -40\nKPX Aacute T -90\nKPX Aacute Tcaron -90\nKPX Aacute Tcommaaccent -90\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -80\nKPX Aacute W -60\nKPX Aacute Y -110\nKPX Aacute Yacute -110\nKPX Aacute Ydieresis -110\nKPX Aacute u -30\nKPX Aacute uacute -30\nKPX Aacute ucircumflex -30\nKPX Aacute udieresis -30\nKPX Aacute ugrave -30\nKPX Aacute uhungarumlaut -30\nKPX Aacute umacron -30\nKPX Aacute uogonek -30\nKPX Aacute uring -30\nKPX Aacute v -40\nKPX Aacute w -30\nKPX Aacute y -30\nKPX Aacute yacute -30\nKPX Aacute ydieresis -30\nKPX Abreve C -40\nKPX Abreve Cacute -40\nKPX Abreve Ccaron -40\nKPX Abreve Ccedilla -40\nKPX Abreve G -50\nKPX Abreve Gbreve -50\nKPX Abreve Gcommaaccent -50\nKPX Abreve O -40\nKPX Abreve Oacute -40\nKPX Abreve Ocircumflex -40\nKPX Abreve Odieresis -40\nKPX Abreve Ograve -40\nKPX Abreve Ohungarumlaut -40\nKPX Abreve Omacron -40\nKPX Abreve Oslash -40\nKPX Abreve Otilde -40\nKPX Abreve Q -40\nKPX Abreve T -90\nKPX Abreve Tcaron -90\nKPX Abreve Tcommaaccent -90\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -80\nKPX Abreve W -60\nKPX Abreve Y -110\nKPX Abreve Yacute -110\nKPX Abreve Ydieresis -110\nKPX Abreve u -30\nKPX Abreve uacute -30\nKPX Abreve ucircumflex -30\nKPX Abreve udieresis -30\nKPX Abreve ugrave -30\nKPX Abreve uhungarumlaut -30\nKPX Abreve umacron -30\nKPX Abreve uogonek -30\nKPX Abreve uring -30\nKPX Abreve v -40\nKPX Abreve w -30\nKPX Abreve y -30\nKPX Abreve yacute -30\nKPX Abreve ydieresis -30\nKPX Acircumflex C -40\nKPX Acircumflex Cacute -40\nKPX Acircumflex Ccaron -40\nKPX Acircumflex Ccedilla -40\nKPX Acircumflex G -50\nKPX Acircumflex Gbreve -50\nKPX Acircumflex Gcommaaccent -50\nKPX Acircumflex O -40\nKPX Acircumflex Oacute -40\nKPX Acircumflex Ocircumflex -40\nKPX Acircumflex Odieresis -40\nKPX Acircumflex Ograve -40\nKPX Acircumflex Ohungarumlaut -40\nKPX Acircumflex Omacron -40\nKPX Acircumflex Oslash -40\nKPX Acircumflex Otilde -40\nKPX Acircumflex Q -40\nKPX Acircumflex T -90\nKPX Acircumflex Tcaron -90\nKPX Acircumflex Tcommaaccent -90\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -80\nKPX Acircumflex W -60\nKPX Acircumflex Y -110\nKPX Acircumflex Yacute -110\nKPX Acircumflex Ydieresis -110\nKPX Acircumflex u -30\nKPX Acircumflex uacute -30\nKPX Acircumflex ucircumflex -30\nKPX Acircumflex udieresis -30\nKPX Acircumflex ugrave -30\nKPX Acircumflex uhungarumlaut -30\nKPX Acircumflex umacron -30\nKPX Acircumflex uogonek -30\nKPX Acircumflex uring -30\nKPX Acircumflex v -40\nKPX Acircumflex w -30\nKPX Acircumflex y -30\nKPX Acircumflex yacute -30\nKPX Acircumflex ydieresis -30\nKPX Adieresis C -40\nKPX Adieresis Cacute -40\nKPX Adieresis Ccaron -40\nKPX Adieresis Ccedilla -40\nKPX Adieresis G -50\nKPX Adieresis Gbreve -50\nKPX Adieresis Gcommaaccent -50\nKPX Adieresis O -40\nKPX Adieresis Oacute -40\nKPX Adieresis Ocircumflex -40\nKPX Adieresis Odieresis -40\nKPX Adieresis Ograve -40\nKPX Adieresis Ohungarumlaut -40\nKPX Adieresis Omacron -40\nKPX Adieresis Oslash -40\nKPX Adieresis Otilde -40\nKPX Adieresis Q -40\nKPX Adieresis T -90\nKPX Adieresis Tcaron -90\nKPX Adieresis Tcommaaccent -90\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -80\nKPX Adieresis W -60\nKPX Adieresis Y -110\nKPX Adieresis Yacute -110\nKPX Adieresis Ydieresis -110\nKPX Adieresis u -30\nKPX Adieresis uacute -30\nKPX Adieresis ucircumflex -30\nKPX Adieresis udieresis -30\nKPX Adieresis ugrave -30\nKPX Adieresis uhungarumlaut -30\nKPX Adieresis umacron -30\nKPX Adieresis uogonek -30\nKPX Adieresis uring -30\nKPX Adieresis v -40\nKPX Adieresis w -30\nKPX Adieresis y -30\nKPX Adieresis yacute -30\nKPX Adieresis ydieresis -30\nKPX Agrave C -40\nKPX Agrave Cacute -40\nKPX Agrave Ccaron -40\nKPX Agrave Ccedilla -40\nKPX Agrave G -50\nKPX Agrave Gbreve -50\nKPX Agrave Gcommaaccent -50\nKPX Agrave O -40\nKPX Agrave Oacute -40\nKPX Agrave Ocircumflex -40\nKPX Agrave Odieresis -40\nKPX Agrave Ograve -40\nKPX Agrave Ohungarumlaut -40\nKPX Agrave Omacron -40\nKPX Agrave Oslash -40\nKPX Agrave Otilde -40\nKPX Agrave Q -40\nKPX Agrave T -90\nKPX Agrave Tcaron -90\nKPX Agrave Tcommaaccent -90\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -80\nKPX Agrave W -60\nKPX Agrave Y -110\nKPX Agrave Yacute -110\nKPX Agrave Ydieresis -110\nKPX Agrave u -30\nKPX Agrave uacute -30\nKPX Agrave ucircumflex -30\nKPX Agrave udieresis -30\nKPX Agrave ugrave -30\nKPX Agrave uhungarumlaut -30\nKPX Agrave umacron -30\nKPX Agrave uogonek -30\nKPX Agrave uring -30\nKPX Agrave v -40\nKPX Agrave w -30\nKPX Agrave y -30\nKPX Agrave yacute -30\nKPX Agrave ydieresis -30\nKPX Amacron C -40\nKPX Amacron Cacute -40\nKPX Amacron Ccaron -40\nKPX Amacron Ccedilla -40\nKPX Amacron G -50\nKPX Amacron Gbreve -50\nKPX Amacron Gcommaaccent -50\nKPX Amacron O -40\nKPX Amacron Oacute -40\nKPX Amacron Ocircumflex -40\nKPX Amacron Odieresis -40\nKPX Amacron Ograve -40\nKPX Amacron Ohungarumlaut -40\nKPX Amacron Omacron -40\nKPX Amacron Oslash -40\nKPX Amacron Otilde -40\nKPX Amacron Q -40\nKPX Amacron T -90\nKPX Amacron Tcaron -90\nKPX Amacron Tcommaaccent -90\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -80\nKPX Amacron W -60\nKPX Amacron Y -110\nKPX Amacron Yacute -110\nKPX Amacron Ydieresis -110\nKPX Amacron u -30\nKPX Amacron uacute -30\nKPX Amacron ucircumflex -30\nKPX Amacron udieresis -30\nKPX Amacron ugrave -30\nKPX Amacron uhungarumlaut -30\nKPX Amacron umacron -30\nKPX Amacron uogonek -30\nKPX Amacron uring -30\nKPX Amacron v -40\nKPX Amacron w -30\nKPX Amacron y -30\nKPX Amacron yacute -30\nKPX Amacron ydieresis -30\nKPX Aogonek C -40\nKPX Aogonek Cacute -40\nKPX Aogonek Ccaron -40\nKPX Aogonek Ccedilla -40\nKPX Aogonek G -50\nKPX Aogonek Gbreve -50\nKPX Aogonek Gcommaaccent -50\nKPX Aogonek O -40\nKPX Aogonek Oacute -40\nKPX Aogonek Ocircumflex -40\nKPX Aogonek Odieresis -40\nKPX Aogonek Ograve -40\nKPX Aogonek Ohungarumlaut -40\nKPX Aogonek Omacron -40\nKPX Aogonek Oslash -40\nKPX Aogonek Otilde -40\nKPX Aogonek Q -40\nKPX Aogonek T -90\nKPX Aogonek Tcaron -90\nKPX Aogonek Tcommaaccent -90\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -80\nKPX Aogonek W -60\nKPX Aogonek Y -110\nKPX Aogonek Yacute -110\nKPX Aogonek Ydieresis -110\nKPX Aogonek u -30\nKPX Aogonek uacute -30\nKPX Aogonek ucircumflex -30\nKPX Aogonek udieresis -30\nKPX Aogonek ugrave -30\nKPX Aogonek uhungarumlaut -30\nKPX Aogonek umacron -30\nKPX Aogonek uogonek -30\nKPX Aogonek uring -30\nKPX Aogonek v -40\nKPX Aogonek w -30\nKPX Aogonek y -30\nKPX Aogonek yacute -30\nKPX Aogonek ydieresis -30\nKPX Aring C -40\nKPX Aring Cacute -40\nKPX Aring Ccaron -40\nKPX Aring Ccedilla -40\nKPX Aring G -50\nKPX Aring Gbreve -50\nKPX Aring Gcommaaccent -50\nKPX Aring O -40\nKPX Aring Oacute -40\nKPX Aring Ocircumflex -40\nKPX Aring Odieresis -40\nKPX Aring Ograve -40\nKPX Aring Ohungarumlaut -40\nKPX Aring Omacron -40\nKPX Aring Oslash -40\nKPX Aring Otilde -40\nKPX Aring Q -40\nKPX Aring T -90\nKPX Aring Tcaron -90\nKPX Aring Tcommaaccent -90\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -80\nKPX Aring W -60\nKPX Aring Y -110\nKPX Aring Yacute -110\nKPX Aring Ydieresis -110\nKPX Aring u -30\nKPX Aring uacute -30\nKPX Aring ucircumflex -30\nKPX Aring udieresis -30\nKPX Aring ugrave -30\nKPX Aring uhungarumlaut -30\nKPX Aring umacron -30\nKPX Aring uogonek -30\nKPX Aring uring -30\nKPX Aring v -40\nKPX Aring w -30\nKPX Aring y -30\nKPX Aring yacute -30\nKPX Aring ydieresis -30\nKPX Atilde C -40\nKPX Atilde Cacute -40\nKPX Atilde Ccaron -40\nKPX Atilde Ccedilla -40\nKPX Atilde G -50\nKPX Atilde Gbreve -50\nKPX Atilde Gcommaaccent -50\nKPX Atilde O -40\nKPX Atilde Oacute -40\nKPX Atilde Ocircumflex -40\nKPX Atilde Odieresis -40\nKPX Atilde Ograve -40\nKPX Atilde Ohungarumlaut -40\nKPX Atilde Omacron -40\nKPX Atilde Oslash -40\nKPX Atilde Otilde -40\nKPX Atilde Q -40\nKPX Atilde T -90\nKPX Atilde Tcaron -90\nKPX Atilde Tcommaaccent -90\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -80\nKPX Atilde W -60\nKPX Atilde Y -110\nKPX Atilde Yacute -110\nKPX Atilde Ydieresis -110\nKPX Atilde u -30\nKPX Atilde uacute -30\nKPX Atilde ucircumflex -30\nKPX Atilde udieresis -30\nKPX Atilde ugrave -30\nKPX Atilde uhungarumlaut -30\nKPX Atilde umacron -30\nKPX Atilde uogonek -30\nKPX Atilde uring -30\nKPX Atilde v -40\nKPX Atilde w -30\nKPX Atilde y -30\nKPX Atilde yacute -30\nKPX Atilde ydieresis -30\nKPX B A -30\nKPX B Aacute -30\nKPX B Abreve -30\nKPX B Acircumflex -30\nKPX B Adieresis -30\nKPX B Agrave -30\nKPX B Amacron -30\nKPX B Aogonek -30\nKPX B Aring -30\nKPX B Atilde -30\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX D A -40\nKPX D Aacute -40\nKPX D Abreve -40\nKPX D Acircumflex -40\nKPX D Adieresis -40\nKPX D Agrave -40\nKPX D Amacron -40\nKPX D Aogonek -40\nKPX D Aring -40\nKPX D Atilde -40\nKPX D V -40\nKPX D W -40\nKPX D Y -70\nKPX D Yacute -70\nKPX D Ydieresis -70\nKPX D comma -30\nKPX D period -30\nKPX Dcaron A -40\nKPX Dcaron Aacute -40\nKPX Dcaron Abreve -40\nKPX Dcaron Acircumflex -40\nKPX Dcaron Adieresis -40\nKPX Dcaron Agrave -40\nKPX Dcaron Amacron -40\nKPX Dcaron Aogonek -40\nKPX Dcaron Aring -40\nKPX Dcaron Atilde -40\nKPX Dcaron V -40\nKPX Dcaron W -40\nKPX Dcaron Y -70\nKPX Dcaron Yacute -70\nKPX Dcaron Ydieresis -70\nKPX Dcaron comma -30\nKPX Dcaron period -30\nKPX Dcroat A -40\nKPX Dcroat Aacute -40\nKPX Dcroat Abreve -40\nKPX Dcroat Acircumflex -40\nKPX Dcroat Adieresis -40\nKPX Dcroat Agrave -40\nKPX Dcroat Amacron -40\nKPX Dcroat Aogonek -40\nKPX Dcroat Aring -40\nKPX Dcroat Atilde -40\nKPX Dcroat V -40\nKPX Dcroat W -40\nKPX Dcroat Y -70\nKPX Dcroat Yacute -70\nKPX Dcroat Ydieresis -70\nKPX Dcroat comma -30\nKPX Dcroat period -30\nKPX F A -80\nKPX F Aacute -80\nKPX F Abreve -80\nKPX F Acircumflex -80\nKPX F Adieresis -80\nKPX F Agrave -80\nKPX F Amacron -80\nKPX F Aogonek -80\nKPX F Aring -80\nKPX F Atilde -80\nKPX F a -20\nKPX F aacute -20\nKPX F abreve -20\nKPX F acircumflex -20\nKPX F adieresis -20\nKPX F agrave -20\nKPX F amacron -20\nKPX F aogonek -20\nKPX F aring -20\nKPX F atilde -20\nKPX F comma -100\nKPX F period -100\nKPX J A -20\nKPX J Aacute -20\nKPX J Abreve -20\nKPX J Acircumflex -20\nKPX J Adieresis -20\nKPX J Agrave -20\nKPX J Amacron -20\nKPX J Aogonek -20\nKPX J Aring -20\nKPX J Atilde -20\nKPX J comma -20\nKPX J period -20\nKPX J u -20\nKPX J uacute -20\nKPX J ucircumflex -20\nKPX J udieresis -20\nKPX J ugrave -20\nKPX J uhungarumlaut -20\nKPX J umacron -20\nKPX J uogonek -20\nKPX J uring -20\nKPX K O -30\nKPX K Oacute -30\nKPX K Ocircumflex -30\nKPX K Odieresis -30\nKPX K Ograve -30\nKPX K Ohungarumlaut -30\nKPX K Omacron -30\nKPX K Oslash -30\nKPX K Otilde -30\nKPX K e -15\nKPX K eacute -15\nKPX K ecaron -15\nKPX K ecircumflex -15\nKPX K edieresis -15\nKPX K edotaccent -15\nKPX K egrave -15\nKPX K emacron -15\nKPX K eogonek -15\nKPX K o -35\nKPX K oacute -35\nKPX K ocircumflex -35\nKPX K odieresis -35\nKPX K ograve -35\nKPX K ohungarumlaut -35\nKPX K omacron -35\nKPX K oslash -35\nKPX K otilde -35\nKPX K u -30\nKPX K uacute -30\nKPX K ucircumflex -30\nKPX K udieresis -30\nKPX K ugrave -30\nKPX K uhungarumlaut -30\nKPX K umacron -30\nKPX K uogonek -30\nKPX K uring -30\nKPX K y -40\nKPX K yacute -40\nKPX K ydieresis -40\nKPX Kcommaaccent O -30\nKPX Kcommaaccent Oacute -30\nKPX Kcommaaccent Ocircumflex -30\nKPX Kcommaaccent Odieresis -30\nKPX Kcommaaccent Ograve -30\nKPX Kcommaaccent Ohungarumlaut -30\nKPX Kcommaaccent Omacron -30\nKPX Kcommaaccent Oslash -30\nKPX Kcommaaccent Otilde -30\nKPX Kcommaaccent e -15\nKPX Kcommaaccent eacute -15\nKPX Kcommaaccent ecaron -15\nKPX Kcommaaccent ecircumflex -15\nKPX Kcommaaccent edieresis -15\nKPX Kcommaaccent edotaccent -15\nKPX Kcommaaccent egrave -15\nKPX Kcommaaccent emacron -15\nKPX Kcommaaccent eogonek -15\nKPX Kcommaaccent o -35\nKPX Kcommaaccent oacute -35\nKPX Kcommaaccent ocircumflex -35\nKPX Kcommaaccent odieresis -35\nKPX Kcommaaccent ograve -35\nKPX Kcommaaccent ohungarumlaut -35\nKPX Kcommaaccent omacron -35\nKPX Kcommaaccent oslash -35\nKPX Kcommaaccent otilde -35\nKPX Kcommaaccent u -30\nKPX Kcommaaccent uacute -30\nKPX Kcommaaccent ucircumflex -30\nKPX Kcommaaccent udieresis -30\nKPX Kcommaaccent ugrave -30\nKPX Kcommaaccent uhungarumlaut -30\nKPX Kcommaaccent umacron -30\nKPX Kcommaaccent uogonek -30\nKPX Kcommaaccent uring -30\nKPX Kcommaaccent y -40\nKPX Kcommaaccent yacute -40\nKPX Kcommaaccent ydieresis -40\nKPX L T -90\nKPX L Tcaron -90\nKPX L Tcommaaccent -90\nKPX L V -110\nKPX L W -80\nKPX L Y -120\nKPX L Yacute -120\nKPX L Ydieresis -120\nKPX L quotedblright -140\nKPX L quoteright -140\nKPX L y -30\nKPX L yacute -30\nKPX L ydieresis -30\nKPX Lacute T -90\nKPX Lacute Tcaron -90\nKPX Lacute Tcommaaccent -90\nKPX Lacute V -110\nKPX Lacute W -80\nKPX Lacute Y -120\nKPX Lacute Yacute -120\nKPX Lacute Ydieresis -120\nKPX Lacute quotedblright -140\nKPX Lacute quoteright -140\nKPX Lacute y -30\nKPX Lacute yacute -30\nKPX Lacute ydieresis -30\nKPX Lcommaaccent T -90\nKPX Lcommaaccent Tcaron -90\nKPX Lcommaaccent Tcommaaccent -90\nKPX Lcommaaccent V -110\nKPX Lcommaaccent W -80\nKPX Lcommaaccent Y -120\nKPX Lcommaaccent Yacute -120\nKPX Lcommaaccent Ydieresis -120\nKPX Lcommaaccent quotedblright -140\nKPX Lcommaaccent quoteright -140\nKPX Lcommaaccent y -30\nKPX Lcommaaccent yacute -30\nKPX Lcommaaccent ydieresis -30\nKPX Lslash T -90\nKPX Lslash Tcaron -90\nKPX Lslash Tcommaaccent -90\nKPX Lslash V -110\nKPX Lslash W -80\nKPX Lslash Y -120\nKPX Lslash Yacute -120\nKPX Lslash Ydieresis -120\nKPX Lslash quotedblright -140\nKPX Lslash quoteright -140\nKPX Lslash y -30\nKPX Lslash yacute -30\nKPX Lslash ydieresis -30\nKPX O A -50\nKPX O Aacute -50\nKPX O Abreve -50\nKPX O Acircumflex -50\nKPX O Adieresis -50\nKPX O Agrave -50\nKPX O Amacron -50\nKPX O Aogonek -50\nKPX O Aring -50\nKPX O Atilde -50\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -50\nKPX O X -50\nKPX O Y -70\nKPX O Yacute -70\nKPX O Ydieresis -70\nKPX O comma -40\nKPX O period -40\nKPX Oacute A -50\nKPX Oacute Aacute -50\nKPX Oacute Abreve -50\nKPX Oacute Acircumflex -50\nKPX Oacute Adieresis -50\nKPX Oacute Agrave -50\nKPX Oacute Amacron -50\nKPX Oacute Aogonek -50\nKPX Oacute Aring -50\nKPX Oacute Atilde -50\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -50\nKPX Oacute X -50\nKPX Oacute Y -70\nKPX Oacute Yacute -70\nKPX Oacute Ydieresis -70\nKPX Oacute comma -40\nKPX Oacute period -40\nKPX Ocircumflex A -50\nKPX Ocircumflex Aacute -50\nKPX Ocircumflex Abreve -50\nKPX Ocircumflex Acircumflex -50\nKPX Ocircumflex Adieresis -50\nKPX Ocircumflex Agrave -50\nKPX Ocircumflex Amacron -50\nKPX Ocircumflex Aogonek -50\nKPX Ocircumflex Aring -50\nKPX Ocircumflex Atilde -50\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -50\nKPX Ocircumflex X -50\nKPX Ocircumflex Y -70\nKPX Ocircumflex Yacute -70\nKPX Ocircumflex Ydieresis -70\nKPX Ocircumflex comma -40\nKPX Ocircumflex period -40\nKPX Odieresis A -50\nKPX Odieresis Aacute -50\nKPX Odieresis Abreve -50\nKPX Odieresis Acircumflex -50\nKPX Odieresis Adieresis -50\nKPX Odieresis Agrave -50\nKPX Odieresis Amacron -50\nKPX Odieresis Aogonek -50\nKPX Odieresis Aring -50\nKPX Odieresis Atilde -50\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -50\nKPX Odieresis X -50\nKPX Odieresis Y -70\nKPX Odieresis Yacute -70\nKPX Odieresis Ydieresis -70\nKPX Odieresis comma -40\nKPX Odieresis period -40\nKPX Ograve A -50\nKPX Ograve Aacute -50\nKPX Ograve Abreve -50\nKPX Ograve Acircumflex -50\nKPX Ograve Adieresis -50\nKPX Ograve Agrave -50\nKPX Ograve Amacron -50\nKPX Ograve Aogonek -50\nKPX Ograve Aring -50\nKPX Ograve Atilde -50\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -50\nKPX Ograve X -50\nKPX Ograve Y -70\nKPX Ograve Yacute -70\nKPX Ograve Ydieresis -70\nKPX Ograve comma -40\nKPX Ograve period -40\nKPX Ohungarumlaut A -50\nKPX Ohungarumlaut Aacute -50\nKPX Ohungarumlaut Abreve -50\nKPX Ohungarumlaut Acircumflex -50\nKPX Ohungarumlaut Adieresis -50\nKPX Ohungarumlaut Agrave -50\nKPX Ohungarumlaut Amacron -50\nKPX Ohungarumlaut Aogonek -50\nKPX Ohungarumlaut Aring -50\nKPX Ohungarumlaut Atilde -50\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -50\nKPX Ohungarumlaut X -50\nKPX Ohungarumlaut Y -70\nKPX Ohungarumlaut Yacute -70\nKPX Ohungarumlaut Ydieresis -70\nKPX Ohungarumlaut comma -40\nKPX Ohungarumlaut period -40\nKPX Omacron A -50\nKPX Omacron Aacute -50\nKPX Omacron Abreve -50\nKPX Omacron Acircumflex -50\nKPX Omacron Adieresis -50\nKPX Omacron Agrave -50\nKPX Omacron Amacron -50\nKPX Omacron Aogonek -50\nKPX Omacron Aring -50\nKPX Omacron Atilde -50\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -50\nKPX Omacron X -50\nKPX Omacron Y -70\nKPX Omacron Yacute -70\nKPX Omacron Ydieresis -70\nKPX Omacron comma -40\nKPX Omacron period -40\nKPX Oslash A -50\nKPX Oslash Aacute -50\nKPX Oslash Abreve -50\nKPX Oslash Acircumflex -50\nKPX Oslash Adieresis -50\nKPX Oslash Agrave -50\nKPX Oslash Amacron -50\nKPX Oslash Aogonek -50\nKPX Oslash Aring -50\nKPX Oslash Atilde -50\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -50\nKPX Oslash X -50\nKPX Oslash Y -70\nKPX Oslash Yacute -70\nKPX Oslash Ydieresis -70\nKPX Oslash comma -40\nKPX Oslash period -40\nKPX Otilde A -50\nKPX Otilde Aacute -50\nKPX Otilde Abreve -50\nKPX Otilde Acircumflex -50\nKPX Otilde Adieresis -50\nKPX Otilde Agrave -50\nKPX Otilde Amacron -50\nKPX Otilde Aogonek -50\nKPX Otilde Aring -50\nKPX Otilde Atilde -50\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -50\nKPX Otilde X -50\nKPX Otilde Y -70\nKPX Otilde Yacute -70\nKPX Otilde Ydieresis -70\nKPX Otilde comma -40\nKPX Otilde period -40\nKPX P A -100\nKPX P Aacute -100\nKPX P Abreve -100\nKPX P Acircumflex -100\nKPX P Adieresis -100\nKPX P Agrave -100\nKPX P Amacron -100\nKPX P Aogonek -100\nKPX P Aring -100\nKPX P Atilde -100\nKPX P a -30\nKPX P aacute -30\nKPX P abreve -30\nKPX P acircumflex -30\nKPX P adieresis -30\nKPX P agrave -30\nKPX P amacron -30\nKPX P aogonek -30\nKPX P aring -30\nKPX P atilde -30\nKPX P comma -120\nKPX P e -30\nKPX P eacute -30\nKPX P ecaron -30\nKPX P ecircumflex -30\nKPX P edieresis -30\nKPX P edotaccent -30\nKPX P egrave -30\nKPX P emacron -30\nKPX P eogonek -30\nKPX P o -40\nKPX P oacute -40\nKPX P ocircumflex -40\nKPX P odieresis -40\nKPX P ograve -40\nKPX P ohungarumlaut -40\nKPX P omacron -40\nKPX P oslash -40\nKPX P otilde -40\nKPX P period -120\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX Q comma 20\nKPX Q period 20\nKPX R O -20\nKPX R Oacute -20\nKPX R Ocircumflex -20\nKPX R Odieresis -20\nKPX R Ograve -20\nKPX R Ohungarumlaut -20\nKPX R Omacron -20\nKPX R Oslash -20\nKPX R Otilde -20\nKPX R T -20\nKPX R Tcaron -20\nKPX R Tcommaaccent -20\nKPX R U -20\nKPX R Uacute -20\nKPX R Ucircumflex -20\nKPX R Udieresis -20\nKPX R Ugrave -20\nKPX R Uhungarumlaut -20\nKPX R Umacron -20\nKPX R Uogonek -20\nKPX R Uring -20\nKPX R V -50\nKPX R W -40\nKPX R Y -50\nKPX R Yacute -50\nKPX R Ydieresis -50\nKPX Racute O -20\nKPX Racute Oacute -20\nKPX Racute Ocircumflex -20\nKPX Racute Odieresis -20\nKPX Racute Ograve -20\nKPX Racute Ohungarumlaut -20\nKPX Racute Omacron -20\nKPX Racute Oslash -20\nKPX Racute Otilde -20\nKPX Racute T -20\nKPX Racute Tcaron -20\nKPX Racute Tcommaaccent -20\nKPX Racute U -20\nKPX Racute Uacute -20\nKPX Racute Ucircumflex -20\nKPX Racute Udieresis -20\nKPX Racute Ugrave -20\nKPX Racute Uhungarumlaut -20\nKPX Racute Umacron -20\nKPX Racute Uogonek -20\nKPX Racute Uring -20\nKPX Racute V -50\nKPX Racute W -40\nKPX Racute Y -50\nKPX Racute Yacute -50\nKPX Racute Ydieresis -50\nKPX Rcaron O -20\nKPX Rcaron Oacute -20\nKPX Rcaron Ocircumflex -20\nKPX Rcaron Odieresis -20\nKPX Rcaron Ograve -20\nKPX Rcaron Ohungarumlaut -20\nKPX Rcaron Omacron -20\nKPX Rcaron Oslash -20\nKPX Rcaron Otilde -20\nKPX Rcaron T -20\nKPX Rcaron Tcaron -20\nKPX Rcaron Tcommaaccent -20\nKPX Rcaron U -20\nKPX Rcaron Uacute -20\nKPX Rcaron Ucircumflex -20\nKPX Rcaron Udieresis -20\nKPX Rcaron Ugrave -20\nKPX Rcaron Uhungarumlaut -20\nKPX Rcaron Umacron -20\nKPX Rcaron Uogonek -20\nKPX Rcaron Uring -20\nKPX Rcaron V -50\nKPX Rcaron W -40\nKPX Rcaron Y -50\nKPX Rcaron Yacute -50\nKPX Rcaron Ydieresis -50\nKPX Rcommaaccent O -20\nKPX Rcommaaccent Oacute -20\nKPX Rcommaaccent Ocircumflex -20\nKPX Rcommaaccent Odieresis -20\nKPX Rcommaaccent Ograve -20\nKPX Rcommaaccent Ohungarumlaut -20\nKPX Rcommaaccent Omacron -20\nKPX Rcommaaccent Oslash -20\nKPX Rcommaaccent Otilde -20\nKPX Rcommaaccent T -20\nKPX Rcommaaccent Tcaron -20\nKPX Rcommaaccent Tcommaaccent -20\nKPX Rcommaaccent U -20\nKPX Rcommaaccent Uacute -20\nKPX Rcommaaccent Ucircumflex -20\nKPX Rcommaaccent Udieresis -20\nKPX Rcommaaccent Ugrave -20\nKPX Rcommaaccent Uhungarumlaut -20\nKPX Rcommaaccent Umacron -20\nKPX Rcommaaccent Uogonek -20\nKPX Rcommaaccent Uring -20\nKPX Rcommaaccent V -50\nKPX Rcommaaccent W -40\nKPX Rcommaaccent Y -50\nKPX Rcommaaccent Yacute -50\nKPX Rcommaaccent Ydieresis -50\nKPX T A -90\nKPX T Aacute -90\nKPX T Abreve -90\nKPX T Acircumflex -90\nKPX T Adieresis -90\nKPX T Agrave -90\nKPX T Amacron -90\nKPX T Aogonek -90\nKPX T Aring -90\nKPX T Atilde -90\nKPX T O -40\nKPX T Oacute -40\nKPX T Ocircumflex -40\nKPX T Odieresis -40\nKPX T Ograve -40\nKPX T Ohungarumlaut -40\nKPX T Omacron -40\nKPX T Oslash -40\nKPX T Otilde -40\nKPX T a -80\nKPX T aacute -80\nKPX T abreve -80\nKPX T acircumflex -80\nKPX T adieresis -80\nKPX T agrave -80\nKPX T amacron -80\nKPX T aogonek -80\nKPX T aring -80\nKPX T atilde -80\nKPX T colon -40\nKPX T comma -80\nKPX T e -60\nKPX T eacute -60\nKPX T ecaron -60\nKPX T ecircumflex -60\nKPX T edieresis -60\nKPX T edotaccent -60\nKPX T egrave -60\nKPX T emacron -60\nKPX T eogonek -60\nKPX T hyphen -120\nKPX T o -80\nKPX T oacute -80\nKPX T ocircumflex -80\nKPX T odieresis -80\nKPX T ograve -80\nKPX T ohungarumlaut -80\nKPX T omacron -80\nKPX T oslash -80\nKPX T otilde -80\nKPX T period -80\nKPX T r -80\nKPX T racute -80\nKPX T rcommaaccent -80\nKPX T semicolon -40\nKPX T u -90\nKPX T uacute -90\nKPX T ucircumflex -90\nKPX T udieresis -90\nKPX T ugrave -90\nKPX T uhungarumlaut -90\nKPX T umacron -90\nKPX T uogonek -90\nKPX T uring -90\nKPX T w -60\nKPX T y -60\nKPX T yacute -60\nKPX T ydieresis -60\nKPX Tcaron A -90\nKPX Tcaron Aacute -90\nKPX Tcaron Abreve -90\nKPX Tcaron Acircumflex -90\nKPX Tcaron Adieresis -90\nKPX Tcaron Agrave -90\nKPX Tcaron Amacron -90\nKPX Tcaron Aogonek -90\nKPX Tcaron Aring -90\nKPX Tcaron Atilde -90\nKPX Tcaron O -40\nKPX Tcaron Oacute -40\nKPX Tcaron Ocircumflex -40\nKPX Tcaron Odieresis -40\nKPX Tcaron Ograve -40\nKPX Tcaron Ohungarumlaut -40\nKPX Tcaron Omacron -40\nKPX Tcaron Oslash -40\nKPX Tcaron Otilde -40\nKPX Tcaron a -80\nKPX Tcaron aacute -80\nKPX Tcaron abreve -80\nKPX Tcaron acircumflex -80\nKPX Tcaron adieresis -80\nKPX Tcaron agrave -80\nKPX Tcaron amacron -80\nKPX Tcaron aogonek -80\nKPX Tcaron aring -80\nKPX Tcaron atilde -80\nKPX Tcaron colon -40\nKPX Tcaron comma -80\nKPX Tcaron e -60\nKPX Tcaron eacute -60\nKPX Tcaron ecaron -60\nKPX Tcaron ecircumflex -60\nKPX Tcaron edieresis -60\nKPX Tcaron edotaccent -60\nKPX Tcaron egrave -60\nKPX Tcaron emacron -60\nKPX Tcaron eogonek -60\nKPX Tcaron hyphen -120\nKPX Tcaron o -80\nKPX Tcaron oacute -80\nKPX Tcaron ocircumflex -80\nKPX Tcaron odieresis -80\nKPX Tcaron ograve -80\nKPX Tcaron ohungarumlaut -80\nKPX Tcaron omacron -80\nKPX Tcaron oslash -80\nKPX Tcaron otilde -80\nKPX Tcaron period -80\nKPX Tcaron r -80\nKPX Tcaron racute -80\nKPX Tcaron rcommaaccent -80\nKPX Tcaron semicolon -40\nKPX Tcaron u -90\nKPX Tcaron uacute -90\nKPX Tcaron ucircumflex -90\nKPX Tcaron udieresis -90\nKPX Tcaron ugrave -90\nKPX Tcaron uhungarumlaut -90\nKPX Tcaron umacron -90\nKPX Tcaron uogonek -90\nKPX Tcaron uring -90\nKPX Tcaron w -60\nKPX Tcaron y -60\nKPX Tcaron yacute -60\nKPX Tcaron ydieresis -60\nKPX Tcommaaccent A -90\nKPX Tcommaaccent Aacute -90\nKPX Tcommaaccent Abreve -90\nKPX Tcommaaccent Acircumflex -90\nKPX Tcommaaccent Adieresis -90\nKPX Tcommaaccent Agrave -90\nKPX Tcommaaccent Amacron -90\nKPX Tcommaaccent Aogonek -90\nKPX Tcommaaccent Aring -90\nKPX Tcommaaccent Atilde -90\nKPX Tcommaaccent O -40\nKPX Tcommaaccent Oacute -40\nKPX Tcommaaccent Ocircumflex -40\nKPX Tcommaaccent Odieresis -40\nKPX Tcommaaccent Ograve -40\nKPX Tcommaaccent Ohungarumlaut -40\nKPX Tcommaaccent Omacron -40\nKPX Tcommaaccent Oslash -40\nKPX Tcommaaccent Otilde -40\nKPX Tcommaaccent a -80\nKPX Tcommaaccent aacute -80\nKPX Tcommaaccent abreve -80\nKPX Tcommaaccent acircumflex -80\nKPX Tcommaaccent adieresis -80\nKPX Tcommaaccent agrave -80\nKPX Tcommaaccent amacron -80\nKPX Tcommaaccent aogonek -80\nKPX Tcommaaccent aring -80\nKPX Tcommaaccent atilde -80\nKPX Tcommaaccent colon -40\nKPX Tcommaaccent comma -80\nKPX Tcommaaccent e -60\nKPX Tcommaaccent eacute -60\nKPX Tcommaaccent ecaron -60\nKPX Tcommaaccent ecircumflex -60\nKPX Tcommaaccent edieresis -60\nKPX Tcommaaccent edotaccent -60\nKPX Tcommaaccent egrave -60\nKPX Tcommaaccent emacron -60\nKPX Tcommaaccent eogonek -60\nKPX Tcommaaccent hyphen -120\nKPX Tcommaaccent o -80\nKPX Tcommaaccent oacute -80\nKPX Tcommaaccent ocircumflex -80\nKPX Tcommaaccent odieresis -80\nKPX Tcommaaccent ograve -80\nKPX Tcommaaccent ohungarumlaut -80\nKPX Tcommaaccent omacron -80\nKPX Tcommaaccent oslash -80\nKPX Tcommaaccent otilde -80\nKPX Tcommaaccent period -80\nKPX Tcommaaccent r -80\nKPX Tcommaaccent racute -80\nKPX Tcommaaccent rcommaaccent -80\nKPX Tcommaaccent semicolon -40\nKPX Tcommaaccent u -90\nKPX Tcommaaccent uacute -90\nKPX Tcommaaccent ucircumflex -90\nKPX Tcommaaccent udieresis -90\nKPX Tcommaaccent ugrave -90\nKPX Tcommaaccent uhungarumlaut -90\nKPX Tcommaaccent umacron -90\nKPX Tcommaaccent uogonek -90\nKPX Tcommaaccent uring -90\nKPX Tcommaaccent w -60\nKPX Tcommaaccent y -60\nKPX Tcommaaccent yacute -60\nKPX Tcommaaccent ydieresis -60\nKPX U A -50\nKPX U Aacute -50\nKPX U Abreve -50\nKPX U Acircumflex -50\nKPX U Adieresis -50\nKPX U Agrave -50\nKPX U Amacron -50\nKPX U Aogonek -50\nKPX U Aring -50\nKPX U Atilde -50\nKPX U comma -30\nKPX U period -30\nKPX Uacute A -50\nKPX Uacute Aacute -50\nKPX Uacute Abreve -50\nKPX Uacute Acircumflex -50\nKPX Uacute Adieresis -50\nKPX Uacute Agrave -50\nKPX Uacute Amacron -50\nKPX Uacute Aogonek -50\nKPX Uacute Aring -50\nKPX Uacute Atilde -50\nKPX Uacute comma -30\nKPX Uacute period -30\nKPX Ucircumflex A -50\nKPX Ucircumflex Aacute -50\nKPX Ucircumflex Abreve -50\nKPX Ucircumflex Acircumflex -50\nKPX Ucircumflex Adieresis -50\nKPX Ucircumflex Agrave -50\nKPX Ucircumflex Amacron -50\nKPX Ucircumflex Aogonek -50\nKPX Ucircumflex Aring -50\nKPX Ucircumflex Atilde -50\nKPX Ucircumflex comma -30\nKPX Ucircumflex period -30\nKPX Udieresis A -50\nKPX Udieresis Aacute -50\nKPX Udieresis Abreve -50\nKPX Udieresis Acircumflex -50\nKPX Udieresis Adieresis -50\nKPX Udieresis Agrave -50\nKPX Udieresis Amacron -50\nKPX Udieresis Aogonek -50\nKPX Udieresis Aring -50\nKPX Udieresis Atilde -50\nKPX Udieresis comma -30\nKPX Udieresis period -30\nKPX Ugrave A -50\nKPX Ugrave Aacute -50\nKPX Ugrave Abreve -50\nKPX Ugrave Acircumflex -50\nKPX Ugrave Adieresis -50\nKPX Ugrave Agrave -50\nKPX Ugrave Amacron -50\nKPX Ugrave Aogonek -50\nKPX Ugrave Aring -50\nKPX Ugrave Atilde -50\nKPX Ugrave comma -30\nKPX Ugrave period -30\nKPX Uhungarumlaut A -50\nKPX Uhungarumlaut Aacute -50\nKPX Uhungarumlaut Abreve -50\nKPX Uhungarumlaut Acircumflex -50\nKPX Uhungarumlaut Adieresis -50\nKPX Uhungarumlaut Agrave -50\nKPX Uhungarumlaut Amacron -50\nKPX Uhungarumlaut Aogonek -50\nKPX Uhungarumlaut Aring -50\nKPX Uhungarumlaut Atilde -50\nKPX Uhungarumlaut comma -30\nKPX Uhungarumlaut period -30\nKPX Umacron A -50\nKPX Umacron Aacute -50\nKPX Umacron Abreve -50\nKPX Umacron Acircumflex -50\nKPX Umacron Adieresis -50\nKPX Umacron Agrave -50\nKPX Umacron Amacron -50\nKPX Umacron Aogonek -50\nKPX Umacron Aring -50\nKPX Umacron Atilde -50\nKPX Umacron comma -30\nKPX Umacron period -30\nKPX Uogonek A -50\nKPX Uogonek Aacute -50\nKPX Uogonek Abreve -50\nKPX Uogonek Acircumflex -50\nKPX Uogonek Adieresis -50\nKPX Uogonek Agrave -50\nKPX Uogonek Amacron -50\nKPX Uogonek Aogonek -50\nKPX Uogonek Aring -50\nKPX Uogonek Atilde -50\nKPX Uogonek comma -30\nKPX Uogonek period -30\nKPX Uring A -50\nKPX Uring Aacute -50\nKPX Uring Abreve -50\nKPX Uring Acircumflex -50\nKPX Uring Adieresis -50\nKPX Uring Agrave -50\nKPX Uring Amacron -50\nKPX Uring Aogonek -50\nKPX Uring Aring -50\nKPX Uring Atilde -50\nKPX Uring comma -30\nKPX Uring period -30\nKPX V A -80\nKPX V Aacute -80\nKPX V Abreve -80\nKPX V Acircumflex -80\nKPX V Adieresis -80\nKPX V Agrave -80\nKPX V Amacron -80\nKPX V Aogonek -80\nKPX V Aring -80\nKPX V Atilde -80\nKPX V G -50\nKPX V Gbreve -50\nKPX V Gcommaaccent -50\nKPX V O -50\nKPX V Oacute -50\nKPX V Ocircumflex -50\nKPX V Odieresis -50\nKPX V Ograve -50\nKPX V Ohungarumlaut -50\nKPX V Omacron -50\nKPX V Oslash -50\nKPX V Otilde -50\nKPX V a -60\nKPX V aacute -60\nKPX V abreve -60\nKPX V acircumflex -60\nKPX V adieresis -60\nKPX V agrave -60\nKPX V amacron -60\nKPX V aogonek -60\nKPX V aring -60\nKPX V atilde -60\nKPX V colon -40\nKPX V comma -120\nKPX V e -50\nKPX V eacute -50\nKPX V ecaron -50\nKPX V ecircumflex -50\nKPX V edieresis -50\nKPX V edotaccent -50\nKPX V egrave -50\nKPX V emacron -50\nKPX V eogonek -50\nKPX V hyphen -80\nKPX V o -90\nKPX V oacute -90\nKPX V ocircumflex -90\nKPX V odieresis -90\nKPX V ograve -90\nKPX V ohungarumlaut -90\nKPX V omacron -90\nKPX V oslash -90\nKPX V otilde -90\nKPX V period -120\nKPX V semicolon -40\nKPX V u -60\nKPX V uacute -60\nKPX V ucircumflex -60\nKPX V udieresis -60\nKPX V ugrave -60\nKPX V uhungarumlaut -60\nKPX V umacron -60\nKPX V uogonek -60\nKPX V uring -60\nKPX W A -60\nKPX W Aacute -60\nKPX W Abreve -60\nKPX W Acircumflex -60\nKPX W Adieresis -60\nKPX W Agrave -60\nKPX W Amacron -60\nKPX W Aogonek -60\nKPX W Aring -60\nKPX W Atilde -60\nKPX W O -20\nKPX W Oacute -20\nKPX W Ocircumflex -20\nKPX W Odieresis -20\nKPX W Ograve -20\nKPX W Ohungarumlaut -20\nKPX W Omacron -20\nKPX W Oslash -20\nKPX W Otilde -20\nKPX W a -40\nKPX W aacute -40\nKPX W abreve -40\nKPX W acircumflex -40\nKPX W adieresis -40\nKPX W agrave -40\nKPX W amacron -40\nKPX W aogonek -40\nKPX W aring -40\nKPX W atilde -40\nKPX W colon -10\nKPX W comma -80\nKPX W e -35\nKPX W eacute -35\nKPX W ecaron -35\nKPX W ecircumflex -35\nKPX W edieresis -35\nKPX W edotaccent -35\nKPX W egrave -35\nKPX W emacron -35\nKPX W eogonek -35\nKPX W hyphen -40\nKPX W o -60\nKPX W oacute -60\nKPX W ocircumflex -60\nKPX W odieresis -60\nKPX W ograve -60\nKPX W ohungarumlaut -60\nKPX W omacron -60\nKPX W oslash -60\nKPX W otilde -60\nKPX W period -80\nKPX W semicolon -10\nKPX W u -45\nKPX W uacute -45\nKPX W ucircumflex -45\nKPX W udieresis -45\nKPX W ugrave -45\nKPX W uhungarumlaut -45\nKPX W umacron -45\nKPX W uogonek -45\nKPX W uring -45\nKPX W y -20\nKPX W yacute -20\nKPX W ydieresis -20\nKPX Y A -110\nKPX Y Aacute -110\nKPX Y Abreve -110\nKPX Y Acircumflex -110\nKPX Y Adieresis -110\nKPX Y Agrave -110\nKPX Y Amacron -110\nKPX Y Aogonek -110\nKPX Y Aring -110\nKPX Y Atilde -110\nKPX Y O -70\nKPX Y Oacute -70\nKPX Y Ocircumflex -70\nKPX Y Odieresis -70\nKPX Y Ograve -70\nKPX Y Ohungarumlaut -70\nKPX Y Omacron -70\nKPX Y Oslash -70\nKPX Y Otilde -70\nKPX Y a -90\nKPX Y aacute -90\nKPX Y abreve -90\nKPX Y acircumflex -90\nKPX Y adieresis -90\nKPX Y agrave -90\nKPX Y amacron -90\nKPX Y aogonek -90\nKPX Y aring -90\nKPX Y atilde -90\nKPX Y colon -50\nKPX Y comma -100\nKPX Y e -80\nKPX Y eacute -80\nKPX Y ecaron -80\nKPX Y ecircumflex -80\nKPX Y edieresis -80\nKPX Y edotaccent -80\nKPX Y egrave -80\nKPX Y emacron -80\nKPX Y eogonek -80\nKPX Y o -100\nKPX Y oacute -100\nKPX Y ocircumflex -100\nKPX Y odieresis -100\nKPX Y ograve -100\nKPX Y ohungarumlaut -100\nKPX Y omacron -100\nKPX Y oslash -100\nKPX Y otilde -100\nKPX Y period -100\nKPX Y semicolon -50\nKPX Y u -100\nKPX Y uacute -100\nKPX Y ucircumflex -100\nKPX Y udieresis -100\nKPX Y ugrave -100\nKPX Y uhungarumlaut -100\nKPX Y umacron -100\nKPX Y uogonek -100\nKPX Y uring -100\nKPX Yacute A -110\nKPX Yacute Aacute -110\nKPX Yacute Abreve -110\nKPX Yacute Acircumflex -110\nKPX Yacute Adieresis -110\nKPX Yacute Agrave -110\nKPX Yacute Amacron -110\nKPX Yacute Aogonek -110\nKPX Yacute Aring -110\nKPX Yacute Atilde -110\nKPX Yacute O -70\nKPX Yacute Oacute -70\nKPX Yacute Ocircumflex -70\nKPX Yacute Odieresis -70\nKPX Yacute Ograve -70\nKPX Yacute Ohungarumlaut -70\nKPX Yacute Omacron -70\nKPX Yacute Oslash -70\nKPX Yacute Otilde -70\nKPX Yacute a -90\nKPX Yacute aacute -90\nKPX Yacute abreve -90\nKPX Yacute acircumflex -90\nKPX Yacute adieresis -90\nKPX Yacute agrave -90\nKPX Yacute amacron -90\nKPX Yacute aogonek -90\nKPX Yacute aring -90\nKPX Yacute atilde -90\nKPX Yacute colon -50\nKPX Yacute comma -100\nKPX Yacute e -80\nKPX Yacute eacute -80\nKPX Yacute ecaron -80\nKPX Yacute ecircumflex -80\nKPX Yacute edieresis -80\nKPX Yacute edotaccent -80\nKPX Yacute egrave -80\nKPX Yacute emacron -80\nKPX Yacute eogonek -80\nKPX Yacute o -100\nKPX Yacute oacute -100\nKPX Yacute ocircumflex -100\nKPX Yacute odieresis -100\nKPX Yacute ograve -100\nKPX Yacute ohungarumlaut -100\nKPX Yacute omacron -100\nKPX Yacute oslash -100\nKPX Yacute otilde -100\nKPX Yacute period -100\nKPX Yacute semicolon -50\nKPX Yacute u -100\nKPX Yacute uacute -100\nKPX Yacute ucircumflex -100\nKPX Yacute udieresis -100\nKPX Yacute ugrave -100\nKPX Yacute uhungarumlaut -100\nKPX Yacute umacron -100\nKPX Yacute uogonek -100\nKPX Yacute uring -100\nKPX Ydieresis A -110\nKPX Ydieresis Aacute -110\nKPX Ydieresis Abreve -110\nKPX Ydieresis Acircumflex -110\nKPX Ydieresis Adieresis -110\nKPX Ydieresis Agrave -110\nKPX Ydieresis Amacron -110\nKPX Ydieresis Aogonek -110\nKPX Ydieresis Aring -110\nKPX Ydieresis Atilde -110\nKPX Ydieresis O -70\nKPX Ydieresis Oacute -70\nKPX Ydieresis Ocircumflex -70\nKPX Ydieresis Odieresis -70\nKPX Ydieresis Ograve -70\nKPX Ydieresis Ohungarumlaut -70\nKPX Ydieresis Omacron -70\nKPX Ydieresis Oslash -70\nKPX Ydieresis Otilde -70\nKPX Ydieresis a -90\nKPX Ydieresis aacute -90\nKPX Ydieresis abreve -90\nKPX Ydieresis acircumflex -90\nKPX Ydieresis adieresis -90\nKPX Ydieresis agrave -90\nKPX Ydieresis amacron -90\nKPX Ydieresis aogonek -90\nKPX Ydieresis aring -90\nKPX Ydieresis atilde -90\nKPX Ydieresis colon -50\nKPX Ydieresis comma -100\nKPX Ydieresis e -80\nKPX Ydieresis eacute -80\nKPX Ydieresis ecaron -80\nKPX Ydieresis ecircumflex -80\nKPX Ydieresis edieresis -80\nKPX Ydieresis edotaccent -80\nKPX Ydieresis egrave -80\nKPX Ydieresis emacron -80\nKPX Ydieresis eogonek -80\nKPX Ydieresis o -100\nKPX Ydieresis oacute -100\nKPX Ydieresis ocircumflex -100\nKPX Ydieresis odieresis -100\nKPX Ydieresis ograve -100\nKPX Ydieresis ohungarumlaut -100\nKPX Ydieresis omacron -100\nKPX Ydieresis oslash -100\nKPX Ydieresis otilde -100\nKPX Ydieresis period -100\nKPX Ydieresis semicolon -50\nKPX Ydieresis u -100\nKPX Ydieresis uacute -100\nKPX Ydieresis ucircumflex -100\nKPX Ydieresis udieresis -100\nKPX Ydieresis ugrave -100\nKPX Ydieresis uhungarumlaut -100\nKPX Ydieresis umacron -100\nKPX Ydieresis uogonek -100\nKPX Ydieresis uring -100\nKPX a g -10\nKPX a gbreve -10\nKPX a gcommaaccent -10\nKPX a v -15\nKPX a w -15\nKPX a y -20\nKPX a yacute -20\nKPX a ydieresis -20\nKPX aacute g -10\nKPX aacute gbreve -10\nKPX aacute gcommaaccent -10\nKPX aacute v -15\nKPX aacute w -15\nKPX aacute y -20\nKPX aacute yacute -20\nKPX aacute ydieresis -20\nKPX abreve g -10\nKPX abreve gbreve -10\nKPX abreve gcommaaccent -10\nKPX abreve v -15\nKPX abreve w -15\nKPX abreve y -20\nKPX abreve yacute -20\nKPX abreve ydieresis -20\nKPX acircumflex g -10\nKPX acircumflex gbreve -10\nKPX acircumflex gcommaaccent -10\nKPX acircumflex v -15\nKPX acircumflex w -15\nKPX acircumflex y -20\nKPX acircumflex yacute -20\nKPX acircumflex ydieresis -20\nKPX adieresis g -10\nKPX adieresis gbreve -10\nKPX adieresis gcommaaccent -10\nKPX adieresis v -15\nKPX adieresis w -15\nKPX adieresis y -20\nKPX adieresis yacute -20\nKPX adieresis ydieresis -20\nKPX agrave g -10\nKPX agrave gbreve -10\nKPX agrave gcommaaccent -10\nKPX agrave v -15\nKPX agrave w -15\nKPX agrave y -20\nKPX agrave yacute -20\nKPX agrave ydieresis -20\nKPX amacron g -10\nKPX amacron gbreve -10\nKPX amacron gcommaaccent -10\nKPX amacron v -15\nKPX amacron w -15\nKPX amacron y -20\nKPX amacron yacute -20\nKPX amacron ydieresis -20\nKPX aogonek g -10\nKPX aogonek gbreve -10\nKPX aogonek gcommaaccent -10\nKPX aogonek v -15\nKPX aogonek w -15\nKPX aogonek y -20\nKPX aogonek yacute -20\nKPX aogonek ydieresis -20\nKPX aring g -10\nKPX aring gbreve -10\nKPX aring gcommaaccent -10\nKPX aring v -15\nKPX aring w -15\nKPX aring y -20\nKPX aring yacute -20\nKPX aring ydieresis -20\nKPX atilde g -10\nKPX atilde gbreve -10\nKPX atilde gcommaaccent -10\nKPX atilde v -15\nKPX atilde w -15\nKPX atilde y -20\nKPX atilde yacute -20\nKPX atilde ydieresis -20\nKPX b l -10\nKPX b lacute -10\nKPX b lcommaaccent -10\nKPX b lslash -10\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX b v -20\nKPX b y -20\nKPX b yacute -20\nKPX b ydieresis -20\nKPX c h -10\nKPX c k -20\nKPX c kcommaaccent -20\nKPX c l -20\nKPX c lacute -20\nKPX c lcommaaccent -20\nKPX c lslash -20\nKPX c y -10\nKPX c yacute -10\nKPX c ydieresis -10\nKPX cacute h -10\nKPX cacute k -20\nKPX cacute kcommaaccent -20\nKPX cacute l -20\nKPX cacute lacute -20\nKPX cacute lcommaaccent -20\nKPX cacute lslash -20\nKPX cacute y -10\nKPX cacute yacute -10\nKPX cacute ydieresis -10\nKPX ccaron h -10\nKPX ccaron k -20\nKPX ccaron kcommaaccent -20\nKPX ccaron l -20\nKPX ccaron lacute -20\nKPX ccaron lcommaaccent -20\nKPX ccaron lslash -20\nKPX ccaron y -10\nKPX ccaron yacute -10\nKPX ccaron ydieresis -10\nKPX ccedilla h -10\nKPX ccedilla k -20\nKPX ccedilla kcommaaccent -20\nKPX ccedilla l -20\nKPX ccedilla lacute -20\nKPX ccedilla lcommaaccent -20\nKPX ccedilla lslash -20\nKPX ccedilla y -10\nKPX ccedilla yacute -10\nKPX ccedilla ydieresis -10\nKPX colon space -40\nKPX comma quotedblright -120\nKPX comma quoteright -120\nKPX comma space -40\nKPX d d -10\nKPX d dcroat -10\nKPX d v -15\nKPX d w -15\nKPX d y -15\nKPX d yacute -15\nKPX d ydieresis -15\nKPX dcroat d -10\nKPX dcroat dcroat -10\nKPX dcroat v -15\nKPX dcroat w -15\nKPX dcroat y -15\nKPX dcroat yacute -15\nKPX dcroat ydieresis -15\nKPX e comma 10\nKPX e period 20\nKPX e v -15\nKPX e w -15\nKPX e x -15\nKPX e y -15\nKPX e yacute -15\nKPX e ydieresis -15\nKPX eacute comma 10\nKPX eacute period 20\nKPX eacute v -15\nKPX eacute w -15\nKPX eacute x -15\nKPX eacute y -15\nKPX eacute yacute -15\nKPX eacute ydieresis -15\nKPX ecaron comma 10\nKPX ecaron period 20\nKPX ecaron v -15\nKPX ecaron w -15\nKPX ecaron x -15\nKPX ecaron y -15\nKPX ecaron yacute -15\nKPX ecaron ydieresis -15\nKPX ecircumflex comma 10\nKPX ecircumflex period 20\nKPX ecircumflex v -15\nKPX ecircumflex w -15\nKPX ecircumflex x -15\nKPX ecircumflex y -15\nKPX ecircumflex yacute -15\nKPX ecircumflex ydieresis -15\nKPX edieresis comma 10\nKPX edieresis period 20\nKPX edieresis v -15\nKPX edieresis w -15\nKPX edieresis x -15\nKPX edieresis y -15\nKPX edieresis yacute -15\nKPX edieresis ydieresis -15\nKPX edotaccent comma 10\nKPX edotaccent period 20\nKPX edotaccent v -15\nKPX edotaccent w -15\nKPX edotaccent x -15\nKPX edotaccent y -15\nKPX edotaccent yacute -15\nKPX edotaccent ydieresis -15\nKPX egrave comma 10\nKPX egrave period 20\nKPX egrave v -15\nKPX egrave w -15\nKPX egrave x -15\nKPX egrave y -15\nKPX egrave yacute -15\nKPX egrave ydieresis -15\nKPX emacron comma 10\nKPX emacron period 20\nKPX emacron v -15\nKPX emacron w -15\nKPX emacron x -15\nKPX emacron y -15\nKPX emacron yacute -15\nKPX emacron ydieresis -15\nKPX eogonek comma 10\nKPX eogonek period 20\nKPX eogonek v -15\nKPX eogonek w -15\nKPX eogonek x -15\nKPX eogonek y -15\nKPX eogonek yacute -15\nKPX eogonek ydieresis -15\nKPX f comma -10\nKPX f e -10\nKPX f eacute -10\nKPX f ecaron -10\nKPX f ecircumflex -10\nKPX f edieresis -10\nKPX f edotaccent -10\nKPX f egrave -10\nKPX f emacron -10\nKPX f eogonek -10\nKPX f o -20\nKPX f oacute -20\nKPX f ocircumflex -20\nKPX f odieresis -20\nKPX f ograve -20\nKPX f ohungarumlaut -20\nKPX f omacron -20\nKPX f oslash -20\nKPX f otilde -20\nKPX f period -10\nKPX f quotedblright 30\nKPX f quoteright 30\nKPX g e 10\nKPX g eacute 10\nKPX g ecaron 10\nKPX g ecircumflex 10\nKPX g edieresis 10\nKPX g edotaccent 10\nKPX g egrave 10\nKPX g emacron 10\nKPX g eogonek 10\nKPX g g -10\nKPX g gbreve -10\nKPX g gcommaaccent -10\nKPX gbreve e 10\nKPX gbreve eacute 10\nKPX gbreve ecaron 10\nKPX gbreve ecircumflex 10\nKPX gbreve edieresis 10\nKPX gbreve edotaccent 10\nKPX gbreve egrave 10\nKPX gbreve emacron 10\nKPX gbreve eogonek 10\nKPX gbreve g -10\nKPX gbreve gbreve -10\nKPX gbreve gcommaaccent -10\nKPX gcommaaccent e 10\nKPX gcommaaccent eacute 10\nKPX gcommaaccent ecaron 10\nKPX gcommaaccent ecircumflex 10\nKPX gcommaaccent edieresis 10\nKPX gcommaaccent edotaccent 10\nKPX gcommaaccent egrave 10\nKPX gcommaaccent emacron 10\nKPX gcommaaccent eogonek 10\nKPX gcommaaccent g -10\nKPX gcommaaccent gbreve -10\nKPX gcommaaccent gcommaaccent -10\nKPX h y -20\nKPX h yacute -20\nKPX h ydieresis -20\nKPX k o -15\nKPX k oacute -15\nKPX k ocircumflex -15\nKPX k odieresis -15\nKPX k ograve -15\nKPX k ohungarumlaut -15\nKPX k omacron -15\nKPX k oslash -15\nKPX k otilde -15\nKPX kcommaaccent o -15\nKPX kcommaaccent oacute -15\nKPX kcommaaccent ocircumflex -15\nKPX kcommaaccent odieresis -15\nKPX kcommaaccent ograve -15\nKPX kcommaaccent ohungarumlaut -15\nKPX kcommaaccent omacron -15\nKPX kcommaaccent oslash -15\nKPX kcommaaccent otilde -15\nKPX l w -15\nKPX l y -15\nKPX l yacute -15\nKPX l ydieresis -15\nKPX lacute w -15\nKPX lacute y -15\nKPX lacute yacute -15\nKPX lacute ydieresis -15\nKPX lcommaaccent w -15\nKPX lcommaaccent y -15\nKPX lcommaaccent yacute -15\nKPX lcommaaccent ydieresis -15\nKPX lslash w -15\nKPX lslash y -15\nKPX lslash yacute -15\nKPX lslash ydieresis -15\nKPX m u -20\nKPX m uacute -20\nKPX m ucircumflex -20\nKPX m udieresis -20\nKPX m ugrave -20\nKPX m uhungarumlaut -20\nKPX m umacron -20\nKPX m uogonek -20\nKPX m uring -20\nKPX m y -30\nKPX m yacute -30\nKPX m ydieresis -30\nKPX n u -10\nKPX n uacute -10\nKPX n ucircumflex -10\nKPX n udieresis -10\nKPX n ugrave -10\nKPX n uhungarumlaut -10\nKPX n umacron -10\nKPX n uogonek -10\nKPX n uring -10\nKPX n v -40\nKPX n y -20\nKPX n yacute -20\nKPX n ydieresis -20\nKPX nacute u -10\nKPX nacute uacute -10\nKPX nacute ucircumflex -10\nKPX nacute udieresis -10\nKPX nacute ugrave -10\nKPX nacute uhungarumlaut -10\nKPX nacute umacron -10\nKPX nacute uogonek -10\nKPX nacute uring -10\nKPX nacute v -40\nKPX nacute y -20\nKPX nacute yacute -20\nKPX nacute ydieresis -20\nKPX ncaron u -10\nKPX ncaron uacute -10\nKPX ncaron ucircumflex -10\nKPX ncaron udieresis -10\nKPX ncaron ugrave -10\nKPX ncaron uhungarumlaut -10\nKPX ncaron umacron -10\nKPX ncaron uogonek -10\nKPX ncaron uring -10\nKPX ncaron v -40\nKPX ncaron y -20\nKPX ncaron yacute -20\nKPX ncaron ydieresis -20\nKPX ncommaaccent u -10\nKPX ncommaaccent uacute -10\nKPX ncommaaccent ucircumflex -10\nKPX ncommaaccent udieresis -10\nKPX ncommaaccent ugrave -10\nKPX ncommaaccent uhungarumlaut -10\nKPX ncommaaccent umacron -10\nKPX ncommaaccent uogonek -10\nKPX ncommaaccent uring -10\nKPX ncommaaccent v -40\nKPX ncommaaccent y -20\nKPX ncommaaccent yacute -20\nKPX ncommaaccent ydieresis -20\nKPX ntilde u -10\nKPX ntilde uacute -10\nKPX ntilde ucircumflex -10\nKPX ntilde udieresis -10\nKPX ntilde ugrave -10\nKPX ntilde uhungarumlaut -10\nKPX ntilde umacron -10\nKPX ntilde uogonek -10\nKPX ntilde uring -10\nKPX ntilde v -40\nKPX ntilde y -20\nKPX ntilde yacute -20\nKPX ntilde ydieresis -20\nKPX o v -20\nKPX o w -15\nKPX o x -30\nKPX o y -20\nKPX o yacute -20\nKPX o ydieresis -20\nKPX oacute v -20\nKPX oacute w -15\nKPX oacute x -30\nKPX oacute y -20\nKPX oacute yacute -20\nKPX oacute ydieresis -20\nKPX ocircumflex v -20\nKPX ocircumflex w -15\nKPX ocircumflex x -30\nKPX ocircumflex y -20\nKPX ocircumflex yacute -20\nKPX ocircumflex ydieresis -20\nKPX odieresis v -20\nKPX odieresis w -15\nKPX odieresis x -30\nKPX odieresis y -20\nKPX odieresis yacute -20\nKPX odieresis ydieresis -20\nKPX ograve v -20\nKPX ograve w -15\nKPX ograve x -30\nKPX ograve y -20\nKPX ograve yacute -20\nKPX ograve ydieresis -20\nKPX ohungarumlaut v -20\nKPX ohungarumlaut w -15\nKPX ohungarumlaut x -30\nKPX ohungarumlaut y -20\nKPX ohungarumlaut yacute -20\nKPX ohungarumlaut ydieresis -20\nKPX omacron v -20\nKPX omacron w -15\nKPX omacron x -30\nKPX omacron y -20\nKPX omacron yacute -20\nKPX omacron ydieresis -20\nKPX oslash v -20\nKPX oslash w -15\nKPX oslash x -30\nKPX oslash y -20\nKPX oslash yacute -20\nKPX oslash ydieresis -20\nKPX otilde v -20\nKPX otilde w -15\nKPX otilde x -30\nKPX otilde y -20\nKPX otilde yacute -20\nKPX otilde ydieresis -20\nKPX p y -15\nKPX p yacute -15\nKPX p ydieresis -15\nKPX period quotedblright -120\nKPX period quoteright -120\nKPX period space -40\nKPX quotedblright space -80\nKPX quoteleft quoteleft -46\nKPX quoteright d -80\nKPX quoteright dcroat -80\nKPX quoteright l -20\nKPX quoteright lacute -20\nKPX quoteright lcommaaccent -20\nKPX quoteright lslash -20\nKPX quoteright quoteright -46\nKPX quoteright r -40\nKPX quoteright racute -40\nKPX quoteright rcaron -40\nKPX quoteright rcommaaccent -40\nKPX quoteright s -60\nKPX quoteright sacute -60\nKPX quoteright scaron -60\nKPX quoteright scedilla -60\nKPX quoteright scommaaccent -60\nKPX quoteright space -80\nKPX quoteright v -20\nKPX r c -20\nKPX r cacute -20\nKPX r ccaron -20\nKPX r ccedilla -20\nKPX r comma -60\nKPX r d -20\nKPX r dcroat -20\nKPX r g -15\nKPX r gbreve -15\nKPX r gcommaaccent -15\nKPX r hyphen -20\nKPX r o -20\nKPX r oacute -20\nKPX r ocircumflex -20\nKPX r odieresis -20\nKPX r ograve -20\nKPX r ohungarumlaut -20\nKPX r omacron -20\nKPX r oslash -20\nKPX r otilde -20\nKPX r period -60\nKPX r q -20\nKPX r s -15\nKPX r sacute -15\nKPX r scaron -15\nKPX r scedilla -15\nKPX r scommaaccent -15\nKPX r t 20\nKPX r tcommaaccent 20\nKPX r v 10\nKPX r y 10\nKPX r yacute 10\nKPX r ydieresis 10\nKPX racute c -20\nKPX racute cacute -20\nKPX racute ccaron -20\nKPX racute ccedilla -20\nKPX racute comma -60\nKPX racute d -20\nKPX racute dcroat -20\nKPX racute g -15\nKPX racute gbreve -15\nKPX racute gcommaaccent -15\nKPX racute hyphen -20\nKPX racute o -20\nKPX racute oacute -20\nKPX racute ocircumflex -20\nKPX racute odieresis -20\nKPX racute ograve -20\nKPX racute ohungarumlaut -20\nKPX racute omacron -20\nKPX racute oslash -20\nKPX racute otilde -20\nKPX racute period -60\nKPX racute q -20\nKPX racute s -15\nKPX racute sacute -15\nKPX racute scaron -15\nKPX racute scedilla -15\nKPX racute scommaaccent -15\nKPX racute t 20\nKPX racute tcommaaccent 20\nKPX racute v 10\nKPX racute y 10\nKPX racute yacute 10\nKPX racute ydieresis 10\nKPX rcaron c -20\nKPX rcaron cacute -20\nKPX rcaron ccaron -20\nKPX rcaron ccedilla -20\nKPX rcaron comma -60\nKPX rcaron d -20\nKPX rcaron dcroat -20\nKPX rcaron g -15\nKPX rcaron gbreve -15\nKPX rcaron gcommaaccent -15\nKPX rcaron hyphen -20\nKPX rcaron o -20\nKPX rcaron oacute -20\nKPX rcaron ocircumflex -20\nKPX rcaron odieresis -20\nKPX rcaron ograve -20\nKPX rcaron ohungarumlaut -20\nKPX rcaron omacron -20\nKPX rcaron oslash -20\nKPX rcaron otilde -20\nKPX rcaron period -60\nKPX rcaron q -20\nKPX rcaron s -15\nKPX rcaron sacute -15\nKPX rcaron scaron -15\nKPX rcaron scedilla -15\nKPX rcaron scommaaccent -15\nKPX rcaron t 20\nKPX rcaron tcommaaccent 20\nKPX rcaron v 10\nKPX rcaron y 10\nKPX rcaron yacute 10\nKPX rcaron ydieresis 10\nKPX rcommaaccent c -20\nKPX rcommaaccent cacute -20\nKPX rcommaaccent ccaron -20\nKPX rcommaaccent ccedilla -20\nKPX rcommaaccent comma -60\nKPX rcommaaccent d -20\nKPX rcommaaccent dcroat -20\nKPX rcommaaccent g -15\nKPX rcommaaccent gbreve -15\nKPX rcommaaccent gcommaaccent -15\nKPX rcommaaccent hyphen -20\nKPX rcommaaccent o -20\nKPX rcommaaccent oacute -20\nKPX rcommaaccent ocircumflex -20\nKPX rcommaaccent odieresis -20\nKPX rcommaaccent ograve -20\nKPX rcommaaccent ohungarumlaut -20\nKPX rcommaaccent omacron -20\nKPX rcommaaccent oslash -20\nKPX rcommaaccent otilde -20\nKPX rcommaaccent period -60\nKPX rcommaaccent q -20\nKPX rcommaaccent s -15\nKPX rcommaaccent sacute -15\nKPX rcommaaccent scaron -15\nKPX rcommaaccent scedilla -15\nKPX rcommaaccent scommaaccent -15\nKPX rcommaaccent t 20\nKPX rcommaaccent tcommaaccent 20\nKPX rcommaaccent v 10\nKPX rcommaaccent y 10\nKPX rcommaaccent yacute 10\nKPX rcommaaccent ydieresis 10\nKPX s w -15\nKPX sacute w -15\nKPX scaron w -15\nKPX scedilla w -15\nKPX scommaaccent w -15\nKPX semicolon space -40\nKPX space T -100\nKPX space Tcaron -100\nKPX space Tcommaaccent -100\nKPX space V -80\nKPX space W -80\nKPX space Y -120\nKPX space Yacute -120\nKPX space Ydieresis -120\nKPX space quotedblleft -80\nKPX space quoteleft -60\nKPX v a -20\nKPX v aacute -20\nKPX v abreve -20\nKPX v acircumflex -20\nKPX v adieresis -20\nKPX v agrave -20\nKPX v amacron -20\nKPX v aogonek -20\nKPX v aring -20\nKPX v atilde -20\nKPX v comma -80\nKPX v o -30\nKPX v oacute -30\nKPX v ocircumflex -30\nKPX v odieresis -30\nKPX v ograve -30\nKPX v ohungarumlaut -30\nKPX v omacron -30\nKPX v oslash -30\nKPX v otilde -30\nKPX v period -80\nKPX w comma -40\nKPX w o -20\nKPX w oacute -20\nKPX w ocircumflex -20\nKPX w odieresis -20\nKPX w ograve -20\nKPX w ohungarumlaut -20\nKPX w omacron -20\nKPX w oslash -20\nKPX w otilde -20\nKPX w period -40\nKPX x e -10\nKPX x eacute -10\nKPX x ecaron -10\nKPX x ecircumflex -10\nKPX x edieresis -10\nKPX x edotaccent -10\nKPX x egrave -10\nKPX x emacron -10\nKPX x eogonek -10\nKPX y a -30\nKPX y aacute -30\nKPX y abreve -30\nKPX y acircumflex -30\nKPX y adieresis -30\nKPX y agrave -30\nKPX y amacron -30\nKPX y aogonek -30\nKPX y aring -30\nKPX y atilde -30\nKPX y comma -80\nKPX y e -10\nKPX y eacute -10\nKPX y ecaron -10\nKPX y ecircumflex -10\nKPX y edieresis -10\nKPX y edotaccent -10\nKPX y egrave -10\nKPX y emacron -10\nKPX y eogonek -10\nKPX y o -25\nKPX y oacute -25\nKPX y ocircumflex -25\nKPX y odieresis -25\nKPX y ograve -25\nKPX y ohungarumlaut -25\nKPX y omacron -25\nKPX y oslash -25\nKPX y otilde -25\nKPX y period -80\nKPX yacute a -30\nKPX yacute aacute -30\nKPX yacute abreve -30\nKPX yacute acircumflex -30\nKPX yacute adieresis -30\nKPX yacute agrave -30\nKPX yacute amacron -30\nKPX yacute aogonek -30\nKPX yacute aring -30\nKPX yacute atilde -30\nKPX yacute comma -80\nKPX yacute e -10\nKPX yacute eacute -10\nKPX yacute ecaron -10\nKPX yacute ecircumflex -10\nKPX yacute edieresis -10\nKPX yacute edotaccent -10\nKPX yacute egrave -10\nKPX yacute emacron -10\nKPX yacute eogonek -10\nKPX yacute o -25\nKPX yacute oacute -25\nKPX yacute ocircumflex -25\nKPX yacute odieresis -25\nKPX yacute ograve -25\nKPX yacute ohungarumlaut -25\nKPX yacute omacron -25\nKPX yacute oslash -25\nKPX yacute otilde -25\nKPX yacute period -80\nKPX ydieresis a -30\nKPX ydieresis aacute -30\nKPX ydieresis abreve -30\nKPX ydieresis acircumflex -30\nKPX ydieresis adieresis -30\nKPX ydieresis agrave -30\nKPX ydieresis amacron -30\nKPX ydieresis aogonek -30\nKPX ydieresis aring -30\nKPX ydieresis atilde -30\nKPX ydieresis comma -80\nKPX ydieresis e -10\nKPX ydieresis eacute -10\nKPX ydieresis ecaron -10\nKPX ydieresis ecircumflex -10\nKPX ydieresis edieresis -10\nKPX ydieresis edotaccent -10\nKPX ydieresis egrave -10\nKPX ydieresis emacron -10\nKPX ydieresis eogonek -10\nKPX ydieresis o -25\nKPX ydieresis oacute -25\nKPX ydieresis ocircumflex -25\nKPX ydieresis odieresis -25\nKPX ydieresis ograve -25\nKPX ydieresis ohungarumlaut -25\nKPX ydieresis omacron -25\nKPX ydieresis oslash -25\nKPX ydieresis otilde -25\nKPX ydieresis period -80\nKPX z e 10\nKPX z eacute 10\nKPX z ecaron 10\nKPX z ecircumflex 10\nKPX z edieresis 10\nKPX z edotaccent 10\nKPX z egrave 10\nKPX z emacron 10\nKPX z eogonek 10\nKPX zacute e 10\nKPX zacute eacute 10\nKPX zacute ecaron 10\nKPX zacute ecircumflex 10\nKPX zacute edieresis 10\nKPX zacute edotaccent 10\nKPX zacute egrave 10\nKPX zacute emacron 10\nKPX zacute eogonek 10\nKPX zcaron e 10\nKPX zcaron eacute 10\nKPX zcaron ecaron 10\nKPX zcaron ecircumflex 10\nKPX zcaron edieresis 10\nKPX zcaron edotaccent 10\nKPX zcaron egrave 10\nKPX zcaron emacron 10\nKPX zcaron eogonek 10\nKPX zdotaccent e 10\nKPX zdotaccent eacute 10\nKPX zdotaccent ecaron 10\nKPX zdotaccent ecircumflex 10\nKPX zdotaccent edieresis 10\nKPX zdotaccent edotaccent 10\nKPX zdotaccent egrave 10\nKPX zdotaccent emacron 10\nKPX zdotaccent eogonek 10\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 69
      "Helvetica-Oblique": function() {                                                                                // 70
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:44:31 1997\nComment UniqueID 43055\nComment VMusage 14960 69346\nFontName Helvetica-Oblique\nFullName Helvetica Oblique\nFamilyName Helvetica\nWeight Medium\nItalicAngle -12\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -170 -225 1116 931 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 718\nXHeight 523\nAscender 718\nDescender -207\nStdHW 76\nStdVW 88\nStartCharMetrics 315\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 278 ; N exclam ; B 90 0 340 718 ;\nC 34 ; WX 355 ; N quotedbl ; B 168 463 438 718 ;\nC 35 ; WX 556 ; N numbersign ; B 73 0 631 688 ;\nC 36 ; WX 556 ; N dollar ; B 69 -115 617 775 ;\nC 37 ; WX 889 ; N percent ; B 147 -19 889 703 ;\nC 38 ; WX 667 ; N ampersand ; B 77 -15 647 718 ;\nC 39 ; WX 222 ; N quoteright ; B 151 463 310 718 ;\nC 40 ; WX 333 ; N parenleft ; B 108 -207 454 733 ;\nC 41 ; WX 333 ; N parenright ; B -9 -207 337 733 ;\nC 42 ; WX 389 ; N asterisk ; B 165 431 475 718 ;\nC 43 ; WX 584 ; N plus ; B 85 0 606 505 ;\nC 44 ; WX 278 ; N comma ; B 56 -147 214 106 ;\nC 45 ; WX 333 ; N hyphen ; B 93 232 357 322 ;\nC 46 ; WX 278 ; N period ; B 87 0 214 106 ;\nC 47 ; WX 278 ; N slash ; B -21 -19 452 737 ;\nC 48 ; WX 556 ; N zero ; B 93 -19 608 703 ;\nC 49 ; WX 556 ; N one ; B 207 0 508 703 ;\nC 50 ; WX 556 ; N two ; B 26 0 617 703 ;\nC 51 ; WX 556 ; N three ; B 75 -19 610 703 ;\nC 52 ; WX 556 ; N four ; B 61 0 576 703 ;\nC 53 ; WX 556 ; N five ; B 68 -19 621 688 ;\nC 54 ; WX 556 ; N six ; B 91 -19 615 703 ;\nC 55 ; WX 556 ; N seven ; B 137 0 669 688 ;\nC 56 ; WX 556 ; N eight ; B 74 -19 607 703 ;\nC 57 ; WX 556 ; N nine ; B 82 -19 609 703 ;\nC 58 ; WX 278 ; N colon ; B 87 0 301 516 ;\nC 59 ; WX 278 ; N semicolon ; B 56 -147 301 516 ;\nC 60 ; WX 584 ; N less ; B 94 11 641 495 ;\nC 61 ; WX 584 ; N equal ; B 63 115 628 390 ;\nC 62 ; WX 584 ; N greater ; B 50 11 597 495 ;\nC 63 ; WX 556 ; N question ; B 161 0 610 727 ;\nC 64 ; WX 1015 ; N at ; B 215 -19 965 737 ;\nC 65 ; WX 667 ; N A ; B 14 0 654 718 ;\nC 66 ; WX 667 ; N B ; B 74 0 712 718 ;\nC 67 ; WX 722 ; N C ; B 108 -19 782 737 ;\nC 68 ; WX 722 ; N D ; B 81 0 764 718 ;\nC 69 ; WX 667 ; N E ; B 86 0 762 718 ;\nC 70 ; WX 611 ; N F ; B 86 0 736 718 ;\nC 71 ; WX 778 ; N G ; B 111 -19 799 737 ;\nC 72 ; WX 722 ; N H ; B 77 0 799 718 ;\nC 73 ; WX 278 ; N I ; B 91 0 341 718 ;\nC 74 ; WX 500 ; N J ; B 47 -19 581 718 ;\nC 75 ; WX 667 ; N K ; B 76 0 808 718 ;\nC 76 ; WX 556 ; N L ; B 76 0 555 718 ;\nC 77 ; WX 833 ; N M ; B 73 0 914 718 ;\nC 78 ; WX 722 ; N N ; B 76 0 799 718 ;\nC 79 ; WX 778 ; N O ; B 105 -19 826 737 ;\nC 80 ; WX 667 ; N P ; B 86 0 737 718 ;\nC 81 ; WX 778 ; N Q ; B 105 -56 826 737 ;\nC 82 ; WX 722 ; N R ; B 88 0 773 718 ;\nC 83 ; WX 667 ; N S ; B 90 -19 713 737 ;\nC 84 ; WX 611 ; N T ; B 148 0 750 718 ;\nC 85 ; WX 722 ; N U ; B 123 -19 797 718 ;\nC 86 ; WX 667 ; N V ; B 173 0 800 718 ;\nC 87 ; WX 944 ; N W ; B 169 0 1081 718 ;\nC 88 ; WX 667 ; N X ; B 19 0 790 718 ;\nC 89 ; WX 667 ; N Y ; B 167 0 806 718 ;\nC 90 ; WX 611 ; N Z ; B 23 0 741 718 ;\nC 91 ; WX 278 ; N bracketleft ; B 21 -196 403 722 ;\nC 92 ; WX 278 ; N backslash ; B 140 -19 291 737 ;\nC 93 ; WX 278 ; N bracketright ; B -14 -196 368 722 ;\nC 94 ; WX 469 ; N asciicircum ; B 42 264 539 688 ;\nC 95 ; WX 556 ; N underscore ; B -27 -125 540 -75 ;\nC 96 ; WX 222 ; N quoteleft ; B 165 470 323 725 ;\nC 97 ; WX 556 ; N a ; B 61 -15 559 538 ;\nC 98 ; WX 556 ; N b ; B 58 -15 584 718 ;\nC 99 ; WX 500 ; N c ; B 74 -15 553 538 ;\nC 100 ; WX 556 ; N d ; B 84 -15 652 718 ;\nC 101 ; WX 556 ; N e ; B 84 -15 578 538 ;\nC 102 ; WX 278 ; N f ; B 86 0 416 728 ; L i fi ; L l fl ;\nC 103 ; WX 556 ; N g ; B 42 -220 610 538 ;\nC 104 ; WX 556 ; N h ; B 65 0 573 718 ;\nC 105 ; WX 222 ; N i ; B 67 0 308 718 ;\nC 106 ; WX 222 ; N j ; B -60 -210 308 718 ;\nC 107 ; WX 500 ; N k ; B 67 0 600 718 ;\nC 108 ; WX 222 ; N l ; B 67 0 308 718 ;\nC 109 ; WX 833 ; N m ; B 65 0 852 538 ;\nC 110 ; WX 556 ; N n ; B 65 0 573 538 ;\nC 111 ; WX 556 ; N o ; B 83 -14 585 538 ;\nC 112 ; WX 556 ; N p ; B 14 -207 584 538 ;\nC 113 ; WX 556 ; N q ; B 84 -207 605 538 ;\nC 114 ; WX 333 ; N r ; B 77 0 446 538 ;\nC 115 ; WX 500 ; N s ; B 63 -15 529 538 ;\nC 116 ; WX 278 ; N t ; B 102 -7 368 669 ;\nC 117 ; WX 556 ; N u ; B 94 -15 600 523 ;\nC 118 ; WX 500 ; N v ; B 119 0 603 523 ;\nC 119 ; WX 722 ; N w ; B 125 0 820 523 ;\nC 120 ; WX 500 ; N x ; B 11 0 594 523 ;\nC 121 ; WX 500 ; N y ; B 15 -214 600 523 ;\nC 122 ; WX 500 ; N z ; B 31 0 571 523 ;\nC 123 ; WX 334 ; N braceleft ; B 92 -196 445 722 ;\nC 124 ; WX 260 ; N bar ; B 46 -225 332 775 ;\nC 125 ; WX 334 ; N braceright ; B 0 -196 354 722 ;\nC 126 ; WX 584 ; N asciitilde ; B 111 180 580 326 ;\nC 161 ; WX 333 ; N exclamdown ; B 77 -195 326 523 ;\nC 162 ; WX 556 ; N cent ; B 95 -115 584 623 ;\nC 163 ; WX 556 ; N sterling ; B 49 -16 634 718 ;\nC 164 ; WX 167 ; N fraction ; B -170 -19 482 703 ;\nC 165 ; WX 556 ; N yen ; B 81 0 699 688 ;\nC 166 ; WX 556 ; N florin ; B -52 -207 654 737 ;\nC 167 ; WX 556 ; N section ; B 76 -191 584 737 ;\nC 168 ; WX 556 ; N currency ; B 60 99 646 603 ;\nC 169 ; WX 191 ; N quotesingle ; B 157 463 285 718 ;\nC 170 ; WX 333 ; N quotedblleft ; B 138 470 461 725 ;\nC 171 ; WX 556 ; N guillemotleft ; B 146 108 554 446 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 137 108 340 446 ;\nC 173 ; WX 333 ; N guilsinglright ; B 111 108 314 446 ;\nC 174 ; WX 500 ; N fi ; B 86 0 587 728 ;\nC 175 ; WX 500 ; N fl ; B 86 0 585 728 ;\nC 177 ; WX 556 ; N endash ; B 51 240 623 313 ;\nC 178 ; WX 556 ; N dagger ; B 135 -159 622 718 ;\nC 179 ; WX 556 ; N daggerdbl ; B 52 -159 623 718 ;\nC 180 ; WX 278 ; N periodcentered ; B 129 190 257 315 ;\nC 182 ; WX 537 ; N paragraph ; B 126 -173 650 718 ;\nC 183 ; WX 350 ; N bullet ; B 91 202 413 517 ;\nC 184 ; WX 222 ; N quotesinglbase ; B 21 -149 180 106 ;\nC 185 ; WX 333 ; N quotedblbase ; B -6 -149 318 106 ;\nC 186 ; WX 333 ; N quotedblright ; B 124 463 448 718 ;\nC 187 ; WX 556 ; N guillemotright ; B 120 108 528 446 ;\nC 188 ; WX 1000 ; N ellipsis ; B 115 0 908 106 ;\nC 189 ; WX 1000 ; N perthousand ; B 88 -19 1029 703 ;\nC 191 ; WX 611 ; N questiondown ; B 85 -201 534 525 ;\nC 193 ; WX 333 ; N grave ; B 170 593 337 734 ;\nC 194 ; WX 333 ; N acute ; B 248 593 475 734 ;\nC 195 ; WX 333 ; N circumflex ; B 147 593 438 734 ;\nC 196 ; WX 333 ; N tilde ; B 125 606 490 722 ;\nC 197 ; WX 333 ; N macron ; B 143 627 468 684 ;\nC 198 ; WX 333 ; N breve ; B 167 595 476 731 ;\nC 199 ; WX 333 ; N dotaccent ; B 249 604 362 706 ;\nC 200 ; WX 333 ; N dieresis ; B 168 604 443 706 ;\nC 202 ; WX 333 ; N ring ; B 214 572 402 756 ;\nC 203 ; WX 333 ; N cedilla ; B 2 -225 232 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B 157 593 565 734 ;\nC 206 ; WX 333 ; N ogonek ; B 43 -225 249 0 ;\nC 207 ; WX 333 ; N caron ; B 177 593 468 734 ;\nC 208 ; WX 1000 ; N emdash ; B 51 240 1067 313 ;\nC 225 ; WX 1000 ; N AE ; B 8 0 1097 718 ;\nC 227 ; WX 370 ; N ordfeminine ; B 127 405 449 737 ;\nC 232 ; WX 556 ; N Lslash ; B 41 0 555 718 ;\nC 233 ; WX 778 ; N Oslash ; B 43 -19 890 737 ;\nC 234 ; WX 1000 ; N OE ; B 98 -19 1116 737 ;\nC 235 ; WX 365 ; N ordmasculine ; B 141 405 468 737 ;\nC 241 ; WX 889 ; N ae ; B 61 -15 909 538 ;\nC 245 ; WX 278 ; N dotlessi ; B 95 0 294 523 ;\nC 248 ; WX 222 ; N lslash ; B 41 0 347 718 ;\nC 249 ; WX 611 ; N oslash ; B 29 -22 647 545 ;\nC 250 ; WX 944 ; N oe ; B 83 -15 964 538 ;\nC 251 ; WX 611 ; N germandbls ; B 67 -15 658 728 ;\nC -1 ; WX 278 ; N Idieresis ; B 91 0 458 901 ;\nC -1 ; WX 556 ; N eacute ; B 84 -15 587 734 ;\nC -1 ; WX 556 ; N abreve ; B 61 -15 578 731 ;\nC -1 ; WX 556 ; N uhungarumlaut ; B 94 -15 677 734 ;\nC -1 ; WX 556 ; N ecaron ; B 84 -15 580 734 ;\nC -1 ; WX 667 ; N Ydieresis ; B 167 0 806 901 ;\nC -1 ; WX 584 ; N divide ; B 85 -19 606 524 ;\nC -1 ; WX 667 ; N Yacute ; B 167 0 806 929 ;\nC -1 ; WX 667 ; N Acircumflex ; B 14 0 654 929 ;\nC -1 ; WX 556 ; N aacute ; B 61 -15 587 734 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 123 -19 797 929 ;\nC -1 ; WX 500 ; N yacute ; B 15 -214 600 734 ;\nC -1 ; WX 500 ; N scommaaccent ; B 63 -225 529 538 ;\nC -1 ; WX 556 ; N ecircumflex ; B 84 -15 578 734 ;\nC -1 ; WX 722 ; N Uring ; B 123 -19 797 931 ;\nC -1 ; WX 722 ; N Udieresis ; B 123 -19 797 901 ;\nC -1 ; WX 556 ; N aogonek ; B 61 -220 559 538 ;\nC -1 ; WX 722 ; N Uacute ; B 123 -19 797 929 ;\nC -1 ; WX 556 ; N uogonek ; B 94 -225 600 523 ;\nC -1 ; WX 667 ; N Edieresis ; B 86 0 762 901 ;\nC -1 ; WX 722 ; N Dcroat ; B 69 0 764 718 ;\nC -1 ; WX 250 ; N commaaccent ; B 39 -225 172 -40 ;\nC -1 ; WX 737 ; N copyright ; B 54 -19 837 737 ;\nC -1 ; WX 667 ; N Emacron ; B 86 0 762 879 ;\nC -1 ; WX 500 ; N ccaron ; B 74 -15 553 734 ;\nC -1 ; WX 556 ; N aring ; B 61 -15 559 756 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B 76 -225 799 718 ;\nC -1 ; WX 222 ; N lacute ; B 67 0 461 929 ;\nC -1 ; WX 556 ; N agrave ; B 61 -15 559 734 ;\nC -1 ; WX 611 ; N Tcommaaccent ; B 148 -225 750 718 ;\nC -1 ; WX 722 ; N Cacute ; B 108 -19 782 929 ;\nC -1 ; WX 556 ; N atilde ; B 61 -15 592 722 ;\nC -1 ; WX 667 ; N Edotaccent ; B 86 0 762 901 ;\nC -1 ; WX 500 ; N scaron ; B 63 -15 552 734 ;\nC -1 ; WX 500 ; N scedilla ; B 63 -225 529 538 ;\nC -1 ; WX 278 ; N iacute ; B 95 0 448 734 ;\nC -1 ; WX 471 ; N lozenge ; B 88 0 540 728 ;\nC -1 ; WX 722 ; N Rcaron ; B 88 0 773 929 ;\nC -1 ; WX 778 ; N Gcommaaccent ; B 111 -225 799 737 ;\nC -1 ; WX 556 ; N ucircumflex ; B 94 -15 600 734 ;\nC -1 ; WX 556 ; N acircumflex ; B 61 -15 559 734 ;\nC -1 ; WX 667 ; N Amacron ; B 14 0 677 879 ;\nC -1 ; WX 333 ; N rcaron ; B 77 0 508 734 ;\nC -1 ; WX 500 ; N ccedilla ; B 74 -225 553 538 ;\nC -1 ; WX 611 ; N Zdotaccent ; B 23 0 741 901 ;\nC -1 ; WX 667 ; N Thorn ; B 86 0 712 718 ;\nC -1 ; WX 778 ; N Omacron ; B 105 -19 826 879 ;\nC -1 ; WX 722 ; N Racute ; B 88 0 773 929 ;\nC -1 ; WX 667 ; N Sacute ; B 90 -19 713 929 ;\nC -1 ; WX 643 ; N dcaron ; B 84 -15 808 718 ;\nC -1 ; WX 722 ; N Umacron ; B 123 -19 797 879 ;\nC -1 ; WX 556 ; N uring ; B 94 -15 600 756 ;\nC -1 ; WX 333 ; N threesuperior ; B 90 270 436 703 ;\nC -1 ; WX 778 ; N Ograve ; B 105 -19 826 929 ;\nC -1 ; WX 667 ; N Agrave ; B 14 0 654 929 ;\nC -1 ; WX 667 ; N Abreve ; B 14 0 685 926 ;\nC -1 ; WX 584 ; N multiply ; B 50 0 642 506 ;\nC -1 ; WX 556 ; N uacute ; B 94 -15 600 734 ;\nC -1 ; WX 611 ; N Tcaron ; B 148 0 750 929 ;\nC -1 ; WX 476 ; N partialdiff ; B 41 -38 550 714 ;\nC -1 ; WX 500 ; N ydieresis ; B 15 -214 600 706 ;\nC -1 ; WX 722 ; N Nacute ; B 76 0 799 929 ;\nC -1 ; WX 278 ; N icircumflex ; B 95 0 411 734 ;\nC -1 ; WX 667 ; N Ecircumflex ; B 86 0 762 929 ;\nC -1 ; WX 556 ; N adieresis ; B 61 -15 559 706 ;\nC -1 ; WX 556 ; N edieresis ; B 84 -15 578 706 ;\nC -1 ; WX 500 ; N cacute ; B 74 -15 559 734 ;\nC -1 ; WX 556 ; N nacute ; B 65 0 587 734 ;\nC -1 ; WX 556 ; N umacron ; B 94 -15 600 684 ;\nC -1 ; WX 722 ; N Ncaron ; B 76 0 799 929 ;\nC -1 ; WX 278 ; N Iacute ; B 91 0 489 929 ;\nC -1 ; WX 584 ; N plusminus ; B 39 0 618 506 ;\nC -1 ; WX 260 ; N brokenbar ; B 62 -150 316 700 ;\nC -1 ; WX 737 ; N registered ; B 54 -19 837 737 ;\nC -1 ; WX 778 ; N Gbreve ; B 111 -19 799 926 ;\nC -1 ; WX 278 ; N Idotaccent ; B 91 0 377 901 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 671 706 ;\nC -1 ; WX 667 ; N Egrave ; B 86 0 762 929 ;\nC -1 ; WX 333 ; N racute ; B 77 0 475 734 ;\nC -1 ; WX 556 ; N omacron ; B 83 -14 585 684 ;\nC -1 ; WX 611 ; N Zacute ; B 23 0 741 929 ;\nC -1 ; WX 611 ; N Zcaron ; B 23 0 741 929 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 620 674 ;\nC -1 ; WX 722 ; N Eth ; B 69 0 764 718 ;\nC -1 ; WX 722 ; N Ccedilla ; B 108 -225 782 737 ;\nC -1 ; WX 222 ; N lcommaaccent ; B 25 -225 308 718 ;\nC -1 ; WX 317 ; N tcaron ; B 102 -7 501 808 ;\nC -1 ; WX 556 ; N eogonek ; B 84 -225 578 538 ;\nC -1 ; WX 722 ; N Uogonek ; B 123 -225 797 718 ;\nC -1 ; WX 667 ; N Aacute ; B 14 0 683 929 ;\nC -1 ; WX 667 ; N Adieresis ; B 14 0 654 901 ;\nC -1 ; WX 556 ; N egrave ; B 84 -15 578 734 ;\nC -1 ; WX 500 ; N zacute ; B 31 0 571 734 ;\nC -1 ; WX 222 ; N iogonek ; B -61 -225 308 718 ;\nC -1 ; WX 778 ; N Oacute ; B 105 -19 826 929 ;\nC -1 ; WX 556 ; N oacute ; B 83 -14 587 734 ;\nC -1 ; WX 556 ; N amacron ; B 61 -15 580 684 ;\nC -1 ; WX 500 ; N sacute ; B 63 -15 559 734 ;\nC -1 ; WX 278 ; N idieresis ; B 95 0 416 706 ;\nC -1 ; WX 778 ; N Ocircumflex ; B 105 -19 826 929 ;\nC -1 ; WX 722 ; N Ugrave ; B 123 -19 797 929 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 556 ; N thorn ; B 14 -207 584 718 ;\nC -1 ; WX 333 ; N twosuperior ; B 64 281 449 703 ;\nC -1 ; WX 778 ; N Odieresis ; B 105 -19 826 901 ;\nC -1 ; WX 556 ; N mu ; B 24 -207 600 523 ;\nC -1 ; WX 278 ; N igrave ; B 95 0 310 734 ;\nC -1 ; WX 556 ; N ohungarumlaut ; B 83 -14 677 734 ;\nC -1 ; WX 667 ; N Eogonek ; B 86 -220 762 718 ;\nC -1 ; WX 556 ; N dcroat ; B 84 -15 689 718 ;\nC -1 ; WX 834 ; N threequarters ; B 130 -19 861 703 ;\nC -1 ; WX 667 ; N Scedilla ; B 90 -225 713 737 ;\nC -1 ; WX 299 ; N lcaron ; B 67 0 464 718 ;\nC -1 ; WX 667 ; N Kcommaaccent ; B 76 -225 808 718 ;\nC -1 ; WX 556 ; N Lacute ; B 76 0 555 929 ;\nC -1 ; WX 1000 ; N trademark ; B 186 306 1056 718 ;\nC -1 ; WX 556 ; N edotaccent ; B 84 -15 578 706 ;\nC -1 ; WX 278 ; N Igrave ; B 91 0 351 929 ;\nC -1 ; WX 278 ; N Imacron ; B 91 0 483 879 ;\nC -1 ; WX 556 ; N Lcaron ; B 76 0 570 718 ;\nC -1 ; WX 834 ; N onehalf ; B 114 -19 839 703 ;\nC -1 ; WX 549 ; N lessequal ; B 26 0 666 674 ;\nC -1 ; WX 556 ; N ocircumflex ; B 83 -14 585 734 ;\nC -1 ; WX 556 ; N ntilde ; B 65 0 592 722 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 123 -19 801 929 ;\nC -1 ; WX 667 ; N Eacute ; B 86 0 762 929 ;\nC -1 ; WX 556 ; N emacron ; B 84 -15 580 684 ;\nC -1 ; WX 556 ; N gbreve ; B 42 -220 610 731 ;\nC -1 ; WX 834 ; N onequarter ; B 150 -19 802 703 ;\nC -1 ; WX 667 ; N Scaron ; B 90 -19 713 929 ;\nC -1 ; WX 667 ; N Scommaaccent ; B 90 -225 713 737 ;\nC -1 ; WX 778 ; N Ohungarumlaut ; B 105 -19 829 929 ;\nC -1 ; WX 400 ; N degree ; B 169 411 468 703 ;\nC -1 ; WX 556 ; N ograve ; B 83 -14 585 734 ;\nC -1 ; WX 722 ; N Ccaron ; B 108 -19 782 929 ;\nC -1 ; WX 556 ; N ugrave ; B 94 -15 600 734 ;\nC -1 ; WX 453 ; N radical ; B 79 -80 617 762 ;\nC -1 ; WX 722 ; N Dcaron ; B 81 0 764 929 ;\nC -1 ; WX 333 ; N rcommaaccent ; B 30 -225 446 538 ;\nC -1 ; WX 722 ; N Ntilde ; B 76 0 799 917 ;\nC -1 ; WX 556 ; N otilde ; B 83 -14 602 722 ;\nC -1 ; WX 722 ; N Rcommaaccent ; B 88 -225 773 718 ;\nC -1 ; WX 556 ; N Lcommaaccent ; B 76 -225 555 718 ;\nC -1 ; WX 667 ; N Atilde ; B 14 0 699 917 ;\nC -1 ; WX 667 ; N Aogonek ; B 14 -225 654 718 ;\nC -1 ; WX 667 ; N Aring ; B 14 0 654 931 ;\nC -1 ; WX 778 ; N Otilde ; B 105 -19 826 917 ;\nC -1 ; WX 500 ; N zdotaccent ; B 31 0 571 706 ;\nC -1 ; WX 667 ; N Ecaron ; B 86 0 762 929 ;\nC -1 ; WX 278 ; N Iogonek ; B -33 -225 341 718 ;\nC -1 ; WX 500 ; N kcommaaccent ; B 67 -225 600 718 ;\nC -1 ; WX 584 ; N minus ; B 85 216 606 289 ;\nC -1 ; WX 278 ; N Icircumflex ; B 91 0 452 929 ;\nC -1 ; WX 556 ; N ncaron ; B 65 0 580 734 ;\nC -1 ; WX 278 ; N tcommaaccent ; B 63 -225 368 669 ;\nC -1 ; WX 584 ; N logicalnot ; B 106 108 628 390 ;\nC -1 ; WX 556 ; N odieresis ; B 83 -14 585 706 ;\nC -1 ; WX 556 ; N udieresis ; B 94 -15 600 706 ;\nC -1 ; WX 549 ; N notequal ; B 34 -35 623 551 ;\nC -1 ; WX 556 ; N gcommaaccent ; B 42 -220 610 822 ;\nC -1 ; WX 556 ; N eth ; B 81 -15 617 737 ;\nC -1 ; WX 500 ; N zcaron ; B 31 0 571 734 ;\nC -1 ; WX 556 ; N ncommaaccent ; B 65 -225 573 538 ;\nC -1 ; WX 333 ; N onesuperior ; B 166 281 371 703 ;\nC -1 ; WX 278 ; N imacron ; B 95 0 417 684 ;\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2705\nKPX A C -30\nKPX A Cacute -30\nKPX A Ccaron -30\nKPX A Ccedilla -30\nKPX A G -30\nKPX A Gbreve -30\nKPX A Gcommaaccent -30\nKPX A O -30\nKPX A Oacute -30\nKPX A Ocircumflex -30\nKPX A Odieresis -30\nKPX A Ograve -30\nKPX A Ohungarumlaut -30\nKPX A Omacron -30\nKPX A Oslash -30\nKPX A Otilde -30\nKPX A Q -30\nKPX A T -120\nKPX A Tcaron -120\nKPX A Tcommaaccent -120\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -70\nKPX A W -50\nKPX A Y -100\nKPX A Yacute -100\nKPX A Ydieresis -100\nKPX A u -30\nKPX A uacute -30\nKPX A ucircumflex -30\nKPX A udieresis -30\nKPX A ugrave -30\nKPX A uhungarumlaut -30\nKPX A umacron -30\nKPX A uogonek -30\nKPX A uring -30\nKPX A v -40\nKPX A w -40\nKPX A y -40\nKPX A yacute -40\nKPX A ydieresis -40\nKPX Aacute C -30\nKPX Aacute Cacute -30\nKPX Aacute Ccaron -30\nKPX Aacute Ccedilla -30\nKPX Aacute G -30\nKPX Aacute Gbreve -30\nKPX Aacute Gcommaaccent -30\nKPX Aacute O -30\nKPX Aacute Oacute -30\nKPX Aacute Ocircumflex -30\nKPX Aacute Odieresis -30\nKPX Aacute Ograve -30\nKPX Aacute Ohungarumlaut -30\nKPX Aacute Omacron -30\nKPX Aacute Oslash -30\nKPX Aacute Otilde -30\nKPX Aacute Q -30\nKPX Aacute T -120\nKPX Aacute Tcaron -120\nKPX Aacute Tcommaaccent -120\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -70\nKPX Aacute W -50\nKPX Aacute Y -100\nKPX Aacute Yacute -100\nKPX Aacute Ydieresis -100\nKPX Aacute u -30\nKPX Aacute uacute -30\nKPX Aacute ucircumflex -30\nKPX Aacute udieresis -30\nKPX Aacute ugrave -30\nKPX Aacute uhungarumlaut -30\nKPX Aacute umacron -30\nKPX Aacute uogonek -30\nKPX Aacute uring -30\nKPX Aacute v -40\nKPX Aacute w -40\nKPX Aacute y -40\nKPX Aacute yacute -40\nKPX Aacute ydieresis -40\nKPX Abreve C -30\nKPX Abreve Cacute -30\nKPX Abreve Ccaron -30\nKPX Abreve Ccedilla -30\nKPX Abreve G -30\nKPX Abreve Gbreve -30\nKPX Abreve Gcommaaccent -30\nKPX Abreve O -30\nKPX Abreve Oacute -30\nKPX Abreve Ocircumflex -30\nKPX Abreve Odieresis -30\nKPX Abreve Ograve -30\nKPX Abreve Ohungarumlaut -30\nKPX Abreve Omacron -30\nKPX Abreve Oslash -30\nKPX Abreve Otilde -30\nKPX Abreve Q -30\nKPX Abreve T -120\nKPX Abreve Tcaron -120\nKPX Abreve Tcommaaccent -120\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -70\nKPX Abreve W -50\nKPX Abreve Y -100\nKPX Abreve Yacute -100\nKPX Abreve Ydieresis -100\nKPX Abreve u -30\nKPX Abreve uacute -30\nKPX Abreve ucircumflex -30\nKPX Abreve udieresis -30\nKPX Abreve ugrave -30\nKPX Abreve uhungarumlaut -30\nKPX Abreve umacron -30\nKPX Abreve uogonek -30\nKPX Abreve uring -30\nKPX Abreve v -40\nKPX Abreve w -40\nKPX Abreve y -40\nKPX Abreve yacute -40\nKPX Abreve ydieresis -40\nKPX Acircumflex C -30\nKPX Acircumflex Cacute -30\nKPX Acircumflex Ccaron -30\nKPX Acircumflex Ccedilla -30\nKPX Acircumflex G -30\nKPX Acircumflex Gbreve -30\nKPX Acircumflex Gcommaaccent -30\nKPX Acircumflex O -30\nKPX Acircumflex Oacute -30\nKPX Acircumflex Ocircumflex -30\nKPX Acircumflex Odieresis -30\nKPX Acircumflex Ograve -30\nKPX Acircumflex Ohungarumlaut -30\nKPX Acircumflex Omacron -30\nKPX Acircumflex Oslash -30\nKPX Acircumflex Otilde -30\nKPX Acircumflex Q -30\nKPX Acircumflex T -120\nKPX Acircumflex Tcaron -120\nKPX Acircumflex Tcommaaccent -120\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -70\nKPX Acircumflex W -50\nKPX Acircumflex Y -100\nKPX Acircumflex Yacute -100\nKPX Acircumflex Ydieresis -100\nKPX Acircumflex u -30\nKPX Acircumflex uacute -30\nKPX Acircumflex ucircumflex -30\nKPX Acircumflex udieresis -30\nKPX Acircumflex ugrave -30\nKPX Acircumflex uhungarumlaut -30\nKPX Acircumflex umacron -30\nKPX Acircumflex uogonek -30\nKPX Acircumflex uring -30\nKPX Acircumflex v -40\nKPX Acircumflex w -40\nKPX Acircumflex y -40\nKPX Acircumflex yacute -40\nKPX Acircumflex ydieresis -40\nKPX Adieresis C -30\nKPX Adieresis Cacute -30\nKPX Adieresis Ccaron -30\nKPX Adieresis Ccedilla -30\nKPX Adieresis G -30\nKPX Adieresis Gbreve -30\nKPX Adieresis Gcommaaccent -30\nKPX Adieresis O -30\nKPX Adieresis Oacute -30\nKPX Adieresis Ocircumflex -30\nKPX Adieresis Odieresis -30\nKPX Adieresis Ograve -30\nKPX Adieresis Ohungarumlaut -30\nKPX Adieresis Omacron -30\nKPX Adieresis Oslash -30\nKPX Adieresis Otilde -30\nKPX Adieresis Q -30\nKPX Adieresis T -120\nKPX Adieresis Tcaron -120\nKPX Adieresis Tcommaaccent -120\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -70\nKPX Adieresis W -50\nKPX Adieresis Y -100\nKPX Adieresis Yacute -100\nKPX Adieresis Ydieresis -100\nKPX Adieresis u -30\nKPX Adieresis uacute -30\nKPX Adieresis ucircumflex -30\nKPX Adieresis udieresis -30\nKPX Adieresis ugrave -30\nKPX Adieresis uhungarumlaut -30\nKPX Adieresis umacron -30\nKPX Adieresis uogonek -30\nKPX Adieresis uring -30\nKPX Adieresis v -40\nKPX Adieresis w -40\nKPX Adieresis y -40\nKPX Adieresis yacute -40\nKPX Adieresis ydieresis -40\nKPX Agrave C -30\nKPX Agrave Cacute -30\nKPX Agrave Ccaron -30\nKPX Agrave Ccedilla -30\nKPX Agrave G -30\nKPX Agrave Gbreve -30\nKPX Agrave Gcommaaccent -30\nKPX Agrave O -30\nKPX Agrave Oacute -30\nKPX Agrave Ocircumflex -30\nKPX Agrave Odieresis -30\nKPX Agrave Ograve -30\nKPX Agrave Ohungarumlaut -30\nKPX Agrave Omacron -30\nKPX Agrave Oslash -30\nKPX Agrave Otilde -30\nKPX Agrave Q -30\nKPX Agrave T -120\nKPX Agrave Tcaron -120\nKPX Agrave Tcommaaccent -120\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -70\nKPX Agrave W -50\nKPX Agrave Y -100\nKPX Agrave Yacute -100\nKPX Agrave Ydieresis -100\nKPX Agrave u -30\nKPX Agrave uacute -30\nKPX Agrave ucircumflex -30\nKPX Agrave udieresis -30\nKPX Agrave ugrave -30\nKPX Agrave uhungarumlaut -30\nKPX Agrave umacron -30\nKPX Agrave uogonek -30\nKPX Agrave uring -30\nKPX Agrave v -40\nKPX Agrave w -40\nKPX Agrave y -40\nKPX Agrave yacute -40\nKPX Agrave ydieresis -40\nKPX Amacron C -30\nKPX Amacron Cacute -30\nKPX Amacron Ccaron -30\nKPX Amacron Ccedilla -30\nKPX Amacron G -30\nKPX Amacron Gbreve -30\nKPX Amacron Gcommaaccent -30\nKPX Amacron O -30\nKPX Amacron Oacute -30\nKPX Amacron Ocircumflex -30\nKPX Amacron Odieresis -30\nKPX Amacron Ograve -30\nKPX Amacron Ohungarumlaut -30\nKPX Amacron Omacron -30\nKPX Amacron Oslash -30\nKPX Amacron Otilde -30\nKPX Amacron Q -30\nKPX Amacron T -120\nKPX Amacron Tcaron -120\nKPX Amacron Tcommaaccent -120\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -70\nKPX Amacron W -50\nKPX Amacron Y -100\nKPX Amacron Yacute -100\nKPX Amacron Ydieresis -100\nKPX Amacron u -30\nKPX Amacron uacute -30\nKPX Amacron ucircumflex -30\nKPX Amacron udieresis -30\nKPX Amacron ugrave -30\nKPX Amacron uhungarumlaut -30\nKPX Amacron umacron -30\nKPX Amacron uogonek -30\nKPX Amacron uring -30\nKPX Amacron v -40\nKPX Amacron w -40\nKPX Amacron y -40\nKPX Amacron yacute -40\nKPX Amacron ydieresis -40\nKPX Aogonek C -30\nKPX Aogonek Cacute -30\nKPX Aogonek Ccaron -30\nKPX Aogonek Ccedilla -30\nKPX Aogonek G -30\nKPX Aogonek Gbreve -30\nKPX Aogonek Gcommaaccent -30\nKPX Aogonek O -30\nKPX Aogonek Oacute -30\nKPX Aogonek Ocircumflex -30\nKPX Aogonek Odieresis -30\nKPX Aogonek Ograve -30\nKPX Aogonek Ohungarumlaut -30\nKPX Aogonek Omacron -30\nKPX Aogonek Oslash -30\nKPX Aogonek Otilde -30\nKPX Aogonek Q -30\nKPX Aogonek T -120\nKPX Aogonek Tcaron -120\nKPX Aogonek Tcommaaccent -120\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -70\nKPX Aogonek W -50\nKPX Aogonek Y -100\nKPX Aogonek Yacute -100\nKPX Aogonek Ydieresis -100\nKPX Aogonek u -30\nKPX Aogonek uacute -30\nKPX Aogonek ucircumflex -30\nKPX Aogonek udieresis -30\nKPX Aogonek ugrave -30\nKPX Aogonek uhungarumlaut -30\nKPX Aogonek umacron -30\nKPX Aogonek uogonek -30\nKPX Aogonek uring -30\nKPX Aogonek v -40\nKPX Aogonek w -40\nKPX Aogonek y -40\nKPX Aogonek yacute -40\nKPX Aogonek ydieresis -40\nKPX Aring C -30\nKPX Aring Cacute -30\nKPX Aring Ccaron -30\nKPX Aring Ccedilla -30\nKPX Aring G -30\nKPX Aring Gbreve -30\nKPX Aring Gcommaaccent -30\nKPX Aring O -30\nKPX Aring Oacute -30\nKPX Aring Ocircumflex -30\nKPX Aring Odieresis -30\nKPX Aring Ograve -30\nKPX Aring Ohungarumlaut -30\nKPX Aring Omacron -30\nKPX Aring Oslash -30\nKPX Aring Otilde -30\nKPX Aring Q -30\nKPX Aring T -120\nKPX Aring Tcaron -120\nKPX Aring Tcommaaccent -120\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -70\nKPX Aring W -50\nKPX Aring Y -100\nKPX Aring Yacute -100\nKPX Aring Ydieresis -100\nKPX Aring u -30\nKPX Aring uacute -30\nKPX Aring ucircumflex -30\nKPX Aring udieresis -30\nKPX Aring ugrave -30\nKPX Aring uhungarumlaut -30\nKPX Aring umacron -30\nKPX Aring uogonek -30\nKPX Aring uring -30\nKPX Aring v -40\nKPX Aring w -40\nKPX Aring y -40\nKPX Aring yacute -40\nKPX Aring ydieresis -40\nKPX Atilde C -30\nKPX Atilde Cacute -30\nKPX Atilde Ccaron -30\nKPX Atilde Ccedilla -30\nKPX Atilde G -30\nKPX Atilde Gbreve -30\nKPX Atilde Gcommaaccent -30\nKPX Atilde O -30\nKPX Atilde Oacute -30\nKPX Atilde Ocircumflex -30\nKPX Atilde Odieresis -30\nKPX Atilde Ograve -30\nKPX Atilde Ohungarumlaut -30\nKPX Atilde Omacron -30\nKPX Atilde Oslash -30\nKPX Atilde Otilde -30\nKPX Atilde Q -30\nKPX Atilde T -120\nKPX Atilde Tcaron -120\nKPX Atilde Tcommaaccent -120\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -70\nKPX Atilde W -50\nKPX Atilde Y -100\nKPX Atilde Yacute -100\nKPX Atilde Ydieresis -100\nKPX Atilde u -30\nKPX Atilde uacute -30\nKPX Atilde ucircumflex -30\nKPX Atilde udieresis -30\nKPX Atilde ugrave -30\nKPX Atilde uhungarumlaut -30\nKPX Atilde umacron -30\nKPX Atilde uogonek -30\nKPX Atilde uring -30\nKPX Atilde v -40\nKPX Atilde w -40\nKPX Atilde y -40\nKPX Atilde yacute -40\nKPX Atilde ydieresis -40\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX B comma -20\nKPX B period -20\nKPX C comma -30\nKPX C period -30\nKPX Cacute comma -30\nKPX Cacute period -30\nKPX Ccaron comma -30\nKPX Ccaron period -30\nKPX Ccedilla comma -30\nKPX Ccedilla period -30\nKPX D A -40\nKPX D Aacute -40\nKPX D Abreve -40\nKPX D Acircumflex -40\nKPX D Adieresis -40\nKPX D Agrave -40\nKPX D Amacron -40\nKPX D Aogonek -40\nKPX D Aring -40\nKPX D Atilde -40\nKPX D V -70\nKPX D W -40\nKPX D Y -90\nKPX D Yacute -90\nKPX D Ydieresis -90\nKPX D comma -70\nKPX D period -70\nKPX Dcaron A -40\nKPX Dcaron Aacute -40\nKPX Dcaron Abreve -40\nKPX Dcaron Acircumflex -40\nKPX Dcaron Adieresis -40\nKPX Dcaron Agrave -40\nKPX Dcaron Amacron -40\nKPX Dcaron Aogonek -40\nKPX Dcaron Aring -40\nKPX Dcaron Atilde -40\nKPX Dcaron V -70\nKPX Dcaron W -40\nKPX Dcaron Y -90\nKPX Dcaron Yacute -90\nKPX Dcaron Ydieresis -90\nKPX Dcaron comma -70\nKPX Dcaron period -70\nKPX Dcroat A -40\nKPX Dcroat Aacute -40\nKPX Dcroat Abreve -40\nKPX Dcroat Acircumflex -40\nKPX Dcroat Adieresis -40\nKPX Dcroat Agrave -40\nKPX Dcroat Amacron -40\nKPX Dcroat Aogonek -40\nKPX Dcroat Aring -40\nKPX Dcroat Atilde -40\nKPX Dcroat V -70\nKPX Dcroat W -40\nKPX Dcroat Y -90\nKPX Dcroat Yacute -90\nKPX Dcroat Ydieresis -90\nKPX Dcroat comma -70\nKPX Dcroat period -70\nKPX F A -80\nKPX F Aacute -80\nKPX F Abreve -80\nKPX F Acircumflex -80\nKPX F Adieresis -80\nKPX F Agrave -80\nKPX F Amacron -80\nKPX F Aogonek -80\nKPX F Aring -80\nKPX F Atilde -80\nKPX F a -50\nKPX F aacute -50\nKPX F abreve -50\nKPX F acircumflex -50\nKPX F adieresis -50\nKPX F agrave -50\nKPX F amacron -50\nKPX F aogonek -50\nKPX F aring -50\nKPX F atilde -50\nKPX F comma -150\nKPX F e -30\nKPX F eacute -30\nKPX F ecaron -30\nKPX F ecircumflex -30\nKPX F edieresis -30\nKPX F edotaccent -30\nKPX F egrave -30\nKPX F emacron -30\nKPX F eogonek -30\nKPX F o -30\nKPX F oacute -30\nKPX F ocircumflex -30\nKPX F odieresis -30\nKPX F ograve -30\nKPX F ohungarumlaut -30\nKPX F omacron -30\nKPX F oslash -30\nKPX F otilde -30\nKPX F period -150\nKPX F r -45\nKPX F racute -45\nKPX F rcaron -45\nKPX F rcommaaccent -45\nKPX J A -20\nKPX J Aacute -20\nKPX J Abreve -20\nKPX J Acircumflex -20\nKPX J Adieresis -20\nKPX J Agrave -20\nKPX J Amacron -20\nKPX J Aogonek -20\nKPX J Aring -20\nKPX J Atilde -20\nKPX J a -20\nKPX J aacute -20\nKPX J abreve -20\nKPX J acircumflex -20\nKPX J adieresis -20\nKPX J agrave -20\nKPX J amacron -20\nKPX J aogonek -20\nKPX J aring -20\nKPX J atilde -20\nKPX J comma -30\nKPX J period -30\nKPX J u -20\nKPX J uacute -20\nKPX J ucircumflex -20\nKPX J udieresis -20\nKPX J ugrave -20\nKPX J uhungarumlaut -20\nKPX J umacron -20\nKPX J uogonek -20\nKPX J uring -20\nKPX K O -50\nKPX K Oacute -50\nKPX K Ocircumflex -50\nKPX K Odieresis -50\nKPX K Ograve -50\nKPX K Ohungarumlaut -50\nKPX K Omacron -50\nKPX K Oslash -50\nKPX K Otilde -50\nKPX K e -40\nKPX K eacute -40\nKPX K ecaron -40\nKPX K ecircumflex -40\nKPX K edieresis -40\nKPX K edotaccent -40\nKPX K egrave -40\nKPX K emacron -40\nKPX K eogonek -40\nKPX K o -40\nKPX K oacute -40\nKPX K ocircumflex -40\nKPX K odieresis -40\nKPX K ograve -40\nKPX K ohungarumlaut -40\nKPX K omacron -40\nKPX K oslash -40\nKPX K otilde -40\nKPX K u -30\nKPX K uacute -30\nKPX K ucircumflex -30\nKPX K udieresis -30\nKPX K ugrave -30\nKPX K uhungarumlaut -30\nKPX K umacron -30\nKPX K uogonek -30\nKPX K uring -30\nKPX K y -50\nKPX K yacute -50\nKPX K ydieresis -50\nKPX Kcommaaccent O -50\nKPX Kcommaaccent Oacute -50\nKPX Kcommaaccent Ocircumflex -50\nKPX Kcommaaccent Odieresis -50\nKPX Kcommaaccent Ograve -50\nKPX Kcommaaccent Ohungarumlaut -50\nKPX Kcommaaccent Omacron -50\nKPX Kcommaaccent Oslash -50\nKPX Kcommaaccent Otilde -50\nKPX Kcommaaccent e -40\nKPX Kcommaaccent eacute -40\nKPX Kcommaaccent ecaron -40\nKPX Kcommaaccent ecircumflex -40\nKPX Kcommaaccent edieresis -40\nKPX Kcommaaccent edotaccent -40\nKPX Kcommaaccent egrave -40\nKPX Kcommaaccent emacron -40\nKPX Kcommaaccent eogonek -40\nKPX Kcommaaccent o -40\nKPX Kcommaaccent oacute -40\nKPX Kcommaaccent ocircumflex -40\nKPX Kcommaaccent odieresis -40\nKPX Kcommaaccent ograve -40\nKPX Kcommaaccent ohungarumlaut -40\nKPX Kcommaaccent omacron -40\nKPX Kcommaaccent oslash -40\nKPX Kcommaaccent otilde -40\nKPX Kcommaaccent u -30\nKPX Kcommaaccent uacute -30\nKPX Kcommaaccent ucircumflex -30\nKPX Kcommaaccent udieresis -30\nKPX Kcommaaccent ugrave -30\nKPX Kcommaaccent uhungarumlaut -30\nKPX Kcommaaccent umacron -30\nKPX Kcommaaccent uogonek -30\nKPX Kcommaaccent uring -30\nKPX Kcommaaccent y -50\nKPX Kcommaaccent yacute -50\nKPX Kcommaaccent ydieresis -50\nKPX L T -110\nKPX L Tcaron -110\nKPX L Tcommaaccent -110\nKPX L V -110\nKPX L W -70\nKPX L Y -140\nKPX L Yacute -140\nKPX L Ydieresis -140\nKPX L quotedblright -140\nKPX L quoteright -160\nKPX L y -30\nKPX L yacute -30\nKPX L ydieresis -30\nKPX Lacute T -110\nKPX Lacute Tcaron -110\nKPX Lacute Tcommaaccent -110\nKPX Lacute V -110\nKPX Lacute W -70\nKPX Lacute Y -140\nKPX Lacute Yacute -140\nKPX Lacute Ydieresis -140\nKPX Lacute quotedblright -140\nKPX Lacute quoteright -160\nKPX Lacute y -30\nKPX Lacute yacute -30\nKPX Lacute ydieresis -30\nKPX Lcaron T -110\nKPX Lcaron Tcaron -110\nKPX Lcaron Tcommaaccent -110\nKPX Lcaron V -110\nKPX Lcaron W -70\nKPX Lcaron Y -140\nKPX Lcaron Yacute -140\nKPX Lcaron Ydieresis -140\nKPX Lcaron quotedblright -140\nKPX Lcaron quoteright -160\nKPX Lcaron y -30\nKPX Lcaron yacute -30\nKPX Lcaron ydieresis -30\nKPX Lcommaaccent T -110\nKPX Lcommaaccent Tcaron -110\nKPX Lcommaaccent Tcommaaccent -110\nKPX Lcommaaccent V -110\nKPX Lcommaaccent W -70\nKPX Lcommaaccent Y -140\nKPX Lcommaaccent Yacute -140\nKPX Lcommaaccent Ydieresis -140\nKPX Lcommaaccent quotedblright -140\nKPX Lcommaaccent quoteright -160\nKPX Lcommaaccent y -30\nKPX Lcommaaccent yacute -30\nKPX Lcommaaccent ydieresis -30\nKPX Lslash T -110\nKPX Lslash Tcaron -110\nKPX Lslash Tcommaaccent -110\nKPX Lslash V -110\nKPX Lslash W -70\nKPX Lslash Y -140\nKPX Lslash Yacute -140\nKPX Lslash Ydieresis -140\nKPX Lslash quotedblright -140\nKPX Lslash quoteright -160\nKPX Lslash y -30\nKPX Lslash yacute -30\nKPX Lslash ydieresis -30\nKPX O A -20\nKPX O Aacute -20\nKPX O Abreve -20\nKPX O Acircumflex -20\nKPX O Adieresis -20\nKPX O Agrave -20\nKPX O Amacron -20\nKPX O Aogonek -20\nKPX O Aring -20\nKPX O Atilde -20\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -30\nKPX O X -60\nKPX O Y -70\nKPX O Yacute -70\nKPX O Ydieresis -70\nKPX O comma -40\nKPX O period -40\nKPX Oacute A -20\nKPX Oacute Aacute -20\nKPX Oacute Abreve -20\nKPX Oacute Acircumflex -20\nKPX Oacute Adieresis -20\nKPX Oacute Agrave -20\nKPX Oacute Amacron -20\nKPX Oacute Aogonek -20\nKPX Oacute Aring -20\nKPX Oacute Atilde -20\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -30\nKPX Oacute X -60\nKPX Oacute Y -70\nKPX Oacute Yacute -70\nKPX Oacute Ydieresis -70\nKPX Oacute comma -40\nKPX Oacute period -40\nKPX Ocircumflex A -20\nKPX Ocircumflex Aacute -20\nKPX Ocircumflex Abreve -20\nKPX Ocircumflex Acircumflex -20\nKPX Ocircumflex Adieresis -20\nKPX Ocircumflex Agrave -20\nKPX Ocircumflex Amacron -20\nKPX Ocircumflex Aogonek -20\nKPX Ocircumflex Aring -20\nKPX Ocircumflex Atilde -20\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -30\nKPX Ocircumflex X -60\nKPX Ocircumflex Y -70\nKPX Ocircumflex Yacute -70\nKPX Ocircumflex Ydieresis -70\nKPX Ocircumflex comma -40\nKPX Ocircumflex period -40\nKPX Odieresis A -20\nKPX Odieresis Aacute -20\nKPX Odieresis Abreve -20\nKPX Odieresis Acircumflex -20\nKPX Odieresis Adieresis -20\nKPX Odieresis Agrave -20\nKPX Odieresis Amacron -20\nKPX Odieresis Aogonek -20\nKPX Odieresis Aring -20\nKPX Odieresis Atilde -20\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -30\nKPX Odieresis X -60\nKPX Odieresis Y -70\nKPX Odieresis Yacute -70\nKPX Odieresis Ydieresis -70\nKPX Odieresis comma -40\nKPX Odieresis period -40\nKPX Ograve A -20\nKPX Ograve Aacute -20\nKPX Ograve Abreve -20\nKPX Ograve Acircumflex -20\nKPX Ograve Adieresis -20\nKPX Ograve Agrave -20\nKPX Ograve Amacron -20\nKPX Ograve Aogonek -20\nKPX Ograve Aring -20\nKPX Ograve Atilde -20\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -30\nKPX Ograve X -60\nKPX Ograve Y -70\nKPX Ograve Yacute -70\nKPX Ograve Ydieresis -70\nKPX Ograve comma -40\nKPX Ograve period -40\nKPX Ohungarumlaut A -20\nKPX Ohungarumlaut Aacute -20\nKPX Ohungarumlaut Abreve -20\nKPX Ohungarumlaut Acircumflex -20\nKPX Ohungarumlaut Adieresis -20\nKPX Ohungarumlaut Agrave -20\nKPX Ohungarumlaut Amacron -20\nKPX Ohungarumlaut Aogonek -20\nKPX Ohungarumlaut Aring -20\nKPX Ohungarumlaut Atilde -20\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -30\nKPX Ohungarumlaut X -60\nKPX Ohungarumlaut Y -70\nKPX Ohungarumlaut Yacute -70\nKPX Ohungarumlaut Ydieresis -70\nKPX Ohungarumlaut comma -40\nKPX Ohungarumlaut period -40\nKPX Omacron A -20\nKPX Omacron Aacute -20\nKPX Omacron Abreve -20\nKPX Omacron Acircumflex -20\nKPX Omacron Adieresis -20\nKPX Omacron Agrave -20\nKPX Omacron Amacron -20\nKPX Omacron Aogonek -20\nKPX Omacron Aring -20\nKPX Omacron Atilde -20\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -30\nKPX Omacron X -60\nKPX Omacron Y -70\nKPX Omacron Yacute -70\nKPX Omacron Ydieresis -70\nKPX Omacron comma -40\nKPX Omacron period -40\nKPX Oslash A -20\nKPX Oslash Aacute -20\nKPX Oslash Abreve -20\nKPX Oslash Acircumflex -20\nKPX Oslash Adieresis -20\nKPX Oslash Agrave -20\nKPX Oslash Amacron -20\nKPX Oslash Aogonek -20\nKPX Oslash Aring -20\nKPX Oslash Atilde -20\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -30\nKPX Oslash X -60\nKPX Oslash Y -70\nKPX Oslash Yacute -70\nKPX Oslash Ydieresis -70\nKPX Oslash comma -40\nKPX Oslash period -40\nKPX Otilde A -20\nKPX Otilde Aacute -20\nKPX Otilde Abreve -20\nKPX Otilde Acircumflex -20\nKPX Otilde Adieresis -20\nKPX Otilde Agrave -20\nKPX Otilde Amacron -20\nKPX Otilde Aogonek -20\nKPX Otilde Aring -20\nKPX Otilde Atilde -20\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -30\nKPX Otilde X -60\nKPX Otilde Y -70\nKPX Otilde Yacute -70\nKPX Otilde Ydieresis -70\nKPX Otilde comma -40\nKPX Otilde period -40\nKPX P A -120\nKPX P Aacute -120\nKPX P Abreve -120\nKPX P Acircumflex -120\nKPX P Adieresis -120\nKPX P Agrave -120\nKPX P Amacron -120\nKPX P Aogonek -120\nKPX P Aring -120\nKPX P Atilde -120\nKPX P a -40\nKPX P aacute -40\nKPX P abreve -40\nKPX P acircumflex -40\nKPX P adieresis -40\nKPX P agrave -40\nKPX P amacron -40\nKPX P aogonek -40\nKPX P aring -40\nKPX P atilde -40\nKPX P comma -180\nKPX P e -50\nKPX P eacute -50\nKPX P ecaron -50\nKPX P ecircumflex -50\nKPX P edieresis -50\nKPX P edotaccent -50\nKPX P egrave -50\nKPX P emacron -50\nKPX P eogonek -50\nKPX P o -50\nKPX P oacute -50\nKPX P ocircumflex -50\nKPX P odieresis -50\nKPX P ograve -50\nKPX P ohungarumlaut -50\nKPX P omacron -50\nKPX P oslash -50\nKPX P otilde -50\nKPX P period -180\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX R O -20\nKPX R Oacute -20\nKPX R Ocircumflex -20\nKPX R Odieresis -20\nKPX R Ograve -20\nKPX R Ohungarumlaut -20\nKPX R Omacron -20\nKPX R Oslash -20\nKPX R Otilde -20\nKPX R T -30\nKPX R Tcaron -30\nKPX R Tcommaaccent -30\nKPX R U -40\nKPX R Uacute -40\nKPX R Ucircumflex -40\nKPX R Udieresis -40\nKPX R Ugrave -40\nKPX R Uhungarumlaut -40\nKPX R Umacron -40\nKPX R Uogonek -40\nKPX R Uring -40\nKPX R V -50\nKPX R W -30\nKPX R Y -50\nKPX R Yacute -50\nKPX R Ydieresis -50\nKPX Racute O -20\nKPX Racute Oacute -20\nKPX Racute Ocircumflex -20\nKPX Racute Odieresis -20\nKPX Racute Ograve -20\nKPX Racute Ohungarumlaut -20\nKPX Racute Omacron -20\nKPX Racute Oslash -20\nKPX Racute Otilde -20\nKPX Racute T -30\nKPX Racute Tcaron -30\nKPX Racute Tcommaaccent -30\nKPX Racute U -40\nKPX Racute Uacute -40\nKPX Racute Ucircumflex -40\nKPX Racute Udieresis -40\nKPX Racute Ugrave -40\nKPX Racute Uhungarumlaut -40\nKPX Racute Umacron -40\nKPX Racute Uogonek -40\nKPX Racute Uring -40\nKPX Racute V -50\nKPX Racute W -30\nKPX Racute Y -50\nKPX Racute Yacute -50\nKPX Racute Ydieresis -50\nKPX Rcaron O -20\nKPX Rcaron Oacute -20\nKPX Rcaron Ocircumflex -20\nKPX Rcaron Odieresis -20\nKPX Rcaron Ograve -20\nKPX Rcaron Ohungarumlaut -20\nKPX Rcaron Omacron -20\nKPX Rcaron Oslash -20\nKPX Rcaron Otilde -20\nKPX Rcaron T -30\nKPX Rcaron Tcaron -30\nKPX Rcaron Tcommaaccent -30\nKPX Rcaron U -40\nKPX Rcaron Uacute -40\nKPX Rcaron Ucircumflex -40\nKPX Rcaron Udieresis -40\nKPX Rcaron Ugrave -40\nKPX Rcaron Uhungarumlaut -40\nKPX Rcaron Umacron -40\nKPX Rcaron Uogonek -40\nKPX Rcaron Uring -40\nKPX Rcaron V -50\nKPX Rcaron W -30\nKPX Rcaron Y -50\nKPX Rcaron Yacute -50\nKPX Rcaron Ydieresis -50\nKPX Rcommaaccent O -20\nKPX Rcommaaccent Oacute -20\nKPX Rcommaaccent Ocircumflex -20\nKPX Rcommaaccent Odieresis -20\nKPX Rcommaaccent Ograve -20\nKPX Rcommaaccent Ohungarumlaut -20\nKPX Rcommaaccent Omacron -20\nKPX Rcommaaccent Oslash -20\nKPX Rcommaaccent Otilde -20\nKPX Rcommaaccent T -30\nKPX Rcommaaccent Tcaron -30\nKPX Rcommaaccent Tcommaaccent -30\nKPX Rcommaaccent U -40\nKPX Rcommaaccent Uacute -40\nKPX Rcommaaccent Ucircumflex -40\nKPX Rcommaaccent Udieresis -40\nKPX Rcommaaccent Ugrave -40\nKPX Rcommaaccent Uhungarumlaut -40\nKPX Rcommaaccent Umacron -40\nKPX Rcommaaccent Uogonek -40\nKPX Rcommaaccent Uring -40\nKPX Rcommaaccent V -50\nKPX Rcommaaccent W -30\nKPX Rcommaaccent Y -50\nKPX Rcommaaccent Yacute -50\nKPX Rcommaaccent Ydieresis -50\nKPX S comma -20\nKPX S period -20\nKPX Sacute comma -20\nKPX Sacute period -20\nKPX Scaron comma -20\nKPX Scaron period -20\nKPX Scedilla comma -20\nKPX Scedilla period -20\nKPX Scommaaccent comma -20\nKPX Scommaaccent period -20\nKPX T A -120\nKPX T Aacute -120\nKPX T Abreve -120\nKPX T Acircumflex -120\nKPX T Adieresis -120\nKPX T Agrave -120\nKPX T Amacron -120\nKPX T Aogonek -120\nKPX T Aring -120\nKPX T Atilde -120\nKPX T O -40\nKPX T Oacute -40\nKPX T Ocircumflex -40\nKPX T Odieresis -40\nKPX T Ograve -40\nKPX T Ohungarumlaut -40\nKPX T Omacron -40\nKPX T Oslash -40\nKPX T Otilde -40\nKPX T a -120\nKPX T aacute -120\nKPX T abreve -60\nKPX T acircumflex -120\nKPX T adieresis -120\nKPX T agrave -120\nKPX T amacron -60\nKPX T aogonek -120\nKPX T aring -120\nKPX T atilde -60\nKPX T colon -20\nKPX T comma -120\nKPX T e -120\nKPX T eacute -120\nKPX T ecaron -120\nKPX T ecircumflex -120\nKPX T edieresis -120\nKPX T edotaccent -120\nKPX T egrave -60\nKPX T emacron -60\nKPX T eogonek -120\nKPX T hyphen -140\nKPX T o -120\nKPX T oacute -120\nKPX T ocircumflex -120\nKPX T odieresis -120\nKPX T ograve -120\nKPX T ohungarumlaut -120\nKPX T omacron -60\nKPX T oslash -120\nKPX T otilde -60\nKPX T period -120\nKPX T r -120\nKPX T racute -120\nKPX T rcaron -120\nKPX T rcommaaccent -120\nKPX T semicolon -20\nKPX T u -120\nKPX T uacute -120\nKPX T ucircumflex -120\nKPX T udieresis -120\nKPX T ugrave -120\nKPX T uhungarumlaut -120\nKPX T umacron -60\nKPX T uogonek -120\nKPX T uring -120\nKPX T w -120\nKPX T y -120\nKPX T yacute -120\nKPX T ydieresis -60\nKPX Tcaron A -120\nKPX Tcaron Aacute -120\nKPX Tcaron Abreve -120\nKPX Tcaron Acircumflex -120\nKPX Tcaron Adieresis -120\nKPX Tcaron Agrave -120\nKPX Tcaron Amacron -120\nKPX Tcaron Aogonek -120\nKPX Tcaron Aring -120\nKPX Tcaron Atilde -120\nKPX Tcaron O -40\nKPX Tcaron Oacute -40\nKPX Tcaron Ocircumflex -40\nKPX Tcaron Odieresis -40\nKPX Tcaron Ograve -40\nKPX Tcaron Ohungarumlaut -40\nKPX Tcaron Omacron -40\nKPX Tcaron Oslash -40\nKPX Tcaron Otilde -40\nKPX Tcaron a -120\nKPX Tcaron aacute -120\nKPX Tcaron abreve -60\nKPX Tcaron acircumflex -120\nKPX Tcaron adieresis -120\nKPX Tcaron agrave -120\nKPX Tcaron amacron -60\nKPX Tcaron aogonek -120\nKPX Tcaron aring -120\nKPX Tcaron atilde -60\nKPX Tcaron colon -20\nKPX Tcaron comma -120\nKPX Tcaron e -120\nKPX Tcaron eacute -120\nKPX Tcaron ecaron -120\nKPX Tcaron ecircumflex -120\nKPX Tcaron edieresis -120\nKPX Tcaron edotaccent -120\nKPX Tcaron egrave -60\nKPX Tcaron emacron -60\nKPX Tcaron eogonek -120\nKPX Tcaron hyphen -140\nKPX Tcaron o -120\nKPX Tcaron oacute -120\nKPX Tcaron ocircumflex -120\nKPX Tcaron odieresis -120\nKPX Tcaron ograve -120\nKPX Tcaron ohungarumlaut -120\nKPX Tcaron omacron -60\nKPX Tcaron oslash -120\nKPX Tcaron otilde -60\nKPX Tcaron period -120\nKPX Tcaron r -120\nKPX Tcaron racute -120\nKPX Tcaron rcaron -120\nKPX Tcaron rcommaaccent -120\nKPX Tcaron semicolon -20\nKPX Tcaron u -120\nKPX Tcaron uacute -120\nKPX Tcaron ucircumflex -120\nKPX Tcaron udieresis -120\nKPX Tcaron ugrave -120\nKPX Tcaron uhungarumlaut -120\nKPX Tcaron umacron -60\nKPX Tcaron uogonek -120\nKPX Tcaron uring -120\nKPX Tcaron w -120\nKPX Tcaron y -120\nKPX Tcaron yacute -120\nKPX Tcaron ydieresis -60\nKPX Tcommaaccent A -120\nKPX Tcommaaccent Aacute -120\nKPX Tcommaaccent Abreve -120\nKPX Tcommaaccent Acircumflex -120\nKPX Tcommaaccent Adieresis -120\nKPX Tcommaaccent Agrave -120\nKPX Tcommaaccent Amacron -120\nKPX Tcommaaccent Aogonek -120\nKPX Tcommaaccent Aring -120\nKPX Tcommaaccent Atilde -120\nKPX Tcommaaccent O -40\nKPX Tcommaaccent Oacute -40\nKPX Tcommaaccent Ocircumflex -40\nKPX Tcommaaccent Odieresis -40\nKPX Tcommaaccent Ograve -40\nKPX Tcommaaccent Ohungarumlaut -40\nKPX Tcommaaccent Omacron -40\nKPX Tcommaaccent Oslash -40\nKPX Tcommaaccent Otilde -40\nKPX Tcommaaccent a -120\nKPX Tcommaaccent aacute -120\nKPX Tcommaaccent abreve -60\nKPX Tcommaaccent acircumflex -120\nKPX Tcommaaccent adieresis -120\nKPX Tcommaaccent agrave -120\nKPX Tcommaaccent amacron -60\nKPX Tcommaaccent aogonek -120\nKPX Tcommaaccent aring -120\nKPX Tcommaaccent atilde -60\nKPX Tcommaaccent colon -20\nKPX Tcommaaccent comma -120\nKPX Tcommaaccent e -120\nKPX Tcommaaccent eacute -120\nKPX Tcommaaccent ecaron -120\nKPX Tcommaaccent ecircumflex -120\nKPX Tcommaaccent edieresis -120\nKPX Tcommaaccent edotaccent -120\nKPX Tcommaaccent egrave -60\nKPX Tcommaaccent emacron -60\nKPX Tcommaaccent eogonek -120\nKPX Tcommaaccent hyphen -140\nKPX Tcommaaccent o -120\nKPX Tcommaaccent oacute -120\nKPX Tcommaaccent ocircumflex -120\nKPX Tcommaaccent odieresis -120\nKPX Tcommaaccent ograve -120\nKPX Tcommaaccent ohungarumlaut -120\nKPX Tcommaaccent omacron -60\nKPX Tcommaaccent oslash -120\nKPX Tcommaaccent otilde -60\nKPX Tcommaaccent period -120\nKPX Tcommaaccent r -120\nKPX Tcommaaccent racute -120\nKPX Tcommaaccent rcaron -120\nKPX Tcommaaccent rcommaaccent -120\nKPX Tcommaaccent semicolon -20\nKPX Tcommaaccent u -120\nKPX Tcommaaccent uacute -120\nKPX Tcommaaccent ucircumflex -120\nKPX Tcommaaccent udieresis -120\nKPX Tcommaaccent ugrave -120\nKPX Tcommaaccent uhungarumlaut -120\nKPX Tcommaaccent umacron -60\nKPX Tcommaaccent uogonek -120\nKPX Tcommaaccent uring -120\nKPX Tcommaaccent w -120\nKPX Tcommaaccent y -120\nKPX Tcommaaccent yacute -120\nKPX Tcommaaccent ydieresis -60\nKPX U A -40\nKPX U Aacute -40\nKPX U Abreve -40\nKPX U Acircumflex -40\nKPX U Adieresis -40\nKPX U Agrave -40\nKPX U Amacron -40\nKPX U Aogonek -40\nKPX U Aring -40\nKPX U Atilde -40\nKPX U comma -40\nKPX U period -40\nKPX Uacute A -40\nKPX Uacute Aacute -40\nKPX Uacute Abreve -40\nKPX Uacute Acircumflex -40\nKPX Uacute Adieresis -40\nKPX Uacute Agrave -40\nKPX Uacute Amacron -40\nKPX Uacute Aogonek -40\nKPX Uacute Aring -40\nKPX Uacute Atilde -40\nKPX Uacute comma -40\nKPX Uacute period -40\nKPX Ucircumflex A -40\nKPX Ucircumflex Aacute -40\nKPX Ucircumflex Abreve -40\nKPX Ucircumflex Acircumflex -40\nKPX Ucircumflex Adieresis -40\nKPX Ucircumflex Agrave -40\nKPX Ucircumflex Amacron -40\nKPX Ucircumflex Aogonek -40\nKPX Ucircumflex Aring -40\nKPX Ucircumflex Atilde -40\nKPX Ucircumflex comma -40\nKPX Ucircumflex period -40\nKPX Udieresis A -40\nKPX Udieresis Aacute -40\nKPX Udieresis Abreve -40\nKPX Udieresis Acircumflex -40\nKPX Udieresis Adieresis -40\nKPX Udieresis Agrave -40\nKPX Udieresis Amacron -40\nKPX Udieresis Aogonek -40\nKPX Udieresis Aring -40\nKPX Udieresis Atilde -40\nKPX Udieresis comma -40\nKPX Udieresis period -40\nKPX Ugrave A -40\nKPX Ugrave Aacute -40\nKPX Ugrave Abreve -40\nKPX Ugrave Acircumflex -40\nKPX Ugrave Adieresis -40\nKPX Ugrave Agrave -40\nKPX Ugrave Amacron -40\nKPX Ugrave Aogonek -40\nKPX Ugrave Aring -40\nKPX Ugrave Atilde -40\nKPX Ugrave comma -40\nKPX Ugrave period -40\nKPX Uhungarumlaut A -40\nKPX Uhungarumlaut Aacute -40\nKPX Uhungarumlaut Abreve -40\nKPX Uhungarumlaut Acircumflex -40\nKPX Uhungarumlaut Adieresis -40\nKPX Uhungarumlaut Agrave -40\nKPX Uhungarumlaut Amacron -40\nKPX Uhungarumlaut Aogonek -40\nKPX Uhungarumlaut Aring -40\nKPX Uhungarumlaut Atilde -40\nKPX Uhungarumlaut comma -40\nKPX Uhungarumlaut period -40\nKPX Umacron A -40\nKPX Umacron Aacute -40\nKPX Umacron Abreve -40\nKPX Umacron Acircumflex -40\nKPX Umacron Adieresis -40\nKPX Umacron Agrave -40\nKPX Umacron Amacron -40\nKPX Umacron Aogonek -40\nKPX Umacron Aring -40\nKPX Umacron Atilde -40\nKPX Umacron comma -40\nKPX Umacron period -40\nKPX Uogonek A -40\nKPX Uogonek Aacute -40\nKPX Uogonek Abreve -40\nKPX Uogonek Acircumflex -40\nKPX Uogonek Adieresis -40\nKPX Uogonek Agrave -40\nKPX Uogonek Amacron -40\nKPX Uogonek Aogonek -40\nKPX Uogonek Aring -40\nKPX Uogonek Atilde -40\nKPX Uogonek comma -40\nKPX Uogonek period -40\nKPX Uring A -40\nKPX Uring Aacute -40\nKPX Uring Abreve -40\nKPX Uring Acircumflex -40\nKPX Uring Adieresis -40\nKPX Uring Agrave -40\nKPX Uring Amacron -40\nKPX Uring Aogonek -40\nKPX Uring Aring -40\nKPX Uring Atilde -40\nKPX Uring comma -40\nKPX Uring period -40\nKPX V A -80\nKPX V Aacute -80\nKPX V Abreve -80\nKPX V Acircumflex -80\nKPX V Adieresis -80\nKPX V Agrave -80\nKPX V Amacron -80\nKPX V Aogonek -80\nKPX V Aring -80\nKPX V Atilde -80\nKPX V G -40\nKPX V Gbreve -40\nKPX V Gcommaaccent -40\nKPX V O -40\nKPX V Oacute -40\nKPX V Ocircumflex -40\nKPX V Odieresis -40\nKPX V Ograve -40\nKPX V Ohungarumlaut -40\nKPX V Omacron -40\nKPX V Oslash -40\nKPX V Otilde -40\nKPX V a -70\nKPX V aacute -70\nKPX V abreve -70\nKPX V acircumflex -70\nKPX V adieresis -70\nKPX V agrave -70\nKPX V amacron -70\nKPX V aogonek -70\nKPX V aring -70\nKPX V atilde -70\nKPX V colon -40\nKPX V comma -125\nKPX V e -80\nKPX V eacute -80\nKPX V ecaron -80\nKPX V ecircumflex -80\nKPX V edieresis -80\nKPX V edotaccent -80\nKPX V egrave -80\nKPX V emacron -80\nKPX V eogonek -80\nKPX V hyphen -80\nKPX V o -80\nKPX V oacute -80\nKPX V ocircumflex -80\nKPX V odieresis -80\nKPX V ograve -80\nKPX V ohungarumlaut -80\nKPX V omacron -80\nKPX V oslash -80\nKPX V otilde -80\nKPX V period -125\nKPX V semicolon -40\nKPX V u -70\nKPX V uacute -70\nKPX V ucircumflex -70\nKPX V udieresis -70\nKPX V ugrave -70\nKPX V uhungarumlaut -70\nKPX V umacron -70\nKPX V uogonek -70\nKPX V uring -70\nKPX W A -50\nKPX W Aacute -50\nKPX W Abreve -50\nKPX W Acircumflex -50\nKPX W Adieresis -50\nKPX W Agrave -50\nKPX W Amacron -50\nKPX W Aogonek -50\nKPX W Aring -50\nKPX W Atilde -50\nKPX W O -20\nKPX W Oacute -20\nKPX W Ocircumflex -20\nKPX W Odieresis -20\nKPX W Ograve -20\nKPX W Ohungarumlaut -20\nKPX W Omacron -20\nKPX W Oslash -20\nKPX W Otilde -20\nKPX W a -40\nKPX W aacute -40\nKPX W abreve -40\nKPX W acircumflex -40\nKPX W adieresis -40\nKPX W agrave -40\nKPX W amacron -40\nKPX W aogonek -40\nKPX W aring -40\nKPX W atilde -40\nKPX W comma -80\nKPX W e -30\nKPX W eacute -30\nKPX W ecaron -30\nKPX W ecircumflex -30\nKPX W edieresis -30\nKPX W edotaccent -30\nKPX W egrave -30\nKPX W emacron -30\nKPX W eogonek -30\nKPX W hyphen -40\nKPX W o -30\nKPX W oacute -30\nKPX W ocircumflex -30\nKPX W odieresis -30\nKPX W ograve -30\nKPX W ohungarumlaut -30\nKPX W omacron -30\nKPX W oslash -30\nKPX W otilde -30\nKPX W period -80\nKPX W u -30\nKPX W uacute -30\nKPX W ucircumflex -30\nKPX W udieresis -30\nKPX W ugrave -30\nKPX W uhungarumlaut -30\nKPX W umacron -30\nKPX W uogonek -30\nKPX W uring -30\nKPX W y -20\nKPX W yacute -20\nKPX W ydieresis -20\nKPX Y A -110\nKPX Y Aacute -110\nKPX Y Abreve -110\nKPX Y Acircumflex -110\nKPX Y Adieresis -110\nKPX Y Agrave -110\nKPX Y Amacron -110\nKPX Y Aogonek -110\nKPX Y Aring -110\nKPX Y Atilde -110\nKPX Y O -85\nKPX Y Oacute -85\nKPX Y Ocircumflex -85\nKPX Y Odieresis -85\nKPX Y Ograve -85\nKPX Y Ohungarumlaut -85\nKPX Y Omacron -85\nKPX Y Oslash -85\nKPX Y Otilde -85\nKPX Y a -140\nKPX Y aacute -140\nKPX Y abreve -70\nKPX Y acircumflex -140\nKPX Y adieresis -140\nKPX Y agrave -140\nKPX Y amacron -70\nKPX Y aogonek -140\nKPX Y aring -140\nKPX Y atilde -140\nKPX Y colon -60\nKPX Y comma -140\nKPX Y e -140\nKPX Y eacute -140\nKPX Y ecaron -140\nKPX Y ecircumflex -140\nKPX Y edieresis -140\nKPX Y edotaccent -140\nKPX Y egrave -140\nKPX Y emacron -70\nKPX Y eogonek -140\nKPX Y hyphen -140\nKPX Y i -20\nKPX Y iacute -20\nKPX Y iogonek -20\nKPX Y o -140\nKPX Y oacute -140\nKPX Y ocircumflex -140\nKPX Y odieresis -140\nKPX Y ograve -140\nKPX Y ohungarumlaut -140\nKPX Y omacron -140\nKPX Y oslash -140\nKPX Y otilde -140\nKPX Y period -140\nKPX Y semicolon -60\nKPX Y u -110\nKPX Y uacute -110\nKPX Y ucircumflex -110\nKPX Y udieresis -110\nKPX Y ugrave -110\nKPX Y uhungarumlaut -110\nKPX Y umacron -110\nKPX Y uogonek -110\nKPX Y uring -110\nKPX Yacute A -110\nKPX Yacute Aacute -110\nKPX Yacute Abreve -110\nKPX Yacute Acircumflex -110\nKPX Yacute Adieresis -110\nKPX Yacute Agrave -110\nKPX Yacute Amacron -110\nKPX Yacute Aogonek -110\nKPX Yacute Aring -110\nKPX Yacute Atilde -110\nKPX Yacute O -85\nKPX Yacute Oacute -85\nKPX Yacute Ocircumflex -85\nKPX Yacute Odieresis -85\nKPX Yacute Ograve -85\nKPX Yacute Ohungarumlaut -85\nKPX Yacute Omacron -85\nKPX Yacute Oslash -85\nKPX Yacute Otilde -85\nKPX Yacute a -140\nKPX Yacute aacute -140\nKPX Yacute abreve -70\nKPX Yacute acircumflex -140\nKPX Yacute adieresis -140\nKPX Yacute agrave -140\nKPX Yacute amacron -70\nKPX Yacute aogonek -140\nKPX Yacute aring -140\nKPX Yacute atilde -70\nKPX Yacute colon -60\nKPX Yacute comma -140\nKPX Yacute e -140\nKPX Yacute eacute -140\nKPX Yacute ecaron -140\nKPX Yacute ecircumflex -140\nKPX Yacute edieresis -140\nKPX Yacute edotaccent -140\nKPX Yacute egrave -140\nKPX Yacute emacron -70\nKPX Yacute eogonek -140\nKPX Yacute hyphen -140\nKPX Yacute i -20\nKPX Yacute iacute -20\nKPX Yacute iogonek -20\nKPX Yacute o -140\nKPX Yacute oacute -140\nKPX Yacute ocircumflex -140\nKPX Yacute odieresis -140\nKPX Yacute ograve -140\nKPX Yacute ohungarumlaut -140\nKPX Yacute omacron -70\nKPX Yacute oslash -140\nKPX Yacute otilde -140\nKPX Yacute period -140\nKPX Yacute semicolon -60\nKPX Yacute u -110\nKPX Yacute uacute -110\nKPX Yacute ucircumflex -110\nKPX Yacute udieresis -110\nKPX Yacute ugrave -110\nKPX Yacute uhungarumlaut -110\nKPX Yacute umacron -110\nKPX Yacute uogonek -110\nKPX Yacute uring -110\nKPX Ydieresis A -110\nKPX Ydieresis Aacute -110\nKPX Ydieresis Abreve -110\nKPX Ydieresis Acircumflex -110\nKPX Ydieresis Adieresis -110\nKPX Ydieresis Agrave -110\nKPX Ydieresis Amacron -110\nKPX Ydieresis Aogonek -110\nKPX Ydieresis Aring -110\nKPX Ydieresis Atilde -110\nKPX Ydieresis O -85\nKPX Ydieresis Oacute -85\nKPX Ydieresis Ocircumflex -85\nKPX Ydieresis Odieresis -85\nKPX Ydieresis Ograve -85\nKPX Ydieresis Ohungarumlaut -85\nKPX Ydieresis Omacron -85\nKPX Ydieresis Oslash -85\nKPX Ydieresis Otilde -85\nKPX Ydieresis a -140\nKPX Ydieresis aacute -140\nKPX Ydieresis abreve -70\nKPX Ydieresis acircumflex -140\nKPX Ydieresis adieresis -140\nKPX Ydieresis agrave -140\nKPX Ydieresis amacron -70\nKPX Ydieresis aogonek -140\nKPX Ydieresis aring -140\nKPX Ydieresis atilde -70\nKPX Ydieresis colon -60\nKPX Ydieresis comma -140\nKPX Ydieresis e -140\nKPX Ydieresis eacute -140\nKPX Ydieresis ecaron -140\nKPX Ydieresis ecircumflex -140\nKPX Ydieresis edieresis -140\nKPX Ydieresis edotaccent -140\nKPX Ydieresis egrave -140\nKPX Ydieresis emacron -70\nKPX Ydieresis eogonek -140\nKPX Ydieresis hyphen -140\nKPX Ydieresis i -20\nKPX Ydieresis iacute -20\nKPX Ydieresis iogonek -20\nKPX Ydieresis o -140\nKPX Ydieresis oacute -140\nKPX Ydieresis ocircumflex -140\nKPX Ydieresis odieresis -140\nKPX Ydieresis ograve -140\nKPX Ydieresis ohungarumlaut -140\nKPX Ydieresis omacron -140\nKPX Ydieresis oslash -140\nKPX Ydieresis otilde -140\nKPX Ydieresis period -140\nKPX Ydieresis semicolon -60\nKPX Ydieresis u -110\nKPX Ydieresis uacute -110\nKPX Ydieresis ucircumflex -110\nKPX Ydieresis udieresis -110\nKPX Ydieresis ugrave -110\nKPX Ydieresis uhungarumlaut -110\nKPX Ydieresis umacron -110\nKPX Ydieresis uogonek -110\nKPX Ydieresis uring -110\nKPX a v -20\nKPX a w -20\nKPX a y -30\nKPX a yacute -30\nKPX a ydieresis -30\nKPX aacute v -20\nKPX aacute w -20\nKPX aacute y -30\nKPX aacute yacute -30\nKPX aacute ydieresis -30\nKPX abreve v -20\nKPX abreve w -20\nKPX abreve y -30\nKPX abreve yacute -30\nKPX abreve ydieresis -30\nKPX acircumflex v -20\nKPX acircumflex w -20\nKPX acircumflex y -30\nKPX acircumflex yacute -30\nKPX acircumflex ydieresis -30\nKPX adieresis v -20\nKPX adieresis w -20\nKPX adieresis y -30\nKPX adieresis yacute -30\nKPX adieresis ydieresis -30\nKPX agrave v -20\nKPX agrave w -20\nKPX agrave y -30\nKPX agrave yacute -30\nKPX agrave ydieresis -30\nKPX amacron v -20\nKPX amacron w -20\nKPX amacron y -30\nKPX amacron yacute -30\nKPX amacron ydieresis -30\nKPX aogonek v -20\nKPX aogonek w -20\nKPX aogonek y -30\nKPX aogonek yacute -30\nKPX aogonek ydieresis -30\nKPX aring v -20\nKPX aring w -20\nKPX aring y -30\nKPX aring yacute -30\nKPX aring ydieresis -30\nKPX atilde v -20\nKPX atilde w -20\nKPX atilde y -30\nKPX atilde yacute -30\nKPX atilde ydieresis -30\nKPX b b -10\nKPX b comma -40\nKPX b l -20\nKPX b lacute -20\nKPX b lcommaaccent -20\nKPX b lslash -20\nKPX b period -40\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX b v -20\nKPX b y -20\nKPX b yacute -20\nKPX b ydieresis -20\nKPX c comma -15\nKPX c k -20\nKPX c kcommaaccent -20\nKPX cacute comma -15\nKPX cacute k -20\nKPX cacute kcommaaccent -20\nKPX ccaron comma -15\nKPX ccaron k -20\nKPX ccaron kcommaaccent -20\nKPX ccedilla comma -15\nKPX ccedilla k -20\nKPX ccedilla kcommaaccent -20\nKPX colon space -50\nKPX comma quotedblright -100\nKPX comma quoteright -100\nKPX e comma -15\nKPX e period -15\nKPX e v -30\nKPX e w -20\nKPX e x -30\nKPX e y -20\nKPX e yacute -20\nKPX e ydieresis -20\nKPX eacute comma -15\nKPX eacute period -15\nKPX eacute v -30\nKPX eacute w -20\nKPX eacute x -30\nKPX eacute y -20\nKPX eacute yacute -20\nKPX eacute ydieresis -20\nKPX ecaron comma -15\nKPX ecaron period -15\nKPX ecaron v -30\nKPX ecaron w -20\nKPX ecaron x -30\nKPX ecaron y -20\nKPX ecaron yacute -20\nKPX ecaron ydieresis -20\nKPX ecircumflex comma -15\nKPX ecircumflex period -15\nKPX ecircumflex v -30\nKPX ecircumflex w -20\nKPX ecircumflex x -30\nKPX ecircumflex y -20\nKPX ecircumflex yacute -20\nKPX ecircumflex ydieresis -20\nKPX edieresis comma -15\nKPX edieresis period -15\nKPX edieresis v -30\nKPX edieresis w -20\nKPX edieresis x -30\nKPX edieresis y -20\nKPX edieresis yacute -20\nKPX edieresis ydieresis -20\nKPX edotaccent comma -15\nKPX edotaccent period -15\nKPX edotaccent v -30\nKPX edotaccent w -20\nKPX edotaccent x -30\nKPX edotaccent y -20\nKPX edotaccent yacute -20\nKPX edotaccent ydieresis -20\nKPX egrave comma -15\nKPX egrave period -15\nKPX egrave v -30\nKPX egrave w -20\nKPX egrave x -30\nKPX egrave y -20\nKPX egrave yacute -20\nKPX egrave ydieresis -20\nKPX emacron comma -15\nKPX emacron period -15\nKPX emacron v -30\nKPX emacron w -20\nKPX emacron x -30\nKPX emacron y -20\nKPX emacron yacute -20\nKPX emacron ydieresis -20\nKPX eogonek comma -15\nKPX eogonek period -15\nKPX eogonek v -30\nKPX eogonek w -20\nKPX eogonek x -30\nKPX eogonek y -20\nKPX eogonek yacute -20\nKPX eogonek ydieresis -20\nKPX f a -30\nKPX f aacute -30\nKPX f abreve -30\nKPX f acircumflex -30\nKPX f adieresis -30\nKPX f agrave -30\nKPX f amacron -30\nKPX f aogonek -30\nKPX f aring -30\nKPX f atilde -30\nKPX f comma -30\nKPX f dotlessi -28\nKPX f e -30\nKPX f eacute -30\nKPX f ecaron -30\nKPX f ecircumflex -30\nKPX f edieresis -30\nKPX f edotaccent -30\nKPX f egrave -30\nKPX f emacron -30\nKPX f eogonek -30\nKPX f o -30\nKPX f oacute -30\nKPX f ocircumflex -30\nKPX f odieresis -30\nKPX f ograve -30\nKPX f ohungarumlaut -30\nKPX f omacron -30\nKPX f oslash -30\nKPX f otilde -30\nKPX f period -30\nKPX f quotedblright 60\nKPX f quoteright 50\nKPX g r -10\nKPX g racute -10\nKPX g rcaron -10\nKPX g rcommaaccent -10\nKPX gbreve r -10\nKPX gbreve racute -10\nKPX gbreve rcaron -10\nKPX gbreve rcommaaccent -10\nKPX gcommaaccent r -10\nKPX gcommaaccent racute -10\nKPX gcommaaccent rcaron -10\nKPX gcommaaccent rcommaaccent -10\nKPX h y -30\nKPX h yacute -30\nKPX h ydieresis -30\nKPX k e -20\nKPX k eacute -20\nKPX k ecaron -20\nKPX k ecircumflex -20\nKPX k edieresis -20\nKPX k edotaccent -20\nKPX k egrave -20\nKPX k emacron -20\nKPX k eogonek -20\nKPX k o -20\nKPX k oacute -20\nKPX k ocircumflex -20\nKPX k odieresis -20\nKPX k ograve -20\nKPX k ohungarumlaut -20\nKPX k omacron -20\nKPX k oslash -20\nKPX k otilde -20\nKPX kcommaaccent e -20\nKPX kcommaaccent eacute -20\nKPX kcommaaccent ecaron -20\nKPX kcommaaccent ecircumflex -20\nKPX kcommaaccent edieresis -20\nKPX kcommaaccent edotaccent -20\nKPX kcommaaccent egrave -20\nKPX kcommaaccent emacron -20\nKPX kcommaaccent eogonek -20\nKPX kcommaaccent o -20\nKPX kcommaaccent oacute -20\nKPX kcommaaccent ocircumflex -20\nKPX kcommaaccent odieresis -20\nKPX kcommaaccent ograve -20\nKPX kcommaaccent ohungarumlaut -20\nKPX kcommaaccent omacron -20\nKPX kcommaaccent oslash -20\nKPX kcommaaccent otilde -20\nKPX m u -10\nKPX m uacute -10\nKPX m ucircumflex -10\nKPX m udieresis -10\nKPX m ugrave -10\nKPX m uhungarumlaut -10\nKPX m umacron -10\nKPX m uogonek -10\nKPX m uring -10\nKPX m y -15\nKPX m yacute -15\nKPX m ydieresis -15\nKPX n u -10\nKPX n uacute -10\nKPX n ucircumflex -10\nKPX n udieresis -10\nKPX n ugrave -10\nKPX n uhungarumlaut -10\nKPX n umacron -10\nKPX n uogonek -10\nKPX n uring -10\nKPX n v -20\nKPX n y -15\nKPX n yacute -15\nKPX n ydieresis -15\nKPX nacute u -10\nKPX nacute uacute -10\nKPX nacute ucircumflex -10\nKPX nacute udieresis -10\nKPX nacute ugrave -10\nKPX nacute uhungarumlaut -10\nKPX nacute umacron -10\nKPX nacute uogonek -10\nKPX nacute uring -10\nKPX nacute v -20\nKPX nacute y -15\nKPX nacute yacute -15\nKPX nacute ydieresis -15\nKPX ncaron u -10\nKPX ncaron uacute -10\nKPX ncaron ucircumflex -10\nKPX ncaron udieresis -10\nKPX ncaron ugrave -10\nKPX ncaron uhungarumlaut -10\nKPX ncaron umacron -10\nKPX ncaron uogonek -10\nKPX ncaron uring -10\nKPX ncaron v -20\nKPX ncaron y -15\nKPX ncaron yacute -15\nKPX ncaron ydieresis -15\nKPX ncommaaccent u -10\nKPX ncommaaccent uacute -10\nKPX ncommaaccent ucircumflex -10\nKPX ncommaaccent udieresis -10\nKPX ncommaaccent ugrave -10\nKPX ncommaaccent uhungarumlaut -10\nKPX ncommaaccent umacron -10\nKPX ncommaaccent uogonek -10\nKPX ncommaaccent uring -10\nKPX ncommaaccent v -20\nKPX ncommaaccent y -15\nKPX ncommaaccent yacute -15\nKPX ncommaaccent ydieresis -15\nKPX ntilde u -10\nKPX ntilde uacute -10\nKPX ntilde ucircumflex -10\nKPX ntilde udieresis -10\nKPX ntilde ugrave -10\nKPX ntilde uhungarumlaut -10\nKPX ntilde umacron -10\nKPX ntilde uogonek -10\nKPX ntilde uring -10\nKPX ntilde v -20\nKPX ntilde y -15\nKPX ntilde yacute -15\nKPX ntilde ydieresis -15\nKPX o comma -40\nKPX o period -40\nKPX o v -15\nKPX o w -15\nKPX o x -30\nKPX o y -30\nKPX o yacute -30\nKPX o ydieresis -30\nKPX oacute comma -40\nKPX oacute period -40\nKPX oacute v -15\nKPX oacute w -15\nKPX oacute x -30\nKPX oacute y -30\nKPX oacute yacute -30\nKPX oacute ydieresis -30\nKPX ocircumflex comma -40\nKPX ocircumflex period -40\nKPX ocircumflex v -15\nKPX ocircumflex w -15\nKPX ocircumflex x -30\nKPX ocircumflex y -30\nKPX ocircumflex yacute -30\nKPX ocircumflex ydieresis -30\nKPX odieresis comma -40\nKPX odieresis period -40\nKPX odieresis v -15\nKPX odieresis w -15\nKPX odieresis x -30\nKPX odieresis y -30\nKPX odieresis yacute -30\nKPX odieresis ydieresis -30\nKPX ograve comma -40\nKPX ograve period -40\nKPX ograve v -15\nKPX ograve w -15\nKPX ograve x -30\nKPX ograve y -30\nKPX ograve yacute -30\nKPX ograve ydieresis -30\nKPX ohungarumlaut comma -40\nKPX ohungarumlaut period -40\nKPX ohungarumlaut v -15\nKPX ohungarumlaut w -15\nKPX ohungarumlaut x -30\nKPX ohungarumlaut y -30\nKPX ohungarumlaut yacute -30\nKPX ohungarumlaut ydieresis -30\nKPX omacron comma -40\nKPX omacron period -40\nKPX omacron v -15\nKPX omacron w -15\nKPX omacron x -30\nKPX omacron y -30\nKPX omacron yacute -30\nKPX omacron ydieresis -30\nKPX oslash a -55\nKPX oslash aacute -55\nKPX oslash abreve -55\nKPX oslash acircumflex -55\nKPX oslash adieresis -55\nKPX oslash agrave -55\nKPX oslash amacron -55\nKPX oslash aogonek -55\nKPX oslash aring -55\nKPX oslash atilde -55\nKPX oslash b -55\nKPX oslash c -55\nKPX oslash cacute -55\nKPX oslash ccaron -55\nKPX oslash ccedilla -55\nKPX oslash comma -95\nKPX oslash d -55\nKPX oslash dcroat -55\nKPX oslash e -55\nKPX oslash eacute -55\nKPX oslash ecaron -55\nKPX oslash ecircumflex -55\nKPX oslash edieresis -55\nKPX oslash edotaccent -55\nKPX oslash egrave -55\nKPX oslash emacron -55\nKPX oslash eogonek -55\nKPX oslash f -55\nKPX oslash g -55\nKPX oslash gbreve -55\nKPX oslash gcommaaccent -55\nKPX oslash h -55\nKPX oslash i -55\nKPX oslash iacute -55\nKPX oslash icircumflex -55\nKPX oslash idieresis -55\nKPX oslash igrave -55\nKPX oslash imacron -55\nKPX oslash iogonek -55\nKPX oslash j -55\nKPX oslash k -55\nKPX oslash kcommaaccent -55\nKPX oslash l -55\nKPX oslash lacute -55\nKPX oslash lcommaaccent -55\nKPX oslash lslash -55\nKPX oslash m -55\nKPX oslash n -55\nKPX oslash nacute -55\nKPX oslash ncaron -55\nKPX oslash ncommaaccent -55\nKPX oslash ntilde -55\nKPX oslash o -55\nKPX oslash oacute -55\nKPX oslash ocircumflex -55\nKPX oslash odieresis -55\nKPX oslash ograve -55\nKPX oslash ohungarumlaut -55\nKPX oslash omacron -55\nKPX oslash oslash -55\nKPX oslash otilde -55\nKPX oslash p -55\nKPX oslash period -95\nKPX oslash q -55\nKPX oslash r -55\nKPX oslash racute -55\nKPX oslash rcaron -55\nKPX oslash rcommaaccent -55\nKPX oslash s -55\nKPX oslash sacute -55\nKPX oslash scaron -55\nKPX oslash scedilla -55\nKPX oslash scommaaccent -55\nKPX oslash t -55\nKPX oslash tcommaaccent -55\nKPX oslash u -55\nKPX oslash uacute -55\nKPX oslash ucircumflex -55\nKPX oslash udieresis -55\nKPX oslash ugrave -55\nKPX oslash uhungarumlaut -55\nKPX oslash umacron -55\nKPX oslash uogonek -55\nKPX oslash uring -55\nKPX oslash v -70\nKPX oslash w -70\nKPX oslash x -85\nKPX oslash y -70\nKPX oslash yacute -70\nKPX oslash ydieresis -70\nKPX oslash z -55\nKPX oslash zacute -55\nKPX oslash zcaron -55\nKPX oslash zdotaccent -55\nKPX otilde comma -40\nKPX otilde period -40\nKPX otilde v -15\nKPX otilde w -15\nKPX otilde x -30\nKPX otilde y -30\nKPX otilde yacute -30\nKPX otilde ydieresis -30\nKPX p comma -35\nKPX p period -35\nKPX p y -30\nKPX p yacute -30\nKPX p ydieresis -30\nKPX period quotedblright -100\nKPX period quoteright -100\nKPX period space -60\nKPX quotedblright space -40\nKPX quoteleft quoteleft -57\nKPX quoteright d -50\nKPX quoteright dcroat -50\nKPX quoteright quoteright -57\nKPX quoteright r -50\nKPX quoteright racute -50\nKPX quoteright rcaron -50\nKPX quoteright rcommaaccent -50\nKPX quoteright s -50\nKPX quoteright sacute -50\nKPX quoteright scaron -50\nKPX quoteright scedilla -50\nKPX quoteright scommaaccent -50\nKPX quoteright space -70\nKPX r a -10\nKPX r aacute -10\nKPX r abreve -10\nKPX r acircumflex -10\nKPX r adieresis -10\nKPX r agrave -10\nKPX r amacron -10\nKPX r aogonek -10\nKPX r aring -10\nKPX r atilde -10\nKPX r colon 30\nKPX r comma -50\nKPX r i 15\nKPX r iacute 15\nKPX r icircumflex 15\nKPX r idieresis 15\nKPX r igrave 15\nKPX r imacron 15\nKPX r iogonek 15\nKPX r k 15\nKPX r kcommaaccent 15\nKPX r l 15\nKPX r lacute 15\nKPX r lcommaaccent 15\nKPX r lslash 15\nKPX r m 25\nKPX r n 25\nKPX r nacute 25\nKPX r ncaron 25\nKPX r ncommaaccent 25\nKPX r ntilde 25\nKPX r p 30\nKPX r period -50\nKPX r semicolon 30\nKPX r t 40\nKPX r tcommaaccent 40\nKPX r u 15\nKPX r uacute 15\nKPX r ucircumflex 15\nKPX r udieresis 15\nKPX r ugrave 15\nKPX r uhungarumlaut 15\nKPX r umacron 15\nKPX r uogonek 15\nKPX r uring 15\nKPX r v 30\nKPX r y 30\nKPX r yacute 30\nKPX r ydieresis 30\nKPX racute a -10\nKPX racute aacute -10\nKPX racute abreve -10\nKPX racute acircumflex -10\nKPX racute adieresis -10\nKPX racute agrave -10\nKPX racute amacron -10\nKPX racute aogonek -10\nKPX racute aring -10\nKPX racute atilde -10\nKPX racute colon 30\nKPX racute comma -50\nKPX racute i 15\nKPX racute iacute 15\nKPX racute icircumflex 15\nKPX racute idieresis 15\nKPX racute igrave 15\nKPX racute imacron 15\nKPX racute iogonek 15\nKPX racute k 15\nKPX racute kcommaaccent 15\nKPX racute l 15\nKPX racute lacute 15\nKPX racute lcommaaccent 15\nKPX racute lslash 15\nKPX racute m 25\nKPX racute n 25\nKPX racute nacute 25\nKPX racute ncaron 25\nKPX racute ncommaaccent 25\nKPX racute ntilde 25\nKPX racute p 30\nKPX racute period -50\nKPX racute semicolon 30\nKPX racute t 40\nKPX racute tcommaaccent 40\nKPX racute u 15\nKPX racute uacute 15\nKPX racute ucircumflex 15\nKPX racute udieresis 15\nKPX racute ugrave 15\nKPX racute uhungarumlaut 15\nKPX racute umacron 15\nKPX racute uogonek 15\nKPX racute uring 15\nKPX racute v 30\nKPX racute y 30\nKPX racute yacute 30\nKPX racute ydieresis 30\nKPX rcaron a -10\nKPX rcaron aacute -10\nKPX rcaron abreve -10\nKPX rcaron acircumflex -10\nKPX rcaron adieresis -10\nKPX rcaron agrave -10\nKPX rcaron amacron -10\nKPX rcaron aogonek -10\nKPX rcaron aring -10\nKPX rcaron atilde -10\nKPX rcaron colon 30\nKPX rcaron comma -50\nKPX rcaron i 15\nKPX rcaron iacute 15\nKPX rcaron icircumflex 15\nKPX rcaron idieresis 15\nKPX rcaron igrave 15\nKPX rcaron imacron 15\nKPX rcaron iogonek 15\nKPX rcaron k 15\nKPX rcaron kcommaaccent 15\nKPX rcaron l 15\nKPX rcaron lacute 15\nKPX rcaron lcommaaccent 15\nKPX rcaron lslash 15\nKPX rcaron m 25\nKPX rcaron n 25\nKPX rcaron nacute 25\nKPX rcaron ncaron 25\nKPX rcaron ncommaaccent 25\nKPX rcaron ntilde 25\nKPX rcaron p 30\nKPX rcaron period -50\nKPX rcaron semicolon 30\nKPX rcaron t 40\nKPX rcaron tcommaaccent 40\nKPX rcaron u 15\nKPX rcaron uacute 15\nKPX rcaron ucircumflex 15\nKPX rcaron udieresis 15\nKPX rcaron ugrave 15\nKPX rcaron uhungarumlaut 15\nKPX rcaron umacron 15\nKPX rcaron uogonek 15\nKPX rcaron uring 15\nKPX rcaron v 30\nKPX rcaron y 30\nKPX rcaron yacute 30\nKPX rcaron ydieresis 30\nKPX rcommaaccent a -10\nKPX rcommaaccent aacute -10\nKPX rcommaaccent abreve -10\nKPX rcommaaccent acircumflex -10\nKPX rcommaaccent adieresis -10\nKPX rcommaaccent agrave -10\nKPX rcommaaccent amacron -10\nKPX rcommaaccent aogonek -10\nKPX rcommaaccent aring -10\nKPX rcommaaccent atilde -10\nKPX rcommaaccent colon 30\nKPX rcommaaccent comma -50\nKPX rcommaaccent i 15\nKPX rcommaaccent iacute 15\nKPX rcommaaccent icircumflex 15\nKPX rcommaaccent idieresis 15\nKPX rcommaaccent igrave 15\nKPX rcommaaccent imacron 15\nKPX rcommaaccent iogonek 15\nKPX rcommaaccent k 15\nKPX rcommaaccent kcommaaccent 15\nKPX rcommaaccent l 15\nKPX rcommaaccent lacute 15\nKPX rcommaaccent lcommaaccent 15\nKPX rcommaaccent lslash 15\nKPX rcommaaccent m 25\nKPX rcommaaccent n 25\nKPX rcommaaccent nacute 25\nKPX rcommaaccent ncaron 25\nKPX rcommaaccent ncommaaccent 25\nKPX rcommaaccent ntilde 25\nKPX rcommaaccent p 30\nKPX rcommaaccent period -50\nKPX rcommaaccent semicolon 30\nKPX rcommaaccent t 40\nKPX rcommaaccent tcommaaccent 40\nKPX rcommaaccent u 15\nKPX rcommaaccent uacute 15\nKPX rcommaaccent ucircumflex 15\nKPX rcommaaccent udieresis 15\nKPX rcommaaccent ugrave 15\nKPX rcommaaccent uhungarumlaut 15\nKPX rcommaaccent umacron 15\nKPX rcommaaccent uogonek 15\nKPX rcommaaccent uring 15\nKPX rcommaaccent v 30\nKPX rcommaaccent y 30\nKPX rcommaaccent yacute 30\nKPX rcommaaccent ydieresis 30\nKPX s comma -15\nKPX s period -15\nKPX s w -30\nKPX sacute comma -15\nKPX sacute period -15\nKPX sacute w -30\nKPX scaron comma -15\nKPX scaron period -15\nKPX scaron w -30\nKPX scedilla comma -15\nKPX scedilla period -15\nKPX scedilla w -30\nKPX scommaaccent comma -15\nKPX scommaaccent period -15\nKPX scommaaccent w -30\nKPX semicolon space -50\nKPX space T -50\nKPX space Tcaron -50\nKPX space Tcommaaccent -50\nKPX space V -50\nKPX space W -40\nKPX space Y -90\nKPX space Yacute -90\nKPX space Ydieresis -90\nKPX space quotedblleft -30\nKPX space quoteleft -60\nKPX v a -25\nKPX v aacute -25\nKPX v abreve -25\nKPX v acircumflex -25\nKPX v adieresis -25\nKPX v agrave -25\nKPX v amacron -25\nKPX v aogonek -25\nKPX v aring -25\nKPX v atilde -25\nKPX v comma -80\nKPX v e -25\nKPX v eacute -25\nKPX v ecaron -25\nKPX v ecircumflex -25\nKPX v edieresis -25\nKPX v edotaccent -25\nKPX v egrave -25\nKPX v emacron -25\nKPX v eogonek -25\nKPX v o -25\nKPX v oacute -25\nKPX v ocircumflex -25\nKPX v odieresis -25\nKPX v ograve -25\nKPX v ohungarumlaut -25\nKPX v omacron -25\nKPX v oslash -25\nKPX v otilde -25\nKPX v period -80\nKPX w a -15\nKPX w aacute -15\nKPX w abreve -15\nKPX w acircumflex -15\nKPX w adieresis -15\nKPX w agrave -15\nKPX w amacron -15\nKPX w aogonek -15\nKPX w aring -15\nKPX w atilde -15\nKPX w comma -60\nKPX w e -10\nKPX w eacute -10\nKPX w ecaron -10\nKPX w ecircumflex -10\nKPX w edieresis -10\nKPX w edotaccent -10\nKPX w egrave -10\nKPX w emacron -10\nKPX w eogonek -10\nKPX w o -10\nKPX w oacute -10\nKPX w ocircumflex -10\nKPX w odieresis -10\nKPX w ograve -10\nKPX w ohungarumlaut -10\nKPX w omacron -10\nKPX w oslash -10\nKPX w otilde -10\nKPX w period -60\nKPX x e -30\nKPX x eacute -30\nKPX x ecaron -30\nKPX x ecircumflex -30\nKPX x edieresis -30\nKPX x edotaccent -30\nKPX x egrave -30\nKPX x emacron -30\nKPX x eogonek -30\nKPX y a -20\nKPX y aacute -20\nKPX y abreve -20\nKPX y acircumflex -20\nKPX y adieresis -20\nKPX y agrave -20\nKPX y amacron -20\nKPX y aogonek -20\nKPX y aring -20\nKPX y atilde -20\nKPX y comma -100\nKPX y e -20\nKPX y eacute -20\nKPX y ecaron -20\nKPX y ecircumflex -20\nKPX y edieresis -20\nKPX y edotaccent -20\nKPX y egrave -20\nKPX y emacron -20\nKPX y eogonek -20\nKPX y o -20\nKPX y oacute -20\nKPX y ocircumflex -20\nKPX y odieresis -20\nKPX y ograve -20\nKPX y ohungarumlaut -20\nKPX y omacron -20\nKPX y oslash -20\nKPX y otilde -20\nKPX y period -100\nKPX yacute a -20\nKPX yacute aacute -20\nKPX yacute abreve -20\nKPX yacute acircumflex -20\nKPX yacute adieresis -20\nKPX yacute agrave -20\nKPX yacute amacron -20\nKPX yacute aogonek -20\nKPX yacute aring -20\nKPX yacute atilde -20\nKPX yacute comma -100\nKPX yacute e -20\nKPX yacute eacute -20\nKPX yacute ecaron -20\nKPX yacute ecircumflex -20\nKPX yacute edieresis -20\nKPX yacute edotaccent -20\nKPX yacute egrave -20\nKPX yacute emacron -20\nKPX yacute eogonek -20\nKPX yacute o -20\nKPX yacute oacute -20\nKPX yacute ocircumflex -20\nKPX yacute odieresis -20\nKPX yacute ograve -20\nKPX yacute ohungarumlaut -20\nKPX yacute omacron -20\nKPX yacute oslash -20\nKPX yacute otilde -20\nKPX yacute period -100\nKPX ydieresis a -20\nKPX ydieresis aacute -20\nKPX ydieresis abreve -20\nKPX ydieresis acircumflex -20\nKPX ydieresis adieresis -20\nKPX ydieresis agrave -20\nKPX ydieresis amacron -20\nKPX ydieresis aogonek -20\nKPX ydieresis aring -20\nKPX ydieresis atilde -20\nKPX ydieresis comma -100\nKPX ydieresis e -20\nKPX ydieresis eacute -20\nKPX ydieresis ecaron -20\nKPX ydieresis ecircumflex -20\nKPX ydieresis edieresis -20\nKPX ydieresis edotaccent -20\nKPX ydieresis egrave -20\nKPX ydieresis emacron -20\nKPX ydieresis eogonek -20\nKPX ydieresis o -20\nKPX ydieresis oacute -20\nKPX ydieresis ocircumflex -20\nKPX ydieresis odieresis -20\nKPX ydieresis ograve -20\nKPX ydieresis ohungarumlaut -20\nKPX ydieresis omacron -20\nKPX ydieresis oslash -20\nKPX ydieresis otilde -20\nKPX ydieresis period -100\nKPX z e -15\nKPX z eacute -15\nKPX z ecaron -15\nKPX z ecircumflex -15\nKPX z edieresis -15\nKPX z edotaccent -15\nKPX z egrave -15\nKPX z emacron -15\nKPX z eogonek -15\nKPX z o -15\nKPX z oacute -15\nKPX z ocircumflex -15\nKPX z odieresis -15\nKPX z ograve -15\nKPX z ohungarumlaut -15\nKPX z omacron -15\nKPX z oslash -15\nKPX z otilde -15\nKPX zacute e -15\nKPX zacute eacute -15\nKPX zacute ecaron -15\nKPX zacute ecircumflex -15\nKPX zacute edieresis -15\nKPX zacute edotaccent -15\nKPX zacute egrave -15\nKPX zacute emacron -15\nKPX zacute eogonek -15\nKPX zacute o -15\nKPX zacute oacute -15\nKPX zacute ocircumflex -15\nKPX zacute odieresis -15\nKPX zacute ograve -15\nKPX zacute ohungarumlaut -15\nKPX zacute omacron -15\nKPX zacute oslash -15\nKPX zacute otilde -15\nKPX zcaron e -15\nKPX zcaron eacute -15\nKPX zcaron ecaron -15\nKPX zcaron ecircumflex -15\nKPX zcaron edieresis -15\nKPX zcaron edotaccent -15\nKPX zcaron egrave -15\nKPX zcaron emacron -15\nKPX zcaron eogonek -15\nKPX zcaron o -15\nKPX zcaron oacute -15\nKPX zcaron ocircumflex -15\nKPX zcaron odieresis -15\nKPX zcaron ograve -15\nKPX zcaron ohungarumlaut -15\nKPX zcaron omacron -15\nKPX zcaron oslash -15\nKPX zcaron otilde -15\nKPX zdotaccent e -15\nKPX zdotaccent eacute -15\nKPX zdotaccent ecaron -15\nKPX zdotaccent ecircumflex -15\nKPX zdotaccent edieresis -15\nKPX zdotaccent edotaccent -15\nKPX zdotaccent egrave -15\nKPX zdotaccent emacron -15\nKPX zdotaccent eogonek -15\nKPX zdotaccent o -15\nKPX zdotaccent oacute -15\nKPX zdotaccent ocircumflex -15\nKPX zdotaccent odieresis -15\nKPX zdotaccent ograve -15\nKPX zdotaccent ohungarumlaut -15\nKPX zdotaccent omacron -15\nKPX zdotaccent oslash -15\nKPX zdotaccent otilde -15\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 72
      "Helvetica-BoldOblique": function() {                                                                            // 73
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:45:12 1997\nComment UniqueID 43053\nComment VMusage 14482 68586\nFontName Helvetica-BoldOblique\nFullName Helvetica Bold Oblique\nFamilyName Helvetica\nWeight Bold\nItalicAngle -12\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -174 -228 1114 962 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 718\nXHeight 532\nAscender 718\nDescender -207\nStdHW 118\nStdVW 140\nStartCharMetrics 315\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 333 ; N exclam ; B 94 0 397 718 ;\nC 34 ; WX 474 ; N quotedbl ; B 193 447 529 718 ;\nC 35 ; WX 556 ; N numbersign ; B 60 0 644 698 ;\nC 36 ; WX 556 ; N dollar ; B 67 -115 622 775 ;\nC 37 ; WX 889 ; N percent ; B 136 -19 901 710 ;\nC 38 ; WX 722 ; N ampersand ; B 89 -19 732 718 ;\nC 39 ; WX 278 ; N quoteright ; B 167 445 362 718 ;\nC 40 ; WX 333 ; N parenleft ; B 76 -208 470 734 ;\nC 41 ; WX 333 ; N parenright ; B -25 -208 369 734 ;\nC 42 ; WX 389 ; N asterisk ; B 146 387 481 718 ;\nC 43 ; WX 584 ; N plus ; B 82 0 610 506 ;\nC 44 ; WX 278 ; N comma ; B 28 -168 245 146 ;\nC 45 ; WX 333 ; N hyphen ; B 73 215 379 345 ;\nC 46 ; WX 278 ; N period ; B 64 0 245 146 ;\nC 47 ; WX 278 ; N slash ; B -37 -19 468 737 ;\nC 48 ; WX 556 ; N zero ; B 86 -19 617 710 ;\nC 49 ; WX 556 ; N one ; B 173 0 529 710 ;\nC 50 ; WX 556 ; N two ; B 26 0 619 710 ;\nC 51 ; WX 556 ; N three ; B 65 -19 608 710 ;\nC 52 ; WX 556 ; N four ; B 60 0 598 710 ;\nC 53 ; WX 556 ; N five ; B 64 -19 636 698 ;\nC 54 ; WX 556 ; N six ; B 85 -19 619 710 ;\nC 55 ; WX 556 ; N seven ; B 125 0 676 698 ;\nC 56 ; WX 556 ; N eight ; B 69 -19 616 710 ;\nC 57 ; WX 556 ; N nine ; B 78 -19 615 710 ;\nC 58 ; WX 333 ; N colon ; B 92 0 351 512 ;\nC 59 ; WX 333 ; N semicolon ; B 56 -168 351 512 ;\nC 60 ; WX 584 ; N less ; B 82 -8 655 514 ;\nC 61 ; WX 584 ; N equal ; B 58 87 633 419 ;\nC 62 ; WX 584 ; N greater ; B 36 -8 609 514 ;\nC 63 ; WX 611 ; N question ; B 165 0 671 727 ;\nC 64 ; WX 975 ; N at ; B 186 -19 954 737 ;\nC 65 ; WX 722 ; N A ; B 20 0 702 718 ;\nC 66 ; WX 722 ; N B ; B 76 0 764 718 ;\nC 67 ; WX 722 ; N C ; B 107 -19 789 737 ;\nC 68 ; WX 722 ; N D ; B 76 0 777 718 ;\nC 69 ; WX 667 ; N E ; B 76 0 757 718 ;\nC 70 ; WX 611 ; N F ; B 76 0 740 718 ;\nC 71 ; WX 778 ; N G ; B 108 -19 817 737 ;\nC 72 ; WX 722 ; N H ; B 71 0 804 718 ;\nC 73 ; WX 278 ; N I ; B 64 0 367 718 ;\nC 74 ; WX 556 ; N J ; B 60 -18 637 718 ;\nC 75 ; WX 722 ; N K ; B 87 0 858 718 ;\nC 76 ; WX 611 ; N L ; B 76 0 611 718 ;\nC 77 ; WX 833 ; N M ; B 69 0 918 718 ;\nC 78 ; WX 722 ; N N ; B 69 0 807 718 ;\nC 79 ; WX 778 ; N O ; B 107 -19 823 737 ;\nC 80 ; WX 667 ; N P ; B 76 0 738 718 ;\nC 81 ; WX 778 ; N Q ; B 107 -52 823 737 ;\nC 82 ; WX 722 ; N R ; B 76 0 778 718 ;\nC 83 ; WX 667 ; N S ; B 81 -19 718 737 ;\nC 84 ; WX 611 ; N T ; B 140 0 751 718 ;\nC 85 ; WX 722 ; N U ; B 116 -19 804 718 ;\nC 86 ; WX 667 ; N V ; B 172 0 801 718 ;\nC 87 ; WX 944 ; N W ; B 169 0 1082 718 ;\nC 88 ; WX 667 ; N X ; B 14 0 791 718 ;\nC 89 ; WX 667 ; N Y ; B 168 0 806 718 ;\nC 90 ; WX 611 ; N Z ; B 25 0 737 718 ;\nC 91 ; WX 333 ; N bracketleft ; B 21 -196 462 722 ;\nC 92 ; WX 278 ; N backslash ; B 124 -19 307 737 ;\nC 93 ; WX 333 ; N bracketright ; B -18 -196 423 722 ;\nC 94 ; WX 584 ; N asciicircum ; B 131 323 591 698 ;\nC 95 ; WX 556 ; N underscore ; B -27 -125 540 -75 ;\nC 96 ; WX 278 ; N quoteleft ; B 165 454 361 727 ;\nC 97 ; WX 556 ; N a ; B 55 -14 583 546 ;\nC 98 ; WX 611 ; N b ; B 61 -14 645 718 ;\nC 99 ; WX 556 ; N c ; B 79 -14 599 546 ;\nC 100 ; WX 611 ; N d ; B 82 -14 704 718 ;\nC 101 ; WX 556 ; N e ; B 70 -14 593 546 ;\nC 102 ; WX 333 ; N f ; B 87 0 469 727 ; L i fi ; L l fl ;\nC 103 ; WX 611 ; N g ; B 38 -217 666 546 ;\nC 104 ; WX 611 ; N h ; B 65 0 629 718 ;\nC 105 ; WX 278 ; N i ; B 69 0 363 725 ;\nC 106 ; WX 278 ; N j ; B -42 -214 363 725 ;\nC 107 ; WX 556 ; N k ; B 69 0 670 718 ;\nC 108 ; WX 278 ; N l ; B 69 0 362 718 ;\nC 109 ; WX 889 ; N m ; B 64 0 909 546 ;\nC 110 ; WX 611 ; N n ; B 65 0 629 546 ;\nC 111 ; WX 611 ; N o ; B 82 -14 643 546 ;\nC 112 ; WX 611 ; N p ; B 18 -207 645 546 ;\nC 113 ; WX 611 ; N q ; B 80 -207 665 546 ;\nC 114 ; WX 389 ; N r ; B 64 0 489 546 ;\nC 115 ; WX 556 ; N s ; B 63 -14 584 546 ;\nC 116 ; WX 333 ; N t ; B 100 -6 422 676 ;\nC 117 ; WX 611 ; N u ; B 98 -14 658 532 ;\nC 118 ; WX 556 ; N v ; B 126 0 656 532 ;\nC 119 ; WX 778 ; N w ; B 123 0 882 532 ;\nC 120 ; WX 556 ; N x ; B 15 0 648 532 ;\nC 121 ; WX 556 ; N y ; B 42 -214 652 532 ;\nC 122 ; WX 500 ; N z ; B 20 0 583 532 ;\nC 123 ; WX 389 ; N braceleft ; B 94 -196 518 722 ;\nC 124 ; WX 280 ; N bar ; B 36 -225 361 775 ;\nC 125 ; WX 389 ; N braceright ; B -18 -196 407 722 ;\nC 126 ; WX 584 ; N asciitilde ; B 115 163 577 343 ;\nC 161 ; WX 333 ; N exclamdown ; B 50 -186 353 532 ;\nC 162 ; WX 556 ; N cent ; B 79 -118 599 628 ;\nC 163 ; WX 556 ; N sterling ; B 50 -16 635 718 ;\nC 164 ; WX 167 ; N fraction ; B -174 -19 487 710 ;\nC 165 ; WX 556 ; N yen ; B 60 0 713 698 ;\nC 166 ; WX 556 ; N florin ; B -50 -210 669 737 ;\nC 167 ; WX 556 ; N section ; B 61 -184 598 727 ;\nC 168 ; WX 556 ; N currency ; B 27 76 680 636 ;\nC 169 ; WX 238 ; N quotesingle ; B 165 447 321 718 ;\nC 170 ; WX 500 ; N quotedblleft ; B 160 454 588 727 ;\nC 171 ; WX 556 ; N guillemotleft ; B 135 76 571 484 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 130 76 353 484 ;\nC 173 ; WX 333 ; N guilsinglright ; B 99 76 322 484 ;\nC 174 ; WX 611 ; N fi ; B 87 0 696 727 ;\nC 175 ; WX 611 ; N fl ; B 87 0 695 727 ;\nC 177 ; WX 556 ; N endash ; B 48 227 627 333 ;\nC 178 ; WX 556 ; N dagger ; B 118 -171 626 718 ;\nC 179 ; WX 556 ; N daggerdbl ; B 46 -171 628 718 ;\nC 180 ; WX 278 ; N periodcentered ; B 110 172 276 334 ;\nC 182 ; WX 556 ; N paragraph ; B 98 -191 688 700 ;\nC 183 ; WX 350 ; N bullet ; B 83 194 420 524 ;\nC 184 ; WX 278 ; N quotesinglbase ; B 41 -146 236 127 ;\nC 185 ; WX 500 ; N quotedblbase ; B 36 -146 463 127 ;\nC 186 ; WX 500 ; N quotedblright ; B 162 445 589 718 ;\nC 187 ; WX 556 ; N guillemotright ; B 104 76 540 484 ;\nC 188 ; WX 1000 ; N ellipsis ; B 92 0 939 146 ;\nC 189 ; WX 1000 ; N perthousand ; B 76 -19 1038 710 ;\nC 191 ; WX 611 ; N questiondown ; B 53 -195 559 532 ;\nC 193 ; WX 333 ; N grave ; B 136 604 353 750 ;\nC 194 ; WX 333 ; N acute ; B 236 604 515 750 ;\nC 195 ; WX 333 ; N circumflex ; B 118 604 471 750 ;\nC 196 ; WX 333 ; N tilde ; B 113 610 507 737 ;\nC 197 ; WX 333 ; N macron ; B 122 604 483 678 ;\nC 198 ; WX 333 ; N breve ; B 156 604 494 750 ;\nC 199 ; WX 333 ; N dotaccent ; B 235 614 385 729 ;\nC 200 ; WX 333 ; N dieresis ; B 137 614 482 729 ;\nC 202 ; WX 333 ; N ring ; B 200 568 420 776 ;\nC 203 ; WX 333 ; N cedilla ; B -37 -228 220 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B 137 604 645 750 ;\nC 206 ; WX 333 ; N ogonek ; B 41 -228 264 0 ;\nC 207 ; WX 333 ; N caron ; B 149 604 502 750 ;\nC 208 ; WX 1000 ; N emdash ; B 48 227 1071 333 ;\nC 225 ; WX 1000 ; N AE ; B 5 0 1100 718 ;\nC 227 ; WX 370 ; N ordfeminine ; B 125 401 465 737 ;\nC 232 ; WX 611 ; N Lslash ; B 34 0 611 718 ;\nC 233 ; WX 778 ; N Oslash ; B 35 -27 894 745 ;\nC 234 ; WX 1000 ; N OE ; B 99 -19 1114 737 ;\nC 235 ; WX 365 ; N ordmasculine ; B 123 401 485 737 ;\nC 241 ; WX 889 ; N ae ; B 56 -14 923 546 ;\nC 245 ; WX 278 ; N dotlessi ; B 69 0 322 532 ;\nC 248 ; WX 278 ; N lslash ; B 40 0 407 718 ;\nC 249 ; WX 611 ; N oslash ; B 22 -29 701 560 ;\nC 250 ; WX 944 ; N oe ; B 82 -14 977 546 ;\nC 251 ; WX 611 ; N germandbls ; B 69 -14 657 731 ;\nC -1 ; WX 278 ; N Idieresis ; B 64 0 494 915 ;\nC -1 ; WX 556 ; N eacute ; B 70 -14 627 750 ;\nC -1 ; WX 556 ; N abreve ; B 55 -14 606 750 ;\nC -1 ; WX 611 ; N uhungarumlaut ; B 98 -14 784 750 ;\nC -1 ; WX 556 ; N ecaron ; B 70 -14 614 750 ;\nC -1 ; WX 667 ; N Ydieresis ; B 168 0 806 915 ;\nC -1 ; WX 584 ; N divide ; B 82 -42 610 548 ;\nC -1 ; WX 667 ; N Yacute ; B 168 0 806 936 ;\nC -1 ; WX 722 ; N Acircumflex ; B 20 0 706 936 ;\nC -1 ; WX 556 ; N aacute ; B 55 -14 627 750 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 116 -19 804 936 ;\nC -1 ; WX 556 ; N yacute ; B 42 -214 652 750 ;\nC -1 ; WX 556 ; N scommaaccent ; B 63 -228 584 546 ;\nC -1 ; WX 556 ; N ecircumflex ; B 70 -14 593 750 ;\nC -1 ; WX 722 ; N Uring ; B 116 -19 804 962 ;\nC -1 ; WX 722 ; N Udieresis ; B 116 -19 804 915 ;\nC -1 ; WX 556 ; N aogonek ; B 55 -224 583 546 ;\nC -1 ; WX 722 ; N Uacute ; B 116 -19 804 936 ;\nC -1 ; WX 611 ; N uogonek ; B 98 -228 658 532 ;\nC -1 ; WX 667 ; N Edieresis ; B 76 0 757 915 ;\nC -1 ; WX 722 ; N Dcroat ; B 62 0 777 718 ;\nC -1 ; WX 250 ; N commaaccent ; B 16 -228 188 -50 ;\nC -1 ; WX 737 ; N copyright ; B 56 -19 835 737 ;\nC -1 ; WX 667 ; N Emacron ; B 76 0 757 864 ;\nC -1 ; WX 556 ; N ccaron ; B 79 -14 614 750 ;\nC -1 ; WX 556 ; N aring ; B 55 -14 583 776 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B 69 -228 807 718 ;\nC -1 ; WX 278 ; N lacute ; B 69 0 528 936 ;\nC -1 ; WX 556 ; N agrave ; B 55 -14 583 750 ;\nC -1 ; WX 611 ; N Tcommaaccent ; B 140 -228 751 718 ;\nC -1 ; WX 722 ; N Cacute ; B 107 -19 789 936 ;\nC -1 ; WX 556 ; N atilde ; B 55 -14 619 737 ;\nC -1 ; WX 667 ; N Edotaccent ; B 76 0 757 915 ;\nC -1 ; WX 556 ; N scaron ; B 63 -14 614 750 ;\nC -1 ; WX 556 ; N scedilla ; B 63 -228 584 546 ;\nC -1 ; WX 278 ; N iacute ; B 69 0 488 750 ;\nC -1 ; WX 494 ; N lozenge ; B 90 0 564 745 ;\nC -1 ; WX 722 ; N Rcaron ; B 76 0 778 936 ;\nC -1 ; WX 778 ; N Gcommaaccent ; B 108 -228 817 737 ;\nC -1 ; WX 611 ; N ucircumflex ; B 98 -14 658 750 ;\nC -1 ; WX 556 ; N acircumflex ; B 55 -14 583 750 ;\nC -1 ; WX 722 ; N Amacron ; B 20 0 718 864 ;\nC -1 ; WX 389 ; N rcaron ; B 64 0 530 750 ;\nC -1 ; WX 556 ; N ccedilla ; B 79 -228 599 546 ;\nC -1 ; WX 611 ; N Zdotaccent ; B 25 0 737 915 ;\nC -1 ; WX 667 ; N Thorn ; B 76 0 716 718 ;\nC -1 ; WX 778 ; N Omacron ; B 107 -19 823 864 ;\nC -1 ; WX 722 ; N Racute ; B 76 0 778 936 ;\nC -1 ; WX 667 ; N Sacute ; B 81 -19 722 936 ;\nC -1 ; WX 743 ; N dcaron ; B 82 -14 903 718 ;\nC -1 ; WX 722 ; N Umacron ; B 116 -19 804 864 ;\nC -1 ; WX 611 ; N uring ; B 98 -14 658 776 ;\nC -1 ; WX 333 ; N threesuperior ; B 91 271 441 710 ;\nC -1 ; WX 778 ; N Ograve ; B 107 -19 823 936 ;\nC -1 ; WX 722 ; N Agrave ; B 20 0 702 936 ;\nC -1 ; WX 722 ; N Abreve ; B 20 0 729 936 ;\nC -1 ; WX 584 ; N multiply ; B 57 1 635 505 ;\nC -1 ; WX 611 ; N uacute ; B 98 -14 658 750 ;\nC -1 ; WX 611 ; N Tcaron ; B 140 0 751 936 ;\nC -1 ; WX 494 ; N partialdiff ; B 43 -21 585 750 ;\nC -1 ; WX 556 ; N ydieresis ; B 42 -214 652 729 ;\nC -1 ; WX 722 ; N Nacute ; B 69 0 807 936 ;\nC -1 ; WX 278 ; N icircumflex ; B 69 0 444 750 ;\nC -1 ; WX 667 ; N Ecircumflex ; B 76 0 757 936 ;\nC -1 ; WX 556 ; N adieresis ; B 55 -14 594 729 ;\nC -1 ; WX 556 ; N edieresis ; B 70 -14 594 729 ;\nC -1 ; WX 556 ; N cacute ; B 79 -14 627 750 ;\nC -1 ; WX 611 ; N nacute ; B 65 0 654 750 ;\nC -1 ; WX 611 ; N umacron ; B 98 -14 658 678 ;\nC -1 ; WX 722 ; N Ncaron ; B 69 0 807 936 ;\nC -1 ; WX 278 ; N Iacute ; B 64 0 528 936 ;\nC -1 ; WX 584 ; N plusminus ; B 40 0 625 506 ;\nC -1 ; WX 280 ; N brokenbar ; B 52 -150 345 700 ;\nC -1 ; WX 737 ; N registered ; B 55 -19 834 737 ;\nC -1 ; WX 778 ; N Gbreve ; B 108 -19 817 936 ;\nC -1 ; WX 278 ; N Idotaccent ; B 64 0 397 915 ;\nC -1 ; WX 600 ; N summation ; B 14 -10 670 706 ;\nC -1 ; WX 667 ; N Egrave ; B 76 0 757 936 ;\nC -1 ; WX 389 ; N racute ; B 64 0 543 750 ;\nC -1 ; WX 611 ; N omacron ; B 82 -14 643 678 ;\nC -1 ; WX 611 ; N Zacute ; B 25 0 737 936 ;\nC -1 ; WX 611 ; N Zcaron ; B 25 0 737 936 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 629 704 ;\nC -1 ; WX 722 ; N Eth ; B 62 0 777 718 ;\nC -1 ; WX 722 ; N Ccedilla ; B 107 -228 789 737 ;\nC -1 ; WX 278 ; N lcommaaccent ; B 30 -228 362 718 ;\nC -1 ; WX 389 ; N tcaron ; B 100 -6 608 878 ;\nC -1 ; WX 556 ; N eogonek ; B 70 -228 593 546 ;\nC -1 ; WX 722 ; N Uogonek ; B 116 -228 804 718 ;\nC -1 ; WX 722 ; N Aacute ; B 20 0 750 936 ;\nC -1 ; WX 722 ; N Adieresis ; B 20 0 716 915 ;\nC -1 ; WX 556 ; N egrave ; B 70 -14 593 750 ;\nC -1 ; WX 500 ; N zacute ; B 20 0 599 750 ;\nC -1 ; WX 278 ; N iogonek ; B -14 -224 363 725 ;\nC -1 ; WX 778 ; N Oacute ; B 107 -19 823 936 ;\nC -1 ; WX 611 ; N oacute ; B 82 -14 654 750 ;\nC -1 ; WX 556 ; N amacron ; B 55 -14 595 678 ;\nC -1 ; WX 556 ; N sacute ; B 63 -14 627 750 ;\nC -1 ; WX 278 ; N idieresis ; B 69 0 455 729 ;\nC -1 ; WX 778 ; N Ocircumflex ; B 107 -19 823 936 ;\nC -1 ; WX 722 ; N Ugrave ; B 116 -19 804 936 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 611 ; N thorn ; B 18 -208 645 718 ;\nC -1 ; WX 333 ; N twosuperior ; B 69 283 449 710 ;\nC -1 ; WX 778 ; N Odieresis ; B 107 -19 823 915 ;\nC -1 ; WX 611 ; N mu ; B 22 -207 658 532 ;\nC -1 ; WX 278 ; N igrave ; B 69 0 326 750 ;\nC -1 ; WX 611 ; N ohungarumlaut ; B 82 -14 784 750 ;\nC -1 ; WX 667 ; N Eogonek ; B 76 -224 757 718 ;\nC -1 ; WX 611 ; N dcroat ; B 82 -14 789 718 ;\nC -1 ; WX 834 ; N threequarters ; B 99 -19 839 710 ;\nC -1 ; WX 667 ; N Scedilla ; B 81 -228 718 737 ;\nC -1 ; WX 400 ; N lcaron ; B 69 0 561 718 ;\nC -1 ; WX 722 ; N Kcommaaccent ; B 87 -228 858 718 ;\nC -1 ; WX 611 ; N Lacute ; B 76 0 611 936 ;\nC -1 ; WX 1000 ; N trademark ; B 179 306 1109 718 ;\nC -1 ; WX 556 ; N edotaccent ; B 70 -14 593 729 ;\nC -1 ; WX 278 ; N Igrave ; B 64 0 367 936 ;\nC -1 ; WX 278 ; N Imacron ; B 64 0 496 864 ;\nC -1 ; WX 611 ; N Lcaron ; B 76 0 643 718 ;\nC -1 ; WX 834 ; N onehalf ; B 132 -19 858 710 ;\nC -1 ; WX 549 ; N lessequal ; B 29 0 676 704 ;\nC -1 ; WX 611 ; N ocircumflex ; B 82 -14 643 750 ;\nC -1 ; WX 611 ; N ntilde ; B 65 0 646 737 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 116 -19 880 936 ;\nC -1 ; WX 667 ; N Eacute ; B 76 0 757 936 ;\nC -1 ; WX 556 ; N emacron ; B 70 -14 595 678 ;\nC -1 ; WX 611 ; N gbreve ; B 38 -217 666 750 ;\nC -1 ; WX 834 ; N onequarter ; B 132 -19 806 710 ;\nC -1 ; WX 667 ; N Scaron ; B 81 -19 718 936 ;\nC -1 ; WX 667 ; N Scommaaccent ; B 81 -228 718 737 ;\nC -1 ; WX 778 ; N Ohungarumlaut ; B 107 -19 908 936 ;\nC -1 ; WX 400 ; N degree ; B 175 426 467 712 ;\nC -1 ; WX 611 ; N ograve ; B 82 -14 643 750 ;\nC -1 ; WX 722 ; N Ccaron ; B 107 -19 789 936 ;\nC -1 ; WX 611 ; N ugrave ; B 98 -14 658 750 ;\nC -1 ; WX 549 ; N radical ; B 112 -46 689 850 ;\nC -1 ; WX 722 ; N Dcaron ; B 76 0 777 936 ;\nC -1 ; WX 389 ; N rcommaaccent ; B 26 -228 489 546 ;\nC -1 ; WX 722 ; N Ntilde ; B 69 0 807 923 ;\nC -1 ; WX 611 ; N otilde ; B 82 -14 646 737 ;\nC -1 ; WX 722 ; N Rcommaaccent ; B 76 -228 778 718 ;\nC -1 ; WX 611 ; N Lcommaaccent ; B 76 -228 611 718 ;\nC -1 ; WX 722 ; N Atilde ; B 20 0 741 923 ;\nC -1 ; WX 722 ; N Aogonek ; B 20 -224 702 718 ;\nC -1 ; WX 722 ; N Aring ; B 20 0 702 962 ;\nC -1 ; WX 778 ; N Otilde ; B 107 -19 823 923 ;\nC -1 ; WX 500 ; N zdotaccent ; B 20 0 583 729 ;\nC -1 ; WX 667 ; N Ecaron ; B 76 0 757 936 ;\nC -1 ; WX 278 ; N Iogonek ; B -41 -228 367 718 ;\nC -1 ; WX 556 ; N kcommaaccent ; B 69 -228 670 718 ;\nC -1 ; WX 584 ; N minus ; B 82 197 610 309 ;\nC -1 ; WX 278 ; N Icircumflex ; B 64 0 484 936 ;\nC -1 ; WX 611 ; N ncaron ; B 65 0 641 750 ;\nC -1 ; WX 333 ; N tcommaaccent ; B 58 -228 422 676 ;\nC -1 ; WX 584 ; N logicalnot ; B 105 108 633 419 ;\nC -1 ; WX 611 ; N odieresis ; B 82 -14 643 729 ;\nC -1 ; WX 611 ; N udieresis ; B 98 -14 658 729 ;\nC -1 ; WX 549 ; N notequal ; B 32 -49 630 570 ;\nC -1 ; WX 611 ; N gcommaaccent ; B 38 -217 666 850 ;\nC -1 ; WX 611 ; N eth ; B 82 -14 670 737 ;\nC -1 ; WX 500 ; N zcaron ; B 20 0 586 750 ;\nC -1 ; WX 611 ; N ncommaaccent ; B 65 -228 629 546 ;\nC -1 ; WX 333 ; N onesuperior ; B 148 283 388 710 ;\nC -1 ; WX 278 ; N imacron ; B 69 0 429 678 ;\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2481\nKPX A C -40\nKPX A Cacute -40\nKPX A Ccaron -40\nKPX A Ccedilla -40\nKPX A G -50\nKPX A Gbreve -50\nKPX A Gcommaaccent -50\nKPX A O -40\nKPX A Oacute -40\nKPX A Ocircumflex -40\nKPX A Odieresis -40\nKPX A Ograve -40\nKPX A Ohungarumlaut -40\nKPX A Omacron -40\nKPX A Oslash -40\nKPX A Otilde -40\nKPX A Q -40\nKPX A T -90\nKPX A Tcaron -90\nKPX A Tcommaaccent -90\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -80\nKPX A W -60\nKPX A Y -110\nKPX A Yacute -110\nKPX A Ydieresis -110\nKPX A u -30\nKPX A uacute -30\nKPX A ucircumflex -30\nKPX A udieresis -30\nKPX A ugrave -30\nKPX A uhungarumlaut -30\nKPX A umacron -30\nKPX A uogonek -30\nKPX A uring -30\nKPX A v -40\nKPX A w -30\nKPX A y -30\nKPX A yacute -30\nKPX A ydieresis -30\nKPX Aacute C -40\nKPX Aacute Cacute -40\nKPX Aacute Ccaron -40\nKPX Aacute Ccedilla -40\nKPX Aacute G -50\nKPX Aacute Gbreve -50\nKPX Aacute Gcommaaccent -50\nKPX Aacute O -40\nKPX Aacute Oacute -40\nKPX Aacute Ocircumflex -40\nKPX Aacute Odieresis -40\nKPX Aacute Ograve -40\nKPX Aacute Ohungarumlaut -40\nKPX Aacute Omacron -40\nKPX Aacute Oslash -40\nKPX Aacute Otilde -40\nKPX Aacute Q -40\nKPX Aacute T -90\nKPX Aacute Tcaron -90\nKPX Aacute Tcommaaccent -90\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -80\nKPX Aacute W -60\nKPX Aacute Y -110\nKPX Aacute Yacute -110\nKPX Aacute Ydieresis -110\nKPX Aacute u -30\nKPX Aacute uacute -30\nKPX Aacute ucircumflex -30\nKPX Aacute udieresis -30\nKPX Aacute ugrave -30\nKPX Aacute uhungarumlaut -30\nKPX Aacute umacron -30\nKPX Aacute uogonek -30\nKPX Aacute uring -30\nKPX Aacute v -40\nKPX Aacute w -30\nKPX Aacute y -30\nKPX Aacute yacute -30\nKPX Aacute ydieresis -30\nKPX Abreve C -40\nKPX Abreve Cacute -40\nKPX Abreve Ccaron -40\nKPX Abreve Ccedilla -40\nKPX Abreve G -50\nKPX Abreve Gbreve -50\nKPX Abreve Gcommaaccent -50\nKPX Abreve O -40\nKPX Abreve Oacute -40\nKPX Abreve Ocircumflex -40\nKPX Abreve Odieresis -40\nKPX Abreve Ograve -40\nKPX Abreve Ohungarumlaut -40\nKPX Abreve Omacron -40\nKPX Abreve Oslash -40\nKPX Abreve Otilde -40\nKPX Abreve Q -40\nKPX Abreve T -90\nKPX Abreve Tcaron -90\nKPX Abreve Tcommaaccent -90\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -80\nKPX Abreve W -60\nKPX Abreve Y -110\nKPX Abreve Yacute -110\nKPX Abreve Ydieresis -110\nKPX Abreve u -30\nKPX Abreve uacute -30\nKPX Abreve ucircumflex -30\nKPX Abreve udieresis -30\nKPX Abreve ugrave -30\nKPX Abreve uhungarumlaut -30\nKPX Abreve umacron -30\nKPX Abreve uogonek -30\nKPX Abreve uring -30\nKPX Abreve v -40\nKPX Abreve w -30\nKPX Abreve y -30\nKPX Abreve yacute -30\nKPX Abreve ydieresis -30\nKPX Acircumflex C -40\nKPX Acircumflex Cacute -40\nKPX Acircumflex Ccaron -40\nKPX Acircumflex Ccedilla -40\nKPX Acircumflex G -50\nKPX Acircumflex Gbreve -50\nKPX Acircumflex Gcommaaccent -50\nKPX Acircumflex O -40\nKPX Acircumflex Oacute -40\nKPX Acircumflex Ocircumflex -40\nKPX Acircumflex Odieresis -40\nKPX Acircumflex Ograve -40\nKPX Acircumflex Ohungarumlaut -40\nKPX Acircumflex Omacron -40\nKPX Acircumflex Oslash -40\nKPX Acircumflex Otilde -40\nKPX Acircumflex Q -40\nKPX Acircumflex T -90\nKPX Acircumflex Tcaron -90\nKPX Acircumflex Tcommaaccent -90\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -80\nKPX Acircumflex W -60\nKPX Acircumflex Y -110\nKPX Acircumflex Yacute -110\nKPX Acircumflex Ydieresis -110\nKPX Acircumflex u -30\nKPX Acircumflex uacute -30\nKPX Acircumflex ucircumflex -30\nKPX Acircumflex udieresis -30\nKPX Acircumflex ugrave -30\nKPX Acircumflex uhungarumlaut -30\nKPX Acircumflex umacron -30\nKPX Acircumflex uogonek -30\nKPX Acircumflex uring -30\nKPX Acircumflex v -40\nKPX Acircumflex w -30\nKPX Acircumflex y -30\nKPX Acircumflex yacute -30\nKPX Acircumflex ydieresis -30\nKPX Adieresis C -40\nKPX Adieresis Cacute -40\nKPX Adieresis Ccaron -40\nKPX Adieresis Ccedilla -40\nKPX Adieresis G -50\nKPX Adieresis Gbreve -50\nKPX Adieresis Gcommaaccent -50\nKPX Adieresis O -40\nKPX Adieresis Oacute -40\nKPX Adieresis Ocircumflex -40\nKPX Adieresis Odieresis -40\nKPX Adieresis Ograve -40\nKPX Adieresis Ohungarumlaut -40\nKPX Adieresis Omacron -40\nKPX Adieresis Oslash -40\nKPX Adieresis Otilde -40\nKPX Adieresis Q -40\nKPX Adieresis T -90\nKPX Adieresis Tcaron -90\nKPX Adieresis Tcommaaccent -90\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -80\nKPX Adieresis W -60\nKPX Adieresis Y -110\nKPX Adieresis Yacute -110\nKPX Adieresis Ydieresis -110\nKPX Adieresis u -30\nKPX Adieresis uacute -30\nKPX Adieresis ucircumflex -30\nKPX Adieresis udieresis -30\nKPX Adieresis ugrave -30\nKPX Adieresis uhungarumlaut -30\nKPX Adieresis umacron -30\nKPX Adieresis uogonek -30\nKPX Adieresis uring -30\nKPX Adieresis v -40\nKPX Adieresis w -30\nKPX Adieresis y -30\nKPX Adieresis yacute -30\nKPX Adieresis ydieresis -30\nKPX Agrave C -40\nKPX Agrave Cacute -40\nKPX Agrave Ccaron -40\nKPX Agrave Ccedilla -40\nKPX Agrave G -50\nKPX Agrave Gbreve -50\nKPX Agrave Gcommaaccent -50\nKPX Agrave O -40\nKPX Agrave Oacute -40\nKPX Agrave Ocircumflex -40\nKPX Agrave Odieresis -40\nKPX Agrave Ograve -40\nKPX Agrave Ohungarumlaut -40\nKPX Agrave Omacron -40\nKPX Agrave Oslash -40\nKPX Agrave Otilde -40\nKPX Agrave Q -40\nKPX Agrave T -90\nKPX Agrave Tcaron -90\nKPX Agrave Tcommaaccent -90\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -80\nKPX Agrave W -60\nKPX Agrave Y -110\nKPX Agrave Yacute -110\nKPX Agrave Ydieresis -110\nKPX Agrave u -30\nKPX Agrave uacute -30\nKPX Agrave ucircumflex -30\nKPX Agrave udieresis -30\nKPX Agrave ugrave -30\nKPX Agrave uhungarumlaut -30\nKPX Agrave umacron -30\nKPX Agrave uogonek -30\nKPX Agrave uring -30\nKPX Agrave v -40\nKPX Agrave w -30\nKPX Agrave y -30\nKPX Agrave yacute -30\nKPX Agrave ydieresis -30\nKPX Amacron C -40\nKPX Amacron Cacute -40\nKPX Amacron Ccaron -40\nKPX Amacron Ccedilla -40\nKPX Amacron G -50\nKPX Amacron Gbreve -50\nKPX Amacron Gcommaaccent -50\nKPX Amacron O -40\nKPX Amacron Oacute -40\nKPX Amacron Ocircumflex -40\nKPX Amacron Odieresis -40\nKPX Amacron Ograve -40\nKPX Amacron Ohungarumlaut -40\nKPX Amacron Omacron -40\nKPX Amacron Oslash -40\nKPX Amacron Otilde -40\nKPX Amacron Q -40\nKPX Amacron T -90\nKPX Amacron Tcaron -90\nKPX Amacron Tcommaaccent -90\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -80\nKPX Amacron W -60\nKPX Amacron Y -110\nKPX Amacron Yacute -110\nKPX Amacron Ydieresis -110\nKPX Amacron u -30\nKPX Amacron uacute -30\nKPX Amacron ucircumflex -30\nKPX Amacron udieresis -30\nKPX Amacron ugrave -30\nKPX Amacron uhungarumlaut -30\nKPX Amacron umacron -30\nKPX Amacron uogonek -30\nKPX Amacron uring -30\nKPX Amacron v -40\nKPX Amacron w -30\nKPX Amacron y -30\nKPX Amacron yacute -30\nKPX Amacron ydieresis -30\nKPX Aogonek C -40\nKPX Aogonek Cacute -40\nKPX Aogonek Ccaron -40\nKPX Aogonek Ccedilla -40\nKPX Aogonek G -50\nKPX Aogonek Gbreve -50\nKPX Aogonek Gcommaaccent -50\nKPX Aogonek O -40\nKPX Aogonek Oacute -40\nKPX Aogonek Ocircumflex -40\nKPX Aogonek Odieresis -40\nKPX Aogonek Ograve -40\nKPX Aogonek Ohungarumlaut -40\nKPX Aogonek Omacron -40\nKPX Aogonek Oslash -40\nKPX Aogonek Otilde -40\nKPX Aogonek Q -40\nKPX Aogonek T -90\nKPX Aogonek Tcaron -90\nKPX Aogonek Tcommaaccent -90\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -80\nKPX Aogonek W -60\nKPX Aogonek Y -110\nKPX Aogonek Yacute -110\nKPX Aogonek Ydieresis -110\nKPX Aogonek u -30\nKPX Aogonek uacute -30\nKPX Aogonek ucircumflex -30\nKPX Aogonek udieresis -30\nKPX Aogonek ugrave -30\nKPX Aogonek uhungarumlaut -30\nKPX Aogonek umacron -30\nKPX Aogonek uogonek -30\nKPX Aogonek uring -30\nKPX Aogonek v -40\nKPX Aogonek w -30\nKPX Aogonek y -30\nKPX Aogonek yacute -30\nKPX Aogonek ydieresis -30\nKPX Aring C -40\nKPX Aring Cacute -40\nKPX Aring Ccaron -40\nKPX Aring Ccedilla -40\nKPX Aring G -50\nKPX Aring Gbreve -50\nKPX Aring Gcommaaccent -50\nKPX Aring O -40\nKPX Aring Oacute -40\nKPX Aring Ocircumflex -40\nKPX Aring Odieresis -40\nKPX Aring Ograve -40\nKPX Aring Ohungarumlaut -40\nKPX Aring Omacron -40\nKPX Aring Oslash -40\nKPX Aring Otilde -40\nKPX Aring Q -40\nKPX Aring T -90\nKPX Aring Tcaron -90\nKPX Aring Tcommaaccent -90\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -80\nKPX Aring W -60\nKPX Aring Y -110\nKPX Aring Yacute -110\nKPX Aring Ydieresis -110\nKPX Aring u -30\nKPX Aring uacute -30\nKPX Aring ucircumflex -30\nKPX Aring udieresis -30\nKPX Aring ugrave -30\nKPX Aring uhungarumlaut -30\nKPX Aring umacron -30\nKPX Aring uogonek -30\nKPX Aring uring -30\nKPX Aring v -40\nKPX Aring w -30\nKPX Aring y -30\nKPX Aring yacute -30\nKPX Aring ydieresis -30\nKPX Atilde C -40\nKPX Atilde Cacute -40\nKPX Atilde Ccaron -40\nKPX Atilde Ccedilla -40\nKPX Atilde G -50\nKPX Atilde Gbreve -50\nKPX Atilde Gcommaaccent -50\nKPX Atilde O -40\nKPX Atilde Oacute -40\nKPX Atilde Ocircumflex -40\nKPX Atilde Odieresis -40\nKPX Atilde Ograve -40\nKPX Atilde Ohungarumlaut -40\nKPX Atilde Omacron -40\nKPX Atilde Oslash -40\nKPX Atilde Otilde -40\nKPX Atilde Q -40\nKPX Atilde T -90\nKPX Atilde Tcaron -90\nKPX Atilde Tcommaaccent -90\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -80\nKPX Atilde W -60\nKPX Atilde Y -110\nKPX Atilde Yacute -110\nKPX Atilde Ydieresis -110\nKPX Atilde u -30\nKPX Atilde uacute -30\nKPX Atilde ucircumflex -30\nKPX Atilde udieresis -30\nKPX Atilde ugrave -30\nKPX Atilde uhungarumlaut -30\nKPX Atilde umacron -30\nKPX Atilde uogonek -30\nKPX Atilde uring -30\nKPX Atilde v -40\nKPX Atilde w -30\nKPX Atilde y -30\nKPX Atilde yacute -30\nKPX Atilde ydieresis -30\nKPX B A -30\nKPX B Aacute -30\nKPX B Abreve -30\nKPX B Acircumflex -30\nKPX B Adieresis -30\nKPX B Agrave -30\nKPX B Amacron -30\nKPX B Aogonek -30\nKPX B Aring -30\nKPX B Atilde -30\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX D A -40\nKPX D Aacute -40\nKPX D Abreve -40\nKPX D Acircumflex -40\nKPX D Adieresis -40\nKPX D Agrave -40\nKPX D Amacron -40\nKPX D Aogonek -40\nKPX D Aring -40\nKPX D Atilde -40\nKPX D V -40\nKPX D W -40\nKPX D Y -70\nKPX D Yacute -70\nKPX D Ydieresis -70\nKPX D comma -30\nKPX D period -30\nKPX Dcaron A -40\nKPX Dcaron Aacute -40\nKPX Dcaron Abreve -40\nKPX Dcaron Acircumflex -40\nKPX Dcaron Adieresis -40\nKPX Dcaron Agrave -40\nKPX Dcaron Amacron -40\nKPX Dcaron Aogonek -40\nKPX Dcaron Aring -40\nKPX Dcaron Atilde -40\nKPX Dcaron V -40\nKPX Dcaron W -40\nKPX Dcaron Y -70\nKPX Dcaron Yacute -70\nKPX Dcaron Ydieresis -70\nKPX Dcaron comma -30\nKPX Dcaron period -30\nKPX Dcroat A -40\nKPX Dcroat Aacute -40\nKPX Dcroat Abreve -40\nKPX Dcroat Acircumflex -40\nKPX Dcroat Adieresis -40\nKPX Dcroat Agrave -40\nKPX Dcroat Amacron -40\nKPX Dcroat Aogonek -40\nKPX Dcroat Aring -40\nKPX Dcroat Atilde -40\nKPX Dcroat V -40\nKPX Dcroat W -40\nKPX Dcroat Y -70\nKPX Dcroat Yacute -70\nKPX Dcroat Ydieresis -70\nKPX Dcroat comma -30\nKPX Dcroat period -30\nKPX F A -80\nKPX F Aacute -80\nKPX F Abreve -80\nKPX F Acircumflex -80\nKPX F Adieresis -80\nKPX F Agrave -80\nKPX F Amacron -80\nKPX F Aogonek -80\nKPX F Aring -80\nKPX F Atilde -80\nKPX F a -20\nKPX F aacute -20\nKPX F abreve -20\nKPX F acircumflex -20\nKPX F adieresis -20\nKPX F agrave -20\nKPX F amacron -20\nKPX F aogonek -20\nKPX F aring -20\nKPX F atilde -20\nKPX F comma -100\nKPX F period -100\nKPX J A -20\nKPX J Aacute -20\nKPX J Abreve -20\nKPX J Acircumflex -20\nKPX J Adieresis -20\nKPX J Agrave -20\nKPX J Amacron -20\nKPX J Aogonek -20\nKPX J Aring -20\nKPX J Atilde -20\nKPX J comma -20\nKPX J period -20\nKPX J u -20\nKPX J uacute -20\nKPX J ucircumflex -20\nKPX J udieresis -20\nKPX J ugrave -20\nKPX J uhungarumlaut -20\nKPX J umacron -20\nKPX J uogonek -20\nKPX J uring -20\nKPX K O -30\nKPX K Oacute -30\nKPX K Ocircumflex -30\nKPX K Odieresis -30\nKPX K Ograve -30\nKPX K Ohungarumlaut -30\nKPX K Omacron -30\nKPX K Oslash -30\nKPX K Otilde -30\nKPX K e -15\nKPX K eacute -15\nKPX K ecaron -15\nKPX K ecircumflex -15\nKPX K edieresis -15\nKPX K edotaccent -15\nKPX K egrave -15\nKPX K emacron -15\nKPX K eogonek -15\nKPX K o -35\nKPX K oacute -35\nKPX K ocircumflex -35\nKPX K odieresis -35\nKPX K ograve -35\nKPX K ohungarumlaut -35\nKPX K omacron -35\nKPX K oslash -35\nKPX K otilde -35\nKPX K u -30\nKPX K uacute -30\nKPX K ucircumflex -30\nKPX K udieresis -30\nKPX K ugrave -30\nKPX K uhungarumlaut -30\nKPX K umacron -30\nKPX K uogonek -30\nKPX K uring -30\nKPX K y -40\nKPX K yacute -40\nKPX K ydieresis -40\nKPX Kcommaaccent O -30\nKPX Kcommaaccent Oacute -30\nKPX Kcommaaccent Ocircumflex -30\nKPX Kcommaaccent Odieresis -30\nKPX Kcommaaccent Ograve -30\nKPX Kcommaaccent Ohungarumlaut -30\nKPX Kcommaaccent Omacron -30\nKPX Kcommaaccent Oslash -30\nKPX Kcommaaccent Otilde -30\nKPX Kcommaaccent e -15\nKPX Kcommaaccent eacute -15\nKPX Kcommaaccent ecaron -15\nKPX Kcommaaccent ecircumflex -15\nKPX Kcommaaccent edieresis -15\nKPX Kcommaaccent edotaccent -15\nKPX Kcommaaccent egrave -15\nKPX Kcommaaccent emacron -15\nKPX Kcommaaccent eogonek -15\nKPX Kcommaaccent o -35\nKPX Kcommaaccent oacute -35\nKPX Kcommaaccent ocircumflex -35\nKPX Kcommaaccent odieresis -35\nKPX Kcommaaccent ograve -35\nKPX Kcommaaccent ohungarumlaut -35\nKPX Kcommaaccent omacron -35\nKPX Kcommaaccent oslash -35\nKPX Kcommaaccent otilde -35\nKPX Kcommaaccent u -30\nKPX Kcommaaccent uacute -30\nKPX Kcommaaccent ucircumflex -30\nKPX Kcommaaccent udieresis -30\nKPX Kcommaaccent ugrave -30\nKPX Kcommaaccent uhungarumlaut -30\nKPX Kcommaaccent umacron -30\nKPX Kcommaaccent uogonek -30\nKPX Kcommaaccent uring -30\nKPX Kcommaaccent y -40\nKPX Kcommaaccent yacute -40\nKPX Kcommaaccent ydieresis -40\nKPX L T -90\nKPX L Tcaron -90\nKPX L Tcommaaccent -90\nKPX L V -110\nKPX L W -80\nKPX L Y -120\nKPX L Yacute -120\nKPX L Ydieresis -120\nKPX L quotedblright -140\nKPX L quoteright -140\nKPX L y -30\nKPX L yacute -30\nKPX L ydieresis -30\nKPX Lacute T -90\nKPX Lacute Tcaron -90\nKPX Lacute Tcommaaccent -90\nKPX Lacute V -110\nKPX Lacute W -80\nKPX Lacute Y -120\nKPX Lacute Yacute -120\nKPX Lacute Ydieresis -120\nKPX Lacute quotedblright -140\nKPX Lacute quoteright -140\nKPX Lacute y -30\nKPX Lacute yacute -30\nKPX Lacute ydieresis -30\nKPX Lcommaaccent T -90\nKPX Lcommaaccent Tcaron -90\nKPX Lcommaaccent Tcommaaccent -90\nKPX Lcommaaccent V -110\nKPX Lcommaaccent W -80\nKPX Lcommaaccent Y -120\nKPX Lcommaaccent Yacute -120\nKPX Lcommaaccent Ydieresis -120\nKPX Lcommaaccent quotedblright -140\nKPX Lcommaaccent quoteright -140\nKPX Lcommaaccent y -30\nKPX Lcommaaccent yacute -30\nKPX Lcommaaccent ydieresis -30\nKPX Lslash T -90\nKPX Lslash Tcaron -90\nKPX Lslash Tcommaaccent -90\nKPX Lslash V -110\nKPX Lslash W -80\nKPX Lslash Y -120\nKPX Lslash Yacute -120\nKPX Lslash Ydieresis -120\nKPX Lslash quotedblright -140\nKPX Lslash quoteright -140\nKPX Lslash y -30\nKPX Lslash yacute -30\nKPX Lslash ydieresis -30\nKPX O A -50\nKPX O Aacute -50\nKPX O Abreve -50\nKPX O Acircumflex -50\nKPX O Adieresis -50\nKPX O Agrave -50\nKPX O Amacron -50\nKPX O Aogonek -50\nKPX O Aring -50\nKPX O Atilde -50\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -50\nKPX O X -50\nKPX O Y -70\nKPX O Yacute -70\nKPX O Ydieresis -70\nKPX O comma -40\nKPX O period -40\nKPX Oacute A -50\nKPX Oacute Aacute -50\nKPX Oacute Abreve -50\nKPX Oacute Acircumflex -50\nKPX Oacute Adieresis -50\nKPX Oacute Agrave -50\nKPX Oacute Amacron -50\nKPX Oacute Aogonek -50\nKPX Oacute Aring -50\nKPX Oacute Atilde -50\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -50\nKPX Oacute X -50\nKPX Oacute Y -70\nKPX Oacute Yacute -70\nKPX Oacute Ydieresis -70\nKPX Oacute comma -40\nKPX Oacute period -40\nKPX Ocircumflex A -50\nKPX Ocircumflex Aacute -50\nKPX Ocircumflex Abreve -50\nKPX Ocircumflex Acircumflex -50\nKPX Ocircumflex Adieresis -50\nKPX Ocircumflex Agrave -50\nKPX Ocircumflex Amacron -50\nKPX Ocircumflex Aogonek -50\nKPX Ocircumflex Aring -50\nKPX Ocircumflex Atilde -50\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -50\nKPX Ocircumflex X -50\nKPX Ocircumflex Y -70\nKPX Ocircumflex Yacute -70\nKPX Ocircumflex Ydieresis -70\nKPX Ocircumflex comma -40\nKPX Ocircumflex period -40\nKPX Odieresis A -50\nKPX Odieresis Aacute -50\nKPX Odieresis Abreve -50\nKPX Odieresis Acircumflex -50\nKPX Odieresis Adieresis -50\nKPX Odieresis Agrave -50\nKPX Odieresis Amacron -50\nKPX Odieresis Aogonek -50\nKPX Odieresis Aring -50\nKPX Odieresis Atilde -50\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -50\nKPX Odieresis X -50\nKPX Odieresis Y -70\nKPX Odieresis Yacute -70\nKPX Odieresis Ydieresis -70\nKPX Odieresis comma -40\nKPX Odieresis period -40\nKPX Ograve A -50\nKPX Ograve Aacute -50\nKPX Ograve Abreve -50\nKPX Ograve Acircumflex -50\nKPX Ograve Adieresis -50\nKPX Ograve Agrave -50\nKPX Ograve Amacron -50\nKPX Ograve Aogonek -50\nKPX Ograve Aring -50\nKPX Ograve Atilde -50\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -50\nKPX Ograve X -50\nKPX Ograve Y -70\nKPX Ograve Yacute -70\nKPX Ograve Ydieresis -70\nKPX Ograve comma -40\nKPX Ograve period -40\nKPX Ohungarumlaut A -50\nKPX Ohungarumlaut Aacute -50\nKPX Ohungarumlaut Abreve -50\nKPX Ohungarumlaut Acircumflex -50\nKPX Ohungarumlaut Adieresis -50\nKPX Ohungarumlaut Agrave -50\nKPX Ohungarumlaut Amacron -50\nKPX Ohungarumlaut Aogonek -50\nKPX Ohungarumlaut Aring -50\nKPX Ohungarumlaut Atilde -50\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -50\nKPX Ohungarumlaut X -50\nKPX Ohungarumlaut Y -70\nKPX Ohungarumlaut Yacute -70\nKPX Ohungarumlaut Ydieresis -70\nKPX Ohungarumlaut comma -40\nKPX Ohungarumlaut period -40\nKPX Omacron A -50\nKPX Omacron Aacute -50\nKPX Omacron Abreve -50\nKPX Omacron Acircumflex -50\nKPX Omacron Adieresis -50\nKPX Omacron Agrave -50\nKPX Omacron Amacron -50\nKPX Omacron Aogonek -50\nKPX Omacron Aring -50\nKPX Omacron Atilde -50\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -50\nKPX Omacron X -50\nKPX Omacron Y -70\nKPX Omacron Yacute -70\nKPX Omacron Ydieresis -70\nKPX Omacron comma -40\nKPX Omacron period -40\nKPX Oslash A -50\nKPX Oslash Aacute -50\nKPX Oslash Abreve -50\nKPX Oslash Acircumflex -50\nKPX Oslash Adieresis -50\nKPX Oslash Agrave -50\nKPX Oslash Amacron -50\nKPX Oslash Aogonek -50\nKPX Oslash Aring -50\nKPX Oslash Atilde -50\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -50\nKPX Oslash X -50\nKPX Oslash Y -70\nKPX Oslash Yacute -70\nKPX Oslash Ydieresis -70\nKPX Oslash comma -40\nKPX Oslash period -40\nKPX Otilde A -50\nKPX Otilde Aacute -50\nKPX Otilde Abreve -50\nKPX Otilde Acircumflex -50\nKPX Otilde Adieresis -50\nKPX Otilde Agrave -50\nKPX Otilde Amacron -50\nKPX Otilde Aogonek -50\nKPX Otilde Aring -50\nKPX Otilde Atilde -50\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -50\nKPX Otilde X -50\nKPX Otilde Y -70\nKPX Otilde Yacute -70\nKPX Otilde Ydieresis -70\nKPX Otilde comma -40\nKPX Otilde period -40\nKPX P A -100\nKPX P Aacute -100\nKPX P Abreve -100\nKPX P Acircumflex -100\nKPX P Adieresis -100\nKPX P Agrave -100\nKPX P Amacron -100\nKPX P Aogonek -100\nKPX P Aring -100\nKPX P Atilde -100\nKPX P a -30\nKPX P aacute -30\nKPX P abreve -30\nKPX P acircumflex -30\nKPX P adieresis -30\nKPX P agrave -30\nKPX P amacron -30\nKPX P aogonek -30\nKPX P aring -30\nKPX P atilde -30\nKPX P comma -120\nKPX P e -30\nKPX P eacute -30\nKPX P ecaron -30\nKPX P ecircumflex -30\nKPX P edieresis -30\nKPX P edotaccent -30\nKPX P egrave -30\nKPX P emacron -30\nKPX P eogonek -30\nKPX P o -40\nKPX P oacute -40\nKPX P ocircumflex -40\nKPX P odieresis -40\nKPX P ograve -40\nKPX P ohungarumlaut -40\nKPX P omacron -40\nKPX P oslash -40\nKPX P otilde -40\nKPX P period -120\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX Q comma 20\nKPX Q period 20\nKPX R O -20\nKPX R Oacute -20\nKPX R Ocircumflex -20\nKPX R Odieresis -20\nKPX R Ograve -20\nKPX R Ohungarumlaut -20\nKPX R Omacron -20\nKPX R Oslash -20\nKPX R Otilde -20\nKPX R T -20\nKPX R Tcaron -20\nKPX R Tcommaaccent -20\nKPX R U -20\nKPX R Uacute -20\nKPX R Ucircumflex -20\nKPX R Udieresis -20\nKPX R Ugrave -20\nKPX R Uhungarumlaut -20\nKPX R Umacron -20\nKPX R Uogonek -20\nKPX R Uring -20\nKPX R V -50\nKPX R W -40\nKPX R Y -50\nKPX R Yacute -50\nKPX R Ydieresis -50\nKPX Racute O -20\nKPX Racute Oacute -20\nKPX Racute Ocircumflex -20\nKPX Racute Odieresis -20\nKPX Racute Ograve -20\nKPX Racute Ohungarumlaut -20\nKPX Racute Omacron -20\nKPX Racute Oslash -20\nKPX Racute Otilde -20\nKPX Racute T -20\nKPX Racute Tcaron -20\nKPX Racute Tcommaaccent -20\nKPX Racute U -20\nKPX Racute Uacute -20\nKPX Racute Ucircumflex -20\nKPX Racute Udieresis -20\nKPX Racute Ugrave -20\nKPX Racute Uhungarumlaut -20\nKPX Racute Umacron -20\nKPX Racute Uogonek -20\nKPX Racute Uring -20\nKPX Racute V -50\nKPX Racute W -40\nKPX Racute Y -50\nKPX Racute Yacute -50\nKPX Racute Ydieresis -50\nKPX Rcaron O -20\nKPX Rcaron Oacute -20\nKPX Rcaron Ocircumflex -20\nKPX Rcaron Odieresis -20\nKPX Rcaron Ograve -20\nKPX Rcaron Ohungarumlaut -20\nKPX Rcaron Omacron -20\nKPX Rcaron Oslash -20\nKPX Rcaron Otilde -20\nKPX Rcaron T -20\nKPX Rcaron Tcaron -20\nKPX Rcaron Tcommaaccent -20\nKPX Rcaron U -20\nKPX Rcaron Uacute -20\nKPX Rcaron Ucircumflex -20\nKPX Rcaron Udieresis -20\nKPX Rcaron Ugrave -20\nKPX Rcaron Uhungarumlaut -20\nKPX Rcaron Umacron -20\nKPX Rcaron Uogonek -20\nKPX Rcaron Uring -20\nKPX Rcaron V -50\nKPX Rcaron W -40\nKPX Rcaron Y -50\nKPX Rcaron Yacute -50\nKPX Rcaron Ydieresis -50\nKPX Rcommaaccent O -20\nKPX Rcommaaccent Oacute -20\nKPX Rcommaaccent Ocircumflex -20\nKPX Rcommaaccent Odieresis -20\nKPX Rcommaaccent Ograve -20\nKPX Rcommaaccent Ohungarumlaut -20\nKPX Rcommaaccent Omacron -20\nKPX Rcommaaccent Oslash -20\nKPX Rcommaaccent Otilde -20\nKPX Rcommaaccent T -20\nKPX Rcommaaccent Tcaron -20\nKPX Rcommaaccent Tcommaaccent -20\nKPX Rcommaaccent U -20\nKPX Rcommaaccent Uacute -20\nKPX Rcommaaccent Ucircumflex -20\nKPX Rcommaaccent Udieresis -20\nKPX Rcommaaccent Ugrave -20\nKPX Rcommaaccent Uhungarumlaut -20\nKPX Rcommaaccent Umacron -20\nKPX Rcommaaccent Uogonek -20\nKPX Rcommaaccent Uring -20\nKPX Rcommaaccent V -50\nKPX Rcommaaccent W -40\nKPX Rcommaaccent Y -50\nKPX Rcommaaccent Yacute -50\nKPX Rcommaaccent Ydieresis -50\nKPX T A -90\nKPX T Aacute -90\nKPX T Abreve -90\nKPX T Acircumflex -90\nKPX T Adieresis -90\nKPX T Agrave -90\nKPX T Amacron -90\nKPX T Aogonek -90\nKPX T Aring -90\nKPX T Atilde -90\nKPX T O -40\nKPX T Oacute -40\nKPX T Ocircumflex -40\nKPX T Odieresis -40\nKPX T Ograve -40\nKPX T Ohungarumlaut -40\nKPX T Omacron -40\nKPX T Oslash -40\nKPX T Otilde -40\nKPX T a -80\nKPX T aacute -80\nKPX T abreve -80\nKPX T acircumflex -80\nKPX T adieresis -80\nKPX T agrave -80\nKPX T amacron -80\nKPX T aogonek -80\nKPX T aring -80\nKPX T atilde -80\nKPX T colon -40\nKPX T comma -80\nKPX T e -60\nKPX T eacute -60\nKPX T ecaron -60\nKPX T ecircumflex -60\nKPX T edieresis -60\nKPX T edotaccent -60\nKPX T egrave -60\nKPX T emacron -60\nKPX T eogonek -60\nKPX T hyphen -120\nKPX T o -80\nKPX T oacute -80\nKPX T ocircumflex -80\nKPX T odieresis -80\nKPX T ograve -80\nKPX T ohungarumlaut -80\nKPX T omacron -80\nKPX T oslash -80\nKPX T otilde -80\nKPX T period -80\nKPX T r -80\nKPX T racute -80\nKPX T rcommaaccent -80\nKPX T semicolon -40\nKPX T u -90\nKPX T uacute -90\nKPX T ucircumflex -90\nKPX T udieresis -90\nKPX T ugrave -90\nKPX T uhungarumlaut -90\nKPX T umacron -90\nKPX T uogonek -90\nKPX T uring -90\nKPX T w -60\nKPX T y -60\nKPX T yacute -60\nKPX T ydieresis -60\nKPX Tcaron A -90\nKPX Tcaron Aacute -90\nKPX Tcaron Abreve -90\nKPX Tcaron Acircumflex -90\nKPX Tcaron Adieresis -90\nKPX Tcaron Agrave -90\nKPX Tcaron Amacron -90\nKPX Tcaron Aogonek -90\nKPX Tcaron Aring -90\nKPX Tcaron Atilde -90\nKPX Tcaron O -40\nKPX Tcaron Oacute -40\nKPX Tcaron Ocircumflex -40\nKPX Tcaron Odieresis -40\nKPX Tcaron Ograve -40\nKPX Tcaron Ohungarumlaut -40\nKPX Tcaron Omacron -40\nKPX Tcaron Oslash -40\nKPX Tcaron Otilde -40\nKPX Tcaron a -80\nKPX Tcaron aacute -80\nKPX Tcaron abreve -80\nKPX Tcaron acircumflex -80\nKPX Tcaron adieresis -80\nKPX Tcaron agrave -80\nKPX Tcaron amacron -80\nKPX Tcaron aogonek -80\nKPX Tcaron aring -80\nKPX Tcaron atilde -80\nKPX Tcaron colon -40\nKPX Tcaron comma -80\nKPX Tcaron e -60\nKPX Tcaron eacute -60\nKPX Tcaron ecaron -60\nKPX Tcaron ecircumflex -60\nKPX Tcaron edieresis -60\nKPX Tcaron edotaccent -60\nKPX Tcaron egrave -60\nKPX Tcaron emacron -60\nKPX Tcaron eogonek -60\nKPX Tcaron hyphen -120\nKPX Tcaron o -80\nKPX Tcaron oacute -80\nKPX Tcaron ocircumflex -80\nKPX Tcaron odieresis -80\nKPX Tcaron ograve -80\nKPX Tcaron ohungarumlaut -80\nKPX Tcaron omacron -80\nKPX Tcaron oslash -80\nKPX Tcaron otilde -80\nKPX Tcaron period -80\nKPX Tcaron r -80\nKPX Tcaron racute -80\nKPX Tcaron rcommaaccent -80\nKPX Tcaron semicolon -40\nKPX Tcaron u -90\nKPX Tcaron uacute -90\nKPX Tcaron ucircumflex -90\nKPX Tcaron udieresis -90\nKPX Tcaron ugrave -90\nKPX Tcaron uhungarumlaut -90\nKPX Tcaron umacron -90\nKPX Tcaron uogonek -90\nKPX Tcaron uring -90\nKPX Tcaron w -60\nKPX Tcaron y -60\nKPX Tcaron yacute -60\nKPX Tcaron ydieresis -60\nKPX Tcommaaccent A -90\nKPX Tcommaaccent Aacute -90\nKPX Tcommaaccent Abreve -90\nKPX Tcommaaccent Acircumflex -90\nKPX Tcommaaccent Adieresis -90\nKPX Tcommaaccent Agrave -90\nKPX Tcommaaccent Amacron -90\nKPX Tcommaaccent Aogonek -90\nKPX Tcommaaccent Aring -90\nKPX Tcommaaccent Atilde -90\nKPX Tcommaaccent O -40\nKPX Tcommaaccent Oacute -40\nKPX Tcommaaccent Ocircumflex -40\nKPX Tcommaaccent Odieresis -40\nKPX Tcommaaccent Ograve -40\nKPX Tcommaaccent Ohungarumlaut -40\nKPX Tcommaaccent Omacron -40\nKPX Tcommaaccent Oslash -40\nKPX Tcommaaccent Otilde -40\nKPX Tcommaaccent a -80\nKPX Tcommaaccent aacute -80\nKPX Tcommaaccent abreve -80\nKPX Tcommaaccent acircumflex -80\nKPX Tcommaaccent adieresis -80\nKPX Tcommaaccent agrave -80\nKPX Tcommaaccent amacron -80\nKPX Tcommaaccent aogonek -80\nKPX Tcommaaccent aring -80\nKPX Tcommaaccent atilde -80\nKPX Tcommaaccent colon -40\nKPX Tcommaaccent comma -80\nKPX Tcommaaccent e -60\nKPX Tcommaaccent eacute -60\nKPX Tcommaaccent ecaron -60\nKPX Tcommaaccent ecircumflex -60\nKPX Tcommaaccent edieresis -60\nKPX Tcommaaccent edotaccent -60\nKPX Tcommaaccent egrave -60\nKPX Tcommaaccent emacron -60\nKPX Tcommaaccent eogonek -60\nKPX Tcommaaccent hyphen -120\nKPX Tcommaaccent o -80\nKPX Tcommaaccent oacute -80\nKPX Tcommaaccent ocircumflex -80\nKPX Tcommaaccent odieresis -80\nKPX Tcommaaccent ograve -80\nKPX Tcommaaccent ohungarumlaut -80\nKPX Tcommaaccent omacron -80\nKPX Tcommaaccent oslash -80\nKPX Tcommaaccent otilde -80\nKPX Tcommaaccent period -80\nKPX Tcommaaccent r -80\nKPX Tcommaaccent racute -80\nKPX Tcommaaccent rcommaaccent -80\nKPX Tcommaaccent semicolon -40\nKPX Tcommaaccent u -90\nKPX Tcommaaccent uacute -90\nKPX Tcommaaccent ucircumflex -90\nKPX Tcommaaccent udieresis -90\nKPX Tcommaaccent ugrave -90\nKPX Tcommaaccent uhungarumlaut -90\nKPX Tcommaaccent umacron -90\nKPX Tcommaaccent uogonek -90\nKPX Tcommaaccent uring -90\nKPX Tcommaaccent w -60\nKPX Tcommaaccent y -60\nKPX Tcommaaccent yacute -60\nKPX Tcommaaccent ydieresis -60\nKPX U A -50\nKPX U Aacute -50\nKPX U Abreve -50\nKPX U Acircumflex -50\nKPX U Adieresis -50\nKPX U Agrave -50\nKPX U Amacron -50\nKPX U Aogonek -50\nKPX U Aring -50\nKPX U Atilde -50\nKPX U comma -30\nKPX U period -30\nKPX Uacute A -50\nKPX Uacute Aacute -50\nKPX Uacute Abreve -50\nKPX Uacute Acircumflex -50\nKPX Uacute Adieresis -50\nKPX Uacute Agrave -50\nKPX Uacute Amacron -50\nKPX Uacute Aogonek -50\nKPX Uacute Aring -50\nKPX Uacute Atilde -50\nKPX Uacute comma -30\nKPX Uacute period -30\nKPX Ucircumflex A -50\nKPX Ucircumflex Aacute -50\nKPX Ucircumflex Abreve -50\nKPX Ucircumflex Acircumflex -50\nKPX Ucircumflex Adieresis -50\nKPX Ucircumflex Agrave -50\nKPX Ucircumflex Amacron -50\nKPX Ucircumflex Aogonek -50\nKPX Ucircumflex Aring -50\nKPX Ucircumflex Atilde -50\nKPX Ucircumflex comma -30\nKPX Ucircumflex period -30\nKPX Udieresis A -50\nKPX Udieresis Aacute -50\nKPX Udieresis Abreve -50\nKPX Udieresis Acircumflex -50\nKPX Udieresis Adieresis -50\nKPX Udieresis Agrave -50\nKPX Udieresis Amacron -50\nKPX Udieresis Aogonek -50\nKPX Udieresis Aring -50\nKPX Udieresis Atilde -50\nKPX Udieresis comma -30\nKPX Udieresis period -30\nKPX Ugrave A -50\nKPX Ugrave Aacute -50\nKPX Ugrave Abreve -50\nKPX Ugrave Acircumflex -50\nKPX Ugrave Adieresis -50\nKPX Ugrave Agrave -50\nKPX Ugrave Amacron -50\nKPX Ugrave Aogonek -50\nKPX Ugrave Aring -50\nKPX Ugrave Atilde -50\nKPX Ugrave comma -30\nKPX Ugrave period -30\nKPX Uhungarumlaut A -50\nKPX Uhungarumlaut Aacute -50\nKPX Uhungarumlaut Abreve -50\nKPX Uhungarumlaut Acircumflex -50\nKPX Uhungarumlaut Adieresis -50\nKPX Uhungarumlaut Agrave -50\nKPX Uhungarumlaut Amacron -50\nKPX Uhungarumlaut Aogonek -50\nKPX Uhungarumlaut Aring -50\nKPX Uhungarumlaut Atilde -50\nKPX Uhungarumlaut comma -30\nKPX Uhungarumlaut period -30\nKPX Umacron A -50\nKPX Umacron Aacute -50\nKPX Umacron Abreve -50\nKPX Umacron Acircumflex -50\nKPX Umacron Adieresis -50\nKPX Umacron Agrave -50\nKPX Umacron Amacron -50\nKPX Umacron Aogonek -50\nKPX Umacron Aring -50\nKPX Umacron Atilde -50\nKPX Umacron comma -30\nKPX Umacron period -30\nKPX Uogonek A -50\nKPX Uogonek Aacute -50\nKPX Uogonek Abreve -50\nKPX Uogonek Acircumflex -50\nKPX Uogonek Adieresis -50\nKPX Uogonek Agrave -50\nKPX Uogonek Amacron -50\nKPX Uogonek Aogonek -50\nKPX Uogonek Aring -50\nKPX Uogonek Atilde -50\nKPX Uogonek comma -30\nKPX Uogonek period -30\nKPX Uring A -50\nKPX Uring Aacute -50\nKPX Uring Abreve -50\nKPX Uring Acircumflex -50\nKPX Uring Adieresis -50\nKPX Uring Agrave -50\nKPX Uring Amacron -50\nKPX Uring Aogonek -50\nKPX Uring Aring -50\nKPX Uring Atilde -50\nKPX Uring comma -30\nKPX Uring period -30\nKPX V A -80\nKPX V Aacute -80\nKPX V Abreve -80\nKPX V Acircumflex -80\nKPX V Adieresis -80\nKPX V Agrave -80\nKPX V Amacron -80\nKPX V Aogonek -80\nKPX V Aring -80\nKPX V Atilde -80\nKPX V G -50\nKPX V Gbreve -50\nKPX V Gcommaaccent -50\nKPX V O -50\nKPX V Oacute -50\nKPX V Ocircumflex -50\nKPX V Odieresis -50\nKPX V Ograve -50\nKPX V Ohungarumlaut -50\nKPX V Omacron -50\nKPX V Oslash -50\nKPX V Otilde -50\nKPX V a -60\nKPX V aacute -60\nKPX V abreve -60\nKPX V acircumflex -60\nKPX V adieresis -60\nKPX V agrave -60\nKPX V amacron -60\nKPX V aogonek -60\nKPX V aring -60\nKPX V atilde -60\nKPX V colon -40\nKPX V comma -120\nKPX V e -50\nKPX V eacute -50\nKPX V ecaron -50\nKPX V ecircumflex -50\nKPX V edieresis -50\nKPX V edotaccent -50\nKPX V egrave -50\nKPX V emacron -50\nKPX V eogonek -50\nKPX V hyphen -80\nKPX V o -90\nKPX V oacute -90\nKPX V ocircumflex -90\nKPX V odieresis -90\nKPX V ograve -90\nKPX V ohungarumlaut -90\nKPX V omacron -90\nKPX V oslash -90\nKPX V otilde -90\nKPX V period -120\nKPX V semicolon -40\nKPX V u -60\nKPX V uacute -60\nKPX V ucircumflex -60\nKPX V udieresis -60\nKPX V ugrave -60\nKPX V uhungarumlaut -60\nKPX V umacron -60\nKPX V uogonek -60\nKPX V uring -60\nKPX W A -60\nKPX W Aacute -60\nKPX W Abreve -60\nKPX W Acircumflex -60\nKPX W Adieresis -60\nKPX W Agrave -60\nKPX W Amacron -60\nKPX W Aogonek -60\nKPX W Aring -60\nKPX W Atilde -60\nKPX W O -20\nKPX W Oacute -20\nKPX W Ocircumflex -20\nKPX W Odieresis -20\nKPX W Ograve -20\nKPX W Ohungarumlaut -20\nKPX W Omacron -20\nKPX W Oslash -20\nKPX W Otilde -20\nKPX W a -40\nKPX W aacute -40\nKPX W abreve -40\nKPX W acircumflex -40\nKPX W adieresis -40\nKPX W agrave -40\nKPX W amacron -40\nKPX W aogonek -40\nKPX W aring -40\nKPX W atilde -40\nKPX W colon -10\nKPX W comma -80\nKPX W e -35\nKPX W eacute -35\nKPX W ecaron -35\nKPX W ecircumflex -35\nKPX W edieresis -35\nKPX W edotaccent -35\nKPX W egrave -35\nKPX W emacron -35\nKPX W eogonek -35\nKPX W hyphen -40\nKPX W o -60\nKPX W oacute -60\nKPX W ocircumflex -60\nKPX W odieresis -60\nKPX W ograve -60\nKPX W ohungarumlaut -60\nKPX W omacron -60\nKPX W oslash -60\nKPX W otilde -60\nKPX W period -80\nKPX W semicolon -10\nKPX W u -45\nKPX W uacute -45\nKPX W ucircumflex -45\nKPX W udieresis -45\nKPX W ugrave -45\nKPX W uhungarumlaut -45\nKPX W umacron -45\nKPX W uogonek -45\nKPX W uring -45\nKPX W y -20\nKPX W yacute -20\nKPX W ydieresis -20\nKPX Y A -110\nKPX Y Aacute -110\nKPX Y Abreve -110\nKPX Y Acircumflex -110\nKPX Y Adieresis -110\nKPX Y Agrave -110\nKPX Y Amacron -110\nKPX Y Aogonek -110\nKPX Y Aring -110\nKPX Y Atilde -110\nKPX Y O -70\nKPX Y Oacute -70\nKPX Y Ocircumflex -70\nKPX Y Odieresis -70\nKPX Y Ograve -70\nKPX Y Ohungarumlaut -70\nKPX Y Omacron -70\nKPX Y Oslash -70\nKPX Y Otilde -70\nKPX Y a -90\nKPX Y aacute -90\nKPX Y abreve -90\nKPX Y acircumflex -90\nKPX Y adieresis -90\nKPX Y agrave -90\nKPX Y amacron -90\nKPX Y aogonek -90\nKPX Y aring -90\nKPX Y atilde -90\nKPX Y colon -50\nKPX Y comma -100\nKPX Y e -80\nKPX Y eacute -80\nKPX Y ecaron -80\nKPX Y ecircumflex -80\nKPX Y edieresis -80\nKPX Y edotaccent -80\nKPX Y egrave -80\nKPX Y emacron -80\nKPX Y eogonek -80\nKPX Y o -100\nKPX Y oacute -100\nKPX Y ocircumflex -100\nKPX Y odieresis -100\nKPX Y ograve -100\nKPX Y ohungarumlaut -100\nKPX Y omacron -100\nKPX Y oslash -100\nKPX Y otilde -100\nKPX Y period -100\nKPX Y semicolon -50\nKPX Y u -100\nKPX Y uacute -100\nKPX Y ucircumflex -100\nKPX Y udieresis -100\nKPX Y ugrave -100\nKPX Y uhungarumlaut -100\nKPX Y umacron -100\nKPX Y uogonek -100\nKPX Y uring -100\nKPX Yacute A -110\nKPX Yacute Aacute -110\nKPX Yacute Abreve -110\nKPX Yacute Acircumflex -110\nKPX Yacute Adieresis -110\nKPX Yacute Agrave -110\nKPX Yacute Amacron -110\nKPX Yacute Aogonek -110\nKPX Yacute Aring -110\nKPX Yacute Atilde -110\nKPX Yacute O -70\nKPX Yacute Oacute -70\nKPX Yacute Ocircumflex -70\nKPX Yacute Odieresis -70\nKPX Yacute Ograve -70\nKPX Yacute Ohungarumlaut -70\nKPX Yacute Omacron -70\nKPX Yacute Oslash -70\nKPX Yacute Otilde -70\nKPX Yacute a -90\nKPX Yacute aacute -90\nKPX Yacute abreve -90\nKPX Yacute acircumflex -90\nKPX Yacute adieresis -90\nKPX Yacute agrave -90\nKPX Yacute amacron -90\nKPX Yacute aogonek -90\nKPX Yacute aring -90\nKPX Yacute atilde -90\nKPX Yacute colon -50\nKPX Yacute comma -100\nKPX Yacute e -80\nKPX Yacute eacute -80\nKPX Yacute ecaron -80\nKPX Yacute ecircumflex -80\nKPX Yacute edieresis -80\nKPX Yacute edotaccent -80\nKPX Yacute egrave -80\nKPX Yacute emacron -80\nKPX Yacute eogonek -80\nKPX Yacute o -100\nKPX Yacute oacute -100\nKPX Yacute ocircumflex -100\nKPX Yacute odieresis -100\nKPX Yacute ograve -100\nKPX Yacute ohungarumlaut -100\nKPX Yacute omacron -100\nKPX Yacute oslash -100\nKPX Yacute otilde -100\nKPX Yacute period -100\nKPX Yacute semicolon -50\nKPX Yacute u -100\nKPX Yacute uacute -100\nKPX Yacute ucircumflex -100\nKPX Yacute udieresis -100\nKPX Yacute ugrave -100\nKPX Yacute uhungarumlaut -100\nKPX Yacute umacron -100\nKPX Yacute uogonek -100\nKPX Yacute uring -100\nKPX Ydieresis A -110\nKPX Ydieresis Aacute -110\nKPX Ydieresis Abreve -110\nKPX Ydieresis Acircumflex -110\nKPX Ydieresis Adieresis -110\nKPX Ydieresis Agrave -110\nKPX Ydieresis Amacron -110\nKPX Ydieresis Aogonek -110\nKPX Ydieresis Aring -110\nKPX Ydieresis Atilde -110\nKPX Ydieresis O -70\nKPX Ydieresis Oacute -70\nKPX Ydieresis Ocircumflex -70\nKPX Ydieresis Odieresis -70\nKPX Ydieresis Ograve -70\nKPX Ydieresis Ohungarumlaut -70\nKPX Ydieresis Omacron -70\nKPX Ydieresis Oslash -70\nKPX Ydieresis Otilde -70\nKPX Ydieresis a -90\nKPX Ydieresis aacute -90\nKPX Ydieresis abreve -90\nKPX Ydieresis acircumflex -90\nKPX Ydieresis adieresis -90\nKPX Ydieresis agrave -90\nKPX Ydieresis amacron -90\nKPX Ydieresis aogonek -90\nKPX Ydieresis aring -90\nKPX Ydieresis atilde -90\nKPX Ydieresis colon -50\nKPX Ydieresis comma -100\nKPX Ydieresis e -80\nKPX Ydieresis eacute -80\nKPX Ydieresis ecaron -80\nKPX Ydieresis ecircumflex -80\nKPX Ydieresis edieresis -80\nKPX Ydieresis edotaccent -80\nKPX Ydieresis egrave -80\nKPX Ydieresis emacron -80\nKPX Ydieresis eogonek -80\nKPX Ydieresis o -100\nKPX Ydieresis oacute -100\nKPX Ydieresis ocircumflex -100\nKPX Ydieresis odieresis -100\nKPX Ydieresis ograve -100\nKPX Ydieresis ohungarumlaut -100\nKPX Ydieresis omacron -100\nKPX Ydieresis oslash -100\nKPX Ydieresis otilde -100\nKPX Ydieresis period -100\nKPX Ydieresis semicolon -50\nKPX Ydieresis u -100\nKPX Ydieresis uacute -100\nKPX Ydieresis ucircumflex -100\nKPX Ydieresis udieresis -100\nKPX Ydieresis ugrave -100\nKPX Ydieresis uhungarumlaut -100\nKPX Ydieresis umacron -100\nKPX Ydieresis uogonek -100\nKPX Ydieresis uring -100\nKPX a g -10\nKPX a gbreve -10\nKPX a gcommaaccent -10\nKPX a v -15\nKPX a w -15\nKPX a y -20\nKPX a yacute -20\nKPX a ydieresis -20\nKPX aacute g -10\nKPX aacute gbreve -10\nKPX aacute gcommaaccent -10\nKPX aacute v -15\nKPX aacute w -15\nKPX aacute y -20\nKPX aacute yacute -20\nKPX aacute ydieresis -20\nKPX abreve g -10\nKPX abreve gbreve -10\nKPX abreve gcommaaccent -10\nKPX abreve v -15\nKPX abreve w -15\nKPX abreve y -20\nKPX abreve yacute -20\nKPX abreve ydieresis -20\nKPX acircumflex g -10\nKPX acircumflex gbreve -10\nKPX acircumflex gcommaaccent -10\nKPX acircumflex v -15\nKPX acircumflex w -15\nKPX acircumflex y -20\nKPX acircumflex yacute -20\nKPX acircumflex ydieresis -20\nKPX adieresis g -10\nKPX adieresis gbreve -10\nKPX adieresis gcommaaccent -10\nKPX adieresis v -15\nKPX adieresis w -15\nKPX adieresis y -20\nKPX adieresis yacute -20\nKPX adieresis ydieresis -20\nKPX agrave g -10\nKPX agrave gbreve -10\nKPX agrave gcommaaccent -10\nKPX agrave v -15\nKPX agrave w -15\nKPX agrave y -20\nKPX agrave yacute -20\nKPX agrave ydieresis -20\nKPX amacron g -10\nKPX amacron gbreve -10\nKPX amacron gcommaaccent -10\nKPX amacron v -15\nKPX amacron w -15\nKPX amacron y -20\nKPX amacron yacute -20\nKPX amacron ydieresis -20\nKPX aogonek g -10\nKPX aogonek gbreve -10\nKPX aogonek gcommaaccent -10\nKPX aogonek v -15\nKPX aogonek w -15\nKPX aogonek y -20\nKPX aogonek yacute -20\nKPX aogonek ydieresis -20\nKPX aring g -10\nKPX aring gbreve -10\nKPX aring gcommaaccent -10\nKPX aring v -15\nKPX aring w -15\nKPX aring y -20\nKPX aring yacute -20\nKPX aring ydieresis -20\nKPX atilde g -10\nKPX atilde gbreve -10\nKPX atilde gcommaaccent -10\nKPX atilde v -15\nKPX atilde w -15\nKPX atilde y -20\nKPX atilde yacute -20\nKPX atilde ydieresis -20\nKPX b l -10\nKPX b lacute -10\nKPX b lcommaaccent -10\nKPX b lslash -10\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX b v -20\nKPX b y -20\nKPX b yacute -20\nKPX b ydieresis -20\nKPX c h -10\nKPX c k -20\nKPX c kcommaaccent -20\nKPX c l -20\nKPX c lacute -20\nKPX c lcommaaccent -20\nKPX c lslash -20\nKPX c y -10\nKPX c yacute -10\nKPX c ydieresis -10\nKPX cacute h -10\nKPX cacute k -20\nKPX cacute kcommaaccent -20\nKPX cacute l -20\nKPX cacute lacute -20\nKPX cacute lcommaaccent -20\nKPX cacute lslash -20\nKPX cacute y -10\nKPX cacute yacute -10\nKPX cacute ydieresis -10\nKPX ccaron h -10\nKPX ccaron k -20\nKPX ccaron kcommaaccent -20\nKPX ccaron l -20\nKPX ccaron lacute -20\nKPX ccaron lcommaaccent -20\nKPX ccaron lslash -20\nKPX ccaron y -10\nKPX ccaron yacute -10\nKPX ccaron ydieresis -10\nKPX ccedilla h -10\nKPX ccedilla k -20\nKPX ccedilla kcommaaccent -20\nKPX ccedilla l -20\nKPX ccedilla lacute -20\nKPX ccedilla lcommaaccent -20\nKPX ccedilla lslash -20\nKPX ccedilla y -10\nKPX ccedilla yacute -10\nKPX ccedilla ydieresis -10\nKPX colon space -40\nKPX comma quotedblright -120\nKPX comma quoteright -120\nKPX comma space -40\nKPX d d -10\nKPX d dcroat -10\nKPX d v -15\nKPX d w -15\nKPX d y -15\nKPX d yacute -15\nKPX d ydieresis -15\nKPX dcroat d -10\nKPX dcroat dcroat -10\nKPX dcroat v -15\nKPX dcroat w -15\nKPX dcroat y -15\nKPX dcroat yacute -15\nKPX dcroat ydieresis -15\nKPX e comma 10\nKPX e period 20\nKPX e v -15\nKPX e w -15\nKPX e x -15\nKPX e y -15\nKPX e yacute -15\nKPX e ydieresis -15\nKPX eacute comma 10\nKPX eacute period 20\nKPX eacute v -15\nKPX eacute w -15\nKPX eacute x -15\nKPX eacute y -15\nKPX eacute yacute -15\nKPX eacute ydieresis -15\nKPX ecaron comma 10\nKPX ecaron period 20\nKPX ecaron v -15\nKPX ecaron w -15\nKPX ecaron x -15\nKPX ecaron y -15\nKPX ecaron yacute -15\nKPX ecaron ydieresis -15\nKPX ecircumflex comma 10\nKPX ecircumflex period 20\nKPX ecircumflex v -15\nKPX ecircumflex w -15\nKPX ecircumflex x -15\nKPX ecircumflex y -15\nKPX ecircumflex yacute -15\nKPX ecircumflex ydieresis -15\nKPX edieresis comma 10\nKPX edieresis period 20\nKPX edieresis v -15\nKPX edieresis w -15\nKPX edieresis x -15\nKPX edieresis y -15\nKPX edieresis yacute -15\nKPX edieresis ydieresis -15\nKPX edotaccent comma 10\nKPX edotaccent period 20\nKPX edotaccent v -15\nKPX edotaccent w -15\nKPX edotaccent x -15\nKPX edotaccent y -15\nKPX edotaccent yacute -15\nKPX edotaccent ydieresis -15\nKPX egrave comma 10\nKPX egrave period 20\nKPX egrave v -15\nKPX egrave w -15\nKPX egrave x -15\nKPX egrave y -15\nKPX egrave yacute -15\nKPX egrave ydieresis -15\nKPX emacron comma 10\nKPX emacron period 20\nKPX emacron v -15\nKPX emacron w -15\nKPX emacron x -15\nKPX emacron y -15\nKPX emacron yacute -15\nKPX emacron ydieresis -15\nKPX eogonek comma 10\nKPX eogonek period 20\nKPX eogonek v -15\nKPX eogonek w -15\nKPX eogonek x -15\nKPX eogonek y -15\nKPX eogonek yacute -15\nKPX eogonek ydieresis -15\nKPX f comma -10\nKPX f e -10\nKPX f eacute -10\nKPX f ecaron -10\nKPX f ecircumflex -10\nKPX f edieresis -10\nKPX f edotaccent -10\nKPX f egrave -10\nKPX f emacron -10\nKPX f eogonek -10\nKPX f o -20\nKPX f oacute -20\nKPX f ocircumflex -20\nKPX f odieresis -20\nKPX f ograve -20\nKPX f ohungarumlaut -20\nKPX f omacron -20\nKPX f oslash -20\nKPX f otilde -20\nKPX f period -10\nKPX f quotedblright 30\nKPX f quoteright 30\nKPX g e 10\nKPX g eacute 10\nKPX g ecaron 10\nKPX g ecircumflex 10\nKPX g edieresis 10\nKPX g edotaccent 10\nKPX g egrave 10\nKPX g emacron 10\nKPX g eogonek 10\nKPX g g -10\nKPX g gbreve -10\nKPX g gcommaaccent -10\nKPX gbreve e 10\nKPX gbreve eacute 10\nKPX gbreve ecaron 10\nKPX gbreve ecircumflex 10\nKPX gbreve edieresis 10\nKPX gbreve edotaccent 10\nKPX gbreve egrave 10\nKPX gbreve emacron 10\nKPX gbreve eogonek 10\nKPX gbreve g -10\nKPX gbreve gbreve -10\nKPX gbreve gcommaaccent -10\nKPX gcommaaccent e 10\nKPX gcommaaccent eacute 10\nKPX gcommaaccent ecaron 10\nKPX gcommaaccent ecircumflex 10\nKPX gcommaaccent edieresis 10\nKPX gcommaaccent edotaccent 10\nKPX gcommaaccent egrave 10\nKPX gcommaaccent emacron 10\nKPX gcommaaccent eogonek 10\nKPX gcommaaccent g -10\nKPX gcommaaccent gbreve -10\nKPX gcommaaccent gcommaaccent -10\nKPX h y -20\nKPX h yacute -20\nKPX h ydieresis -20\nKPX k o -15\nKPX k oacute -15\nKPX k ocircumflex -15\nKPX k odieresis -15\nKPX k ograve -15\nKPX k ohungarumlaut -15\nKPX k omacron -15\nKPX k oslash -15\nKPX k otilde -15\nKPX kcommaaccent o -15\nKPX kcommaaccent oacute -15\nKPX kcommaaccent ocircumflex -15\nKPX kcommaaccent odieresis -15\nKPX kcommaaccent ograve -15\nKPX kcommaaccent ohungarumlaut -15\nKPX kcommaaccent omacron -15\nKPX kcommaaccent oslash -15\nKPX kcommaaccent otilde -15\nKPX l w -15\nKPX l y -15\nKPX l yacute -15\nKPX l ydieresis -15\nKPX lacute w -15\nKPX lacute y -15\nKPX lacute yacute -15\nKPX lacute ydieresis -15\nKPX lcommaaccent w -15\nKPX lcommaaccent y -15\nKPX lcommaaccent yacute -15\nKPX lcommaaccent ydieresis -15\nKPX lslash w -15\nKPX lslash y -15\nKPX lslash yacute -15\nKPX lslash ydieresis -15\nKPX m u -20\nKPX m uacute -20\nKPX m ucircumflex -20\nKPX m udieresis -20\nKPX m ugrave -20\nKPX m uhungarumlaut -20\nKPX m umacron -20\nKPX m uogonek -20\nKPX m uring -20\nKPX m y -30\nKPX m yacute -30\nKPX m ydieresis -30\nKPX n u -10\nKPX n uacute -10\nKPX n ucircumflex -10\nKPX n udieresis -10\nKPX n ugrave -10\nKPX n uhungarumlaut -10\nKPX n umacron -10\nKPX n uogonek -10\nKPX n uring -10\nKPX n v -40\nKPX n y -20\nKPX n yacute -20\nKPX n ydieresis -20\nKPX nacute u -10\nKPX nacute uacute -10\nKPX nacute ucircumflex -10\nKPX nacute udieresis -10\nKPX nacute ugrave -10\nKPX nacute uhungarumlaut -10\nKPX nacute umacron -10\nKPX nacute uogonek -10\nKPX nacute uring -10\nKPX nacute v -40\nKPX nacute y -20\nKPX nacute yacute -20\nKPX nacute ydieresis -20\nKPX ncaron u -10\nKPX ncaron uacute -10\nKPX ncaron ucircumflex -10\nKPX ncaron udieresis -10\nKPX ncaron ugrave -10\nKPX ncaron uhungarumlaut -10\nKPX ncaron umacron -10\nKPX ncaron uogonek -10\nKPX ncaron uring -10\nKPX ncaron v -40\nKPX ncaron y -20\nKPX ncaron yacute -20\nKPX ncaron ydieresis -20\nKPX ncommaaccent u -10\nKPX ncommaaccent uacute -10\nKPX ncommaaccent ucircumflex -10\nKPX ncommaaccent udieresis -10\nKPX ncommaaccent ugrave -10\nKPX ncommaaccent uhungarumlaut -10\nKPX ncommaaccent umacron -10\nKPX ncommaaccent uogonek -10\nKPX ncommaaccent uring -10\nKPX ncommaaccent v -40\nKPX ncommaaccent y -20\nKPX ncommaaccent yacute -20\nKPX ncommaaccent ydieresis -20\nKPX ntilde u -10\nKPX ntilde uacute -10\nKPX ntilde ucircumflex -10\nKPX ntilde udieresis -10\nKPX ntilde ugrave -10\nKPX ntilde uhungarumlaut -10\nKPX ntilde umacron -10\nKPX ntilde uogonek -10\nKPX ntilde uring -10\nKPX ntilde v -40\nKPX ntilde y -20\nKPX ntilde yacute -20\nKPX ntilde ydieresis -20\nKPX o v -20\nKPX o w -15\nKPX o x -30\nKPX o y -20\nKPX o yacute -20\nKPX o ydieresis -20\nKPX oacute v -20\nKPX oacute w -15\nKPX oacute x -30\nKPX oacute y -20\nKPX oacute yacute -20\nKPX oacute ydieresis -20\nKPX ocircumflex v -20\nKPX ocircumflex w -15\nKPX ocircumflex x -30\nKPX ocircumflex y -20\nKPX ocircumflex yacute -20\nKPX ocircumflex ydieresis -20\nKPX odieresis v -20\nKPX odieresis w -15\nKPX odieresis x -30\nKPX odieresis y -20\nKPX odieresis yacute -20\nKPX odieresis ydieresis -20\nKPX ograve v -20\nKPX ograve w -15\nKPX ograve x -30\nKPX ograve y -20\nKPX ograve yacute -20\nKPX ograve ydieresis -20\nKPX ohungarumlaut v -20\nKPX ohungarumlaut w -15\nKPX ohungarumlaut x -30\nKPX ohungarumlaut y -20\nKPX ohungarumlaut yacute -20\nKPX ohungarumlaut ydieresis -20\nKPX omacron v -20\nKPX omacron w -15\nKPX omacron x -30\nKPX omacron y -20\nKPX omacron yacute -20\nKPX omacron ydieresis -20\nKPX oslash v -20\nKPX oslash w -15\nKPX oslash x -30\nKPX oslash y -20\nKPX oslash yacute -20\nKPX oslash ydieresis -20\nKPX otilde v -20\nKPX otilde w -15\nKPX otilde x -30\nKPX otilde y -20\nKPX otilde yacute -20\nKPX otilde ydieresis -20\nKPX p y -15\nKPX p yacute -15\nKPX p ydieresis -15\nKPX period quotedblright -120\nKPX period quoteright -120\nKPX period space -40\nKPX quotedblright space -80\nKPX quoteleft quoteleft -46\nKPX quoteright d -80\nKPX quoteright dcroat -80\nKPX quoteright l -20\nKPX quoteright lacute -20\nKPX quoteright lcommaaccent -20\nKPX quoteright lslash -20\nKPX quoteright quoteright -46\nKPX quoteright r -40\nKPX quoteright racute -40\nKPX quoteright rcaron -40\nKPX quoteright rcommaaccent -40\nKPX quoteright s -60\nKPX quoteright sacute -60\nKPX quoteright scaron -60\nKPX quoteright scedilla -60\nKPX quoteright scommaaccent -60\nKPX quoteright space -80\nKPX quoteright v -20\nKPX r c -20\nKPX r cacute -20\nKPX r ccaron -20\nKPX r ccedilla -20\nKPX r comma -60\nKPX r d -20\nKPX r dcroat -20\nKPX r g -15\nKPX r gbreve -15\nKPX r gcommaaccent -15\nKPX r hyphen -20\nKPX r o -20\nKPX r oacute -20\nKPX r ocircumflex -20\nKPX r odieresis -20\nKPX r ograve -20\nKPX r ohungarumlaut -20\nKPX r omacron -20\nKPX r oslash -20\nKPX r otilde -20\nKPX r period -60\nKPX r q -20\nKPX r s -15\nKPX r sacute -15\nKPX r scaron -15\nKPX r scedilla -15\nKPX r scommaaccent -15\nKPX r t 20\nKPX r tcommaaccent 20\nKPX r v 10\nKPX r y 10\nKPX r yacute 10\nKPX r ydieresis 10\nKPX racute c -20\nKPX racute cacute -20\nKPX racute ccaron -20\nKPX racute ccedilla -20\nKPX racute comma -60\nKPX racute d -20\nKPX racute dcroat -20\nKPX racute g -15\nKPX racute gbreve -15\nKPX racute gcommaaccent -15\nKPX racute hyphen -20\nKPX racute o -20\nKPX racute oacute -20\nKPX racute ocircumflex -20\nKPX racute odieresis -20\nKPX racute ograve -20\nKPX racute ohungarumlaut -20\nKPX racute omacron -20\nKPX racute oslash -20\nKPX racute otilde -20\nKPX racute period -60\nKPX racute q -20\nKPX racute s -15\nKPX racute sacute -15\nKPX racute scaron -15\nKPX racute scedilla -15\nKPX racute scommaaccent -15\nKPX racute t 20\nKPX racute tcommaaccent 20\nKPX racute v 10\nKPX racute y 10\nKPX racute yacute 10\nKPX racute ydieresis 10\nKPX rcaron c -20\nKPX rcaron cacute -20\nKPX rcaron ccaron -20\nKPX rcaron ccedilla -20\nKPX rcaron comma -60\nKPX rcaron d -20\nKPX rcaron dcroat -20\nKPX rcaron g -15\nKPX rcaron gbreve -15\nKPX rcaron gcommaaccent -15\nKPX rcaron hyphen -20\nKPX rcaron o -20\nKPX rcaron oacute -20\nKPX rcaron ocircumflex -20\nKPX rcaron odieresis -20\nKPX rcaron ograve -20\nKPX rcaron ohungarumlaut -20\nKPX rcaron omacron -20\nKPX rcaron oslash -20\nKPX rcaron otilde -20\nKPX rcaron period -60\nKPX rcaron q -20\nKPX rcaron s -15\nKPX rcaron sacute -15\nKPX rcaron scaron -15\nKPX rcaron scedilla -15\nKPX rcaron scommaaccent -15\nKPX rcaron t 20\nKPX rcaron tcommaaccent 20\nKPX rcaron v 10\nKPX rcaron y 10\nKPX rcaron yacute 10\nKPX rcaron ydieresis 10\nKPX rcommaaccent c -20\nKPX rcommaaccent cacute -20\nKPX rcommaaccent ccaron -20\nKPX rcommaaccent ccedilla -20\nKPX rcommaaccent comma -60\nKPX rcommaaccent d -20\nKPX rcommaaccent dcroat -20\nKPX rcommaaccent g -15\nKPX rcommaaccent gbreve -15\nKPX rcommaaccent gcommaaccent -15\nKPX rcommaaccent hyphen -20\nKPX rcommaaccent o -20\nKPX rcommaaccent oacute -20\nKPX rcommaaccent ocircumflex -20\nKPX rcommaaccent odieresis -20\nKPX rcommaaccent ograve -20\nKPX rcommaaccent ohungarumlaut -20\nKPX rcommaaccent omacron -20\nKPX rcommaaccent oslash -20\nKPX rcommaaccent otilde -20\nKPX rcommaaccent period -60\nKPX rcommaaccent q -20\nKPX rcommaaccent s -15\nKPX rcommaaccent sacute -15\nKPX rcommaaccent scaron -15\nKPX rcommaaccent scedilla -15\nKPX rcommaaccent scommaaccent -15\nKPX rcommaaccent t 20\nKPX rcommaaccent tcommaaccent 20\nKPX rcommaaccent v 10\nKPX rcommaaccent y 10\nKPX rcommaaccent yacute 10\nKPX rcommaaccent ydieresis 10\nKPX s w -15\nKPX sacute w -15\nKPX scaron w -15\nKPX scedilla w -15\nKPX scommaaccent w -15\nKPX semicolon space -40\nKPX space T -100\nKPX space Tcaron -100\nKPX space Tcommaaccent -100\nKPX space V -80\nKPX space W -80\nKPX space Y -120\nKPX space Yacute -120\nKPX space Ydieresis -120\nKPX space quotedblleft -80\nKPX space quoteleft -60\nKPX v a -20\nKPX v aacute -20\nKPX v abreve -20\nKPX v acircumflex -20\nKPX v adieresis -20\nKPX v agrave -20\nKPX v amacron -20\nKPX v aogonek -20\nKPX v aring -20\nKPX v atilde -20\nKPX v comma -80\nKPX v o -30\nKPX v oacute -30\nKPX v ocircumflex -30\nKPX v odieresis -30\nKPX v ograve -30\nKPX v ohungarumlaut -30\nKPX v omacron -30\nKPX v oslash -30\nKPX v otilde -30\nKPX v period -80\nKPX w comma -40\nKPX w o -20\nKPX w oacute -20\nKPX w ocircumflex -20\nKPX w odieresis -20\nKPX w ograve -20\nKPX w ohungarumlaut -20\nKPX w omacron -20\nKPX w oslash -20\nKPX w otilde -20\nKPX w period -40\nKPX x e -10\nKPX x eacute -10\nKPX x ecaron -10\nKPX x ecircumflex -10\nKPX x edieresis -10\nKPX x edotaccent -10\nKPX x egrave -10\nKPX x emacron -10\nKPX x eogonek -10\nKPX y a -30\nKPX y aacute -30\nKPX y abreve -30\nKPX y acircumflex -30\nKPX y adieresis -30\nKPX y agrave -30\nKPX y amacron -30\nKPX y aogonek -30\nKPX y aring -30\nKPX y atilde -30\nKPX y comma -80\nKPX y e -10\nKPX y eacute -10\nKPX y ecaron -10\nKPX y ecircumflex -10\nKPX y edieresis -10\nKPX y edotaccent -10\nKPX y egrave -10\nKPX y emacron -10\nKPX y eogonek -10\nKPX y o -25\nKPX y oacute -25\nKPX y ocircumflex -25\nKPX y odieresis -25\nKPX y ograve -25\nKPX y ohungarumlaut -25\nKPX y omacron -25\nKPX y oslash -25\nKPX y otilde -25\nKPX y period -80\nKPX yacute a -30\nKPX yacute aacute -30\nKPX yacute abreve -30\nKPX yacute acircumflex -30\nKPX yacute adieresis -30\nKPX yacute agrave -30\nKPX yacute amacron -30\nKPX yacute aogonek -30\nKPX yacute aring -30\nKPX yacute atilde -30\nKPX yacute comma -80\nKPX yacute e -10\nKPX yacute eacute -10\nKPX yacute ecaron -10\nKPX yacute ecircumflex -10\nKPX yacute edieresis -10\nKPX yacute edotaccent -10\nKPX yacute egrave -10\nKPX yacute emacron -10\nKPX yacute eogonek -10\nKPX yacute o -25\nKPX yacute oacute -25\nKPX yacute ocircumflex -25\nKPX yacute odieresis -25\nKPX yacute ograve -25\nKPX yacute ohungarumlaut -25\nKPX yacute omacron -25\nKPX yacute oslash -25\nKPX yacute otilde -25\nKPX yacute period -80\nKPX ydieresis a -30\nKPX ydieresis aacute -30\nKPX ydieresis abreve -30\nKPX ydieresis acircumflex -30\nKPX ydieresis adieresis -30\nKPX ydieresis agrave -30\nKPX ydieresis amacron -30\nKPX ydieresis aogonek -30\nKPX ydieresis aring -30\nKPX ydieresis atilde -30\nKPX ydieresis comma -80\nKPX ydieresis e -10\nKPX ydieresis eacute -10\nKPX ydieresis ecaron -10\nKPX ydieresis ecircumflex -10\nKPX ydieresis edieresis -10\nKPX ydieresis edotaccent -10\nKPX ydieresis egrave -10\nKPX ydieresis emacron -10\nKPX ydieresis eogonek -10\nKPX ydieresis o -25\nKPX ydieresis oacute -25\nKPX ydieresis ocircumflex -25\nKPX ydieresis odieresis -25\nKPX ydieresis ograve -25\nKPX ydieresis ohungarumlaut -25\nKPX ydieresis omacron -25\nKPX ydieresis oslash -25\nKPX ydieresis otilde -25\nKPX ydieresis period -80\nKPX z e 10\nKPX z eacute 10\nKPX z ecaron 10\nKPX z ecircumflex 10\nKPX z edieresis 10\nKPX z edotaccent 10\nKPX z egrave 10\nKPX z emacron 10\nKPX z eogonek 10\nKPX zacute e 10\nKPX zacute eacute 10\nKPX zacute ecaron 10\nKPX zacute ecircumflex 10\nKPX zacute edieresis 10\nKPX zacute edotaccent 10\nKPX zacute egrave 10\nKPX zacute emacron 10\nKPX zacute eogonek 10\nKPX zcaron e 10\nKPX zcaron eacute 10\nKPX zcaron ecaron 10\nKPX zcaron ecircumflex 10\nKPX zcaron edieresis 10\nKPX zcaron edotaccent 10\nKPX zcaron egrave 10\nKPX zcaron emacron 10\nKPX zcaron eogonek 10\nKPX zdotaccent e 10\nKPX zdotaccent eacute 10\nKPX zdotaccent ecaron 10\nKPX zdotaccent ecircumflex 10\nKPX zdotaccent edieresis 10\nKPX zdotaccent edotaccent 10\nKPX zdotaccent egrave 10\nKPX zdotaccent emacron 10\nKPX zdotaccent eogonek 10\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 75
      "Times-Roman": function() {                                                                                      // 76
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:49:17 1997\nComment UniqueID 43068\nComment VMusage 43909 54934\nFontName Times-Roman\nFullName Times Roman\nFamilyName Times\nWeight Roman\nItalicAngle 0\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -168 -218 1000 898 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 662\nXHeight 450\nAscender 683\nDescender -217\nStdHW 28\nStdVW 84\nStartCharMetrics 315\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 333 ; N exclam ; B 130 -9 238 676 ;\nC 34 ; WX 408 ; N quotedbl ; B 77 431 331 676 ;\nC 35 ; WX 500 ; N numbersign ; B 5 0 496 662 ;\nC 36 ; WX 500 ; N dollar ; B 44 -87 457 727 ;\nC 37 ; WX 833 ; N percent ; B 61 -13 772 676 ;\nC 38 ; WX 778 ; N ampersand ; B 42 -13 750 676 ;\nC 39 ; WX 333 ; N quoteright ; B 79 433 218 676 ;\nC 40 ; WX 333 ; N parenleft ; B 48 -177 304 676 ;\nC 41 ; WX 333 ; N parenright ; B 29 -177 285 676 ;\nC 42 ; WX 500 ; N asterisk ; B 69 265 432 676 ;\nC 43 ; WX 564 ; N plus ; B 30 0 534 506 ;\nC 44 ; WX 250 ; N comma ; B 56 -141 195 102 ;\nC 45 ; WX 333 ; N hyphen ; B 39 194 285 257 ;\nC 46 ; WX 250 ; N period ; B 70 -11 181 100 ;\nC 47 ; WX 278 ; N slash ; B -9 -14 287 676 ;\nC 48 ; WX 500 ; N zero ; B 24 -14 476 676 ;\nC 49 ; WX 500 ; N one ; B 111 0 394 676 ;\nC 50 ; WX 500 ; N two ; B 30 0 475 676 ;\nC 51 ; WX 500 ; N three ; B 43 -14 431 676 ;\nC 52 ; WX 500 ; N four ; B 12 0 472 676 ;\nC 53 ; WX 500 ; N five ; B 32 -14 438 688 ;\nC 54 ; WX 500 ; N six ; B 34 -14 468 684 ;\nC 55 ; WX 500 ; N seven ; B 20 -8 449 662 ;\nC 56 ; WX 500 ; N eight ; B 56 -14 445 676 ;\nC 57 ; WX 500 ; N nine ; B 30 -22 459 676 ;\nC 58 ; WX 278 ; N colon ; B 81 -11 192 459 ;\nC 59 ; WX 278 ; N semicolon ; B 80 -141 219 459 ;\nC 60 ; WX 564 ; N less ; B 28 -8 536 514 ;\nC 61 ; WX 564 ; N equal ; B 30 120 534 386 ;\nC 62 ; WX 564 ; N greater ; B 28 -8 536 514 ;\nC 63 ; WX 444 ; N question ; B 68 -8 414 676 ;\nC 64 ; WX 921 ; N at ; B 116 -14 809 676 ;\nC 65 ; WX 722 ; N A ; B 15 0 706 674 ;\nC 66 ; WX 667 ; N B ; B 17 0 593 662 ;\nC 67 ; WX 667 ; N C ; B 28 -14 633 676 ;\nC 68 ; WX 722 ; N D ; B 16 0 685 662 ;\nC 69 ; WX 611 ; N E ; B 12 0 597 662 ;\nC 70 ; WX 556 ; N F ; B 12 0 546 662 ;\nC 71 ; WX 722 ; N G ; B 32 -14 709 676 ;\nC 72 ; WX 722 ; N H ; B 19 0 702 662 ;\nC 73 ; WX 333 ; N I ; B 18 0 315 662 ;\nC 74 ; WX 389 ; N J ; B 10 -14 370 662 ;\nC 75 ; WX 722 ; N K ; B 34 0 723 662 ;\nC 76 ; WX 611 ; N L ; B 12 0 598 662 ;\nC 77 ; WX 889 ; N M ; B 12 0 863 662 ;\nC 78 ; WX 722 ; N N ; B 12 -11 707 662 ;\nC 79 ; WX 722 ; N O ; B 34 -14 688 676 ;\nC 80 ; WX 556 ; N P ; B 16 0 542 662 ;\nC 81 ; WX 722 ; N Q ; B 34 -178 701 676 ;\nC 82 ; WX 667 ; N R ; B 17 0 659 662 ;\nC 83 ; WX 556 ; N S ; B 42 -14 491 676 ;\nC 84 ; WX 611 ; N T ; B 17 0 593 662 ;\nC 85 ; WX 722 ; N U ; B 14 -14 705 662 ;\nC 86 ; WX 722 ; N V ; B 16 -11 697 662 ;\nC 87 ; WX 944 ; N W ; B 5 -11 932 662 ;\nC 88 ; WX 722 ; N X ; B 10 0 704 662 ;\nC 89 ; WX 722 ; N Y ; B 22 0 703 662 ;\nC 90 ; WX 611 ; N Z ; B 9 0 597 662 ;\nC 91 ; WX 333 ; N bracketleft ; B 88 -156 299 662 ;\nC 92 ; WX 278 ; N backslash ; B -9 -14 287 676 ;\nC 93 ; WX 333 ; N bracketright ; B 34 -156 245 662 ;\nC 94 ; WX 469 ; N asciicircum ; B 24 297 446 662 ;\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\nC 96 ; WX 333 ; N quoteleft ; B 115 433 254 676 ;\nC 97 ; WX 444 ; N a ; B 37 -10 442 460 ;\nC 98 ; WX 500 ; N b ; B 3 -10 468 683 ;\nC 99 ; WX 444 ; N c ; B 25 -10 412 460 ;\nC 100 ; WX 500 ; N d ; B 27 -10 491 683 ;\nC 101 ; WX 444 ; N e ; B 25 -10 424 460 ;\nC 102 ; WX 333 ; N f ; B 20 0 383 683 ; L i fi ; L l fl ;\nC 103 ; WX 500 ; N g ; B 28 -218 470 460 ;\nC 104 ; WX 500 ; N h ; B 9 0 487 683 ;\nC 105 ; WX 278 ; N i ; B 16 0 253 683 ;\nC 106 ; WX 278 ; N j ; B -70 -218 194 683 ;\nC 107 ; WX 500 ; N k ; B 7 0 505 683 ;\nC 108 ; WX 278 ; N l ; B 19 0 257 683 ;\nC 109 ; WX 778 ; N m ; B 16 0 775 460 ;\nC 110 ; WX 500 ; N n ; B 16 0 485 460 ;\nC 111 ; WX 500 ; N o ; B 29 -10 470 460 ;\nC 112 ; WX 500 ; N p ; B 5 -217 470 460 ;\nC 113 ; WX 500 ; N q ; B 24 -217 488 460 ;\nC 114 ; WX 333 ; N r ; B 5 0 335 460 ;\nC 115 ; WX 389 ; N s ; B 51 -10 348 460 ;\nC 116 ; WX 278 ; N t ; B 13 -10 279 579 ;\nC 117 ; WX 500 ; N u ; B 9 -10 479 450 ;\nC 118 ; WX 500 ; N v ; B 19 -14 477 450 ;\nC 119 ; WX 722 ; N w ; B 21 -14 694 450 ;\nC 120 ; WX 500 ; N x ; B 17 0 479 450 ;\nC 121 ; WX 500 ; N y ; B 14 -218 475 450 ;\nC 122 ; WX 444 ; N z ; B 27 0 418 450 ;\nC 123 ; WX 480 ; N braceleft ; B 100 -181 350 680 ;\nC 124 ; WX 200 ; N bar ; B 67 -218 133 782 ;\nC 125 ; WX 480 ; N braceright ; B 130 -181 380 680 ;\nC 126 ; WX 541 ; N asciitilde ; B 40 183 502 323 ;\nC 161 ; WX 333 ; N exclamdown ; B 97 -218 205 467 ;\nC 162 ; WX 500 ; N cent ; B 53 -138 448 579 ;\nC 163 ; WX 500 ; N sterling ; B 12 -8 490 676 ;\nC 164 ; WX 167 ; N fraction ; B -168 -14 331 676 ;\nC 165 ; WX 500 ; N yen ; B -53 0 512 662 ;\nC 166 ; WX 500 ; N florin ; B 7 -189 490 676 ;\nC 167 ; WX 500 ; N section ; B 70 -148 426 676 ;\nC 168 ; WX 500 ; N currency ; B -22 58 522 602 ;\nC 169 ; WX 180 ; N quotesingle ; B 48 431 133 676 ;\nC 170 ; WX 444 ; N quotedblleft ; B 43 433 414 676 ;\nC 171 ; WX 500 ; N guillemotleft ; B 42 33 456 416 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 63 33 285 416 ;\nC 173 ; WX 333 ; N guilsinglright ; B 48 33 270 416 ;\nC 174 ; WX 556 ; N fi ; B 31 0 521 683 ;\nC 175 ; WX 556 ; N fl ; B 32 0 521 683 ;\nC 177 ; WX 500 ; N endash ; B 0 201 500 250 ;\nC 178 ; WX 500 ; N dagger ; B 59 -149 442 676 ;\nC 179 ; WX 500 ; N daggerdbl ; B 58 -153 442 676 ;\nC 180 ; WX 250 ; N periodcentered ; B 70 199 181 310 ;\nC 182 ; WX 453 ; N paragraph ; B -22 -154 450 662 ;\nC 183 ; WX 350 ; N bullet ; B 40 196 310 466 ;\nC 184 ; WX 333 ; N quotesinglbase ; B 79 -141 218 102 ;\nC 185 ; WX 444 ; N quotedblbase ; B 45 -141 416 102 ;\nC 186 ; WX 444 ; N quotedblright ; B 30 433 401 676 ;\nC 187 ; WX 500 ; N guillemotright ; B 44 33 458 416 ;\nC 188 ; WX 1000 ; N ellipsis ; B 111 -11 888 100 ;\nC 189 ; WX 1000 ; N perthousand ; B 7 -19 994 706 ;\nC 191 ; WX 444 ; N questiondown ; B 30 -218 376 466 ;\nC 193 ; WX 333 ; N grave ; B 19 507 242 678 ;\nC 194 ; WX 333 ; N acute ; B 93 507 317 678 ;\nC 195 ; WX 333 ; N circumflex ; B 11 507 322 674 ;\nC 196 ; WX 333 ; N tilde ; B 1 532 331 638 ;\nC 197 ; WX 333 ; N macron ; B 11 547 322 601 ;\nC 198 ; WX 333 ; N breve ; B 26 507 307 664 ;\nC 199 ; WX 333 ; N dotaccent ; B 118 581 216 681 ;\nC 200 ; WX 333 ; N dieresis ; B 18 581 315 681 ;\nC 202 ; WX 333 ; N ring ; B 67 512 266 711 ;\nC 203 ; WX 333 ; N cedilla ; B 52 -215 261 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B -3 507 377 678 ;\nC 206 ; WX 333 ; N ogonek ; B 62 -165 243 0 ;\nC 207 ; WX 333 ; N caron ; B 11 507 322 674 ;\nC 208 ; WX 1000 ; N emdash ; B 0 201 1000 250 ;\nC 225 ; WX 889 ; N AE ; B 0 0 863 662 ;\nC 227 ; WX 276 ; N ordfeminine ; B 4 394 270 676 ;\nC 232 ; WX 611 ; N Lslash ; B 12 0 598 662 ;\nC 233 ; WX 722 ; N Oslash ; B 34 -80 688 734 ;\nC 234 ; WX 889 ; N OE ; B 30 -6 885 668 ;\nC 235 ; WX 310 ; N ordmasculine ; B 6 394 304 676 ;\nC 241 ; WX 667 ; N ae ; B 38 -10 632 460 ;\nC 245 ; WX 278 ; N dotlessi ; B 16 0 253 460 ;\nC 248 ; WX 278 ; N lslash ; B 19 0 259 683 ;\nC 249 ; WX 500 ; N oslash ; B 29 -112 470 551 ;\nC 250 ; WX 722 ; N oe ; B 30 -10 690 460 ;\nC 251 ; WX 500 ; N germandbls ; B 12 -9 468 683 ;\nC -1 ; WX 333 ; N Idieresis ; B 18 0 315 835 ;\nC -1 ; WX 444 ; N eacute ; B 25 -10 424 678 ;\nC -1 ; WX 444 ; N abreve ; B 37 -10 442 664 ;\nC -1 ; WX 500 ; N uhungarumlaut ; B 9 -10 501 678 ;\nC -1 ; WX 444 ; N ecaron ; B 25 -10 424 674 ;\nC -1 ; WX 722 ; N Ydieresis ; B 22 0 703 835 ;\nC -1 ; WX 564 ; N divide ; B 30 -10 534 516 ;\nC -1 ; WX 722 ; N Yacute ; B 22 0 703 890 ;\nC -1 ; WX 722 ; N Acircumflex ; B 15 0 706 886 ;\nC -1 ; WX 444 ; N aacute ; B 37 -10 442 678 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 14 -14 705 886 ;\nC -1 ; WX 500 ; N yacute ; B 14 -218 475 678 ;\nC -1 ; WX 389 ; N scommaaccent ; B 51 -218 348 460 ;\nC -1 ; WX 444 ; N ecircumflex ; B 25 -10 424 674 ;\nC -1 ; WX 722 ; N Uring ; B 14 -14 705 898 ;\nC -1 ; WX 722 ; N Udieresis ; B 14 -14 705 835 ;\nC -1 ; WX 444 ; N aogonek ; B 37 -165 469 460 ;\nC -1 ; WX 722 ; N Uacute ; B 14 -14 705 890 ;\nC -1 ; WX 500 ; N uogonek ; B 9 -155 487 450 ;\nC -1 ; WX 611 ; N Edieresis ; B 12 0 597 835 ;\nC -1 ; WX 722 ; N Dcroat ; B 16 0 685 662 ;\nC -1 ; WX 250 ; N commaaccent ; B 59 -218 184 -50 ;\nC -1 ; WX 760 ; N copyright ; B 38 -14 722 676 ;\nC -1 ; WX 611 ; N Emacron ; B 12 0 597 813 ;\nC -1 ; WX 444 ; N ccaron ; B 25 -10 412 674 ;\nC -1 ; WX 444 ; N aring ; B 37 -10 442 711 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B 12 -198 707 662 ;\nC -1 ; WX 278 ; N lacute ; B 19 0 290 890 ;\nC -1 ; WX 444 ; N agrave ; B 37 -10 442 678 ;\nC -1 ; WX 611 ; N Tcommaaccent ; B 17 -218 593 662 ;\nC -1 ; WX 667 ; N Cacute ; B 28 -14 633 890 ;\nC -1 ; WX 444 ; N atilde ; B 37 -10 442 638 ;\nC -1 ; WX 611 ; N Edotaccent ; B 12 0 597 835 ;\nC -1 ; WX 389 ; N scaron ; B 39 -10 350 674 ;\nC -1 ; WX 389 ; N scedilla ; B 51 -215 348 460 ;\nC -1 ; WX 278 ; N iacute ; B 16 0 290 678 ;\nC -1 ; WX 471 ; N lozenge ; B 13 0 459 724 ;\nC -1 ; WX 667 ; N Rcaron ; B 17 0 659 886 ;\nC -1 ; WX 722 ; N Gcommaaccent ; B 32 -218 709 676 ;\nC -1 ; WX 500 ; N ucircumflex ; B 9 -10 479 674 ;\nC -1 ; WX 444 ; N acircumflex ; B 37 -10 442 674 ;\nC -1 ; WX 722 ; N Amacron ; B 15 0 706 813 ;\nC -1 ; WX 333 ; N rcaron ; B 5 0 335 674 ;\nC -1 ; WX 444 ; N ccedilla ; B 25 -215 412 460 ;\nC -1 ; WX 611 ; N Zdotaccent ; B 9 0 597 835 ;\nC -1 ; WX 556 ; N Thorn ; B 16 0 542 662 ;\nC -1 ; WX 722 ; N Omacron ; B 34 -14 688 813 ;\nC -1 ; WX 667 ; N Racute ; B 17 0 659 890 ;\nC -1 ; WX 556 ; N Sacute ; B 42 -14 491 890 ;\nC -1 ; WX 588 ; N dcaron ; B 27 -10 589 695 ;\nC -1 ; WX 722 ; N Umacron ; B 14 -14 705 813 ;\nC -1 ; WX 500 ; N uring ; B 9 -10 479 711 ;\nC -1 ; WX 300 ; N threesuperior ; B 15 262 291 676 ;\nC -1 ; WX 722 ; N Ograve ; B 34 -14 688 890 ;\nC -1 ; WX 722 ; N Agrave ; B 15 0 706 890 ;\nC -1 ; WX 722 ; N Abreve ; B 15 0 706 876 ;\nC -1 ; WX 564 ; N multiply ; B 38 8 527 497 ;\nC -1 ; WX 500 ; N uacute ; B 9 -10 479 678 ;\nC -1 ; WX 611 ; N Tcaron ; B 17 0 593 886 ;\nC -1 ; WX 476 ; N partialdiff ; B 17 -38 459 710 ;\nC -1 ; WX 500 ; N ydieresis ; B 14 -218 475 623 ;\nC -1 ; WX 722 ; N Nacute ; B 12 -11 707 890 ;\nC -1 ; WX 278 ; N icircumflex ; B -16 0 295 674 ;\nC -1 ; WX 611 ; N Ecircumflex ; B 12 0 597 886 ;\nC -1 ; WX 444 ; N adieresis ; B 37 -10 442 623 ;\nC -1 ; WX 444 ; N edieresis ; B 25 -10 424 623 ;\nC -1 ; WX 444 ; N cacute ; B 25 -10 413 678 ;\nC -1 ; WX 500 ; N nacute ; B 16 0 485 678 ;\nC -1 ; WX 500 ; N umacron ; B 9 -10 479 601 ;\nC -1 ; WX 722 ; N Ncaron ; B 12 -11 707 886 ;\nC -1 ; WX 333 ; N Iacute ; B 18 0 317 890 ;\nC -1 ; WX 564 ; N plusminus ; B 30 0 534 506 ;\nC -1 ; WX 200 ; N brokenbar ; B 67 -143 133 707 ;\nC -1 ; WX 760 ; N registered ; B 38 -14 722 676 ;\nC -1 ; WX 722 ; N Gbreve ; B 32 -14 709 876 ;\nC -1 ; WX 333 ; N Idotaccent ; B 18 0 315 835 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 585 706 ;\nC -1 ; WX 611 ; N Egrave ; B 12 0 597 890 ;\nC -1 ; WX 333 ; N racute ; B 5 0 335 678 ;\nC -1 ; WX 500 ; N omacron ; B 29 -10 470 601 ;\nC -1 ; WX 611 ; N Zacute ; B 9 0 597 890 ;\nC -1 ; WX 611 ; N Zcaron ; B 9 0 597 886 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 666 ;\nC -1 ; WX 722 ; N Eth ; B 16 0 685 662 ;\nC -1 ; WX 667 ; N Ccedilla ; B 28 -215 633 676 ;\nC -1 ; WX 278 ; N lcommaaccent ; B 19 -218 257 683 ;\nC -1 ; WX 326 ; N tcaron ; B 13 -10 318 722 ;\nC -1 ; WX 444 ; N eogonek ; B 25 -165 424 460 ;\nC -1 ; WX 722 ; N Uogonek ; B 14 -165 705 662 ;\nC -1 ; WX 722 ; N Aacute ; B 15 0 706 890 ;\nC -1 ; WX 722 ; N Adieresis ; B 15 0 706 835 ;\nC -1 ; WX 444 ; N egrave ; B 25 -10 424 678 ;\nC -1 ; WX 444 ; N zacute ; B 27 0 418 678 ;\nC -1 ; WX 278 ; N iogonek ; B 16 -165 265 683 ;\nC -1 ; WX 722 ; N Oacute ; B 34 -14 688 890 ;\nC -1 ; WX 500 ; N oacute ; B 29 -10 470 678 ;\nC -1 ; WX 444 ; N amacron ; B 37 -10 442 601 ;\nC -1 ; WX 389 ; N sacute ; B 51 -10 348 678 ;\nC -1 ; WX 278 ; N idieresis ; B -9 0 288 623 ;\nC -1 ; WX 722 ; N Ocircumflex ; B 34 -14 688 886 ;\nC -1 ; WX 722 ; N Ugrave ; B 14 -14 705 890 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 500 ; N thorn ; B 5 -217 470 683 ;\nC -1 ; WX 300 ; N twosuperior ; B 1 270 296 676 ;\nC -1 ; WX 722 ; N Odieresis ; B 34 -14 688 835 ;\nC -1 ; WX 500 ; N mu ; B 36 -218 512 450 ;\nC -1 ; WX 278 ; N igrave ; B -8 0 253 678 ;\nC -1 ; WX 500 ; N ohungarumlaut ; B 29 -10 491 678 ;\nC -1 ; WX 611 ; N Eogonek ; B 12 -165 597 662 ;\nC -1 ; WX 500 ; N dcroat ; B 27 -10 500 683 ;\nC -1 ; WX 750 ; N threequarters ; B 15 -14 718 676 ;\nC -1 ; WX 556 ; N Scedilla ; B 42 -215 491 676 ;\nC -1 ; WX 344 ; N lcaron ; B 19 0 347 695 ;\nC -1 ; WX 722 ; N Kcommaaccent ; B 34 -198 723 662 ;\nC -1 ; WX 611 ; N Lacute ; B 12 0 598 890 ;\nC -1 ; WX 980 ; N trademark ; B 30 256 957 662 ;\nC -1 ; WX 444 ; N edotaccent ; B 25 -10 424 623 ;\nC -1 ; WX 333 ; N Igrave ; B 18 0 315 890 ;\nC -1 ; WX 333 ; N Imacron ; B 11 0 322 813 ;\nC -1 ; WX 611 ; N Lcaron ; B 12 0 598 676 ;\nC -1 ; WX 750 ; N onehalf ; B 31 -14 746 676 ;\nC -1 ; WX 549 ; N lessequal ; B 26 0 523 666 ;\nC -1 ; WX 500 ; N ocircumflex ; B 29 -10 470 674 ;\nC -1 ; WX 500 ; N ntilde ; B 16 0 485 638 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 14 -14 705 890 ;\nC -1 ; WX 611 ; N Eacute ; B 12 0 597 890 ;\nC -1 ; WX 444 ; N emacron ; B 25 -10 424 601 ;\nC -1 ; WX 500 ; N gbreve ; B 28 -218 470 664 ;\nC -1 ; WX 750 ; N onequarter ; B 37 -14 718 676 ;\nC -1 ; WX 556 ; N Scaron ; B 42 -14 491 886 ;\nC -1 ; WX 556 ; N Scommaaccent ; B 42 -218 491 676 ;\nC -1 ; WX 722 ; N Ohungarumlaut ; B 34 -14 688 890 ;\nC -1 ; WX 400 ; N degree ; B 57 390 343 676 ;\nC -1 ; WX 500 ; N ograve ; B 29 -10 470 678 ;\nC -1 ; WX 667 ; N Ccaron ; B 28 -14 633 886 ;\nC -1 ; WX 500 ; N ugrave ; B 9 -10 479 678 ;\nC -1 ; WX 453 ; N radical ; B 2 -60 452 768 ;\nC -1 ; WX 722 ; N Dcaron ; B 16 0 685 886 ;\nC -1 ; WX 333 ; N rcommaaccent ; B 5 -218 335 460 ;\nC -1 ; WX 722 ; N Ntilde ; B 12 -11 707 850 ;\nC -1 ; WX 500 ; N otilde ; B 29 -10 470 638 ;\nC -1 ; WX 667 ; N Rcommaaccent ; B 17 -198 659 662 ;\nC -1 ; WX 611 ; N Lcommaaccent ; B 12 -218 598 662 ;\nC -1 ; WX 722 ; N Atilde ; B 15 0 706 850 ;\nC -1 ; WX 722 ; N Aogonek ; B 15 -165 738 674 ;\nC -1 ; WX 722 ; N Aring ; B 15 0 706 898 ;\nC -1 ; WX 722 ; N Otilde ; B 34 -14 688 850 ;\nC -1 ; WX 444 ; N zdotaccent ; B 27 0 418 623 ;\nC -1 ; WX 611 ; N Ecaron ; B 12 0 597 886 ;\nC -1 ; WX 333 ; N Iogonek ; B 18 -165 315 662 ;\nC -1 ; WX 500 ; N kcommaaccent ; B 7 -218 505 683 ;\nC -1 ; WX 564 ; N minus ; B 30 220 534 286 ;\nC -1 ; WX 333 ; N Icircumflex ; B 11 0 322 886 ;\nC -1 ; WX 500 ; N ncaron ; B 16 0 485 674 ;\nC -1 ; WX 278 ; N tcommaaccent ; B 13 -218 279 579 ;\nC -1 ; WX 564 ; N logicalnot ; B 30 108 534 386 ;\nC -1 ; WX 500 ; N odieresis ; B 29 -10 470 623 ;\nC -1 ; WX 500 ; N udieresis ; B 9 -10 479 623 ;\nC -1 ; WX 549 ; N notequal ; B 12 -31 537 547 ;\nC -1 ; WX 500 ; N gcommaaccent ; B 28 -218 470 749 ;\nC -1 ; WX 500 ; N eth ; B 29 -10 471 686 ;\nC -1 ; WX 444 ; N zcaron ; B 27 0 418 674 ;\nC -1 ; WX 500 ; N ncommaaccent ; B 16 -218 485 460 ;\nC -1 ; WX 300 ; N onesuperior ; B 57 270 248 676 ;\nC -1 ; WX 278 ; N imacron ; B 6 0 271 601 ;\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2073\nKPX A C -40\nKPX A Cacute -40\nKPX A Ccaron -40\nKPX A Ccedilla -40\nKPX A G -40\nKPX A Gbreve -40\nKPX A Gcommaaccent -40\nKPX A O -55\nKPX A Oacute -55\nKPX A Ocircumflex -55\nKPX A Odieresis -55\nKPX A Ograve -55\nKPX A Ohungarumlaut -55\nKPX A Omacron -55\nKPX A Oslash -55\nKPX A Otilde -55\nKPX A Q -55\nKPX A T -111\nKPX A Tcaron -111\nKPX A Tcommaaccent -111\nKPX A U -55\nKPX A Uacute -55\nKPX A Ucircumflex -55\nKPX A Udieresis -55\nKPX A Ugrave -55\nKPX A Uhungarumlaut -55\nKPX A Umacron -55\nKPX A Uogonek -55\nKPX A Uring -55\nKPX A V -135\nKPX A W -90\nKPX A Y -105\nKPX A Yacute -105\nKPX A Ydieresis -105\nKPX A quoteright -111\nKPX A v -74\nKPX A w -92\nKPX A y -92\nKPX A yacute -92\nKPX A ydieresis -92\nKPX Aacute C -40\nKPX Aacute Cacute -40\nKPX Aacute Ccaron -40\nKPX Aacute Ccedilla -40\nKPX Aacute G -40\nKPX Aacute Gbreve -40\nKPX Aacute Gcommaaccent -40\nKPX Aacute O -55\nKPX Aacute Oacute -55\nKPX Aacute Ocircumflex -55\nKPX Aacute Odieresis -55\nKPX Aacute Ograve -55\nKPX Aacute Ohungarumlaut -55\nKPX Aacute Omacron -55\nKPX Aacute Oslash -55\nKPX Aacute Otilde -55\nKPX Aacute Q -55\nKPX Aacute T -111\nKPX Aacute Tcaron -111\nKPX Aacute Tcommaaccent -111\nKPX Aacute U -55\nKPX Aacute Uacute -55\nKPX Aacute Ucircumflex -55\nKPX Aacute Udieresis -55\nKPX Aacute Ugrave -55\nKPX Aacute Uhungarumlaut -55\nKPX Aacute Umacron -55\nKPX Aacute Uogonek -55\nKPX Aacute Uring -55\nKPX Aacute V -135\nKPX Aacute W -90\nKPX Aacute Y -105\nKPX Aacute Yacute -105\nKPX Aacute Ydieresis -105\nKPX Aacute quoteright -111\nKPX Aacute v -74\nKPX Aacute w -92\nKPX Aacute y -92\nKPX Aacute yacute -92\nKPX Aacute ydieresis -92\nKPX Abreve C -40\nKPX Abreve Cacute -40\nKPX Abreve Ccaron -40\nKPX Abreve Ccedilla -40\nKPX Abreve G -40\nKPX Abreve Gbreve -40\nKPX Abreve Gcommaaccent -40\nKPX Abreve O -55\nKPX Abreve Oacute -55\nKPX Abreve Ocircumflex -55\nKPX Abreve Odieresis -55\nKPX Abreve Ograve -55\nKPX Abreve Ohungarumlaut -55\nKPX Abreve Omacron -55\nKPX Abreve Oslash -55\nKPX Abreve Otilde -55\nKPX Abreve Q -55\nKPX Abreve T -111\nKPX Abreve Tcaron -111\nKPX Abreve Tcommaaccent -111\nKPX Abreve U -55\nKPX Abreve Uacute -55\nKPX Abreve Ucircumflex -55\nKPX Abreve Udieresis -55\nKPX Abreve Ugrave -55\nKPX Abreve Uhungarumlaut -55\nKPX Abreve Umacron -55\nKPX Abreve Uogonek -55\nKPX Abreve Uring -55\nKPX Abreve V -135\nKPX Abreve W -90\nKPX Abreve Y -105\nKPX Abreve Yacute -105\nKPX Abreve Ydieresis -105\nKPX Abreve quoteright -111\nKPX Abreve v -74\nKPX Abreve w -92\nKPX Abreve y -92\nKPX Abreve yacute -92\nKPX Abreve ydieresis -92\nKPX Acircumflex C -40\nKPX Acircumflex Cacute -40\nKPX Acircumflex Ccaron -40\nKPX Acircumflex Ccedilla -40\nKPX Acircumflex G -40\nKPX Acircumflex Gbreve -40\nKPX Acircumflex Gcommaaccent -40\nKPX Acircumflex O -55\nKPX Acircumflex Oacute -55\nKPX Acircumflex Ocircumflex -55\nKPX Acircumflex Odieresis -55\nKPX Acircumflex Ograve -55\nKPX Acircumflex Ohungarumlaut -55\nKPX Acircumflex Omacron -55\nKPX Acircumflex Oslash -55\nKPX Acircumflex Otilde -55\nKPX Acircumflex Q -55\nKPX Acircumflex T -111\nKPX Acircumflex Tcaron -111\nKPX Acircumflex Tcommaaccent -111\nKPX Acircumflex U -55\nKPX Acircumflex Uacute -55\nKPX Acircumflex Ucircumflex -55\nKPX Acircumflex Udieresis -55\nKPX Acircumflex Ugrave -55\nKPX Acircumflex Uhungarumlaut -55\nKPX Acircumflex Umacron -55\nKPX Acircumflex Uogonek -55\nKPX Acircumflex Uring -55\nKPX Acircumflex V -135\nKPX Acircumflex W -90\nKPX Acircumflex Y -105\nKPX Acircumflex Yacute -105\nKPX Acircumflex Ydieresis -105\nKPX Acircumflex quoteright -111\nKPX Acircumflex v -74\nKPX Acircumflex w -92\nKPX Acircumflex y -92\nKPX Acircumflex yacute -92\nKPX Acircumflex ydieresis -92\nKPX Adieresis C -40\nKPX Adieresis Cacute -40\nKPX Adieresis Ccaron -40\nKPX Adieresis Ccedilla -40\nKPX Adieresis G -40\nKPX Adieresis Gbreve -40\nKPX Adieresis Gcommaaccent -40\nKPX Adieresis O -55\nKPX Adieresis Oacute -55\nKPX Adieresis Ocircumflex -55\nKPX Adieresis Odieresis -55\nKPX Adieresis Ograve -55\nKPX Adieresis Ohungarumlaut -55\nKPX Adieresis Omacron -55\nKPX Adieresis Oslash -55\nKPX Adieresis Otilde -55\nKPX Adieresis Q -55\nKPX Adieresis T -111\nKPX Adieresis Tcaron -111\nKPX Adieresis Tcommaaccent -111\nKPX Adieresis U -55\nKPX Adieresis Uacute -55\nKPX Adieresis Ucircumflex -55\nKPX Adieresis Udieresis -55\nKPX Adieresis Ugrave -55\nKPX Adieresis Uhungarumlaut -55\nKPX Adieresis Umacron -55\nKPX Adieresis Uogonek -55\nKPX Adieresis Uring -55\nKPX Adieresis V -135\nKPX Adieresis W -90\nKPX Adieresis Y -105\nKPX Adieresis Yacute -105\nKPX Adieresis Ydieresis -105\nKPX Adieresis quoteright -111\nKPX Adieresis v -74\nKPX Adieresis w -92\nKPX Adieresis y -92\nKPX Adieresis yacute -92\nKPX Adieresis ydieresis -92\nKPX Agrave C -40\nKPX Agrave Cacute -40\nKPX Agrave Ccaron -40\nKPX Agrave Ccedilla -40\nKPX Agrave G -40\nKPX Agrave Gbreve -40\nKPX Agrave Gcommaaccent -40\nKPX Agrave O -55\nKPX Agrave Oacute -55\nKPX Agrave Ocircumflex -55\nKPX Agrave Odieresis -55\nKPX Agrave Ograve -55\nKPX Agrave Ohungarumlaut -55\nKPX Agrave Omacron -55\nKPX Agrave Oslash -55\nKPX Agrave Otilde -55\nKPX Agrave Q -55\nKPX Agrave T -111\nKPX Agrave Tcaron -111\nKPX Agrave Tcommaaccent -111\nKPX Agrave U -55\nKPX Agrave Uacute -55\nKPX Agrave Ucircumflex -55\nKPX Agrave Udieresis -55\nKPX Agrave Ugrave -55\nKPX Agrave Uhungarumlaut -55\nKPX Agrave Umacron -55\nKPX Agrave Uogonek -55\nKPX Agrave Uring -55\nKPX Agrave V -135\nKPX Agrave W -90\nKPX Agrave Y -105\nKPX Agrave Yacute -105\nKPX Agrave Ydieresis -105\nKPX Agrave quoteright -111\nKPX Agrave v -74\nKPX Agrave w -92\nKPX Agrave y -92\nKPX Agrave yacute -92\nKPX Agrave ydieresis -92\nKPX Amacron C -40\nKPX Amacron Cacute -40\nKPX Amacron Ccaron -40\nKPX Amacron Ccedilla -40\nKPX Amacron G -40\nKPX Amacron Gbreve -40\nKPX Amacron Gcommaaccent -40\nKPX Amacron O -55\nKPX Amacron Oacute -55\nKPX Amacron Ocircumflex -55\nKPX Amacron Odieresis -55\nKPX Amacron Ograve -55\nKPX Amacron Ohungarumlaut -55\nKPX Amacron Omacron -55\nKPX Amacron Oslash -55\nKPX Amacron Otilde -55\nKPX Amacron Q -55\nKPX Amacron T -111\nKPX Amacron Tcaron -111\nKPX Amacron Tcommaaccent -111\nKPX Amacron U -55\nKPX Amacron Uacute -55\nKPX Amacron Ucircumflex -55\nKPX Amacron Udieresis -55\nKPX Amacron Ugrave -55\nKPX Amacron Uhungarumlaut -55\nKPX Amacron Umacron -55\nKPX Amacron Uogonek -55\nKPX Amacron Uring -55\nKPX Amacron V -135\nKPX Amacron W -90\nKPX Amacron Y -105\nKPX Amacron Yacute -105\nKPX Amacron Ydieresis -105\nKPX Amacron quoteright -111\nKPX Amacron v -74\nKPX Amacron w -92\nKPX Amacron y -92\nKPX Amacron yacute -92\nKPX Amacron ydieresis -92\nKPX Aogonek C -40\nKPX Aogonek Cacute -40\nKPX Aogonek Ccaron -40\nKPX Aogonek Ccedilla -40\nKPX Aogonek G -40\nKPX Aogonek Gbreve -40\nKPX Aogonek Gcommaaccent -40\nKPX Aogonek O -55\nKPX Aogonek Oacute -55\nKPX Aogonek Ocircumflex -55\nKPX Aogonek Odieresis -55\nKPX Aogonek Ograve -55\nKPX Aogonek Ohungarumlaut -55\nKPX Aogonek Omacron -55\nKPX Aogonek Oslash -55\nKPX Aogonek Otilde -55\nKPX Aogonek Q -55\nKPX Aogonek T -111\nKPX Aogonek Tcaron -111\nKPX Aogonek Tcommaaccent -111\nKPX Aogonek U -55\nKPX Aogonek Uacute -55\nKPX Aogonek Ucircumflex -55\nKPX Aogonek Udieresis -55\nKPX Aogonek Ugrave -55\nKPX Aogonek Uhungarumlaut -55\nKPX Aogonek Umacron -55\nKPX Aogonek Uogonek -55\nKPX Aogonek Uring -55\nKPX Aogonek V -135\nKPX Aogonek W -90\nKPX Aogonek Y -105\nKPX Aogonek Yacute -105\nKPX Aogonek Ydieresis -105\nKPX Aogonek quoteright -111\nKPX Aogonek v -74\nKPX Aogonek w -52\nKPX Aogonek y -52\nKPX Aogonek yacute -52\nKPX Aogonek ydieresis -52\nKPX Aring C -40\nKPX Aring Cacute -40\nKPX Aring Ccaron -40\nKPX Aring Ccedilla -40\nKPX Aring G -40\nKPX Aring Gbreve -40\nKPX Aring Gcommaaccent -40\nKPX Aring O -55\nKPX Aring Oacute -55\nKPX Aring Ocircumflex -55\nKPX Aring Odieresis -55\nKPX Aring Ograve -55\nKPX Aring Ohungarumlaut -55\nKPX Aring Omacron -55\nKPX Aring Oslash -55\nKPX Aring Otilde -55\nKPX Aring Q -55\nKPX Aring T -111\nKPX Aring Tcaron -111\nKPX Aring Tcommaaccent -111\nKPX Aring U -55\nKPX Aring Uacute -55\nKPX Aring Ucircumflex -55\nKPX Aring Udieresis -55\nKPX Aring Ugrave -55\nKPX Aring Uhungarumlaut -55\nKPX Aring Umacron -55\nKPX Aring Uogonek -55\nKPX Aring Uring -55\nKPX Aring V -135\nKPX Aring W -90\nKPX Aring Y -105\nKPX Aring Yacute -105\nKPX Aring Ydieresis -105\nKPX Aring quoteright -111\nKPX Aring v -74\nKPX Aring w -92\nKPX Aring y -92\nKPX Aring yacute -92\nKPX Aring ydieresis -92\nKPX Atilde C -40\nKPX Atilde Cacute -40\nKPX Atilde Ccaron -40\nKPX Atilde Ccedilla -40\nKPX Atilde G -40\nKPX Atilde Gbreve -40\nKPX Atilde Gcommaaccent -40\nKPX Atilde O -55\nKPX Atilde Oacute -55\nKPX Atilde Ocircumflex -55\nKPX Atilde Odieresis -55\nKPX Atilde Ograve -55\nKPX Atilde Ohungarumlaut -55\nKPX Atilde Omacron -55\nKPX Atilde Oslash -55\nKPX Atilde Otilde -55\nKPX Atilde Q -55\nKPX Atilde T -111\nKPX Atilde Tcaron -111\nKPX Atilde Tcommaaccent -111\nKPX Atilde U -55\nKPX Atilde Uacute -55\nKPX Atilde Ucircumflex -55\nKPX Atilde Udieresis -55\nKPX Atilde Ugrave -55\nKPX Atilde Uhungarumlaut -55\nKPX Atilde Umacron -55\nKPX Atilde Uogonek -55\nKPX Atilde Uring -55\nKPX Atilde V -135\nKPX Atilde W -90\nKPX Atilde Y -105\nKPX Atilde Yacute -105\nKPX Atilde Ydieresis -105\nKPX Atilde quoteright -111\nKPX Atilde v -74\nKPX Atilde w -92\nKPX Atilde y -92\nKPX Atilde yacute -92\nKPX Atilde ydieresis -92\nKPX B A -35\nKPX B Aacute -35\nKPX B Abreve -35\nKPX B Acircumflex -35\nKPX B Adieresis -35\nKPX B Agrave -35\nKPX B Amacron -35\nKPX B Aogonek -35\nKPX B Aring -35\nKPX B Atilde -35\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX D A -40\nKPX D Aacute -40\nKPX D Abreve -40\nKPX D Acircumflex -40\nKPX D Adieresis -40\nKPX D Agrave -40\nKPX D Amacron -40\nKPX D Aogonek -40\nKPX D Aring -40\nKPX D Atilde -40\nKPX D V -40\nKPX D W -30\nKPX D Y -55\nKPX D Yacute -55\nKPX D Ydieresis -55\nKPX Dcaron A -40\nKPX Dcaron Aacute -40\nKPX Dcaron Abreve -40\nKPX Dcaron Acircumflex -40\nKPX Dcaron Adieresis -40\nKPX Dcaron Agrave -40\nKPX Dcaron Amacron -40\nKPX Dcaron Aogonek -40\nKPX Dcaron Aring -40\nKPX Dcaron Atilde -40\nKPX Dcaron V -40\nKPX Dcaron W -30\nKPX Dcaron Y -55\nKPX Dcaron Yacute -55\nKPX Dcaron Ydieresis -55\nKPX Dcroat A -40\nKPX Dcroat Aacute -40\nKPX Dcroat Abreve -40\nKPX Dcroat Acircumflex -40\nKPX Dcroat Adieresis -40\nKPX Dcroat Agrave -40\nKPX Dcroat Amacron -40\nKPX Dcroat Aogonek -40\nKPX Dcroat Aring -40\nKPX Dcroat Atilde -40\nKPX Dcroat V -40\nKPX Dcroat W -30\nKPX Dcroat Y -55\nKPX Dcroat Yacute -55\nKPX Dcroat Ydieresis -55\nKPX F A -74\nKPX F Aacute -74\nKPX F Abreve -74\nKPX F Acircumflex -74\nKPX F Adieresis -74\nKPX F Agrave -74\nKPX F Amacron -74\nKPX F Aogonek -74\nKPX F Aring -74\nKPX F Atilde -74\nKPX F a -15\nKPX F aacute -15\nKPX F abreve -15\nKPX F acircumflex -15\nKPX F adieresis -15\nKPX F agrave -15\nKPX F amacron -15\nKPX F aogonek -15\nKPX F aring -15\nKPX F atilde -15\nKPX F comma -80\nKPX F o -15\nKPX F oacute -15\nKPX F ocircumflex -15\nKPX F odieresis -15\nKPX F ograve -15\nKPX F ohungarumlaut -15\nKPX F omacron -15\nKPX F oslash -15\nKPX F otilde -15\nKPX F period -80\nKPX J A -60\nKPX J Aacute -60\nKPX J Abreve -60\nKPX J Acircumflex -60\nKPX J Adieresis -60\nKPX J Agrave -60\nKPX J Amacron -60\nKPX J Aogonek -60\nKPX J Aring -60\nKPX J Atilde -60\nKPX K O -30\nKPX K Oacute -30\nKPX K Ocircumflex -30\nKPX K Odieresis -30\nKPX K Ograve -30\nKPX K Ohungarumlaut -30\nKPX K Omacron -30\nKPX K Oslash -30\nKPX K Otilde -30\nKPX K e -25\nKPX K eacute -25\nKPX K ecaron -25\nKPX K ecircumflex -25\nKPX K edieresis -25\nKPX K edotaccent -25\nKPX K egrave -25\nKPX K emacron -25\nKPX K eogonek -25\nKPX K o -35\nKPX K oacute -35\nKPX K ocircumflex -35\nKPX K odieresis -35\nKPX K ograve -35\nKPX K ohungarumlaut -35\nKPX K omacron -35\nKPX K oslash -35\nKPX K otilde -35\nKPX K u -15\nKPX K uacute -15\nKPX K ucircumflex -15\nKPX K udieresis -15\nKPX K ugrave -15\nKPX K uhungarumlaut -15\nKPX K umacron -15\nKPX K uogonek -15\nKPX K uring -15\nKPX K y -25\nKPX K yacute -25\nKPX K ydieresis -25\nKPX Kcommaaccent O -30\nKPX Kcommaaccent Oacute -30\nKPX Kcommaaccent Ocircumflex -30\nKPX Kcommaaccent Odieresis -30\nKPX Kcommaaccent Ograve -30\nKPX Kcommaaccent Ohungarumlaut -30\nKPX Kcommaaccent Omacron -30\nKPX Kcommaaccent Oslash -30\nKPX Kcommaaccent Otilde -30\nKPX Kcommaaccent e -25\nKPX Kcommaaccent eacute -25\nKPX Kcommaaccent ecaron -25\nKPX Kcommaaccent ecircumflex -25\nKPX Kcommaaccent edieresis -25\nKPX Kcommaaccent edotaccent -25\nKPX Kcommaaccent egrave -25\nKPX Kcommaaccent emacron -25\nKPX Kcommaaccent eogonek -25\nKPX Kcommaaccent o -35\nKPX Kcommaaccent oacute -35\nKPX Kcommaaccent ocircumflex -35\nKPX Kcommaaccent odieresis -35\nKPX Kcommaaccent ograve -35\nKPX Kcommaaccent ohungarumlaut -35\nKPX Kcommaaccent omacron -35\nKPX Kcommaaccent oslash -35\nKPX Kcommaaccent otilde -35\nKPX Kcommaaccent u -15\nKPX Kcommaaccent uacute -15\nKPX Kcommaaccent ucircumflex -15\nKPX Kcommaaccent udieresis -15\nKPX Kcommaaccent ugrave -15\nKPX Kcommaaccent uhungarumlaut -15\nKPX Kcommaaccent umacron -15\nKPX Kcommaaccent uogonek -15\nKPX Kcommaaccent uring -15\nKPX Kcommaaccent y -25\nKPX Kcommaaccent yacute -25\nKPX Kcommaaccent ydieresis -25\nKPX L T -92\nKPX L Tcaron -92\nKPX L Tcommaaccent -92\nKPX L V -100\nKPX L W -74\nKPX L Y -100\nKPX L Yacute -100\nKPX L Ydieresis -100\nKPX L quoteright -92\nKPX L y -55\nKPX L yacute -55\nKPX L ydieresis -55\nKPX Lacute T -92\nKPX Lacute Tcaron -92\nKPX Lacute Tcommaaccent -92\nKPX Lacute V -100\nKPX Lacute W -74\nKPX Lacute Y -100\nKPX Lacute Yacute -100\nKPX Lacute Ydieresis -100\nKPX Lacute quoteright -92\nKPX Lacute y -55\nKPX Lacute yacute -55\nKPX Lacute ydieresis -55\nKPX Lcaron quoteright -92\nKPX Lcaron y -55\nKPX Lcaron yacute -55\nKPX Lcaron ydieresis -55\nKPX Lcommaaccent T -92\nKPX Lcommaaccent Tcaron -92\nKPX Lcommaaccent Tcommaaccent -92\nKPX Lcommaaccent V -100\nKPX Lcommaaccent W -74\nKPX Lcommaaccent Y -100\nKPX Lcommaaccent Yacute -100\nKPX Lcommaaccent Ydieresis -100\nKPX Lcommaaccent quoteright -92\nKPX Lcommaaccent y -55\nKPX Lcommaaccent yacute -55\nKPX Lcommaaccent ydieresis -55\nKPX Lslash T -92\nKPX Lslash Tcaron -92\nKPX Lslash Tcommaaccent -92\nKPX Lslash V -100\nKPX Lslash W -74\nKPX Lslash Y -100\nKPX Lslash Yacute -100\nKPX Lslash Ydieresis -100\nKPX Lslash quoteright -92\nKPX Lslash y -55\nKPX Lslash yacute -55\nKPX Lslash ydieresis -55\nKPX N A -35\nKPX N Aacute -35\nKPX N Abreve -35\nKPX N Acircumflex -35\nKPX N Adieresis -35\nKPX N Agrave -35\nKPX N Amacron -35\nKPX N Aogonek -35\nKPX N Aring -35\nKPX N Atilde -35\nKPX Nacute A -35\nKPX Nacute Aacute -35\nKPX Nacute Abreve -35\nKPX Nacute Acircumflex -35\nKPX Nacute Adieresis -35\nKPX Nacute Agrave -35\nKPX Nacute Amacron -35\nKPX Nacute Aogonek -35\nKPX Nacute Aring -35\nKPX Nacute Atilde -35\nKPX Ncaron A -35\nKPX Ncaron Aacute -35\nKPX Ncaron Abreve -35\nKPX Ncaron Acircumflex -35\nKPX Ncaron Adieresis -35\nKPX Ncaron Agrave -35\nKPX Ncaron Amacron -35\nKPX Ncaron Aogonek -35\nKPX Ncaron Aring -35\nKPX Ncaron Atilde -35\nKPX Ncommaaccent A -35\nKPX Ncommaaccent Aacute -35\nKPX Ncommaaccent Abreve -35\nKPX Ncommaaccent Acircumflex -35\nKPX Ncommaaccent Adieresis -35\nKPX Ncommaaccent Agrave -35\nKPX Ncommaaccent Amacron -35\nKPX Ncommaaccent Aogonek -35\nKPX Ncommaaccent Aring -35\nKPX Ncommaaccent Atilde -35\nKPX Ntilde A -35\nKPX Ntilde Aacute -35\nKPX Ntilde Abreve -35\nKPX Ntilde Acircumflex -35\nKPX Ntilde Adieresis -35\nKPX Ntilde Agrave -35\nKPX Ntilde Amacron -35\nKPX Ntilde Aogonek -35\nKPX Ntilde Aring -35\nKPX Ntilde Atilde -35\nKPX O A -35\nKPX O Aacute -35\nKPX O Abreve -35\nKPX O Acircumflex -35\nKPX O Adieresis -35\nKPX O Agrave -35\nKPX O Amacron -35\nKPX O Aogonek -35\nKPX O Aring -35\nKPX O Atilde -35\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -35\nKPX O X -40\nKPX O Y -50\nKPX O Yacute -50\nKPX O Ydieresis -50\nKPX Oacute A -35\nKPX Oacute Aacute -35\nKPX Oacute Abreve -35\nKPX Oacute Acircumflex -35\nKPX Oacute Adieresis -35\nKPX Oacute Agrave -35\nKPX Oacute Amacron -35\nKPX Oacute Aogonek -35\nKPX Oacute Aring -35\nKPX Oacute Atilde -35\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -35\nKPX Oacute X -40\nKPX Oacute Y -50\nKPX Oacute Yacute -50\nKPX Oacute Ydieresis -50\nKPX Ocircumflex A -35\nKPX Ocircumflex Aacute -35\nKPX Ocircumflex Abreve -35\nKPX Ocircumflex Acircumflex -35\nKPX Ocircumflex Adieresis -35\nKPX Ocircumflex Agrave -35\nKPX Ocircumflex Amacron -35\nKPX Ocircumflex Aogonek -35\nKPX Ocircumflex Aring -35\nKPX Ocircumflex Atilde -35\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -35\nKPX Ocircumflex X -40\nKPX Ocircumflex Y -50\nKPX Ocircumflex Yacute -50\nKPX Ocircumflex Ydieresis -50\nKPX Odieresis A -35\nKPX Odieresis Aacute -35\nKPX Odieresis Abreve -35\nKPX Odieresis Acircumflex -35\nKPX Odieresis Adieresis -35\nKPX Odieresis Agrave -35\nKPX Odieresis Amacron -35\nKPX Odieresis Aogonek -35\nKPX Odieresis Aring -35\nKPX Odieresis Atilde -35\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -35\nKPX Odieresis X -40\nKPX Odieresis Y -50\nKPX Odieresis Yacute -50\nKPX Odieresis Ydieresis -50\nKPX Ograve A -35\nKPX Ograve Aacute -35\nKPX Ograve Abreve -35\nKPX Ograve Acircumflex -35\nKPX Ograve Adieresis -35\nKPX Ograve Agrave -35\nKPX Ograve Amacron -35\nKPX Ograve Aogonek -35\nKPX Ograve Aring -35\nKPX Ograve Atilde -35\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -35\nKPX Ograve X -40\nKPX Ograve Y -50\nKPX Ograve Yacute -50\nKPX Ograve Ydieresis -50\nKPX Ohungarumlaut A -35\nKPX Ohungarumlaut Aacute -35\nKPX Ohungarumlaut Abreve -35\nKPX Ohungarumlaut Acircumflex -35\nKPX Ohungarumlaut Adieresis -35\nKPX Ohungarumlaut Agrave -35\nKPX Ohungarumlaut Amacron -35\nKPX Ohungarumlaut Aogonek -35\nKPX Ohungarumlaut Aring -35\nKPX Ohungarumlaut Atilde -35\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -35\nKPX Ohungarumlaut X -40\nKPX Ohungarumlaut Y -50\nKPX Ohungarumlaut Yacute -50\nKPX Ohungarumlaut Ydieresis -50\nKPX Omacron A -35\nKPX Omacron Aacute -35\nKPX Omacron Abreve -35\nKPX Omacron Acircumflex -35\nKPX Omacron Adieresis -35\nKPX Omacron Agrave -35\nKPX Omacron Amacron -35\nKPX Omacron Aogonek -35\nKPX Omacron Aring -35\nKPX Omacron Atilde -35\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -35\nKPX Omacron X -40\nKPX Omacron Y -50\nKPX Omacron Yacute -50\nKPX Omacron Ydieresis -50\nKPX Oslash A -35\nKPX Oslash Aacute -35\nKPX Oslash Abreve -35\nKPX Oslash Acircumflex -35\nKPX Oslash Adieresis -35\nKPX Oslash Agrave -35\nKPX Oslash Amacron -35\nKPX Oslash Aogonek -35\nKPX Oslash Aring -35\nKPX Oslash Atilde -35\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -35\nKPX Oslash X -40\nKPX Oslash Y -50\nKPX Oslash Yacute -50\nKPX Oslash Ydieresis -50\nKPX Otilde A -35\nKPX Otilde Aacute -35\nKPX Otilde Abreve -35\nKPX Otilde Acircumflex -35\nKPX Otilde Adieresis -35\nKPX Otilde Agrave -35\nKPX Otilde Amacron -35\nKPX Otilde Aogonek -35\nKPX Otilde Aring -35\nKPX Otilde Atilde -35\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -35\nKPX Otilde X -40\nKPX Otilde Y -50\nKPX Otilde Yacute -50\nKPX Otilde Ydieresis -50\nKPX P A -92\nKPX P Aacute -92\nKPX P Abreve -92\nKPX P Acircumflex -92\nKPX P Adieresis -92\nKPX P Agrave -92\nKPX P Amacron -92\nKPX P Aogonek -92\nKPX P Aring -92\nKPX P Atilde -92\nKPX P a -15\nKPX P aacute -15\nKPX P abreve -15\nKPX P acircumflex -15\nKPX P adieresis -15\nKPX P agrave -15\nKPX P amacron -15\nKPX P aogonek -15\nKPX P aring -15\nKPX P atilde -15\nKPX P comma -111\nKPX P period -111\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX R O -40\nKPX R Oacute -40\nKPX R Ocircumflex -40\nKPX R Odieresis -40\nKPX R Ograve -40\nKPX R Ohungarumlaut -40\nKPX R Omacron -40\nKPX R Oslash -40\nKPX R Otilde -40\nKPX R T -60\nKPX R Tcaron -60\nKPX R Tcommaaccent -60\nKPX R U -40\nKPX R Uacute -40\nKPX R Ucircumflex -40\nKPX R Udieresis -40\nKPX R Ugrave -40\nKPX R Uhungarumlaut -40\nKPX R Umacron -40\nKPX R Uogonek -40\nKPX R Uring -40\nKPX R V -80\nKPX R W -55\nKPX R Y -65\nKPX R Yacute -65\nKPX R Ydieresis -65\nKPX Racute O -40\nKPX Racute Oacute -40\nKPX Racute Ocircumflex -40\nKPX Racute Odieresis -40\nKPX Racute Ograve -40\nKPX Racute Ohungarumlaut -40\nKPX Racute Omacron -40\nKPX Racute Oslash -40\nKPX Racute Otilde -40\nKPX Racute T -60\nKPX Racute Tcaron -60\nKPX Racute Tcommaaccent -60\nKPX Racute U -40\nKPX Racute Uacute -40\nKPX Racute Ucircumflex -40\nKPX Racute Udieresis -40\nKPX Racute Ugrave -40\nKPX Racute Uhungarumlaut -40\nKPX Racute Umacron -40\nKPX Racute Uogonek -40\nKPX Racute Uring -40\nKPX Racute V -80\nKPX Racute W -55\nKPX Racute Y -65\nKPX Racute Yacute -65\nKPX Racute Ydieresis -65\nKPX Rcaron O -40\nKPX Rcaron Oacute -40\nKPX Rcaron Ocircumflex -40\nKPX Rcaron Odieresis -40\nKPX Rcaron Ograve -40\nKPX Rcaron Ohungarumlaut -40\nKPX Rcaron Omacron -40\nKPX Rcaron Oslash -40\nKPX Rcaron Otilde -40\nKPX Rcaron T -60\nKPX Rcaron Tcaron -60\nKPX Rcaron Tcommaaccent -60\nKPX Rcaron U -40\nKPX Rcaron Uacute -40\nKPX Rcaron Ucircumflex -40\nKPX Rcaron Udieresis -40\nKPX Rcaron Ugrave -40\nKPX Rcaron Uhungarumlaut -40\nKPX Rcaron Umacron -40\nKPX Rcaron Uogonek -40\nKPX Rcaron Uring -40\nKPX Rcaron V -80\nKPX Rcaron W -55\nKPX Rcaron Y -65\nKPX Rcaron Yacute -65\nKPX Rcaron Ydieresis -65\nKPX Rcommaaccent O -40\nKPX Rcommaaccent Oacute -40\nKPX Rcommaaccent Ocircumflex -40\nKPX Rcommaaccent Odieresis -40\nKPX Rcommaaccent Ograve -40\nKPX Rcommaaccent Ohungarumlaut -40\nKPX Rcommaaccent Omacron -40\nKPX Rcommaaccent Oslash -40\nKPX Rcommaaccent Otilde -40\nKPX Rcommaaccent T -60\nKPX Rcommaaccent Tcaron -60\nKPX Rcommaaccent Tcommaaccent -60\nKPX Rcommaaccent U -40\nKPX Rcommaaccent Uacute -40\nKPX Rcommaaccent Ucircumflex -40\nKPX Rcommaaccent Udieresis -40\nKPX Rcommaaccent Ugrave -40\nKPX Rcommaaccent Uhungarumlaut -40\nKPX Rcommaaccent Umacron -40\nKPX Rcommaaccent Uogonek -40\nKPX Rcommaaccent Uring -40\nKPX Rcommaaccent V -80\nKPX Rcommaaccent W -55\nKPX Rcommaaccent Y -65\nKPX Rcommaaccent Yacute -65\nKPX Rcommaaccent Ydieresis -65\nKPX T A -93\nKPX T Aacute -93\nKPX T Abreve -93\nKPX T Acircumflex -93\nKPX T Adieresis -93\nKPX T Agrave -93\nKPX T Amacron -93\nKPX T Aogonek -93\nKPX T Aring -93\nKPX T Atilde -93\nKPX T O -18\nKPX T Oacute -18\nKPX T Ocircumflex -18\nKPX T Odieresis -18\nKPX T Ograve -18\nKPX T Ohungarumlaut -18\nKPX T Omacron -18\nKPX T Oslash -18\nKPX T Otilde -18\nKPX T a -80\nKPX T aacute -80\nKPX T abreve -80\nKPX T acircumflex -80\nKPX T adieresis -40\nKPX T agrave -40\nKPX T amacron -40\nKPX T aogonek -80\nKPX T aring -80\nKPX T atilde -40\nKPX T colon -50\nKPX T comma -74\nKPX T e -70\nKPX T eacute -70\nKPX T ecaron -70\nKPX T ecircumflex -70\nKPX T edieresis -30\nKPX T edotaccent -70\nKPX T egrave -70\nKPX T emacron -30\nKPX T eogonek -70\nKPX T hyphen -92\nKPX T i -35\nKPX T iacute -35\nKPX T iogonek -35\nKPX T o -80\nKPX T oacute -80\nKPX T ocircumflex -80\nKPX T odieresis -80\nKPX T ograve -80\nKPX T ohungarumlaut -80\nKPX T omacron -80\nKPX T oslash -80\nKPX T otilde -80\nKPX T period -74\nKPX T r -35\nKPX T racute -35\nKPX T rcaron -35\nKPX T rcommaaccent -35\nKPX T semicolon -55\nKPX T u -45\nKPX T uacute -45\nKPX T ucircumflex -45\nKPX T udieresis -45\nKPX T ugrave -45\nKPX T uhungarumlaut -45\nKPX T umacron -45\nKPX T uogonek -45\nKPX T uring -45\nKPX T w -80\nKPX T y -80\nKPX T yacute -80\nKPX T ydieresis -80\nKPX Tcaron A -93\nKPX Tcaron Aacute -93\nKPX Tcaron Abreve -93\nKPX Tcaron Acircumflex -93\nKPX Tcaron Adieresis -93\nKPX Tcaron Agrave -93\nKPX Tcaron Amacron -93\nKPX Tcaron Aogonek -93\nKPX Tcaron Aring -93\nKPX Tcaron Atilde -93\nKPX Tcaron O -18\nKPX Tcaron Oacute -18\nKPX Tcaron Ocircumflex -18\nKPX Tcaron Odieresis -18\nKPX Tcaron Ograve -18\nKPX Tcaron Ohungarumlaut -18\nKPX Tcaron Omacron -18\nKPX Tcaron Oslash -18\nKPX Tcaron Otilde -18\nKPX Tcaron a -80\nKPX Tcaron aacute -80\nKPX Tcaron abreve -80\nKPX Tcaron acircumflex -80\nKPX Tcaron adieresis -40\nKPX Tcaron agrave -40\nKPX Tcaron amacron -40\nKPX Tcaron aogonek -80\nKPX Tcaron aring -80\nKPX Tcaron atilde -40\nKPX Tcaron colon -50\nKPX Tcaron comma -74\nKPX Tcaron e -70\nKPX Tcaron eacute -70\nKPX Tcaron ecaron -70\nKPX Tcaron ecircumflex -30\nKPX Tcaron edieresis -30\nKPX Tcaron edotaccent -70\nKPX Tcaron egrave -70\nKPX Tcaron emacron -30\nKPX Tcaron eogonek -70\nKPX Tcaron hyphen -92\nKPX Tcaron i -35\nKPX Tcaron iacute -35\nKPX Tcaron iogonek -35\nKPX Tcaron o -80\nKPX Tcaron oacute -80\nKPX Tcaron ocircumflex -80\nKPX Tcaron odieresis -80\nKPX Tcaron ograve -80\nKPX Tcaron ohungarumlaut -80\nKPX Tcaron omacron -80\nKPX Tcaron oslash -80\nKPX Tcaron otilde -80\nKPX Tcaron period -74\nKPX Tcaron r -35\nKPX Tcaron racute -35\nKPX Tcaron rcaron -35\nKPX Tcaron rcommaaccent -35\nKPX Tcaron semicolon -55\nKPX Tcaron u -45\nKPX Tcaron uacute -45\nKPX Tcaron ucircumflex -45\nKPX Tcaron udieresis -45\nKPX Tcaron ugrave -45\nKPX Tcaron uhungarumlaut -45\nKPX Tcaron umacron -45\nKPX Tcaron uogonek -45\nKPX Tcaron uring -45\nKPX Tcaron w -80\nKPX Tcaron y -80\nKPX Tcaron yacute -80\nKPX Tcaron ydieresis -80\nKPX Tcommaaccent A -93\nKPX Tcommaaccent Aacute -93\nKPX Tcommaaccent Abreve -93\nKPX Tcommaaccent Acircumflex -93\nKPX Tcommaaccent Adieresis -93\nKPX Tcommaaccent Agrave -93\nKPX Tcommaaccent Amacron -93\nKPX Tcommaaccent Aogonek -93\nKPX Tcommaaccent Aring -93\nKPX Tcommaaccent Atilde -93\nKPX Tcommaaccent O -18\nKPX Tcommaaccent Oacute -18\nKPX Tcommaaccent Ocircumflex -18\nKPX Tcommaaccent Odieresis -18\nKPX Tcommaaccent Ograve -18\nKPX Tcommaaccent Ohungarumlaut -18\nKPX Tcommaaccent Omacron -18\nKPX Tcommaaccent Oslash -18\nKPX Tcommaaccent Otilde -18\nKPX Tcommaaccent a -80\nKPX Tcommaaccent aacute -80\nKPX Tcommaaccent abreve -80\nKPX Tcommaaccent acircumflex -80\nKPX Tcommaaccent adieresis -40\nKPX Tcommaaccent agrave -40\nKPX Tcommaaccent amacron -40\nKPX Tcommaaccent aogonek -80\nKPX Tcommaaccent aring -80\nKPX Tcommaaccent atilde -40\nKPX Tcommaaccent colon -50\nKPX Tcommaaccent comma -74\nKPX Tcommaaccent e -70\nKPX Tcommaaccent eacute -70\nKPX Tcommaaccent ecaron -70\nKPX Tcommaaccent ecircumflex -30\nKPX Tcommaaccent edieresis -30\nKPX Tcommaaccent edotaccent -70\nKPX Tcommaaccent egrave -30\nKPX Tcommaaccent emacron -70\nKPX Tcommaaccent eogonek -70\nKPX Tcommaaccent hyphen -92\nKPX Tcommaaccent i -35\nKPX Tcommaaccent iacute -35\nKPX Tcommaaccent iogonek -35\nKPX Tcommaaccent o -80\nKPX Tcommaaccent oacute -80\nKPX Tcommaaccent ocircumflex -80\nKPX Tcommaaccent odieresis -80\nKPX Tcommaaccent ograve -80\nKPX Tcommaaccent ohungarumlaut -80\nKPX Tcommaaccent omacron -80\nKPX Tcommaaccent oslash -80\nKPX Tcommaaccent otilde -80\nKPX Tcommaaccent period -74\nKPX Tcommaaccent r -35\nKPX Tcommaaccent racute -35\nKPX Tcommaaccent rcaron -35\nKPX Tcommaaccent rcommaaccent -35\nKPX Tcommaaccent semicolon -55\nKPX Tcommaaccent u -45\nKPX Tcommaaccent uacute -45\nKPX Tcommaaccent ucircumflex -45\nKPX Tcommaaccent udieresis -45\nKPX Tcommaaccent ugrave -45\nKPX Tcommaaccent uhungarumlaut -45\nKPX Tcommaaccent umacron -45\nKPX Tcommaaccent uogonek -45\nKPX Tcommaaccent uring -45\nKPX Tcommaaccent w -80\nKPX Tcommaaccent y -80\nKPX Tcommaaccent yacute -80\nKPX Tcommaaccent ydieresis -80\nKPX U A -40\nKPX U Aacute -40\nKPX U Abreve -40\nKPX U Acircumflex -40\nKPX U Adieresis -40\nKPX U Agrave -40\nKPX U Amacron -40\nKPX U Aogonek -40\nKPX U Aring -40\nKPX U Atilde -40\nKPX Uacute A -40\nKPX Uacute Aacute -40\nKPX Uacute Abreve -40\nKPX Uacute Acircumflex -40\nKPX Uacute Adieresis -40\nKPX Uacute Agrave -40\nKPX Uacute Amacron -40\nKPX Uacute Aogonek -40\nKPX Uacute Aring -40\nKPX Uacute Atilde -40\nKPX Ucircumflex A -40\nKPX Ucircumflex Aacute -40\nKPX Ucircumflex Abreve -40\nKPX Ucircumflex Acircumflex -40\nKPX Ucircumflex Adieresis -40\nKPX Ucircumflex Agrave -40\nKPX Ucircumflex Amacron -40\nKPX Ucircumflex Aogonek -40\nKPX Ucircumflex Aring -40\nKPX Ucircumflex Atilde -40\nKPX Udieresis A -40\nKPX Udieresis Aacute -40\nKPX Udieresis Abreve -40\nKPX Udieresis Acircumflex -40\nKPX Udieresis Adieresis -40\nKPX Udieresis Agrave -40\nKPX Udieresis Amacron -40\nKPX Udieresis Aogonek -40\nKPX Udieresis Aring -40\nKPX Udieresis Atilde -40\nKPX Ugrave A -40\nKPX Ugrave Aacute -40\nKPX Ugrave Abreve -40\nKPX Ugrave Acircumflex -40\nKPX Ugrave Adieresis -40\nKPX Ugrave Agrave -40\nKPX Ugrave Amacron -40\nKPX Ugrave Aogonek -40\nKPX Ugrave Aring -40\nKPX Ugrave Atilde -40\nKPX Uhungarumlaut A -40\nKPX Uhungarumlaut Aacute -40\nKPX Uhungarumlaut Abreve -40\nKPX Uhungarumlaut Acircumflex -40\nKPX Uhungarumlaut Adieresis -40\nKPX Uhungarumlaut Agrave -40\nKPX Uhungarumlaut Amacron -40\nKPX Uhungarumlaut Aogonek -40\nKPX Uhungarumlaut Aring -40\nKPX Uhungarumlaut Atilde -40\nKPX Umacron A -40\nKPX Umacron Aacute -40\nKPX Umacron Abreve -40\nKPX Umacron Acircumflex -40\nKPX Umacron Adieresis -40\nKPX Umacron Agrave -40\nKPX Umacron Amacron -40\nKPX Umacron Aogonek -40\nKPX Umacron Aring -40\nKPX Umacron Atilde -40\nKPX Uogonek A -40\nKPX Uogonek Aacute -40\nKPX Uogonek Abreve -40\nKPX Uogonek Acircumflex -40\nKPX Uogonek Adieresis -40\nKPX Uogonek Agrave -40\nKPX Uogonek Amacron -40\nKPX Uogonek Aogonek -40\nKPX Uogonek Aring -40\nKPX Uogonek Atilde -40\nKPX Uring A -40\nKPX Uring Aacute -40\nKPX Uring Abreve -40\nKPX Uring Acircumflex -40\nKPX Uring Adieresis -40\nKPX Uring Agrave -40\nKPX Uring Amacron -40\nKPX Uring Aogonek -40\nKPX Uring Aring -40\nKPX Uring Atilde -40\nKPX V A -135\nKPX V Aacute -135\nKPX V Abreve -135\nKPX V Acircumflex -135\nKPX V Adieresis -135\nKPX V Agrave -135\nKPX V Amacron -135\nKPX V Aogonek -135\nKPX V Aring -135\nKPX V Atilde -135\nKPX V G -15\nKPX V Gbreve -15\nKPX V Gcommaaccent -15\nKPX V O -40\nKPX V Oacute -40\nKPX V Ocircumflex -40\nKPX V Odieresis -40\nKPX V Ograve -40\nKPX V Ohungarumlaut -40\nKPX V Omacron -40\nKPX V Oslash -40\nKPX V Otilde -40\nKPX V a -111\nKPX V aacute -111\nKPX V abreve -111\nKPX V acircumflex -71\nKPX V adieresis -71\nKPX V agrave -71\nKPX V amacron -71\nKPX V aogonek -111\nKPX V aring -111\nKPX V atilde -71\nKPX V colon -74\nKPX V comma -129\nKPX V e -111\nKPX V eacute -111\nKPX V ecaron -71\nKPX V ecircumflex -71\nKPX V edieresis -71\nKPX V edotaccent -111\nKPX V egrave -71\nKPX V emacron -71\nKPX V eogonek -111\nKPX V hyphen -100\nKPX V i -60\nKPX V iacute -60\nKPX V icircumflex -20\nKPX V idieresis -20\nKPX V igrave -20\nKPX V imacron -20\nKPX V iogonek -60\nKPX V o -129\nKPX V oacute -129\nKPX V ocircumflex -129\nKPX V odieresis -89\nKPX V ograve -89\nKPX V ohungarumlaut -129\nKPX V omacron -89\nKPX V oslash -129\nKPX V otilde -89\nKPX V period -129\nKPX V semicolon -74\nKPX V u -75\nKPX V uacute -75\nKPX V ucircumflex -75\nKPX V udieresis -75\nKPX V ugrave -75\nKPX V uhungarumlaut -75\nKPX V umacron -75\nKPX V uogonek -75\nKPX V uring -75\nKPX W A -120\nKPX W Aacute -120\nKPX W Abreve -120\nKPX W Acircumflex -120\nKPX W Adieresis -120\nKPX W Agrave -120\nKPX W Amacron -120\nKPX W Aogonek -120\nKPX W Aring -120\nKPX W Atilde -120\nKPX W O -10\nKPX W Oacute -10\nKPX W Ocircumflex -10\nKPX W Odieresis -10\nKPX W Ograve -10\nKPX W Ohungarumlaut -10\nKPX W Omacron -10\nKPX W Oslash -10\nKPX W Otilde -10\nKPX W a -80\nKPX W aacute -80\nKPX W abreve -80\nKPX W acircumflex -80\nKPX W adieresis -80\nKPX W agrave -80\nKPX W amacron -80\nKPX W aogonek -80\nKPX W aring -80\nKPX W atilde -80\nKPX W colon -37\nKPX W comma -92\nKPX W e -80\nKPX W eacute -80\nKPX W ecaron -80\nKPX W ecircumflex -80\nKPX W edieresis -40\nKPX W edotaccent -80\nKPX W egrave -40\nKPX W emacron -40\nKPX W eogonek -80\nKPX W hyphen -65\nKPX W i -40\nKPX W iacute -40\nKPX W iogonek -40\nKPX W o -80\nKPX W oacute -80\nKPX W ocircumflex -80\nKPX W odieresis -80\nKPX W ograve -80\nKPX W ohungarumlaut -80\nKPX W omacron -80\nKPX W oslash -80\nKPX W otilde -80\nKPX W period -92\nKPX W semicolon -37\nKPX W u -50\nKPX W uacute -50\nKPX W ucircumflex -50\nKPX W udieresis -50\nKPX W ugrave -50\nKPX W uhungarumlaut -50\nKPX W umacron -50\nKPX W uogonek -50\nKPX W uring -50\nKPX W y -73\nKPX W yacute -73\nKPX W ydieresis -73\nKPX Y A -120\nKPX Y Aacute -120\nKPX Y Abreve -120\nKPX Y Acircumflex -120\nKPX Y Adieresis -120\nKPX Y Agrave -120\nKPX Y Amacron -120\nKPX Y Aogonek -120\nKPX Y Aring -120\nKPX Y Atilde -120\nKPX Y O -30\nKPX Y Oacute -30\nKPX Y Ocircumflex -30\nKPX Y Odieresis -30\nKPX Y Ograve -30\nKPX Y Ohungarumlaut -30\nKPX Y Omacron -30\nKPX Y Oslash -30\nKPX Y Otilde -30\nKPX Y a -100\nKPX Y aacute -100\nKPX Y abreve -100\nKPX Y acircumflex -100\nKPX Y adieresis -60\nKPX Y agrave -60\nKPX Y amacron -60\nKPX Y aogonek -100\nKPX Y aring -100\nKPX Y atilde -60\nKPX Y colon -92\nKPX Y comma -129\nKPX Y e -100\nKPX Y eacute -100\nKPX Y ecaron -100\nKPX Y ecircumflex -100\nKPX Y edieresis -60\nKPX Y edotaccent -100\nKPX Y egrave -60\nKPX Y emacron -60\nKPX Y eogonek -100\nKPX Y hyphen -111\nKPX Y i -55\nKPX Y iacute -55\nKPX Y iogonek -55\nKPX Y o -110\nKPX Y oacute -110\nKPX Y ocircumflex -110\nKPX Y odieresis -70\nKPX Y ograve -70\nKPX Y ohungarumlaut -110\nKPX Y omacron -70\nKPX Y oslash -110\nKPX Y otilde -70\nKPX Y period -129\nKPX Y semicolon -92\nKPX Y u -111\nKPX Y uacute -111\nKPX Y ucircumflex -111\nKPX Y udieresis -71\nKPX Y ugrave -71\nKPX Y uhungarumlaut -111\nKPX Y umacron -71\nKPX Y uogonek -111\nKPX Y uring -111\nKPX Yacute A -120\nKPX Yacute Aacute -120\nKPX Yacute Abreve -120\nKPX Yacute Acircumflex -120\nKPX Yacute Adieresis -120\nKPX Yacute Agrave -120\nKPX Yacute Amacron -120\nKPX Yacute Aogonek -120\nKPX Yacute Aring -120\nKPX Yacute Atilde -120\nKPX Yacute O -30\nKPX Yacute Oacute -30\nKPX Yacute Ocircumflex -30\nKPX Yacute Odieresis -30\nKPX Yacute Ograve -30\nKPX Yacute Ohungarumlaut -30\nKPX Yacute Omacron -30\nKPX Yacute Oslash -30\nKPX Yacute Otilde -30\nKPX Yacute a -100\nKPX Yacute aacute -100\nKPX Yacute abreve -100\nKPX Yacute acircumflex -100\nKPX Yacute adieresis -60\nKPX Yacute agrave -60\nKPX Yacute amacron -60\nKPX Yacute aogonek -100\nKPX Yacute aring -100\nKPX Yacute atilde -60\nKPX Yacute colon -92\nKPX Yacute comma -129\nKPX Yacute e -100\nKPX Yacute eacute -100\nKPX Yacute ecaron -100\nKPX Yacute ecircumflex -100\nKPX Yacute edieresis -60\nKPX Yacute edotaccent -100\nKPX Yacute egrave -60\nKPX Yacute emacron -60\nKPX Yacute eogonek -100\nKPX Yacute hyphen -111\nKPX Yacute i -55\nKPX Yacute iacute -55\nKPX Yacute iogonek -55\nKPX Yacute o -110\nKPX Yacute oacute -110\nKPX Yacute ocircumflex -110\nKPX Yacute odieresis -70\nKPX Yacute ograve -70\nKPX Yacute ohungarumlaut -110\nKPX Yacute omacron -70\nKPX Yacute oslash -110\nKPX Yacute otilde -70\nKPX Yacute period -129\nKPX Yacute semicolon -92\nKPX Yacute u -111\nKPX Yacute uacute -111\nKPX Yacute ucircumflex -111\nKPX Yacute udieresis -71\nKPX Yacute ugrave -71\nKPX Yacute uhungarumlaut -111\nKPX Yacute umacron -71\nKPX Yacute uogonek -111\nKPX Yacute uring -111\nKPX Ydieresis A -120\nKPX Ydieresis Aacute -120\nKPX Ydieresis Abreve -120\nKPX Ydieresis Acircumflex -120\nKPX Ydieresis Adieresis -120\nKPX Ydieresis Agrave -120\nKPX Ydieresis Amacron -120\nKPX Ydieresis Aogonek -120\nKPX Ydieresis Aring -120\nKPX Ydieresis Atilde -120\nKPX Ydieresis O -30\nKPX Ydieresis Oacute -30\nKPX Ydieresis Ocircumflex -30\nKPX Ydieresis Odieresis -30\nKPX Ydieresis Ograve -30\nKPX Ydieresis Ohungarumlaut -30\nKPX Ydieresis Omacron -30\nKPX Ydieresis Oslash -30\nKPX Ydieresis Otilde -30\nKPX Ydieresis a -100\nKPX Ydieresis aacute -100\nKPX Ydieresis abreve -100\nKPX Ydieresis acircumflex -100\nKPX Ydieresis adieresis -60\nKPX Ydieresis agrave -60\nKPX Ydieresis amacron -60\nKPX Ydieresis aogonek -100\nKPX Ydieresis aring -100\nKPX Ydieresis atilde -100\nKPX Ydieresis colon -92\nKPX Ydieresis comma -129\nKPX Ydieresis e -100\nKPX Ydieresis eacute -100\nKPX Ydieresis ecaron -100\nKPX Ydieresis ecircumflex -100\nKPX Ydieresis edieresis -60\nKPX Ydieresis edotaccent -100\nKPX Ydieresis egrave -60\nKPX Ydieresis emacron -60\nKPX Ydieresis eogonek -100\nKPX Ydieresis hyphen -111\nKPX Ydieresis i -55\nKPX Ydieresis iacute -55\nKPX Ydieresis iogonek -55\nKPX Ydieresis o -110\nKPX Ydieresis oacute -110\nKPX Ydieresis ocircumflex -110\nKPX Ydieresis odieresis -70\nKPX Ydieresis ograve -70\nKPX Ydieresis ohungarumlaut -110\nKPX Ydieresis omacron -70\nKPX Ydieresis oslash -110\nKPX Ydieresis otilde -70\nKPX Ydieresis period -129\nKPX Ydieresis semicolon -92\nKPX Ydieresis u -111\nKPX Ydieresis uacute -111\nKPX Ydieresis ucircumflex -111\nKPX Ydieresis udieresis -71\nKPX Ydieresis ugrave -71\nKPX Ydieresis uhungarumlaut -111\nKPX Ydieresis umacron -71\nKPX Ydieresis uogonek -111\nKPX Ydieresis uring -111\nKPX a v -20\nKPX a w -15\nKPX aacute v -20\nKPX aacute w -15\nKPX abreve v -20\nKPX abreve w -15\nKPX acircumflex v -20\nKPX acircumflex w -15\nKPX adieresis v -20\nKPX adieresis w -15\nKPX agrave v -20\nKPX agrave w -15\nKPX amacron v -20\nKPX amacron w -15\nKPX aogonek v -20\nKPX aogonek w -15\nKPX aring v -20\nKPX aring w -15\nKPX atilde v -20\nKPX atilde w -15\nKPX b period -40\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX b v -15\nKPX c y -15\nKPX c yacute -15\nKPX c ydieresis -15\nKPX cacute y -15\nKPX cacute yacute -15\nKPX cacute ydieresis -15\nKPX ccaron y -15\nKPX ccaron yacute -15\nKPX ccaron ydieresis -15\nKPX ccedilla y -15\nKPX ccedilla yacute -15\nKPX ccedilla ydieresis -15\nKPX comma quotedblright -70\nKPX comma quoteright -70\nKPX e g -15\nKPX e gbreve -15\nKPX e gcommaaccent -15\nKPX e v -25\nKPX e w -25\nKPX e x -15\nKPX e y -15\nKPX e yacute -15\nKPX e ydieresis -15\nKPX eacute g -15\nKPX eacute gbreve -15\nKPX eacute gcommaaccent -15\nKPX eacute v -25\nKPX eacute w -25\nKPX eacute x -15\nKPX eacute y -15\nKPX eacute yacute -15\nKPX eacute ydieresis -15\nKPX ecaron g -15\nKPX ecaron gbreve -15\nKPX ecaron gcommaaccent -15\nKPX ecaron v -25\nKPX ecaron w -25\nKPX ecaron x -15\nKPX ecaron y -15\nKPX ecaron yacute -15\nKPX ecaron ydieresis -15\nKPX ecircumflex g -15\nKPX ecircumflex gbreve -15\nKPX ecircumflex gcommaaccent -15\nKPX ecircumflex v -25\nKPX ecircumflex w -25\nKPX ecircumflex x -15\nKPX ecircumflex y -15\nKPX ecircumflex yacute -15\nKPX ecircumflex ydieresis -15\nKPX edieresis g -15\nKPX edieresis gbreve -15\nKPX edieresis gcommaaccent -15\nKPX edieresis v -25\nKPX edieresis w -25\nKPX edieresis x -15\nKPX edieresis y -15\nKPX edieresis yacute -15\nKPX edieresis ydieresis -15\nKPX edotaccent g -15\nKPX edotaccent gbreve -15\nKPX edotaccent gcommaaccent -15\nKPX edotaccent v -25\nKPX edotaccent w -25\nKPX edotaccent x -15\nKPX edotaccent y -15\nKPX edotaccent yacute -15\nKPX edotaccent ydieresis -15\nKPX egrave g -15\nKPX egrave gbreve -15\nKPX egrave gcommaaccent -15\nKPX egrave v -25\nKPX egrave w -25\nKPX egrave x -15\nKPX egrave y -15\nKPX egrave yacute -15\nKPX egrave ydieresis -15\nKPX emacron g -15\nKPX emacron gbreve -15\nKPX emacron gcommaaccent -15\nKPX emacron v -25\nKPX emacron w -25\nKPX emacron x -15\nKPX emacron y -15\nKPX emacron yacute -15\nKPX emacron ydieresis -15\nKPX eogonek g -15\nKPX eogonek gbreve -15\nKPX eogonek gcommaaccent -15\nKPX eogonek v -25\nKPX eogonek w -25\nKPX eogonek x -15\nKPX eogonek y -15\nKPX eogonek yacute -15\nKPX eogonek ydieresis -15\nKPX f a -10\nKPX f aacute -10\nKPX f abreve -10\nKPX f acircumflex -10\nKPX f adieresis -10\nKPX f agrave -10\nKPX f amacron -10\nKPX f aogonek -10\nKPX f aring -10\nKPX f atilde -10\nKPX f dotlessi -50\nKPX f f -25\nKPX f i -20\nKPX f iacute -20\nKPX f quoteright 55\nKPX g a -5\nKPX g aacute -5\nKPX g abreve -5\nKPX g acircumflex -5\nKPX g adieresis -5\nKPX g agrave -5\nKPX g amacron -5\nKPX g aogonek -5\nKPX g aring -5\nKPX g atilde -5\nKPX gbreve a -5\nKPX gbreve aacute -5\nKPX gbreve abreve -5\nKPX gbreve acircumflex -5\nKPX gbreve adieresis -5\nKPX gbreve agrave -5\nKPX gbreve amacron -5\nKPX gbreve aogonek -5\nKPX gbreve aring -5\nKPX gbreve atilde -5\nKPX gcommaaccent a -5\nKPX gcommaaccent aacute -5\nKPX gcommaaccent abreve -5\nKPX gcommaaccent acircumflex -5\nKPX gcommaaccent adieresis -5\nKPX gcommaaccent agrave -5\nKPX gcommaaccent amacron -5\nKPX gcommaaccent aogonek -5\nKPX gcommaaccent aring -5\nKPX gcommaaccent atilde -5\nKPX h y -5\nKPX h yacute -5\nKPX h ydieresis -5\nKPX i v -25\nKPX iacute v -25\nKPX icircumflex v -25\nKPX idieresis v -25\nKPX igrave v -25\nKPX imacron v -25\nKPX iogonek v -25\nKPX k e -10\nKPX k eacute -10\nKPX k ecaron -10\nKPX k ecircumflex -10\nKPX k edieresis -10\nKPX k edotaccent -10\nKPX k egrave -10\nKPX k emacron -10\nKPX k eogonek -10\nKPX k o -10\nKPX k oacute -10\nKPX k ocircumflex -10\nKPX k odieresis -10\nKPX k ograve -10\nKPX k ohungarumlaut -10\nKPX k omacron -10\nKPX k oslash -10\nKPX k otilde -10\nKPX k y -15\nKPX k yacute -15\nKPX k ydieresis -15\nKPX kcommaaccent e -10\nKPX kcommaaccent eacute -10\nKPX kcommaaccent ecaron -10\nKPX kcommaaccent ecircumflex -10\nKPX kcommaaccent edieresis -10\nKPX kcommaaccent edotaccent -10\nKPX kcommaaccent egrave -10\nKPX kcommaaccent emacron -10\nKPX kcommaaccent eogonek -10\nKPX kcommaaccent o -10\nKPX kcommaaccent oacute -10\nKPX kcommaaccent ocircumflex -10\nKPX kcommaaccent odieresis -10\nKPX kcommaaccent ograve -10\nKPX kcommaaccent ohungarumlaut -10\nKPX kcommaaccent omacron -10\nKPX kcommaaccent oslash -10\nKPX kcommaaccent otilde -10\nKPX kcommaaccent y -15\nKPX kcommaaccent yacute -15\nKPX kcommaaccent ydieresis -15\nKPX l w -10\nKPX lacute w -10\nKPX lcommaaccent w -10\nKPX lslash w -10\nKPX n v -40\nKPX n y -15\nKPX n yacute -15\nKPX n ydieresis -15\nKPX nacute v -40\nKPX nacute y -15\nKPX nacute yacute -15\nKPX nacute ydieresis -15\nKPX ncaron v -40\nKPX ncaron y -15\nKPX ncaron yacute -15\nKPX ncaron ydieresis -15\nKPX ncommaaccent v -40\nKPX ncommaaccent y -15\nKPX ncommaaccent yacute -15\nKPX ncommaaccent ydieresis -15\nKPX ntilde v -40\nKPX ntilde y -15\nKPX ntilde yacute -15\nKPX ntilde ydieresis -15\nKPX o v -15\nKPX o w -25\nKPX o y -10\nKPX o yacute -10\nKPX o ydieresis -10\nKPX oacute v -15\nKPX oacute w -25\nKPX oacute y -10\nKPX oacute yacute -10\nKPX oacute ydieresis -10\nKPX ocircumflex v -15\nKPX ocircumflex w -25\nKPX ocircumflex y -10\nKPX ocircumflex yacute -10\nKPX ocircumflex ydieresis -10\nKPX odieresis v -15\nKPX odieresis w -25\nKPX odieresis y -10\nKPX odieresis yacute -10\nKPX odieresis ydieresis -10\nKPX ograve v -15\nKPX ograve w -25\nKPX ograve y -10\nKPX ograve yacute -10\nKPX ograve ydieresis -10\nKPX ohungarumlaut v -15\nKPX ohungarumlaut w -25\nKPX ohungarumlaut y -10\nKPX ohungarumlaut yacute -10\nKPX ohungarumlaut ydieresis -10\nKPX omacron v -15\nKPX omacron w -25\nKPX omacron y -10\nKPX omacron yacute -10\nKPX omacron ydieresis -10\nKPX oslash v -15\nKPX oslash w -25\nKPX oslash y -10\nKPX oslash yacute -10\nKPX oslash ydieresis -10\nKPX otilde v -15\nKPX otilde w -25\nKPX otilde y -10\nKPX otilde yacute -10\nKPX otilde ydieresis -10\nKPX p y -10\nKPX p yacute -10\nKPX p ydieresis -10\nKPX period quotedblright -70\nKPX period quoteright -70\nKPX quotedblleft A -80\nKPX quotedblleft Aacute -80\nKPX quotedblleft Abreve -80\nKPX quotedblleft Acircumflex -80\nKPX quotedblleft Adieresis -80\nKPX quotedblleft Agrave -80\nKPX quotedblleft Amacron -80\nKPX quotedblleft Aogonek -80\nKPX quotedblleft Aring -80\nKPX quotedblleft Atilde -80\nKPX quoteleft A -80\nKPX quoteleft Aacute -80\nKPX quoteleft Abreve -80\nKPX quoteleft Acircumflex -80\nKPX quoteleft Adieresis -80\nKPX quoteleft Agrave -80\nKPX quoteleft Amacron -80\nKPX quoteleft Aogonek -80\nKPX quoteleft Aring -80\nKPX quoteleft Atilde -80\nKPX quoteleft quoteleft -74\nKPX quoteright d -50\nKPX quoteright dcroat -50\nKPX quoteright l -10\nKPX quoteright lacute -10\nKPX quoteright lcommaaccent -10\nKPX quoteright lslash -10\nKPX quoteright quoteright -74\nKPX quoteright r -50\nKPX quoteright racute -50\nKPX quoteright rcaron -50\nKPX quoteright rcommaaccent -50\nKPX quoteright s -55\nKPX quoteright sacute -55\nKPX quoteright scaron -55\nKPX quoteright scedilla -55\nKPX quoteright scommaaccent -55\nKPX quoteright space -74\nKPX quoteright t -18\nKPX quoteright tcommaaccent -18\nKPX quoteright v -50\nKPX r comma -40\nKPX r g -18\nKPX r gbreve -18\nKPX r gcommaaccent -18\nKPX r hyphen -20\nKPX r period -55\nKPX racute comma -40\nKPX racute g -18\nKPX racute gbreve -18\nKPX racute gcommaaccent -18\nKPX racute hyphen -20\nKPX racute period -55\nKPX rcaron comma -40\nKPX rcaron g -18\nKPX rcaron gbreve -18\nKPX rcaron gcommaaccent -18\nKPX rcaron hyphen -20\nKPX rcaron period -55\nKPX rcommaaccent comma -40\nKPX rcommaaccent g -18\nKPX rcommaaccent gbreve -18\nKPX rcommaaccent gcommaaccent -18\nKPX rcommaaccent hyphen -20\nKPX rcommaaccent period -55\nKPX space A -55\nKPX space Aacute -55\nKPX space Abreve -55\nKPX space Acircumflex -55\nKPX space Adieresis -55\nKPX space Agrave -55\nKPX space Amacron -55\nKPX space Aogonek -55\nKPX space Aring -55\nKPX space Atilde -55\nKPX space T -18\nKPX space Tcaron -18\nKPX space Tcommaaccent -18\nKPX space V -50\nKPX space W -30\nKPX space Y -90\nKPX space Yacute -90\nKPX space Ydieresis -90\nKPX v a -25\nKPX v aacute -25\nKPX v abreve -25\nKPX v acircumflex -25\nKPX v adieresis -25\nKPX v agrave -25\nKPX v amacron -25\nKPX v aogonek -25\nKPX v aring -25\nKPX v atilde -25\nKPX v comma -65\nKPX v e -15\nKPX v eacute -15\nKPX v ecaron -15\nKPX v ecircumflex -15\nKPX v edieresis -15\nKPX v edotaccent -15\nKPX v egrave -15\nKPX v emacron -15\nKPX v eogonek -15\nKPX v o -20\nKPX v oacute -20\nKPX v ocircumflex -20\nKPX v odieresis -20\nKPX v ograve -20\nKPX v ohungarumlaut -20\nKPX v omacron -20\nKPX v oslash -20\nKPX v otilde -20\nKPX v period -65\nKPX w a -10\nKPX w aacute -10\nKPX w abreve -10\nKPX w acircumflex -10\nKPX w adieresis -10\nKPX w agrave -10\nKPX w amacron -10\nKPX w aogonek -10\nKPX w aring -10\nKPX w atilde -10\nKPX w comma -65\nKPX w o -10\nKPX w oacute -10\nKPX w ocircumflex -10\nKPX w odieresis -10\nKPX w ograve -10\nKPX w ohungarumlaut -10\nKPX w omacron -10\nKPX w oslash -10\nKPX w otilde -10\nKPX w period -65\nKPX x e -15\nKPX x eacute -15\nKPX x ecaron -15\nKPX x ecircumflex -15\nKPX x edieresis -15\nKPX x edotaccent -15\nKPX x egrave -15\nKPX x emacron -15\nKPX x eogonek -15\nKPX y comma -65\nKPX y period -65\nKPX yacute comma -65\nKPX yacute period -65\nKPX ydieresis comma -65\nKPX ydieresis period -65\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 78
      "Times-Bold": function() {                                                                                       // 79
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:52:56 1997\nComment UniqueID 43065\nComment VMusage 41636 52661\nFontName Times-Bold\nFullName Times Bold\nFamilyName Times\nWeight Bold\nItalicAngle 0\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -168 -218 1000 935 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 676\nXHeight 461\nAscender 683\nDescender -217\nStdHW 44\nStdVW 139\nStartCharMetrics 315\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 333 ; N exclam ; B 81 -13 251 691 ;\nC 34 ; WX 555 ; N quotedbl ; B 83 404 472 691 ;\nC 35 ; WX 500 ; N numbersign ; B 4 0 496 700 ;\nC 36 ; WX 500 ; N dollar ; B 29 -99 472 750 ;\nC 37 ; WX 1000 ; N percent ; B 124 -14 877 692 ;\nC 38 ; WX 833 ; N ampersand ; B 62 -16 787 691 ;\nC 39 ; WX 333 ; N quoteright ; B 79 356 263 691 ;\nC 40 ; WX 333 ; N parenleft ; B 46 -168 306 694 ;\nC 41 ; WX 333 ; N parenright ; B 27 -168 287 694 ;\nC 42 ; WX 500 ; N asterisk ; B 56 255 447 691 ;\nC 43 ; WX 570 ; N plus ; B 33 0 537 506 ;\nC 44 ; WX 250 ; N comma ; B 39 -180 223 155 ;\nC 45 ; WX 333 ; N hyphen ; B 44 171 287 287 ;\nC 46 ; WX 250 ; N period ; B 41 -13 210 156 ;\nC 47 ; WX 278 ; N slash ; B -24 -19 302 691 ;\nC 48 ; WX 500 ; N zero ; B 24 -13 476 688 ;\nC 49 ; WX 500 ; N one ; B 65 0 442 688 ;\nC 50 ; WX 500 ; N two ; B 17 0 478 688 ;\nC 51 ; WX 500 ; N three ; B 16 -14 468 688 ;\nC 52 ; WX 500 ; N four ; B 19 0 475 688 ;\nC 53 ; WX 500 ; N five ; B 22 -8 470 676 ;\nC 54 ; WX 500 ; N six ; B 28 -13 475 688 ;\nC 55 ; WX 500 ; N seven ; B 17 0 477 676 ;\nC 56 ; WX 500 ; N eight ; B 28 -13 472 688 ;\nC 57 ; WX 500 ; N nine ; B 26 -13 473 688 ;\nC 58 ; WX 333 ; N colon ; B 82 -13 251 472 ;\nC 59 ; WX 333 ; N semicolon ; B 82 -180 266 472 ;\nC 60 ; WX 570 ; N less ; B 31 -8 539 514 ;\nC 61 ; WX 570 ; N equal ; B 33 107 537 399 ;\nC 62 ; WX 570 ; N greater ; B 31 -8 539 514 ;\nC 63 ; WX 500 ; N question ; B 57 -13 445 689 ;\nC 64 ; WX 930 ; N at ; B 108 -19 822 691 ;\nC 65 ; WX 722 ; N A ; B 9 0 689 690 ;\nC 66 ; WX 667 ; N B ; B 16 0 619 676 ;\nC 67 ; WX 722 ; N C ; B 49 -19 687 691 ;\nC 68 ; WX 722 ; N D ; B 14 0 690 676 ;\nC 69 ; WX 667 ; N E ; B 16 0 641 676 ;\nC 70 ; WX 611 ; N F ; B 16 0 583 676 ;\nC 71 ; WX 778 ; N G ; B 37 -19 755 691 ;\nC 72 ; WX 778 ; N H ; B 21 0 759 676 ;\nC 73 ; WX 389 ; N I ; B 20 0 370 676 ;\nC 74 ; WX 500 ; N J ; B 3 -96 479 676 ;\nC 75 ; WX 778 ; N K ; B 30 0 769 676 ;\nC 76 ; WX 667 ; N L ; B 19 0 638 676 ;\nC 77 ; WX 944 ; N M ; B 14 0 921 676 ;\nC 78 ; WX 722 ; N N ; B 16 -18 701 676 ;\nC 79 ; WX 778 ; N O ; B 35 -19 743 691 ;\nC 80 ; WX 611 ; N P ; B 16 0 600 676 ;\nC 81 ; WX 778 ; N Q ; B 35 -176 743 691 ;\nC 82 ; WX 722 ; N R ; B 26 0 715 676 ;\nC 83 ; WX 556 ; N S ; B 35 -19 513 692 ;\nC 84 ; WX 667 ; N T ; B 31 0 636 676 ;\nC 85 ; WX 722 ; N U ; B 16 -19 701 676 ;\nC 86 ; WX 722 ; N V ; B 16 -18 701 676 ;\nC 87 ; WX 1000 ; N W ; B 19 -15 981 676 ;\nC 88 ; WX 722 ; N X ; B 16 0 699 676 ;\nC 89 ; WX 722 ; N Y ; B 15 0 699 676 ;\nC 90 ; WX 667 ; N Z ; B 28 0 634 676 ;\nC 91 ; WX 333 ; N bracketleft ; B 67 -149 301 678 ;\nC 92 ; WX 278 ; N backslash ; B -25 -19 303 691 ;\nC 93 ; WX 333 ; N bracketright ; B 32 -149 266 678 ;\nC 94 ; WX 581 ; N asciicircum ; B 73 311 509 676 ;\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\nC 96 ; WX 333 ; N quoteleft ; B 70 356 254 691 ;\nC 97 ; WX 500 ; N a ; B 25 -14 488 473 ;\nC 98 ; WX 556 ; N b ; B 17 -14 521 676 ;\nC 99 ; WX 444 ; N c ; B 25 -14 430 473 ;\nC 100 ; WX 556 ; N d ; B 25 -14 534 676 ;\nC 101 ; WX 444 ; N e ; B 25 -14 426 473 ;\nC 102 ; WX 333 ; N f ; B 14 0 389 691 ; L i fi ; L l fl ;\nC 103 ; WX 500 ; N g ; B 28 -206 483 473 ;\nC 104 ; WX 556 ; N h ; B 16 0 534 676 ;\nC 105 ; WX 278 ; N i ; B 16 0 255 691 ;\nC 106 ; WX 333 ; N j ; B -57 -203 263 691 ;\nC 107 ; WX 556 ; N k ; B 22 0 543 676 ;\nC 108 ; WX 278 ; N l ; B 16 0 255 676 ;\nC 109 ; WX 833 ; N m ; B 16 0 814 473 ;\nC 110 ; WX 556 ; N n ; B 21 0 539 473 ;\nC 111 ; WX 500 ; N o ; B 25 -14 476 473 ;\nC 112 ; WX 556 ; N p ; B 19 -205 524 473 ;\nC 113 ; WX 556 ; N q ; B 34 -205 536 473 ;\nC 114 ; WX 444 ; N r ; B 29 0 434 473 ;\nC 115 ; WX 389 ; N s ; B 25 -14 361 473 ;\nC 116 ; WX 333 ; N t ; B 20 -12 332 630 ;\nC 117 ; WX 556 ; N u ; B 16 -14 537 461 ;\nC 118 ; WX 500 ; N v ; B 21 -14 485 461 ;\nC 119 ; WX 722 ; N w ; B 23 -14 707 461 ;\nC 120 ; WX 500 ; N x ; B 12 0 484 461 ;\nC 121 ; WX 500 ; N y ; B 16 -205 480 461 ;\nC 122 ; WX 444 ; N z ; B 21 0 420 461 ;\nC 123 ; WX 394 ; N braceleft ; B 22 -175 340 698 ;\nC 124 ; WX 220 ; N bar ; B 66 -218 154 782 ;\nC 125 ; WX 394 ; N braceright ; B 54 -175 372 698 ;\nC 126 ; WX 520 ; N asciitilde ; B 29 173 491 333 ;\nC 161 ; WX 333 ; N exclamdown ; B 82 -203 252 501 ;\nC 162 ; WX 500 ; N cent ; B 53 -140 458 588 ;\nC 163 ; WX 500 ; N sterling ; B 21 -14 477 684 ;\nC 164 ; WX 167 ; N fraction ; B -168 -12 329 688 ;\nC 165 ; WX 500 ; N yen ; B -64 0 547 676 ;\nC 166 ; WX 500 ; N florin ; B 0 -155 498 706 ;\nC 167 ; WX 500 ; N section ; B 57 -132 443 691 ;\nC 168 ; WX 500 ; N currency ; B -26 61 526 613 ;\nC 169 ; WX 278 ; N quotesingle ; B 75 404 204 691 ;\nC 170 ; WX 500 ; N quotedblleft ; B 32 356 486 691 ;\nC 171 ; WX 500 ; N guillemotleft ; B 23 36 473 415 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 51 36 305 415 ;\nC 173 ; WX 333 ; N guilsinglright ; B 28 36 282 415 ;\nC 174 ; WX 556 ; N fi ; B 14 0 536 691 ;\nC 175 ; WX 556 ; N fl ; B 14 0 536 691 ;\nC 177 ; WX 500 ; N endash ; B 0 181 500 271 ;\nC 178 ; WX 500 ; N dagger ; B 47 -134 453 691 ;\nC 179 ; WX 500 ; N daggerdbl ; B 45 -132 456 691 ;\nC 180 ; WX 250 ; N periodcentered ; B 41 248 210 417 ;\nC 182 ; WX 540 ; N paragraph ; B 0 -186 519 676 ;\nC 183 ; WX 350 ; N bullet ; B 35 198 315 478 ;\nC 184 ; WX 333 ; N quotesinglbase ; B 79 -180 263 155 ;\nC 185 ; WX 500 ; N quotedblbase ; B 14 -180 468 155 ;\nC 186 ; WX 500 ; N quotedblright ; B 14 356 468 691 ;\nC 187 ; WX 500 ; N guillemotright ; B 27 36 477 415 ;\nC 188 ; WX 1000 ; N ellipsis ; B 82 -13 917 156 ;\nC 189 ; WX 1000 ; N perthousand ; B 7 -29 995 706 ;\nC 191 ; WX 500 ; N questiondown ; B 55 -201 443 501 ;\nC 193 ; WX 333 ; N grave ; B 8 528 246 713 ;\nC 194 ; WX 333 ; N acute ; B 86 528 324 713 ;\nC 195 ; WX 333 ; N circumflex ; B -2 528 335 704 ;\nC 196 ; WX 333 ; N tilde ; B -16 547 349 674 ;\nC 197 ; WX 333 ; N macron ; B 1 565 331 637 ;\nC 198 ; WX 333 ; N breve ; B 15 528 318 691 ;\nC 199 ; WX 333 ; N dotaccent ; B 103 536 258 691 ;\nC 200 ; WX 333 ; N dieresis ; B -2 537 335 667 ;\nC 202 ; WX 333 ; N ring ; B 60 527 273 740 ;\nC 203 ; WX 333 ; N cedilla ; B 68 -218 294 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B -13 528 425 713 ;\nC 206 ; WX 333 ; N ogonek ; B 90 -193 319 24 ;\nC 207 ; WX 333 ; N caron ; B -2 528 335 704 ;\nC 208 ; WX 1000 ; N emdash ; B 0 181 1000 271 ;\nC 225 ; WX 1000 ; N AE ; B 4 0 951 676 ;\nC 227 ; WX 300 ; N ordfeminine ; B -1 397 301 688 ;\nC 232 ; WX 667 ; N Lslash ; B 19 0 638 676 ;\nC 233 ; WX 778 ; N Oslash ; B 35 -74 743 737 ;\nC 234 ; WX 1000 ; N OE ; B 22 -5 981 684 ;\nC 235 ; WX 330 ; N ordmasculine ; B 18 397 312 688 ;\nC 241 ; WX 722 ; N ae ; B 33 -14 693 473 ;\nC 245 ; WX 278 ; N dotlessi ; B 16 0 255 461 ;\nC 248 ; WX 278 ; N lslash ; B -22 0 303 676 ;\nC 249 ; WX 500 ; N oslash ; B 25 -92 476 549 ;\nC 250 ; WX 722 ; N oe ; B 22 -14 696 473 ;\nC 251 ; WX 556 ; N germandbls ; B 19 -12 517 691 ;\nC -1 ; WX 389 ; N Idieresis ; B 20 0 370 877 ;\nC -1 ; WX 444 ; N eacute ; B 25 -14 426 713 ;\nC -1 ; WX 500 ; N abreve ; B 25 -14 488 691 ;\nC -1 ; WX 556 ; N uhungarumlaut ; B 16 -14 557 713 ;\nC -1 ; WX 444 ; N ecaron ; B 25 -14 426 704 ;\nC -1 ; WX 722 ; N Ydieresis ; B 15 0 699 877 ;\nC -1 ; WX 570 ; N divide ; B 33 -31 537 537 ;\nC -1 ; WX 722 ; N Yacute ; B 15 0 699 923 ;\nC -1 ; WX 722 ; N Acircumflex ; B 9 0 689 914 ;\nC -1 ; WX 500 ; N aacute ; B 25 -14 488 713 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 16 -19 701 914 ;\nC -1 ; WX 500 ; N yacute ; B 16 -205 480 713 ;\nC -1 ; WX 389 ; N scommaaccent ; B 25 -218 361 473 ;\nC -1 ; WX 444 ; N ecircumflex ; B 25 -14 426 704 ;\nC -1 ; WX 722 ; N Uring ; B 16 -19 701 935 ;\nC -1 ; WX 722 ; N Udieresis ; B 16 -19 701 877 ;\nC -1 ; WX 500 ; N aogonek ; B 25 -193 504 473 ;\nC -1 ; WX 722 ; N Uacute ; B 16 -19 701 923 ;\nC -1 ; WX 556 ; N uogonek ; B 16 -193 539 461 ;\nC -1 ; WX 667 ; N Edieresis ; B 16 0 641 877 ;\nC -1 ; WX 722 ; N Dcroat ; B 6 0 690 676 ;\nC -1 ; WX 250 ; N commaaccent ; B 47 -218 203 -50 ;\nC -1 ; WX 747 ; N copyright ; B 26 -19 721 691 ;\nC -1 ; WX 667 ; N Emacron ; B 16 0 641 847 ;\nC -1 ; WX 444 ; N ccaron ; B 25 -14 430 704 ;\nC -1 ; WX 500 ; N aring ; B 25 -14 488 740 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B 16 -188 701 676 ;\nC -1 ; WX 278 ; N lacute ; B 16 0 297 923 ;\nC -1 ; WX 500 ; N agrave ; B 25 -14 488 713 ;\nC -1 ; WX 667 ; N Tcommaaccent ; B 31 -218 636 676 ;\nC -1 ; WX 722 ; N Cacute ; B 49 -19 687 923 ;\nC -1 ; WX 500 ; N atilde ; B 25 -14 488 674 ;\nC -1 ; WX 667 ; N Edotaccent ; B 16 0 641 901 ;\nC -1 ; WX 389 ; N scaron ; B 25 -14 363 704 ;\nC -1 ; WX 389 ; N scedilla ; B 25 -218 361 473 ;\nC -1 ; WX 278 ; N iacute ; B 16 0 289 713 ;\nC -1 ; WX 494 ; N lozenge ; B 10 0 484 745 ;\nC -1 ; WX 722 ; N Rcaron ; B 26 0 715 914 ;\nC -1 ; WX 778 ; N Gcommaaccent ; B 37 -218 755 691 ;\nC -1 ; WX 556 ; N ucircumflex ; B 16 -14 537 704 ;\nC -1 ; WX 500 ; N acircumflex ; B 25 -14 488 704 ;\nC -1 ; WX 722 ; N Amacron ; B 9 0 689 847 ;\nC -1 ; WX 444 ; N rcaron ; B 29 0 434 704 ;\nC -1 ; WX 444 ; N ccedilla ; B 25 -218 430 473 ;\nC -1 ; WX 667 ; N Zdotaccent ; B 28 0 634 901 ;\nC -1 ; WX 611 ; N Thorn ; B 16 0 600 676 ;\nC -1 ; WX 778 ; N Omacron ; B 35 -19 743 847 ;\nC -1 ; WX 722 ; N Racute ; B 26 0 715 923 ;\nC -1 ; WX 556 ; N Sacute ; B 35 -19 513 923 ;\nC -1 ; WX 672 ; N dcaron ; B 25 -14 681 682 ;\nC -1 ; WX 722 ; N Umacron ; B 16 -19 701 847 ;\nC -1 ; WX 556 ; N uring ; B 16 -14 537 740 ;\nC -1 ; WX 300 ; N threesuperior ; B 3 268 297 688 ;\nC -1 ; WX 778 ; N Ograve ; B 35 -19 743 923 ;\nC -1 ; WX 722 ; N Agrave ; B 9 0 689 923 ;\nC -1 ; WX 722 ; N Abreve ; B 9 0 689 901 ;\nC -1 ; WX 570 ; N multiply ; B 48 16 522 490 ;\nC -1 ; WX 556 ; N uacute ; B 16 -14 537 713 ;\nC -1 ; WX 667 ; N Tcaron ; B 31 0 636 914 ;\nC -1 ; WX 494 ; N partialdiff ; B 11 -21 494 750 ;\nC -1 ; WX 500 ; N ydieresis ; B 16 -205 480 667 ;\nC -1 ; WX 722 ; N Nacute ; B 16 -18 701 923 ;\nC -1 ; WX 278 ; N icircumflex ; B -37 0 300 704 ;\nC -1 ; WX 667 ; N Ecircumflex ; B 16 0 641 914 ;\nC -1 ; WX 500 ; N adieresis ; B 25 -14 488 667 ;\nC -1 ; WX 444 ; N edieresis ; B 25 -14 426 667 ;\nC -1 ; WX 444 ; N cacute ; B 25 -14 430 713 ;\nC -1 ; WX 556 ; N nacute ; B 21 0 539 713 ;\nC -1 ; WX 556 ; N umacron ; B 16 -14 537 637 ;\nC -1 ; WX 722 ; N Ncaron ; B 16 -18 701 914 ;\nC -1 ; WX 389 ; N Iacute ; B 20 0 370 923 ;\nC -1 ; WX 570 ; N plusminus ; B 33 0 537 506 ;\nC -1 ; WX 220 ; N brokenbar ; B 66 -143 154 707 ;\nC -1 ; WX 747 ; N registered ; B 26 -19 721 691 ;\nC -1 ; WX 778 ; N Gbreve ; B 37 -19 755 901 ;\nC -1 ; WX 389 ; N Idotaccent ; B 20 0 370 901 ;\nC -1 ; WX 600 ; N summation ; B 14 -10 585 706 ;\nC -1 ; WX 667 ; N Egrave ; B 16 0 641 923 ;\nC -1 ; WX 444 ; N racute ; B 29 0 434 713 ;\nC -1 ; WX 500 ; N omacron ; B 25 -14 476 637 ;\nC -1 ; WX 667 ; N Zacute ; B 28 0 634 923 ;\nC -1 ; WX 667 ; N Zcaron ; B 28 0 634 914 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 704 ;\nC -1 ; WX 722 ; N Eth ; B 6 0 690 676 ;\nC -1 ; WX 722 ; N Ccedilla ; B 49 -218 687 691 ;\nC -1 ; WX 278 ; N lcommaaccent ; B 16 -218 255 676 ;\nC -1 ; WX 416 ; N tcaron ; B 20 -12 425 815 ;\nC -1 ; WX 444 ; N eogonek ; B 25 -193 426 473 ;\nC -1 ; WX 722 ; N Uogonek ; B 16 -193 701 676 ;\nC -1 ; WX 722 ; N Aacute ; B 9 0 689 923 ;\nC -1 ; WX 722 ; N Adieresis ; B 9 0 689 877 ;\nC -1 ; WX 444 ; N egrave ; B 25 -14 426 713 ;\nC -1 ; WX 444 ; N zacute ; B 21 0 420 713 ;\nC -1 ; WX 278 ; N iogonek ; B 16 -193 274 691 ;\nC -1 ; WX 778 ; N Oacute ; B 35 -19 743 923 ;\nC -1 ; WX 500 ; N oacute ; B 25 -14 476 713 ;\nC -1 ; WX 500 ; N amacron ; B 25 -14 488 637 ;\nC -1 ; WX 389 ; N sacute ; B 25 -14 361 713 ;\nC -1 ; WX 278 ; N idieresis ; B -37 0 300 667 ;\nC -1 ; WX 778 ; N Ocircumflex ; B 35 -19 743 914 ;\nC -1 ; WX 722 ; N Ugrave ; B 16 -19 701 923 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 556 ; N thorn ; B 19 -205 524 676 ;\nC -1 ; WX 300 ; N twosuperior ; B 0 275 300 688 ;\nC -1 ; WX 778 ; N Odieresis ; B 35 -19 743 877 ;\nC -1 ; WX 556 ; N mu ; B 33 -206 536 461 ;\nC -1 ; WX 278 ; N igrave ; B -27 0 255 713 ;\nC -1 ; WX 500 ; N ohungarumlaut ; B 25 -14 529 713 ;\nC -1 ; WX 667 ; N Eogonek ; B 16 -193 644 676 ;\nC -1 ; WX 556 ; N dcroat ; B 25 -14 534 676 ;\nC -1 ; WX 750 ; N threequarters ; B 23 -12 733 688 ;\nC -1 ; WX 556 ; N Scedilla ; B 35 -218 513 692 ;\nC -1 ; WX 394 ; N lcaron ; B 16 0 412 682 ;\nC -1 ; WX 778 ; N Kcommaaccent ; B 30 -218 769 676 ;\nC -1 ; WX 667 ; N Lacute ; B 19 0 638 923 ;\nC -1 ; WX 1000 ; N trademark ; B 24 271 977 676 ;\nC -1 ; WX 444 ; N edotaccent ; B 25 -14 426 691 ;\nC -1 ; WX 389 ; N Igrave ; B 20 0 370 923 ;\nC -1 ; WX 389 ; N Imacron ; B 20 0 370 847 ;\nC -1 ; WX 667 ; N Lcaron ; B 19 0 652 682 ;\nC -1 ; WX 750 ; N onehalf ; B -7 -12 775 688 ;\nC -1 ; WX 549 ; N lessequal ; B 29 0 526 704 ;\nC -1 ; WX 500 ; N ocircumflex ; B 25 -14 476 704 ;\nC -1 ; WX 556 ; N ntilde ; B 21 0 539 674 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 16 -19 701 923 ;\nC -1 ; WX 667 ; N Eacute ; B 16 0 641 923 ;\nC -1 ; WX 444 ; N emacron ; B 25 -14 426 637 ;\nC -1 ; WX 500 ; N gbreve ; B 28 -206 483 691 ;\nC -1 ; WX 750 ; N onequarter ; B 28 -12 743 688 ;\nC -1 ; WX 556 ; N Scaron ; B 35 -19 513 914 ;\nC -1 ; WX 556 ; N Scommaaccent ; B 35 -218 513 692 ;\nC -1 ; WX 778 ; N Ohungarumlaut ; B 35 -19 743 923 ;\nC -1 ; WX 400 ; N degree ; B 57 402 343 688 ;\nC -1 ; WX 500 ; N ograve ; B 25 -14 476 713 ;\nC -1 ; WX 722 ; N Ccaron ; B 49 -19 687 914 ;\nC -1 ; WX 556 ; N ugrave ; B 16 -14 537 713 ;\nC -1 ; WX 549 ; N radical ; B 10 -46 512 850 ;\nC -1 ; WX 722 ; N Dcaron ; B 14 0 690 914 ;\nC -1 ; WX 444 ; N rcommaaccent ; B 29 -218 434 473 ;\nC -1 ; WX 722 ; N Ntilde ; B 16 -18 701 884 ;\nC -1 ; WX 500 ; N otilde ; B 25 -14 476 674 ;\nC -1 ; WX 722 ; N Rcommaaccent ; B 26 -218 715 676 ;\nC -1 ; WX 667 ; N Lcommaaccent ; B 19 -218 638 676 ;\nC -1 ; WX 722 ; N Atilde ; B 9 0 689 884 ;\nC -1 ; WX 722 ; N Aogonek ; B 9 -193 699 690 ;\nC -1 ; WX 722 ; N Aring ; B 9 0 689 935 ;\nC -1 ; WX 778 ; N Otilde ; B 35 -19 743 884 ;\nC -1 ; WX 444 ; N zdotaccent ; B 21 0 420 691 ;\nC -1 ; WX 667 ; N Ecaron ; B 16 0 641 914 ;\nC -1 ; WX 389 ; N Iogonek ; B 20 -193 370 676 ;\nC -1 ; WX 556 ; N kcommaaccent ; B 22 -218 543 676 ;\nC -1 ; WX 570 ; N minus ; B 33 209 537 297 ;\nC -1 ; WX 389 ; N Icircumflex ; B 20 0 370 914 ;\nC -1 ; WX 556 ; N ncaron ; B 21 0 539 704 ;\nC -1 ; WX 333 ; N tcommaaccent ; B 20 -218 332 630 ;\nC -1 ; WX 570 ; N logicalnot ; B 33 108 537 399 ;\nC -1 ; WX 500 ; N odieresis ; B 25 -14 476 667 ;\nC -1 ; WX 556 ; N udieresis ; B 16 -14 537 667 ;\nC -1 ; WX 549 ; N notequal ; B 15 -49 540 570 ;\nC -1 ; WX 500 ; N gcommaaccent ; B 28 -206 483 829 ;\nC -1 ; WX 500 ; N eth ; B 25 -14 476 691 ;\nC -1 ; WX 444 ; N zcaron ; B 21 0 420 704 ;\nC -1 ; WX 556 ; N ncommaaccent ; B 21 -218 539 473 ;\nC -1 ; WX 300 ; N onesuperior ; B 28 275 273 688 ;\nC -1 ; WX 278 ; N imacron ; B -8 0 272 637 ;\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2242\nKPX A C -55\nKPX A Cacute -55\nKPX A Ccaron -55\nKPX A Ccedilla -55\nKPX A G -55\nKPX A Gbreve -55\nKPX A Gcommaaccent -55\nKPX A O -45\nKPX A Oacute -45\nKPX A Ocircumflex -45\nKPX A Odieresis -45\nKPX A Ograve -45\nKPX A Ohungarumlaut -45\nKPX A Omacron -45\nKPX A Oslash -45\nKPX A Otilde -45\nKPX A Q -45\nKPX A T -95\nKPX A Tcaron -95\nKPX A Tcommaaccent -95\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -145\nKPX A W -130\nKPX A Y -100\nKPX A Yacute -100\nKPX A Ydieresis -100\nKPX A p -25\nKPX A quoteright -74\nKPX A u -50\nKPX A uacute -50\nKPX A ucircumflex -50\nKPX A udieresis -50\nKPX A ugrave -50\nKPX A uhungarumlaut -50\nKPX A umacron -50\nKPX A uogonek -50\nKPX A uring -50\nKPX A v -100\nKPX A w -90\nKPX A y -74\nKPX A yacute -74\nKPX A ydieresis -74\nKPX Aacute C -55\nKPX Aacute Cacute -55\nKPX Aacute Ccaron -55\nKPX Aacute Ccedilla -55\nKPX Aacute G -55\nKPX Aacute Gbreve -55\nKPX Aacute Gcommaaccent -55\nKPX Aacute O -45\nKPX Aacute Oacute -45\nKPX Aacute Ocircumflex -45\nKPX Aacute Odieresis -45\nKPX Aacute Ograve -45\nKPX Aacute Ohungarumlaut -45\nKPX Aacute Omacron -45\nKPX Aacute Oslash -45\nKPX Aacute Otilde -45\nKPX Aacute Q -45\nKPX Aacute T -95\nKPX Aacute Tcaron -95\nKPX Aacute Tcommaaccent -95\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -145\nKPX Aacute W -130\nKPX Aacute Y -100\nKPX Aacute Yacute -100\nKPX Aacute Ydieresis -100\nKPX Aacute p -25\nKPX Aacute quoteright -74\nKPX Aacute u -50\nKPX Aacute uacute -50\nKPX Aacute ucircumflex -50\nKPX Aacute udieresis -50\nKPX Aacute ugrave -50\nKPX Aacute uhungarumlaut -50\nKPX Aacute umacron -50\nKPX Aacute uogonek -50\nKPX Aacute uring -50\nKPX Aacute v -100\nKPX Aacute w -90\nKPX Aacute y -74\nKPX Aacute yacute -74\nKPX Aacute ydieresis -74\nKPX Abreve C -55\nKPX Abreve Cacute -55\nKPX Abreve Ccaron -55\nKPX Abreve Ccedilla -55\nKPX Abreve G -55\nKPX Abreve Gbreve -55\nKPX Abreve Gcommaaccent -55\nKPX Abreve O -45\nKPX Abreve Oacute -45\nKPX Abreve Ocircumflex -45\nKPX Abreve Odieresis -45\nKPX Abreve Ograve -45\nKPX Abreve Ohungarumlaut -45\nKPX Abreve Omacron -45\nKPX Abreve Oslash -45\nKPX Abreve Otilde -45\nKPX Abreve Q -45\nKPX Abreve T -95\nKPX Abreve Tcaron -95\nKPX Abreve Tcommaaccent -95\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -145\nKPX Abreve W -130\nKPX Abreve Y -100\nKPX Abreve Yacute -100\nKPX Abreve Ydieresis -100\nKPX Abreve p -25\nKPX Abreve quoteright -74\nKPX Abreve u -50\nKPX Abreve uacute -50\nKPX Abreve ucircumflex -50\nKPX Abreve udieresis -50\nKPX Abreve ugrave -50\nKPX Abreve uhungarumlaut -50\nKPX Abreve umacron -50\nKPX Abreve uogonek -50\nKPX Abreve uring -50\nKPX Abreve v -100\nKPX Abreve w -90\nKPX Abreve y -74\nKPX Abreve yacute -74\nKPX Abreve ydieresis -74\nKPX Acircumflex C -55\nKPX Acircumflex Cacute -55\nKPX Acircumflex Ccaron -55\nKPX Acircumflex Ccedilla -55\nKPX Acircumflex G -55\nKPX Acircumflex Gbreve -55\nKPX Acircumflex Gcommaaccent -55\nKPX Acircumflex O -45\nKPX Acircumflex Oacute -45\nKPX Acircumflex Ocircumflex -45\nKPX Acircumflex Odieresis -45\nKPX Acircumflex Ograve -45\nKPX Acircumflex Ohungarumlaut -45\nKPX Acircumflex Omacron -45\nKPX Acircumflex Oslash -45\nKPX Acircumflex Otilde -45\nKPX Acircumflex Q -45\nKPX Acircumflex T -95\nKPX Acircumflex Tcaron -95\nKPX Acircumflex Tcommaaccent -95\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -145\nKPX Acircumflex W -130\nKPX Acircumflex Y -100\nKPX Acircumflex Yacute -100\nKPX Acircumflex Ydieresis -100\nKPX Acircumflex p -25\nKPX Acircumflex quoteright -74\nKPX Acircumflex u -50\nKPX Acircumflex uacute -50\nKPX Acircumflex ucircumflex -50\nKPX Acircumflex udieresis -50\nKPX Acircumflex ugrave -50\nKPX Acircumflex uhungarumlaut -50\nKPX Acircumflex umacron -50\nKPX Acircumflex uogonek -50\nKPX Acircumflex uring -50\nKPX Acircumflex v -100\nKPX Acircumflex w -90\nKPX Acircumflex y -74\nKPX Acircumflex yacute -74\nKPX Acircumflex ydieresis -74\nKPX Adieresis C -55\nKPX Adieresis Cacute -55\nKPX Adieresis Ccaron -55\nKPX Adieresis Ccedilla -55\nKPX Adieresis G -55\nKPX Adieresis Gbreve -55\nKPX Adieresis Gcommaaccent -55\nKPX Adieresis O -45\nKPX Adieresis Oacute -45\nKPX Adieresis Ocircumflex -45\nKPX Adieresis Odieresis -45\nKPX Adieresis Ograve -45\nKPX Adieresis Ohungarumlaut -45\nKPX Adieresis Omacron -45\nKPX Adieresis Oslash -45\nKPX Adieresis Otilde -45\nKPX Adieresis Q -45\nKPX Adieresis T -95\nKPX Adieresis Tcaron -95\nKPX Adieresis Tcommaaccent -95\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -145\nKPX Adieresis W -130\nKPX Adieresis Y -100\nKPX Adieresis Yacute -100\nKPX Adieresis Ydieresis -100\nKPX Adieresis p -25\nKPX Adieresis quoteright -74\nKPX Adieresis u -50\nKPX Adieresis uacute -50\nKPX Adieresis ucircumflex -50\nKPX Adieresis udieresis -50\nKPX Adieresis ugrave -50\nKPX Adieresis uhungarumlaut -50\nKPX Adieresis umacron -50\nKPX Adieresis uogonek -50\nKPX Adieresis uring -50\nKPX Adieresis v -100\nKPX Adieresis w -90\nKPX Adieresis y -74\nKPX Adieresis yacute -74\nKPX Adieresis ydieresis -74\nKPX Agrave C -55\nKPX Agrave Cacute -55\nKPX Agrave Ccaron -55\nKPX Agrave Ccedilla -55\nKPX Agrave G -55\nKPX Agrave Gbreve -55\nKPX Agrave Gcommaaccent -55\nKPX Agrave O -45\nKPX Agrave Oacute -45\nKPX Agrave Ocircumflex -45\nKPX Agrave Odieresis -45\nKPX Agrave Ograve -45\nKPX Agrave Ohungarumlaut -45\nKPX Agrave Omacron -45\nKPX Agrave Oslash -45\nKPX Agrave Otilde -45\nKPX Agrave Q -45\nKPX Agrave T -95\nKPX Agrave Tcaron -95\nKPX Agrave Tcommaaccent -95\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -145\nKPX Agrave W -130\nKPX Agrave Y -100\nKPX Agrave Yacute -100\nKPX Agrave Ydieresis -100\nKPX Agrave p -25\nKPX Agrave quoteright -74\nKPX Agrave u -50\nKPX Agrave uacute -50\nKPX Agrave ucircumflex -50\nKPX Agrave udieresis -50\nKPX Agrave ugrave -50\nKPX Agrave uhungarumlaut -50\nKPX Agrave umacron -50\nKPX Agrave uogonek -50\nKPX Agrave uring -50\nKPX Agrave v -100\nKPX Agrave w -90\nKPX Agrave y -74\nKPX Agrave yacute -74\nKPX Agrave ydieresis -74\nKPX Amacron C -55\nKPX Amacron Cacute -55\nKPX Amacron Ccaron -55\nKPX Amacron Ccedilla -55\nKPX Amacron G -55\nKPX Amacron Gbreve -55\nKPX Amacron Gcommaaccent -55\nKPX Amacron O -45\nKPX Amacron Oacute -45\nKPX Amacron Ocircumflex -45\nKPX Amacron Odieresis -45\nKPX Amacron Ograve -45\nKPX Amacron Ohungarumlaut -45\nKPX Amacron Omacron -45\nKPX Amacron Oslash -45\nKPX Amacron Otilde -45\nKPX Amacron Q -45\nKPX Amacron T -95\nKPX Amacron Tcaron -95\nKPX Amacron Tcommaaccent -95\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -145\nKPX Amacron W -130\nKPX Amacron Y -100\nKPX Amacron Yacute -100\nKPX Amacron Ydieresis -100\nKPX Amacron p -25\nKPX Amacron quoteright -74\nKPX Amacron u -50\nKPX Amacron uacute -50\nKPX Amacron ucircumflex -50\nKPX Amacron udieresis -50\nKPX Amacron ugrave -50\nKPX Amacron uhungarumlaut -50\nKPX Amacron umacron -50\nKPX Amacron uogonek -50\nKPX Amacron uring -50\nKPX Amacron v -100\nKPX Amacron w -90\nKPX Amacron y -74\nKPX Amacron yacute -74\nKPX Amacron ydieresis -74\nKPX Aogonek C -55\nKPX Aogonek Cacute -55\nKPX Aogonek Ccaron -55\nKPX Aogonek Ccedilla -55\nKPX Aogonek G -55\nKPX Aogonek Gbreve -55\nKPX Aogonek Gcommaaccent -55\nKPX Aogonek O -45\nKPX Aogonek Oacute -45\nKPX Aogonek Ocircumflex -45\nKPX Aogonek Odieresis -45\nKPX Aogonek Ograve -45\nKPX Aogonek Ohungarumlaut -45\nKPX Aogonek Omacron -45\nKPX Aogonek Oslash -45\nKPX Aogonek Otilde -45\nKPX Aogonek Q -45\nKPX Aogonek T -95\nKPX Aogonek Tcaron -95\nKPX Aogonek Tcommaaccent -95\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -145\nKPX Aogonek W -130\nKPX Aogonek Y -100\nKPX Aogonek Yacute -100\nKPX Aogonek Ydieresis -100\nKPX Aogonek p -25\nKPX Aogonek quoteright -74\nKPX Aogonek u -50\nKPX Aogonek uacute -50\nKPX Aogonek ucircumflex -50\nKPX Aogonek udieresis -50\nKPX Aogonek ugrave -50\nKPX Aogonek uhungarumlaut -50\nKPX Aogonek umacron -50\nKPX Aogonek uogonek -50\nKPX Aogonek uring -50\nKPX Aogonek v -100\nKPX Aogonek w -90\nKPX Aogonek y -34\nKPX Aogonek yacute -34\nKPX Aogonek ydieresis -34\nKPX Aring C -55\nKPX Aring Cacute -55\nKPX Aring Ccaron -55\nKPX Aring Ccedilla -55\nKPX Aring G -55\nKPX Aring Gbreve -55\nKPX Aring Gcommaaccent -55\nKPX Aring O -45\nKPX Aring Oacute -45\nKPX Aring Ocircumflex -45\nKPX Aring Odieresis -45\nKPX Aring Ograve -45\nKPX Aring Ohungarumlaut -45\nKPX Aring Omacron -45\nKPX Aring Oslash -45\nKPX Aring Otilde -45\nKPX Aring Q -45\nKPX Aring T -95\nKPX Aring Tcaron -95\nKPX Aring Tcommaaccent -95\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -145\nKPX Aring W -130\nKPX Aring Y -100\nKPX Aring Yacute -100\nKPX Aring Ydieresis -100\nKPX Aring p -25\nKPX Aring quoteright -74\nKPX Aring u -50\nKPX Aring uacute -50\nKPX Aring ucircumflex -50\nKPX Aring udieresis -50\nKPX Aring ugrave -50\nKPX Aring uhungarumlaut -50\nKPX Aring umacron -50\nKPX Aring uogonek -50\nKPX Aring uring -50\nKPX Aring v -100\nKPX Aring w -90\nKPX Aring y -74\nKPX Aring yacute -74\nKPX Aring ydieresis -74\nKPX Atilde C -55\nKPX Atilde Cacute -55\nKPX Atilde Ccaron -55\nKPX Atilde Ccedilla -55\nKPX Atilde G -55\nKPX Atilde Gbreve -55\nKPX Atilde Gcommaaccent -55\nKPX Atilde O -45\nKPX Atilde Oacute -45\nKPX Atilde Ocircumflex -45\nKPX Atilde Odieresis -45\nKPX Atilde Ograve -45\nKPX Atilde Ohungarumlaut -45\nKPX Atilde Omacron -45\nKPX Atilde Oslash -45\nKPX Atilde Otilde -45\nKPX Atilde Q -45\nKPX Atilde T -95\nKPX Atilde Tcaron -95\nKPX Atilde Tcommaaccent -95\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -145\nKPX Atilde W -130\nKPX Atilde Y -100\nKPX Atilde Yacute -100\nKPX Atilde Ydieresis -100\nKPX Atilde p -25\nKPX Atilde quoteright -74\nKPX Atilde u -50\nKPX Atilde uacute -50\nKPX Atilde ucircumflex -50\nKPX Atilde udieresis -50\nKPX Atilde ugrave -50\nKPX Atilde uhungarumlaut -50\nKPX Atilde umacron -50\nKPX Atilde uogonek -50\nKPX Atilde uring -50\nKPX Atilde v -100\nKPX Atilde w -90\nKPX Atilde y -74\nKPX Atilde yacute -74\nKPX Atilde ydieresis -74\nKPX B A -30\nKPX B Aacute -30\nKPX B Abreve -30\nKPX B Acircumflex -30\nKPX B Adieresis -30\nKPX B Agrave -30\nKPX B Amacron -30\nKPX B Aogonek -30\nKPX B Aring -30\nKPX B Atilde -30\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX D A -35\nKPX D Aacute -35\nKPX D Abreve -35\nKPX D Acircumflex -35\nKPX D Adieresis -35\nKPX D Agrave -35\nKPX D Amacron -35\nKPX D Aogonek -35\nKPX D Aring -35\nKPX D Atilde -35\nKPX D V -40\nKPX D W -40\nKPX D Y -40\nKPX D Yacute -40\nKPX D Ydieresis -40\nKPX D period -20\nKPX Dcaron A -35\nKPX Dcaron Aacute -35\nKPX Dcaron Abreve -35\nKPX Dcaron Acircumflex -35\nKPX Dcaron Adieresis -35\nKPX Dcaron Agrave -35\nKPX Dcaron Amacron -35\nKPX Dcaron Aogonek -35\nKPX Dcaron Aring -35\nKPX Dcaron Atilde -35\nKPX Dcaron V -40\nKPX Dcaron W -40\nKPX Dcaron Y -40\nKPX Dcaron Yacute -40\nKPX Dcaron Ydieresis -40\nKPX Dcaron period -20\nKPX Dcroat A -35\nKPX Dcroat Aacute -35\nKPX Dcroat Abreve -35\nKPX Dcroat Acircumflex -35\nKPX Dcroat Adieresis -35\nKPX Dcroat Agrave -35\nKPX Dcroat Amacron -35\nKPX Dcroat Aogonek -35\nKPX Dcroat Aring -35\nKPX Dcroat Atilde -35\nKPX Dcroat V -40\nKPX Dcroat W -40\nKPX Dcroat Y -40\nKPX Dcroat Yacute -40\nKPX Dcroat Ydieresis -40\nKPX Dcroat period -20\nKPX F A -90\nKPX F Aacute -90\nKPX F Abreve -90\nKPX F Acircumflex -90\nKPX F Adieresis -90\nKPX F Agrave -90\nKPX F Amacron -90\nKPX F Aogonek -90\nKPX F Aring -90\nKPX F Atilde -90\nKPX F a -25\nKPX F aacute -25\nKPX F abreve -25\nKPX F acircumflex -25\nKPX F adieresis -25\nKPX F agrave -25\nKPX F amacron -25\nKPX F aogonek -25\nKPX F aring -25\nKPX F atilde -25\nKPX F comma -92\nKPX F e -25\nKPX F eacute -25\nKPX F ecaron -25\nKPX F ecircumflex -25\nKPX F edieresis -25\nKPX F edotaccent -25\nKPX F egrave -25\nKPX F emacron -25\nKPX F eogonek -25\nKPX F o -25\nKPX F oacute -25\nKPX F ocircumflex -25\nKPX F odieresis -25\nKPX F ograve -25\nKPX F ohungarumlaut -25\nKPX F omacron -25\nKPX F oslash -25\nKPX F otilde -25\nKPX F period -110\nKPX J A -30\nKPX J Aacute -30\nKPX J Abreve -30\nKPX J Acircumflex -30\nKPX J Adieresis -30\nKPX J Agrave -30\nKPX J Amacron -30\nKPX J Aogonek -30\nKPX J Aring -30\nKPX J Atilde -30\nKPX J a -15\nKPX J aacute -15\nKPX J abreve -15\nKPX J acircumflex -15\nKPX J adieresis -15\nKPX J agrave -15\nKPX J amacron -15\nKPX J aogonek -15\nKPX J aring -15\nKPX J atilde -15\nKPX J e -15\nKPX J eacute -15\nKPX J ecaron -15\nKPX J ecircumflex -15\nKPX J edieresis -15\nKPX J edotaccent -15\nKPX J egrave -15\nKPX J emacron -15\nKPX J eogonek -15\nKPX J o -15\nKPX J oacute -15\nKPX J ocircumflex -15\nKPX J odieresis -15\nKPX J ograve -15\nKPX J ohungarumlaut -15\nKPX J omacron -15\nKPX J oslash -15\nKPX J otilde -15\nKPX J period -20\nKPX J u -15\nKPX J uacute -15\nKPX J ucircumflex -15\nKPX J udieresis -15\nKPX J ugrave -15\nKPX J uhungarumlaut -15\nKPX J umacron -15\nKPX J uogonek -15\nKPX J uring -15\nKPX K O -30\nKPX K Oacute -30\nKPX K Ocircumflex -30\nKPX K Odieresis -30\nKPX K Ograve -30\nKPX K Ohungarumlaut -30\nKPX K Omacron -30\nKPX K Oslash -30\nKPX K Otilde -30\nKPX K e -25\nKPX K eacute -25\nKPX K ecaron -25\nKPX K ecircumflex -25\nKPX K edieresis -25\nKPX K edotaccent -25\nKPX K egrave -25\nKPX K emacron -25\nKPX K eogonek -25\nKPX K o -25\nKPX K oacute -25\nKPX K ocircumflex -25\nKPX K odieresis -25\nKPX K ograve -25\nKPX K ohungarumlaut -25\nKPX K omacron -25\nKPX K oslash -25\nKPX K otilde -25\nKPX K u -15\nKPX K uacute -15\nKPX K ucircumflex -15\nKPX K udieresis -15\nKPX K ugrave -15\nKPX K uhungarumlaut -15\nKPX K umacron -15\nKPX K uogonek -15\nKPX K uring -15\nKPX K y -45\nKPX K yacute -45\nKPX K ydieresis -45\nKPX Kcommaaccent O -30\nKPX Kcommaaccent Oacute -30\nKPX Kcommaaccent Ocircumflex -30\nKPX Kcommaaccent Odieresis -30\nKPX Kcommaaccent Ograve -30\nKPX Kcommaaccent Ohungarumlaut -30\nKPX Kcommaaccent Omacron -30\nKPX Kcommaaccent Oslash -30\nKPX Kcommaaccent Otilde -30\nKPX Kcommaaccent e -25\nKPX Kcommaaccent eacute -25\nKPX Kcommaaccent ecaron -25\nKPX Kcommaaccent ecircumflex -25\nKPX Kcommaaccent edieresis -25\nKPX Kcommaaccent edotaccent -25\nKPX Kcommaaccent egrave -25\nKPX Kcommaaccent emacron -25\nKPX Kcommaaccent eogonek -25\nKPX Kcommaaccent o -25\nKPX Kcommaaccent oacute -25\nKPX Kcommaaccent ocircumflex -25\nKPX Kcommaaccent odieresis -25\nKPX Kcommaaccent ograve -25\nKPX Kcommaaccent ohungarumlaut -25\nKPX Kcommaaccent omacron -25\nKPX Kcommaaccent oslash -25\nKPX Kcommaaccent otilde -25\nKPX Kcommaaccent u -15\nKPX Kcommaaccent uacute -15\nKPX Kcommaaccent ucircumflex -15\nKPX Kcommaaccent udieresis -15\nKPX Kcommaaccent ugrave -15\nKPX Kcommaaccent uhungarumlaut -15\nKPX Kcommaaccent umacron -15\nKPX Kcommaaccent uogonek -15\nKPX Kcommaaccent uring -15\nKPX Kcommaaccent y -45\nKPX Kcommaaccent yacute -45\nKPX Kcommaaccent ydieresis -45\nKPX L T -92\nKPX L Tcaron -92\nKPX L Tcommaaccent -92\nKPX L V -92\nKPX L W -92\nKPX L Y -92\nKPX L Yacute -92\nKPX L Ydieresis -92\nKPX L quotedblright -20\nKPX L quoteright -110\nKPX L y -55\nKPX L yacute -55\nKPX L ydieresis -55\nKPX Lacute T -92\nKPX Lacute Tcaron -92\nKPX Lacute Tcommaaccent -92\nKPX Lacute V -92\nKPX Lacute W -92\nKPX Lacute Y -92\nKPX Lacute Yacute -92\nKPX Lacute Ydieresis -92\nKPX Lacute quotedblright -20\nKPX Lacute quoteright -110\nKPX Lacute y -55\nKPX Lacute yacute -55\nKPX Lacute ydieresis -55\nKPX Lcommaaccent T -92\nKPX Lcommaaccent Tcaron -92\nKPX Lcommaaccent Tcommaaccent -92\nKPX Lcommaaccent V -92\nKPX Lcommaaccent W -92\nKPX Lcommaaccent Y -92\nKPX Lcommaaccent Yacute -92\nKPX Lcommaaccent Ydieresis -92\nKPX Lcommaaccent quotedblright -20\nKPX Lcommaaccent quoteright -110\nKPX Lcommaaccent y -55\nKPX Lcommaaccent yacute -55\nKPX Lcommaaccent ydieresis -55\nKPX Lslash T -92\nKPX Lslash Tcaron -92\nKPX Lslash Tcommaaccent -92\nKPX Lslash V -92\nKPX Lslash W -92\nKPX Lslash Y -92\nKPX Lslash Yacute -92\nKPX Lslash Ydieresis -92\nKPX Lslash quotedblright -20\nKPX Lslash quoteright -110\nKPX Lslash y -55\nKPX Lslash yacute -55\nKPX Lslash ydieresis -55\nKPX N A -20\nKPX N Aacute -20\nKPX N Abreve -20\nKPX N Acircumflex -20\nKPX N Adieresis -20\nKPX N Agrave -20\nKPX N Amacron -20\nKPX N Aogonek -20\nKPX N Aring -20\nKPX N Atilde -20\nKPX Nacute A -20\nKPX Nacute Aacute -20\nKPX Nacute Abreve -20\nKPX Nacute Acircumflex -20\nKPX Nacute Adieresis -20\nKPX Nacute Agrave -20\nKPX Nacute Amacron -20\nKPX Nacute Aogonek -20\nKPX Nacute Aring -20\nKPX Nacute Atilde -20\nKPX Ncaron A -20\nKPX Ncaron Aacute -20\nKPX Ncaron Abreve -20\nKPX Ncaron Acircumflex -20\nKPX Ncaron Adieresis -20\nKPX Ncaron Agrave -20\nKPX Ncaron Amacron -20\nKPX Ncaron Aogonek -20\nKPX Ncaron Aring -20\nKPX Ncaron Atilde -20\nKPX Ncommaaccent A -20\nKPX Ncommaaccent Aacute -20\nKPX Ncommaaccent Abreve -20\nKPX Ncommaaccent Acircumflex -20\nKPX Ncommaaccent Adieresis -20\nKPX Ncommaaccent Agrave -20\nKPX Ncommaaccent Amacron -20\nKPX Ncommaaccent Aogonek -20\nKPX Ncommaaccent Aring -20\nKPX Ncommaaccent Atilde -20\nKPX Ntilde A -20\nKPX Ntilde Aacute -20\nKPX Ntilde Abreve -20\nKPX Ntilde Acircumflex -20\nKPX Ntilde Adieresis -20\nKPX Ntilde Agrave -20\nKPX Ntilde Amacron -20\nKPX Ntilde Aogonek -20\nKPX Ntilde Aring -20\nKPX Ntilde Atilde -20\nKPX O A -40\nKPX O Aacute -40\nKPX O Abreve -40\nKPX O Acircumflex -40\nKPX O Adieresis -40\nKPX O Agrave -40\nKPX O Amacron -40\nKPX O Aogonek -40\nKPX O Aring -40\nKPX O Atilde -40\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -50\nKPX O X -40\nKPX O Y -50\nKPX O Yacute -50\nKPX O Ydieresis -50\nKPX Oacute A -40\nKPX Oacute Aacute -40\nKPX Oacute Abreve -40\nKPX Oacute Acircumflex -40\nKPX Oacute Adieresis -40\nKPX Oacute Agrave -40\nKPX Oacute Amacron -40\nKPX Oacute Aogonek -40\nKPX Oacute Aring -40\nKPX Oacute Atilde -40\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -50\nKPX Oacute X -40\nKPX Oacute Y -50\nKPX Oacute Yacute -50\nKPX Oacute Ydieresis -50\nKPX Ocircumflex A -40\nKPX Ocircumflex Aacute -40\nKPX Ocircumflex Abreve -40\nKPX Ocircumflex Acircumflex -40\nKPX Ocircumflex Adieresis -40\nKPX Ocircumflex Agrave -40\nKPX Ocircumflex Amacron -40\nKPX Ocircumflex Aogonek -40\nKPX Ocircumflex Aring -40\nKPX Ocircumflex Atilde -40\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -50\nKPX Ocircumflex X -40\nKPX Ocircumflex Y -50\nKPX Ocircumflex Yacute -50\nKPX Ocircumflex Ydieresis -50\nKPX Odieresis A -40\nKPX Odieresis Aacute -40\nKPX Odieresis Abreve -40\nKPX Odieresis Acircumflex -40\nKPX Odieresis Adieresis -40\nKPX Odieresis Agrave -40\nKPX Odieresis Amacron -40\nKPX Odieresis Aogonek -40\nKPX Odieresis Aring -40\nKPX Odieresis Atilde -40\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -50\nKPX Odieresis X -40\nKPX Odieresis Y -50\nKPX Odieresis Yacute -50\nKPX Odieresis Ydieresis -50\nKPX Ograve A -40\nKPX Ograve Aacute -40\nKPX Ograve Abreve -40\nKPX Ograve Acircumflex -40\nKPX Ograve Adieresis -40\nKPX Ograve Agrave -40\nKPX Ograve Amacron -40\nKPX Ograve Aogonek -40\nKPX Ograve Aring -40\nKPX Ograve Atilde -40\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -50\nKPX Ograve X -40\nKPX Ograve Y -50\nKPX Ograve Yacute -50\nKPX Ograve Ydieresis -50\nKPX Ohungarumlaut A -40\nKPX Ohungarumlaut Aacute -40\nKPX Ohungarumlaut Abreve -40\nKPX Ohungarumlaut Acircumflex -40\nKPX Ohungarumlaut Adieresis -40\nKPX Ohungarumlaut Agrave -40\nKPX Ohungarumlaut Amacron -40\nKPX Ohungarumlaut Aogonek -40\nKPX Ohungarumlaut Aring -40\nKPX Ohungarumlaut Atilde -40\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -50\nKPX Ohungarumlaut X -40\nKPX Ohungarumlaut Y -50\nKPX Ohungarumlaut Yacute -50\nKPX Ohungarumlaut Ydieresis -50\nKPX Omacron A -40\nKPX Omacron Aacute -40\nKPX Omacron Abreve -40\nKPX Omacron Acircumflex -40\nKPX Omacron Adieresis -40\nKPX Omacron Agrave -40\nKPX Omacron Amacron -40\nKPX Omacron Aogonek -40\nKPX Omacron Aring -40\nKPX Omacron Atilde -40\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -50\nKPX Omacron X -40\nKPX Omacron Y -50\nKPX Omacron Yacute -50\nKPX Omacron Ydieresis -50\nKPX Oslash A -40\nKPX Oslash Aacute -40\nKPX Oslash Abreve -40\nKPX Oslash Acircumflex -40\nKPX Oslash Adieresis -40\nKPX Oslash Agrave -40\nKPX Oslash Amacron -40\nKPX Oslash Aogonek -40\nKPX Oslash Aring -40\nKPX Oslash Atilde -40\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -50\nKPX Oslash X -40\nKPX Oslash Y -50\nKPX Oslash Yacute -50\nKPX Oslash Ydieresis -50\nKPX Otilde A -40\nKPX Otilde Aacute -40\nKPX Otilde Abreve -40\nKPX Otilde Acircumflex -40\nKPX Otilde Adieresis -40\nKPX Otilde Agrave -40\nKPX Otilde Amacron -40\nKPX Otilde Aogonek -40\nKPX Otilde Aring -40\nKPX Otilde Atilde -40\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -50\nKPX Otilde X -40\nKPX Otilde Y -50\nKPX Otilde Yacute -50\nKPX Otilde Ydieresis -50\nKPX P A -74\nKPX P Aacute -74\nKPX P Abreve -74\nKPX P Acircumflex -74\nKPX P Adieresis -74\nKPX P Agrave -74\nKPX P Amacron -74\nKPX P Aogonek -74\nKPX P Aring -74\nKPX P Atilde -74\nKPX P a -10\nKPX P aacute -10\nKPX P abreve -10\nKPX P acircumflex -10\nKPX P adieresis -10\nKPX P agrave -10\nKPX P amacron -10\nKPX P aogonek -10\nKPX P aring -10\nKPX P atilde -10\nKPX P comma -92\nKPX P e -20\nKPX P eacute -20\nKPX P ecaron -20\nKPX P ecircumflex -20\nKPX P edieresis -20\nKPX P edotaccent -20\nKPX P egrave -20\nKPX P emacron -20\nKPX P eogonek -20\nKPX P o -20\nKPX P oacute -20\nKPX P ocircumflex -20\nKPX P odieresis -20\nKPX P ograve -20\nKPX P ohungarumlaut -20\nKPX P omacron -20\nKPX P oslash -20\nKPX P otilde -20\nKPX P period -110\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX Q period -20\nKPX R O -30\nKPX R Oacute -30\nKPX R Ocircumflex -30\nKPX R Odieresis -30\nKPX R Ograve -30\nKPX R Ohungarumlaut -30\nKPX R Omacron -30\nKPX R Oslash -30\nKPX R Otilde -30\nKPX R T -40\nKPX R Tcaron -40\nKPX R Tcommaaccent -40\nKPX R U -30\nKPX R Uacute -30\nKPX R Ucircumflex -30\nKPX R Udieresis -30\nKPX R Ugrave -30\nKPX R Uhungarumlaut -30\nKPX R Umacron -30\nKPX R Uogonek -30\nKPX R Uring -30\nKPX R V -55\nKPX R W -35\nKPX R Y -35\nKPX R Yacute -35\nKPX R Ydieresis -35\nKPX Racute O -30\nKPX Racute Oacute -30\nKPX Racute Ocircumflex -30\nKPX Racute Odieresis -30\nKPX Racute Ograve -30\nKPX Racute Ohungarumlaut -30\nKPX Racute Omacron -30\nKPX Racute Oslash -30\nKPX Racute Otilde -30\nKPX Racute T -40\nKPX Racute Tcaron -40\nKPX Racute Tcommaaccent -40\nKPX Racute U -30\nKPX Racute Uacute -30\nKPX Racute Ucircumflex -30\nKPX Racute Udieresis -30\nKPX Racute Ugrave -30\nKPX Racute Uhungarumlaut -30\nKPX Racute Umacron -30\nKPX Racute Uogonek -30\nKPX Racute Uring -30\nKPX Racute V -55\nKPX Racute W -35\nKPX Racute Y -35\nKPX Racute Yacute -35\nKPX Racute Ydieresis -35\nKPX Rcaron O -30\nKPX Rcaron Oacute -30\nKPX Rcaron Ocircumflex -30\nKPX Rcaron Odieresis -30\nKPX Rcaron Ograve -30\nKPX Rcaron Ohungarumlaut -30\nKPX Rcaron Omacron -30\nKPX Rcaron Oslash -30\nKPX Rcaron Otilde -30\nKPX Rcaron T -40\nKPX Rcaron Tcaron -40\nKPX Rcaron Tcommaaccent -40\nKPX Rcaron U -30\nKPX Rcaron Uacute -30\nKPX Rcaron Ucircumflex -30\nKPX Rcaron Udieresis -30\nKPX Rcaron Ugrave -30\nKPX Rcaron Uhungarumlaut -30\nKPX Rcaron Umacron -30\nKPX Rcaron Uogonek -30\nKPX Rcaron Uring -30\nKPX Rcaron V -55\nKPX Rcaron W -35\nKPX Rcaron Y -35\nKPX Rcaron Yacute -35\nKPX Rcaron Ydieresis -35\nKPX Rcommaaccent O -30\nKPX Rcommaaccent Oacute -30\nKPX Rcommaaccent Ocircumflex -30\nKPX Rcommaaccent Odieresis -30\nKPX Rcommaaccent Ograve -30\nKPX Rcommaaccent Ohungarumlaut -30\nKPX Rcommaaccent Omacron -30\nKPX Rcommaaccent Oslash -30\nKPX Rcommaaccent Otilde -30\nKPX Rcommaaccent T -40\nKPX Rcommaaccent Tcaron -40\nKPX Rcommaaccent Tcommaaccent -40\nKPX Rcommaaccent U -30\nKPX Rcommaaccent Uacute -30\nKPX Rcommaaccent Ucircumflex -30\nKPX Rcommaaccent Udieresis -30\nKPX Rcommaaccent Ugrave -30\nKPX Rcommaaccent Uhungarumlaut -30\nKPX Rcommaaccent Umacron -30\nKPX Rcommaaccent Uogonek -30\nKPX Rcommaaccent Uring -30\nKPX Rcommaaccent V -55\nKPX Rcommaaccent W -35\nKPX Rcommaaccent Y -35\nKPX Rcommaaccent Yacute -35\nKPX Rcommaaccent Ydieresis -35\nKPX T A -90\nKPX T Aacute -90\nKPX T Abreve -90\nKPX T Acircumflex -90\nKPX T Adieresis -90\nKPX T Agrave -90\nKPX T Amacron -90\nKPX T Aogonek -90\nKPX T Aring -90\nKPX T Atilde -90\nKPX T O -18\nKPX T Oacute -18\nKPX T Ocircumflex -18\nKPX T Odieresis -18\nKPX T Ograve -18\nKPX T Ohungarumlaut -18\nKPX T Omacron -18\nKPX T Oslash -18\nKPX T Otilde -18\nKPX T a -92\nKPX T aacute -92\nKPX T abreve -52\nKPX T acircumflex -52\nKPX T adieresis -52\nKPX T agrave -52\nKPX T amacron -52\nKPX T aogonek -92\nKPX T aring -92\nKPX T atilde -52\nKPX T colon -74\nKPX T comma -74\nKPX T e -92\nKPX T eacute -92\nKPX T ecaron -92\nKPX T ecircumflex -92\nKPX T edieresis -52\nKPX T edotaccent -92\nKPX T egrave -52\nKPX T emacron -52\nKPX T eogonek -92\nKPX T hyphen -92\nKPX T i -18\nKPX T iacute -18\nKPX T iogonek -18\nKPX T o -92\nKPX T oacute -92\nKPX T ocircumflex -92\nKPX T odieresis -92\nKPX T ograve -92\nKPX T ohungarumlaut -92\nKPX T omacron -92\nKPX T oslash -92\nKPX T otilde -92\nKPX T period -90\nKPX T r -74\nKPX T racute -74\nKPX T rcaron -74\nKPX T rcommaaccent -74\nKPX T semicolon -74\nKPX T u -92\nKPX T uacute -92\nKPX T ucircumflex -92\nKPX T udieresis -92\nKPX T ugrave -92\nKPX T uhungarumlaut -92\nKPX T umacron -92\nKPX T uogonek -92\nKPX T uring -92\nKPX T w -74\nKPX T y -34\nKPX T yacute -34\nKPX T ydieresis -34\nKPX Tcaron A -90\nKPX Tcaron Aacute -90\nKPX Tcaron Abreve -90\nKPX Tcaron Acircumflex -90\nKPX Tcaron Adieresis -90\nKPX Tcaron Agrave -90\nKPX Tcaron Amacron -90\nKPX Tcaron Aogonek -90\nKPX Tcaron Aring -90\nKPX Tcaron Atilde -90\nKPX Tcaron O -18\nKPX Tcaron Oacute -18\nKPX Tcaron Ocircumflex -18\nKPX Tcaron Odieresis -18\nKPX Tcaron Ograve -18\nKPX Tcaron Ohungarumlaut -18\nKPX Tcaron Omacron -18\nKPX Tcaron Oslash -18\nKPX Tcaron Otilde -18\nKPX Tcaron a -92\nKPX Tcaron aacute -92\nKPX Tcaron abreve -52\nKPX Tcaron acircumflex -52\nKPX Tcaron adieresis -52\nKPX Tcaron agrave -52\nKPX Tcaron amacron -52\nKPX Tcaron aogonek -92\nKPX Tcaron aring -92\nKPX Tcaron atilde -52\nKPX Tcaron colon -74\nKPX Tcaron comma -74\nKPX Tcaron e -92\nKPX Tcaron eacute -92\nKPX Tcaron ecaron -92\nKPX Tcaron ecircumflex -92\nKPX Tcaron edieresis -52\nKPX Tcaron edotaccent -92\nKPX Tcaron egrave -52\nKPX Tcaron emacron -52\nKPX Tcaron eogonek -92\nKPX Tcaron hyphen -92\nKPX Tcaron i -18\nKPX Tcaron iacute -18\nKPX Tcaron iogonek -18\nKPX Tcaron o -92\nKPX Tcaron oacute -92\nKPX Tcaron ocircumflex -92\nKPX Tcaron odieresis -92\nKPX Tcaron ograve -92\nKPX Tcaron ohungarumlaut -92\nKPX Tcaron omacron -92\nKPX Tcaron oslash -92\nKPX Tcaron otilde -92\nKPX Tcaron period -90\nKPX Tcaron r -74\nKPX Tcaron racute -74\nKPX Tcaron rcaron -74\nKPX Tcaron rcommaaccent -74\nKPX Tcaron semicolon -74\nKPX Tcaron u -92\nKPX Tcaron uacute -92\nKPX Tcaron ucircumflex -92\nKPX Tcaron udieresis -92\nKPX Tcaron ugrave -92\nKPX Tcaron uhungarumlaut -92\nKPX Tcaron umacron -92\nKPX Tcaron uogonek -92\nKPX Tcaron uring -92\nKPX Tcaron w -74\nKPX Tcaron y -34\nKPX Tcaron yacute -34\nKPX Tcaron ydieresis -34\nKPX Tcommaaccent A -90\nKPX Tcommaaccent Aacute -90\nKPX Tcommaaccent Abreve -90\nKPX Tcommaaccent Acircumflex -90\nKPX Tcommaaccent Adieresis -90\nKPX Tcommaaccent Agrave -90\nKPX Tcommaaccent Amacron -90\nKPX Tcommaaccent Aogonek -90\nKPX Tcommaaccent Aring -90\nKPX Tcommaaccent Atilde -90\nKPX Tcommaaccent O -18\nKPX Tcommaaccent Oacute -18\nKPX Tcommaaccent Ocircumflex -18\nKPX Tcommaaccent Odieresis -18\nKPX Tcommaaccent Ograve -18\nKPX Tcommaaccent Ohungarumlaut -18\nKPX Tcommaaccent Omacron -18\nKPX Tcommaaccent Oslash -18\nKPX Tcommaaccent Otilde -18\nKPX Tcommaaccent a -92\nKPX Tcommaaccent aacute -92\nKPX Tcommaaccent abreve -52\nKPX Tcommaaccent acircumflex -52\nKPX Tcommaaccent adieresis -52\nKPX Tcommaaccent agrave -52\nKPX Tcommaaccent amacron -52\nKPX Tcommaaccent aogonek -92\nKPX Tcommaaccent aring -92\nKPX Tcommaaccent atilde -52\nKPX Tcommaaccent colon -74\nKPX Tcommaaccent comma -74\nKPX Tcommaaccent e -92\nKPX Tcommaaccent eacute -92\nKPX Tcommaaccent ecaron -92\nKPX Tcommaaccent ecircumflex -92\nKPX Tcommaaccent edieresis -52\nKPX Tcommaaccent edotaccent -92\nKPX Tcommaaccent egrave -52\nKPX Tcommaaccent emacron -52\nKPX Tcommaaccent eogonek -92\nKPX Tcommaaccent hyphen -92\nKPX Tcommaaccent i -18\nKPX Tcommaaccent iacute -18\nKPX Tcommaaccent iogonek -18\nKPX Tcommaaccent o -92\nKPX Tcommaaccent oacute -92\nKPX Tcommaaccent ocircumflex -92\nKPX Tcommaaccent odieresis -92\nKPX Tcommaaccent ograve -92\nKPX Tcommaaccent ohungarumlaut -92\nKPX Tcommaaccent omacron -92\nKPX Tcommaaccent oslash -92\nKPX Tcommaaccent otilde -92\nKPX Tcommaaccent period -90\nKPX Tcommaaccent r -74\nKPX Tcommaaccent racute -74\nKPX Tcommaaccent rcaron -74\nKPX Tcommaaccent rcommaaccent -74\nKPX Tcommaaccent semicolon -74\nKPX Tcommaaccent u -92\nKPX Tcommaaccent uacute -92\nKPX Tcommaaccent ucircumflex -92\nKPX Tcommaaccent udieresis -92\nKPX Tcommaaccent ugrave -92\nKPX Tcommaaccent uhungarumlaut -92\nKPX Tcommaaccent umacron -92\nKPX Tcommaaccent uogonek -92\nKPX Tcommaaccent uring -92\nKPX Tcommaaccent w -74\nKPX Tcommaaccent y -34\nKPX Tcommaaccent yacute -34\nKPX Tcommaaccent ydieresis -34\nKPX U A -60\nKPX U Aacute -60\nKPX U Abreve -60\nKPX U Acircumflex -60\nKPX U Adieresis -60\nKPX U Agrave -60\nKPX U Amacron -60\nKPX U Aogonek -60\nKPX U Aring -60\nKPX U Atilde -60\nKPX U comma -50\nKPX U period -50\nKPX Uacute A -60\nKPX Uacute Aacute -60\nKPX Uacute Abreve -60\nKPX Uacute Acircumflex -60\nKPX Uacute Adieresis -60\nKPX Uacute Agrave -60\nKPX Uacute Amacron -60\nKPX Uacute Aogonek -60\nKPX Uacute Aring -60\nKPX Uacute Atilde -60\nKPX Uacute comma -50\nKPX Uacute period -50\nKPX Ucircumflex A -60\nKPX Ucircumflex Aacute -60\nKPX Ucircumflex Abreve -60\nKPX Ucircumflex Acircumflex -60\nKPX Ucircumflex Adieresis -60\nKPX Ucircumflex Agrave -60\nKPX Ucircumflex Amacron -60\nKPX Ucircumflex Aogonek -60\nKPX Ucircumflex Aring -60\nKPX Ucircumflex Atilde -60\nKPX Ucircumflex comma -50\nKPX Ucircumflex period -50\nKPX Udieresis A -60\nKPX Udieresis Aacute -60\nKPX Udieresis Abreve -60\nKPX Udieresis Acircumflex -60\nKPX Udieresis Adieresis -60\nKPX Udieresis Agrave -60\nKPX Udieresis Amacron -60\nKPX Udieresis Aogonek -60\nKPX Udieresis Aring -60\nKPX Udieresis Atilde -60\nKPX Udieresis comma -50\nKPX Udieresis period -50\nKPX Ugrave A -60\nKPX Ugrave Aacute -60\nKPX Ugrave Abreve -60\nKPX Ugrave Acircumflex -60\nKPX Ugrave Adieresis -60\nKPX Ugrave Agrave -60\nKPX Ugrave Amacron -60\nKPX Ugrave Aogonek -60\nKPX Ugrave Aring -60\nKPX Ugrave Atilde -60\nKPX Ugrave comma -50\nKPX Ugrave period -50\nKPX Uhungarumlaut A -60\nKPX Uhungarumlaut Aacute -60\nKPX Uhungarumlaut Abreve -60\nKPX Uhungarumlaut Acircumflex -60\nKPX Uhungarumlaut Adieresis -60\nKPX Uhungarumlaut Agrave -60\nKPX Uhungarumlaut Amacron -60\nKPX Uhungarumlaut Aogonek -60\nKPX Uhungarumlaut Aring -60\nKPX Uhungarumlaut Atilde -60\nKPX Uhungarumlaut comma -50\nKPX Uhungarumlaut period -50\nKPX Umacron A -60\nKPX Umacron Aacute -60\nKPX Umacron Abreve -60\nKPX Umacron Acircumflex -60\nKPX Umacron Adieresis -60\nKPX Umacron Agrave -60\nKPX Umacron Amacron -60\nKPX Umacron Aogonek -60\nKPX Umacron Aring -60\nKPX Umacron Atilde -60\nKPX Umacron comma -50\nKPX Umacron period -50\nKPX Uogonek A -60\nKPX Uogonek Aacute -60\nKPX Uogonek Abreve -60\nKPX Uogonek Acircumflex -60\nKPX Uogonek Adieresis -60\nKPX Uogonek Agrave -60\nKPX Uogonek Amacron -60\nKPX Uogonek Aogonek -60\nKPX Uogonek Aring -60\nKPX Uogonek Atilde -60\nKPX Uogonek comma -50\nKPX Uogonek period -50\nKPX Uring A -60\nKPX Uring Aacute -60\nKPX Uring Abreve -60\nKPX Uring Acircumflex -60\nKPX Uring Adieresis -60\nKPX Uring Agrave -60\nKPX Uring Amacron -60\nKPX Uring Aogonek -60\nKPX Uring Aring -60\nKPX Uring Atilde -60\nKPX Uring comma -50\nKPX Uring period -50\nKPX V A -135\nKPX V Aacute -135\nKPX V Abreve -135\nKPX V Acircumflex -135\nKPX V Adieresis -135\nKPX V Agrave -135\nKPX V Amacron -135\nKPX V Aogonek -135\nKPX V Aring -135\nKPX V Atilde -135\nKPX V G -30\nKPX V Gbreve -30\nKPX V Gcommaaccent -30\nKPX V O -45\nKPX V Oacute -45\nKPX V Ocircumflex -45\nKPX V Odieresis -45\nKPX V Ograve -45\nKPX V Ohungarumlaut -45\nKPX V Omacron -45\nKPX V Oslash -45\nKPX V Otilde -45\nKPX V a -92\nKPX V aacute -92\nKPX V abreve -92\nKPX V acircumflex -92\nKPX V adieresis -92\nKPX V agrave -92\nKPX V amacron -92\nKPX V aogonek -92\nKPX V aring -92\nKPX V atilde -92\nKPX V colon -92\nKPX V comma -129\nKPX V e -100\nKPX V eacute -100\nKPX V ecaron -100\nKPX V ecircumflex -100\nKPX V edieresis -100\nKPX V edotaccent -100\nKPX V egrave -100\nKPX V emacron -100\nKPX V eogonek -100\nKPX V hyphen -74\nKPX V i -37\nKPX V iacute -37\nKPX V icircumflex -37\nKPX V idieresis -37\nKPX V igrave -37\nKPX V imacron -37\nKPX V iogonek -37\nKPX V o -100\nKPX V oacute -100\nKPX V ocircumflex -100\nKPX V odieresis -100\nKPX V ograve -100\nKPX V ohungarumlaut -100\nKPX V omacron -100\nKPX V oslash -100\nKPX V otilde -100\nKPX V period -145\nKPX V semicolon -92\nKPX V u -92\nKPX V uacute -92\nKPX V ucircumflex -92\nKPX V udieresis -92\nKPX V ugrave -92\nKPX V uhungarumlaut -92\nKPX V umacron -92\nKPX V uogonek -92\nKPX V uring -92\nKPX W A -120\nKPX W Aacute -120\nKPX W Abreve -120\nKPX W Acircumflex -120\nKPX W Adieresis -120\nKPX W Agrave -120\nKPX W Amacron -120\nKPX W Aogonek -120\nKPX W Aring -120\nKPX W Atilde -120\nKPX W O -10\nKPX W Oacute -10\nKPX W Ocircumflex -10\nKPX W Odieresis -10\nKPX W Ograve -10\nKPX W Ohungarumlaut -10\nKPX W Omacron -10\nKPX W Oslash -10\nKPX W Otilde -10\nKPX W a -65\nKPX W aacute -65\nKPX W abreve -65\nKPX W acircumflex -65\nKPX W adieresis -65\nKPX W agrave -65\nKPX W amacron -65\nKPX W aogonek -65\nKPX W aring -65\nKPX W atilde -65\nKPX W colon -55\nKPX W comma -92\nKPX W e -65\nKPX W eacute -65\nKPX W ecaron -65\nKPX W ecircumflex -65\nKPX W edieresis -65\nKPX W edotaccent -65\nKPX W egrave -65\nKPX W emacron -65\nKPX W eogonek -65\nKPX W hyphen -37\nKPX W i -18\nKPX W iacute -18\nKPX W iogonek -18\nKPX W o -75\nKPX W oacute -75\nKPX W ocircumflex -75\nKPX W odieresis -75\nKPX W ograve -75\nKPX W ohungarumlaut -75\nKPX W omacron -75\nKPX W oslash -75\nKPX W otilde -75\nKPX W period -92\nKPX W semicolon -55\nKPX W u -50\nKPX W uacute -50\nKPX W ucircumflex -50\nKPX W udieresis -50\nKPX W ugrave -50\nKPX W uhungarumlaut -50\nKPX W umacron -50\nKPX W uogonek -50\nKPX W uring -50\nKPX W y -60\nKPX W yacute -60\nKPX W ydieresis -60\nKPX Y A -110\nKPX Y Aacute -110\nKPX Y Abreve -110\nKPX Y Acircumflex -110\nKPX Y Adieresis -110\nKPX Y Agrave -110\nKPX Y Amacron -110\nKPX Y Aogonek -110\nKPX Y Aring -110\nKPX Y Atilde -110\nKPX Y O -35\nKPX Y Oacute -35\nKPX Y Ocircumflex -35\nKPX Y Odieresis -35\nKPX Y Ograve -35\nKPX Y Ohungarumlaut -35\nKPX Y Omacron -35\nKPX Y Oslash -35\nKPX Y Otilde -35\nKPX Y a -85\nKPX Y aacute -85\nKPX Y abreve -85\nKPX Y acircumflex -85\nKPX Y adieresis -85\nKPX Y agrave -85\nKPX Y amacron -85\nKPX Y aogonek -85\nKPX Y aring -85\nKPX Y atilde -85\nKPX Y colon -92\nKPX Y comma -92\nKPX Y e -111\nKPX Y eacute -111\nKPX Y ecaron -111\nKPX Y ecircumflex -111\nKPX Y edieresis -71\nKPX Y edotaccent -111\nKPX Y egrave -71\nKPX Y emacron -71\nKPX Y eogonek -111\nKPX Y hyphen -92\nKPX Y i -37\nKPX Y iacute -37\nKPX Y iogonek -37\nKPX Y o -111\nKPX Y oacute -111\nKPX Y ocircumflex -111\nKPX Y odieresis -111\nKPX Y ograve -111\nKPX Y ohungarumlaut -111\nKPX Y omacron -111\nKPX Y oslash -111\nKPX Y otilde -111\nKPX Y period -92\nKPX Y semicolon -92\nKPX Y u -92\nKPX Y uacute -92\nKPX Y ucircumflex -92\nKPX Y udieresis -92\nKPX Y ugrave -92\nKPX Y uhungarumlaut -92\nKPX Y umacron -92\nKPX Y uogonek -92\nKPX Y uring -92\nKPX Yacute A -110\nKPX Yacute Aacute -110\nKPX Yacute Abreve -110\nKPX Yacute Acircumflex -110\nKPX Yacute Adieresis -110\nKPX Yacute Agrave -110\nKPX Yacute Amacron -110\nKPX Yacute Aogonek -110\nKPX Yacute Aring -110\nKPX Yacute Atilde -110\nKPX Yacute O -35\nKPX Yacute Oacute -35\nKPX Yacute Ocircumflex -35\nKPX Yacute Odieresis -35\nKPX Yacute Ograve -35\nKPX Yacute Ohungarumlaut -35\nKPX Yacute Omacron -35\nKPX Yacute Oslash -35\nKPX Yacute Otilde -35\nKPX Yacute a -85\nKPX Yacute aacute -85\nKPX Yacute abreve -85\nKPX Yacute acircumflex -85\nKPX Yacute adieresis -85\nKPX Yacute agrave -85\nKPX Yacute amacron -85\nKPX Yacute aogonek -85\nKPX Yacute aring -85\nKPX Yacute atilde -85\nKPX Yacute colon -92\nKPX Yacute comma -92\nKPX Yacute e -111\nKPX Yacute eacute -111\nKPX Yacute ecaron -111\nKPX Yacute ecircumflex -111\nKPX Yacute edieresis -71\nKPX Yacute edotaccent -111\nKPX Yacute egrave -71\nKPX Yacute emacron -71\nKPX Yacute eogonek -111\nKPX Yacute hyphen -92\nKPX Yacute i -37\nKPX Yacute iacute -37\nKPX Yacute iogonek -37\nKPX Yacute o -111\nKPX Yacute oacute -111\nKPX Yacute ocircumflex -111\nKPX Yacute odieresis -111\nKPX Yacute ograve -111\nKPX Yacute ohungarumlaut -111\nKPX Yacute omacron -111\nKPX Yacute oslash -111\nKPX Yacute otilde -111\nKPX Yacute period -92\nKPX Yacute semicolon -92\nKPX Yacute u -92\nKPX Yacute uacute -92\nKPX Yacute ucircumflex -92\nKPX Yacute udieresis -92\nKPX Yacute ugrave -92\nKPX Yacute uhungarumlaut -92\nKPX Yacute umacron -92\nKPX Yacute uogonek -92\nKPX Yacute uring -92\nKPX Ydieresis A -110\nKPX Ydieresis Aacute -110\nKPX Ydieresis Abreve -110\nKPX Ydieresis Acircumflex -110\nKPX Ydieresis Adieresis -110\nKPX Ydieresis Agrave -110\nKPX Ydieresis Amacron -110\nKPX Ydieresis Aogonek -110\nKPX Ydieresis Aring -110\nKPX Ydieresis Atilde -110\nKPX Ydieresis O -35\nKPX Ydieresis Oacute -35\nKPX Ydieresis Ocircumflex -35\nKPX Ydieresis Odieresis -35\nKPX Ydieresis Ograve -35\nKPX Ydieresis Ohungarumlaut -35\nKPX Ydieresis Omacron -35\nKPX Ydieresis Oslash -35\nKPX Ydieresis Otilde -35\nKPX Ydieresis a -85\nKPX Ydieresis aacute -85\nKPX Ydieresis abreve -85\nKPX Ydieresis acircumflex -85\nKPX Ydieresis adieresis -85\nKPX Ydieresis agrave -85\nKPX Ydieresis amacron -85\nKPX Ydieresis aogonek -85\nKPX Ydieresis aring -85\nKPX Ydieresis atilde -85\nKPX Ydieresis colon -92\nKPX Ydieresis comma -92\nKPX Ydieresis e -111\nKPX Ydieresis eacute -111\nKPX Ydieresis ecaron -111\nKPX Ydieresis ecircumflex -111\nKPX Ydieresis edieresis -71\nKPX Ydieresis edotaccent -111\nKPX Ydieresis egrave -71\nKPX Ydieresis emacron -71\nKPX Ydieresis eogonek -111\nKPX Ydieresis hyphen -92\nKPX Ydieresis i -37\nKPX Ydieresis iacute -37\nKPX Ydieresis iogonek -37\nKPX Ydieresis o -111\nKPX Ydieresis oacute -111\nKPX Ydieresis ocircumflex -111\nKPX Ydieresis odieresis -111\nKPX Ydieresis ograve -111\nKPX Ydieresis ohungarumlaut -111\nKPX Ydieresis omacron -111\nKPX Ydieresis oslash -111\nKPX Ydieresis otilde -111\nKPX Ydieresis period -92\nKPX Ydieresis semicolon -92\nKPX Ydieresis u -92\nKPX Ydieresis uacute -92\nKPX Ydieresis ucircumflex -92\nKPX Ydieresis udieresis -92\nKPX Ydieresis ugrave -92\nKPX Ydieresis uhungarumlaut -92\nKPX Ydieresis umacron -92\nKPX Ydieresis uogonek -92\nKPX Ydieresis uring -92\nKPX a v -25\nKPX aacute v -25\nKPX abreve v -25\nKPX acircumflex v -25\nKPX adieresis v -25\nKPX agrave v -25\nKPX amacron v -25\nKPX aogonek v -25\nKPX aring v -25\nKPX atilde v -25\nKPX b b -10\nKPX b period -40\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX b v -15\nKPX comma quotedblright -45\nKPX comma quoteright -55\nKPX d w -15\nKPX dcroat w -15\nKPX e v -15\nKPX eacute v -15\nKPX ecaron v -15\nKPX ecircumflex v -15\nKPX edieresis v -15\nKPX edotaccent v -15\nKPX egrave v -15\nKPX emacron v -15\nKPX eogonek v -15\nKPX f comma -15\nKPX f dotlessi -35\nKPX f i -25\nKPX f o -25\nKPX f oacute -25\nKPX f ocircumflex -25\nKPX f odieresis -25\nKPX f ograve -25\nKPX f ohungarumlaut -25\nKPX f omacron -25\nKPX f oslash -25\nKPX f otilde -25\nKPX f period -15\nKPX f quotedblright 50\nKPX f quoteright 55\nKPX g period -15\nKPX gbreve period -15\nKPX gcommaaccent period -15\nKPX h y -15\nKPX h yacute -15\nKPX h ydieresis -15\nKPX i v -10\nKPX iacute v -10\nKPX icircumflex v -10\nKPX idieresis v -10\nKPX igrave v -10\nKPX imacron v -10\nKPX iogonek v -10\nKPX k e -10\nKPX k eacute -10\nKPX k ecaron -10\nKPX k ecircumflex -10\nKPX k edieresis -10\nKPX k edotaccent -10\nKPX k egrave -10\nKPX k emacron -10\nKPX k eogonek -10\nKPX k o -15\nKPX k oacute -15\nKPX k ocircumflex -15\nKPX k odieresis -15\nKPX k ograve -15\nKPX k ohungarumlaut -15\nKPX k omacron -15\nKPX k oslash -15\nKPX k otilde -15\nKPX k y -15\nKPX k yacute -15\nKPX k ydieresis -15\nKPX kcommaaccent e -10\nKPX kcommaaccent eacute -10\nKPX kcommaaccent ecaron -10\nKPX kcommaaccent ecircumflex -10\nKPX kcommaaccent edieresis -10\nKPX kcommaaccent edotaccent -10\nKPX kcommaaccent egrave -10\nKPX kcommaaccent emacron -10\nKPX kcommaaccent eogonek -10\nKPX kcommaaccent o -15\nKPX kcommaaccent oacute -15\nKPX kcommaaccent ocircumflex -15\nKPX kcommaaccent odieresis -15\nKPX kcommaaccent ograve -15\nKPX kcommaaccent ohungarumlaut -15\nKPX kcommaaccent omacron -15\nKPX kcommaaccent oslash -15\nKPX kcommaaccent otilde -15\nKPX kcommaaccent y -15\nKPX kcommaaccent yacute -15\nKPX kcommaaccent ydieresis -15\nKPX n v -40\nKPX nacute v -40\nKPX ncaron v -40\nKPX ncommaaccent v -40\nKPX ntilde v -40\nKPX o v -10\nKPX o w -10\nKPX oacute v -10\nKPX oacute w -10\nKPX ocircumflex v -10\nKPX ocircumflex w -10\nKPX odieresis v -10\nKPX odieresis w -10\nKPX ograve v -10\nKPX ograve w -10\nKPX ohungarumlaut v -10\nKPX ohungarumlaut w -10\nKPX omacron v -10\nKPX omacron w -10\nKPX oslash v -10\nKPX oslash w -10\nKPX otilde v -10\nKPX otilde w -10\nKPX period quotedblright -55\nKPX period quoteright -55\nKPX quotedblleft A -10\nKPX quotedblleft Aacute -10\nKPX quotedblleft Abreve -10\nKPX quotedblleft Acircumflex -10\nKPX quotedblleft Adieresis -10\nKPX quotedblleft Agrave -10\nKPX quotedblleft Amacron -10\nKPX quotedblleft Aogonek -10\nKPX quotedblleft Aring -10\nKPX quotedblleft Atilde -10\nKPX quoteleft A -10\nKPX quoteleft Aacute -10\nKPX quoteleft Abreve -10\nKPX quoteleft Acircumflex -10\nKPX quoteleft Adieresis -10\nKPX quoteleft Agrave -10\nKPX quoteleft Amacron -10\nKPX quoteleft Aogonek -10\nKPX quoteleft Aring -10\nKPX quoteleft Atilde -10\nKPX quoteleft quoteleft -63\nKPX quoteright d -20\nKPX quoteright dcroat -20\nKPX quoteright quoteright -63\nKPX quoteright r -20\nKPX quoteright racute -20\nKPX quoteright rcaron -20\nKPX quoteright rcommaaccent -20\nKPX quoteright s -37\nKPX quoteright sacute -37\nKPX quoteright scaron -37\nKPX quoteright scedilla -37\nKPX quoteright scommaaccent -37\nKPX quoteright space -74\nKPX quoteright v -20\nKPX r c -18\nKPX r cacute -18\nKPX r ccaron -18\nKPX r ccedilla -18\nKPX r comma -92\nKPX r e -18\nKPX r eacute -18\nKPX r ecaron -18\nKPX r ecircumflex -18\nKPX r edieresis -18\nKPX r edotaccent -18\nKPX r egrave -18\nKPX r emacron -18\nKPX r eogonek -18\nKPX r g -10\nKPX r gbreve -10\nKPX r gcommaaccent -10\nKPX r hyphen -37\nKPX r n -15\nKPX r nacute -15\nKPX r ncaron -15\nKPX r ncommaaccent -15\nKPX r ntilde -15\nKPX r o -18\nKPX r oacute -18\nKPX r ocircumflex -18\nKPX r odieresis -18\nKPX r ograve -18\nKPX r ohungarumlaut -18\nKPX r omacron -18\nKPX r oslash -18\nKPX r otilde -18\nKPX r p -10\nKPX r period -100\nKPX r q -18\nKPX r v -10\nKPX racute c -18\nKPX racute cacute -18\nKPX racute ccaron -18\nKPX racute ccedilla -18\nKPX racute comma -92\nKPX racute e -18\nKPX racute eacute -18\nKPX racute ecaron -18\nKPX racute ecircumflex -18\nKPX racute edieresis -18\nKPX racute edotaccent -18\nKPX racute egrave -18\nKPX racute emacron -18\nKPX racute eogonek -18\nKPX racute g -10\nKPX racute gbreve -10\nKPX racute gcommaaccent -10\nKPX racute hyphen -37\nKPX racute n -15\nKPX racute nacute -15\nKPX racute ncaron -15\nKPX racute ncommaaccent -15\nKPX racute ntilde -15\nKPX racute o -18\nKPX racute oacute -18\nKPX racute ocircumflex -18\nKPX racute odieresis -18\nKPX racute ograve -18\nKPX racute ohungarumlaut -18\nKPX racute omacron -18\nKPX racute oslash -18\nKPX racute otilde -18\nKPX racute p -10\nKPX racute period -100\nKPX racute q -18\nKPX racute v -10\nKPX rcaron c -18\nKPX rcaron cacute -18\nKPX rcaron ccaron -18\nKPX rcaron ccedilla -18\nKPX rcaron comma -92\nKPX rcaron e -18\nKPX rcaron eacute -18\nKPX rcaron ecaron -18\nKPX rcaron ecircumflex -18\nKPX rcaron edieresis -18\nKPX rcaron edotaccent -18\nKPX rcaron egrave -18\nKPX rcaron emacron -18\nKPX rcaron eogonek -18\nKPX rcaron g -10\nKPX rcaron gbreve -10\nKPX rcaron gcommaaccent -10\nKPX rcaron hyphen -37\nKPX rcaron n -15\nKPX rcaron nacute -15\nKPX rcaron ncaron -15\nKPX rcaron ncommaaccent -15\nKPX rcaron ntilde -15\nKPX rcaron o -18\nKPX rcaron oacute -18\nKPX rcaron ocircumflex -18\nKPX rcaron odieresis -18\nKPX rcaron ograve -18\nKPX rcaron ohungarumlaut -18\nKPX rcaron omacron -18\nKPX rcaron oslash -18\nKPX rcaron otilde -18\nKPX rcaron p -10\nKPX rcaron period -100\nKPX rcaron q -18\nKPX rcaron v -10\nKPX rcommaaccent c -18\nKPX rcommaaccent cacute -18\nKPX rcommaaccent ccaron -18\nKPX rcommaaccent ccedilla -18\nKPX rcommaaccent comma -92\nKPX rcommaaccent e -18\nKPX rcommaaccent eacute -18\nKPX rcommaaccent ecaron -18\nKPX rcommaaccent ecircumflex -18\nKPX rcommaaccent edieresis -18\nKPX rcommaaccent edotaccent -18\nKPX rcommaaccent egrave -18\nKPX rcommaaccent emacron -18\nKPX rcommaaccent eogonek -18\nKPX rcommaaccent g -10\nKPX rcommaaccent gbreve -10\nKPX rcommaaccent gcommaaccent -10\nKPX rcommaaccent hyphen -37\nKPX rcommaaccent n -15\nKPX rcommaaccent nacute -15\nKPX rcommaaccent ncaron -15\nKPX rcommaaccent ncommaaccent -15\nKPX rcommaaccent ntilde -15\nKPX rcommaaccent o -18\nKPX rcommaaccent oacute -18\nKPX rcommaaccent ocircumflex -18\nKPX rcommaaccent odieresis -18\nKPX rcommaaccent ograve -18\nKPX rcommaaccent ohungarumlaut -18\nKPX rcommaaccent omacron -18\nKPX rcommaaccent oslash -18\nKPX rcommaaccent otilde -18\nKPX rcommaaccent p -10\nKPX rcommaaccent period -100\nKPX rcommaaccent q -18\nKPX rcommaaccent v -10\nKPX space A -55\nKPX space Aacute -55\nKPX space Abreve -55\nKPX space Acircumflex -55\nKPX space Adieresis -55\nKPX space Agrave -55\nKPX space Amacron -55\nKPX space Aogonek -55\nKPX space Aring -55\nKPX space Atilde -55\nKPX space T -30\nKPX space Tcaron -30\nKPX space Tcommaaccent -30\nKPX space V -45\nKPX space W -30\nKPX space Y -55\nKPX space Yacute -55\nKPX space Ydieresis -55\nKPX v a -10\nKPX v aacute -10\nKPX v abreve -10\nKPX v acircumflex -10\nKPX v adieresis -10\nKPX v agrave -10\nKPX v amacron -10\nKPX v aogonek -10\nKPX v aring -10\nKPX v atilde -10\nKPX v comma -55\nKPX v e -10\nKPX v eacute -10\nKPX v ecaron -10\nKPX v ecircumflex -10\nKPX v edieresis -10\nKPX v edotaccent -10\nKPX v egrave -10\nKPX v emacron -10\nKPX v eogonek -10\nKPX v o -10\nKPX v oacute -10\nKPX v ocircumflex -10\nKPX v odieresis -10\nKPX v ograve -10\nKPX v ohungarumlaut -10\nKPX v omacron -10\nKPX v oslash -10\nKPX v otilde -10\nKPX v period -70\nKPX w comma -55\nKPX w o -10\nKPX w oacute -10\nKPX w ocircumflex -10\nKPX w odieresis -10\nKPX w ograve -10\nKPX w ohungarumlaut -10\nKPX w omacron -10\nKPX w oslash -10\nKPX w otilde -10\nKPX w period -70\nKPX y comma -55\nKPX y e -10\nKPX y eacute -10\nKPX y ecaron -10\nKPX y ecircumflex -10\nKPX y edieresis -10\nKPX y edotaccent -10\nKPX y egrave -10\nKPX y emacron -10\nKPX y eogonek -10\nKPX y o -25\nKPX y oacute -25\nKPX y ocircumflex -25\nKPX y odieresis -25\nKPX y ograve -25\nKPX y ohungarumlaut -25\nKPX y omacron -25\nKPX y oslash -25\nKPX y otilde -25\nKPX y period -70\nKPX yacute comma -55\nKPX yacute e -10\nKPX yacute eacute -10\nKPX yacute ecaron -10\nKPX yacute ecircumflex -10\nKPX yacute edieresis -10\nKPX yacute edotaccent -10\nKPX yacute egrave -10\nKPX yacute emacron -10\nKPX yacute eogonek -10\nKPX yacute o -25\nKPX yacute oacute -25\nKPX yacute ocircumflex -25\nKPX yacute odieresis -25\nKPX yacute ograve -25\nKPX yacute ohungarumlaut -25\nKPX yacute omacron -25\nKPX yacute oslash -25\nKPX yacute otilde -25\nKPX yacute period -70\nKPX ydieresis comma -55\nKPX ydieresis e -10\nKPX ydieresis eacute -10\nKPX ydieresis ecaron -10\nKPX ydieresis ecircumflex -10\nKPX ydieresis edieresis -10\nKPX ydieresis edotaccent -10\nKPX ydieresis egrave -10\nKPX ydieresis emacron -10\nKPX ydieresis eogonek -10\nKPX ydieresis o -25\nKPX ydieresis oacute -25\nKPX ydieresis ocircumflex -25\nKPX ydieresis odieresis -25\nKPX ydieresis ograve -25\nKPX ydieresis ohungarumlaut -25\nKPX ydieresis omacron -25\nKPX ydieresis oslash -25\nKPX ydieresis otilde -25\nKPX ydieresis period -70\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 81
      "Times-Italic": function() {                                                                                     // 82
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 12:56:55 1997\nComment UniqueID 43067\nComment VMusage 47727 58752\nFontName Times-Italic\nFullName Times Italic\nFamilyName Times\nWeight Medium\nItalicAngle -15.5\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -169 -217 1010 883 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 653\nXHeight 441\nAscender 683\nDescender -217\nStdHW 32\nStdVW 76\nStartCharMetrics 315\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 333 ; N exclam ; B 39 -11 302 667 ;\nC 34 ; WX 420 ; N quotedbl ; B 144 421 432 666 ;\nC 35 ; WX 500 ; N numbersign ; B 2 0 540 676 ;\nC 36 ; WX 500 ; N dollar ; B 31 -89 497 731 ;\nC 37 ; WX 833 ; N percent ; B 79 -13 790 676 ;\nC 38 ; WX 778 ; N ampersand ; B 76 -18 723 666 ;\nC 39 ; WX 333 ; N quoteright ; B 151 436 290 666 ;\nC 40 ; WX 333 ; N parenleft ; B 42 -181 315 669 ;\nC 41 ; WX 333 ; N parenright ; B 16 -180 289 669 ;\nC 42 ; WX 500 ; N asterisk ; B 128 255 492 666 ;\nC 43 ; WX 675 ; N plus ; B 86 0 590 506 ;\nC 44 ; WX 250 ; N comma ; B -4 -129 135 101 ;\nC 45 ; WX 333 ; N hyphen ; B 49 192 282 255 ;\nC 46 ; WX 250 ; N period ; B 27 -11 138 100 ;\nC 47 ; WX 278 ; N slash ; B -65 -18 386 666 ;\nC 48 ; WX 500 ; N zero ; B 32 -7 497 676 ;\nC 49 ; WX 500 ; N one ; B 49 0 409 676 ;\nC 50 ; WX 500 ; N two ; B 12 0 452 676 ;\nC 51 ; WX 500 ; N three ; B 15 -7 465 676 ;\nC 52 ; WX 500 ; N four ; B 1 0 479 676 ;\nC 53 ; WX 500 ; N five ; B 15 -7 491 666 ;\nC 54 ; WX 500 ; N six ; B 30 -7 521 686 ;\nC 55 ; WX 500 ; N seven ; B 75 -8 537 666 ;\nC 56 ; WX 500 ; N eight ; B 30 -7 493 676 ;\nC 57 ; WX 500 ; N nine ; B 23 -17 492 676 ;\nC 58 ; WX 333 ; N colon ; B 50 -11 261 441 ;\nC 59 ; WX 333 ; N semicolon ; B 27 -129 261 441 ;\nC 60 ; WX 675 ; N less ; B 84 -8 592 514 ;\nC 61 ; WX 675 ; N equal ; B 86 120 590 386 ;\nC 62 ; WX 675 ; N greater ; B 84 -8 592 514 ;\nC 63 ; WX 500 ; N question ; B 132 -12 472 664 ;\nC 64 ; WX 920 ; N at ; B 118 -18 806 666 ;\nC 65 ; WX 611 ; N A ; B -51 0 564 668 ;\nC 66 ; WX 611 ; N B ; B -8 0 588 653 ;\nC 67 ; WX 667 ; N C ; B 66 -18 689 666 ;\nC 68 ; WX 722 ; N D ; B -8 0 700 653 ;\nC 69 ; WX 611 ; N E ; B -1 0 634 653 ;\nC 70 ; WX 611 ; N F ; B 8 0 645 653 ;\nC 71 ; WX 722 ; N G ; B 52 -18 722 666 ;\nC 72 ; WX 722 ; N H ; B -8 0 767 653 ;\nC 73 ; WX 333 ; N I ; B -8 0 384 653 ;\nC 74 ; WX 444 ; N J ; B -6 -18 491 653 ;\nC 75 ; WX 667 ; N K ; B 7 0 722 653 ;\nC 76 ; WX 556 ; N L ; B -8 0 559 653 ;\nC 77 ; WX 833 ; N M ; B -18 0 873 653 ;\nC 78 ; WX 667 ; N N ; B -20 -15 727 653 ;\nC 79 ; WX 722 ; N O ; B 60 -18 699 666 ;\nC 80 ; WX 611 ; N P ; B 0 0 605 653 ;\nC 81 ; WX 722 ; N Q ; B 59 -182 699 666 ;\nC 82 ; WX 611 ; N R ; B -13 0 588 653 ;\nC 83 ; WX 500 ; N S ; B 17 -18 508 667 ;\nC 84 ; WX 556 ; N T ; B 59 0 633 653 ;\nC 85 ; WX 722 ; N U ; B 102 -18 765 653 ;\nC 86 ; WX 611 ; N V ; B 76 -18 688 653 ;\nC 87 ; WX 833 ; N W ; B 71 -18 906 653 ;\nC 88 ; WX 611 ; N X ; B -29 0 655 653 ;\nC 89 ; WX 556 ; N Y ; B 78 0 633 653 ;\nC 90 ; WX 556 ; N Z ; B -6 0 606 653 ;\nC 91 ; WX 389 ; N bracketleft ; B 21 -153 391 663 ;\nC 92 ; WX 278 ; N backslash ; B -41 -18 319 666 ;\nC 93 ; WX 389 ; N bracketright ; B 12 -153 382 663 ;\nC 94 ; WX 422 ; N asciicircum ; B 0 301 422 666 ;\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\nC 96 ; WX 333 ; N quoteleft ; B 171 436 310 666 ;\nC 97 ; WX 500 ; N a ; B 17 -11 476 441 ;\nC 98 ; WX 500 ; N b ; B 23 -11 473 683 ;\nC 99 ; WX 444 ; N c ; B 30 -11 425 441 ;\nC 100 ; WX 500 ; N d ; B 15 -13 527 683 ;\nC 101 ; WX 444 ; N e ; B 31 -11 412 441 ;\nC 102 ; WX 278 ; N f ; B -147 -207 424 678 ; L i fi ; L l fl ;\nC 103 ; WX 500 ; N g ; B 8 -206 472 441 ;\nC 104 ; WX 500 ; N h ; B 19 -9 478 683 ;\nC 105 ; WX 278 ; N i ; B 49 -11 264 654 ;\nC 106 ; WX 278 ; N j ; B -124 -207 276 654 ;\nC 107 ; WX 444 ; N k ; B 14 -11 461 683 ;\nC 108 ; WX 278 ; N l ; B 41 -11 279 683 ;\nC 109 ; WX 722 ; N m ; B 12 -9 704 441 ;\nC 110 ; WX 500 ; N n ; B 14 -9 474 441 ;\nC 111 ; WX 500 ; N o ; B 27 -11 468 441 ;\nC 112 ; WX 500 ; N p ; B -75 -205 469 441 ;\nC 113 ; WX 500 ; N q ; B 25 -209 483 441 ;\nC 114 ; WX 389 ; N r ; B 45 0 412 441 ;\nC 115 ; WX 389 ; N s ; B 16 -13 366 442 ;\nC 116 ; WX 278 ; N t ; B 37 -11 296 546 ;\nC 117 ; WX 500 ; N u ; B 42 -11 475 441 ;\nC 118 ; WX 444 ; N v ; B 21 -18 426 441 ;\nC 119 ; WX 667 ; N w ; B 16 -18 648 441 ;\nC 120 ; WX 444 ; N x ; B -27 -11 447 441 ;\nC 121 ; WX 444 ; N y ; B -24 -206 426 441 ;\nC 122 ; WX 389 ; N z ; B -2 -81 380 428 ;\nC 123 ; WX 400 ; N braceleft ; B 51 -177 407 687 ;\nC 124 ; WX 275 ; N bar ; B 105 -217 171 783 ;\nC 125 ; WX 400 ; N braceright ; B -7 -177 349 687 ;\nC 126 ; WX 541 ; N asciitilde ; B 40 183 502 323 ;\nC 161 ; WX 389 ; N exclamdown ; B 59 -205 322 473 ;\nC 162 ; WX 500 ; N cent ; B 77 -143 472 560 ;\nC 163 ; WX 500 ; N sterling ; B 10 -6 517 670 ;\nC 164 ; WX 167 ; N fraction ; B -169 -10 337 676 ;\nC 165 ; WX 500 ; N yen ; B 27 0 603 653 ;\nC 166 ; WX 500 ; N florin ; B 25 -182 507 682 ;\nC 167 ; WX 500 ; N section ; B 53 -162 461 666 ;\nC 168 ; WX 500 ; N currency ; B -22 53 522 597 ;\nC 169 ; WX 214 ; N quotesingle ; B 132 421 241 666 ;\nC 170 ; WX 556 ; N quotedblleft ; B 166 436 514 666 ;\nC 171 ; WX 500 ; N guillemotleft ; B 53 37 445 403 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 51 37 281 403 ;\nC 173 ; WX 333 ; N guilsinglright ; B 52 37 282 403 ;\nC 174 ; WX 500 ; N fi ; B -141 -207 481 681 ;\nC 175 ; WX 500 ; N fl ; B -141 -204 518 682 ;\nC 177 ; WX 500 ; N endash ; B -6 197 505 243 ;\nC 178 ; WX 500 ; N dagger ; B 101 -159 488 666 ;\nC 179 ; WX 500 ; N daggerdbl ; B 22 -143 491 666 ;\nC 180 ; WX 250 ; N periodcentered ; B 70 199 181 310 ;\nC 182 ; WX 523 ; N paragraph ; B 55 -123 616 653 ;\nC 183 ; WX 350 ; N bullet ; B 40 191 310 461 ;\nC 184 ; WX 333 ; N quotesinglbase ; B 44 -129 183 101 ;\nC 185 ; WX 556 ; N quotedblbase ; B 57 -129 405 101 ;\nC 186 ; WX 556 ; N quotedblright ; B 151 436 499 666 ;\nC 187 ; WX 500 ; N guillemotright ; B 55 37 447 403 ;\nC 188 ; WX 889 ; N ellipsis ; B 57 -11 762 100 ;\nC 189 ; WX 1000 ; N perthousand ; B 25 -19 1010 706 ;\nC 191 ; WX 500 ; N questiondown ; B 28 -205 368 471 ;\nC 193 ; WX 333 ; N grave ; B 121 492 311 664 ;\nC 194 ; WX 333 ; N acute ; B 180 494 403 664 ;\nC 195 ; WX 333 ; N circumflex ; B 91 492 385 661 ;\nC 196 ; WX 333 ; N tilde ; B 100 517 427 624 ;\nC 197 ; WX 333 ; N macron ; B 99 532 411 583 ;\nC 198 ; WX 333 ; N breve ; B 117 492 418 650 ;\nC 199 ; WX 333 ; N dotaccent ; B 207 548 305 646 ;\nC 200 ; WX 333 ; N dieresis ; B 107 548 405 646 ;\nC 202 ; WX 333 ; N ring ; B 155 492 355 691 ;\nC 203 ; WX 333 ; N cedilla ; B -30 -217 182 0 ;\nC 205 ; WX 333 ; N hungarumlaut ; B 93 494 486 664 ;\nC 206 ; WX 333 ; N ogonek ; B 20 -169 203 40 ;\nC 207 ; WX 333 ; N caron ; B 121 492 426 661 ;\nC 208 ; WX 889 ; N emdash ; B -6 197 894 243 ;\nC 225 ; WX 889 ; N AE ; B -27 0 911 653 ;\nC 227 ; WX 276 ; N ordfeminine ; B 42 406 352 676 ;\nC 232 ; WX 556 ; N Lslash ; B -8 0 559 653 ;\nC 233 ; WX 722 ; N Oslash ; B 60 -105 699 722 ;\nC 234 ; WX 944 ; N OE ; B 49 -8 964 666 ;\nC 235 ; WX 310 ; N ordmasculine ; B 67 406 362 676 ;\nC 241 ; WX 667 ; N ae ; B 23 -11 640 441 ;\nC 245 ; WX 278 ; N dotlessi ; B 49 -11 235 441 ;\nC 248 ; WX 278 ; N lslash ; B 41 -11 312 683 ;\nC 249 ; WX 500 ; N oslash ; B 28 -135 469 554 ;\nC 250 ; WX 667 ; N oe ; B 20 -12 646 441 ;\nC 251 ; WX 500 ; N germandbls ; B -168 -207 493 679 ;\nC -1 ; WX 333 ; N Idieresis ; B -8 0 435 818 ;\nC -1 ; WX 444 ; N eacute ; B 31 -11 459 664 ;\nC -1 ; WX 500 ; N abreve ; B 17 -11 502 650 ;\nC -1 ; WX 500 ; N uhungarumlaut ; B 42 -11 580 664 ;\nC -1 ; WX 444 ; N ecaron ; B 31 -11 482 661 ;\nC -1 ; WX 556 ; N Ydieresis ; B 78 0 633 818 ;\nC -1 ; WX 675 ; N divide ; B 86 -11 590 517 ;\nC -1 ; WX 556 ; N Yacute ; B 78 0 633 876 ;\nC -1 ; WX 611 ; N Acircumflex ; B -51 0 564 873 ;\nC -1 ; WX 500 ; N aacute ; B 17 -11 487 664 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 102 -18 765 873 ;\nC -1 ; WX 444 ; N yacute ; B -24 -206 459 664 ;\nC -1 ; WX 389 ; N scommaaccent ; B 16 -217 366 442 ;\nC -1 ; WX 444 ; N ecircumflex ; B 31 -11 441 661 ;\nC -1 ; WX 722 ; N Uring ; B 102 -18 765 883 ;\nC -1 ; WX 722 ; N Udieresis ; B 102 -18 765 818 ;\nC -1 ; WX 500 ; N aogonek ; B 17 -169 476 441 ;\nC -1 ; WX 722 ; N Uacute ; B 102 -18 765 876 ;\nC -1 ; WX 500 ; N uogonek ; B 42 -169 477 441 ;\nC -1 ; WX 611 ; N Edieresis ; B -1 0 634 818 ;\nC -1 ; WX 722 ; N Dcroat ; B -8 0 700 653 ;\nC -1 ; WX 250 ; N commaaccent ; B 8 -217 133 -50 ;\nC -1 ; WX 760 ; N copyright ; B 41 -18 719 666 ;\nC -1 ; WX 611 ; N Emacron ; B -1 0 634 795 ;\nC -1 ; WX 444 ; N ccaron ; B 30 -11 482 661 ;\nC -1 ; WX 500 ; N aring ; B 17 -11 476 691 ;\nC -1 ; WX 667 ; N Ncommaaccent ; B -20 -187 727 653 ;\nC -1 ; WX 278 ; N lacute ; B 41 -11 395 876 ;\nC -1 ; WX 500 ; N agrave ; B 17 -11 476 664 ;\nC -1 ; WX 556 ; N Tcommaaccent ; B 59 -217 633 653 ;\nC -1 ; WX 667 ; N Cacute ; B 66 -18 690 876 ;\nC -1 ; WX 500 ; N atilde ; B 17 -11 511 624 ;\nC -1 ; WX 611 ; N Edotaccent ; B -1 0 634 818 ;\nC -1 ; WX 389 ; N scaron ; B 16 -13 454 661 ;\nC -1 ; WX 389 ; N scedilla ; B 16 -217 366 442 ;\nC -1 ; WX 278 ; N iacute ; B 49 -11 355 664 ;\nC -1 ; WX 471 ; N lozenge ; B 13 0 459 724 ;\nC -1 ; WX 611 ; N Rcaron ; B -13 0 588 873 ;\nC -1 ; WX 722 ; N Gcommaaccent ; B 52 -217 722 666 ;\nC -1 ; WX 500 ; N ucircumflex ; B 42 -11 475 661 ;\nC -1 ; WX 500 ; N acircumflex ; B 17 -11 476 661 ;\nC -1 ; WX 611 ; N Amacron ; B -51 0 564 795 ;\nC -1 ; WX 389 ; N rcaron ; B 45 0 434 661 ;\nC -1 ; WX 444 ; N ccedilla ; B 30 -217 425 441 ;\nC -1 ; WX 556 ; N Zdotaccent ; B -6 0 606 818 ;\nC -1 ; WX 611 ; N Thorn ; B 0 0 569 653 ;\nC -1 ; WX 722 ; N Omacron ; B 60 -18 699 795 ;\nC -1 ; WX 611 ; N Racute ; B -13 0 588 876 ;\nC -1 ; WX 500 ; N Sacute ; B 17 -18 508 876 ;\nC -1 ; WX 544 ; N dcaron ; B 15 -13 658 683 ;\nC -1 ; WX 722 ; N Umacron ; B 102 -18 765 795 ;\nC -1 ; WX 500 ; N uring ; B 42 -11 475 691 ;\nC -1 ; WX 300 ; N threesuperior ; B 43 268 339 676 ;\nC -1 ; WX 722 ; N Ograve ; B 60 -18 699 876 ;\nC -1 ; WX 611 ; N Agrave ; B -51 0 564 876 ;\nC -1 ; WX 611 ; N Abreve ; B -51 0 564 862 ;\nC -1 ; WX 675 ; N multiply ; B 93 8 582 497 ;\nC -1 ; WX 500 ; N uacute ; B 42 -11 477 664 ;\nC -1 ; WX 556 ; N Tcaron ; B 59 0 633 873 ;\nC -1 ; WX 476 ; N partialdiff ; B 17 -38 459 710 ;\nC -1 ; WX 444 ; N ydieresis ; B -24 -206 441 606 ;\nC -1 ; WX 667 ; N Nacute ; B -20 -15 727 876 ;\nC -1 ; WX 278 ; N icircumflex ; B 33 -11 327 661 ;\nC -1 ; WX 611 ; N Ecircumflex ; B -1 0 634 873 ;\nC -1 ; WX 500 ; N adieresis ; B 17 -11 489 606 ;\nC -1 ; WX 444 ; N edieresis ; B 31 -11 451 606 ;\nC -1 ; WX 444 ; N cacute ; B 30 -11 459 664 ;\nC -1 ; WX 500 ; N nacute ; B 14 -9 477 664 ;\nC -1 ; WX 500 ; N umacron ; B 42 -11 485 583 ;\nC -1 ; WX 667 ; N Ncaron ; B -20 -15 727 873 ;\nC -1 ; WX 333 ; N Iacute ; B -8 0 433 876 ;\nC -1 ; WX 675 ; N plusminus ; B 86 0 590 506 ;\nC -1 ; WX 275 ; N brokenbar ; B 105 -142 171 708 ;\nC -1 ; WX 760 ; N registered ; B 41 -18 719 666 ;\nC -1 ; WX 722 ; N Gbreve ; B 52 -18 722 862 ;\nC -1 ; WX 333 ; N Idotaccent ; B -8 0 384 818 ;\nC -1 ; WX 600 ; N summation ; B 15 -10 585 706 ;\nC -1 ; WX 611 ; N Egrave ; B -1 0 634 876 ;\nC -1 ; WX 389 ; N racute ; B 45 0 431 664 ;\nC -1 ; WX 500 ; N omacron ; B 27 -11 495 583 ;\nC -1 ; WX 556 ; N Zacute ; B -6 0 606 876 ;\nC -1 ; WX 556 ; N Zcaron ; B -6 0 606 873 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 658 ;\nC -1 ; WX 722 ; N Eth ; B -8 0 700 653 ;\nC -1 ; WX 667 ; N Ccedilla ; B 66 -217 689 666 ;\nC -1 ; WX 278 ; N lcommaaccent ; B 22 -217 279 683 ;\nC -1 ; WX 300 ; N tcaron ; B 37 -11 407 681 ;\nC -1 ; WX 444 ; N eogonek ; B 31 -169 412 441 ;\nC -1 ; WX 722 ; N Uogonek ; B 102 -184 765 653 ;\nC -1 ; WX 611 ; N Aacute ; B -51 0 564 876 ;\nC -1 ; WX 611 ; N Adieresis ; B -51 0 564 818 ;\nC -1 ; WX 444 ; N egrave ; B 31 -11 412 664 ;\nC -1 ; WX 389 ; N zacute ; B -2 -81 431 664 ;\nC -1 ; WX 278 ; N iogonek ; B 49 -169 264 654 ;\nC -1 ; WX 722 ; N Oacute ; B 60 -18 699 876 ;\nC -1 ; WX 500 ; N oacute ; B 27 -11 487 664 ;\nC -1 ; WX 500 ; N amacron ; B 17 -11 495 583 ;\nC -1 ; WX 389 ; N sacute ; B 16 -13 431 664 ;\nC -1 ; WX 278 ; N idieresis ; B 49 -11 352 606 ;\nC -1 ; WX 722 ; N Ocircumflex ; B 60 -18 699 873 ;\nC -1 ; WX 722 ; N Ugrave ; B 102 -18 765 876 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 500 ; N thorn ; B -75 -205 469 683 ;\nC -1 ; WX 300 ; N twosuperior ; B 33 271 324 676 ;\nC -1 ; WX 722 ; N Odieresis ; B 60 -18 699 818 ;\nC -1 ; WX 500 ; N mu ; B -30 -209 497 428 ;\nC -1 ; WX 278 ; N igrave ; B 49 -11 284 664 ;\nC -1 ; WX 500 ; N ohungarumlaut ; B 27 -11 590 664 ;\nC -1 ; WX 611 ; N Eogonek ; B -1 -169 634 653 ;\nC -1 ; WX 500 ; N dcroat ; B 15 -13 572 683 ;\nC -1 ; WX 750 ; N threequarters ; B 23 -10 736 676 ;\nC -1 ; WX 500 ; N Scedilla ; B 17 -217 508 667 ;\nC -1 ; WX 300 ; N lcaron ; B 41 -11 407 683 ;\nC -1 ; WX 667 ; N Kcommaaccent ; B 7 -217 722 653 ;\nC -1 ; WX 556 ; N Lacute ; B -8 0 559 876 ;\nC -1 ; WX 980 ; N trademark ; B 30 247 957 653 ;\nC -1 ; WX 444 ; N edotaccent ; B 31 -11 412 606 ;\nC -1 ; WX 333 ; N Igrave ; B -8 0 384 876 ;\nC -1 ; WX 333 ; N Imacron ; B -8 0 441 795 ;\nC -1 ; WX 611 ; N Lcaron ; B -8 0 586 653 ;\nC -1 ; WX 750 ; N onehalf ; B 34 -10 749 676 ;\nC -1 ; WX 549 ; N lessequal ; B 26 0 523 658 ;\nC -1 ; WX 500 ; N ocircumflex ; B 27 -11 468 661 ;\nC -1 ; WX 500 ; N ntilde ; B 14 -9 476 624 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 102 -18 765 876 ;\nC -1 ; WX 611 ; N Eacute ; B -1 0 634 876 ;\nC -1 ; WX 444 ; N emacron ; B 31 -11 457 583 ;\nC -1 ; WX 500 ; N gbreve ; B 8 -206 487 650 ;\nC -1 ; WX 750 ; N onequarter ; B 33 -10 736 676 ;\nC -1 ; WX 500 ; N Scaron ; B 17 -18 520 873 ;\nC -1 ; WX 500 ; N Scommaaccent ; B 17 -217 508 667 ;\nC -1 ; WX 722 ; N Ohungarumlaut ; B 60 -18 699 876 ;\nC -1 ; WX 400 ; N degree ; B 101 390 387 676 ;\nC -1 ; WX 500 ; N ograve ; B 27 -11 468 664 ;\nC -1 ; WX 667 ; N Ccaron ; B 66 -18 689 873 ;\nC -1 ; WX 500 ; N ugrave ; B 42 -11 475 664 ;\nC -1 ; WX 453 ; N radical ; B 2 -60 452 768 ;\nC -1 ; WX 722 ; N Dcaron ; B -8 0 700 873 ;\nC -1 ; WX 389 ; N rcommaaccent ; B -3 -217 412 441 ;\nC -1 ; WX 667 ; N Ntilde ; B -20 -15 727 836 ;\nC -1 ; WX 500 ; N otilde ; B 27 -11 496 624 ;\nC -1 ; WX 611 ; N Rcommaaccent ; B -13 -187 588 653 ;\nC -1 ; WX 556 ; N Lcommaaccent ; B -8 -217 559 653 ;\nC -1 ; WX 611 ; N Atilde ; B -51 0 566 836 ;\nC -1 ; WX 611 ; N Aogonek ; B -51 -169 566 668 ;\nC -1 ; WX 611 ; N Aring ; B -51 0 564 883 ;\nC -1 ; WX 722 ; N Otilde ; B 60 -18 699 836 ;\nC -1 ; WX 389 ; N zdotaccent ; B -2 -81 380 606 ;\nC -1 ; WX 611 ; N Ecaron ; B -1 0 634 873 ;\nC -1 ; WX 333 ; N Iogonek ; B -8 -169 384 653 ;\nC -1 ; WX 444 ; N kcommaaccent ; B 14 -187 461 683 ;\nC -1 ; WX 675 ; N minus ; B 86 220 590 286 ;\nC -1 ; WX 333 ; N Icircumflex ; B -8 0 425 873 ;\nC -1 ; WX 500 ; N ncaron ; B 14 -9 510 661 ;\nC -1 ; WX 278 ; N tcommaaccent ; B 2 -217 296 546 ;\nC -1 ; WX 675 ; N logicalnot ; B 86 108 590 386 ;\nC -1 ; WX 500 ; N odieresis ; B 27 -11 489 606 ;\nC -1 ; WX 500 ; N udieresis ; B 42 -11 479 606 ;\nC -1 ; WX 549 ; N notequal ; B 12 -29 537 541 ;\nC -1 ; WX 500 ; N gcommaaccent ; B 8 -206 472 706 ;\nC -1 ; WX 500 ; N eth ; B 27 -11 482 683 ;\nC -1 ; WX 389 ; N zcaron ; B -2 -81 434 661 ;\nC -1 ; WX 500 ; N ncommaaccent ; B 14 -187 474 441 ;\nC -1 ; WX 300 ; N onesuperior ; B 43 271 284 676 ;\nC -1 ; WX 278 ; N imacron ; B 46 -11 311 583 ;\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2321\nKPX A C -30\nKPX A Cacute -30\nKPX A Ccaron -30\nKPX A Ccedilla -30\nKPX A G -35\nKPX A Gbreve -35\nKPX A Gcommaaccent -35\nKPX A O -40\nKPX A Oacute -40\nKPX A Ocircumflex -40\nKPX A Odieresis -40\nKPX A Ograve -40\nKPX A Ohungarumlaut -40\nKPX A Omacron -40\nKPX A Oslash -40\nKPX A Otilde -40\nKPX A Q -40\nKPX A T -37\nKPX A Tcaron -37\nKPX A Tcommaaccent -37\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -105\nKPX A W -95\nKPX A Y -55\nKPX A Yacute -55\nKPX A Ydieresis -55\nKPX A quoteright -37\nKPX A u -20\nKPX A uacute -20\nKPX A ucircumflex -20\nKPX A udieresis -20\nKPX A ugrave -20\nKPX A uhungarumlaut -20\nKPX A umacron -20\nKPX A uogonek -20\nKPX A uring -20\nKPX A v -55\nKPX A w -55\nKPX A y -55\nKPX A yacute -55\nKPX A ydieresis -55\nKPX Aacute C -30\nKPX Aacute Cacute -30\nKPX Aacute Ccaron -30\nKPX Aacute Ccedilla -30\nKPX Aacute G -35\nKPX Aacute Gbreve -35\nKPX Aacute Gcommaaccent -35\nKPX Aacute O -40\nKPX Aacute Oacute -40\nKPX Aacute Ocircumflex -40\nKPX Aacute Odieresis -40\nKPX Aacute Ograve -40\nKPX Aacute Ohungarumlaut -40\nKPX Aacute Omacron -40\nKPX Aacute Oslash -40\nKPX Aacute Otilde -40\nKPX Aacute Q -40\nKPX Aacute T -37\nKPX Aacute Tcaron -37\nKPX Aacute Tcommaaccent -37\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -105\nKPX Aacute W -95\nKPX Aacute Y -55\nKPX Aacute Yacute -55\nKPX Aacute Ydieresis -55\nKPX Aacute quoteright -37\nKPX Aacute u -20\nKPX Aacute uacute -20\nKPX Aacute ucircumflex -20\nKPX Aacute udieresis -20\nKPX Aacute ugrave -20\nKPX Aacute uhungarumlaut -20\nKPX Aacute umacron -20\nKPX Aacute uogonek -20\nKPX Aacute uring -20\nKPX Aacute v -55\nKPX Aacute w -55\nKPX Aacute y -55\nKPX Aacute yacute -55\nKPX Aacute ydieresis -55\nKPX Abreve C -30\nKPX Abreve Cacute -30\nKPX Abreve Ccaron -30\nKPX Abreve Ccedilla -30\nKPX Abreve G -35\nKPX Abreve Gbreve -35\nKPX Abreve Gcommaaccent -35\nKPX Abreve O -40\nKPX Abreve Oacute -40\nKPX Abreve Ocircumflex -40\nKPX Abreve Odieresis -40\nKPX Abreve Ograve -40\nKPX Abreve Ohungarumlaut -40\nKPX Abreve Omacron -40\nKPX Abreve Oslash -40\nKPX Abreve Otilde -40\nKPX Abreve Q -40\nKPX Abreve T -37\nKPX Abreve Tcaron -37\nKPX Abreve Tcommaaccent -37\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -105\nKPX Abreve W -95\nKPX Abreve Y -55\nKPX Abreve Yacute -55\nKPX Abreve Ydieresis -55\nKPX Abreve quoteright -37\nKPX Abreve u -20\nKPX Abreve uacute -20\nKPX Abreve ucircumflex -20\nKPX Abreve udieresis -20\nKPX Abreve ugrave -20\nKPX Abreve uhungarumlaut -20\nKPX Abreve umacron -20\nKPX Abreve uogonek -20\nKPX Abreve uring -20\nKPX Abreve v -55\nKPX Abreve w -55\nKPX Abreve y -55\nKPX Abreve yacute -55\nKPX Abreve ydieresis -55\nKPX Acircumflex C -30\nKPX Acircumflex Cacute -30\nKPX Acircumflex Ccaron -30\nKPX Acircumflex Ccedilla -30\nKPX Acircumflex G -35\nKPX Acircumflex Gbreve -35\nKPX Acircumflex Gcommaaccent -35\nKPX Acircumflex O -40\nKPX Acircumflex Oacute -40\nKPX Acircumflex Ocircumflex -40\nKPX Acircumflex Odieresis -40\nKPX Acircumflex Ograve -40\nKPX Acircumflex Ohungarumlaut -40\nKPX Acircumflex Omacron -40\nKPX Acircumflex Oslash -40\nKPX Acircumflex Otilde -40\nKPX Acircumflex Q -40\nKPX Acircumflex T -37\nKPX Acircumflex Tcaron -37\nKPX Acircumflex Tcommaaccent -37\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -105\nKPX Acircumflex W -95\nKPX Acircumflex Y -55\nKPX Acircumflex Yacute -55\nKPX Acircumflex Ydieresis -55\nKPX Acircumflex quoteright -37\nKPX Acircumflex u -20\nKPX Acircumflex uacute -20\nKPX Acircumflex ucircumflex -20\nKPX Acircumflex udieresis -20\nKPX Acircumflex ugrave -20\nKPX Acircumflex uhungarumlaut -20\nKPX Acircumflex umacron -20\nKPX Acircumflex uogonek -20\nKPX Acircumflex uring -20\nKPX Acircumflex v -55\nKPX Acircumflex w -55\nKPX Acircumflex y -55\nKPX Acircumflex yacute -55\nKPX Acircumflex ydieresis -55\nKPX Adieresis C -30\nKPX Adieresis Cacute -30\nKPX Adieresis Ccaron -30\nKPX Adieresis Ccedilla -30\nKPX Adieresis G -35\nKPX Adieresis Gbreve -35\nKPX Adieresis Gcommaaccent -35\nKPX Adieresis O -40\nKPX Adieresis Oacute -40\nKPX Adieresis Ocircumflex -40\nKPX Adieresis Odieresis -40\nKPX Adieresis Ograve -40\nKPX Adieresis Ohungarumlaut -40\nKPX Adieresis Omacron -40\nKPX Adieresis Oslash -40\nKPX Adieresis Otilde -40\nKPX Adieresis Q -40\nKPX Adieresis T -37\nKPX Adieresis Tcaron -37\nKPX Adieresis Tcommaaccent -37\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -105\nKPX Adieresis W -95\nKPX Adieresis Y -55\nKPX Adieresis Yacute -55\nKPX Adieresis Ydieresis -55\nKPX Adieresis quoteright -37\nKPX Adieresis u -20\nKPX Adieresis uacute -20\nKPX Adieresis ucircumflex -20\nKPX Adieresis udieresis -20\nKPX Adieresis ugrave -20\nKPX Adieresis uhungarumlaut -20\nKPX Adieresis umacron -20\nKPX Adieresis uogonek -20\nKPX Adieresis uring -20\nKPX Adieresis v -55\nKPX Adieresis w -55\nKPX Adieresis y -55\nKPX Adieresis yacute -55\nKPX Adieresis ydieresis -55\nKPX Agrave C -30\nKPX Agrave Cacute -30\nKPX Agrave Ccaron -30\nKPX Agrave Ccedilla -30\nKPX Agrave G -35\nKPX Agrave Gbreve -35\nKPX Agrave Gcommaaccent -35\nKPX Agrave O -40\nKPX Agrave Oacute -40\nKPX Agrave Ocircumflex -40\nKPX Agrave Odieresis -40\nKPX Agrave Ograve -40\nKPX Agrave Ohungarumlaut -40\nKPX Agrave Omacron -40\nKPX Agrave Oslash -40\nKPX Agrave Otilde -40\nKPX Agrave Q -40\nKPX Agrave T -37\nKPX Agrave Tcaron -37\nKPX Agrave Tcommaaccent -37\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -105\nKPX Agrave W -95\nKPX Agrave Y -55\nKPX Agrave Yacute -55\nKPX Agrave Ydieresis -55\nKPX Agrave quoteright -37\nKPX Agrave u -20\nKPX Agrave uacute -20\nKPX Agrave ucircumflex -20\nKPX Agrave udieresis -20\nKPX Agrave ugrave -20\nKPX Agrave uhungarumlaut -20\nKPX Agrave umacron -20\nKPX Agrave uogonek -20\nKPX Agrave uring -20\nKPX Agrave v -55\nKPX Agrave w -55\nKPX Agrave y -55\nKPX Agrave yacute -55\nKPX Agrave ydieresis -55\nKPX Amacron C -30\nKPX Amacron Cacute -30\nKPX Amacron Ccaron -30\nKPX Amacron Ccedilla -30\nKPX Amacron G -35\nKPX Amacron Gbreve -35\nKPX Amacron Gcommaaccent -35\nKPX Amacron O -40\nKPX Amacron Oacute -40\nKPX Amacron Ocircumflex -40\nKPX Amacron Odieresis -40\nKPX Amacron Ograve -40\nKPX Amacron Ohungarumlaut -40\nKPX Amacron Omacron -40\nKPX Amacron Oslash -40\nKPX Amacron Otilde -40\nKPX Amacron Q -40\nKPX Amacron T -37\nKPX Amacron Tcaron -37\nKPX Amacron Tcommaaccent -37\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -105\nKPX Amacron W -95\nKPX Amacron Y -55\nKPX Amacron Yacute -55\nKPX Amacron Ydieresis -55\nKPX Amacron quoteright -37\nKPX Amacron u -20\nKPX Amacron uacute -20\nKPX Amacron ucircumflex -20\nKPX Amacron udieresis -20\nKPX Amacron ugrave -20\nKPX Amacron uhungarumlaut -20\nKPX Amacron umacron -20\nKPX Amacron uogonek -20\nKPX Amacron uring -20\nKPX Amacron v -55\nKPX Amacron w -55\nKPX Amacron y -55\nKPX Amacron yacute -55\nKPX Amacron ydieresis -55\nKPX Aogonek C -30\nKPX Aogonek Cacute -30\nKPX Aogonek Ccaron -30\nKPX Aogonek Ccedilla -30\nKPX Aogonek G -35\nKPX Aogonek Gbreve -35\nKPX Aogonek Gcommaaccent -35\nKPX Aogonek O -40\nKPX Aogonek Oacute -40\nKPX Aogonek Ocircumflex -40\nKPX Aogonek Odieresis -40\nKPX Aogonek Ograve -40\nKPX Aogonek Ohungarumlaut -40\nKPX Aogonek Omacron -40\nKPX Aogonek Oslash -40\nKPX Aogonek Otilde -40\nKPX Aogonek Q -40\nKPX Aogonek T -37\nKPX Aogonek Tcaron -37\nKPX Aogonek Tcommaaccent -37\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -105\nKPX Aogonek W -95\nKPX Aogonek Y -55\nKPX Aogonek Yacute -55\nKPX Aogonek Ydieresis -55\nKPX Aogonek quoteright -37\nKPX Aogonek u -20\nKPX Aogonek uacute -20\nKPX Aogonek ucircumflex -20\nKPX Aogonek udieresis -20\nKPX Aogonek ugrave -20\nKPX Aogonek uhungarumlaut -20\nKPX Aogonek umacron -20\nKPX Aogonek uogonek -20\nKPX Aogonek uring -20\nKPX Aogonek v -55\nKPX Aogonek w -55\nKPX Aogonek y -55\nKPX Aogonek yacute -55\nKPX Aogonek ydieresis -55\nKPX Aring C -30\nKPX Aring Cacute -30\nKPX Aring Ccaron -30\nKPX Aring Ccedilla -30\nKPX Aring G -35\nKPX Aring Gbreve -35\nKPX Aring Gcommaaccent -35\nKPX Aring O -40\nKPX Aring Oacute -40\nKPX Aring Ocircumflex -40\nKPX Aring Odieresis -40\nKPX Aring Ograve -40\nKPX Aring Ohungarumlaut -40\nKPX Aring Omacron -40\nKPX Aring Oslash -40\nKPX Aring Otilde -40\nKPX Aring Q -40\nKPX Aring T -37\nKPX Aring Tcaron -37\nKPX Aring Tcommaaccent -37\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -105\nKPX Aring W -95\nKPX Aring Y -55\nKPX Aring Yacute -55\nKPX Aring Ydieresis -55\nKPX Aring quoteright -37\nKPX Aring u -20\nKPX Aring uacute -20\nKPX Aring ucircumflex -20\nKPX Aring udieresis -20\nKPX Aring ugrave -20\nKPX Aring uhungarumlaut -20\nKPX Aring umacron -20\nKPX Aring uogonek -20\nKPX Aring uring -20\nKPX Aring v -55\nKPX Aring w -55\nKPX Aring y -55\nKPX Aring yacute -55\nKPX Aring ydieresis -55\nKPX Atilde C -30\nKPX Atilde Cacute -30\nKPX Atilde Ccaron -30\nKPX Atilde Ccedilla -30\nKPX Atilde G -35\nKPX Atilde Gbreve -35\nKPX Atilde Gcommaaccent -35\nKPX Atilde O -40\nKPX Atilde Oacute -40\nKPX Atilde Ocircumflex -40\nKPX Atilde Odieresis -40\nKPX Atilde Ograve -40\nKPX Atilde Ohungarumlaut -40\nKPX Atilde Omacron -40\nKPX Atilde Oslash -40\nKPX Atilde Otilde -40\nKPX Atilde Q -40\nKPX Atilde T -37\nKPX Atilde Tcaron -37\nKPX Atilde Tcommaaccent -37\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -105\nKPX Atilde W -95\nKPX Atilde Y -55\nKPX Atilde Yacute -55\nKPX Atilde Ydieresis -55\nKPX Atilde quoteright -37\nKPX Atilde u -20\nKPX Atilde uacute -20\nKPX Atilde ucircumflex -20\nKPX Atilde udieresis -20\nKPX Atilde ugrave -20\nKPX Atilde uhungarumlaut -20\nKPX Atilde umacron -20\nKPX Atilde uogonek -20\nKPX Atilde uring -20\nKPX Atilde v -55\nKPX Atilde w -55\nKPX Atilde y -55\nKPX Atilde yacute -55\nKPX Atilde ydieresis -55\nKPX B A -25\nKPX B Aacute -25\nKPX B Abreve -25\nKPX B Acircumflex -25\nKPX B Adieresis -25\nKPX B Agrave -25\nKPX B Amacron -25\nKPX B Aogonek -25\nKPX B Aring -25\nKPX B Atilde -25\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX D A -35\nKPX D Aacute -35\nKPX D Abreve -35\nKPX D Acircumflex -35\nKPX D Adieresis -35\nKPX D Agrave -35\nKPX D Amacron -35\nKPX D Aogonek -35\nKPX D Aring -35\nKPX D Atilde -35\nKPX D V -40\nKPX D W -40\nKPX D Y -40\nKPX D Yacute -40\nKPX D Ydieresis -40\nKPX Dcaron A -35\nKPX Dcaron Aacute -35\nKPX Dcaron Abreve -35\nKPX Dcaron Acircumflex -35\nKPX Dcaron Adieresis -35\nKPX Dcaron Agrave -35\nKPX Dcaron Amacron -35\nKPX Dcaron Aogonek -35\nKPX Dcaron Aring -35\nKPX Dcaron Atilde -35\nKPX Dcaron V -40\nKPX Dcaron W -40\nKPX Dcaron Y -40\nKPX Dcaron Yacute -40\nKPX Dcaron Ydieresis -40\nKPX Dcroat A -35\nKPX Dcroat Aacute -35\nKPX Dcroat Abreve -35\nKPX Dcroat Acircumflex -35\nKPX Dcroat Adieresis -35\nKPX Dcroat Agrave -35\nKPX Dcroat Amacron -35\nKPX Dcroat Aogonek -35\nKPX Dcroat Aring -35\nKPX Dcroat Atilde -35\nKPX Dcroat V -40\nKPX Dcroat W -40\nKPX Dcroat Y -40\nKPX Dcroat Yacute -40\nKPX Dcroat Ydieresis -40\nKPX F A -115\nKPX F Aacute -115\nKPX F Abreve -115\nKPX F Acircumflex -115\nKPX F Adieresis -115\nKPX F Agrave -115\nKPX F Amacron -115\nKPX F Aogonek -115\nKPX F Aring -115\nKPX F Atilde -115\nKPX F a -75\nKPX F aacute -75\nKPX F abreve -75\nKPX F acircumflex -75\nKPX F adieresis -75\nKPX F agrave -75\nKPX F amacron -75\nKPX F aogonek -75\nKPX F aring -75\nKPX F atilde -75\nKPX F comma -135\nKPX F e -75\nKPX F eacute -75\nKPX F ecaron -75\nKPX F ecircumflex -75\nKPX F edieresis -75\nKPX F edotaccent -75\nKPX F egrave -75\nKPX F emacron -75\nKPX F eogonek -75\nKPX F i -45\nKPX F iacute -45\nKPX F icircumflex -45\nKPX F idieresis -45\nKPX F igrave -45\nKPX F imacron -45\nKPX F iogonek -45\nKPX F o -105\nKPX F oacute -105\nKPX F ocircumflex -105\nKPX F odieresis -105\nKPX F ograve -105\nKPX F ohungarumlaut -105\nKPX F omacron -105\nKPX F oslash -105\nKPX F otilde -105\nKPX F period -135\nKPX F r -55\nKPX F racute -55\nKPX F rcaron -55\nKPX F rcommaaccent -55\nKPX J A -40\nKPX J Aacute -40\nKPX J Abreve -40\nKPX J Acircumflex -40\nKPX J Adieresis -40\nKPX J Agrave -40\nKPX J Amacron -40\nKPX J Aogonek -40\nKPX J Aring -40\nKPX J Atilde -40\nKPX J a -35\nKPX J aacute -35\nKPX J abreve -35\nKPX J acircumflex -35\nKPX J adieresis -35\nKPX J agrave -35\nKPX J amacron -35\nKPX J aogonek -35\nKPX J aring -35\nKPX J atilde -35\nKPX J comma -25\nKPX J e -25\nKPX J eacute -25\nKPX J ecaron -25\nKPX J ecircumflex -25\nKPX J edieresis -25\nKPX J edotaccent -25\nKPX J egrave -25\nKPX J emacron -25\nKPX J eogonek -25\nKPX J o -25\nKPX J oacute -25\nKPX J ocircumflex -25\nKPX J odieresis -25\nKPX J ograve -25\nKPX J ohungarumlaut -25\nKPX J omacron -25\nKPX J oslash -25\nKPX J otilde -25\nKPX J period -25\nKPX J u -35\nKPX J uacute -35\nKPX J ucircumflex -35\nKPX J udieresis -35\nKPX J ugrave -35\nKPX J uhungarumlaut -35\nKPX J umacron -35\nKPX J uogonek -35\nKPX J uring -35\nKPX K O -50\nKPX K Oacute -50\nKPX K Ocircumflex -50\nKPX K Odieresis -50\nKPX K Ograve -50\nKPX K Ohungarumlaut -50\nKPX K Omacron -50\nKPX K Oslash -50\nKPX K Otilde -50\nKPX K e -35\nKPX K eacute -35\nKPX K ecaron -35\nKPX K ecircumflex -35\nKPX K edieresis -35\nKPX K edotaccent -35\nKPX K egrave -35\nKPX K emacron -35\nKPX K eogonek -35\nKPX K o -40\nKPX K oacute -40\nKPX K ocircumflex -40\nKPX K odieresis -40\nKPX K ograve -40\nKPX K ohungarumlaut -40\nKPX K omacron -40\nKPX K oslash -40\nKPX K otilde -40\nKPX K u -40\nKPX K uacute -40\nKPX K ucircumflex -40\nKPX K udieresis -40\nKPX K ugrave -40\nKPX K uhungarumlaut -40\nKPX K umacron -40\nKPX K uogonek -40\nKPX K uring -40\nKPX K y -40\nKPX K yacute -40\nKPX K ydieresis -40\nKPX Kcommaaccent O -50\nKPX Kcommaaccent Oacute -50\nKPX Kcommaaccent Ocircumflex -50\nKPX Kcommaaccent Odieresis -50\nKPX Kcommaaccent Ograve -50\nKPX Kcommaaccent Ohungarumlaut -50\nKPX Kcommaaccent Omacron -50\nKPX Kcommaaccent Oslash -50\nKPX Kcommaaccent Otilde -50\nKPX Kcommaaccent e -35\nKPX Kcommaaccent eacute -35\nKPX Kcommaaccent ecaron -35\nKPX Kcommaaccent ecircumflex -35\nKPX Kcommaaccent edieresis -35\nKPX Kcommaaccent edotaccent -35\nKPX Kcommaaccent egrave -35\nKPX Kcommaaccent emacron -35\nKPX Kcommaaccent eogonek -35\nKPX Kcommaaccent o -40\nKPX Kcommaaccent oacute -40\nKPX Kcommaaccent ocircumflex -40\nKPX Kcommaaccent odieresis -40\nKPX Kcommaaccent ograve -40\nKPX Kcommaaccent ohungarumlaut -40\nKPX Kcommaaccent omacron -40\nKPX Kcommaaccent oslash -40\nKPX Kcommaaccent otilde -40\nKPX Kcommaaccent u -40\nKPX Kcommaaccent uacute -40\nKPX Kcommaaccent ucircumflex -40\nKPX Kcommaaccent udieresis -40\nKPX Kcommaaccent ugrave -40\nKPX Kcommaaccent uhungarumlaut -40\nKPX Kcommaaccent umacron -40\nKPX Kcommaaccent uogonek -40\nKPX Kcommaaccent uring -40\nKPX Kcommaaccent y -40\nKPX Kcommaaccent yacute -40\nKPX Kcommaaccent ydieresis -40\nKPX L T -20\nKPX L Tcaron -20\nKPX L Tcommaaccent -20\nKPX L V -55\nKPX L W -55\nKPX L Y -20\nKPX L Yacute -20\nKPX L Ydieresis -20\nKPX L quoteright -37\nKPX L y -30\nKPX L yacute -30\nKPX L ydieresis -30\nKPX Lacute T -20\nKPX Lacute Tcaron -20\nKPX Lacute Tcommaaccent -20\nKPX Lacute V -55\nKPX Lacute W -55\nKPX Lacute Y -20\nKPX Lacute Yacute -20\nKPX Lacute Ydieresis -20\nKPX Lacute quoteright -37\nKPX Lacute y -30\nKPX Lacute yacute -30\nKPX Lacute ydieresis -30\nKPX Lcommaaccent T -20\nKPX Lcommaaccent Tcaron -20\nKPX Lcommaaccent Tcommaaccent -20\nKPX Lcommaaccent V -55\nKPX Lcommaaccent W -55\nKPX Lcommaaccent Y -20\nKPX Lcommaaccent Yacute -20\nKPX Lcommaaccent Ydieresis -20\nKPX Lcommaaccent quoteright -37\nKPX Lcommaaccent y -30\nKPX Lcommaaccent yacute -30\nKPX Lcommaaccent ydieresis -30\nKPX Lslash T -20\nKPX Lslash Tcaron -20\nKPX Lslash Tcommaaccent -20\nKPX Lslash V -55\nKPX Lslash W -55\nKPX Lslash Y -20\nKPX Lslash Yacute -20\nKPX Lslash Ydieresis -20\nKPX Lslash quoteright -37\nKPX Lslash y -30\nKPX Lslash yacute -30\nKPX Lslash ydieresis -30\nKPX N A -27\nKPX N Aacute -27\nKPX N Abreve -27\nKPX N Acircumflex -27\nKPX N Adieresis -27\nKPX N Agrave -27\nKPX N Amacron -27\nKPX N Aogonek -27\nKPX N Aring -27\nKPX N Atilde -27\nKPX Nacute A -27\nKPX Nacute Aacute -27\nKPX Nacute Abreve -27\nKPX Nacute Acircumflex -27\nKPX Nacute Adieresis -27\nKPX Nacute Agrave -27\nKPX Nacute Amacron -27\nKPX Nacute Aogonek -27\nKPX Nacute Aring -27\nKPX Nacute Atilde -27\nKPX Ncaron A -27\nKPX Ncaron Aacute -27\nKPX Ncaron Abreve -27\nKPX Ncaron Acircumflex -27\nKPX Ncaron Adieresis -27\nKPX Ncaron Agrave -27\nKPX Ncaron Amacron -27\nKPX Ncaron Aogonek -27\nKPX Ncaron Aring -27\nKPX Ncaron Atilde -27\nKPX Ncommaaccent A -27\nKPX Ncommaaccent Aacute -27\nKPX Ncommaaccent Abreve -27\nKPX Ncommaaccent Acircumflex -27\nKPX Ncommaaccent Adieresis -27\nKPX Ncommaaccent Agrave -27\nKPX Ncommaaccent Amacron -27\nKPX Ncommaaccent Aogonek -27\nKPX Ncommaaccent Aring -27\nKPX Ncommaaccent Atilde -27\nKPX Ntilde A -27\nKPX Ntilde Aacute -27\nKPX Ntilde Abreve -27\nKPX Ntilde Acircumflex -27\nKPX Ntilde Adieresis -27\nKPX Ntilde Agrave -27\nKPX Ntilde Amacron -27\nKPX Ntilde Aogonek -27\nKPX Ntilde Aring -27\nKPX Ntilde Atilde -27\nKPX O A -55\nKPX O Aacute -55\nKPX O Abreve -55\nKPX O Acircumflex -55\nKPX O Adieresis -55\nKPX O Agrave -55\nKPX O Amacron -55\nKPX O Aogonek -55\nKPX O Aring -55\nKPX O Atilde -55\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -50\nKPX O X -40\nKPX O Y -50\nKPX O Yacute -50\nKPX O Ydieresis -50\nKPX Oacute A -55\nKPX Oacute Aacute -55\nKPX Oacute Abreve -55\nKPX Oacute Acircumflex -55\nKPX Oacute Adieresis -55\nKPX Oacute Agrave -55\nKPX Oacute Amacron -55\nKPX Oacute Aogonek -55\nKPX Oacute Aring -55\nKPX Oacute Atilde -55\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -50\nKPX Oacute X -40\nKPX Oacute Y -50\nKPX Oacute Yacute -50\nKPX Oacute Ydieresis -50\nKPX Ocircumflex A -55\nKPX Ocircumflex Aacute -55\nKPX Ocircumflex Abreve -55\nKPX Ocircumflex Acircumflex -55\nKPX Ocircumflex Adieresis -55\nKPX Ocircumflex Agrave -55\nKPX Ocircumflex Amacron -55\nKPX Ocircumflex Aogonek -55\nKPX Ocircumflex Aring -55\nKPX Ocircumflex Atilde -55\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -50\nKPX Ocircumflex X -40\nKPX Ocircumflex Y -50\nKPX Ocircumflex Yacute -50\nKPX Ocircumflex Ydieresis -50\nKPX Odieresis A -55\nKPX Odieresis Aacute -55\nKPX Odieresis Abreve -55\nKPX Odieresis Acircumflex -55\nKPX Odieresis Adieresis -55\nKPX Odieresis Agrave -55\nKPX Odieresis Amacron -55\nKPX Odieresis Aogonek -55\nKPX Odieresis Aring -55\nKPX Odieresis Atilde -55\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -50\nKPX Odieresis X -40\nKPX Odieresis Y -50\nKPX Odieresis Yacute -50\nKPX Odieresis Ydieresis -50\nKPX Ograve A -55\nKPX Ograve Aacute -55\nKPX Ograve Abreve -55\nKPX Ograve Acircumflex -55\nKPX Ograve Adieresis -55\nKPX Ograve Agrave -55\nKPX Ograve Amacron -55\nKPX Ograve Aogonek -55\nKPX Ograve Aring -55\nKPX Ograve Atilde -55\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -50\nKPX Ograve X -40\nKPX Ograve Y -50\nKPX Ograve Yacute -50\nKPX Ograve Ydieresis -50\nKPX Ohungarumlaut A -55\nKPX Ohungarumlaut Aacute -55\nKPX Ohungarumlaut Abreve -55\nKPX Ohungarumlaut Acircumflex -55\nKPX Ohungarumlaut Adieresis -55\nKPX Ohungarumlaut Agrave -55\nKPX Ohungarumlaut Amacron -55\nKPX Ohungarumlaut Aogonek -55\nKPX Ohungarumlaut Aring -55\nKPX Ohungarumlaut Atilde -55\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -50\nKPX Ohungarumlaut X -40\nKPX Ohungarumlaut Y -50\nKPX Ohungarumlaut Yacute -50\nKPX Ohungarumlaut Ydieresis -50\nKPX Omacron A -55\nKPX Omacron Aacute -55\nKPX Omacron Abreve -55\nKPX Omacron Acircumflex -55\nKPX Omacron Adieresis -55\nKPX Omacron Agrave -55\nKPX Omacron Amacron -55\nKPX Omacron Aogonek -55\nKPX Omacron Aring -55\nKPX Omacron Atilde -55\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -50\nKPX Omacron X -40\nKPX Omacron Y -50\nKPX Omacron Yacute -50\nKPX Omacron Ydieresis -50\nKPX Oslash A -55\nKPX Oslash Aacute -55\nKPX Oslash Abreve -55\nKPX Oslash Acircumflex -55\nKPX Oslash Adieresis -55\nKPX Oslash Agrave -55\nKPX Oslash Amacron -55\nKPX Oslash Aogonek -55\nKPX Oslash Aring -55\nKPX Oslash Atilde -55\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -50\nKPX Oslash X -40\nKPX Oslash Y -50\nKPX Oslash Yacute -50\nKPX Oslash Ydieresis -50\nKPX Otilde A -55\nKPX Otilde Aacute -55\nKPX Otilde Abreve -55\nKPX Otilde Acircumflex -55\nKPX Otilde Adieresis -55\nKPX Otilde Agrave -55\nKPX Otilde Amacron -55\nKPX Otilde Aogonek -55\nKPX Otilde Aring -55\nKPX Otilde Atilde -55\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -50\nKPX Otilde X -40\nKPX Otilde Y -50\nKPX Otilde Yacute -50\nKPX Otilde Ydieresis -50\nKPX P A -90\nKPX P Aacute -90\nKPX P Abreve -90\nKPX P Acircumflex -90\nKPX P Adieresis -90\nKPX P Agrave -90\nKPX P Amacron -90\nKPX P Aogonek -90\nKPX P Aring -90\nKPX P Atilde -90\nKPX P a -80\nKPX P aacute -80\nKPX P abreve -80\nKPX P acircumflex -80\nKPX P adieresis -80\nKPX P agrave -80\nKPX P amacron -80\nKPX P aogonek -80\nKPX P aring -80\nKPX P atilde -80\nKPX P comma -135\nKPX P e -80\nKPX P eacute -80\nKPX P ecaron -80\nKPX P ecircumflex -80\nKPX P edieresis -80\nKPX P edotaccent -80\nKPX P egrave -80\nKPX P emacron -80\nKPX P eogonek -80\nKPX P o -80\nKPX P oacute -80\nKPX P ocircumflex -80\nKPX P odieresis -80\nKPX P ograve -80\nKPX P ohungarumlaut -80\nKPX P omacron -80\nKPX P oslash -80\nKPX P otilde -80\nKPX P period -135\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX R O -40\nKPX R Oacute -40\nKPX R Ocircumflex -40\nKPX R Odieresis -40\nKPX R Ograve -40\nKPX R Ohungarumlaut -40\nKPX R Omacron -40\nKPX R Oslash -40\nKPX R Otilde -40\nKPX R U -40\nKPX R Uacute -40\nKPX R Ucircumflex -40\nKPX R Udieresis -40\nKPX R Ugrave -40\nKPX R Uhungarumlaut -40\nKPX R Umacron -40\nKPX R Uogonek -40\nKPX R Uring -40\nKPX R V -18\nKPX R W -18\nKPX R Y -18\nKPX R Yacute -18\nKPX R Ydieresis -18\nKPX Racute O -40\nKPX Racute Oacute -40\nKPX Racute Ocircumflex -40\nKPX Racute Odieresis -40\nKPX Racute Ograve -40\nKPX Racute Ohungarumlaut -40\nKPX Racute Omacron -40\nKPX Racute Oslash -40\nKPX Racute Otilde -40\nKPX Racute U -40\nKPX Racute Uacute -40\nKPX Racute Ucircumflex -40\nKPX Racute Udieresis -40\nKPX Racute Ugrave -40\nKPX Racute Uhungarumlaut -40\nKPX Racute Umacron -40\nKPX Racute Uogonek -40\nKPX Racute Uring -40\nKPX Racute V -18\nKPX Racute W -18\nKPX Racute Y -18\nKPX Racute Yacute -18\nKPX Racute Ydieresis -18\nKPX Rcaron O -40\nKPX Rcaron Oacute -40\nKPX Rcaron Ocircumflex -40\nKPX Rcaron Odieresis -40\nKPX Rcaron Ograve -40\nKPX Rcaron Ohungarumlaut -40\nKPX Rcaron Omacron -40\nKPX Rcaron Oslash -40\nKPX Rcaron Otilde -40\nKPX Rcaron U -40\nKPX Rcaron Uacute -40\nKPX Rcaron Ucircumflex -40\nKPX Rcaron Udieresis -40\nKPX Rcaron Ugrave -40\nKPX Rcaron Uhungarumlaut -40\nKPX Rcaron Umacron -40\nKPX Rcaron Uogonek -40\nKPX Rcaron Uring -40\nKPX Rcaron V -18\nKPX Rcaron W -18\nKPX Rcaron Y -18\nKPX Rcaron Yacute -18\nKPX Rcaron Ydieresis -18\nKPX Rcommaaccent O -40\nKPX Rcommaaccent Oacute -40\nKPX Rcommaaccent Ocircumflex -40\nKPX Rcommaaccent Odieresis -40\nKPX Rcommaaccent Ograve -40\nKPX Rcommaaccent Ohungarumlaut -40\nKPX Rcommaaccent Omacron -40\nKPX Rcommaaccent Oslash -40\nKPX Rcommaaccent Otilde -40\nKPX Rcommaaccent U -40\nKPX Rcommaaccent Uacute -40\nKPX Rcommaaccent Ucircumflex -40\nKPX Rcommaaccent Udieresis -40\nKPX Rcommaaccent Ugrave -40\nKPX Rcommaaccent Uhungarumlaut -40\nKPX Rcommaaccent Umacron -40\nKPX Rcommaaccent Uogonek -40\nKPX Rcommaaccent Uring -40\nKPX Rcommaaccent V -18\nKPX Rcommaaccent W -18\nKPX Rcommaaccent Y -18\nKPX Rcommaaccent Yacute -18\nKPX Rcommaaccent Ydieresis -18\nKPX T A -50\nKPX T Aacute -50\nKPX T Abreve -50\nKPX T Acircumflex -50\nKPX T Adieresis -50\nKPX T Agrave -50\nKPX T Amacron -50\nKPX T Aogonek -50\nKPX T Aring -50\nKPX T Atilde -50\nKPX T O -18\nKPX T Oacute -18\nKPX T Ocircumflex -18\nKPX T Odieresis -18\nKPX T Ograve -18\nKPX T Ohungarumlaut -18\nKPX T Omacron -18\nKPX T Oslash -18\nKPX T Otilde -18\nKPX T a -92\nKPX T aacute -92\nKPX T abreve -92\nKPX T acircumflex -92\nKPX T adieresis -92\nKPX T agrave -92\nKPX T amacron -92\nKPX T aogonek -92\nKPX T aring -92\nKPX T atilde -92\nKPX T colon -55\nKPX T comma -74\nKPX T e -92\nKPX T eacute -92\nKPX T ecaron -92\nKPX T ecircumflex -52\nKPX T edieresis -52\nKPX T edotaccent -92\nKPX T egrave -52\nKPX T emacron -52\nKPX T eogonek -92\nKPX T hyphen -74\nKPX T i -55\nKPX T iacute -55\nKPX T iogonek -55\nKPX T o -92\nKPX T oacute -92\nKPX T ocircumflex -92\nKPX T odieresis -92\nKPX T ograve -92\nKPX T ohungarumlaut -92\nKPX T omacron -92\nKPX T oslash -92\nKPX T otilde -92\nKPX T period -74\nKPX T r -55\nKPX T racute -55\nKPX T rcaron -55\nKPX T rcommaaccent -55\nKPX T semicolon -65\nKPX T u -55\nKPX T uacute -55\nKPX T ucircumflex -55\nKPX T udieresis -55\nKPX T ugrave -55\nKPX T uhungarumlaut -55\nKPX T umacron -55\nKPX T uogonek -55\nKPX T uring -55\nKPX T w -74\nKPX T y -74\nKPX T yacute -74\nKPX T ydieresis -34\nKPX Tcaron A -50\nKPX Tcaron Aacute -50\nKPX Tcaron Abreve -50\nKPX Tcaron Acircumflex -50\nKPX Tcaron Adieresis -50\nKPX Tcaron Agrave -50\nKPX Tcaron Amacron -50\nKPX Tcaron Aogonek -50\nKPX Tcaron Aring -50\nKPX Tcaron Atilde -50\nKPX Tcaron O -18\nKPX Tcaron Oacute -18\nKPX Tcaron Ocircumflex -18\nKPX Tcaron Odieresis -18\nKPX Tcaron Ograve -18\nKPX Tcaron Ohungarumlaut -18\nKPX Tcaron Omacron -18\nKPX Tcaron Oslash -18\nKPX Tcaron Otilde -18\nKPX Tcaron a -92\nKPX Tcaron aacute -92\nKPX Tcaron abreve -92\nKPX Tcaron acircumflex -92\nKPX Tcaron adieresis -92\nKPX Tcaron agrave -92\nKPX Tcaron amacron -92\nKPX Tcaron aogonek -92\nKPX Tcaron aring -92\nKPX Tcaron atilde -92\nKPX Tcaron colon -55\nKPX Tcaron comma -74\nKPX Tcaron e -92\nKPX Tcaron eacute -92\nKPX Tcaron ecaron -92\nKPX Tcaron ecircumflex -52\nKPX Tcaron edieresis -52\nKPX Tcaron edotaccent -92\nKPX Tcaron egrave -52\nKPX Tcaron emacron -52\nKPX Tcaron eogonek -92\nKPX Tcaron hyphen -74\nKPX Tcaron i -55\nKPX Tcaron iacute -55\nKPX Tcaron iogonek -55\nKPX Tcaron o -92\nKPX Tcaron oacute -92\nKPX Tcaron ocircumflex -92\nKPX Tcaron odieresis -92\nKPX Tcaron ograve -92\nKPX Tcaron ohungarumlaut -92\nKPX Tcaron omacron -92\nKPX Tcaron oslash -92\nKPX Tcaron otilde -92\nKPX Tcaron period -74\nKPX Tcaron r -55\nKPX Tcaron racute -55\nKPX Tcaron rcaron -55\nKPX Tcaron rcommaaccent -55\nKPX Tcaron semicolon -65\nKPX Tcaron u -55\nKPX Tcaron uacute -55\nKPX Tcaron ucircumflex -55\nKPX Tcaron udieresis -55\nKPX Tcaron ugrave -55\nKPX Tcaron uhungarumlaut -55\nKPX Tcaron umacron -55\nKPX Tcaron uogonek -55\nKPX Tcaron uring -55\nKPX Tcaron w -74\nKPX Tcaron y -74\nKPX Tcaron yacute -74\nKPX Tcaron ydieresis -34\nKPX Tcommaaccent A -50\nKPX Tcommaaccent Aacute -50\nKPX Tcommaaccent Abreve -50\nKPX Tcommaaccent Acircumflex -50\nKPX Tcommaaccent Adieresis -50\nKPX Tcommaaccent Agrave -50\nKPX Tcommaaccent Amacron -50\nKPX Tcommaaccent Aogonek -50\nKPX Tcommaaccent Aring -50\nKPX Tcommaaccent Atilde -50\nKPX Tcommaaccent O -18\nKPX Tcommaaccent Oacute -18\nKPX Tcommaaccent Ocircumflex -18\nKPX Tcommaaccent Odieresis -18\nKPX Tcommaaccent Ograve -18\nKPX Tcommaaccent Ohungarumlaut -18\nKPX Tcommaaccent Omacron -18\nKPX Tcommaaccent Oslash -18\nKPX Tcommaaccent Otilde -18\nKPX Tcommaaccent a -92\nKPX Tcommaaccent aacute -92\nKPX Tcommaaccent abreve -92\nKPX Tcommaaccent acircumflex -92\nKPX Tcommaaccent adieresis -92\nKPX Tcommaaccent agrave -92\nKPX Tcommaaccent amacron -92\nKPX Tcommaaccent aogonek -92\nKPX Tcommaaccent aring -92\nKPX Tcommaaccent atilde -92\nKPX Tcommaaccent colon -55\nKPX Tcommaaccent comma -74\nKPX Tcommaaccent e -92\nKPX Tcommaaccent eacute -92\nKPX Tcommaaccent ecaron -92\nKPX Tcommaaccent ecircumflex -52\nKPX Tcommaaccent edieresis -52\nKPX Tcommaaccent edotaccent -92\nKPX Tcommaaccent egrave -52\nKPX Tcommaaccent emacron -52\nKPX Tcommaaccent eogonek -92\nKPX Tcommaaccent hyphen -74\nKPX Tcommaaccent i -55\nKPX Tcommaaccent iacute -55\nKPX Tcommaaccent iogonek -55\nKPX Tcommaaccent o -92\nKPX Tcommaaccent oacute -92\nKPX Tcommaaccent ocircumflex -92\nKPX Tcommaaccent odieresis -92\nKPX Tcommaaccent ograve -92\nKPX Tcommaaccent ohungarumlaut -92\nKPX Tcommaaccent omacron -92\nKPX Tcommaaccent oslash -92\nKPX Tcommaaccent otilde -92\nKPX Tcommaaccent period -74\nKPX Tcommaaccent r -55\nKPX Tcommaaccent racute -55\nKPX Tcommaaccent rcaron -55\nKPX Tcommaaccent rcommaaccent -55\nKPX Tcommaaccent semicolon -65\nKPX Tcommaaccent u -55\nKPX Tcommaaccent uacute -55\nKPX Tcommaaccent ucircumflex -55\nKPX Tcommaaccent udieresis -55\nKPX Tcommaaccent ugrave -55\nKPX Tcommaaccent uhungarumlaut -55\nKPX Tcommaaccent umacron -55\nKPX Tcommaaccent uogonek -55\nKPX Tcommaaccent uring -55\nKPX Tcommaaccent w -74\nKPX Tcommaaccent y -74\nKPX Tcommaaccent yacute -74\nKPX Tcommaaccent ydieresis -34\nKPX U A -40\nKPX U Aacute -40\nKPX U Abreve -40\nKPX U Acircumflex -40\nKPX U Adieresis -40\nKPX U Agrave -40\nKPX U Amacron -40\nKPX U Aogonek -40\nKPX U Aring -40\nKPX U Atilde -40\nKPX U comma -25\nKPX U period -25\nKPX Uacute A -40\nKPX Uacute Aacute -40\nKPX Uacute Abreve -40\nKPX Uacute Acircumflex -40\nKPX Uacute Adieresis -40\nKPX Uacute Agrave -40\nKPX Uacute Amacron -40\nKPX Uacute Aogonek -40\nKPX Uacute Aring -40\nKPX Uacute Atilde -40\nKPX Uacute comma -25\nKPX Uacute period -25\nKPX Ucircumflex A -40\nKPX Ucircumflex Aacute -40\nKPX Ucircumflex Abreve -40\nKPX Ucircumflex Acircumflex -40\nKPX Ucircumflex Adieresis -40\nKPX Ucircumflex Agrave -40\nKPX Ucircumflex Amacron -40\nKPX Ucircumflex Aogonek -40\nKPX Ucircumflex Aring -40\nKPX Ucircumflex Atilde -40\nKPX Ucircumflex comma -25\nKPX Ucircumflex period -25\nKPX Udieresis A -40\nKPX Udieresis Aacute -40\nKPX Udieresis Abreve -40\nKPX Udieresis Acircumflex -40\nKPX Udieresis Adieresis -40\nKPX Udieresis Agrave -40\nKPX Udieresis Amacron -40\nKPX Udieresis Aogonek -40\nKPX Udieresis Aring -40\nKPX Udieresis Atilde -40\nKPX Udieresis comma -25\nKPX Udieresis period -25\nKPX Ugrave A -40\nKPX Ugrave Aacute -40\nKPX Ugrave Abreve -40\nKPX Ugrave Acircumflex -40\nKPX Ugrave Adieresis -40\nKPX Ugrave Agrave -40\nKPX Ugrave Amacron -40\nKPX Ugrave Aogonek -40\nKPX Ugrave Aring -40\nKPX Ugrave Atilde -40\nKPX Ugrave comma -25\nKPX Ugrave period -25\nKPX Uhungarumlaut A -40\nKPX Uhungarumlaut Aacute -40\nKPX Uhungarumlaut Abreve -40\nKPX Uhungarumlaut Acircumflex -40\nKPX Uhungarumlaut Adieresis -40\nKPX Uhungarumlaut Agrave -40\nKPX Uhungarumlaut Amacron -40\nKPX Uhungarumlaut Aogonek -40\nKPX Uhungarumlaut Aring -40\nKPX Uhungarumlaut Atilde -40\nKPX Uhungarumlaut comma -25\nKPX Uhungarumlaut period -25\nKPX Umacron A -40\nKPX Umacron Aacute -40\nKPX Umacron Abreve -40\nKPX Umacron Acircumflex -40\nKPX Umacron Adieresis -40\nKPX Umacron Agrave -40\nKPX Umacron Amacron -40\nKPX Umacron Aogonek -40\nKPX Umacron Aring -40\nKPX Umacron Atilde -40\nKPX Umacron comma -25\nKPX Umacron period -25\nKPX Uogonek A -40\nKPX Uogonek Aacute -40\nKPX Uogonek Abreve -40\nKPX Uogonek Acircumflex -40\nKPX Uogonek Adieresis -40\nKPX Uogonek Agrave -40\nKPX Uogonek Amacron -40\nKPX Uogonek Aogonek -40\nKPX Uogonek Aring -40\nKPX Uogonek Atilde -40\nKPX Uogonek comma -25\nKPX Uogonek period -25\nKPX Uring A -40\nKPX Uring Aacute -40\nKPX Uring Abreve -40\nKPX Uring Acircumflex -40\nKPX Uring Adieresis -40\nKPX Uring Agrave -40\nKPX Uring Amacron -40\nKPX Uring Aogonek -40\nKPX Uring Aring -40\nKPX Uring Atilde -40\nKPX Uring comma -25\nKPX Uring period -25\nKPX V A -60\nKPX V Aacute -60\nKPX V Abreve -60\nKPX V Acircumflex -60\nKPX V Adieresis -60\nKPX V Agrave -60\nKPX V Amacron -60\nKPX V Aogonek -60\nKPX V Aring -60\nKPX V Atilde -60\nKPX V O -30\nKPX V Oacute -30\nKPX V Ocircumflex -30\nKPX V Odieresis -30\nKPX V Ograve -30\nKPX V Ohungarumlaut -30\nKPX V Omacron -30\nKPX V Oslash -30\nKPX V Otilde -30\nKPX V a -111\nKPX V aacute -111\nKPX V abreve -111\nKPX V acircumflex -111\nKPX V adieresis -111\nKPX V agrave -111\nKPX V amacron -111\nKPX V aogonek -111\nKPX V aring -111\nKPX V atilde -111\nKPX V colon -65\nKPX V comma -129\nKPX V e -111\nKPX V eacute -111\nKPX V ecaron -111\nKPX V ecircumflex -111\nKPX V edieresis -71\nKPX V edotaccent -111\nKPX V egrave -71\nKPX V emacron -71\nKPX V eogonek -111\nKPX V hyphen -55\nKPX V i -74\nKPX V iacute -74\nKPX V icircumflex -34\nKPX V idieresis -34\nKPX V igrave -34\nKPX V imacron -34\nKPX V iogonek -74\nKPX V o -111\nKPX V oacute -111\nKPX V ocircumflex -111\nKPX V odieresis -111\nKPX V ograve -111\nKPX V ohungarumlaut -111\nKPX V omacron -111\nKPX V oslash -111\nKPX V otilde -111\nKPX V period -129\nKPX V semicolon -74\nKPX V u -74\nKPX V uacute -74\nKPX V ucircumflex -74\nKPX V udieresis -74\nKPX V ugrave -74\nKPX V uhungarumlaut -74\nKPX V umacron -74\nKPX V uogonek -74\nKPX V uring -74\nKPX W A -60\nKPX W Aacute -60\nKPX W Abreve -60\nKPX W Acircumflex -60\nKPX W Adieresis -60\nKPX W Agrave -60\nKPX W Amacron -60\nKPX W Aogonek -60\nKPX W Aring -60\nKPX W Atilde -60\nKPX W O -25\nKPX W Oacute -25\nKPX W Ocircumflex -25\nKPX W Odieresis -25\nKPX W Ograve -25\nKPX W Ohungarumlaut -25\nKPX W Omacron -25\nKPX W Oslash -25\nKPX W Otilde -25\nKPX W a -92\nKPX W aacute -92\nKPX W abreve -92\nKPX W acircumflex -92\nKPX W adieresis -92\nKPX W agrave -92\nKPX W amacron -92\nKPX W aogonek -92\nKPX W aring -92\nKPX W atilde -92\nKPX W colon -65\nKPX W comma -92\nKPX W e -92\nKPX W eacute -92\nKPX W ecaron -92\nKPX W ecircumflex -92\nKPX W edieresis -52\nKPX W edotaccent -92\nKPX W egrave -52\nKPX W emacron -52\nKPX W eogonek -92\nKPX W hyphen -37\nKPX W i -55\nKPX W iacute -55\nKPX W iogonek -55\nKPX W o -92\nKPX W oacute -92\nKPX W ocircumflex -92\nKPX W odieresis -92\nKPX W ograve -92\nKPX W ohungarumlaut -92\nKPX W omacron -92\nKPX W oslash -92\nKPX W otilde -92\nKPX W period -92\nKPX W semicolon -65\nKPX W u -55\nKPX W uacute -55\nKPX W ucircumflex -55\nKPX W udieresis -55\nKPX W ugrave -55\nKPX W uhungarumlaut -55\nKPX W umacron -55\nKPX W uogonek -55\nKPX W uring -55\nKPX W y -70\nKPX W yacute -70\nKPX W ydieresis -70\nKPX Y A -50\nKPX Y Aacute -50\nKPX Y Abreve -50\nKPX Y Acircumflex -50\nKPX Y Adieresis -50\nKPX Y Agrave -50\nKPX Y Amacron -50\nKPX Y Aogonek -50\nKPX Y Aring -50\nKPX Y Atilde -50\nKPX Y O -15\nKPX Y Oacute -15\nKPX Y Ocircumflex -15\nKPX Y Odieresis -15\nKPX Y Ograve -15\nKPX Y Ohungarumlaut -15\nKPX Y Omacron -15\nKPX Y Oslash -15\nKPX Y Otilde -15\nKPX Y a -92\nKPX Y aacute -92\nKPX Y abreve -92\nKPX Y acircumflex -92\nKPX Y adieresis -92\nKPX Y agrave -92\nKPX Y amacron -92\nKPX Y aogonek -92\nKPX Y aring -92\nKPX Y atilde -92\nKPX Y colon -65\nKPX Y comma -92\nKPX Y e -92\nKPX Y eacute -92\nKPX Y ecaron -92\nKPX Y ecircumflex -92\nKPX Y edieresis -52\nKPX Y edotaccent -92\nKPX Y egrave -52\nKPX Y emacron -52\nKPX Y eogonek -92\nKPX Y hyphen -74\nKPX Y i -74\nKPX Y iacute -74\nKPX Y icircumflex -34\nKPX Y idieresis -34\nKPX Y igrave -34\nKPX Y imacron -34\nKPX Y iogonek -74\nKPX Y o -92\nKPX Y oacute -92\nKPX Y ocircumflex -92\nKPX Y odieresis -92\nKPX Y ograve -92\nKPX Y ohungarumlaut -92\nKPX Y omacron -92\nKPX Y oslash -92\nKPX Y otilde -92\nKPX Y period -92\nKPX Y semicolon -65\nKPX Y u -92\nKPX Y uacute -92\nKPX Y ucircumflex -92\nKPX Y udieresis -92\nKPX Y ugrave -92\nKPX Y uhungarumlaut -92\nKPX Y umacron -92\nKPX Y uogonek -92\nKPX Y uring -92\nKPX Yacute A -50\nKPX Yacute Aacute -50\nKPX Yacute Abreve -50\nKPX Yacute Acircumflex -50\nKPX Yacute Adieresis -50\nKPX Yacute Agrave -50\nKPX Yacute Amacron -50\nKPX Yacute Aogonek -50\nKPX Yacute Aring -50\nKPX Yacute Atilde -50\nKPX Yacute O -15\nKPX Yacute Oacute -15\nKPX Yacute Ocircumflex -15\nKPX Yacute Odieresis -15\nKPX Yacute Ograve -15\nKPX Yacute Ohungarumlaut -15\nKPX Yacute Omacron -15\nKPX Yacute Oslash -15\nKPX Yacute Otilde -15\nKPX Yacute a -92\nKPX Yacute aacute -92\nKPX Yacute abreve -92\nKPX Yacute acircumflex -92\nKPX Yacute adieresis -92\nKPX Yacute agrave -92\nKPX Yacute amacron -92\nKPX Yacute aogonek -92\nKPX Yacute aring -92\nKPX Yacute atilde -92\nKPX Yacute colon -65\nKPX Yacute comma -92\nKPX Yacute e -92\nKPX Yacute eacute -92\nKPX Yacute ecaron -92\nKPX Yacute ecircumflex -92\nKPX Yacute edieresis -52\nKPX Yacute edotaccent -92\nKPX Yacute egrave -52\nKPX Yacute emacron -52\nKPX Yacute eogonek -92\nKPX Yacute hyphen -74\nKPX Yacute i -74\nKPX Yacute iacute -74\nKPX Yacute icircumflex -34\nKPX Yacute idieresis -34\nKPX Yacute igrave -34\nKPX Yacute imacron -34\nKPX Yacute iogonek -74\nKPX Yacute o -92\nKPX Yacute oacute -92\nKPX Yacute ocircumflex -92\nKPX Yacute odieresis -92\nKPX Yacute ograve -92\nKPX Yacute ohungarumlaut -92\nKPX Yacute omacron -92\nKPX Yacute oslash -92\nKPX Yacute otilde -92\nKPX Yacute period -92\nKPX Yacute semicolon -65\nKPX Yacute u -92\nKPX Yacute uacute -92\nKPX Yacute ucircumflex -92\nKPX Yacute udieresis -92\nKPX Yacute ugrave -92\nKPX Yacute uhungarumlaut -92\nKPX Yacute umacron -92\nKPX Yacute uogonek -92\nKPX Yacute uring -92\nKPX Ydieresis A -50\nKPX Ydieresis Aacute -50\nKPX Ydieresis Abreve -50\nKPX Ydieresis Acircumflex -50\nKPX Ydieresis Adieresis -50\nKPX Ydieresis Agrave -50\nKPX Ydieresis Amacron -50\nKPX Ydieresis Aogonek -50\nKPX Ydieresis Aring -50\nKPX Ydieresis Atilde -50\nKPX Ydieresis O -15\nKPX Ydieresis Oacute -15\nKPX Ydieresis Ocircumflex -15\nKPX Ydieresis Odieresis -15\nKPX Ydieresis Ograve -15\nKPX Ydieresis Ohungarumlaut -15\nKPX Ydieresis Omacron -15\nKPX Ydieresis Oslash -15\nKPX Ydieresis Otilde -15\nKPX Ydieresis a -92\nKPX Ydieresis aacute -92\nKPX Ydieresis abreve -92\nKPX Ydieresis acircumflex -92\nKPX Ydieresis adieresis -92\nKPX Ydieresis agrave -92\nKPX Ydieresis amacron -92\nKPX Ydieresis aogonek -92\nKPX Ydieresis aring -92\nKPX Ydieresis atilde -92\nKPX Ydieresis colon -65\nKPX Ydieresis comma -92\nKPX Ydieresis e -92\nKPX Ydieresis eacute -92\nKPX Ydieresis ecaron -92\nKPX Ydieresis ecircumflex -92\nKPX Ydieresis edieresis -52\nKPX Ydieresis edotaccent -92\nKPX Ydieresis egrave -52\nKPX Ydieresis emacron -52\nKPX Ydieresis eogonek -92\nKPX Ydieresis hyphen -74\nKPX Ydieresis i -74\nKPX Ydieresis iacute -74\nKPX Ydieresis icircumflex -34\nKPX Ydieresis idieresis -34\nKPX Ydieresis igrave -34\nKPX Ydieresis imacron -34\nKPX Ydieresis iogonek -74\nKPX Ydieresis o -92\nKPX Ydieresis oacute -92\nKPX Ydieresis ocircumflex -92\nKPX Ydieresis odieresis -92\nKPX Ydieresis ograve -92\nKPX Ydieresis ohungarumlaut -92\nKPX Ydieresis omacron -92\nKPX Ydieresis oslash -92\nKPX Ydieresis otilde -92\nKPX Ydieresis period -92\nKPX Ydieresis semicolon -65\nKPX Ydieresis u -92\nKPX Ydieresis uacute -92\nKPX Ydieresis ucircumflex -92\nKPX Ydieresis udieresis -92\nKPX Ydieresis ugrave -92\nKPX Ydieresis uhungarumlaut -92\nKPX Ydieresis umacron -92\nKPX Ydieresis uogonek -92\nKPX Ydieresis uring -92\nKPX a g -10\nKPX a gbreve -10\nKPX a gcommaaccent -10\nKPX aacute g -10\nKPX aacute gbreve -10\nKPX aacute gcommaaccent -10\nKPX abreve g -10\nKPX abreve gbreve -10\nKPX abreve gcommaaccent -10\nKPX acircumflex g -10\nKPX acircumflex gbreve -10\nKPX acircumflex gcommaaccent -10\nKPX adieresis g -10\nKPX adieresis gbreve -10\nKPX adieresis gcommaaccent -10\nKPX agrave g -10\nKPX agrave gbreve -10\nKPX agrave gcommaaccent -10\nKPX amacron g -10\nKPX amacron gbreve -10\nKPX amacron gcommaaccent -10\nKPX aogonek g -10\nKPX aogonek gbreve -10\nKPX aogonek gcommaaccent -10\nKPX aring g -10\nKPX aring gbreve -10\nKPX aring gcommaaccent -10\nKPX atilde g -10\nKPX atilde gbreve -10\nKPX atilde gcommaaccent -10\nKPX b period -40\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX c h -15\nKPX c k -20\nKPX c kcommaaccent -20\nKPX cacute h -15\nKPX cacute k -20\nKPX cacute kcommaaccent -20\nKPX ccaron h -15\nKPX ccaron k -20\nKPX ccaron kcommaaccent -20\nKPX ccedilla h -15\nKPX ccedilla k -20\nKPX ccedilla kcommaaccent -20\nKPX comma quotedblright -140\nKPX comma quoteright -140\nKPX e comma -10\nKPX e g -40\nKPX e gbreve -40\nKPX e gcommaaccent -40\nKPX e period -15\nKPX e v -15\nKPX e w -15\nKPX e x -20\nKPX e y -30\nKPX e yacute -30\nKPX e ydieresis -30\nKPX eacute comma -10\nKPX eacute g -40\nKPX eacute gbreve -40\nKPX eacute gcommaaccent -40\nKPX eacute period -15\nKPX eacute v -15\nKPX eacute w -15\nKPX eacute x -20\nKPX eacute y -30\nKPX eacute yacute -30\nKPX eacute ydieresis -30\nKPX ecaron comma -10\nKPX ecaron g -40\nKPX ecaron gbreve -40\nKPX ecaron gcommaaccent -40\nKPX ecaron period -15\nKPX ecaron v -15\nKPX ecaron w -15\nKPX ecaron x -20\nKPX ecaron y -30\nKPX ecaron yacute -30\nKPX ecaron ydieresis -30\nKPX ecircumflex comma -10\nKPX ecircumflex g -40\nKPX ecircumflex gbreve -40\nKPX ecircumflex gcommaaccent -40\nKPX ecircumflex period -15\nKPX ecircumflex v -15\nKPX ecircumflex w -15\nKPX ecircumflex x -20\nKPX ecircumflex y -30\nKPX ecircumflex yacute -30\nKPX ecircumflex ydieresis -30\nKPX edieresis comma -10\nKPX edieresis g -40\nKPX edieresis gbreve -40\nKPX edieresis gcommaaccent -40\nKPX edieresis period -15\nKPX edieresis v -15\nKPX edieresis w -15\nKPX edieresis x -20\nKPX edieresis y -30\nKPX edieresis yacute -30\nKPX edieresis ydieresis -30\nKPX edotaccent comma -10\nKPX edotaccent g -40\nKPX edotaccent gbreve -40\nKPX edotaccent gcommaaccent -40\nKPX edotaccent period -15\nKPX edotaccent v -15\nKPX edotaccent w -15\nKPX edotaccent x -20\nKPX edotaccent y -30\nKPX edotaccent yacute -30\nKPX edotaccent ydieresis -30\nKPX egrave comma -10\nKPX egrave g -40\nKPX egrave gbreve -40\nKPX egrave gcommaaccent -40\nKPX egrave period -15\nKPX egrave v -15\nKPX egrave w -15\nKPX egrave x -20\nKPX egrave y -30\nKPX egrave yacute -30\nKPX egrave ydieresis -30\nKPX emacron comma -10\nKPX emacron g -40\nKPX emacron gbreve -40\nKPX emacron gcommaaccent -40\nKPX emacron period -15\nKPX emacron v -15\nKPX emacron w -15\nKPX emacron x -20\nKPX emacron y -30\nKPX emacron yacute -30\nKPX emacron ydieresis -30\nKPX eogonek comma -10\nKPX eogonek g -40\nKPX eogonek gbreve -40\nKPX eogonek gcommaaccent -40\nKPX eogonek period -15\nKPX eogonek v -15\nKPX eogonek w -15\nKPX eogonek x -20\nKPX eogonek y -30\nKPX eogonek yacute -30\nKPX eogonek ydieresis -30\nKPX f comma -10\nKPX f dotlessi -60\nKPX f f -18\nKPX f i -20\nKPX f iogonek -20\nKPX f period -15\nKPX f quoteright 92\nKPX g comma -10\nKPX g e -10\nKPX g eacute -10\nKPX g ecaron -10\nKPX g ecircumflex -10\nKPX g edieresis -10\nKPX g edotaccent -10\nKPX g egrave -10\nKPX g emacron -10\nKPX g eogonek -10\nKPX g g -10\nKPX g gbreve -10\nKPX g gcommaaccent -10\nKPX g period -15\nKPX gbreve comma -10\nKPX gbreve e -10\nKPX gbreve eacute -10\nKPX gbreve ecaron -10\nKPX gbreve ecircumflex -10\nKPX gbreve edieresis -10\nKPX gbreve edotaccent -10\nKPX gbreve egrave -10\nKPX gbreve emacron -10\nKPX gbreve eogonek -10\nKPX gbreve g -10\nKPX gbreve gbreve -10\nKPX gbreve gcommaaccent -10\nKPX gbreve period -15\nKPX gcommaaccent comma -10\nKPX gcommaaccent e -10\nKPX gcommaaccent eacute -10\nKPX gcommaaccent ecaron -10\nKPX gcommaaccent ecircumflex -10\nKPX gcommaaccent edieresis -10\nKPX gcommaaccent edotaccent -10\nKPX gcommaaccent egrave -10\nKPX gcommaaccent emacron -10\nKPX gcommaaccent eogonek -10\nKPX gcommaaccent g -10\nKPX gcommaaccent gbreve -10\nKPX gcommaaccent gcommaaccent -10\nKPX gcommaaccent period -15\nKPX k e -10\nKPX k eacute -10\nKPX k ecaron -10\nKPX k ecircumflex -10\nKPX k edieresis -10\nKPX k edotaccent -10\nKPX k egrave -10\nKPX k emacron -10\nKPX k eogonek -10\nKPX k o -10\nKPX k oacute -10\nKPX k ocircumflex -10\nKPX k odieresis -10\nKPX k ograve -10\nKPX k ohungarumlaut -10\nKPX k omacron -10\nKPX k oslash -10\nKPX k otilde -10\nKPX k y -10\nKPX k yacute -10\nKPX k ydieresis -10\nKPX kcommaaccent e -10\nKPX kcommaaccent eacute -10\nKPX kcommaaccent ecaron -10\nKPX kcommaaccent ecircumflex -10\nKPX kcommaaccent edieresis -10\nKPX kcommaaccent edotaccent -10\nKPX kcommaaccent egrave -10\nKPX kcommaaccent emacron -10\nKPX kcommaaccent eogonek -10\nKPX kcommaaccent o -10\nKPX kcommaaccent oacute -10\nKPX kcommaaccent ocircumflex -10\nKPX kcommaaccent odieresis -10\nKPX kcommaaccent ograve -10\nKPX kcommaaccent ohungarumlaut -10\nKPX kcommaaccent omacron -10\nKPX kcommaaccent oslash -10\nKPX kcommaaccent otilde -10\nKPX kcommaaccent y -10\nKPX kcommaaccent yacute -10\nKPX kcommaaccent ydieresis -10\nKPX n v -40\nKPX nacute v -40\nKPX ncaron v -40\nKPX ncommaaccent v -40\nKPX ntilde v -40\nKPX o g -10\nKPX o gbreve -10\nKPX o gcommaaccent -10\nKPX o v -10\nKPX oacute g -10\nKPX oacute gbreve -10\nKPX oacute gcommaaccent -10\nKPX oacute v -10\nKPX ocircumflex g -10\nKPX ocircumflex gbreve -10\nKPX ocircumflex gcommaaccent -10\nKPX ocircumflex v -10\nKPX odieresis g -10\nKPX odieresis gbreve -10\nKPX odieresis gcommaaccent -10\nKPX odieresis v -10\nKPX ograve g -10\nKPX ograve gbreve -10\nKPX ograve gcommaaccent -10\nKPX ograve v -10\nKPX ohungarumlaut g -10\nKPX ohungarumlaut gbreve -10\nKPX ohungarumlaut gcommaaccent -10\nKPX ohungarumlaut v -10\nKPX omacron g -10\nKPX omacron gbreve -10\nKPX omacron gcommaaccent -10\nKPX omacron v -10\nKPX oslash g -10\nKPX oslash gbreve -10\nKPX oslash gcommaaccent -10\nKPX oslash v -10\nKPX otilde g -10\nKPX otilde gbreve -10\nKPX otilde gcommaaccent -10\nKPX otilde v -10\nKPX period quotedblright -140\nKPX period quoteright -140\nKPX quoteleft quoteleft -111\nKPX quoteright d -25\nKPX quoteright dcroat -25\nKPX quoteright quoteright -111\nKPX quoteright r -25\nKPX quoteright racute -25\nKPX quoteright rcaron -25\nKPX quoteright rcommaaccent -25\nKPX quoteright s -40\nKPX quoteright sacute -40\nKPX quoteright scaron -40\nKPX quoteright scedilla -40\nKPX quoteright scommaaccent -40\nKPX quoteright space -111\nKPX quoteright t -30\nKPX quoteright tcommaaccent -30\nKPX quoteright v -10\nKPX r a -15\nKPX r aacute -15\nKPX r abreve -15\nKPX r acircumflex -15\nKPX r adieresis -15\nKPX r agrave -15\nKPX r amacron -15\nKPX r aogonek -15\nKPX r aring -15\nKPX r atilde -15\nKPX r c -37\nKPX r cacute -37\nKPX r ccaron -37\nKPX r ccedilla -37\nKPX r comma -111\nKPX r d -37\nKPX r dcroat -37\nKPX r e -37\nKPX r eacute -37\nKPX r ecaron -37\nKPX r ecircumflex -37\nKPX r edieresis -37\nKPX r edotaccent -37\nKPX r egrave -37\nKPX r emacron -37\nKPX r eogonek -37\nKPX r g -37\nKPX r gbreve -37\nKPX r gcommaaccent -37\nKPX r hyphen -20\nKPX r o -45\nKPX r oacute -45\nKPX r ocircumflex -45\nKPX r odieresis -45\nKPX r ograve -45\nKPX r ohungarumlaut -45\nKPX r omacron -45\nKPX r oslash -45\nKPX r otilde -45\nKPX r period -111\nKPX r q -37\nKPX r s -10\nKPX r sacute -10\nKPX r scaron -10\nKPX r scedilla -10\nKPX r scommaaccent -10\nKPX racute a -15\nKPX racute aacute -15\nKPX racute abreve -15\nKPX racute acircumflex -15\nKPX racute adieresis -15\nKPX racute agrave -15\nKPX racute amacron -15\nKPX racute aogonek -15\nKPX racute aring -15\nKPX racute atilde -15\nKPX racute c -37\nKPX racute cacute -37\nKPX racute ccaron -37\nKPX racute ccedilla -37\nKPX racute comma -111\nKPX racute d -37\nKPX racute dcroat -37\nKPX racute e -37\nKPX racute eacute -37\nKPX racute ecaron -37\nKPX racute ecircumflex -37\nKPX racute edieresis -37\nKPX racute edotaccent -37\nKPX racute egrave -37\nKPX racute emacron -37\nKPX racute eogonek -37\nKPX racute g -37\nKPX racute gbreve -37\nKPX racute gcommaaccent -37\nKPX racute hyphen -20\nKPX racute o -45\nKPX racute oacute -45\nKPX racute ocircumflex -45\nKPX racute odieresis -45\nKPX racute ograve -45\nKPX racute ohungarumlaut -45\nKPX racute omacron -45\nKPX racute oslash -45\nKPX racute otilde -45\nKPX racute period -111\nKPX racute q -37\nKPX racute s -10\nKPX racute sacute -10\nKPX racute scaron -10\nKPX racute scedilla -10\nKPX racute scommaaccent -10\nKPX rcaron a -15\nKPX rcaron aacute -15\nKPX rcaron abreve -15\nKPX rcaron acircumflex -15\nKPX rcaron adieresis -15\nKPX rcaron agrave -15\nKPX rcaron amacron -15\nKPX rcaron aogonek -15\nKPX rcaron aring -15\nKPX rcaron atilde -15\nKPX rcaron c -37\nKPX rcaron cacute -37\nKPX rcaron ccaron -37\nKPX rcaron ccedilla -37\nKPX rcaron comma -111\nKPX rcaron d -37\nKPX rcaron dcroat -37\nKPX rcaron e -37\nKPX rcaron eacute -37\nKPX rcaron ecaron -37\nKPX rcaron ecircumflex -37\nKPX rcaron edieresis -37\nKPX rcaron edotaccent -37\nKPX rcaron egrave -37\nKPX rcaron emacron -37\nKPX rcaron eogonek -37\nKPX rcaron g -37\nKPX rcaron gbreve -37\nKPX rcaron gcommaaccent -37\nKPX rcaron hyphen -20\nKPX rcaron o -45\nKPX rcaron oacute -45\nKPX rcaron ocircumflex -45\nKPX rcaron odieresis -45\nKPX rcaron ograve -45\nKPX rcaron ohungarumlaut -45\nKPX rcaron omacron -45\nKPX rcaron oslash -45\nKPX rcaron otilde -45\nKPX rcaron period -111\nKPX rcaron q -37\nKPX rcaron s -10\nKPX rcaron sacute -10\nKPX rcaron scaron -10\nKPX rcaron scedilla -10\nKPX rcaron scommaaccent -10\nKPX rcommaaccent a -15\nKPX rcommaaccent aacute -15\nKPX rcommaaccent abreve -15\nKPX rcommaaccent acircumflex -15\nKPX rcommaaccent adieresis -15\nKPX rcommaaccent agrave -15\nKPX rcommaaccent amacron -15\nKPX rcommaaccent aogonek -15\nKPX rcommaaccent aring -15\nKPX rcommaaccent atilde -15\nKPX rcommaaccent c -37\nKPX rcommaaccent cacute -37\nKPX rcommaaccent ccaron -37\nKPX rcommaaccent ccedilla -37\nKPX rcommaaccent comma -111\nKPX rcommaaccent d -37\nKPX rcommaaccent dcroat -37\nKPX rcommaaccent e -37\nKPX rcommaaccent eacute -37\nKPX rcommaaccent ecaron -37\nKPX rcommaaccent ecircumflex -37\nKPX rcommaaccent edieresis -37\nKPX rcommaaccent edotaccent -37\nKPX rcommaaccent egrave -37\nKPX rcommaaccent emacron -37\nKPX rcommaaccent eogonek -37\nKPX rcommaaccent g -37\nKPX rcommaaccent gbreve -37\nKPX rcommaaccent gcommaaccent -37\nKPX rcommaaccent hyphen -20\nKPX rcommaaccent o -45\nKPX rcommaaccent oacute -45\nKPX rcommaaccent ocircumflex -45\nKPX rcommaaccent odieresis -45\nKPX rcommaaccent ograve -45\nKPX rcommaaccent ohungarumlaut -45\nKPX rcommaaccent omacron -45\nKPX rcommaaccent oslash -45\nKPX rcommaaccent otilde -45\nKPX rcommaaccent period -111\nKPX rcommaaccent q -37\nKPX rcommaaccent s -10\nKPX rcommaaccent sacute -10\nKPX rcommaaccent scaron -10\nKPX rcommaaccent scedilla -10\nKPX rcommaaccent scommaaccent -10\nKPX space A -18\nKPX space Aacute -18\nKPX space Abreve -18\nKPX space Acircumflex -18\nKPX space Adieresis -18\nKPX space Agrave -18\nKPX space Amacron -18\nKPX space Aogonek -18\nKPX space Aring -18\nKPX space Atilde -18\nKPX space T -18\nKPX space Tcaron -18\nKPX space Tcommaaccent -18\nKPX space V -35\nKPX space W -40\nKPX space Y -75\nKPX space Yacute -75\nKPX space Ydieresis -75\nKPX v comma -74\nKPX v period -74\nKPX w comma -74\nKPX w period -74\nKPX y comma -55\nKPX y period -55\nKPX yacute comma -55\nKPX yacute period -55\nKPX ydieresis comma -55\nKPX ydieresis period -55\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 84
      "Times-BoldItalic": function() {                                                                                 // 85
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\nComment Creation Date: Thu May  1 13:04:06 1997\nComment UniqueID 43066\nComment VMusage 45874 56899\nFontName Times-BoldItalic\nFullName Times Bold Italic\nFamilyName Times\nWeight Bold\nItalicAngle -15\nIsFixedPitch false\nCharacterSet ExtendedRoman\nFontBBox -200 -218 996 921 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\nEncodingScheme AdobeStandardEncoding\nCapHeight 669\nXHeight 462\nAscender 683\nDescender -217\nStdHW 42\nStdVW 121\nStartCharMetrics 315\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 389 ; N exclam ; B 67 -13 370 684 ;\nC 34 ; WX 555 ; N quotedbl ; B 136 398 536 685 ;\nC 35 ; WX 500 ; N numbersign ; B -33 0 533 700 ;\nC 36 ; WX 500 ; N dollar ; B -20 -100 497 733 ;\nC 37 ; WX 833 ; N percent ; B 39 -10 793 692 ;\nC 38 ; WX 778 ; N ampersand ; B 5 -19 699 682 ;\nC 39 ; WX 333 ; N quoteright ; B 98 369 302 685 ;\nC 40 ; WX 333 ; N parenleft ; B 28 -179 344 685 ;\nC 41 ; WX 333 ; N parenright ; B -44 -179 271 685 ;\nC 42 ; WX 500 ; N asterisk ; B 65 249 456 685 ;\nC 43 ; WX 570 ; N plus ; B 33 0 537 506 ;\nC 44 ; WX 250 ; N comma ; B -60 -182 144 134 ;\nC 45 ; WX 333 ; N hyphen ; B 2 166 271 282 ;\nC 46 ; WX 250 ; N period ; B -9 -13 139 135 ;\nC 47 ; WX 278 ; N slash ; B -64 -18 342 685 ;\nC 48 ; WX 500 ; N zero ; B 17 -14 477 683 ;\nC 49 ; WX 500 ; N one ; B 5 0 419 683 ;\nC 50 ; WX 500 ; N two ; B -27 0 446 683 ;\nC 51 ; WX 500 ; N three ; B -15 -13 450 683 ;\nC 52 ; WX 500 ; N four ; B -15 0 503 683 ;\nC 53 ; WX 500 ; N five ; B -11 -13 487 669 ;\nC 54 ; WX 500 ; N six ; B 23 -15 509 679 ;\nC 55 ; WX 500 ; N seven ; B 52 0 525 669 ;\nC 56 ; WX 500 ; N eight ; B 3 -13 476 683 ;\nC 57 ; WX 500 ; N nine ; B -12 -10 475 683 ;\nC 58 ; WX 333 ; N colon ; B 23 -13 264 459 ;\nC 59 ; WX 333 ; N semicolon ; B -25 -183 264 459 ;\nC 60 ; WX 570 ; N less ; B 31 -8 539 514 ;\nC 61 ; WX 570 ; N equal ; B 33 107 537 399 ;\nC 62 ; WX 570 ; N greater ; B 31 -8 539 514 ;\nC 63 ; WX 500 ; N question ; B 79 -13 470 684 ;\nC 64 ; WX 832 ; N at ; B 63 -18 770 685 ;\nC 65 ; WX 667 ; N A ; B -67 0 593 683 ;\nC 66 ; WX 667 ; N B ; B -24 0 624 669 ;\nC 67 ; WX 667 ; N C ; B 32 -18 677 685 ;\nC 68 ; WX 722 ; N D ; B -46 0 685 669 ;\nC 69 ; WX 667 ; N E ; B -27 0 653 669 ;\nC 70 ; WX 667 ; N F ; B -13 0 660 669 ;\nC 71 ; WX 722 ; N G ; B 21 -18 706 685 ;\nC 72 ; WX 778 ; N H ; B -24 0 799 669 ;\nC 73 ; WX 389 ; N I ; B -32 0 406 669 ;\nC 74 ; WX 500 ; N J ; B -46 -99 524 669 ;\nC 75 ; WX 667 ; N K ; B -21 0 702 669 ;\nC 76 ; WX 611 ; N L ; B -22 0 590 669 ;\nC 77 ; WX 889 ; N M ; B -29 -12 917 669 ;\nC 78 ; WX 722 ; N N ; B -27 -15 748 669 ;\nC 79 ; WX 722 ; N O ; B 27 -18 691 685 ;\nC 80 ; WX 611 ; N P ; B -27 0 613 669 ;\nC 81 ; WX 722 ; N Q ; B 27 -208 691 685 ;\nC 82 ; WX 667 ; N R ; B -29 0 623 669 ;\nC 83 ; WX 556 ; N S ; B 2 -18 526 685 ;\nC 84 ; WX 611 ; N T ; B 50 0 650 669 ;\nC 85 ; WX 722 ; N U ; B 67 -18 744 669 ;\nC 86 ; WX 667 ; N V ; B 65 -18 715 669 ;\nC 87 ; WX 889 ; N W ; B 65 -18 940 669 ;\nC 88 ; WX 667 ; N X ; B -24 0 694 669 ;\nC 89 ; WX 611 ; N Y ; B 73 0 659 669 ;\nC 90 ; WX 611 ; N Z ; B -11 0 590 669 ;\nC 91 ; WX 333 ; N bracketleft ; B -37 -159 362 674 ;\nC 92 ; WX 278 ; N backslash ; B -1 -18 279 685 ;\nC 93 ; WX 333 ; N bracketright ; B -56 -157 343 674 ;\nC 94 ; WX 570 ; N asciicircum ; B 67 304 503 669 ;\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\nC 96 ; WX 333 ; N quoteleft ; B 128 369 332 685 ;\nC 97 ; WX 500 ; N a ; B -21 -14 455 462 ;\nC 98 ; WX 500 ; N b ; B -14 -13 444 699 ;\nC 99 ; WX 444 ; N c ; B -5 -13 392 462 ;\nC 100 ; WX 500 ; N d ; B -21 -13 517 699 ;\nC 101 ; WX 444 ; N e ; B 5 -13 398 462 ;\nC 102 ; WX 333 ; N f ; B -169 -205 446 698 ; L i fi ; L l fl ;\nC 103 ; WX 500 ; N g ; B -52 -203 478 462 ;\nC 104 ; WX 556 ; N h ; B -13 -9 498 699 ;\nC 105 ; WX 278 ; N i ; B 2 -9 263 684 ;\nC 106 ; WX 278 ; N j ; B -189 -207 279 684 ;\nC 107 ; WX 500 ; N k ; B -23 -8 483 699 ;\nC 108 ; WX 278 ; N l ; B 2 -9 290 699 ;\nC 109 ; WX 778 ; N m ; B -14 -9 722 462 ;\nC 110 ; WX 556 ; N n ; B -6 -9 493 462 ;\nC 111 ; WX 500 ; N o ; B -3 -13 441 462 ;\nC 112 ; WX 500 ; N p ; B -120 -205 446 462 ;\nC 113 ; WX 500 ; N q ; B 1 -205 471 462 ;\nC 114 ; WX 389 ; N r ; B -21 0 389 462 ;\nC 115 ; WX 389 ; N s ; B -19 -13 333 462 ;\nC 116 ; WX 278 ; N t ; B -11 -9 281 594 ;\nC 117 ; WX 556 ; N u ; B 15 -9 492 462 ;\nC 118 ; WX 444 ; N v ; B 16 -13 401 462 ;\nC 119 ; WX 667 ; N w ; B 16 -13 614 462 ;\nC 120 ; WX 500 ; N x ; B -46 -13 469 462 ;\nC 121 ; WX 444 ; N y ; B -94 -205 392 462 ;\nC 122 ; WX 389 ; N z ; B -43 -78 368 449 ;\nC 123 ; WX 348 ; N braceleft ; B 5 -187 436 686 ;\nC 124 ; WX 220 ; N bar ; B 66 -218 154 782 ;\nC 125 ; WX 348 ; N braceright ; B -129 -187 302 686 ;\nC 126 ; WX 570 ; N asciitilde ; B 54 173 516 333 ;\nC 161 ; WX 389 ; N exclamdown ; B 19 -205 322 492 ;\nC 162 ; WX 500 ; N cent ; B 42 -143 439 576 ;\nC 163 ; WX 500 ; N sterling ; B -32 -12 510 683 ;\nC 164 ; WX 167 ; N fraction ; B -169 -14 324 683 ;\nC 165 ; WX 500 ; N yen ; B 33 0 628 669 ;\nC 166 ; WX 500 ; N florin ; B -87 -156 537 707 ;\nC 167 ; WX 500 ; N section ; B 36 -143 459 685 ;\nC 168 ; WX 500 ; N currency ; B -26 34 526 586 ;\nC 169 ; WX 278 ; N quotesingle ; B 128 398 268 685 ;\nC 170 ; WX 500 ; N quotedblleft ; B 53 369 513 685 ;\nC 171 ; WX 500 ; N guillemotleft ; B 12 32 468 415 ;\nC 172 ; WX 333 ; N guilsinglleft ; B 32 32 303 415 ;\nC 173 ; WX 333 ; N guilsinglright ; B 10 32 281 415 ;\nC 174 ; WX 556 ; N fi ; B -188 -205 514 703 ;\nC 175 ; WX 556 ; N fl ; B -186 -205 553 704 ;\nC 177 ; WX 500 ; N endash ; B -40 178 477 269 ;\nC 178 ; WX 500 ; N dagger ; B 91 -145 494 685 ;\nC 179 ; WX 500 ; N daggerdbl ; B 10 -139 493 685 ;\nC 180 ; WX 250 ; N periodcentered ; B 51 257 199 405 ;\nC 182 ; WX 500 ; N paragraph ; B -57 -193 562 669 ;\nC 183 ; WX 350 ; N bullet ; B 0 175 350 525 ;\nC 184 ; WX 333 ; N quotesinglbase ; B -5 -182 199 134 ;\nC 185 ; WX 500 ; N quotedblbase ; B -57 -182 403 134 ;\nC 186 ; WX 500 ; N quotedblright ; B 53 369 513 685 ;\nC 187 ; WX 500 ; N guillemotright ; B 12 32 468 415 ;\nC 188 ; WX 1000 ; N ellipsis ; B 40 -13 852 135 ;\nC 189 ; WX 1000 ; N perthousand ; B 7 -29 996 706 ;\nC 191 ; WX 500 ; N questiondown ; B 30 -205 421 492 ;\nC 193 ; WX 333 ; N grave ; B 85 516 297 697 ;\nC 194 ; WX 333 ; N acute ; B 139 516 379 697 ;\nC 195 ; WX 333 ; N circumflex ; B 40 516 367 690 ;\nC 196 ; WX 333 ; N tilde ; B 48 536 407 655 ;\nC 197 ; WX 333 ; N macron ; B 51 553 393 623 ;\nC 198 ; WX 333 ; N breve ; B 71 516 387 678 ;\nC 199 ; WX 333 ; N dotaccent ; B 163 550 298 684 ;\nC 200 ; WX 333 ; N dieresis ; B 55 550 402 684 ;\nC 202 ; WX 333 ; N ring ; B 127 516 340 729 ;\nC 203 ; WX 333 ; N cedilla ; B -80 -218 156 5 ;\nC 205 ; WX 333 ; N hungarumlaut ; B 69 516 498 697 ;\nC 206 ; WX 333 ; N ogonek ; B 15 -183 244 34 ;\nC 207 ; WX 333 ; N caron ; B 79 516 411 690 ;\nC 208 ; WX 1000 ; N emdash ; B -40 178 977 269 ;\nC 225 ; WX 944 ; N AE ; B -64 0 918 669 ;\nC 227 ; WX 266 ; N ordfeminine ; B 16 399 330 685 ;\nC 232 ; WX 611 ; N Lslash ; B -22 0 590 669 ;\nC 233 ; WX 722 ; N Oslash ; B 27 -125 691 764 ;\nC 234 ; WX 944 ; N OE ; B 23 -8 946 677 ;\nC 235 ; WX 300 ; N ordmasculine ; B 56 400 347 685 ;\nC 241 ; WX 722 ; N ae ; B -5 -13 673 462 ;\nC 245 ; WX 278 ; N dotlessi ; B 2 -9 238 462 ;\nC 248 ; WX 278 ; N lslash ; B -7 -9 307 699 ;\nC 249 ; WX 500 ; N oslash ; B -3 -119 441 560 ;\nC 250 ; WX 722 ; N oe ; B 6 -13 674 462 ;\nC 251 ; WX 500 ; N germandbls ; B -200 -200 473 705 ;\nC -1 ; WX 389 ; N Idieresis ; B -32 0 450 862 ;\nC -1 ; WX 444 ; N eacute ; B 5 -13 435 697 ;\nC -1 ; WX 500 ; N abreve ; B -21 -14 471 678 ;\nC -1 ; WX 556 ; N uhungarumlaut ; B 15 -9 610 697 ;\nC -1 ; WX 444 ; N ecaron ; B 5 -13 467 690 ;\nC -1 ; WX 611 ; N Ydieresis ; B 73 0 659 862 ;\nC -1 ; WX 570 ; N divide ; B 33 -29 537 535 ;\nC -1 ; WX 611 ; N Yacute ; B 73 0 659 904 ;\nC -1 ; WX 667 ; N Acircumflex ; B -67 0 593 897 ;\nC -1 ; WX 500 ; N aacute ; B -21 -14 463 697 ;\nC -1 ; WX 722 ; N Ucircumflex ; B 67 -18 744 897 ;\nC -1 ; WX 444 ; N yacute ; B -94 -205 435 697 ;\nC -1 ; WX 389 ; N scommaaccent ; B -19 -218 333 462 ;\nC -1 ; WX 444 ; N ecircumflex ; B 5 -13 423 690 ;\nC -1 ; WX 722 ; N Uring ; B 67 -18 744 921 ;\nC -1 ; WX 722 ; N Udieresis ; B 67 -18 744 862 ;\nC -1 ; WX 500 ; N aogonek ; B -21 -183 455 462 ;\nC -1 ; WX 722 ; N Uacute ; B 67 -18 744 904 ;\nC -1 ; WX 556 ; N uogonek ; B 15 -183 492 462 ;\nC -1 ; WX 667 ; N Edieresis ; B -27 0 653 862 ;\nC -1 ; WX 722 ; N Dcroat ; B -31 0 700 669 ;\nC -1 ; WX 250 ; N commaaccent ; B -36 -218 131 -50 ;\nC -1 ; WX 747 ; N copyright ; B 30 -18 718 685 ;\nC -1 ; WX 667 ; N Emacron ; B -27 0 653 830 ;\nC -1 ; WX 444 ; N ccaron ; B -5 -13 467 690 ;\nC -1 ; WX 500 ; N aring ; B -21 -14 455 729 ;\nC -1 ; WX 722 ; N Ncommaaccent ; B -27 -218 748 669 ;\nC -1 ; WX 278 ; N lacute ; B 2 -9 392 904 ;\nC -1 ; WX 500 ; N agrave ; B -21 -14 455 697 ;\nC -1 ; WX 611 ; N Tcommaaccent ; B 50 -218 650 669 ;\nC -1 ; WX 667 ; N Cacute ; B 32 -18 677 904 ;\nC -1 ; WX 500 ; N atilde ; B -21 -14 491 655 ;\nC -1 ; WX 667 ; N Edotaccent ; B -27 0 653 862 ;\nC -1 ; WX 389 ; N scaron ; B -19 -13 424 690 ;\nC -1 ; WX 389 ; N scedilla ; B -19 -218 333 462 ;\nC -1 ; WX 278 ; N iacute ; B 2 -9 352 697 ;\nC -1 ; WX 494 ; N lozenge ; B 10 0 484 745 ;\nC -1 ; WX 667 ; N Rcaron ; B -29 0 623 897 ;\nC -1 ; WX 722 ; N Gcommaaccent ; B 21 -218 706 685 ;\nC -1 ; WX 556 ; N ucircumflex ; B 15 -9 492 690 ;\nC -1 ; WX 500 ; N acircumflex ; B -21 -14 455 690 ;\nC -1 ; WX 667 ; N Amacron ; B -67 0 593 830 ;\nC -1 ; WX 389 ; N rcaron ; B -21 0 424 690 ;\nC -1 ; WX 444 ; N ccedilla ; B -5 -218 392 462 ;\nC -1 ; WX 611 ; N Zdotaccent ; B -11 0 590 862 ;\nC -1 ; WX 611 ; N Thorn ; B -27 0 573 669 ;\nC -1 ; WX 722 ; N Omacron ; B 27 -18 691 830 ;\nC -1 ; WX 667 ; N Racute ; B -29 0 623 904 ;\nC -1 ; WX 556 ; N Sacute ; B 2 -18 531 904 ;\nC -1 ; WX 608 ; N dcaron ; B -21 -13 675 708 ;\nC -1 ; WX 722 ; N Umacron ; B 67 -18 744 830 ;\nC -1 ; WX 556 ; N uring ; B 15 -9 492 729 ;\nC -1 ; WX 300 ; N threesuperior ; B 17 265 321 683 ;\nC -1 ; WX 722 ; N Ograve ; B 27 -18 691 904 ;\nC -1 ; WX 667 ; N Agrave ; B -67 0 593 904 ;\nC -1 ; WX 667 ; N Abreve ; B -67 0 593 885 ;\nC -1 ; WX 570 ; N multiply ; B 48 16 522 490 ;\nC -1 ; WX 556 ; N uacute ; B 15 -9 492 697 ;\nC -1 ; WX 611 ; N Tcaron ; B 50 0 650 897 ;\nC -1 ; WX 494 ; N partialdiff ; B 11 -21 494 750 ;\nC -1 ; WX 444 ; N ydieresis ; B -94 -205 443 655 ;\nC -1 ; WX 722 ; N Nacute ; B -27 -15 748 904 ;\nC -1 ; WX 278 ; N icircumflex ; B -3 -9 324 690 ;\nC -1 ; WX 667 ; N Ecircumflex ; B -27 0 653 897 ;\nC -1 ; WX 500 ; N adieresis ; B -21 -14 476 655 ;\nC -1 ; WX 444 ; N edieresis ; B 5 -13 448 655 ;\nC -1 ; WX 444 ; N cacute ; B -5 -13 435 697 ;\nC -1 ; WX 556 ; N nacute ; B -6 -9 493 697 ;\nC -1 ; WX 556 ; N umacron ; B 15 -9 492 623 ;\nC -1 ; WX 722 ; N Ncaron ; B -27 -15 748 897 ;\nC -1 ; WX 389 ; N Iacute ; B -32 0 432 904 ;\nC -1 ; WX 570 ; N plusminus ; B 33 0 537 506 ;\nC -1 ; WX 220 ; N brokenbar ; B 66 -143 154 707 ;\nC -1 ; WX 747 ; N registered ; B 30 -18 718 685 ;\nC -1 ; WX 722 ; N Gbreve ; B 21 -18 706 885 ;\nC -1 ; WX 389 ; N Idotaccent ; B -32 0 406 862 ;\nC -1 ; WX 600 ; N summation ; B 14 -10 585 706 ;\nC -1 ; WX 667 ; N Egrave ; B -27 0 653 904 ;\nC -1 ; WX 389 ; N racute ; B -21 0 407 697 ;\nC -1 ; WX 500 ; N omacron ; B -3 -13 462 623 ;\nC -1 ; WX 611 ; N Zacute ; B -11 0 590 904 ;\nC -1 ; WX 611 ; N Zcaron ; B -11 0 590 897 ;\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 704 ;\nC -1 ; WX 722 ; N Eth ; B -31 0 700 669 ;\nC -1 ; WX 667 ; N Ccedilla ; B 32 -218 677 685 ;\nC -1 ; WX 278 ; N lcommaaccent ; B -42 -218 290 699 ;\nC -1 ; WX 366 ; N tcaron ; B -11 -9 434 754 ;\nC -1 ; WX 444 ; N eogonek ; B 5 -183 398 462 ;\nC -1 ; WX 722 ; N Uogonek ; B 67 -183 744 669 ;\nC -1 ; WX 667 ; N Aacute ; B -67 0 593 904 ;\nC -1 ; WX 667 ; N Adieresis ; B -67 0 593 862 ;\nC -1 ; WX 444 ; N egrave ; B 5 -13 398 697 ;\nC -1 ; WX 389 ; N zacute ; B -43 -78 407 697 ;\nC -1 ; WX 278 ; N iogonek ; B -20 -183 263 684 ;\nC -1 ; WX 722 ; N Oacute ; B 27 -18 691 904 ;\nC -1 ; WX 500 ; N oacute ; B -3 -13 463 697 ;\nC -1 ; WX 500 ; N amacron ; B -21 -14 467 623 ;\nC -1 ; WX 389 ; N sacute ; B -19 -13 407 697 ;\nC -1 ; WX 278 ; N idieresis ; B 2 -9 364 655 ;\nC -1 ; WX 722 ; N Ocircumflex ; B 27 -18 691 897 ;\nC -1 ; WX 722 ; N Ugrave ; B 67 -18 744 904 ;\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC -1 ; WX 500 ; N thorn ; B -120 -205 446 699 ;\nC -1 ; WX 300 ; N twosuperior ; B 2 274 313 683 ;\nC -1 ; WX 722 ; N Odieresis ; B 27 -18 691 862 ;\nC -1 ; WX 576 ; N mu ; B -60 -207 516 449 ;\nC -1 ; WX 278 ; N igrave ; B 2 -9 259 697 ;\nC -1 ; WX 500 ; N ohungarumlaut ; B -3 -13 582 697 ;\nC -1 ; WX 667 ; N Eogonek ; B -27 -183 653 669 ;\nC -1 ; WX 500 ; N dcroat ; B -21 -13 552 699 ;\nC -1 ; WX 750 ; N threequarters ; B 7 -14 726 683 ;\nC -1 ; WX 556 ; N Scedilla ; B 2 -218 526 685 ;\nC -1 ; WX 382 ; N lcaron ; B 2 -9 448 708 ;\nC -1 ; WX 667 ; N Kcommaaccent ; B -21 -218 702 669 ;\nC -1 ; WX 611 ; N Lacute ; B -22 0 590 904 ;\nC -1 ; WX 1000 ; N trademark ; B 32 263 968 669 ;\nC -1 ; WX 444 ; N edotaccent ; B 5 -13 398 655 ;\nC -1 ; WX 389 ; N Igrave ; B -32 0 406 904 ;\nC -1 ; WX 389 ; N Imacron ; B -32 0 461 830 ;\nC -1 ; WX 611 ; N Lcaron ; B -22 0 671 718 ;\nC -1 ; WX 750 ; N onehalf ; B -9 -14 723 683 ;\nC -1 ; WX 549 ; N lessequal ; B 29 0 526 704 ;\nC -1 ; WX 500 ; N ocircumflex ; B -3 -13 451 690 ;\nC -1 ; WX 556 ; N ntilde ; B -6 -9 504 655 ;\nC -1 ; WX 722 ; N Uhungarumlaut ; B 67 -18 744 904 ;\nC -1 ; WX 667 ; N Eacute ; B -27 0 653 904 ;\nC -1 ; WX 444 ; N emacron ; B 5 -13 439 623 ;\nC -1 ; WX 500 ; N gbreve ; B -52 -203 478 678 ;\nC -1 ; WX 750 ; N onequarter ; B 7 -14 721 683 ;\nC -1 ; WX 556 ; N Scaron ; B 2 -18 553 897 ;\nC -1 ; WX 556 ; N Scommaaccent ; B 2 -218 526 685 ;\nC -1 ; WX 722 ; N Ohungarumlaut ; B 27 -18 723 904 ;\nC -1 ; WX 400 ; N degree ; B 83 397 369 683 ;\nC -1 ; WX 500 ; N ograve ; B -3 -13 441 697 ;\nC -1 ; WX 667 ; N Ccaron ; B 32 -18 677 897 ;\nC -1 ; WX 556 ; N ugrave ; B 15 -9 492 697 ;\nC -1 ; WX 549 ; N radical ; B 10 -46 512 850 ;\nC -1 ; WX 722 ; N Dcaron ; B -46 0 685 897 ;\nC -1 ; WX 389 ; N rcommaaccent ; B -67 -218 389 462 ;\nC -1 ; WX 722 ; N Ntilde ; B -27 -15 748 862 ;\nC -1 ; WX 500 ; N otilde ; B -3 -13 491 655 ;\nC -1 ; WX 667 ; N Rcommaaccent ; B -29 -218 623 669 ;\nC -1 ; WX 611 ; N Lcommaaccent ; B -22 -218 590 669 ;\nC -1 ; WX 667 ; N Atilde ; B -67 0 593 862 ;\nC -1 ; WX 667 ; N Aogonek ; B -67 -183 604 683 ;\nC -1 ; WX 667 ; N Aring ; B -67 0 593 921 ;\nC -1 ; WX 722 ; N Otilde ; B 27 -18 691 862 ;\nC -1 ; WX 389 ; N zdotaccent ; B -43 -78 368 655 ;\nC -1 ; WX 667 ; N Ecaron ; B -27 0 653 897 ;\nC -1 ; WX 389 ; N Iogonek ; B -32 -183 406 669 ;\nC -1 ; WX 500 ; N kcommaaccent ; B -23 -218 483 699 ;\nC -1 ; WX 606 ; N minus ; B 51 209 555 297 ;\nC -1 ; WX 389 ; N Icircumflex ; B -32 0 450 897 ;\nC -1 ; WX 556 ; N ncaron ; B -6 -9 523 690 ;\nC -1 ; WX 278 ; N tcommaaccent ; B -62 -218 281 594 ;\nC -1 ; WX 606 ; N logicalnot ; B 51 108 555 399 ;\nC -1 ; WX 500 ; N odieresis ; B -3 -13 471 655 ;\nC -1 ; WX 556 ; N udieresis ; B 15 -9 499 655 ;\nC -1 ; WX 549 ; N notequal ; B 15 -49 540 570 ;\nC -1 ; WX 500 ; N gcommaaccent ; B -52 -203 478 767 ;\nC -1 ; WX 500 ; N eth ; B -3 -13 454 699 ;\nC -1 ; WX 389 ; N zcaron ; B -43 -78 424 690 ;\nC -1 ; WX 556 ; N ncommaaccent ; B -6 -218 493 462 ;\nC -1 ; WX 300 ; N onesuperior ; B 30 274 301 683 ;\nC -1 ; WX 278 ; N imacron ; B 2 -9 294 623 ;\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\nEndCharMetrics\nStartKernData\nStartKernPairs 2038\nKPX A C -65\nKPX A Cacute -65\nKPX A Ccaron -65\nKPX A Ccedilla -65\nKPX A G -60\nKPX A Gbreve -60\nKPX A Gcommaaccent -60\nKPX A O -50\nKPX A Oacute -50\nKPX A Ocircumflex -50\nKPX A Odieresis -50\nKPX A Ograve -50\nKPX A Ohungarumlaut -50\nKPX A Omacron -50\nKPX A Oslash -50\nKPX A Otilde -50\nKPX A Q -55\nKPX A T -55\nKPX A Tcaron -55\nKPX A Tcommaaccent -55\nKPX A U -50\nKPX A Uacute -50\nKPX A Ucircumflex -50\nKPX A Udieresis -50\nKPX A Ugrave -50\nKPX A Uhungarumlaut -50\nKPX A Umacron -50\nKPX A Uogonek -50\nKPX A Uring -50\nKPX A V -95\nKPX A W -100\nKPX A Y -70\nKPX A Yacute -70\nKPX A Ydieresis -70\nKPX A quoteright -74\nKPX A u -30\nKPX A uacute -30\nKPX A ucircumflex -30\nKPX A udieresis -30\nKPX A ugrave -30\nKPX A uhungarumlaut -30\nKPX A umacron -30\nKPX A uogonek -30\nKPX A uring -30\nKPX A v -74\nKPX A w -74\nKPX A y -74\nKPX A yacute -74\nKPX A ydieresis -74\nKPX Aacute C -65\nKPX Aacute Cacute -65\nKPX Aacute Ccaron -65\nKPX Aacute Ccedilla -65\nKPX Aacute G -60\nKPX Aacute Gbreve -60\nKPX Aacute Gcommaaccent -60\nKPX Aacute O -50\nKPX Aacute Oacute -50\nKPX Aacute Ocircumflex -50\nKPX Aacute Odieresis -50\nKPX Aacute Ograve -50\nKPX Aacute Ohungarumlaut -50\nKPX Aacute Omacron -50\nKPX Aacute Oslash -50\nKPX Aacute Otilde -50\nKPX Aacute Q -55\nKPX Aacute T -55\nKPX Aacute Tcaron -55\nKPX Aacute Tcommaaccent -55\nKPX Aacute U -50\nKPX Aacute Uacute -50\nKPX Aacute Ucircumflex -50\nKPX Aacute Udieresis -50\nKPX Aacute Ugrave -50\nKPX Aacute Uhungarumlaut -50\nKPX Aacute Umacron -50\nKPX Aacute Uogonek -50\nKPX Aacute Uring -50\nKPX Aacute V -95\nKPX Aacute W -100\nKPX Aacute Y -70\nKPX Aacute Yacute -70\nKPX Aacute Ydieresis -70\nKPX Aacute quoteright -74\nKPX Aacute u -30\nKPX Aacute uacute -30\nKPX Aacute ucircumflex -30\nKPX Aacute udieresis -30\nKPX Aacute ugrave -30\nKPX Aacute uhungarumlaut -30\nKPX Aacute umacron -30\nKPX Aacute uogonek -30\nKPX Aacute uring -30\nKPX Aacute v -74\nKPX Aacute w -74\nKPX Aacute y -74\nKPX Aacute yacute -74\nKPX Aacute ydieresis -74\nKPX Abreve C -65\nKPX Abreve Cacute -65\nKPX Abreve Ccaron -65\nKPX Abreve Ccedilla -65\nKPX Abreve G -60\nKPX Abreve Gbreve -60\nKPX Abreve Gcommaaccent -60\nKPX Abreve O -50\nKPX Abreve Oacute -50\nKPX Abreve Ocircumflex -50\nKPX Abreve Odieresis -50\nKPX Abreve Ograve -50\nKPX Abreve Ohungarumlaut -50\nKPX Abreve Omacron -50\nKPX Abreve Oslash -50\nKPX Abreve Otilde -50\nKPX Abreve Q -55\nKPX Abreve T -55\nKPX Abreve Tcaron -55\nKPX Abreve Tcommaaccent -55\nKPX Abreve U -50\nKPX Abreve Uacute -50\nKPX Abreve Ucircumflex -50\nKPX Abreve Udieresis -50\nKPX Abreve Ugrave -50\nKPX Abreve Uhungarumlaut -50\nKPX Abreve Umacron -50\nKPX Abreve Uogonek -50\nKPX Abreve Uring -50\nKPX Abreve V -95\nKPX Abreve W -100\nKPX Abreve Y -70\nKPX Abreve Yacute -70\nKPX Abreve Ydieresis -70\nKPX Abreve quoteright -74\nKPX Abreve u -30\nKPX Abreve uacute -30\nKPX Abreve ucircumflex -30\nKPX Abreve udieresis -30\nKPX Abreve ugrave -30\nKPX Abreve uhungarumlaut -30\nKPX Abreve umacron -30\nKPX Abreve uogonek -30\nKPX Abreve uring -30\nKPX Abreve v -74\nKPX Abreve w -74\nKPX Abreve y -74\nKPX Abreve yacute -74\nKPX Abreve ydieresis -74\nKPX Acircumflex C -65\nKPX Acircumflex Cacute -65\nKPX Acircumflex Ccaron -65\nKPX Acircumflex Ccedilla -65\nKPX Acircumflex G -60\nKPX Acircumflex Gbreve -60\nKPX Acircumflex Gcommaaccent -60\nKPX Acircumflex O -50\nKPX Acircumflex Oacute -50\nKPX Acircumflex Ocircumflex -50\nKPX Acircumflex Odieresis -50\nKPX Acircumflex Ograve -50\nKPX Acircumflex Ohungarumlaut -50\nKPX Acircumflex Omacron -50\nKPX Acircumflex Oslash -50\nKPX Acircumflex Otilde -50\nKPX Acircumflex Q -55\nKPX Acircumflex T -55\nKPX Acircumflex Tcaron -55\nKPX Acircumflex Tcommaaccent -55\nKPX Acircumflex U -50\nKPX Acircumflex Uacute -50\nKPX Acircumflex Ucircumflex -50\nKPX Acircumflex Udieresis -50\nKPX Acircumflex Ugrave -50\nKPX Acircumflex Uhungarumlaut -50\nKPX Acircumflex Umacron -50\nKPX Acircumflex Uogonek -50\nKPX Acircumflex Uring -50\nKPX Acircumflex V -95\nKPX Acircumflex W -100\nKPX Acircumflex Y -70\nKPX Acircumflex Yacute -70\nKPX Acircumflex Ydieresis -70\nKPX Acircumflex quoteright -74\nKPX Acircumflex u -30\nKPX Acircumflex uacute -30\nKPX Acircumflex ucircumflex -30\nKPX Acircumflex udieresis -30\nKPX Acircumflex ugrave -30\nKPX Acircumflex uhungarumlaut -30\nKPX Acircumflex umacron -30\nKPX Acircumflex uogonek -30\nKPX Acircumflex uring -30\nKPX Acircumflex v -74\nKPX Acircumflex w -74\nKPX Acircumflex y -74\nKPX Acircumflex yacute -74\nKPX Acircumflex ydieresis -74\nKPX Adieresis C -65\nKPX Adieresis Cacute -65\nKPX Adieresis Ccaron -65\nKPX Adieresis Ccedilla -65\nKPX Adieresis G -60\nKPX Adieresis Gbreve -60\nKPX Adieresis Gcommaaccent -60\nKPX Adieresis O -50\nKPX Adieresis Oacute -50\nKPX Adieresis Ocircumflex -50\nKPX Adieresis Odieresis -50\nKPX Adieresis Ograve -50\nKPX Adieresis Ohungarumlaut -50\nKPX Adieresis Omacron -50\nKPX Adieresis Oslash -50\nKPX Adieresis Otilde -50\nKPX Adieresis Q -55\nKPX Adieresis T -55\nKPX Adieresis Tcaron -55\nKPX Adieresis Tcommaaccent -55\nKPX Adieresis U -50\nKPX Adieresis Uacute -50\nKPX Adieresis Ucircumflex -50\nKPX Adieresis Udieresis -50\nKPX Adieresis Ugrave -50\nKPX Adieresis Uhungarumlaut -50\nKPX Adieresis Umacron -50\nKPX Adieresis Uogonek -50\nKPX Adieresis Uring -50\nKPX Adieresis V -95\nKPX Adieresis W -100\nKPX Adieresis Y -70\nKPX Adieresis Yacute -70\nKPX Adieresis Ydieresis -70\nKPX Adieresis quoteright -74\nKPX Adieresis u -30\nKPX Adieresis uacute -30\nKPX Adieresis ucircumflex -30\nKPX Adieresis udieresis -30\nKPX Adieresis ugrave -30\nKPX Adieresis uhungarumlaut -30\nKPX Adieresis umacron -30\nKPX Adieresis uogonek -30\nKPX Adieresis uring -30\nKPX Adieresis v -74\nKPX Adieresis w -74\nKPX Adieresis y -74\nKPX Adieresis yacute -74\nKPX Adieresis ydieresis -74\nKPX Agrave C -65\nKPX Agrave Cacute -65\nKPX Agrave Ccaron -65\nKPX Agrave Ccedilla -65\nKPX Agrave G -60\nKPX Agrave Gbreve -60\nKPX Agrave Gcommaaccent -60\nKPX Agrave O -50\nKPX Agrave Oacute -50\nKPX Agrave Ocircumflex -50\nKPX Agrave Odieresis -50\nKPX Agrave Ograve -50\nKPX Agrave Ohungarumlaut -50\nKPX Agrave Omacron -50\nKPX Agrave Oslash -50\nKPX Agrave Otilde -50\nKPX Agrave Q -55\nKPX Agrave T -55\nKPX Agrave Tcaron -55\nKPX Agrave Tcommaaccent -55\nKPX Agrave U -50\nKPX Agrave Uacute -50\nKPX Agrave Ucircumflex -50\nKPX Agrave Udieresis -50\nKPX Agrave Ugrave -50\nKPX Agrave Uhungarumlaut -50\nKPX Agrave Umacron -50\nKPX Agrave Uogonek -50\nKPX Agrave Uring -50\nKPX Agrave V -95\nKPX Agrave W -100\nKPX Agrave Y -70\nKPX Agrave Yacute -70\nKPX Agrave Ydieresis -70\nKPX Agrave quoteright -74\nKPX Agrave u -30\nKPX Agrave uacute -30\nKPX Agrave ucircumflex -30\nKPX Agrave udieresis -30\nKPX Agrave ugrave -30\nKPX Agrave uhungarumlaut -30\nKPX Agrave umacron -30\nKPX Agrave uogonek -30\nKPX Agrave uring -30\nKPX Agrave v -74\nKPX Agrave w -74\nKPX Agrave y -74\nKPX Agrave yacute -74\nKPX Agrave ydieresis -74\nKPX Amacron C -65\nKPX Amacron Cacute -65\nKPX Amacron Ccaron -65\nKPX Amacron Ccedilla -65\nKPX Amacron G -60\nKPX Amacron Gbreve -60\nKPX Amacron Gcommaaccent -60\nKPX Amacron O -50\nKPX Amacron Oacute -50\nKPX Amacron Ocircumflex -50\nKPX Amacron Odieresis -50\nKPX Amacron Ograve -50\nKPX Amacron Ohungarumlaut -50\nKPX Amacron Omacron -50\nKPX Amacron Oslash -50\nKPX Amacron Otilde -50\nKPX Amacron Q -55\nKPX Amacron T -55\nKPX Amacron Tcaron -55\nKPX Amacron Tcommaaccent -55\nKPX Amacron U -50\nKPX Amacron Uacute -50\nKPX Amacron Ucircumflex -50\nKPX Amacron Udieresis -50\nKPX Amacron Ugrave -50\nKPX Amacron Uhungarumlaut -50\nKPX Amacron Umacron -50\nKPX Amacron Uogonek -50\nKPX Amacron Uring -50\nKPX Amacron V -95\nKPX Amacron W -100\nKPX Amacron Y -70\nKPX Amacron Yacute -70\nKPX Amacron Ydieresis -70\nKPX Amacron quoteright -74\nKPX Amacron u -30\nKPX Amacron uacute -30\nKPX Amacron ucircumflex -30\nKPX Amacron udieresis -30\nKPX Amacron ugrave -30\nKPX Amacron uhungarumlaut -30\nKPX Amacron umacron -30\nKPX Amacron uogonek -30\nKPX Amacron uring -30\nKPX Amacron v -74\nKPX Amacron w -74\nKPX Amacron y -74\nKPX Amacron yacute -74\nKPX Amacron ydieresis -74\nKPX Aogonek C -65\nKPX Aogonek Cacute -65\nKPX Aogonek Ccaron -65\nKPX Aogonek Ccedilla -65\nKPX Aogonek G -60\nKPX Aogonek Gbreve -60\nKPX Aogonek Gcommaaccent -60\nKPX Aogonek O -50\nKPX Aogonek Oacute -50\nKPX Aogonek Ocircumflex -50\nKPX Aogonek Odieresis -50\nKPX Aogonek Ograve -50\nKPX Aogonek Ohungarumlaut -50\nKPX Aogonek Omacron -50\nKPX Aogonek Oslash -50\nKPX Aogonek Otilde -50\nKPX Aogonek Q -55\nKPX Aogonek T -55\nKPX Aogonek Tcaron -55\nKPX Aogonek Tcommaaccent -55\nKPX Aogonek U -50\nKPX Aogonek Uacute -50\nKPX Aogonek Ucircumflex -50\nKPX Aogonek Udieresis -50\nKPX Aogonek Ugrave -50\nKPX Aogonek Uhungarumlaut -50\nKPX Aogonek Umacron -50\nKPX Aogonek Uogonek -50\nKPX Aogonek Uring -50\nKPX Aogonek V -95\nKPX Aogonek W -100\nKPX Aogonek Y -70\nKPX Aogonek Yacute -70\nKPX Aogonek Ydieresis -70\nKPX Aogonek quoteright -74\nKPX Aogonek u -30\nKPX Aogonek uacute -30\nKPX Aogonek ucircumflex -30\nKPX Aogonek udieresis -30\nKPX Aogonek ugrave -30\nKPX Aogonek uhungarumlaut -30\nKPX Aogonek umacron -30\nKPX Aogonek uogonek -30\nKPX Aogonek uring -30\nKPX Aogonek v -74\nKPX Aogonek w -74\nKPX Aogonek y -34\nKPX Aogonek yacute -34\nKPX Aogonek ydieresis -34\nKPX Aring C -65\nKPX Aring Cacute -65\nKPX Aring Ccaron -65\nKPX Aring Ccedilla -65\nKPX Aring G -60\nKPX Aring Gbreve -60\nKPX Aring Gcommaaccent -60\nKPX Aring O -50\nKPX Aring Oacute -50\nKPX Aring Ocircumflex -50\nKPX Aring Odieresis -50\nKPX Aring Ograve -50\nKPX Aring Ohungarumlaut -50\nKPX Aring Omacron -50\nKPX Aring Oslash -50\nKPX Aring Otilde -50\nKPX Aring Q -55\nKPX Aring T -55\nKPX Aring Tcaron -55\nKPX Aring Tcommaaccent -55\nKPX Aring U -50\nKPX Aring Uacute -50\nKPX Aring Ucircumflex -50\nKPX Aring Udieresis -50\nKPX Aring Ugrave -50\nKPX Aring Uhungarumlaut -50\nKPX Aring Umacron -50\nKPX Aring Uogonek -50\nKPX Aring Uring -50\nKPX Aring V -95\nKPX Aring W -100\nKPX Aring Y -70\nKPX Aring Yacute -70\nKPX Aring Ydieresis -70\nKPX Aring quoteright -74\nKPX Aring u -30\nKPX Aring uacute -30\nKPX Aring ucircumflex -30\nKPX Aring udieresis -30\nKPX Aring ugrave -30\nKPX Aring uhungarumlaut -30\nKPX Aring umacron -30\nKPX Aring uogonek -30\nKPX Aring uring -30\nKPX Aring v -74\nKPX Aring w -74\nKPX Aring y -74\nKPX Aring yacute -74\nKPX Aring ydieresis -74\nKPX Atilde C -65\nKPX Atilde Cacute -65\nKPX Atilde Ccaron -65\nKPX Atilde Ccedilla -65\nKPX Atilde G -60\nKPX Atilde Gbreve -60\nKPX Atilde Gcommaaccent -60\nKPX Atilde O -50\nKPX Atilde Oacute -50\nKPX Atilde Ocircumflex -50\nKPX Atilde Odieresis -50\nKPX Atilde Ograve -50\nKPX Atilde Ohungarumlaut -50\nKPX Atilde Omacron -50\nKPX Atilde Oslash -50\nKPX Atilde Otilde -50\nKPX Atilde Q -55\nKPX Atilde T -55\nKPX Atilde Tcaron -55\nKPX Atilde Tcommaaccent -55\nKPX Atilde U -50\nKPX Atilde Uacute -50\nKPX Atilde Ucircumflex -50\nKPX Atilde Udieresis -50\nKPX Atilde Ugrave -50\nKPX Atilde Uhungarumlaut -50\nKPX Atilde Umacron -50\nKPX Atilde Uogonek -50\nKPX Atilde Uring -50\nKPX Atilde V -95\nKPX Atilde W -100\nKPX Atilde Y -70\nKPX Atilde Yacute -70\nKPX Atilde Ydieresis -70\nKPX Atilde quoteright -74\nKPX Atilde u -30\nKPX Atilde uacute -30\nKPX Atilde ucircumflex -30\nKPX Atilde udieresis -30\nKPX Atilde ugrave -30\nKPX Atilde uhungarumlaut -30\nKPX Atilde umacron -30\nKPX Atilde uogonek -30\nKPX Atilde uring -30\nKPX Atilde v -74\nKPX Atilde w -74\nKPX Atilde y -74\nKPX Atilde yacute -74\nKPX Atilde ydieresis -74\nKPX B A -25\nKPX B Aacute -25\nKPX B Abreve -25\nKPX B Acircumflex -25\nKPX B Adieresis -25\nKPX B Agrave -25\nKPX B Amacron -25\nKPX B Aogonek -25\nKPX B Aring -25\nKPX B Atilde -25\nKPX B U -10\nKPX B Uacute -10\nKPX B Ucircumflex -10\nKPX B Udieresis -10\nKPX B Ugrave -10\nKPX B Uhungarumlaut -10\nKPX B Umacron -10\nKPX B Uogonek -10\nKPX B Uring -10\nKPX D A -25\nKPX D Aacute -25\nKPX D Abreve -25\nKPX D Acircumflex -25\nKPX D Adieresis -25\nKPX D Agrave -25\nKPX D Amacron -25\nKPX D Aogonek -25\nKPX D Aring -25\nKPX D Atilde -25\nKPX D V -50\nKPX D W -40\nKPX D Y -50\nKPX D Yacute -50\nKPX D Ydieresis -50\nKPX Dcaron A -25\nKPX Dcaron Aacute -25\nKPX Dcaron Abreve -25\nKPX Dcaron Acircumflex -25\nKPX Dcaron Adieresis -25\nKPX Dcaron Agrave -25\nKPX Dcaron Amacron -25\nKPX Dcaron Aogonek -25\nKPX Dcaron Aring -25\nKPX Dcaron Atilde -25\nKPX Dcaron V -50\nKPX Dcaron W -40\nKPX Dcaron Y -50\nKPX Dcaron Yacute -50\nKPX Dcaron Ydieresis -50\nKPX Dcroat A -25\nKPX Dcroat Aacute -25\nKPX Dcroat Abreve -25\nKPX Dcroat Acircumflex -25\nKPX Dcroat Adieresis -25\nKPX Dcroat Agrave -25\nKPX Dcroat Amacron -25\nKPX Dcroat Aogonek -25\nKPX Dcroat Aring -25\nKPX Dcroat Atilde -25\nKPX Dcroat V -50\nKPX Dcroat W -40\nKPX Dcroat Y -50\nKPX Dcroat Yacute -50\nKPX Dcroat Ydieresis -50\nKPX F A -100\nKPX F Aacute -100\nKPX F Abreve -100\nKPX F Acircumflex -100\nKPX F Adieresis -100\nKPX F Agrave -100\nKPX F Amacron -100\nKPX F Aogonek -100\nKPX F Aring -100\nKPX F Atilde -100\nKPX F a -95\nKPX F aacute -95\nKPX F abreve -95\nKPX F acircumflex -95\nKPX F adieresis -95\nKPX F agrave -95\nKPX F amacron -95\nKPX F aogonek -95\nKPX F aring -95\nKPX F atilde -95\nKPX F comma -129\nKPX F e -100\nKPX F eacute -100\nKPX F ecaron -100\nKPX F ecircumflex -100\nKPX F edieresis -100\nKPX F edotaccent -100\nKPX F egrave -100\nKPX F emacron -100\nKPX F eogonek -100\nKPX F i -40\nKPX F iacute -40\nKPX F icircumflex -40\nKPX F idieresis -40\nKPX F igrave -40\nKPX F imacron -40\nKPX F iogonek -40\nKPX F o -70\nKPX F oacute -70\nKPX F ocircumflex -70\nKPX F odieresis -70\nKPX F ograve -70\nKPX F ohungarumlaut -70\nKPX F omacron -70\nKPX F oslash -70\nKPX F otilde -70\nKPX F period -129\nKPX F r -50\nKPX F racute -50\nKPX F rcaron -50\nKPX F rcommaaccent -50\nKPX J A -25\nKPX J Aacute -25\nKPX J Abreve -25\nKPX J Acircumflex -25\nKPX J Adieresis -25\nKPX J Agrave -25\nKPX J Amacron -25\nKPX J Aogonek -25\nKPX J Aring -25\nKPX J Atilde -25\nKPX J a -40\nKPX J aacute -40\nKPX J abreve -40\nKPX J acircumflex -40\nKPX J adieresis -40\nKPX J agrave -40\nKPX J amacron -40\nKPX J aogonek -40\nKPX J aring -40\nKPX J atilde -40\nKPX J comma -10\nKPX J e -40\nKPX J eacute -40\nKPX J ecaron -40\nKPX J ecircumflex -40\nKPX J edieresis -40\nKPX J edotaccent -40\nKPX J egrave -40\nKPX J emacron -40\nKPX J eogonek -40\nKPX J o -40\nKPX J oacute -40\nKPX J ocircumflex -40\nKPX J odieresis -40\nKPX J ograve -40\nKPX J ohungarumlaut -40\nKPX J omacron -40\nKPX J oslash -40\nKPX J otilde -40\nKPX J period -10\nKPX J u -40\nKPX J uacute -40\nKPX J ucircumflex -40\nKPX J udieresis -40\nKPX J ugrave -40\nKPX J uhungarumlaut -40\nKPX J umacron -40\nKPX J uogonek -40\nKPX J uring -40\nKPX K O -30\nKPX K Oacute -30\nKPX K Ocircumflex -30\nKPX K Odieresis -30\nKPX K Ograve -30\nKPX K Ohungarumlaut -30\nKPX K Omacron -30\nKPX K Oslash -30\nKPX K Otilde -30\nKPX K e -25\nKPX K eacute -25\nKPX K ecaron -25\nKPX K ecircumflex -25\nKPX K edieresis -25\nKPX K edotaccent -25\nKPX K egrave -25\nKPX K emacron -25\nKPX K eogonek -25\nKPX K o -25\nKPX K oacute -25\nKPX K ocircumflex -25\nKPX K odieresis -25\nKPX K ograve -25\nKPX K ohungarumlaut -25\nKPX K omacron -25\nKPX K oslash -25\nKPX K otilde -25\nKPX K u -20\nKPX K uacute -20\nKPX K ucircumflex -20\nKPX K udieresis -20\nKPX K ugrave -20\nKPX K uhungarumlaut -20\nKPX K umacron -20\nKPX K uogonek -20\nKPX K uring -20\nKPX K y -20\nKPX K yacute -20\nKPX K ydieresis -20\nKPX Kcommaaccent O -30\nKPX Kcommaaccent Oacute -30\nKPX Kcommaaccent Ocircumflex -30\nKPX Kcommaaccent Odieresis -30\nKPX Kcommaaccent Ograve -30\nKPX Kcommaaccent Ohungarumlaut -30\nKPX Kcommaaccent Omacron -30\nKPX Kcommaaccent Oslash -30\nKPX Kcommaaccent Otilde -30\nKPX Kcommaaccent e -25\nKPX Kcommaaccent eacute -25\nKPX Kcommaaccent ecaron -25\nKPX Kcommaaccent ecircumflex -25\nKPX Kcommaaccent edieresis -25\nKPX Kcommaaccent edotaccent -25\nKPX Kcommaaccent egrave -25\nKPX Kcommaaccent emacron -25\nKPX Kcommaaccent eogonek -25\nKPX Kcommaaccent o -25\nKPX Kcommaaccent oacute -25\nKPX Kcommaaccent ocircumflex -25\nKPX Kcommaaccent odieresis -25\nKPX Kcommaaccent ograve -25\nKPX Kcommaaccent ohungarumlaut -25\nKPX Kcommaaccent omacron -25\nKPX Kcommaaccent oslash -25\nKPX Kcommaaccent otilde -25\nKPX Kcommaaccent u -20\nKPX Kcommaaccent uacute -20\nKPX Kcommaaccent ucircumflex -20\nKPX Kcommaaccent udieresis -20\nKPX Kcommaaccent ugrave -20\nKPX Kcommaaccent uhungarumlaut -20\nKPX Kcommaaccent umacron -20\nKPX Kcommaaccent uogonek -20\nKPX Kcommaaccent uring -20\nKPX Kcommaaccent y -20\nKPX Kcommaaccent yacute -20\nKPX Kcommaaccent ydieresis -20\nKPX L T -18\nKPX L Tcaron -18\nKPX L Tcommaaccent -18\nKPX L V -37\nKPX L W -37\nKPX L Y -37\nKPX L Yacute -37\nKPX L Ydieresis -37\nKPX L quoteright -55\nKPX L y -37\nKPX L yacute -37\nKPX L ydieresis -37\nKPX Lacute T -18\nKPX Lacute Tcaron -18\nKPX Lacute Tcommaaccent -18\nKPX Lacute V -37\nKPX Lacute W -37\nKPX Lacute Y -37\nKPX Lacute Yacute -37\nKPX Lacute Ydieresis -37\nKPX Lacute quoteright -55\nKPX Lacute y -37\nKPX Lacute yacute -37\nKPX Lacute ydieresis -37\nKPX Lcommaaccent T -18\nKPX Lcommaaccent Tcaron -18\nKPX Lcommaaccent Tcommaaccent -18\nKPX Lcommaaccent V -37\nKPX Lcommaaccent W -37\nKPX Lcommaaccent Y -37\nKPX Lcommaaccent Yacute -37\nKPX Lcommaaccent Ydieresis -37\nKPX Lcommaaccent quoteright -55\nKPX Lcommaaccent y -37\nKPX Lcommaaccent yacute -37\nKPX Lcommaaccent ydieresis -37\nKPX Lslash T -18\nKPX Lslash Tcaron -18\nKPX Lslash Tcommaaccent -18\nKPX Lslash V -37\nKPX Lslash W -37\nKPX Lslash Y -37\nKPX Lslash Yacute -37\nKPX Lslash Ydieresis -37\nKPX Lslash quoteright -55\nKPX Lslash y -37\nKPX Lslash yacute -37\nKPX Lslash ydieresis -37\nKPX N A -30\nKPX N Aacute -30\nKPX N Abreve -30\nKPX N Acircumflex -30\nKPX N Adieresis -30\nKPX N Agrave -30\nKPX N Amacron -30\nKPX N Aogonek -30\nKPX N Aring -30\nKPX N Atilde -30\nKPX Nacute A -30\nKPX Nacute Aacute -30\nKPX Nacute Abreve -30\nKPX Nacute Acircumflex -30\nKPX Nacute Adieresis -30\nKPX Nacute Agrave -30\nKPX Nacute Amacron -30\nKPX Nacute Aogonek -30\nKPX Nacute Aring -30\nKPX Nacute Atilde -30\nKPX Ncaron A -30\nKPX Ncaron Aacute -30\nKPX Ncaron Abreve -30\nKPX Ncaron Acircumflex -30\nKPX Ncaron Adieresis -30\nKPX Ncaron Agrave -30\nKPX Ncaron Amacron -30\nKPX Ncaron Aogonek -30\nKPX Ncaron Aring -30\nKPX Ncaron Atilde -30\nKPX Ncommaaccent A -30\nKPX Ncommaaccent Aacute -30\nKPX Ncommaaccent Abreve -30\nKPX Ncommaaccent Acircumflex -30\nKPX Ncommaaccent Adieresis -30\nKPX Ncommaaccent Agrave -30\nKPX Ncommaaccent Amacron -30\nKPX Ncommaaccent Aogonek -30\nKPX Ncommaaccent Aring -30\nKPX Ncommaaccent Atilde -30\nKPX Ntilde A -30\nKPX Ntilde Aacute -30\nKPX Ntilde Abreve -30\nKPX Ntilde Acircumflex -30\nKPX Ntilde Adieresis -30\nKPX Ntilde Agrave -30\nKPX Ntilde Amacron -30\nKPX Ntilde Aogonek -30\nKPX Ntilde Aring -30\nKPX Ntilde Atilde -30\nKPX O A -40\nKPX O Aacute -40\nKPX O Abreve -40\nKPX O Acircumflex -40\nKPX O Adieresis -40\nKPX O Agrave -40\nKPX O Amacron -40\nKPX O Aogonek -40\nKPX O Aring -40\nKPX O Atilde -40\nKPX O T -40\nKPX O Tcaron -40\nKPX O Tcommaaccent -40\nKPX O V -50\nKPX O W -50\nKPX O X -40\nKPX O Y -50\nKPX O Yacute -50\nKPX O Ydieresis -50\nKPX Oacute A -40\nKPX Oacute Aacute -40\nKPX Oacute Abreve -40\nKPX Oacute Acircumflex -40\nKPX Oacute Adieresis -40\nKPX Oacute Agrave -40\nKPX Oacute Amacron -40\nKPX Oacute Aogonek -40\nKPX Oacute Aring -40\nKPX Oacute Atilde -40\nKPX Oacute T -40\nKPX Oacute Tcaron -40\nKPX Oacute Tcommaaccent -40\nKPX Oacute V -50\nKPX Oacute W -50\nKPX Oacute X -40\nKPX Oacute Y -50\nKPX Oacute Yacute -50\nKPX Oacute Ydieresis -50\nKPX Ocircumflex A -40\nKPX Ocircumflex Aacute -40\nKPX Ocircumflex Abreve -40\nKPX Ocircumflex Acircumflex -40\nKPX Ocircumflex Adieresis -40\nKPX Ocircumflex Agrave -40\nKPX Ocircumflex Amacron -40\nKPX Ocircumflex Aogonek -40\nKPX Ocircumflex Aring -40\nKPX Ocircumflex Atilde -40\nKPX Ocircumflex T -40\nKPX Ocircumflex Tcaron -40\nKPX Ocircumflex Tcommaaccent -40\nKPX Ocircumflex V -50\nKPX Ocircumflex W -50\nKPX Ocircumflex X -40\nKPX Ocircumflex Y -50\nKPX Ocircumflex Yacute -50\nKPX Ocircumflex Ydieresis -50\nKPX Odieresis A -40\nKPX Odieresis Aacute -40\nKPX Odieresis Abreve -40\nKPX Odieresis Acircumflex -40\nKPX Odieresis Adieresis -40\nKPX Odieresis Agrave -40\nKPX Odieresis Amacron -40\nKPX Odieresis Aogonek -40\nKPX Odieresis Aring -40\nKPX Odieresis Atilde -40\nKPX Odieresis T -40\nKPX Odieresis Tcaron -40\nKPX Odieresis Tcommaaccent -40\nKPX Odieresis V -50\nKPX Odieresis W -50\nKPX Odieresis X -40\nKPX Odieresis Y -50\nKPX Odieresis Yacute -50\nKPX Odieresis Ydieresis -50\nKPX Ograve A -40\nKPX Ograve Aacute -40\nKPX Ograve Abreve -40\nKPX Ograve Acircumflex -40\nKPX Ograve Adieresis -40\nKPX Ograve Agrave -40\nKPX Ograve Amacron -40\nKPX Ograve Aogonek -40\nKPX Ograve Aring -40\nKPX Ograve Atilde -40\nKPX Ograve T -40\nKPX Ograve Tcaron -40\nKPX Ograve Tcommaaccent -40\nKPX Ograve V -50\nKPX Ograve W -50\nKPX Ograve X -40\nKPX Ograve Y -50\nKPX Ograve Yacute -50\nKPX Ograve Ydieresis -50\nKPX Ohungarumlaut A -40\nKPX Ohungarumlaut Aacute -40\nKPX Ohungarumlaut Abreve -40\nKPX Ohungarumlaut Acircumflex -40\nKPX Ohungarumlaut Adieresis -40\nKPX Ohungarumlaut Agrave -40\nKPX Ohungarumlaut Amacron -40\nKPX Ohungarumlaut Aogonek -40\nKPX Ohungarumlaut Aring -40\nKPX Ohungarumlaut Atilde -40\nKPX Ohungarumlaut T -40\nKPX Ohungarumlaut Tcaron -40\nKPX Ohungarumlaut Tcommaaccent -40\nKPX Ohungarumlaut V -50\nKPX Ohungarumlaut W -50\nKPX Ohungarumlaut X -40\nKPX Ohungarumlaut Y -50\nKPX Ohungarumlaut Yacute -50\nKPX Ohungarumlaut Ydieresis -50\nKPX Omacron A -40\nKPX Omacron Aacute -40\nKPX Omacron Abreve -40\nKPX Omacron Acircumflex -40\nKPX Omacron Adieresis -40\nKPX Omacron Agrave -40\nKPX Omacron Amacron -40\nKPX Omacron Aogonek -40\nKPX Omacron Aring -40\nKPX Omacron Atilde -40\nKPX Omacron T -40\nKPX Omacron Tcaron -40\nKPX Omacron Tcommaaccent -40\nKPX Omacron V -50\nKPX Omacron W -50\nKPX Omacron X -40\nKPX Omacron Y -50\nKPX Omacron Yacute -50\nKPX Omacron Ydieresis -50\nKPX Oslash A -40\nKPX Oslash Aacute -40\nKPX Oslash Abreve -40\nKPX Oslash Acircumflex -40\nKPX Oslash Adieresis -40\nKPX Oslash Agrave -40\nKPX Oslash Amacron -40\nKPX Oslash Aogonek -40\nKPX Oslash Aring -40\nKPX Oslash Atilde -40\nKPX Oslash T -40\nKPX Oslash Tcaron -40\nKPX Oslash Tcommaaccent -40\nKPX Oslash V -50\nKPX Oslash W -50\nKPX Oslash X -40\nKPX Oslash Y -50\nKPX Oslash Yacute -50\nKPX Oslash Ydieresis -50\nKPX Otilde A -40\nKPX Otilde Aacute -40\nKPX Otilde Abreve -40\nKPX Otilde Acircumflex -40\nKPX Otilde Adieresis -40\nKPX Otilde Agrave -40\nKPX Otilde Amacron -40\nKPX Otilde Aogonek -40\nKPX Otilde Aring -40\nKPX Otilde Atilde -40\nKPX Otilde T -40\nKPX Otilde Tcaron -40\nKPX Otilde Tcommaaccent -40\nKPX Otilde V -50\nKPX Otilde W -50\nKPX Otilde X -40\nKPX Otilde Y -50\nKPX Otilde Yacute -50\nKPX Otilde Ydieresis -50\nKPX P A -85\nKPX P Aacute -85\nKPX P Abreve -85\nKPX P Acircumflex -85\nKPX P Adieresis -85\nKPX P Agrave -85\nKPX P Amacron -85\nKPX P Aogonek -85\nKPX P Aring -85\nKPX P Atilde -85\nKPX P a -40\nKPX P aacute -40\nKPX P abreve -40\nKPX P acircumflex -40\nKPX P adieresis -40\nKPX P agrave -40\nKPX P amacron -40\nKPX P aogonek -40\nKPX P aring -40\nKPX P atilde -40\nKPX P comma -129\nKPX P e -50\nKPX P eacute -50\nKPX P ecaron -50\nKPX P ecircumflex -50\nKPX P edieresis -50\nKPX P edotaccent -50\nKPX P egrave -50\nKPX P emacron -50\nKPX P eogonek -50\nKPX P o -55\nKPX P oacute -55\nKPX P ocircumflex -55\nKPX P odieresis -55\nKPX P ograve -55\nKPX P ohungarumlaut -55\nKPX P omacron -55\nKPX P oslash -55\nKPX P otilde -55\nKPX P period -129\nKPX Q U -10\nKPX Q Uacute -10\nKPX Q Ucircumflex -10\nKPX Q Udieresis -10\nKPX Q Ugrave -10\nKPX Q Uhungarumlaut -10\nKPX Q Umacron -10\nKPX Q Uogonek -10\nKPX Q Uring -10\nKPX R O -40\nKPX R Oacute -40\nKPX R Ocircumflex -40\nKPX R Odieresis -40\nKPX R Ograve -40\nKPX R Ohungarumlaut -40\nKPX R Omacron -40\nKPX R Oslash -40\nKPX R Otilde -40\nKPX R T -30\nKPX R Tcaron -30\nKPX R Tcommaaccent -30\nKPX R U -40\nKPX R Uacute -40\nKPX R Ucircumflex -40\nKPX R Udieresis -40\nKPX R Ugrave -40\nKPX R Uhungarumlaut -40\nKPX R Umacron -40\nKPX R Uogonek -40\nKPX R Uring -40\nKPX R V -18\nKPX R W -18\nKPX R Y -18\nKPX R Yacute -18\nKPX R Ydieresis -18\nKPX Racute O -40\nKPX Racute Oacute -40\nKPX Racute Ocircumflex -40\nKPX Racute Odieresis -40\nKPX Racute Ograve -40\nKPX Racute Ohungarumlaut -40\nKPX Racute Omacron -40\nKPX Racute Oslash -40\nKPX Racute Otilde -40\nKPX Racute T -30\nKPX Racute Tcaron -30\nKPX Racute Tcommaaccent -30\nKPX Racute U -40\nKPX Racute Uacute -40\nKPX Racute Ucircumflex -40\nKPX Racute Udieresis -40\nKPX Racute Ugrave -40\nKPX Racute Uhungarumlaut -40\nKPX Racute Umacron -40\nKPX Racute Uogonek -40\nKPX Racute Uring -40\nKPX Racute V -18\nKPX Racute W -18\nKPX Racute Y -18\nKPX Racute Yacute -18\nKPX Racute Ydieresis -18\nKPX Rcaron O -40\nKPX Rcaron Oacute -40\nKPX Rcaron Ocircumflex -40\nKPX Rcaron Odieresis -40\nKPX Rcaron Ograve -40\nKPX Rcaron Ohungarumlaut -40\nKPX Rcaron Omacron -40\nKPX Rcaron Oslash -40\nKPX Rcaron Otilde -40\nKPX Rcaron T -30\nKPX Rcaron Tcaron -30\nKPX Rcaron Tcommaaccent -30\nKPX Rcaron U -40\nKPX Rcaron Uacute -40\nKPX Rcaron Ucircumflex -40\nKPX Rcaron Udieresis -40\nKPX Rcaron Ugrave -40\nKPX Rcaron Uhungarumlaut -40\nKPX Rcaron Umacron -40\nKPX Rcaron Uogonek -40\nKPX Rcaron Uring -40\nKPX Rcaron V -18\nKPX Rcaron W -18\nKPX Rcaron Y -18\nKPX Rcaron Yacute -18\nKPX Rcaron Ydieresis -18\nKPX Rcommaaccent O -40\nKPX Rcommaaccent Oacute -40\nKPX Rcommaaccent Ocircumflex -40\nKPX Rcommaaccent Odieresis -40\nKPX Rcommaaccent Ograve -40\nKPX Rcommaaccent Ohungarumlaut -40\nKPX Rcommaaccent Omacron -40\nKPX Rcommaaccent Oslash -40\nKPX Rcommaaccent Otilde -40\nKPX Rcommaaccent T -30\nKPX Rcommaaccent Tcaron -30\nKPX Rcommaaccent Tcommaaccent -30\nKPX Rcommaaccent U -40\nKPX Rcommaaccent Uacute -40\nKPX Rcommaaccent Ucircumflex -40\nKPX Rcommaaccent Udieresis -40\nKPX Rcommaaccent Ugrave -40\nKPX Rcommaaccent Uhungarumlaut -40\nKPX Rcommaaccent Umacron -40\nKPX Rcommaaccent Uogonek -40\nKPX Rcommaaccent Uring -40\nKPX Rcommaaccent V -18\nKPX Rcommaaccent W -18\nKPX Rcommaaccent Y -18\nKPX Rcommaaccent Yacute -18\nKPX Rcommaaccent Ydieresis -18\nKPX T A -55\nKPX T Aacute -55\nKPX T Abreve -55\nKPX T Acircumflex -55\nKPX T Adieresis -55\nKPX T Agrave -55\nKPX T Amacron -55\nKPX T Aogonek -55\nKPX T Aring -55\nKPX T Atilde -55\nKPX T O -18\nKPX T Oacute -18\nKPX T Ocircumflex -18\nKPX T Odieresis -18\nKPX T Ograve -18\nKPX T Ohungarumlaut -18\nKPX T Omacron -18\nKPX T Oslash -18\nKPX T Otilde -18\nKPX T a -92\nKPX T aacute -92\nKPX T abreve -92\nKPX T acircumflex -92\nKPX T adieresis -92\nKPX T agrave -92\nKPX T amacron -92\nKPX T aogonek -92\nKPX T aring -92\nKPX T atilde -92\nKPX T colon -74\nKPX T comma -92\nKPX T e -92\nKPX T eacute -92\nKPX T ecaron -92\nKPX T ecircumflex -92\nKPX T edieresis -52\nKPX T edotaccent -92\nKPX T egrave -52\nKPX T emacron -52\nKPX T eogonek -92\nKPX T hyphen -92\nKPX T i -37\nKPX T iacute -37\nKPX T iogonek -37\nKPX T o -95\nKPX T oacute -95\nKPX T ocircumflex -95\nKPX T odieresis -95\nKPX T ograve -95\nKPX T ohungarumlaut -95\nKPX T omacron -95\nKPX T oslash -95\nKPX T otilde -95\nKPX T period -92\nKPX T r -37\nKPX T racute -37\nKPX T rcaron -37\nKPX T rcommaaccent -37\nKPX T semicolon -74\nKPX T u -37\nKPX T uacute -37\nKPX T ucircumflex -37\nKPX T udieresis -37\nKPX T ugrave -37\nKPX T uhungarumlaut -37\nKPX T umacron -37\nKPX T uogonek -37\nKPX T uring -37\nKPX T w -37\nKPX T y -37\nKPX T yacute -37\nKPX T ydieresis -37\nKPX Tcaron A -55\nKPX Tcaron Aacute -55\nKPX Tcaron Abreve -55\nKPX Tcaron Acircumflex -55\nKPX Tcaron Adieresis -55\nKPX Tcaron Agrave -55\nKPX Tcaron Amacron -55\nKPX Tcaron Aogonek -55\nKPX Tcaron Aring -55\nKPX Tcaron Atilde -55\nKPX Tcaron O -18\nKPX Tcaron Oacute -18\nKPX Tcaron Ocircumflex -18\nKPX Tcaron Odieresis -18\nKPX Tcaron Ograve -18\nKPX Tcaron Ohungarumlaut -18\nKPX Tcaron Omacron -18\nKPX Tcaron Oslash -18\nKPX Tcaron Otilde -18\nKPX Tcaron a -92\nKPX Tcaron aacute -92\nKPX Tcaron abreve -92\nKPX Tcaron acircumflex -92\nKPX Tcaron adieresis -92\nKPX Tcaron agrave -92\nKPX Tcaron amacron -92\nKPX Tcaron aogonek -92\nKPX Tcaron aring -92\nKPX Tcaron atilde -92\nKPX Tcaron colon -74\nKPX Tcaron comma -92\nKPX Tcaron e -92\nKPX Tcaron eacute -92\nKPX Tcaron ecaron -92\nKPX Tcaron ecircumflex -92\nKPX Tcaron edieresis -52\nKPX Tcaron edotaccent -92\nKPX Tcaron egrave -52\nKPX Tcaron emacron -52\nKPX Tcaron eogonek -92\nKPX Tcaron hyphen -92\nKPX Tcaron i -37\nKPX Tcaron iacute -37\nKPX Tcaron iogonek -37\nKPX Tcaron o -95\nKPX Tcaron oacute -95\nKPX Tcaron ocircumflex -95\nKPX Tcaron odieresis -95\nKPX Tcaron ograve -95\nKPX Tcaron ohungarumlaut -95\nKPX Tcaron omacron -95\nKPX Tcaron oslash -95\nKPX Tcaron otilde -95\nKPX Tcaron period -92\nKPX Tcaron r -37\nKPX Tcaron racute -37\nKPX Tcaron rcaron -37\nKPX Tcaron rcommaaccent -37\nKPX Tcaron semicolon -74\nKPX Tcaron u -37\nKPX Tcaron uacute -37\nKPX Tcaron ucircumflex -37\nKPX Tcaron udieresis -37\nKPX Tcaron ugrave -37\nKPX Tcaron uhungarumlaut -37\nKPX Tcaron umacron -37\nKPX Tcaron uogonek -37\nKPX Tcaron uring -37\nKPX Tcaron w -37\nKPX Tcaron y -37\nKPX Tcaron yacute -37\nKPX Tcaron ydieresis -37\nKPX Tcommaaccent A -55\nKPX Tcommaaccent Aacute -55\nKPX Tcommaaccent Abreve -55\nKPX Tcommaaccent Acircumflex -55\nKPX Tcommaaccent Adieresis -55\nKPX Tcommaaccent Agrave -55\nKPX Tcommaaccent Amacron -55\nKPX Tcommaaccent Aogonek -55\nKPX Tcommaaccent Aring -55\nKPX Tcommaaccent Atilde -55\nKPX Tcommaaccent O -18\nKPX Tcommaaccent Oacute -18\nKPX Tcommaaccent Ocircumflex -18\nKPX Tcommaaccent Odieresis -18\nKPX Tcommaaccent Ograve -18\nKPX Tcommaaccent Ohungarumlaut -18\nKPX Tcommaaccent Omacron -18\nKPX Tcommaaccent Oslash -18\nKPX Tcommaaccent Otilde -18\nKPX Tcommaaccent a -92\nKPX Tcommaaccent aacute -92\nKPX Tcommaaccent abreve -92\nKPX Tcommaaccent acircumflex -92\nKPX Tcommaaccent adieresis -92\nKPX Tcommaaccent agrave -92\nKPX Tcommaaccent amacron -92\nKPX Tcommaaccent aogonek -92\nKPX Tcommaaccent aring -92\nKPX Tcommaaccent atilde -92\nKPX Tcommaaccent colon -74\nKPX Tcommaaccent comma -92\nKPX Tcommaaccent e -92\nKPX Tcommaaccent eacute -92\nKPX Tcommaaccent ecaron -92\nKPX Tcommaaccent ecircumflex -92\nKPX Tcommaaccent edieresis -52\nKPX Tcommaaccent edotaccent -92\nKPX Tcommaaccent egrave -52\nKPX Tcommaaccent emacron -52\nKPX Tcommaaccent eogonek -92\nKPX Tcommaaccent hyphen -92\nKPX Tcommaaccent i -37\nKPX Tcommaaccent iacute -37\nKPX Tcommaaccent iogonek -37\nKPX Tcommaaccent o -95\nKPX Tcommaaccent oacute -95\nKPX Tcommaaccent ocircumflex -95\nKPX Tcommaaccent odieresis -95\nKPX Tcommaaccent ograve -95\nKPX Tcommaaccent ohungarumlaut -95\nKPX Tcommaaccent omacron -95\nKPX Tcommaaccent oslash -95\nKPX Tcommaaccent otilde -95\nKPX Tcommaaccent period -92\nKPX Tcommaaccent r -37\nKPX Tcommaaccent racute -37\nKPX Tcommaaccent rcaron -37\nKPX Tcommaaccent rcommaaccent -37\nKPX Tcommaaccent semicolon -74\nKPX Tcommaaccent u -37\nKPX Tcommaaccent uacute -37\nKPX Tcommaaccent ucircumflex -37\nKPX Tcommaaccent udieresis -37\nKPX Tcommaaccent ugrave -37\nKPX Tcommaaccent uhungarumlaut -37\nKPX Tcommaaccent umacron -37\nKPX Tcommaaccent uogonek -37\nKPX Tcommaaccent uring -37\nKPX Tcommaaccent w -37\nKPX Tcommaaccent y -37\nKPX Tcommaaccent yacute -37\nKPX Tcommaaccent ydieresis -37\nKPX U A -45\nKPX U Aacute -45\nKPX U Abreve -45\nKPX U Acircumflex -45\nKPX U Adieresis -45\nKPX U Agrave -45\nKPX U Amacron -45\nKPX U Aogonek -45\nKPX U Aring -45\nKPX U Atilde -45\nKPX Uacute A -45\nKPX Uacute Aacute -45\nKPX Uacute Abreve -45\nKPX Uacute Acircumflex -45\nKPX Uacute Adieresis -45\nKPX Uacute Agrave -45\nKPX Uacute Amacron -45\nKPX Uacute Aogonek -45\nKPX Uacute Aring -45\nKPX Uacute Atilde -45\nKPX Ucircumflex A -45\nKPX Ucircumflex Aacute -45\nKPX Ucircumflex Abreve -45\nKPX Ucircumflex Acircumflex -45\nKPX Ucircumflex Adieresis -45\nKPX Ucircumflex Agrave -45\nKPX Ucircumflex Amacron -45\nKPX Ucircumflex Aogonek -45\nKPX Ucircumflex Aring -45\nKPX Ucircumflex Atilde -45\nKPX Udieresis A -45\nKPX Udieresis Aacute -45\nKPX Udieresis Abreve -45\nKPX Udieresis Acircumflex -45\nKPX Udieresis Adieresis -45\nKPX Udieresis Agrave -45\nKPX Udieresis Amacron -45\nKPX Udieresis Aogonek -45\nKPX Udieresis Aring -45\nKPX Udieresis Atilde -45\nKPX Ugrave A -45\nKPX Ugrave Aacute -45\nKPX Ugrave Abreve -45\nKPX Ugrave Acircumflex -45\nKPX Ugrave Adieresis -45\nKPX Ugrave Agrave -45\nKPX Ugrave Amacron -45\nKPX Ugrave Aogonek -45\nKPX Ugrave Aring -45\nKPX Ugrave Atilde -45\nKPX Uhungarumlaut A -45\nKPX Uhungarumlaut Aacute -45\nKPX Uhungarumlaut Abreve -45\nKPX Uhungarumlaut Acircumflex -45\nKPX Uhungarumlaut Adieresis -45\nKPX Uhungarumlaut Agrave -45\nKPX Uhungarumlaut Amacron -45\nKPX Uhungarumlaut Aogonek -45\nKPX Uhungarumlaut Aring -45\nKPX Uhungarumlaut Atilde -45\nKPX Umacron A -45\nKPX Umacron Aacute -45\nKPX Umacron Abreve -45\nKPX Umacron Acircumflex -45\nKPX Umacron Adieresis -45\nKPX Umacron Agrave -45\nKPX Umacron Amacron -45\nKPX Umacron Aogonek -45\nKPX Umacron Aring -45\nKPX Umacron Atilde -45\nKPX Uogonek A -45\nKPX Uogonek Aacute -45\nKPX Uogonek Abreve -45\nKPX Uogonek Acircumflex -45\nKPX Uogonek Adieresis -45\nKPX Uogonek Agrave -45\nKPX Uogonek Amacron -45\nKPX Uogonek Aogonek -45\nKPX Uogonek Aring -45\nKPX Uogonek Atilde -45\nKPX Uring A -45\nKPX Uring Aacute -45\nKPX Uring Abreve -45\nKPX Uring Acircumflex -45\nKPX Uring Adieresis -45\nKPX Uring Agrave -45\nKPX Uring Amacron -45\nKPX Uring Aogonek -45\nKPX Uring Aring -45\nKPX Uring Atilde -45\nKPX V A -85\nKPX V Aacute -85\nKPX V Abreve -85\nKPX V Acircumflex -85\nKPX V Adieresis -85\nKPX V Agrave -85\nKPX V Amacron -85\nKPX V Aogonek -85\nKPX V Aring -85\nKPX V Atilde -85\nKPX V G -10\nKPX V Gbreve -10\nKPX V Gcommaaccent -10\nKPX V O -30\nKPX V Oacute -30\nKPX V Ocircumflex -30\nKPX V Odieresis -30\nKPX V Ograve -30\nKPX V Ohungarumlaut -30\nKPX V Omacron -30\nKPX V Oslash -30\nKPX V Otilde -30\nKPX V a -111\nKPX V aacute -111\nKPX V abreve -111\nKPX V acircumflex -111\nKPX V adieresis -111\nKPX V agrave -111\nKPX V amacron -111\nKPX V aogonek -111\nKPX V aring -111\nKPX V atilde -111\nKPX V colon -74\nKPX V comma -129\nKPX V e -111\nKPX V eacute -111\nKPX V ecaron -111\nKPX V ecircumflex -111\nKPX V edieresis -71\nKPX V edotaccent -111\nKPX V egrave -71\nKPX V emacron -71\nKPX V eogonek -111\nKPX V hyphen -70\nKPX V i -55\nKPX V iacute -55\nKPX V iogonek -55\nKPX V o -111\nKPX V oacute -111\nKPX V ocircumflex -111\nKPX V odieresis -111\nKPX V ograve -111\nKPX V ohungarumlaut -111\nKPX V omacron -111\nKPX V oslash -111\nKPX V otilde -111\nKPX V period -129\nKPX V semicolon -74\nKPX V u -55\nKPX V uacute -55\nKPX V ucircumflex -55\nKPX V udieresis -55\nKPX V ugrave -55\nKPX V uhungarumlaut -55\nKPX V umacron -55\nKPX V uogonek -55\nKPX V uring -55\nKPX W A -74\nKPX W Aacute -74\nKPX W Abreve -74\nKPX W Acircumflex -74\nKPX W Adieresis -74\nKPX W Agrave -74\nKPX W Amacron -74\nKPX W Aogonek -74\nKPX W Aring -74\nKPX W Atilde -74\nKPX W O -15\nKPX W Oacute -15\nKPX W Ocircumflex -15\nKPX W Odieresis -15\nKPX W Ograve -15\nKPX W Ohungarumlaut -15\nKPX W Omacron -15\nKPX W Oslash -15\nKPX W Otilde -15\nKPX W a -85\nKPX W aacute -85\nKPX W abreve -85\nKPX W acircumflex -85\nKPX W adieresis -85\nKPX W agrave -85\nKPX W amacron -85\nKPX W aogonek -85\nKPX W aring -85\nKPX W atilde -85\nKPX W colon -55\nKPX W comma -74\nKPX W e -90\nKPX W eacute -90\nKPX W ecaron -90\nKPX W ecircumflex -90\nKPX W edieresis -50\nKPX W edotaccent -90\nKPX W egrave -50\nKPX W emacron -50\nKPX W eogonek -90\nKPX W hyphen -50\nKPX W i -37\nKPX W iacute -37\nKPX W iogonek -37\nKPX W o -80\nKPX W oacute -80\nKPX W ocircumflex -80\nKPX W odieresis -80\nKPX W ograve -80\nKPX W ohungarumlaut -80\nKPX W omacron -80\nKPX W oslash -80\nKPX W otilde -80\nKPX W period -74\nKPX W semicolon -55\nKPX W u -55\nKPX W uacute -55\nKPX W ucircumflex -55\nKPX W udieresis -55\nKPX W ugrave -55\nKPX W uhungarumlaut -55\nKPX W umacron -55\nKPX W uogonek -55\nKPX W uring -55\nKPX W y -55\nKPX W yacute -55\nKPX W ydieresis -55\nKPX Y A -74\nKPX Y Aacute -74\nKPX Y Abreve -74\nKPX Y Acircumflex -74\nKPX Y Adieresis -74\nKPX Y Agrave -74\nKPX Y Amacron -74\nKPX Y Aogonek -74\nKPX Y Aring -74\nKPX Y Atilde -74\nKPX Y O -25\nKPX Y Oacute -25\nKPX Y Ocircumflex -25\nKPX Y Odieresis -25\nKPX Y Ograve -25\nKPX Y Ohungarumlaut -25\nKPX Y Omacron -25\nKPX Y Oslash -25\nKPX Y Otilde -25\nKPX Y a -92\nKPX Y aacute -92\nKPX Y abreve -92\nKPX Y acircumflex -92\nKPX Y adieresis -92\nKPX Y agrave -92\nKPX Y amacron -92\nKPX Y aogonek -92\nKPX Y aring -92\nKPX Y atilde -92\nKPX Y colon -92\nKPX Y comma -92\nKPX Y e -111\nKPX Y eacute -111\nKPX Y ecaron -111\nKPX Y ecircumflex -71\nKPX Y edieresis -71\nKPX Y edotaccent -111\nKPX Y egrave -71\nKPX Y emacron -71\nKPX Y eogonek -111\nKPX Y hyphen -92\nKPX Y i -55\nKPX Y iacute -55\nKPX Y iogonek -55\nKPX Y o -111\nKPX Y oacute -111\nKPX Y ocircumflex -111\nKPX Y odieresis -111\nKPX Y ograve -111\nKPX Y ohungarumlaut -111\nKPX Y omacron -111\nKPX Y oslash -111\nKPX Y otilde -111\nKPX Y period -74\nKPX Y semicolon -92\nKPX Y u -92\nKPX Y uacute -92\nKPX Y ucircumflex -92\nKPX Y udieresis -92\nKPX Y ugrave -92\nKPX Y uhungarumlaut -92\nKPX Y umacron -92\nKPX Y uogonek -92\nKPX Y uring -92\nKPX Yacute A -74\nKPX Yacute Aacute -74\nKPX Yacute Abreve -74\nKPX Yacute Acircumflex -74\nKPX Yacute Adieresis -74\nKPX Yacute Agrave -74\nKPX Yacute Amacron -74\nKPX Yacute Aogonek -74\nKPX Yacute Aring -74\nKPX Yacute Atilde -74\nKPX Yacute O -25\nKPX Yacute Oacute -25\nKPX Yacute Ocircumflex -25\nKPX Yacute Odieresis -25\nKPX Yacute Ograve -25\nKPX Yacute Ohungarumlaut -25\nKPX Yacute Omacron -25\nKPX Yacute Oslash -25\nKPX Yacute Otilde -25\nKPX Yacute a -92\nKPX Yacute aacute -92\nKPX Yacute abreve -92\nKPX Yacute acircumflex -92\nKPX Yacute adieresis -92\nKPX Yacute agrave -92\nKPX Yacute amacron -92\nKPX Yacute aogonek -92\nKPX Yacute aring -92\nKPX Yacute atilde -92\nKPX Yacute colon -92\nKPX Yacute comma -92\nKPX Yacute e -111\nKPX Yacute eacute -111\nKPX Yacute ecaron -111\nKPX Yacute ecircumflex -71\nKPX Yacute edieresis -71\nKPX Yacute edotaccent -111\nKPX Yacute egrave -71\nKPX Yacute emacron -71\nKPX Yacute eogonek -111\nKPX Yacute hyphen -92\nKPX Yacute i -55\nKPX Yacute iacute -55\nKPX Yacute iogonek -55\nKPX Yacute o -111\nKPX Yacute oacute -111\nKPX Yacute ocircumflex -111\nKPX Yacute odieresis -111\nKPX Yacute ograve -111\nKPX Yacute ohungarumlaut -111\nKPX Yacute omacron -111\nKPX Yacute oslash -111\nKPX Yacute otilde -111\nKPX Yacute period -74\nKPX Yacute semicolon -92\nKPX Yacute u -92\nKPX Yacute uacute -92\nKPX Yacute ucircumflex -92\nKPX Yacute udieresis -92\nKPX Yacute ugrave -92\nKPX Yacute uhungarumlaut -92\nKPX Yacute umacron -92\nKPX Yacute uogonek -92\nKPX Yacute uring -92\nKPX Ydieresis A -74\nKPX Ydieresis Aacute -74\nKPX Ydieresis Abreve -74\nKPX Ydieresis Acircumflex -74\nKPX Ydieresis Adieresis -74\nKPX Ydieresis Agrave -74\nKPX Ydieresis Amacron -74\nKPX Ydieresis Aogonek -74\nKPX Ydieresis Aring -74\nKPX Ydieresis Atilde -74\nKPX Ydieresis O -25\nKPX Ydieresis Oacute -25\nKPX Ydieresis Ocircumflex -25\nKPX Ydieresis Odieresis -25\nKPX Ydieresis Ograve -25\nKPX Ydieresis Ohungarumlaut -25\nKPX Ydieresis Omacron -25\nKPX Ydieresis Oslash -25\nKPX Ydieresis Otilde -25\nKPX Ydieresis a -92\nKPX Ydieresis aacute -92\nKPX Ydieresis abreve -92\nKPX Ydieresis acircumflex -92\nKPX Ydieresis adieresis -92\nKPX Ydieresis agrave -92\nKPX Ydieresis amacron -92\nKPX Ydieresis aogonek -92\nKPX Ydieresis aring -92\nKPX Ydieresis atilde -92\nKPX Ydieresis colon -92\nKPX Ydieresis comma -92\nKPX Ydieresis e -111\nKPX Ydieresis eacute -111\nKPX Ydieresis ecaron -111\nKPX Ydieresis ecircumflex -71\nKPX Ydieresis edieresis -71\nKPX Ydieresis edotaccent -111\nKPX Ydieresis egrave -71\nKPX Ydieresis emacron -71\nKPX Ydieresis eogonek -111\nKPX Ydieresis hyphen -92\nKPX Ydieresis i -55\nKPX Ydieresis iacute -55\nKPX Ydieresis iogonek -55\nKPX Ydieresis o -111\nKPX Ydieresis oacute -111\nKPX Ydieresis ocircumflex -111\nKPX Ydieresis odieresis -111\nKPX Ydieresis ograve -111\nKPX Ydieresis ohungarumlaut -111\nKPX Ydieresis omacron -111\nKPX Ydieresis oslash -111\nKPX Ydieresis otilde -111\nKPX Ydieresis period -74\nKPX Ydieresis semicolon -92\nKPX Ydieresis u -92\nKPX Ydieresis uacute -92\nKPX Ydieresis ucircumflex -92\nKPX Ydieresis udieresis -92\nKPX Ydieresis ugrave -92\nKPX Ydieresis uhungarumlaut -92\nKPX Ydieresis umacron -92\nKPX Ydieresis uogonek -92\nKPX Ydieresis uring -92\nKPX b b -10\nKPX b period -40\nKPX b u -20\nKPX b uacute -20\nKPX b ucircumflex -20\nKPX b udieresis -20\nKPX b ugrave -20\nKPX b uhungarumlaut -20\nKPX b umacron -20\nKPX b uogonek -20\nKPX b uring -20\nKPX c h -10\nKPX c k -10\nKPX c kcommaaccent -10\nKPX cacute h -10\nKPX cacute k -10\nKPX cacute kcommaaccent -10\nKPX ccaron h -10\nKPX ccaron k -10\nKPX ccaron kcommaaccent -10\nKPX ccedilla h -10\nKPX ccedilla k -10\nKPX ccedilla kcommaaccent -10\nKPX comma quotedblright -95\nKPX comma quoteright -95\nKPX e b -10\nKPX eacute b -10\nKPX ecaron b -10\nKPX ecircumflex b -10\nKPX edieresis b -10\nKPX edotaccent b -10\nKPX egrave b -10\nKPX emacron b -10\nKPX eogonek b -10\nKPX f comma -10\nKPX f dotlessi -30\nKPX f e -10\nKPX f eacute -10\nKPX f edotaccent -10\nKPX f eogonek -10\nKPX f f -18\nKPX f o -10\nKPX f oacute -10\nKPX f ocircumflex -10\nKPX f ograve -10\nKPX f ohungarumlaut -10\nKPX f oslash -10\nKPX f otilde -10\nKPX f period -10\nKPX f quoteright 55\nKPX k e -30\nKPX k eacute -30\nKPX k ecaron -30\nKPX k ecircumflex -30\nKPX k edieresis -30\nKPX k edotaccent -30\nKPX k egrave -30\nKPX k emacron -30\nKPX k eogonek -30\nKPX k o -10\nKPX k oacute -10\nKPX k ocircumflex -10\nKPX k odieresis -10\nKPX k ograve -10\nKPX k ohungarumlaut -10\nKPX k omacron -10\nKPX k oslash -10\nKPX k otilde -10\nKPX kcommaaccent e -30\nKPX kcommaaccent eacute -30\nKPX kcommaaccent ecaron -30\nKPX kcommaaccent ecircumflex -30\nKPX kcommaaccent edieresis -30\nKPX kcommaaccent edotaccent -30\nKPX kcommaaccent egrave -30\nKPX kcommaaccent emacron -30\nKPX kcommaaccent eogonek -30\nKPX kcommaaccent o -10\nKPX kcommaaccent oacute -10\nKPX kcommaaccent ocircumflex -10\nKPX kcommaaccent odieresis -10\nKPX kcommaaccent ograve -10\nKPX kcommaaccent ohungarumlaut -10\nKPX kcommaaccent omacron -10\nKPX kcommaaccent oslash -10\nKPX kcommaaccent otilde -10\nKPX n v -40\nKPX nacute v -40\nKPX ncaron v -40\nKPX ncommaaccent v -40\nKPX ntilde v -40\nKPX o v -15\nKPX o w -25\nKPX o x -10\nKPX o y -10\nKPX o yacute -10\nKPX o ydieresis -10\nKPX oacute v -15\nKPX oacute w -25\nKPX oacute x -10\nKPX oacute y -10\nKPX oacute yacute -10\nKPX oacute ydieresis -10\nKPX ocircumflex v -15\nKPX ocircumflex w -25\nKPX ocircumflex x -10\nKPX ocircumflex y -10\nKPX ocircumflex yacute -10\nKPX ocircumflex ydieresis -10\nKPX odieresis v -15\nKPX odieresis w -25\nKPX odieresis x -10\nKPX odieresis y -10\nKPX odieresis yacute -10\nKPX odieresis ydieresis -10\nKPX ograve v -15\nKPX ograve w -25\nKPX ograve x -10\nKPX ograve y -10\nKPX ograve yacute -10\nKPX ograve ydieresis -10\nKPX ohungarumlaut v -15\nKPX ohungarumlaut w -25\nKPX ohungarumlaut x -10\nKPX ohungarumlaut y -10\nKPX ohungarumlaut yacute -10\nKPX ohungarumlaut ydieresis -10\nKPX omacron v -15\nKPX omacron w -25\nKPX omacron x -10\nKPX omacron y -10\nKPX omacron yacute -10\nKPX omacron ydieresis -10\nKPX oslash v -15\nKPX oslash w -25\nKPX oslash x -10\nKPX oslash y -10\nKPX oslash yacute -10\nKPX oslash ydieresis -10\nKPX otilde v -15\nKPX otilde w -25\nKPX otilde x -10\nKPX otilde y -10\nKPX otilde yacute -10\nKPX otilde ydieresis -10\nKPX period quotedblright -95\nKPX period quoteright -95\nKPX quoteleft quoteleft -74\nKPX quoteright d -15\nKPX quoteright dcroat -15\nKPX quoteright quoteright -74\nKPX quoteright r -15\nKPX quoteright racute -15\nKPX quoteright rcaron -15\nKPX quoteright rcommaaccent -15\nKPX quoteright s -74\nKPX quoteright sacute -74\nKPX quoteright scaron -74\nKPX quoteright scedilla -74\nKPX quoteright scommaaccent -74\nKPX quoteright space -74\nKPX quoteright t -37\nKPX quoteright tcommaaccent -37\nKPX quoteright v -15\nKPX r comma -65\nKPX r period -65\nKPX racute comma -65\nKPX racute period -65\nKPX rcaron comma -65\nKPX rcaron period -65\nKPX rcommaaccent comma -65\nKPX rcommaaccent period -65\nKPX space A -37\nKPX space Aacute -37\nKPX space Abreve -37\nKPX space Acircumflex -37\nKPX space Adieresis -37\nKPX space Agrave -37\nKPX space Amacron -37\nKPX space Aogonek -37\nKPX space Aring -37\nKPX space Atilde -37\nKPX space V -70\nKPX space W -70\nKPX space Y -70\nKPX space Yacute -70\nKPX space Ydieresis -70\nKPX v comma -37\nKPX v e -15\nKPX v eacute -15\nKPX v ecaron -15\nKPX v ecircumflex -15\nKPX v edieresis -15\nKPX v edotaccent -15\nKPX v egrave -15\nKPX v emacron -15\nKPX v eogonek -15\nKPX v o -15\nKPX v oacute -15\nKPX v ocircumflex -15\nKPX v odieresis -15\nKPX v ograve -15\nKPX v ohungarumlaut -15\nKPX v omacron -15\nKPX v oslash -15\nKPX v otilde -15\nKPX v period -37\nKPX w a -10\nKPX w aacute -10\nKPX w abreve -10\nKPX w acircumflex -10\nKPX w adieresis -10\nKPX w agrave -10\nKPX w amacron -10\nKPX w aogonek -10\nKPX w aring -10\nKPX w atilde -10\nKPX w comma -37\nKPX w e -10\nKPX w eacute -10\nKPX w ecaron -10\nKPX w ecircumflex -10\nKPX w edieresis -10\nKPX w edotaccent -10\nKPX w egrave -10\nKPX w emacron -10\nKPX w eogonek -10\nKPX w o -15\nKPX w oacute -15\nKPX w ocircumflex -15\nKPX w odieresis -15\nKPX w ograve -15\nKPX w ohungarumlaut -15\nKPX w omacron -15\nKPX w oslash -15\nKPX w otilde -15\nKPX w period -37\nKPX x e -10\nKPX x eacute -10\nKPX x ecaron -10\nKPX x ecircumflex -10\nKPX x edieresis -10\nKPX x edotaccent -10\nKPX x egrave -10\nKPX x emacron -10\nKPX x eogonek -10\nKPX y comma -37\nKPX y period -37\nKPX yacute comma -37\nKPX yacute period -37\nKPX ydieresis comma -37\nKPX ydieresis period -37\nEndKernPairs\nEndKernData\nEndFontMetrics\n";
      },                                                                                                               // 87
      "Symbol": function() {                                                                                           // 88
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.\nComment Creation Date: Thu May  1 15:12:25 1997\nComment UniqueID 43064\nComment VMusage 30820 39997\nFontName Symbol\nFullName Symbol\nFamilyName Symbol\nWeight Medium\nItalicAngle 0\nIsFixedPitch false\nCharacterSet Special\nFontBBox -180 -293 1090 1010 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 001.008\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.\nEncodingScheme FontSpecific\nStdHW 92\nStdVW 85\nStartCharMetrics 190\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 333 ; N exclam ; B 128 -17 240 672 ;\nC 34 ; WX 713 ; N universal ; B 31 0 681 705 ;\nC 35 ; WX 500 ; N numbersign ; B 20 -16 481 673 ;\nC 36 ; WX 549 ; N existential ; B 25 0 478 707 ;\nC 37 ; WX 833 ; N percent ; B 63 -36 771 655 ;\nC 38 ; WX 778 ; N ampersand ; B 41 -18 750 661 ;\nC 39 ; WX 439 ; N suchthat ; B 48 -17 414 500 ;\nC 40 ; WX 333 ; N parenleft ; B 53 -191 300 673 ;\nC 41 ; WX 333 ; N parenright ; B 30 -191 277 673 ;\nC 42 ; WX 500 ; N asteriskmath ; B 65 134 427 551 ;\nC 43 ; WX 549 ; N plus ; B 10 0 539 533 ;\nC 44 ; WX 250 ; N comma ; B 56 -152 194 104 ;\nC 45 ; WX 549 ; N minus ; B 11 233 535 288 ;\nC 46 ; WX 250 ; N period ; B 69 -17 181 95 ;\nC 47 ; WX 278 ; N slash ; B 0 -18 254 646 ;\nC 48 ; WX 500 ; N zero ; B 24 -14 476 685 ;\nC 49 ; WX 500 ; N one ; B 117 0 390 673 ;\nC 50 ; WX 500 ; N two ; B 25 0 475 685 ;\nC 51 ; WX 500 ; N three ; B 43 -14 435 685 ;\nC 52 ; WX 500 ; N four ; B 15 0 469 685 ;\nC 53 ; WX 500 ; N five ; B 32 -14 445 690 ;\nC 54 ; WX 500 ; N six ; B 34 -14 468 685 ;\nC 55 ; WX 500 ; N seven ; B 24 -16 448 673 ;\nC 56 ; WX 500 ; N eight ; B 56 -14 445 685 ;\nC 57 ; WX 500 ; N nine ; B 30 -18 459 685 ;\nC 58 ; WX 278 ; N colon ; B 81 -17 193 460 ;\nC 59 ; WX 278 ; N semicolon ; B 83 -152 221 460 ;\nC 60 ; WX 549 ; N less ; B 26 0 523 522 ;\nC 61 ; WX 549 ; N equal ; B 11 141 537 390 ;\nC 62 ; WX 549 ; N greater ; B 26 0 523 522 ;\nC 63 ; WX 444 ; N question ; B 70 -17 412 686 ;\nC 64 ; WX 549 ; N congruent ; B 11 0 537 475 ;\nC 65 ; WX 722 ; N Alpha ; B 4 0 684 673 ;\nC 66 ; WX 667 ; N Beta ; B 29 0 592 673 ;\nC 67 ; WX 722 ; N Chi ; B -9 0 704 673 ;\nC 68 ; WX 612 ; N Delta ; B 6 0 608 688 ;\nC 69 ; WX 611 ; N Epsilon ; B 32 0 617 673 ;\nC 70 ; WX 763 ; N Phi ; B 26 0 741 673 ;\nC 71 ; WX 603 ; N Gamma ; B 24 0 609 673 ;\nC 72 ; WX 722 ; N Eta ; B 39 0 729 673 ;\nC 73 ; WX 333 ; N Iota ; B 32 0 316 673 ;\nC 74 ; WX 631 ; N theta1 ; B 18 -18 623 689 ;\nC 75 ; WX 722 ; N Kappa ; B 35 0 722 673 ;\nC 76 ; WX 686 ; N Lambda ; B 6 0 680 688 ;\nC 77 ; WX 889 ; N Mu ; B 28 0 887 673 ;\nC 78 ; WX 722 ; N Nu ; B 29 -8 720 673 ;\nC 79 ; WX 722 ; N Omicron ; B 41 -17 715 685 ;\nC 80 ; WX 768 ; N Pi ; B 25 0 745 673 ;\nC 81 ; WX 741 ; N Theta ; B 41 -17 715 685 ;\nC 82 ; WX 556 ; N Rho ; B 28 0 563 673 ;\nC 83 ; WX 592 ; N Sigma ; B 5 0 589 673 ;\nC 84 ; WX 611 ; N Tau ; B 33 0 607 673 ;\nC 85 ; WX 690 ; N Upsilon ; B -8 0 694 673 ;\nC 86 ; WX 439 ; N sigma1 ; B 40 -233 436 500 ;\nC 87 ; WX 768 ; N Omega ; B 34 0 736 688 ;\nC 88 ; WX 645 ; N Xi ; B 40 0 599 673 ;\nC 89 ; WX 795 ; N Psi ; B 15 0 781 684 ;\nC 90 ; WX 611 ; N Zeta ; B 44 0 636 673 ;\nC 91 ; WX 333 ; N bracketleft ; B 86 -155 299 674 ;\nC 92 ; WX 863 ; N therefore ; B 163 0 701 487 ;\nC 93 ; WX 333 ; N bracketright ; B 33 -155 246 674 ;\nC 94 ; WX 658 ; N perpendicular ; B 15 0 652 674 ;\nC 95 ; WX 500 ; N underscore ; B -2 -125 502 -75 ;\nC 96 ; WX 500 ; N radicalex ; B 480 881 1090 917 ;\nC 97 ; WX 631 ; N alpha ; B 41 -18 622 500 ;\nC 98 ; WX 549 ; N beta ; B 61 -223 515 741 ;\nC 99 ; WX 549 ; N chi ; B 12 -231 522 499 ;\nC 100 ; WX 494 ; N delta ; B 40 -19 481 740 ;\nC 101 ; WX 439 ; N epsilon ; B 22 -19 427 502 ;\nC 102 ; WX 521 ; N phi ; B 28 -224 492 673 ;\nC 103 ; WX 411 ; N gamma ; B 5 -225 484 499 ;\nC 104 ; WX 603 ; N eta ; B 0 -202 527 514 ;\nC 105 ; WX 329 ; N iota ; B 0 -17 301 503 ;\nC 106 ; WX 603 ; N phi1 ; B 36 -224 587 499 ;\nC 107 ; WX 549 ; N kappa ; B 33 0 558 501 ;\nC 108 ; WX 549 ; N lambda ; B 24 -17 548 739 ;\nC 109 ; WX 576 ; N mu ; B 33 -223 567 500 ;\nC 110 ; WX 521 ; N nu ; B -9 -16 475 507 ;\nC 111 ; WX 549 ; N omicron ; B 35 -19 501 499 ;\nC 112 ; WX 549 ; N pi ; B 10 -19 530 487 ;\nC 113 ; WX 521 ; N theta ; B 43 -17 485 690 ;\nC 114 ; WX 549 ; N rho ; B 50 -230 490 499 ;\nC 115 ; WX 603 ; N sigma ; B 30 -21 588 500 ;\nC 116 ; WX 439 ; N tau ; B 10 -19 418 500 ;\nC 117 ; WX 576 ; N upsilon ; B 7 -18 535 507 ;\nC 118 ; WX 713 ; N omega1 ; B 12 -18 671 583 ;\nC 119 ; WX 686 ; N omega ; B 42 -17 684 500 ;\nC 120 ; WX 493 ; N xi ; B 27 -224 469 766 ;\nC 121 ; WX 686 ; N psi ; B 12 -228 701 500 ;\nC 122 ; WX 494 ; N zeta ; B 60 -225 467 756 ;\nC 123 ; WX 480 ; N braceleft ; B 58 -183 397 673 ;\nC 124 ; WX 200 ; N bar ; B 65 -293 135 707 ;\nC 125 ; WX 480 ; N braceright ; B 79 -183 418 673 ;\nC 126 ; WX 549 ; N similar ; B 17 203 529 307 ;\nC 160 ; WX 750 ; N Euro ; B 20 -12 714 685 ;\nC 161 ; WX 620 ; N Upsilon1 ; B -2 0 610 685 ;\nC 162 ; WX 247 ; N minute ; B 27 459 228 735 ;\nC 163 ; WX 549 ; N lessequal ; B 29 0 526 639 ;\nC 164 ; WX 167 ; N fraction ; B -180 -12 340 677 ;\nC 165 ; WX 713 ; N infinity ; B 26 124 688 404 ;\nC 166 ; WX 500 ; N florin ; B 2 -193 494 686 ;\nC 167 ; WX 753 ; N club ; B 86 -26 660 533 ;\nC 168 ; WX 753 ; N diamond ; B 142 -36 600 550 ;\nC 169 ; WX 753 ; N heart ; B 117 -33 631 532 ;\nC 170 ; WX 753 ; N spade ; B 113 -36 629 548 ;\nC 171 ; WX 1042 ; N arrowboth ; B 24 -15 1024 511 ;\nC 172 ; WX 987 ; N arrowleft ; B 32 -15 942 511 ;\nC 173 ; WX 603 ; N arrowup ; B 45 0 571 910 ;\nC 174 ; WX 987 ; N arrowright ; B 49 -15 959 511 ;\nC 175 ; WX 603 ; N arrowdown ; B 45 -22 571 888 ;\nC 176 ; WX 400 ; N degree ; B 50 385 350 685 ;\nC 177 ; WX 549 ; N plusminus ; B 10 0 539 645 ;\nC 178 ; WX 411 ; N second ; B 20 459 413 737 ;\nC 179 ; WX 549 ; N greaterequal ; B 29 0 526 639 ;\nC 180 ; WX 549 ; N multiply ; B 17 8 533 524 ;\nC 181 ; WX 713 ; N proportional ; B 27 123 639 404 ;\nC 182 ; WX 494 ; N partialdiff ; B 26 -20 462 746 ;\nC 183 ; WX 460 ; N bullet ; B 50 113 410 473 ;\nC 184 ; WX 549 ; N divide ; B 10 71 536 456 ;\nC 185 ; WX 549 ; N notequal ; B 15 -25 540 549 ;\nC 186 ; WX 549 ; N equivalence ; B 14 82 538 443 ;\nC 187 ; WX 549 ; N approxequal ; B 14 135 527 394 ;\nC 188 ; WX 1000 ; N ellipsis ; B 111 -17 889 95 ;\nC 189 ; WX 603 ; N arrowvertex ; B 280 -120 336 1010 ;\nC 190 ; WX 1000 ; N arrowhorizex ; B -60 220 1050 276 ;\nC 191 ; WX 658 ; N carriagereturn ; B 15 -16 602 629 ;\nC 192 ; WX 823 ; N aleph ; B 175 -18 661 658 ;\nC 193 ; WX 686 ; N Ifraktur ; B 10 -53 578 740 ;\nC 194 ; WX 795 ; N Rfraktur ; B 26 -15 759 734 ;\nC 195 ; WX 987 ; N weierstrass ; B 159 -211 870 573 ;\nC 196 ; WX 768 ; N circlemultiply ; B 43 -17 733 673 ;\nC 197 ; WX 768 ; N circleplus ; B 43 -15 733 675 ;\nC 198 ; WX 823 ; N emptyset ; B 39 -24 781 719 ;\nC 199 ; WX 768 ; N intersection ; B 40 0 732 509 ;\nC 200 ; WX 768 ; N union ; B 40 -17 732 492 ;\nC 201 ; WX 713 ; N propersuperset ; B 20 0 673 470 ;\nC 202 ; WX 713 ; N reflexsuperset ; B 20 -125 673 470 ;\nC 203 ; WX 713 ; N notsubset ; B 36 -70 690 540 ;\nC 204 ; WX 713 ; N propersubset ; B 37 0 690 470 ;\nC 205 ; WX 713 ; N reflexsubset ; B 37 -125 690 470 ;\nC 206 ; WX 713 ; N element ; B 45 0 505 468 ;\nC 207 ; WX 713 ; N notelement ; B 45 -58 505 555 ;\nC 208 ; WX 768 ; N angle ; B 26 0 738 673 ;\nC 209 ; WX 713 ; N gradient ; B 36 -19 681 718 ;\nC 210 ; WX 790 ; N registerserif ; B 50 -17 740 673 ;\nC 211 ; WX 790 ; N copyrightserif ; B 51 -15 741 675 ;\nC 212 ; WX 890 ; N trademarkserif ; B 18 293 855 673 ;\nC 213 ; WX 823 ; N product ; B 25 -101 803 751 ;\nC 214 ; WX 549 ; N radical ; B 10 -38 515 917 ;\nC 215 ; WX 250 ; N dotmath ; B 69 210 169 310 ;\nC 216 ; WX 713 ; N logicalnot ; B 15 0 680 288 ;\nC 217 ; WX 603 ; N logicaland ; B 23 0 583 454 ;\nC 218 ; WX 603 ; N logicalor ; B 30 0 578 477 ;\nC 219 ; WX 1042 ; N arrowdblboth ; B 27 -20 1023 510 ;\nC 220 ; WX 987 ; N arrowdblleft ; B 30 -15 939 513 ;\nC 221 ; WX 603 ; N arrowdblup ; B 39 2 567 911 ;\nC 222 ; WX 987 ; N arrowdblright ; B 45 -20 954 508 ;\nC 223 ; WX 603 ; N arrowdbldown ; B 44 -19 572 890 ;\nC 224 ; WX 494 ; N lozenge ; B 18 0 466 745 ;\nC 225 ; WX 329 ; N angleleft ; B 25 -198 306 746 ;\nC 226 ; WX 790 ; N registersans ; B 50 -20 740 670 ;\nC 227 ; WX 790 ; N copyrightsans ; B 49 -15 739 675 ;\nC 228 ; WX 786 ; N trademarksans ; B 5 293 725 673 ;\nC 229 ; WX 713 ; N summation ; B 14 -108 695 752 ;\nC 230 ; WX 384 ; N parenlefttp ; B 24 -293 436 926 ;\nC 231 ; WX 384 ; N parenleftex ; B 24 -85 108 925 ;\nC 232 ; WX 384 ; N parenleftbt ; B 24 -293 436 926 ;\nC 233 ; WX 384 ; N bracketlefttp ; B 0 -80 349 926 ;\nC 234 ; WX 384 ; N bracketleftex ; B 0 -79 77 925 ;\nC 235 ; WX 384 ; N bracketleftbt ; B 0 -80 349 926 ;\nC 236 ; WX 494 ; N bracelefttp ; B 209 -85 445 925 ;\nC 237 ; WX 494 ; N braceleftmid ; B 20 -85 284 935 ;\nC 238 ; WX 494 ; N braceleftbt ; B 209 -75 445 935 ;\nC 239 ; WX 494 ; N braceex ; B 209 -85 284 935 ;\nC 241 ; WX 329 ; N angleright ; B 21 -198 302 746 ;\nC 242 ; WX 274 ; N integral ; B 2 -107 291 916 ;\nC 243 ; WX 686 ; N integraltp ; B 308 -88 675 920 ;\nC 244 ; WX 686 ; N integralex ; B 308 -88 378 975 ;\nC 245 ; WX 686 ; N integralbt ; B 11 -87 378 921 ;\nC 246 ; WX 384 ; N parenrighttp ; B 54 -293 466 926 ;\nC 247 ; WX 384 ; N parenrightex ; B 382 -85 466 925 ;\nC 248 ; WX 384 ; N parenrightbt ; B 54 -293 466 926 ;\nC 249 ; WX 384 ; N bracketrighttp ; B 22 -80 371 926 ;\nC 250 ; WX 384 ; N bracketrightex ; B 294 -79 371 925 ;\nC 251 ; WX 384 ; N bracketrightbt ; B 22 -80 371 926 ;\nC 252 ; WX 494 ; N bracerighttp ; B 48 -85 284 925 ;\nC 253 ; WX 494 ; N bracerightmid ; B 209 -85 473 935 ;\nC 254 ; WX 494 ; N bracerightbt ; B 48 -75 284 935 ;\nC -1 ; WX 790 ; N apple ; B 56 -3 733 808 ;\nEndCharMetrics\nEndFontMetrics\n";
      },                                                                                                               // 90
      "ZapfDingbats": function() {                                                                                     // 91
        return "StartFontMetrics 4.1\nComment Copyright (c) 1985, 1987, 1988, 1989, 1997 Adobe Systems Incorporated. All Rights Reserved.\nComment Creation Date: Thu May  1 15:14:13 1997\nComment UniqueID 43082\nComment VMusage 45775 55535\nFontName ZapfDingbats\nFullName ITC Zapf Dingbats\nFamilyName ZapfDingbats\nWeight Medium\nItalicAngle 0\nIsFixedPitch false\nCharacterSet Special\nFontBBox -1 -143 981 820 \nUnderlinePosition -100\nUnderlineThickness 50\nVersion 002.000\nNotice Copyright (c) 1985, 1987, 1988, 1989, 1997 Adobe Systems Incorporated. All Rights Reserved.ITC Zapf Dingbats is a registered trademark of International Typeface Corporation.\nEncodingScheme FontSpecific\nStdHW 28\nStdVW 90\nStartCharMetrics 202\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\nC 33 ; WX 974 ; N a1 ; B 35 72 939 621 ;\nC 34 ; WX 961 ; N a2 ; B 35 81 927 611 ;\nC 35 ; WX 974 ; N a202 ; B 35 72 939 621 ;\nC 36 ; WX 980 ; N a3 ; B 35 0 945 692 ;\nC 37 ; WX 719 ; N a4 ; B 34 139 685 566 ;\nC 38 ; WX 789 ; N a5 ; B 35 -14 755 705 ;\nC 39 ; WX 790 ; N a119 ; B 35 -14 755 705 ;\nC 40 ; WX 791 ; N a118 ; B 35 -13 761 705 ;\nC 41 ; WX 690 ; N a117 ; B 34 138 655 553 ;\nC 42 ; WX 960 ; N a11 ; B 35 123 925 568 ;\nC 43 ; WX 939 ; N a12 ; B 35 134 904 559 ;\nC 44 ; WX 549 ; N a13 ; B 29 -11 516 705 ;\nC 45 ; WX 855 ; N a14 ; B 34 59 820 632 ;\nC 46 ; WX 911 ; N a15 ; B 35 50 876 642 ;\nC 47 ; WX 933 ; N a16 ; B 35 139 899 550 ;\nC 48 ; WX 911 ; N a105 ; B 35 50 876 642 ;\nC 49 ; WX 945 ; N a17 ; B 35 139 909 553 ;\nC 50 ; WX 974 ; N a18 ; B 35 104 938 587 ;\nC 51 ; WX 755 ; N a19 ; B 34 -13 721 705 ;\nC 52 ; WX 846 ; N a20 ; B 36 -14 811 705 ;\nC 53 ; WX 762 ; N a21 ; B 35 0 727 692 ;\nC 54 ; WX 761 ; N a22 ; B 35 0 727 692 ;\nC 55 ; WX 571 ; N a23 ; B -1 -68 571 661 ;\nC 56 ; WX 677 ; N a24 ; B 36 -13 642 705 ;\nC 57 ; WX 763 ; N a25 ; B 35 0 728 692 ;\nC 58 ; WX 760 ; N a26 ; B 35 0 726 692 ;\nC 59 ; WX 759 ; N a27 ; B 35 0 725 692 ;\nC 60 ; WX 754 ; N a28 ; B 35 0 720 692 ;\nC 61 ; WX 494 ; N a6 ; B 35 0 460 692 ;\nC 62 ; WX 552 ; N a7 ; B 35 0 517 692 ;\nC 63 ; WX 537 ; N a8 ; B 35 0 503 692 ;\nC 64 ; WX 577 ; N a9 ; B 35 96 542 596 ;\nC 65 ; WX 692 ; N a10 ; B 35 -14 657 705 ;\nC 66 ; WX 786 ; N a29 ; B 35 -14 751 705 ;\nC 67 ; WX 788 ; N a30 ; B 35 -14 752 705 ;\nC 68 ; WX 788 ; N a31 ; B 35 -14 753 705 ;\nC 69 ; WX 790 ; N a32 ; B 35 -14 756 705 ;\nC 70 ; WX 793 ; N a33 ; B 35 -13 759 705 ;\nC 71 ; WX 794 ; N a34 ; B 35 -13 759 705 ;\nC 72 ; WX 816 ; N a35 ; B 35 -14 782 705 ;\nC 73 ; WX 823 ; N a36 ; B 35 -14 787 705 ;\nC 74 ; WX 789 ; N a37 ; B 35 -14 754 705 ;\nC 75 ; WX 841 ; N a38 ; B 35 -14 807 705 ;\nC 76 ; WX 823 ; N a39 ; B 35 -14 789 705 ;\nC 77 ; WX 833 ; N a40 ; B 35 -14 798 705 ;\nC 78 ; WX 816 ; N a41 ; B 35 -13 782 705 ;\nC 79 ; WX 831 ; N a42 ; B 35 -14 796 705 ;\nC 80 ; WX 923 ; N a43 ; B 35 -14 888 705 ;\nC 81 ; WX 744 ; N a44 ; B 35 0 710 692 ;\nC 82 ; WX 723 ; N a45 ; B 35 0 688 692 ;\nC 83 ; WX 749 ; N a46 ; B 35 0 714 692 ;\nC 84 ; WX 790 ; N a47 ; B 34 -14 756 705 ;\nC 85 ; WX 792 ; N a48 ; B 35 -14 758 705 ;\nC 86 ; WX 695 ; N a49 ; B 35 -14 661 706 ;\nC 87 ; WX 776 ; N a50 ; B 35 -6 741 699 ;\nC 88 ; WX 768 ; N a51 ; B 35 -7 734 699 ;\nC 89 ; WX 792 ; N a52 ; B 35 -14 757 705 ;\nC 90 ; WX 759 ; N a53 ; B 35 0 725 692 ;\nC 91 ; WX 707 ; N a54 ; B 35 -13 672 704 ;\nC 92 ; WX 708 ; N a55 ; B 35 -14 672 705 ;\nC 93 ; WX 682 ; N a56 ; B 35 -14 647 705 ;\nC 94 ; WX 701 ; N a57 ; B 35 -14 666 705 ;\nC 95 ; WX 826 ; N a58 ; B 35 -14 791 705 ;\nC 96 ; WX 815 ; N a59 ; B 35 -14 780 705 ;\nC 97 ; WX 789 ; N a60 ; B 35 -14 754 705 ;\nC 98 ; WX 789 ; N a61 ; B 35 -14 754 705 ;\nC 99 ; WX 707 ; N a62 ; B 34 -14 673 705 ;\nC 100 ; WX 687 ; N a63 ; B 36 0 651 692 ;\nC 101 ; WX 696 ; N a64 ; B 35 0 661 691 ;\nC 102 ; WX 689 ; N a65 ; B 35 0 655 692 ;\nC 103 ; WX 786 ; N a66 ; B 34 -14 751 705 ;\nC 104 ; WX 787 ; N a67 ; B 35 -14 752 705 ;\nC 105 ; WX 713 ; N a68 ; B 35 -14 678 705 ;\nC 106 ; WX 791 ; N a69 ; B 35 -14 756 705 ;\nC 107 ; WX 785 ; N a70 ; B 36 -14 751 705 ;\nC 108 ; WX 791 ; N a71 ; B 35 -14 757 705 ;\nC 109 ; WX 873 ; N a72 ; B 35 -14 838 705 ;\nC 110 ; WX 761 ; N a73 ; B 35 0 726 692 ;\nC 111 ; WX 762 ; N a74 ; B 35 0 727 692 ;\nC 112 ; WX 762 ; N a203 ; B 35 0 727 692 ;\nC 113 ; WX 759 ; N a75 ; B 35 0 725 692 ;\nC 114 ; WX 759 ; N a204 ; B 35 0 725 692 ;\nC 115 ; WX 892 ; N a76 ; B 35 0 858 705 ;\nC 116 ; WX 892 ; N a77 ; B 35 -14 858 692 ;\nC 117 ; WX 788 ; N a78 ; B 35 -14 754 705 ;\nC 118 ; WX 784 ; N a79 ; B 35 -14 749 705 ;\nC 119 ; WX 438 ; N a81 ; B 35 -14 403 705 ;\nC 120 ; WX 138 ; N a82 ; B 35 0 104 692 ;\nC 121 ; WX 277 ; N a83 ; B 35 0 242 692 ;\nC 122 ; WX 415 ; N a84 ; B 35 0 380 692 ;\nC 123 ; WX 392 ; N a97 ; B 35 263 357 705 ;\nC 124 ; WX 392 ; N a98 ; B 34 263 357 705 ;\nC 125 ; WX 668 ; N a99 ; B 35 263 633 705 ;\nC 126 ; WX 668 ; N a100 ; B 36 263 634 705 ;\nC 128 ; WX 390 ; N a89 ; B 35 -14 356 705 ;\nC 129 ; WX 390 ; N a90 ; B 35 -14 355 705 ;\nC 130 ; WX 317 ; N a93 ; B 35 0 283 692 ;\nC 131 ; WX 317 ; N a94 ; B 35 0 283 692 ;\nC 132 ; WX 276 ; N a91 ; B 35 0 242 692 ;\nC 133 ; WX 276 ; N a92 ; B 35 0 242 692 ;\nC 134 ; WX 509 ; N a205 ; B 35 0 475 692 ;\nC 135 ; WX 509 ; N a85 ; B 35 0 475 692 ;\nC 136 ; WX 410 ; N a206 ; B 35 0 375 692 ;\nC 137 ; WX 410 ; N a86 ; B 35 0 375 692 ;\nC 138 ; WX 234 ; N a87 ; B 35 -14 199 705 ;\nC 139 ; WX 234 ; N a88 ; B 35 -14 199 705 ;\nC 140 ; WX 334 ; N a95 ; B 35 0 299 692 ;\nC 141 ; WX 334 ; N a96 ; B 35 0 299 692 ;\nC 161 ; WX 732 ; N a101 ; B 35 -143 697 806 ;\nC 162 ; WX 544 ; N a102 ; B 56 -14 488 706 ;\nC 163 ; WX 544 ; N a103 ; B 34 -14 508 705 ;\nC 164 ; WX 910 ; N a104 ; B 35 40 875 651 ;\nC 165 ; WX 667 ; N a106 ; B 35 -14 633 705 ;\nC 166 ; WX 760 ; N a107 ; B 35 -14 726 705 ;\nC 167 ; WX 760 ; N a108 ; B 0 121 758 569 ;\nC 168 ; WX 776 ; N a112 ; B 35 0 741 705 ;\nC 169 ; WX 595 ; N a111 ; B 34 -14 560 705 ;\nC 170 ; WX 694 ; N a110 ; B 35 -14 659 705 ;\nC 171 ; WX 626 ; N a109 ; B 34 0 591 705 ;\nC 172 ; WX 788 ; N a120 ; B 35 -14 754 705 ;\nC 173 ; WX 788 ; N a121 ; B 35 -14 754 705 ;\nC 174 ; WX 788 ; N a122 ; B 35 -14 754 705 ;\nC 175 ; WX 788 ; N a123 ; B 35 -14 754 705 ;\nC 176 ; WX 788 ; N a124 ; B 35 -14 754 705 ;\nC 177 ; WX 788 ; N a125 ; B 35 -14 754 705 ;\nC 178 ; WX 788 ; N a126 ; B 35 -14 754 705 ;\nC 179 ; WX 788 ; N a127 ; B 35 -14 754 705 ;\nC 180 ; WX 788 ; N a128 ; B 35 -14 754 705 ;\nC 181 ; WX 788 ; N a129 ; B 35 -14 754 705 ;\nC 182 ; WX 788 ; N a130 ; B 35 -14 754 705 ;\nC 183 ; WX 788 ; N a131 ; B 35 -14 754 705 ;\nC 184 ; WX 788 ; N a132 ; B 35 -14 754 705 ;\nC 185 ; WX 788 ; N a133 ; B 35 -14 754 705 ;\nC 186 ; WX 788 ; N a134 ; B 35 -14 754 705 ;\nC 187 ; WX 788 ; N a135 ; B 35 -14 754 705 ;\nC 188 ; WX 788 ; N a136 ; B 35 -14 754 705 ;\nC 189 ; WX 788 ; N a137 ; B 35 -14 754 705 ;\nC 190 ; WX 788 ; N a138 ; B 35 -14 754 705 ;\nC 191 ; WX 788 ; N a139 ; B 35 -14 754 705 ;\nC 192 ; WX 788 ; N a140 ; B 35 -14 754 705 ;\nC 193 ; WX 788 ; N a141 ; B 35 -14 754 705 ;\nC 194 ; WX 788 ; N a142 ; B 35 -14 754 705 ;\nC 195 ; WX 788 ; N a143 ; B 35 -14 754 705 ;\nC 196 ; WX 788 ; N a144 ; B 35 -14 754 705 ;\nC 197 ; WX 788 ; N a145 ; B 35 -14 754 705 ;\nC 198 ; WX 788 ; N a146 ; B 35 -14 754 705 ;\nC 199 ; WX 788 ; N a147 ; B 35 -14 754 705 ;\nC 200 ; WX 788 ; N a148 ; B 35 -14 754 705 ;\nC 201 ; WX 788 ; N a149 ; B 35 -14 754 705 ;\nC 202 ; WX 788 ; N a150 ; B 35 -14 754 705 ;\nC 203 ; WX 788 ; N a151 ; B 35 -14 754 705 ;\nC 204 ; WX 788 ; N a152 ; B 35 -14 754 705 ;\nC 205 ; WX 788 ; N a153 ; B 35 -14 754 705 ;\nC 206 ; WX 788 ; N a154 ; B 35 -14 754 705 ;\nC 207 ; WX 788 ; N a155 ; B 35 -14 754 705 ;\nC 208 ; WX 788 ; N a156 ; B 35 -14 754 705 ;\nC 209 ; WX 788 ; N a157 ; B 35 -14 754 705 ;\nC 210 ; WX 788 ; N a158 ; B 35 -14 754 705 ;\nC 211 ; WX 788 ; N a159 ; B 35 -14 754 705 ;\nC 212 ; WX 894 ; N a160 ; B 35 58 860 634 ;\nC 213 ; WX 838 ; N a161 ; B 35 152 803 540 ;\nC 214 ; WX 1016 ; N a163 ; B 34 152 981 540 ;\nC 215 ; WX 458 ; N a164 ; B 35 -127 422 820 ;\nC 216 ; WX 748 ; N a196 ; B 35 94 698 597 ;\nC 217 ; WX 924 ; N a165 ; B 35 140 890 552 ;\nC 218 ; WX 748 ; N a192 ; B 35 94 698 597 ;\nC 219 ; WX 918 ; N a166 ; B 35 166 884 526 ;\nC 220 ; WX 927 ; N a167 ; B 35 32 892 660 ;\nC 221 ; WX 928 ; N a168 ; B 35 129 891 562 ;\nC 222 ; WX 928 ; N a169 ; B 35 128 893 563 ;\nC 223 ; WX 834 ; N a170 ; B 35 155 799 537 ;\nC 224 ; WX 873 ; N a171 ; B 35 93 838 599 ;\nC 225 ; WX 828 ; N a172 ; B 35 104 791 588 ;\nC 226 ; WX 924 ; N a173 ; B 35 98 889 594 ;\nC 227 ; WX 924 ; N a162 ; B 35 98 889 594 ;\nC 228 ; WX 917 ; N a174 ; B 35 0 882 692 ;\nC 229 ; WX 930 ; N a175 ; B 35 84 896 608 ;\nC 230 ; WX 931 ; N a176 ; B 35 84 896 608 ;\nC 231 ; WX 463 ; N a177 ; B 35 -99 429 791 ;\nC 232 ; WX 883 ; N a178 ; B 35 71 848 623 ;\nC 233 ; WX 836 ; N a179 ; B 35 44 802 648 ;\nC 234 ; WX 836 ; N a193 ; B 35 44 802 648 ;\nC 235 ; WX 867 ; N a180 ; B 35 101 832 591 ;\nC 236 ; WX 867 ; N a199 ; B 35 101 832 591 ;\nC 237 ; WX 696 ; N a181 ; B 35 44 661 648 ;\nC 238 ; WX 696 ; N a200 ; B 35 44 661 648 ;\nC 239 ; WX 874 ; N a182 ; B 35 77 840 619 ;\nC 241 ; WX 874 ; N a201 ; B 35 73 840 615 ;\nC 242 ; WX 760 ; N a183 ; B 35 0 725 692 ;\nC 243 ; WX 946 ; N a184 ; B 35 160 911 533 ;\nC 244 ; WX 771 ; N a197 ; B 34 37 736 655 ;\nC 245 ; WX 865 ; N a185 ; B 35 207 830 481 ;\nC 246 ; WX 771 ; N a194 ; B 34 37 736 655 ;\nC 247 ; WX 888 ; N a198 ; B 34 -19 853 712 ;\nC 248 ; WX 967 ; N a186 ; B 35 124 932 568 ;\nC 249 ; WX 888 ; N a195 ; B 34 -19 853 712 ;\nC 250 ; WX 831 ; N a187 ; B 35 113 796 579 ;\nC 251 ; WX 873 ; N a188 ; B 36 118 838 578 ;\nC 252 ; WX 927 ; N a189 ; B 35 150 891 542 ;\nC 253 ; WX 970 ; N a190 ; B 35 76 931 616 ;\nC 254 ; WX 918 ; N a191 ; B 34 99 884 593 ;\nEndCharMetrics\nEndFontMetrics\n";
      }                                                                                                                // 93
    };                                                                                                                 // 94
                                                                                                                       // 95
    PDFFont.prototype.use = function(characters) {                                                                     // 96
      var _ref;                                                                                                        // 97
      return (_ref = this.subset) != null ? _ref.use(characters) : void 0;                                             // 98
    };                                                                                                                 // 99
                                                                                                                       // 100
    PDFFont.prototype.embed = function() {                                                                             // 101
      if (this.embedded || (this.dictionary == null)) {                                                                // 102
        return;                                                                                                        // 103
      }                                                                                                                // 104
      if (this.isAFM) {                                                                                                // 105
        this.embedAFM();                                                                                               // 106
      } else {                                                                                                         // 107
        this.embedTTF();                                                                                               // 108
      }                                                                                                                // 109
      return this.embedded = true;                                                                                     // 110
    };                                                                                                                 // 111
                                                                                                                       // 112
    PDFFont.prototype.encode = function(text) {                                                                        // 113
      var _ref;                                                                                                        // 114
      if (this.isAFM) {                                                                                                // 115
        return this.font.encodeText(text);                                                                             // 116
      } else {                                                                                                         // 117
        return ((_ref = this.subset) != null ? _ref.encodeText(text) : void 0) || text;                                // 118
      }                                                                                                                // 119
    };                                                                                                                 // 120
                                                                                                                       // 121
    PDFFont.prototype.ref = function() {                                                                               // 122
      return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();                        // 123
    };                                                                                                                 // 124
                                                                                                                       // 125
    PDFFont.prototype.registerTTF = function() {                                                                       // 126
      var e, hi, low, raw, _ref;                                                                                       // 127
      this.name = this.font.name.postscriptName;                                                                       // 128
      this.scaleFactor = 1000.0 / this.font.head.unitsPerEm;                                                           // 129
      this.bbox = (function() {                                                                                        // 130
        var _i, _len, _ref, _results;                                                                                  // 131
        _ref = this.font.bbox;                                                                                         // 132
        _results = [];                                                                                                 // 133
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                            // 134
          e = _ref[_i];                                                                                                // 135
          _results.push(Math.round(e * this.scaleFactor));                                                             // 136
        }                                                                                                              // 137
        return _results;                                                                                               // 138
      }).call(this);                                                                                                   // 139
      this.stemV = 0;                                                                                                  // 140
      if (this.font.post.exists) {                                                                                     // 141
        raw = this.font.post.italic_angle;                                                                             // 142
        hi = raw >> 16;                                                                                                // 143
        low = raw & 0xFF;                                                                                              // 144
        if (hi & 0x8000 !== 0) {                                                                                       // 145
          hi = -((hi ^ 0xFFFF) + 1);                                                                                   // 146
        }                                                                                                              // 147
        this.italicAngle = +("" + hi + "." + low);                                                                     // 148
      } else {                                                                                                         // 149
        this.italicAngle = 0;                                                                                          // 150
      }                                                                                                                // 151
      this.ascender = Math.round(this.font.ascender * this.scaleFactor);                                               // 152
      this.decender = Math.round(this.font.decender * this.scaleFactor);                                               // 153
      this.lineGap = Math.round(this.font.lineGap * this.scaleFactor);                                                 // 154
      this.capHeight = (this.font.os2.exists && this.font.os2.capHeight) || this.ascender;                             // 155
      this.xHeight = (this.font.os2.exists && this.font.os2.xHeight) || 0;                                             // 156
      this.familyClass = (this.font.os2.exists && this.font.os2.familyClass || 0) >> 8;                                // 157
      this.isSerif = (_ref = this.familyClass) === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7;
      this.isScript = this.familyClass === 10;                                                                         // 159
      this.flags = 0;                                                                                                  // 160
      if (this.font.post.isFixedPitch) {                                                                               // 161
        this.flags |= 1 << 0;                                                                                          // 162
      }                                                                                                                // 163
      if (this.isSerif) {                                                                                              // 164
        this.flags |= 1 << 1;                                                                                          // 165
      }                                                                                                                // 166
      if (this.isScript) {                                                                                             // 167
        this.flags |= 1 << 3;                                                                                          // 168
      }                                                                                                                // 169
      if (this.italicAngle !== 0) {                                                                                    // 170
        this.flags |= 1 << 6;                                                                                          // 171
      }                                                                                                                // 172
      this.flags |= 1 << 5;                                                                                            // 173
      if (!this.font.cmap.unicode) {                                                                                   // 174
        throw new Error('No unicode cmap for font');                                                                   // 175
      }                                                                                                                // 176
    };                                                                                                                 // 177
                                                                                                                       // 178
    PDFFont.prototype.embedTTF = function() {                                                                          // 179
      var charWidths, cmap, code, data, descriptor, firstChar, fontfile, glyph;                                        // 180
      data = this.subset.encode();                                                                                     // 181
      fontfile = this.document.ref();                                                                                  // 182
      fontfile.write(data);                                                                                            // 183
      fontfile.data.Length1 = fontfile.uncompressedLength;                                                             // 184
      fontfile.end();                                                                                                  // 185
      descriptor = this.document.ref({                                                                                 // 186
        Type: 'FontDescriptor',                                                                                        // 187
        FontName: this.subset.postscriptName,                                                                          // 188
        FontFile2: fontfile,                                                                                           // 189
        FontBBox: this.bbox,                                                                                           // 190
        Flags: this.flags,                                                                                             // 191
        StemV: this.stemV,                                                                                             // 192
        ItalicAngle: this.italicAngle,                                                                                 // 193
        Ascent: this.ascender,                                                                                         // 194
        Descent: this.decender,                                                                                        // 195
        CapHeight: this.capHeight,                                                                                     // 196
        XHeight: this.xHeight                                                                                          // 197
      });                                                                                                              // 198
      descriptor.end();                                                                                                // 199
      firstChar = +Object.keys(this.subset.cmap)[0];                                                                   // 200
      charWidths = (function() {                                                                                       // 201
        var _ref, _results;                                                                                            // 202
        _ref = this.subset.cmap;                                                                                       // 203
        _results = [];                                                                                                 // 204
        for (code in _ref) {                                                                                           // 205
          glyph = _ref[code];                                                                                          // 206
          _results.push(Math.round(this.font.widthOfGlyph(glyph)));                                                    // 207
        }                                                                                                              // 208
        return _results;                                                                                               // 209
      }).call(this);                                                                                                   // 210
      cmap = this.document.ref();                                                                                      // 211
      cmap.end(toUnicodeCmap(this.subset.subset));                                                                     // 212
      this.dictionary.data = {                                                                                         // 213
        Type: 'Font',                                                                                                  // 214
        BaseFont: this.subset.postscriptName,                                                                          // 215
        Subtype: 'TrueType',                                                                                           // 216
        FontDescriptor: descriptor,                                                                                    // 217
        FirstChar: firstChar,                                                                                          // 218
        LastChar: firstChar + charWidths.length - 1,                                                                   // 219
        Widths: charWidths,                                                                                            // 220
        Encoding: 'MacRomanEncoding',                                                                                  // 221
        ToUnicode: cmap                                                                                                // 222
      };                                                                                                               // 223
      return this.dictionary.end();                                                                                    // 224
    };                                                                                                                 // 225
                                                                                                                       // 226
    toUnicodeCmap = function(map) {                                                                                    // 227
      var code, codes, range, unicode, unicodeMap, _i, _len;                                                           // 228
      unicodeMap = '/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<00><ff>\nendcodespacerange';
      codes = Object.keys(map).sort(function(a, b) {                                                                   // 230
        return a - b;                                                                                                  // 231
      });                                                                                                              // 232
      range = [];                                                                                                      // 233
      for (_i = 0, _len = codes.length; _i < _len; _i++) {                                                             // 234
        code = codes[_i];                                                                                              // 235
        if (range.length >= 100) {                                                                                     // 236
          unicodeMap += "\n" + range.length + " beginbfchar\n" + (range.join('\n')) + "\nendbfchar";                   // 237
          range = [];                                                                                                  // 238
        }                                                                                                              // 239
        unicode = ('0000' + map[code].toString(16)).slice(-4);                                                         // 240
        code = (+code).toString(16);                                                                                   // 241
        range.push("<" + code + "><" + unicode + ">");                                                                 // 242
      }                                                                                                                // 243
      if (range.length) {                                                                                              // 244
        unicodeMap += "\n" + range.length + " beginbfchar\n" + (range.join('\n')) + "\nendbfchar\n";                   // 245
      }                                                                                                                // 246
      return unicodeMap += 'endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend';                         // 247
    };                                                                                                                 // 248
                                                                                                                       // 249
    PDFFont.prototype.registerAFM = function(name) {                                                                   // 250
      var _ref;                                                                                                        // 251
      this.name = name;                                                                                                // 252
      return _ref = this.font, this.ascender = _ref.ascender, this.decender = _ref.decender, this.bbox = _ref.bbox, this.lineGap = _ref.lineGap, _ref;
    };                                                                                                                 // 254
                                                                                                                       // 255
    PDFFont.prototype.embedAFM = function() {                                                                          // 256
      this.dictionary.data = {                                                                                         // 257
        Type: 'Font',                                                                                                  // 258
        BaseFont: this.name,                                                                                           // 259
        Subtype: 'Type1',                                                                                              // 260
        Encoding: 'WinAnsiEncoding'                                                                                    // 261
      };                                                                                                               // 262
      return this.dictionary.end();                                                                                    // 263
    };                                                                                                                 // 264
                                                                                                                       // 265
    PDFFont.prototype.widthOfString = function(string, size) {                                                         // 266
      var charCode, i, scale, width, _i, _ref;                                                                         // 267
      string = '' + string;                                                                                            // 268
      width = 0;                                                                                                       // 269
      for (i = _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {         // 270
        charCode = string.charCodeAt(i);                                                                               // 271
        width += this.font.widthOfGlyph(this.font.characterToGlyph(charCode)) || 0;                                    // 272
      }                                                                                                                // 273
      scale = size / 1000;                                                                                             // 274
      return width * scale;                                                                                            // 275
    };                                                                                                                 // 276
                                                                                                                       // 277
    PDFFont.prototype.lineHeight = function(size, includeGap) {                                                        // 278
      var gap;                                                                                                         // 279
      if (includeGap == null) {                                                                                        // 280
        includeGap = false;                                                                                            // 281
      }                                                                                                                // 282
      gap = includeGap ? this.lineGap : 0;                                                                             // 283
      return (this.ascender + gap - this.decender) / 1000 * size;                                                      // 284
    };                                                                                                                 // 285
                                                                                                                       // 286
    return PDFFont;                                                                                                    // 287
                                                                                                                       // 288
  })();                                                                                                                // 289
                                                                                                                       // 290
  module.exports = PDFFont;                                                                                            // 291
                                                                                                                       // 292
}).call(this);                                                                                                         // 293
                                                                                                                       // 294
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"./font/afm":49,"./font/subset":52,"./font/ttf":64,"buffer":17}],49:[function(require,module,exports){              //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var AFMFont, fs;                                                                                                     // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
  AFMFont = (function() {                                                                                              // 7
    var WIN_ANSI_MAP, characters;                                                                                      // 8
                                                                                                                       // 9
    AFMFont.open = function(filename) {                                                                                // 10
      return new AFMFont(fs.readFileSync(filename, 'utf8'));                                                           // 11
    };                                                                                                                 // 12
                                                                                                                       // 13
    function AFMFont(contents) {                                                                                       // 14
      var e, i;                                                                                                        // 15
      this.contents = contents;                                                                                        // 16
      this.attributes = {};                                                                                            // 17
      this.glyphWidths = {};                                                                                           // 18
      this.boundingBoxes = {};                                                                                         // 19
      this.parse();                                                                                                    // 20
      this.charWidths = (function() {                                                                                  // 21
        var _i, _results;                                                                                              // 22
        _results = [];                                                                                                 // 23
        for (i = _i = 0; _i <= 255; i = ++_i) {                                                                        // 24
          _results.push(this.glyphWidths[characters[i]]);                                                              // 25
        }                                                                                                              // 26
        return _results;                                                                                               // 27
      }).call(this);                                                                                                   // 28
      this.bbox = (function() {                                                                                        // 29
        var _i, _len, _ref, _results;                                                                                  // 30
        _ref = this.attributes['FontBBox'].split(/\s+/);                                                               // 31
        _results = [];                                                                                                 // 32
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                            // 33
          e = _ref[_i];                                                                                                // 34
          _results.push(+e);                                                                                           // 35
        }                                                                                                              // 36
        return _results;                                                                                               // 37
      }).call(this);                                                                                                   // 38
      this.ascender = +(this.attributes['Ascender'] || 0);                                                             // 39
      this.decender = +(this.attributes['Descender'] || 0);                                                            // 40
      this.lineGap = (this.bbox[3] - this.bbox[1]) - (this.ascender - this.decender);                                  // 41
    }                                                                                                                  // 42
                                                                                                                       // 43
    AFMFont.prototype.parse = function() {                                                                             // 44
      var a, key, line, match, name, section, value, _i, _len, _ref;                                                   // 45
      section = '';                                                                                                    // 46
      _ref = this.contents.split('\n');                                                                                // 47
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                              // 48
        line = _ref[_i];                                                                                               // 49
        if (match = line.match(/^Start(\w+)/)) {                                                                       // 50
          section = match[1];                                                                                          // 51
          continue;                                                                                                    // 52
        } else if (match = line.match(/^End(\w+)/)) {                                                                  // 53
          section = '';                                                                                                // 54
          continue;                                                                                                    // 55
        }                                                                                                              // 56
        switch (section) {                                                                                             // 57
          case 'FontMetrics':                                                                                          // 58
            match = line.match(/(^\w+)\s+(.*)/);                                                                       // 59
            key = match[1];                                                                                            // 60
            value = match[2];                                                                                          // 61
            if (a = this.attributes[key]) {                                                                            // 62
              if (!Array.isArray(a)) {                                                                                 // 63
                a = this.attributes[key] = [a];                                                                        // 64
              }                                                                                                        // 65
              a.push(value);                                                                                           // 66
            } else {                                                                                                   // 67
              this.attributes[key] = value;                                                                            // 68
            }                                                                                                          // 69
            break;                                                                                                     // 70
          case 'CharMetrics':                                                                                          // 71
            if (!/^CH?\s/.test(line)) {                                                                                // 72
              continue;                                                                                                // 73
            }                                                                                                          // 74
            name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];                                                                // 75
            this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];                                               // 76
        }                                                                                                              // 77
      }                                                                                                                // 78
    };                                                                                                                 // 79
                                                                                                                       // 80
    WIN_ANSI_MAP = {                                                                                                   // 81
      402: 131,                                                                                                        // 82
      8211: 150,                                                                                                       // 83
      8212: 151,                                                                                                       // 84
      8216: 145,                                                                                                       // 85
      8217: 146,                                                                                                       // 86
      8218: 130,                                                                                                       // 87
      8220: 147,                                                                                                       // 88
      8221: 148,                                                                                                       // 89
      8222: 132,                                                                                                       // 90
      8224: 134,                                                                                                       // 91
      8225: 135,                                                                                                       // 92
      8226: 149,                                                                                                       // 93
      8230: 133,                                                                                                       // 94
      8364: 128,                                                                                                       // 95
      8240: 137,                                                                                                       // 96
      8249: 139,                                                                                                       // 97
      8250: 155,                                                                                                       // 98
      710: 136,                                                                                                        // 99
      8482: 153,                                                                                                       // 100
      338: 140,                                                                                                        // 101
      339: 156,                                                                                                        // 102
      732: 152,                                                                                                        // 103
      352: 138,                                                                                                        // 104
      353: 154,                                                                                                        // 105
      376: 159,                                                                                                        // 106
      381: 142,                                                                                                        // 107
      382: 158                                                                                                         // 108
    };                                                                                                                 // 109
                                                                                                                       // 110
    AFMFont.prototype.encodeText = function(text) {                                                                    // 111
      var char, i, string, _i, _ref;                                                                                   // 112
      string = '';                                                                                                     // 113
      for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {           // 114
        char = text.charCodeAt(i);                                                                                     // 115
        char = WIN_ANSI_MAP[char] || char;                                                                             // 116
        string += String.fromCharCode(char);                                                                           // 117
      }                                                                                                                // 118
      return string;                                                                                                   // 119
    };                                                                                                                 // 120
                                                                                                                       // 121
    AFMFont.prototype.characterToGlyph = function(character) {                                                         // 122
      return characters[WIN_ANSI_MAP[character] || character];                                                         // 123
    };                                                                                                                 // 124
                                                                                                                       // 125
    AFMFont.prototype.widthOfGlyph = function(glyph) {                                                                 // 126
      return this.glyphWidths[glyph];                                                                                  // 127
    };                                                                                                                 // 128
                                                                                                                       // 129
    characters = '.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n\nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n\nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n\ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n\nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n\nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n\nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n\nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis'.split(/\s+/);
                                                                                                                       // 131
    return AFMFont;                                                                                                    // 132
                                                                                                                       // 133
  })();                                                                                                                // 134
                                                                                                                       // 135
  module.exports = AFMFont;                                                                                            // 136
                                                                                                                       // 137
}).call(this);                                                                                                         // 138
                                                                                                                       // 139
},{}],50:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var DFont, Data, Directory, NameTable, fs;                                                                           // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
  Data = require('../data');                                                                                           // 7
                                                                                                                       // 8
  Directory = require('./directory');                                                                                  // 9
                                                                                                                       // 10
  NameTable = require('./tables/name');                                                                                // 11
                                                                                                                       // 12
  DFont = (function() {                                                                                                // 13
    DFont.open = function(filename) {                                                                                  // 14
      var contents;                                                                                                    // 15
      contents = fs.readFileSync(filename);                                                                            // 16
      return new DFont(contents);                                                                                      // 17
    };                                                                                                                 // 18
                                                                                                                       // 19
    function DFont(contents) {                                                                                         // 20
      this.contents = new Data(contents);                                                                              // 21
      this.parse(this.contents);                                                                                       // 22
    }                                                                                                                  // 23
                                                                                                                       // 24
    DFont.prototype.parse = function(data) {                                                                           // 25
      var attr, b2, b3, b4, dataLength, dataOffset, dataOfs, entry, font, handle, i, id, j, len, length, mapLength, mapOffset, maxIndex, maxTypeIndex, name, nameListOffset, nameOfs, p, pos, refListOffset, type, typeListOffset, _i, _j;
      dataOffset = data.readInt();                                                                                     // 27
      mapOffset = data.readInt();                                                                                      // 28
      dataLength = data.readInt();                                                                                     // 29
      mapLength = data.readInt();                                                                                      // 30
      this.map = {};                                                                                                   // 31
      data.pos = mapOffset + 24;                                                                                       // 32
      typeListOffset = data.readShort() + mapOffset;                                                                   // 33
      nameListOffset = data.readShort() + mapOffset;                                                                   // 34
      data.pos = typeListOffset;                                                                                       // 35
      maxIndex = data.readShort();                                                                                     // 36
      for (i = _i = 0; _i <= maxIndex; i = _i += 1) {                                                                  // 37
        type = data.readString(4);                                                                                     // 38
        maxTypeIndex = data.readShort();                                                                               // 39
        refListOffset = data.readShort();                                                                              // 40
        this.map[type] = {                                                                                             // 41
          list: [],                                                                                                    // 42
          named: {}                                                                                                    // 43
        };                                                                                                             // 44
        pos = data.pos;                                                                                                // 45
        data.pos = typeListOffset + refListOffset;                                                                     // 46
        for (j = _j = 0; _j <= maxTypeIndex; j = _j += 1) {                                                            // 47
          id = data.readShort();                                                                                       // 48
          nameOfs = data.readShort();                                                                                  // 49
          attr = data.readByte();                                                                                      // 50
          b2 = data.readByte() << 16;                                                                                  // 51
          b3 = data.readByte() << 8;                                                                                   // 52
          b4 = data.readByte();                                                                                        // 53
          dataOfs = dataOffset + (0 | b2 | b3 | b4);                                                                   // 54
          handle = data.readUInt32();                                                                                  // 55
          entry = {                                                                                                    // 56
            id: id,                                                                                                    // 57
            attributes: attr,                                                                                          // 58
            offset: dataOfs,                                                                                           // 59
            handle: handle                                                                                             // 60
          };                                                                                                           // 61
          p = data.pos;                                                                                                // 62
          if (nameOfs !== -1 && (nameListOffset + nameOfs < mapOffset + mapLength)) {                                  // 63
            data.pos = nameListOffset + nameOfs;                                                                       // 64
            len = data.readByte();                                                                                     // 65
            entry.name = data.readString(len);                                                                         // 66
          } else if (type === 'sfnt') {                                                                                // 67
            data.pos = entry.offset;                                                                                   // 68
            length = data.readUInt32();                                                                                // 69
            font = {};                                                                                                 // 70
            font.contents = new Data(data.slice(data.pos, data.pos + length));                                         // 71
            font.directory = new Directory(font.contents);                                                             // 72
            name = new NameTable(font);                                                                                // 73
            entry.name = name.fontName[0].raw;                                                                         // 74
          }                                                                                                            // 75
          data.pos = p;                                                                                                // 76
          this.map[type].list.push(entry);                                                                             // 77
          if (entry.name) {                                                                                            // 78
            this.map[type].named[entry.name] = entry;                                                                  // 79
          }                                                                                                            // 80
        }                                                                                                              // 81
        data.pos = pos;                                                                                                // 82
      }                                                                                                                // 83
    };                                                                                                                 // 84
                                                                                                                       // 85
    DFont.prototype.getNamedFont = function(name) {                                                                    // 86
      var data, entry, length, pos, ret, _ref;                                                                         // 87
      data = this.contents;                                                                                            // 88
      pos = data.pos;                                                                                                  // 89
      entry = (_ref = this.map.sfnt) != null ? _ref.named[name] : void 0;                                              // 90
      if (!entry) {                                                                                                    // 91
        throw new Error("Font " + name + " not found in DFont file.");                                                 // 92
      }                                                                                                                // 93
      data.pos = entry.offset;                                                                                         // 94
      length = data.readUInt32();                                                                                      // 95
      ret = data.slice(data.pos, data.pos + length);                                                                   // 96
      data.pos = pos;                                                                                                  // 97
      return ret;                                                                                                      // 98
    };                                                                                                                 // 99
                                                                                                                       // 100
    return DFont;                                                                                                      // 101
                                                                                                                       // 102
  })();                                                                                                                // 103
                                                                                                                       // 104
  module.exports = DFont;                                                                                              // 105
                                                                                                                       // 106
}).call(this);                                                                                                         // 107
                                                                                                                       // 108
},{"../data":46,"./directory":51,"./tables/name":61}],51:[function(require,module,exports){                            //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, Directory,                                                                                                 // 3
    __slice = [].slice;                                                                                                // 4
                                                                                                                       // 5
  Data = require('../data');                                                                                           // 6
                                                                                                                       // 7
  Directory = (function() {                                                                                            // 8
    var checksum;                                                                                                      // 9
                                                                                                                       // 10
    function Directory(data) {                                                                                         // 11
      var entry, i, _i, _ref;                                                                                          // 12
      this.scalarType = data.readInt();                                                                                // 13
      this.tableCount = data.readShort();                                                                              // 14
      this.searchRange = data.readShort();                                                                             // 15
      this.entrySelector = data.readShort();                                                                           // 16
      this.rangeShift = data.readShort();                                                                              // 17
      this.tables = {};                                                                                                // 18
      for (i = _i = 0, _ref = this.tableCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {       // 19
        entry = {                                                                                                      // 20
          tag: data.readString(4),                                                                                     // 21
          checksum: data.readInt(),                                                                                    // 22
          offset: data.readInt(),                                                                                      // 23
          length: data.readInt()                                                                                       // 24
        };                                                                                                             // 25
        this.tables[entry.tag] = entry;                                                                                // 26
      }                                                                                                                // 27
    }                                                                                                                  // 28
                                                                                                                       // 29
    Directory.prototype.encode = function(tables) {                                                                    // 30
      var adjustment, directory, directoryLength, entrySelector, headOffset, log2, offset, rangeShift, searchRange, sum, table, tableCount, tableData, tag;
      tableCount = Object.keys(tables).length;                                                                         // 32
      log2 = Math.log(2);                                                                                              // 33
      searchRange = Math.floor(Math.log(tableCount) / log2) * 16;                                                      // 34
      entrySelector = Math.floor(searchRange / log2);                                                                  // 35
      rangeShift = tableCount * 16 - searchRange;                                                                      // 36
      directory = new Data;                                                                                            // 37
      directory.writeInt(this.scalarType);                                                                             // 38
      directory.writeShort(tableCount);                                                                                // 39
      directory.writeShort(searchRange);                                                                               // 40
      directory.writeShort(entrySelector);                                                                             // 41
      directory.writeShort(rangeShift);                                                                                // 42
      directoryLength = tableCount * 16;                                                                               // 43
      offset = directory.pos + directoryLength;                                                                        // 44
      headOffset = null;                                                                                               // 45
      tableData = [];                                                                                                  // 46
      for (tag in tables) {                                                                                            // 47
        table = tables[tag];                                                                                           // 48
        directory.writeString(tag);                                                                                    // 49
        directory.writeInt(checksum(table));                                                                           // 50
        directory.writeInt(offset);                                                                                    // 51
        directory.writeInt(table.length);                                                                              // 52
        tableData = tableData.concat(table);                                                                           // 53
        if (tag === 'head') {                                                                                          // 54
          headOffset = offset;                                                                                         // 55
        }                                                                                                              // 56
        offset += table.length;                                                                                        // 57
        while (offset % 4) {                                                                                           // 58
          tableData.push(0);                                                                                           // 59
          offset++;                                                                                                    // 60
        }                                                                                                              // 61
      }                                                                                                                // 62
      directory.write(tableData);                                                                                      // 63
      sum = checksum(directory.data);                                                                                  // 64
      adjustment = 0xB1B0AFBA - sum;                                                                                   // 65
      directory.pos = headOffset + 8;                                                                                  // 66
      directory.writeUInt32(adjustment);                                                                               // 67
      return new Buffer(directory.data);                                                                               // 68
    };                                                                                                                 // 69
                                                                                                                       // 70
    checksum = function(data) {                                                                                        // 71
      var i, sum, tmp, _i, _ref;                                                                                       // 72
      data = __slice.call(data);                                                                                       // 73
      while (data.length % 4) {                                                                                        // 74
        data.push(0);                                                                                                  // 75
      }                                                                                                                // 76
      tmp = new Data(data);                                                                                            // 77
      sum = 0;                                                                                                         // 78
      for (i = _i = 0, _ref = data.length; _i < _ref; i = _i += 4) {                                                   // 79
        sum += tmp.readUInt32();                                                                                       // 80
      }                                                                                                                // 81
      return sum & 0xFFFFFFFF;                                                                                         // 82
    };                                                                                                                 // 83
                                                                                                                       // 84
    return Directory;                                                                                                  // 85
                                                                                                                       // 86
  })();                                                                                                                // 87
                                                                                                                       // 88
  module.exports = Directory;                                                                                          // 89
                                                                                                                       // 90
}).call(this);                                                                                                         // 91
                                                                                                                       // 92
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"../data":46,"buffer":17}],52:[function(require,module,exports){                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var CmapTable, Subset, utils,                                                                                        // 3
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
                                                                                                                       // 5
  CmapTable = require('./tables/cmap');                                                                                // 6
                                                                                                                       // 7
  utils = require('./utils');                                                                                          // 8
                                                                                                                       // 9
  Subset = (function() {                                                                                               // 10
    function Subset(font) {                                                                                            // 11
      this.font = font;                                                                                                // 12
      this.subset = {};                                                                                                // 13
      this.unicodes = {};                                                                                              // 14
      this.next = 33;                                                                                                  // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    Subset.prototype.use = function(character) {                                                                       // 18
      var i, _i, _ref;                                                                                                 // 19
      if (typeof character === 'string') {                                                                             // 20
        for (i = _i = 0, _ref = character.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {    // 21
          this.use(character.charCodeAt(i));                                                                           // 22
        }                                                                                                              // 23
        return;                                                                                                        // 24
      }                                                                                                                // 25
      if (!this.unicodes[character]) {                                                                                 // 26
        this.subset[this.next] = character;                                                                            // 27
        return this.unicodes[character] = this.next++;                                                                 // 28
      }                                                                                                                // 29
    };                                                                                                                 // 30
                                                                                                                       // 31
    Subset.prototype.encodeText = function(text) {                                                                     // 32
      var char, i, string, _i, _ref;                                                                                   // 33
      string = '';                                                                                                     // 34
      for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {           // 35
        char = this.unicodes[text.charCodeAt(i)];                                                                      // 36
        string += String.fromCharCode(char);                                                                           // 37
      }                                                                                                                // 38
      return string;                                                                                                   // 39
    };                                                                                                                 // 40
                                                                                                                       // 41
    Subset.prototype.generateCmap = function() {                                                                       // 42
      var mapping, roman, unicode, unicodeCmap, _ref;                                                                  // 43
      unicodeCmap = this.font.cmap.tables[0].codeMap;                                                                  // 44
      mapping = {};                                                                                                    // 45
      _ref = this.subset;                                                                                              // 46
      for (roman in _ref) {                                                                                            // 47
        unicode = _ref[roman];                                                                                         // 48
        mapping[roman] = unicodeCmap[unicode];                                                                         // 49
      }                                                                                                                // 50
      return mapping;                                                                                                  // 51
    };                                                                                                                 // 52
                                                                                                                       // 53
    Subset.prototype.glyphIDs = function() {                                                                           // 54
      var ret, roman, unicode, unicodeCmap, val, _ref;                                                                 // 55
      unicodeCmap = this.font.cmap.tables[0].codeMap;                                                                  // 56
      ret = [0];                                                                                                       // 57
      _ref = this.subset;                                                                                              // 58
      for (roman in _ref) {                                                                                            // 59
        unicode = _ref[roman];                                                                                         // 60
        val = unicodeCmap[unicode];                                                                                    // 61
        if ((val != null) && __indexOf.call(ret, val) < 0) {                                                           // 62
          ret.push(val);                                                                                               // 63
        }                                                                                                              // 64
      }                                                                                                                // 65
      return ret.sort();                                                                                               // 66
    };                                                                                                                 // 67
                                                                                                                       // 68
    Subset.prototype.glyphsFor = function(glyphIDs) {                                                                  // 69
      var additionalIDs, glyph, glyphs, id, _i, _len, _ref;                                                            // 70
      glyphs = {};                                                                                                     // 71
      for (_i = 0, _len = glyphIDs.length; _i < _len; _i++) {                                                          // 72
        id = glyphIDs[_i];                                                                                             // 73
        glyphs[id] = this.font.glyf.glyphFor(id);                                                                      // 74
      }                                                                                                                // 75
      additionalIDs = [];                                                                                              // 76
      for (id in glyphs) {                                                                                             // 77
        glyph = glyphs[id];                                                                                            // 78
        if (glyph != null ? glyph.compound : void 0) {                                                                 // 79
          additionalIDs.push.apply(additionalIDs, glyph.glyphIDs);                                                     // 80
        }                                                                                                              // 81
      }                                                                                                                // 82
      if (additionalIDs.length > 0) {                                                                                  // 83
        _ref = this.glyphsFor(additionalIDs);                                                                          // 84
        for (id in _ref) {                                                                                             // 85
          glyph = _ref[id];                                                                                            // 86
          glyphs[id] = glyph;                                                                                          // 87
        }                                                                                                              // 88
      }                                                                                                                // 89
      return glyphs;                                                                                                   // 90
    };                                                                                                                 // 91
                                                                                                                       // 92
    Subset.prototype.encode = function() {                                                                             // 93
      var cmap, code, glyf, glyphs, id, ids, loca, name, new2old, newIDs, nextGlyphID, old2new, oldID, oldIDs, tables, _ref, _ref1;
      cmap = CmapTable.encode(this.generateCmap(), 'unicode');                                                         // 95
      glyphs = this.glyphsFor(this.glyphIDs());                                                                        // 96
      old2new = {                                                                                                      // 97
        0: 0                                                                                                           // 98
      };                                                                                                               // 99
      _ref = cmap.charMap;                                                                                             // 100
      for (code in _ref) {                                                                                             // 101
        ids = _ref[code];                                                                                              // 102
        old2new[ids.old] = ids["new"];                                                                                 // 103
      }                                                                                                                // 104
      nextGlyphID = cmap.maxGlyphID;                                                                                   // 105
      for (oldID in glyphs) {                                                                                          // 106
        if (!(oldID in old2new)) {                                                                                     // 107
          old2new[oldID] = nextGlyphID++;                                                                              // 108
        }                                                                                                              // 109
      }                                                                                                                // 110
      new2old = utils.invert(old2new);                                                                                 // 111
      newIDs = Object.keys(new2old).sort(function(a, b) {                                                              // 112
        return a - b;                                                                                                  // 113
      });                                                                                                              // 114
      oldIDs = (function() {                                                                                           // 115
        var _i, _len, _results;                                                                                        // 116
        _results = [];                                                                                                 // 117
        for (_i = 0, _len = newIDs.length; _i < _len; _i++) {                                                          // 118
          id = newIDs[_i];                                                                                             // 119
          _results.push(new2old[id]);                                                                                  // 120
        }                                                                                                              // 121
        return _results;                                                                                               // 122
      })();                                                                                                            // 123
      glyf = this.font.glyf.encode(glyphs, oldIDs, old2new);                                                           // 124
      loca = this.font.loca.encode(glyf.offsets);                                                                      // 125
      name = this.font.name.encode();                                                                                  // 126
      this.postscriptName = name.postscriptName;                                                                       // 127
      this.cmap = {};                                                                                                  // 128
      _ref1 = cmap.charMap;                                                                                            // 129
      for (code in _ref1) {                                                                                            // 130
        ids = _ref1[code];                                                                                             // 131
        this.cmap[code] = ids.old;                                                                                     // 132
      }                                                                                                                // 133
      tables = {                                                                                                       // 134
        cmap: cmap.table,                                                                                              // 135
        glyf: glyf.table,                                                                                              // 136
        loca: loca.table,                                                                                              // 137
        hmtx: this.font.hmtx.encode(oldIDs),                                                                           // 138
        hhea: this.font.hhea.encode(oldIDs),                                                                           // 139
        maxp: this.font.maxp.encode(oldIDs),                                                                           // 140
        post: this.font.post.encode(oldIDs),                                                                           // 141
        name: name.table,                                                                                              // 142
        head: this.font.head.encode(loca)                                                                              // 143
      };                                                                                                               // 144
      if (this.font.os2.exists) {                                                                                      // 145
        tables['OS/2'] = this.font.os2.raw();                                                                          // 146
      }                                                                                                                // 147
      return this.font.directory.encode(tables);                                                                       // 148
    };                                                                                                                 // 149
                                                                                                                       // 150
    return Subset;                                                                                                     // 151
                                                                                                                       // 152
  })();                                                                                                                // 153
                                                                                                                       // 154
  module.exports = Subset;                                                                                             // 155
                                                                                                                       // 156
}).call(this);                                                                                                         // 157
                                                                                                                       // 158
},{"./tables/cmap":54,"./utils":65}],53:[function(require,module,exports){                                             //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Table;                                                                                                           // 3
                                                                                                                       // 4
  Table = (function() {                                                                                                // 5
    function Table(file) {                                                                                             // 6
      var info;                                                                                                        // 7
      this.file = file;                                                                                                // 8
      info = this.file.directory.tables[this.tag];                                                                     // 9
      this.exists = !!info;                                                                                            // 10
      if (info) {                                                                                                      // 11
        this.offset = info.offset, this.length = info.length;                                                          // 12
        this.parse(this.file.contents);                                                                                // 13
      }                                                                                                                // 14
    }                                                                                                                  // 15
                                                                                                                       // 16
    Table.prototype.parse = function() {};                                                                             // 17
                                                                                                                       // 18
    Table.prototype.encode = function() {};                                                                            // 19
                                                                                                                       // 20
    Table.prototype.raw = function() {                                                                                 // 21
      if (!this.exists) {                                                                                              // 22
        return null;                                                                                                   // 23
      }                                                                                                                // 24
      this.file.contents.pos = this.offset;                                                                            // 25
      return this.file.contents.read(this.length);                                                                     // 26
    };                                                                                                                 // 27
                                                                                                                       // 28
    return Table;                                                                                                      // 29
                                                                                                                       // 30
  })();                                                                                                                // 31
                                                                                                                       // 32
  module.exports = Table;                                                                                              // 33
                                                                                                                       // 34
}).call(this);                                                                                                         // 35
                                                                                                                       // 36
},{}],54:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var CmapEntry, CmapTable, Data, Table,                                                                               // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  CmapTable = (function(_super) {                                                                                      // 11
    __extends(CmapTable, _super);                                                                                      // 12
                                                                                                                       // 13
    function CmapTable() {                                                                                             // 14
      return CmapTable.__super__.constructor.apply(this, arguments);                                                   // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    CmapTable.prototype.tag = 'cmap';                                                                                  // 18
                                                                                                                       // 19
    CmapTable.prototype.parse = function(data) {                                                                       // 20
      var entry, i, tableCount, _i;                                                                                    // 21
      data.pos = this.offset;                                                                                          // 22
      this.version = data.readUInt16();                                                                                // 23
      tableCount = data.readUInt16();                                                                                  // 24
      this.tables = [];                                                                                                // 25
      this.unicode = null;                                                                                             // 26
      for (i = _i = 0; 0 <= tableCount ? _i < tableCount : _i > tableCount; i = 0 <= tableCount ? ++_i : --_i) {       // 27
        entry = new CmapEntry(data, this.offset);                                                                      // 28
        this.tables.push(entry);                                                                                       // 29
        if (entry.isUnicode) {                                                                                         // 30
          if (this.unicode == null) {                                                                                  // 31
            this.unicode = entry;                                                                                      // 32
          }                                                                                                            // 33
        }                                                                                                              // 34
      }                                                                                                                // 35
      return true;                                                                                                     // 36
    };                                                                                                                 // 37
                                                                                                                       // 38
    CmapTable.encode = function(charmap, encoding) {                                                                   // 39
      var result, table;                                                                                               // 40
      if (encoding == null) {                                                                                          // 41
        encoding = 'macroman';                                                                                         // 42
      }                                                                                                                // 43
      result = CmapEntry.encode(charmap, encoding);                                                                    // 44
      table = new Data;                                                                                                // 45
      table.writeUInt16(0);                                                                                            // 46
      table.writeUInt16(1);                                                                                            // 47
      result.table = table.data.concat(result.subtable);                                                               // 48
      return result;                                                                                                   // 49
    };                                                                                                                 // 50
                                                                                                                       // 51
    return CmapTable;                                                                                                  // 52
                                                                                                                       // 53
  })(Table);                                                                                                           // 54
                                                                                                                       // 55
  CmapEntry = (function() {                                                                                            // 56
    function CmapEntry(data, offset) {                                                                                 // 57
      var code, count, endCode, glyphId, glyphIds, i, idDelta, idRangeOffset, index, saveOffset, segCount, segCountX2, start, startCode, tail, _i, _j, _k, _len;
      this.platformID = data.readUInt16();                                                                             // 59
      this.encodingID = data.readShort();                                                                              // 60
      this.offset = offset + data.readInt();                                                                           // 61
      saveOffset = data.pos;                                                                                           // 62
      data.pos = this.offset;                                                                                          // 63
      this.format = data.readUInt16();                                                                                 // 64
      this.length = data.readUInt16();                                                                                 // 65
      this.language = data.readUInt16();                                                                               // 66
      this.isUnicode = (this.platformID === 3 && this.encodingID === 1 && this.format === 4) || this.platformID === 0 && this.format === 4;
      this.codeMap = {};                                                                                               // 68
      switch (this.format) {                                                                                           // 69
        case 0:                                                                                                        // 70
          for (i = _i = 0; _i < 256; i = ++_i) {                                                                       // 71
            this.codeMap[i] = data.readByte();                                                                         // 72
          }                                                                                                            // 73
          break;                                                                                                       // 74
        case 4:                                                                                                        // 75
          segCountX2 = data.readUInt16();                                                                              // 76
          segCount = segCountX2 / 2;                                                                                   // 77
          data.pos += 6;                                                                                               // 78
          endCode = (function() {                                                                                      // 79
            var _j, _results;                                                                                          // 80
            _results = [];                                                                                             // 81
            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {         // 82
              _results.push(data.readUInt16());                                                                        // 83
            }                                                                                                          // 84
            return _results;                                                                                           // 85
          })();                                                                                                        // 86
          data.pos += 2;                                                                                               // 87
          startCode = (function() {                                                                                    // 88
            var _j, _results;                                                                                          // 89
            _results = [];                                                                                             // 90
            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {         // 91
              _results.push(data.readUInt16());                                                                        // 92
            }                                                                                                          // 93
            return _results;                                                                                           // 94
          })();                                                                                                        // 95
          idDelta = (function() {                                                                                      // 96
            var _j, _results;                                                                                          // 97
            _results = [];                                                                                             // 98
            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {         // 99
              _results.push(data.readUInt16());                                                                        // 100
            }                                                                                                          // 101
            return _results;                                                                                           // 102
          })();                                                                                                        // 103
          idRangeOffset = (function() {                                                                                // 104
            var _j, _results;                                                                                          // 105
            _results = [];                                                                                             // 106
            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {         // 107
              _results.push(data.readUInt16());                                                                        // 108
            }                                                                                                          // 109
            return _results;                                                                                           // 110
          })();                                                                                                        // 111
          count = (this.length - data.pos + this.offset) / 2;                                                          // 112
          glyphIds = (function() {                                                                                     // 113
            var _j, _results;                                                                                          // 114
            _results = [];                                                                                             // 115
            for (i = _j = 0; 0 <= count ? _j < count : _j > count; i = 0 <= count ? ++_j : --_j) {                     // 116
              _results.push(data.readUInt16());                                                                        // 117
            }                                                                                                          // 118
            return _results;                                                                                           // 119
          })();                                                                                                        // 120
          for (i = _j = 0, _len = endCode.length; _j < _len; i = ++_j) {                                               // 121
            tail = endCode[i];                                                                                         // 122
            start = startCode[i];                                                                                      // 123
            for (code = _k = start; start <= tail ? _k <= tail : _k >= tail; code = start <= tail ? ++_k : --_k) {     // 124
              if (idRangeOffset[i] === 0) {                                                                            // 125
                glyphId = code + idDelta[i];                                                                           // 126
              } else {                                                                                                 // 127
                index = idRangeOffset[i] / 2 + (code - start) - (segCount - i);                                        // 128
                glyphId = glyphIds[index] || 0;                                                                        // 129
                if (glyphId !== 0) {                                                                                   // 130
                  glyphId += idDelta[i];                                                                               // 131
                }                                                                                                      // 132
              }                                                                                                        // 133
              this.codeMap[code] = glyphId & 0xFFFF;                                                                   // 134
            }                                                                                                          // 135
          }                                                                                                            // 136
      }                                                                                                                // 137
      data.pos = saveOffset;                                                                                           // 138
    }                                                                                                                  // 139
                                                                                                                       // 140
    CmapEntry.encode = function(charmap, encoding) {                                                                   // 141
      var charMap, code, codeMap, codes, delta, deltas, diff, endCode, endCodes, entrySelector, glyphIDs, i, id, indexes, last, map, nextID, offset, old, rangeOffsets, rangeShift, result, searchRange, segCount, segCountX2, startCode, startCodes, startGlyph, subtable, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _name, _o, _p, _q;
      subtable = new Data;                                                                                             // 143
      codes = Object.keys(charmap).sort(function(a, b) {                                                               // 144
        return a - b;                                                                                                  // 145
      });                                                                                                              // 146
      switch (encoding) {                                                                                              // 147
        case 'macroman':                                                                                               // 148
          id = 0;                                                                                                      // 149
          indexes = (function() {                                                                                      // 150
            var _i, _results;                                                                                          // 151
            _results = [];                                                                                             // 152
            for (i = _i = 0; _i < 256; i = ++_i) {                                                                     // 153
              _results.push(0);                                                                                        // 154
            }                                                                                                          // 155
            return _results;                                                                                           // 156
          })();                                                                                                        // 157
          map = {                                                                                                      // 158
            0: 0                                                                                                       // 159
          };                                                                                                           // 160
          codeMap = {};                                                                                                // 161
          for (_i = 0, _len = codes.length; _i < _len; _i++) {                                                         // 162
            code = codes[_i];                                                                                          // 163
            if (map[_name = charmap[code]] == null) {                                                                  // 164
              map[_name] = ++id;                                                                                       // 165
            }                                                                                                          // 166
            codeMap[code] = {                                                                                          // 167
              old: charmap[code],                                                                                      // 168
              "new": map[charmap[code]]                                                                                // 169
            };                                                                                                         // 170
            indexes[code] = map[charmap[code]];                                                                        // 171
          }                                                                                                            // 172
          subtable.writeUInt16(1);                                                                                     // 173
          subtable.writeUInt16(0);                                                                                     // 174
          subtable.writeUInt32(12);                                                                                    // 175
          subtable.writeUInt16(0);                                                                                     // 176
          subtable.writeUInt16(262);                                                                                   // 177
          subtable.writeUInt16(0);                                                                                     // 178
          subtable.write(indexes);                                                                                     // 179
          return result = {                                                                                            // 180
            charMap: codeMap,                                                                                          // 181
            subtable: subtable.data,                                                                                   // 182
            maxGlyphID: id + 1                                                                                         // 183
          };                                                                                                           // 184
        case 'unicode':                                                                                                // 185
          startCodes = [];                                                                                             // 186
          endCodes = [];                                                                                               // 187
          nextID = 0;                                                                                                  // 188
          map = {};                                                                                                    // 189
          charMap = {};                                                                                                // 190
          last = diff = null;                                                                                          // 191
          for (_j = 0, _len1 = codes.length; _j < _len1; _j++) {                                                       // 192
            code = codes[_j];                                                                                          // 193
            old = charmap[code];                                                                                       // 194
            if (map[old] == null) {                                                                                    // 195
              map[old] = ++nextID;                                                                                     // 196
            }                                                                                                          // 197
            charMap[code] = {                                                                                          // 198
              old: old,                                                                                                // 199
              "new": map[old]                                                                                          // 200
            };                                                                                                         // 201
            delta = map[old] - code;                                                                                   // 202
            if ((last == null) || delta !== diff) {                                                                    // 203
              if (last) {                                                                                              // 204
                endCodes.push(last);                                                                                   // 205
              }                                                                                                        // 206
              startCodes.push(code);                                                                                   // 207
              diff = delta;                                                                                            // 208
            }                                                                                                          // 209
            last = code;                                                                                               // 210
          }                                                                                                            // 211
          if (last) {                                                                                                  // 212
            endCodes.push(last);                                                                                       // 213
          }                                                                                                            // 214
          endCodes.push(0xFFFF);                                                                                       // 215
          startCodes.push(0xFFFF);                                                                                     // 216
          segCount = startCodes.length;                                                                                // 217
          segCountX2 = segCount * 2;                                                                                   // 218
          searchRange = 2 * Math.pow(Math.log(segCount) / Math.LN2, 2);                                                // 219
          entrySelector = Math.log(searchRange / 2) / Math.LN2;                                                        // 220
          rangeShift = 2 * segCount - searchRange;                                                                     // 221
          deltas = [];                                                                                                 // 222
          rangeOffsets = [];                                                                                           // 223
          glyphIDs = [];                                                                                               // 224
          for (i = _k = 0, _len2 = startCodes.length; _k < _len2; i = ++_k) {                                          // 225
            startCode = startCodes[i];                                                                                 // 226
            endCode = endCodes[i];                                                                                     // 227
            if (startCode === 0xFFFF) {                                                                                // 228
              deltas.push(0);                                                                                          // 229
              rangeOffsets.push(0);                                                                                    // 230
              break;                                                                                                   // 231
            }                                                                                                          // 232
            startGlyph = charMap[startCode]["new"];                                                                    // 233
            if (startCode - startGlyph >= 0x8000) {                                                                    // 234
              deltas.push(0);                                                                                          // 235
              rangeOffsets.push(2 * (glyphIDs.length + segCount - i));                                                 // 236
              for (code = _l = startCode; startCode <= endCode ? _l <= endCode : _l >= endCode; code = startCode <= endCode ? ++_l : --_l) {
                glyphIDs.push(charMap[code]["new"]);                                                                   // 238
              }                                                                                                        // 239
            } else {                                                                                                   // 240
              deltas.push(startGlyph - startCode);                                                                     // 241
              rangeOffsets.push(0);                                                                                    // 242
            }                                                                                                          // 243
          }                                                                                                            // 244
          subtable.writeUInt16(3);                                                                                     // 245
          subtable.writeUInt16(1);                                                                                     // 246
          subtable.writeUInt32(12);                                                                                    // 247
          subtable.writeUInt16(4);                                                                                     // 248
          subtable.writeUInt16(16 + segCount * 8 + glyphIDs.length * 2);                                               // 249
          subtable.writeUInt16(0);                                                                                     // 250
          subtable.writeUInt16(segCountX2);                                                                            // 251
          subtable.writeUInt16(searchRange);                                                                           // 252
          subtable.writeUInt16(entrySelector);                                                                         // 253
          subtable.writeUInt16(rangeShift);                                                                            // 254
          for (_m = 0, _len3 = endCodes.length; _m < _len3; _m++) {                                                    // 255
            code = endCodes[_m];                                                                                       // 256
            subtable.writeUInt16(code);                                                                                // 257
          }                                                                                                            // 258
          subtable.writeUInt16(0);                                                                                     // 259
          for (_n = 0, _len4 = startCodes.length; _n < _len4; _n++) {                                                  // 260
            code = startCodes[_n];                                                                                     // 261
            subtable.writeUInt16(code);                                                                                // 262
          }                                                                                                            // 263
          for (_o = 0, _len5 = deltas.length; _o < _len5; _o++) {                                                      // 264
            delta = deltas[_o];                                                                                        // 265
            subtable.writeUInt16(delta);                                                                               // 266
          }                                                                                                            // 267
          for (_p = 0, _len6 = rangeOffsets.length; _p < _len6; _p++) {                                                // 268
            offset = rangeOffsets[_p];                                                                                 // 269
            subtable.writeUInt16(offset);                                                                              // 270
          }                                                                                                            // 271
          for (_q = 0, _len7 = glyphIDs.length; _q < _len7; _q++) {                                                    // 272
            id = glyphIDs[_q];                                                                                         // 273
            subtable.writeUInt16(id);                                                                                  // 274
          }                                                                                                            // 275
          return result = {                                                                                            // 276
            charMap: charMap,                                                                                          // 277
            subtable: subtable.data,                                                                                   // 278
            maxGlyphID: nextID + 1                                                                                     // 279
          };                                                                                                           // 280
      }                                                                                                                // 281
    };                                                                                                                 // 282
                                                                                                                       // 283
    return CmapEntry;                                                                                                  // 284
                                                                                                                       // 285
  })();                                                                                                                // 286
                                                                                                                       // 287
  module.exports = CmapTable;                                                                                          // 288
                                                                                                                       // 289
}).call(this);                                                                                                         // 290
                                                                                                                       // 291
},{"../../data":46,"../table":53}],55:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var CompoundGlyph, Data, GlyfTable, SimpleGlyph, Table,                                                              // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;                                                                                                // 6
                                                                                                                       // 7
  Table = require('../table');                                                                                         // 8
                                                                                                                       // 9
  Data = require('../../data');                                                                                        // 10
                                                                                                                       // 11
  GlyfTable = (function(_super) {                                                                                      // 12
    __extends(GlyfTable, _super);                                                                                      // 13
                                                                                                                       // 14
    function GlyfTable() {                                                                                             // 15
      return GlyfTable.__super__.constructor.apply(this, arguments);                                                   // 16
    }                                                                                                                  // 17
                                                                                                                       // 18
    GlyfTable.prototype.tag = 'glyf';                                                                                  // 19
                                                                                                                       // 20
    GlyfTable.prototype.parse = function(data) {                                                                       // 21
      return this.cache = {};                                                                                          // 22
    };                                                                                                                 // 23
                                                                                                                       // 24
    GlyfTable.prototype.glyphFor = function(id) {                                                                      // 25
      var data, index, length, loca, numberOfContours, raw, xMax, xMin, yMax, yMin;                                    // 26
      if (id in this.cache) {                                                                                          // 27
        return this.cache[id];                                                                                         // 28
      }                                                                                                                // 29
      loca = this.file.loca;                                                                                           // 30
      data = this.file.contents;                                                                                       // 31
      index = loca.indexOf(id);                                                                                        // 32
      length = loca.lengthOf(id);                                                                                      // 33
      if (length === 0) {                                                                                              // 34
        return this.cache[id] = null;                                                                                  // 35
      }                                                                                                                // 36
      data.pos = this.offset + index;                                                                                  // 37
      raw = new Data(data.read(length));                                                                               // 38
      numberOfContours = raw.readShort();                                                                              // 39
      xMin = raw.readShort();                                                                                          // 40
      yMin = raw.readShort();                                                                                          // 41
      xMax = raw.readShort();                                                                                          // 42
      yMax = raw.readShort();                                                                                          // 43
      if (numberOfContours === -1) {                                                                                   // 44
        this.cache[id] = new CompoundGlyph(raw, xMin, yMin, xMax, yMax);                                               // 45
      } else {                                                                                                         // 46
        this.cache[id] = new SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax);                               // 47
      }                                                                                                                // 48
      return this.cache[id];                                                                                           // 49
    };                                                                                                                 // 50
                                                                                                                       // 51
    GlyfTable.prototype.encode = function(glyphs, mapping, old2new) {                                                  // 52
      var glyph, id, offsets, table, _i, _len;                                                                         // 53
      table = [];                                                                                                      // 54
      offsets = [];                                                                                                    // 55
      for (_i = 0, _len = mapping.length; _i < _len; _i++) {                                                           // 56
        id = mapping[_i];                                                                                              // 57
        glyph = glyphs[id];                                                                                            // 58
        offsets.push(table.length);                                                                                    // 59
        if (glyph) {                                                                                                   // 60
          table = table.concat(glyph.encode(old2new));                                                                 // 61
        }                                                                                                              // 62
      }                                                                                                                // 63
      offsets.push(table.length);                                                                                      // 64
      return {                                                                                                         // 65
        table: table,                                                                                                  // 66
        offsets: offsets                                                                                               // 67
      };                                                                                                               // 68
    };                                                                                                                 // 69
                                                                                                                       // 70
    return GlyfTable;                                                                                                  // 71
                                                                                                                       // 72
  })(Table);                                                                                                           // 73
                                                                                                                       // 74
  SimpleGlyph = (function() {                                                                                          // 75
    function SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax) {                                              // 76
      this.raw = raw;                                                                                                  // 77
      this.numberOfContours = numberOfContours;                                                                        // 78
      this.xMin = xMin;                                                                                                // 79
      this.yMin = yMin;                                                                                                // 80
      this.xMax = xMax;                                                                                                // 81
      this.yMax = yMax;                                                                                                // 82
      this.compound = false;                                                                                           // 83
    }                                                                                                                  // 84
                                                                                                                       // 85
    SimpleGlyph.prototype.encode = function() {                                                                        // 86
      return this.raw.data;                                                                                            // 87
    };                                                                                                                 // 88
                                                                                                                       // 89
    return SimpleGlyph;                                                                                                // 90
                                                                                                                       // 91
  })();                                                                                                                // 92
                                                                                                                       // 93
  CompoundGlyph = (function() {                                                                                        // 94
    var ARG_1_AND_2_ARE_WORDS, MORE_COMPONENTS, WE_HAVE_AN_X_AND_Y_SCALE, WE_HAVE_A_SCALE, WE_HAVE_A_TWO_BY_TWO, WE_HAVE_INSTRUCTIONS;
                                                                                                                       // 96
    ARG_1_AND_2_ARE_WORDS = 0x0001;                                                                                    // 97
                                                                                                                       // 98
    WE_HAVE_A_SCALE = 0x0008;                                                                                          // 99
                                                                                                                       // 100
    MORE_COMPONENTS = 0x0020;                                                                                          // 101
                                                                                                                       // 102
    WE_HAVE_AN_X_AND_Y_SCALE = 0x0040;                                                                                 // 103
                                                                                                                       // 104
    WE_HAVE_A_TWO_BY_TWO = 0x0080;                                                                                     // 105
                                                                                                                       // 106
    WE_HAVE_INSTRUCTIONS = 0x0100;                                                                                     // 107
                                                                                                                       // 108
    function CompoundGlyph(raw, xMin, yMin, xMax, yMax) {                                                              // 109
      var data, flags;                                                                                                 // 110
      this.raw = raw;                                                                                                  // 111
      this.xMin = xMin;                                                                                                // 112
      this.yMin = yMin;                                                                                                // 113
      this.xMax = xMax;                                                                                                // 114
      this.yMax = yMax;                                                                                                // 115
      this.compound = true;                                                                                            // 116
      this.glyphIDs = [];                                                                                              // 117
      this.glyphOffsets = [];                                                                                          // 118
      data = this.raw;                                                                                                 // 119
      while (true) {                                                                                                   // 120
        flags = data.readShort();                                                                                      // 121
        this.glyphOffsets.push(data.pos);                                                                              // 122
        this.glyphIDs.push(data.readShort());                                                                          // 123
        if (!(flags & MORE_COMPONENTS)) {                                                                              // 124
          break;                                                                                                       // 125
        }                                                                                                              // 126
        if (flags & ARG_1_AND_2_ARE_WORDS) {                                                                           // 127
          data.pos += 4;                                                                                               // 128
        } else {                                                                                                       // 129
          data.pos += 2;                                                                                               // 130
        }                                                                                                              // 131
        if (flags & WE_HAVE_A_TWO_BY_TWO) {                                                                            // 132
          data.pos += 8;                                                                                               // 133
        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {                                                                 // 134
          data.pos += 4;                                                                                               // 135
        } else if (flags & WE_HAVE_A_SCALE) {                                                                          // 136
          data.pos += 2;                                                                                               // 137
        }                                                                                                              // 138
      }                                                                                                                // 139
    }                                                                                                                  // 140
                                                                                                                       // 141
    CompoundGlyph.prototype.encode = function(mapping) {                                                               // 142
      var i, id, result, _i, _len, _ref;                                                                               // 143
      result = new Data(__slice.call(this.raw.data));                                                                  // 144
      _ref = this.glyphIDs;                                                                                            // 145
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {                                                      // 146
        id = _ref[i];                                                                                                  // 147
        result.pos = this.glyphOffsets[i];                                                                             // 148
        result.writeShort(mapping[id]);                                                                                // 149
      }                                                                                                                // 150
      return result.data;                                                                                              // 151
    };                                                                                                                 // 152
                                                                                                                       // 153
    return CompoundGlyph;                                                                                              // 154
                                                                                                                       // 155
  })();                                                                                                                // 156
                                                                                                                       // 157
  module.exports = GlyfTable;                                                                                          // 158
                                                                                                                       // 159
}).call(this);                                                                                                         // 160
                                                                                                                       // 161
},{"../../data":46,"../table":53}],56:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, HeadTable, Table,                                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  HeadTable = (function(_super) {                                                                                      // 11
    __extends(HeadTable, _super);                                                                                      // 12
                                                                                                                       // 13
    function HeadTable() {                                                                                             // 14
      return HeadTable.__super__.constructor.apply(this, arguments);                                                   // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    HeadTable.prototype.tag = 'head';                                                                                  // 18
                                                                                                                       // 19
    HeadTable.prototype.parse = function(data) {                                                                       // 20
      data.pos = this.offset;                                                                                          // 21
      this.version = data.readInt();                                                                                   // 22
      this.revision = data.readInt();                                                                                  // 23
      this.checkSumAdjustment = data.readInt();                                                                        // 24
      this.magicNumber = data.readInt();                                                                               // 25
      this.flags = data.readShort();                                                                                   // 26
      this.unitsPerEm = data.readShort();                                                                              // 27
      this.created = data.readLongLong();                                                                              // 28
      this.modified = data.readLongLong();                                                                             // 29
      this.xMin = data.readShort();                                                                                    // 30
      this.yMin = data.readShort();                                                                                    // 31
      this.xMax = data.readShort();                                                                                    // 32
      this.yMax = data.readShort();                                                                                    // 33
      this.macStyle = data.readShort();                                                                                // 34
      this.lowestRecPPEM = data.readShort();                                                                           // 35
      this.fontDirectionHint = data.readShort();                                                                       // 36
      this.indexToLocFormat = data.readShort();                                                                        // 37
      return this.glyphDataFormat = data.readShort();                                                                  // 38
    };                                                                                                                 // 39
                                                                                                                       // 40
    HeadTable.prototype.encode = function(loca) {                                                                      // 41
      var table;                                                                                                       // 42
      table = new Data;                                                                                                // 43
      table.writeInt(this.version);                                                                                    // 44
      table.writeInt(this.revision);                                                                                   // 45
      table.writeInt(this.checkSumAdjustment);                                                                         // 46
      table.writeInt(this.magicNumber);                                                                                // 47
      table.writeShort(this.flags);                                                                                    // 48
      table.writeShort(this.unitsPerEm);                                                                               // 49
      table.writeLongLong(this.created);                                                                               // 50
      table.writeLongLong(this.modified);                                                                              // 51
      table.writeShort(this.xMin);                                                                                     // 52
      table.writeShort(this.yMin);                                                                                     // 53
      table.writeShort(this.xMax);                                                                                     // 54
      table.writeShort(this.yMax);                                                                                     // 55
      table.writeShort(this.macStyle);                                                                                 // 56
      table.writeShort(this.lowestRecPPEM);                                                                            // 57
      table.writeShort(this.fontDirectionHint);                                                                        // 58
      table.writeShort(loca.type);                                                                                     // 59
      table.writeShort(this.glyphDataFormat);                                                                          // 60
      return table.data;                                                                                               // 61
    };                                                                                                                 // 62
                                                                                                                       // 63
    return HeadTable;                                                                                                  // 64
                                                                                                                       // 65
  })(Table);                                                                                                           // 66
                                                                                                                       // 67
  module.exports = HeadTable;                                                                                          // 68
                                                                                                                       // 69
}).call(this);                                                                                                         // 70
                                                                                                                       // 71
},{"../../data":46,"../table":53}],57:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, HheaTable, Table,                                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  HheaTable = (function(_super) {                                                                                      // 11
    __extends(HheaTable, _super);                                                                                      // 12
                                                                                                                       // 13
    function HheaTable() {                                                                                             // 14
      return HheaTable.__super__.constructor.apply(this, arguments);                                                   // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    HheaTable.prototype.tag = 'hhea';                                                                                  // 18
                                                                                                                       // 19
    HheaTable.prototype.parse = function(data) {                                                                       // 20
      data.pos = this.offset;                                                                                          // 21
      this.version = data.readInt();                                                                                   // 22
      this.ascender = data.readShort();                                                                                // 23
      this.decender = data.readShort();                                                                                // 24
      this.lineGap = data.readShort();                                                                                 // 25
      this.advanceWidthMax = data.readShort();                                                                         // 26
      this.minLeftSideBearing = data.readShort();                                                                      // 27
      this.minRightSideBearing = data.readShort();                                                                     // 28
      this.xMaxExtent = data.readShort();                                                                              // 29
      this.caretSlopeRise = data.readShort();                                                                          // 30
      this.caretSlopeRun = data.readShort();                                                                           // 31
      this.caretOffset = data.readShort();                                                                             // 32
      data.pos += 4 * 2;                                                                                               // 33
      this.metricDataFormat = data.readShort();                                                                        // 34
      return this.numberOfMetrics = data.readUInt16();                                                                 // 35
    };                                                                                                                 // 36
                                                                                                                       // 37
    HheaTable.prototype.encode = function(ids) {                                                                       // 38
      var i, table, _i, _ref;                                                                                          // 39
      table = new Data;                                                                                                // 40
      table.writeInt(this.version);                                                                                    // 41
      table.writeShort(this.ascender);                                                                                 // 42
      table.writeShort(this.decender);                                                                                 // 43
      table.writeShort(this.lineGap);                                                                                  // 44
      table.writeShort(this.advanceWidthMax);                                                                          // 45
      table.writeShort(this.minLeftSideBearing);                                                                       // 46
      table.writeShort(this.minRightSideBearing);                                                                      // 47
      table.writeShort(this.xMaxExtent);                                                                               // 48
      table.writeShort(this.caretSlopeRise);                                                                           // 49
      table.writeShort(this.caretSlopeRun);                                                                            // 50
      table.writeShort(this.caretOffset);                                                                              // 51
      for (i = _i = 0, _ref = 4 * 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {                 // 52
        table.writeByte(0);                                                                                            // 53
      }                                                                                                                // 54
      table.writeShort(this.metricDataFormat);                                                                         // 55
      table.writeUInt16(ids.length);                                                                                   // 56
      return table.data;                                                                                               // 57
    };                                                                                                                 // 58
                                                                                                                       // 59
    return HheaTable;                                                                                                  // 60
                                                                                                                       // 61
  })(Table);                                                                                                           // 62
                                                                                                                       // 63
  module.exports = HheaTable;                                                                                          // 64
                                                                                                                       // 65
}).call(this);                                                                                                         // 66
                                                                                                                       // 67
},{"../../data":46,"../table":53}],58:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, HmtxTable, Table,                                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  HmtxTable = (function(_super) {                                                                                      // 11
    __extends(HmtxTable, _super);                                                                                      // 12
                                                                                                                       // 13
    function HmtxTable() {                                                                                             // 14
      return HmtxTable.__super__.constructor.apply(this, arguments);                                                   // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    HmtxTable.prototype.tag = 'hmtx';                                                                                  // 18
                                                                                                                       // 19
    HmtxTable.prototype.parse = function(data) {                                                                       // 20
      var i, last, lsbCount, m, _i, _j, _ref, _results;                                                                // 21
      data.pos = this.offset;                                                                                          // 22
      this.metrics = [];                                                                                               // 23
      for (i = _i = 0, _ref = this.file.hhea.numberOfMetrics; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.metrics.push({                                                                                            // 25
          advance: data.readUInt16(),                                                                                  // 26
          lsb: data.readInt16()                                                                                        // 27
        });                                                                                                            // 28
      }                                                                                                                // 29
      lsbCount = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics;                                            // 30
      this.leftSideBearings = (function() {                                                                            // 31
        var _j, _results;                                                                                              // 32
        _results = [];                                                                                                 // 33
        for (i = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i = 0 <= lsbCount ? ++_j : --_j) {             // 34
          _results.push(data.readInt16());                                                                             // 35
        }                                                                                                              // 36
        return _results;                                                                                               // 37
      })();                                                                                                            // 38
      this.widths = (function() {                                                                                      // 39
        var _j, _len, _ref1, _results;                                                                                 // 40
        _ref1 = this.metrics;                                                                                          // 41
        _results = [];                                                                                                 // 42
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {                                                           // 43
          m = _ref1[_j];                                                                                               // 44
          _results.push(m.advance);                                                                                    // 45
        }                                                                                                              // 46
        return _results;                                                                                               // 47
      }).call(this);                                                                                                   // 48
      last = this.widths[this.widths.length - 1];                                                                      // 49
      _results = [];                                                                                                   // 50
      for (i = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i = 0 <= lsbCount ? ++_j : --_j) {               // 51
        _results.push(this.widths.push(last));                                                                         // 52
      }                                                                                                                // 53
      return _results;                                                                                                 // 54
    };                                                                                                                 // 55
                                                                                                                       // 56
    HmtxTable.prototype.forGlyph = function(id) {                                                                      // 57
      var metrics;                                                                                                     // 58
      if (id in this.metrics) {                                                                                        // 59
        return this.metrics[id];                                                                                       // 60
      }                                                                                                                // 61
      return metrics = {                                                                                               // 62
        advance: this.metrics[this.metrics.length - 1].advance,                                                        // 63
        lsb: this.leftSideBearings[id - this.metrics.length]                                                           // 64
      };                                                                                                               // 65
    };                                                                                                                 // 66
                                                                                                                       // 67
    HmtxTable.prototype.encode = function(mapping) {                                                                   // 68
      var id, metric, table, _i, _len;                                                                                 // 69
      table = new Data;                                                                                                // 70
      for (_i = 0, _len = mapping.length; _i < _len; _i++) {                                                           // 71
        id = mapping[_i];                                                                                              // 72
        metric = this.forGlyph(id);                                                                                    // 73
        table.writeUInt16(metric.advance);                                                                             // 74
        table.writeUInt16(metric.lsb);                                                                                 // 75
      }                                                                                                                // 76
      return table.data;                                                                                               // 77
    };                                                                                                                 // 78
                                                                                                                       // 79
    return HmtxTable;                                                                                                  // 80
                                                                                                                       // 81
  })(Table);                                                                                                           // 82
                                                                                                                       // 83
  module.exports = HmtxTable;                                                                                          // 84
                                                                                                                       // 85
}).call(this);                                                                                                         // 86
                                                                                                                       // 87
},{"../../data":46,"../table":53}],59:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, LocaTable, Table,                                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  LocaTable = (function(_super) {                                                                                      // 11
    __extends(LocaTable, _super);                                                                                      // 12
                                                                                                                       // 13
    function LocaTable() {                                                                                             // 14
      return LocaTable.__super__.constructor.apply(this, arguments);                                                   // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    LocaTable.prototype.tag = 'loca';                                                                                  // 18
                                                                                                                       // 19
    LocaTable.prototype.parse = function(data) {                                                                       // 20
      var format, i;                                                                                                   // 21
      data.pos = this.offset;                                                                                          // 22
      format = this.file.head.indexToLocFormat;                                                                        // 23
      if (format === 0) {                                                                                              // 24
        return this.offsets = (function() {                                                                            // 25
          var _i, _ref, _results;                                                                                      // 26
          _results = [];                                                                                               // 27
          for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 2) {                                               // 28
            _results.push(data.readUInt16() * 2);                                                                      // 29
          }                                                                                                            // 30
          return _results;                                                                                             // 31
        }).call(this);                                                                                                 // 32
      } else {                                                                                                         // 33
        return this.offsets = (function() {                                                                            // 34
          var _i, _ref, _results;                                                                                      // 35
          _results = [];                                                                                               // 36
          for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 4) {                                               // 37
            _results.push(data.readUInt32());                                                                          // 38
          }                                                                                                            // 39
          return _results;                                                                                             // 40
        }).call(this);                                                                                                 // 41
      }                                                                                                                // 42
    };                                                                                                                 // 43
                                                                                                                       // 44
    LocaTable.prototype.indexOf = function(id) {                                                                       // 45
      return this.offsets[id];                                                                                         // 46
    };                                                                                                                 // 47
                                                                                                                       // 48
    LocaTable.prototype.lengthOf = function(id) {                                                                      // 49
      return this.offsets[id + 1] - this.offsets[id];                                                                  // 50
    };                                                                                                                 // 51
                                                                                                                       // 52
    LocaTable.prototype.encode = function(offsets) {                                                                   // 53
      var o, offset, ret, table, _i, _j, _k, _len, _len1, _len2, _ref;                                                 // 54
      table = new Data;                                                                                                // 55
      for (_i = 0, _len = offsets.length; _i < _len; _i++) {                                                           // 56
        offset = offsets[_i];                                                                                          // 57
        if (!(offset > 0xFFFF)) {                                                                                      // 58
          continue;                                                                                                    // 59
        }                                                                                                              // 60
        _ref = this.offsets;                                                                                           // 61
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {                                                          // 62
          o = _ref[_j];                                                                                                // 63
          table.writeUInt32(o);                                                                                        // 64
        }                                                                                                              // 65
        return ret = {                                                                                                 // 66
          format: 1,                                                                                                   // 67
          table: table.data                                                                                            // 68
        };                                                                                                             // 69
      }                                                                                                                // 70
      for (_k = 0, _len2 = offsets.length; _k < _len2; _k++) {                                                         // 71
        o = offsets[_k];                                                                                               // 72
        table.writeUInt16(o / 2);                                                                                      // 73
      }                                                                                                                // 74
      return ret = {                                                                                                   // 75
        format: 0,                                                                                                     // 76
        table: table.data                                                                                              // 77
      };                                                                                                               // 78
    };                                                                                                                 // 79
                                                                                                                       // 80
    return LocaTable;                                                                                                  // 81
                                                                                                                       // 82
  })(Table);                                                                                                           // 83
                                                                                                                       // 84
  module.exports = LocaTable;                                                                                          // 85
                                                                                                                       // 86
}).call(this);                                                                                                         // 87
                                                                                                                       // 88
},{"../../data":46,"../table":53}],60:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, MaxpTable, Table,                                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  MaxpTable = (function(_super) {                                                                                      // 11
    __extends(MaxpTable, _super);                                                                                      // 12
                                                                                                                       // 13
    function MaxpTable() {                                                                                             // 14
      return MaxpTable.__super__.constructor.apply(this, arguments);                                                   // 15
    }                                                                                                                  // 16
                                                                                                                       // 17
    MaxpTable.prototype.tag = 'maxp';                                                                                  // 18
                                                                                                                       // 19
    MaxpTable.prototype.parse = function(data) {                                                                       // 20
      data.pos = this.offset;                                                                                          // 21
      this.version = data.readInt();                                                                                   // 22
      this.numGlyphs = data.readUInt16();                                                                              // 23
      this.maxPoints = data.readUInt16();                                                                              // 24
      this.maxContours = data.readUInt16();                                                                            // 25
      this.maxCompositePoints = data.readUInt16();                                                                     // 26
      this.maxComponentContours = data.readUInt16();                                                                   // 27
      this.maxZones = data.readUInt16();                                                                               // 28
      this.maxTwilightPoints = data.readUInt16();                                                                      // 29
      this.maxStorage = data.readUInt16();                                                                             // 30
      this.maxFunctionDefs = data.readUInt16();                                                                        // 31
      this.maxInstructionDefs = data.readUInt16();                                                                     // 32
      this.maxStackElements = data.readUInt16();                                                                       // 33
      this.maxSizeOfInstructions = data.readUInt16();                                                                  // 34
      this.maxComponentElements = data.readUInt16();                                                                   // 35
      return this.maxComponentDepth = data.readUInt16();                                                               // 36
    };                                                                                                                 // 37
                                                                                                                       // 38
    MaxpTable.prototype.encode = function(ids) {                                                                       // 39
      var table;                                                                                                       // 40
      table = new Data;                                                                                                // 41
      table.writeInt(this.version);                                                                                    // 42
      table.writeUInt16(ids.length);                                                                                   // 43
      table.writeUInt16(this.maxPoints);                                                                               // 44
      table.writeUInt16(this.maxContours);                                                                             // 45
      table.writeUInt16(this.maxCompositePoints);                                                                      // 46
      table.writeUInt16(this.maxComponentContours);                                                                    // 47
      table.writeUInt16(this.maxZones);                                                                                // 48
      table.writeUInt16(this.maxTwilightPoints);                                                                       // 49
      table.writeUInt16(this.maxStorage);                                                                              // 50
      table.writeUInt16(this.maxFunctionDefs);                                                                         // 51
      table.writeUInt16(this.maxInstructionDefs);                                                                      // 52
      table.writeUInt16(this.maxStackElements);                                                                        // 53
      table.writeUInt16(this.maxSizeOfInstructions);                                                                   // 54
      table.writeUInt16(this.maxComponentElements);                                                                    // 55
      table.writeUInt16(this.maxComponentDepth);                                                                       // 56
      return table.data;                                                                                               // 57
    };                                                                                                                 // 58
                                                                                                                       // 59
    return MaxpTable;                                                                                                  // 60
                                                                                                                       // 61
  })(Table);                                                                                                           // 62
                                                                                                                       // 63
  module.exports = MaxpTable;                                                                                          // 64
                                                                                                                       // 65
}).call(this);                                                                                                         // 66
                                                                                                                       // 67
},{"../../data":46,"../table":53}],61:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, NameEntry, NameTable, Table, utils,                                                                        // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  utils = require('../utils');                                                                                         // 11
                                                                                                                       // 12
  NameTable = (function(_super) {                                                                                      // 13
    var subsetTag;                                                                                                     // 14
                                                                                                                       // 15
    __extends(NameTable, _super);                                                                                      // 16
                                                                                                                       // 17
    function NameTable() {                                                                                             // 18
      return NameTable.__super__.constructor.apply(this, arguments);                                                   // 19
    }                                                                                                                  // 20
                                                                                                                       // 21
    NameTable.prototype.tag = 'name';                                                                                  // 22
                                                                                                                       // 23
    NameTable.prototype.parse = function(data) {                                                                       // 24
      var count, entries, entry, format, i, name, stringOffset, strings, text, _i, _j, _len, _name;                    // 25
      data.pos = this.offset;                                                                                          // 26
      format = data.readShort();                                                                                       // 27
      count = data.readShort();                                                                                        // 28
      stringOffset = data.readShort();                                                                                 // 29
      entries = [];                                                                                                    // 30
      for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {                           // 31
        entries.push({                                                                                                 // 32
          platformID: data.readShort(),                                                                                // 33
          encodingID: data.readShort(),                                                                                // 34
          languageID: data.readShort(),                                                                                // 35
          nameID: data.readShort(),                                                                                    // 36
          length: data.readShort(),                                                                                    // 37
          offset: this.offset + stringOffset + data.readShort()                                                        // 38
        });                                                                                                            // 39
      }                                                                                                                // 40
      strings = {};                                                                                                    // 41
      for (i = _j = 0, _len = entries.length; _j < _len; i = ++_j) {                                                   // 42
        entry = entries[i];                                                                                            // 43
        data.pos = entry.offset;                                                                                       // 44
        text = data.readString(entry.length);                                                                          // 45
        name = new NameEntry(text, entry);                                                                             // 46
        if (strings[_name = entry.nameID] == null) {                                                                   // 47
          strings[_name] = [];                                                                                         // 48
        }                                                                                                              // 49
        strings[entry.nameID].push(name);                                                                              // 50
      }                                                                                                                // 51
      this.strings = strings;                                                                                          // 52
      this.copyright = strings[0];                                                                                     // 53
      this.fontFamily = strings[1];                                                                                    // 54
      this.fontSubfamily = strings[2];                                                                                 // 55
      this.uniqueSubfamily = strings[3];                                                                               // 56
      this.fontName = strings[4];                                                                                      // 57
      this.version = strings[5];                                                                                       // 58
      this.postscriptName = strings[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");                                    // 59
      this.trademark = strings[7];                                                                                     // 60
      this.manufacturer = strings[8];                                                                                  // 61
      this.designer = strings[9];                                                                                      // 62
      this.description = strings[10];                                                                                  // 63
      this.vendorUrl = strings[11];                                                                                    // 64
      this.designerUrl = strings[12];                                                                                  // 65
      this.license = strings[13];                                                                                      // 66
      this.licenseUrl = strings[14];                                                                                   // 67
      this.preferredFamily = strings[15];                                                                              // 68
      this.preferredSubfamily = strings[17];                                                                           // 69
      this.compatibleFull = strings[18];                                                                               // 70
      return this.sampleText = strings[19];                                                                            // 71
    };                                                                                                                 // 72
                                                                                                                       // 73
    subsetTag = "AAAAAA";                                                                                              // 74
                                                                                                                       // 75
    NameTable.prototype.encode = function() {                                                                          // 76
      var id, list, nameID, nameTable, postscriptName, strCount, strTable, string, strings, table, val, _i, _len, _ref;
      strings = {};                                                                                                    // 78
      _ref = this.strings;                                                                                             // 79
      for (id in _ref) {                                                                                               // 80
        val = _ref[id];                                                                                                // 81
        strings[id] = val;                                                                                             // 82
      }                                                                                                                // 83
      postscriptName = new NameEntry("" + subsetTag + "+" + this.postscriptName, {                                     // 84
        platformID: 1,                                                                                                 // 85
        encodingID: 0,                                                                                                 // 86
        languageID: 0                                                                                                  // 87
      });                                                                                                              // 88
      strings[6] = [postscriptName];                                                                                   // 89
      subsetTag = utils.successorOf(subsetTag);                                                                        // 90
      strCount = 0;                                                                                                    // 91
      for (id in strings) {                                                                                            // 92
        list = strings[id];                                                                                            // 93
        if (list != null) {                                                                                            // 94
          strCount += list.length;                                                                                     // 95
        }                                                                                                              // 96
      }                                                                                                                // 97
      table = new Data;                                                                                                // 98
      strTable = new Data;                                                                                             // 99
      table.writeShort(0);                                                                                             // 100
      table.writeShort(strCount);                                                                                      // 101
      table.writeShort(6 + 12 * strCount);                                                                             // 102
      for (nameID in strings) {                                                                                        // 103
        list = strings[nameID];                                                                                        // 104
        if (list != null) {                                                                                            // 105
          for (_i = 0, _len = list.length; _i < _len; _i++) {                                                          // 106
            string = list[_i];                                                                                         // 107
            table.writeShort(string.platformID);                                                                       // 108
            table.writeShort(string.encodingID);                                                                       // 109
            table.writeShort(string.languageID);                                                                       // 110
            table.writeShort(nameID);                                                                                  // 111
            table.writeShort(string.length);                                                                           // 112
            table.writeShort(strTable.pos);                                                                            // 113
            strTable.writeString(string.raw);                                                                          // 114
          }                                                                                                            // 115
        }                                                                                                              // 116
      }                                                                                                                // 117
      return nameTable = {                                                                                             // 118
        postscriptName: postscriptName.raw,                                                                            // 119
        table: table.data.concat(strTable.data)                                                                        // 120
      };                                                                                                               // 121
    };                                                                                                                 // 122
                                                                                                                       // 123
    return NameTable;                                                                                                  // 124
                                                                                                                       // 125
  })(Table);                                                                                                           // 126
                                                                                                                       // 127
  module.exports = NameTable;                                                                                          // 128
                                                                                                                       // 129
  NameEntry = (function() {                                                                                            // 130
    function NameEntry(raw, entry) {                                                                                   // 131
      this.raw = raw;                                                                                                  // 132
      this.length = this.raw.length;                                                                                   // 133
      this.platformID = entry.platformID;                                                                              // 134
      this.encodingID = entry.encodingID;                                                                              // 135
      this.languageID = entry.languageID;                                                                              // 136
    }                                                                                                                  // 137
                                                                                                                       // 138
    return NameEntry;                                                                                                  // 139
                                                                                                                       // 140
  })();                                                                                                                // 141
                                                                                                                       // 142
}).call(this);                                                                                                         // 143
                                                                                                                       // 144
},{"../../data":46,"../table":53,"../utils":65}],62:[function(require,module,exports){                                 //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var OS2Table, Table,                                                                                                 // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  OS2Table = (function(_super) {                                                                                       // 9
    __extends(OS2Table, _super);                                                                                       // 10
                                                                                                                       // 11
    function OS2Table() {                                                                                              // 12
      return OS2Table.__super__.constructor.apply(this, arguments);                                                    // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    OS2Table.prototype.tag = 'OS/2';                                                                                   // 16
                                                                                                                       // 17
    OS2Table.prototype.parse = function(data) {                                                                        // 18
      var i;                                                                                                           // 19
      data.pos = this.offset;                                                                                          // 20
      this.version = data.readUInt16();                                                                                // 21
      this.averageCharWidth = data.readShort();                                                                        // 22
      this.weightClass = data.readUInt16();                                                                            // 23
      this.widthClass = data.readUInt16();                                                                             // 24
      this.type = data.readShort();                                                                                    // 25
      this.ySubscriptXSize = data.readShort();                                                                         // 26
      this.ySubscriptYSize = data.readShort();                                                                         // 27
      this.ySubscriptXOffset = data.readShort();                                                                       // 28
      this.ySubscriptYOffset = data.readShort();                                                                       // 29
      this.ySuperscriptXSize = data.readShort();                                                                       // 30
      this.ySuperscriptYSize = data.readShort();                                                                       // 31
      this.ySuperscriptXOffset = data.readShort();                                                                     // 32
      this.ySuperscriptYOffset = data.readShort();                                                                     // 33
      this.yStrikeoutSize = data.readShort();                                                                          // 34
      this.yStrikeoutPosition = data.readShort();                                                                      // 35
      this.familyClass = data.readShort();                                                                             // 36
      this.panose = (function() {                                                                                      // 37
        var _i, _results;                                                                                              // 38
        _results = [];                                                                                                 // 39
        for (i = _i = 0; _i < 10; i = ++_i) {                                                                          // 40
          _results.push(data.readByte());                                                                              // 41
        }                                                                                                              // 42
        return _results;                                                                                               // 43
      })();                                                                                                            // 44
      this.charRange = (function() {                                                                                   // 45
        var _i, _results;                                                                                              // 46
        _results = [];                                                                                                 // 47
        for (i = _i = 0; _i < 4; i = ++_i) {                                                                           // 48
          _results.push(data.readInt());                                                                               // 49
        }                                                                                                              // 50
        return _results;                                                                                               // 51
      })();                                                                                                            // 52
      this.vendorID = data.readString(4);                                                                              // 53
      this.selection = data.readShort();                                                                               // 54
      this.firstCharIndex = data.readShort();                                                                          // 55
      this.lastCharIndex = data.readShort();                                                                           // 56
      if (this.version > 0) {                                                                                          // 57
        this.ascent = data.readShort();                                                                                // 58
        this.descent = data.readShort();                                                                               // 59
        this.lineGap = data.readShort();                                                                               // 60
        this.winAscent = data.readShort();                                                                             // 61
        this.winDescent = data.readShort();                                                                            // 62
        this.codePageRange = (function() {                                                                             // 63
          var _i, _results;                                                                                            // 64
          _results = [];                                                                                               // 65
          for (i = _i = 0; _i < 2; i = ++_i) {                                                                         // 66
            _results.push(data.readInt());                                                                             // 67
          }                                                                                                            // 68
          return _results;                                                                                             // 69
        })();                                                                                                          // 70
        if (this.version > 1) {                                                                                        // 71
          this.xHeight = data.readShort();                                                                             // 72
          this.capHeight = data.readShort();                                                                           // 73
          this.defaultChar = data.readShort();                                                                         // 74
          this.breakChar = data.readShort();                                                                           // 75
          return this.maxContext = data.readShort();                                                                   // 76
        }                                                                                                              // 77
      }                                                                                                                // 78
    };                                                                                                                 // 79
                                                                                                                       // 80
    OS2Table.prototype.encode = function() {                                                                           // 81
      return this.raw();                                                                                               // 82
    };                                                                                                                 // 83
                                                                                                                       // 84
    return OS2Table;                                                                                                   // 85
                                                                                                                       // 86
  })(Table);                                                                                                           // 87
                                                                                                                       // 88
  module.exports = OS2Table;                                                                                           // 89
                                                                                                                       // 90
}).call(this);                                                                                                         // 91
                                                                                                                       // 92
},{"../table":53}],63:[function(require,module,exports){                                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var Data, PostTable, Table,                                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  Table = require('../table');                                                                                         // 7
                                                                                                                       // 8
  Data = require('../../data');                                                                                        // 9
                                                                                                                       // 10
  PostTable = (function(_super) {                                                                                      // 11
    var POSTSCRIPT_GLYPHS;                                                                                             // 12
                                                                                                                       // 13
    __extends(PostTable, _super);                                                                                      // 14
                                                                                                                       // 15
    function PostTable() {                                                                                             // 16
      return PostTable.__super__.constructor.apply(this, arguments);                                                   // 17
    }                                                                                                                  // 18
                                                                                                                       // 19
    PostTable.prototype.tag = 'post';                                                                                  // 20
                                                                                                                       // 21
    PostTable.prototype.parse = function(data) {                                                                       // 22
      var i, length, numberOfGlyphs, _i, _results;                                                                     // 23
      data.pos = this.offset;                                                                                          // 24
      this.format = data.readInt();                                                                                    // 25
      this.italicAngle = data.readInt();                                                                               // 26
      this.underlinePosition = data.readShort();                                                                       // 27
      this.underlineThickness = data.readShort();                                                                      // 28
      this.isFixedPitch = data.readInt();                                                                              // 29
      this.minMemType42 = data.readInt();                                                                              // 30
      this.maxMemType42 = data.readInt();                                                                              // 31
      this.minMemType1 = data.readInt();                                                                               // 32
      this.maxMemType1 = data.readInt();                                                                               // 33
      switch (this.format) {                                                                                           // 34
        case 0x00010000:                                                                                               // 35
          break;                                                                                                       // 36
        case 0x00020000:                                                                                               // 37
          numberOfGlyphs = data.readUInt16();                                                                          // 38
          this.glyphNameIndex = [];                                                                                    // 39
          for (i = _i = 0; 0 <= numberOfGlyphs ? _i < numberOfGlyphs : _i > numberOfGlyphs; i = 0 <= numberOfGlyphs ? ++_i : --_i) {
            this.glyphNameIndex.push(data.readUInt16());                                                               // 41
          }                                                                                                            // 42
          this.names = [];                                                                                             // 43
          _results = [];                                                                                               // 44
          while (data.pos < this.offset + this.length) {                                                               // 45
            length = data.readByte();                                                                                  // 46
            _results.push(this.names.push(data.readString(length)));                                                   // 47
          }                                                                                                            // 48
          return _results;                                                                                             // 49
          break;                                                                                                       // 50
        case 0x00025000:                                                                                               // 51
          numberOfGlyphs = data.readUInt16();                                                                          // 52
          return this.offsets = data.read(numberOfGlyphs);                                                             // 53
        case 0x00030000:                                                                                               // 54
          break;                                                                                                       // 55
        case 0x00040000:                                                                                               // 56
          return this.map = (function() {                                                                              // 57
            var _j, _ref, _results1;                                                                                   // 58
            _results1 = [];                                                                                            // 59
            for (i = _j = 0, _ref = this.file.maxp.numGlyphs; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
              _results1.push(data.readUInt32());                                                                       // 61
            }                                                                                                          // 62
            return _results1;                                                                                          // 63
          }).call(this);                                                                                               // 64
      }                                                                                                                // 65
    };                                                                                                                 // 66
                                                                                                                       // 67
    PostTable.prototype.glyphFor = function(code) {                                                                    // 68
      var index;                                                                                                       // 69
      switch (this.format) {                                                                                           // 70
        case 0x00010000:                                                                                               // 71
          return POSTSCRIPT_GLYPHS[code] || '.notdef';                                                                 // 72
        case 0x00020000:                                                                                               // 73
          index = this.glyphNameIndex[code];                                                                           // 74
          if (index <= 257) {                                                                                          // 75
            return POSTSCRIPT_GLYPHS[index];                                                                           // 76
          } else {                                                                                                     // 77
            return this.names[index - 258] || '.notdef';                                                               // 78
          }                                                                                                            // 79
          break;                                                                                                       // 80
        case 0x00025000:                                                                                               // 81
          return POSTSCRIPT_GLYPHS[code + this.offsets[code]] || '.notdef';                                            // 82
        case 0x00030000:                                                                                               // 83
          return '.notdef';                                                                                            // 84
        case 0x00040000:                                                                                               // 85
          return this.map[code] || 0xFFFF;                                                                             // 86
      }                                                                                                                // 87
    };                                                                                                                 // 88
                                                                                                                       // 89
    PostTable.prototype.encode = function(mapping) {                                                                   // 90
      var id, index, indexes, position, post, raw, string, strings, table, _i, _j, _k, _len, _len1, _len2;             // 91
      if (!this.exists) {                                                                                              // 92
        return null;                                                                                                   // 93
      }                                                                                                                // 94
      raw = this.raw();                                                                                                // 95
      if (this.format === 0x00030000) {                                                                                // 96
        return raw;                                                                                                    // 97
      }                                                                                                                // 98
      table = new Data(raw.slice(0, 32));                                                                              // 99
      table.writeUInt32(0x00020000);                                                                                   // 100
      table.pos = 32;                                                                                                  // 101
      indexes = [];                                                                                                    // 102
      strings = [];                                                                                                    // 103
      for (_i = 0, _len = mapping.length; _i < _len; _i++) {                                                           // 104
        id = mapping[_i];                                                                                              // 105
        post = this.glyphFor(id);                                                                                      // 106
        position = POSTSCRIPT_GLYPHS.indexOf(post);                                                                    // 107
        if (position !== -1) {                                                                                         // 108
          indexes.push(position);                                                                                      // 109
        } else {                                                                                                       // 110
          indexes.push(257 + strings.length);                                                                          // 111
          strings.push(post);                                                                                          // 112
        }                                                                                                              // 113
      }                                                                                                                // 114
      table.writeUInt16(Object.keys(mapping).length);                                                                  // 115
      for (_j = 0, _len1 = indexes.length; _j < _len1; _j++) {                                                         // 116
        index = indexes[_j];                                                                                           // 117
        table.writeUInt16(index);                                                                                      // 118
      }                                                                                                                // 119
      for (_k = 0, _len2 = strings.length; _k < _len2; _k++) {                                                         // 120
        string = strings[_k];                                                                                          // 121
        table.writeByte(string.length);                                                                                // 122
        table.writeString(string);                                                                                     // 123
      }                                                                                                                // 124
      return table.data;                                                                                               // 125
    };                                                                                                                 // 126
                                                                                                                       // 127
    POSTSCRIPT_GLYPHS = '.notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent\nampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash\nzero one two three four five six seven eight nine colon semicolon less equal greater\nquestion at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nbracketleft backslash bracketright asciicircum underscore grave\na b c d e f g h i j k l m n o p q r s t u v w x y z\nbraceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis\nUdieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave\necircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve\nocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent\nsterling section bullet paragraph germandbls registered copyright trademark acute\ndieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu\npartialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash\nquestiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft\nguillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash\nquotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis\nfraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered\nquotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis\nEgrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute\nUcircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla\nhungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth\neth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior\nonehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla\nCacute cacute Ccaron ccaron dcroat'.split(/\s+/g);
                                                                                                                       // 129
    return PostTable;                                                                                                  // 130
                                                                                                                       // 131
  })(Table);                                                                                                           // 132
                                                                                                                       // 133
  module.exports = PostTable;                                                                                          // 134
                                                                                                                       // 135
}).call(this);                                                                                                         // 136
                                                                                                                       // 137
},{"../../data":46,"../table":53}],64:[function(require,module,exports){                                               //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var CmapTable, DFont, Data, Directory, GlyfTable, HeadTable, HheaTable, HmtxTable, LocaTable, MaxpTable, NameTable, OS2Table, PostTable, TTFFont, fs;
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
  Data = require('../data');                                                                                           // 7
                                                                                                                       // 8
  DFont = require('./dfont');                                                                                          // 9
                                                                                                                       // 10
  Directory = require('./directory');                                                                                  // 11
                                                                                                                       // 12
  NameTable = require('./tables/name');                                                                                // 13
                                                                                                                       // 14
  HeadTable = require('./tables/head');                                                                                // 15
                                                                                                                       // 16
  CmapTable = require('./tables/cmap');                                                                                // 17
                                                                                                                       // 18
  HmtxTable = require('./tables/hmtx');                                                                                // 19
                                                                                                                       // 20
  HheaTable = require('./tables/hhea');                                                                                // 21
                                                                                                                       // 22
  MaxpTable = require('./tables/maxp');                                                                                // 23
                                                                                                                       // 24
  PostTable = require('./tables/post');                                                                                // 25
                                                                                                                       // 26
  OS2Table = require('./tables/os2');                                                                                  // 27
                                                                                                                       // 28
  LocaTable = require('./tables/loca');                                                                                // 29
                                                                                                                       // 30
  GlyfTable = require('./tables/glyf');                                                                                // 31
                                                                                                                       // 32
  TTFFont = (function() {                                                                                              // 33
    TTFFont.open = function(filename, name) {                                                                          // 34
      var contents;                                                                                                    // 35
      contents = fs.readFileSync(filename);                                                                            // 36
      return new TTFFont(contents, name);                                                                              // 37
    };                                                                                                                 // 38
                                                                                                                       // 39
    TTFFont.fromDFont = function(filename, family) {                                                                   // 40
      var dfont;                                                                                                       // 41
      dfont = DFont.open(filename);                                                                                    // 42
      return new TTFFont(dfont.getNamedFont(family));                                                                  // 43
    };                                                                                                                 // 44
                                                                                                                       // 45
    TTFFont.fromBuffer = function(buffer, family) {                                                                    // 46
      var dfont, e, ttf;                                                                                               // 47
      try {                                                                                                            // 48
        ttf = new TTFFont(buffer, family);                                                                             // 49
        if (!(ttf.head.exists && ttf.name.exists && ttf.cmap.exists)) {                                                // 50
          dfont = new DFont(buffer);                                                                                   // 51
          ttf = new TTFFont(dfont.getNamedFont(family));                                                               // 52
          if (!(ttf.head.exists && ttf.name.exists && ttf.cmap.exists)) {                                              // 53
            throw new Error('Invalid TTF file in DFont');                                                              // 54
          }                                                                                                            // 55
        }                                                                                                              // 56
        return ttf;                                                                                                    // 57
      } catch (_error) {                                                                                               // 58
        e = _error;                                                                                                    // 59
        throw new Error('Unknown font format in buffer: ' + e.message);                                                // 60
      }                                                                                                                // 61
    };                                                                                                                 // 62
                                                                                                                       // 63
    function TTFFont(rawData, name) {                                                                                  // 64
      var data, i, numFonts, offset, offsets, version, _i, _j, _len;                                                   // 65
      this.rawData = rawData;                                                                                          // 66
      data = this.contents = new Data(this.rawData);                                                                   // 67
      if (data.readString(4) === 'ttcf') {                                                                             // 68
        if (!name) {                                                                                                   // 69
          throw new Error("Must specify a font name for TTC files.");                                                  // 70
        }                                                                                                              // 71
        version = data.readInt();                                                                                      // 72
        numFonts = data.readInt();                                                                                     // 73
        offsets = [];                                                                                                  // 74
        for (i = _i = 0; 0 <= numFonts ? _i < numFonts : _i > numFonts; i = 0 <= numFonts ? ++_i : --_i) {             // 75
          offsets[i] = data.readInt();                                                                                 // 76
        }                                                                                                              // 77
        for (i = _j = 0, _len = offsets.length; _j < _len; i = ++_j) {                                                 // 78
          offset = offsets[i];                                                                                         // 79
          data.pos = offset;                                                                                           // 80
          this.parse();                                                                                                // 81
          if (this.name.postscriptName === name) {                                                                     // 82
            return;                                                                                                    // 83
          }                                                                                                            // 84
        }                                                                                                              // 85
        throw new Error("Font " + name + " not found in TTC file.");                                                   // 86
      } else {                                                                                                         // 87
        data.pos = 0;                                                                                                  // 88
        this.parse();                                                                                                  // 89
      }                                                                                                                // 90
    }                                                                                                                  // 91
                                                                                                                       // 92
    TTFFont.prototype.parse = function() {                                                                             // 93
      this.directory = new Directory(this.contents);                                                                   // 94
      this.head = new HeadTable(this);                                                                                 // 95
      this.name = new NameTable(this);                                                                                 // 96
      this.cmap = new CmapTable(this);                                                                                 // 97
      this.hhea = new HheaTable(this);                                                                                 // 98
      this.maxp = new MaxpTable(this);                                                                                 // 99
      this.hmtx = new HmtxTable(this);                                                                                 // 100
      this.post = new PostTable(this);                                                                                 // 101
      this.os2 = new OS2Table(this);                                                                                   // 102
      this.loca = new LocaTable(this);                                                                                 // 103
      this.glyf = new GlyfTable(this);                                                                                 // 104
      this.ascender = (this.os2.exists && this.os2.ascender) || this.hhea.ascender;                                    // 105
      this.decender = (this.os2.exists && this.os2.decender) || this.hhea.decender;                                    // 106
      this.lineGap = (this.os2.exists && this.os2.lineGap) || this.hhea.lineGap;                                       // 107
      return this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];                             // 108
    };                                                                                                                 // 109
                                                                                                                       // 110
    TTFFont.prototype.characterToGlyph = function(character) {                                                         // 111
      var _ref;                                                                                                        // 112
      return ((_ref = this.cmap.unicode) != null ? _ref.codeMap[character] : void 0) || 0;                             // 113
    };                                                                                                                 // 114
                                                                                                                       // 115
    TTFFont.prototype.widthOfGlyph = function(glyph) {                                                                 // 116
      var scale;                                                                                                       // 117
      scale = 1000.0 / this.head.unitsPerEm;                                                                           // 118
      return this.hmtx.forGlyph(glyph).advance * scale;                                                                // 119
    };                                                                                                                 // 120
                                                                                                                       // 121
    return TTFFont;                                                                                                    // 122
                                                                                                                       // 123
  })();                                                                                                                // 124
                                                                                                                       // 125
  module.exports = TTFFont;                                                                                            // 126
                                                                                                                       // 127
}).call(this);                                                                                                         // 128
                                                                                                                       // 129
},{"../data":46,"./dfont":50,"./directory":51,"./tables/cmap":54,"./tables/glyf":55,"./tables/head":56,"./tables/hhea":57,"./tables/hmtx":58,"./tables/loca":59,"./tables/maxp":60,"./tables/name":61,"./tables/os2":62,"./tables/post":63}],65:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
 * An implementation of Ruby's string.succ method.                                                                     // 4
 * By Devon Govett                                                                                                     // 5
 *                                                                                                                     // 6
 * Returns the successor to str. The successor is calculated by incrementing characters starting                       // 7
 * from the rightmost alphanumeric (or the rightmost character if there are no alphanumerics) in the                   // 8
 * string. Incrementing a digit always results in another digit, and incrementing a letter results in                  // 9
 * another letter of the same case.                                                                                    // 10
 *                                                                                                                     // 11
 * If the increment generates a carry, the character to the left of it is incremented. This                            // 12
 * process repeats until there is no carry, adding an additional character if necessary.                               // 13
 *                                                                                                                     // 14
 * succ("abcd")      == "abce"                                                                                         // 15
 * succ("THX1138")   == "THX1139"                                                                                      // 16
 * succ("<<koala>>") == "<<koalb>>"                                                                                    // 17
 * succ("1999zzz")   == "2000aaa"                                                                                      // 18
 * succ("ZZZ9999")   == "AAAA0000"                                                                                     // 19
 */                                                                                                                    // 20
                                                                                                                       // 21
(function() {                                                                                                          // 22
  exports.successorOf = function(input) {                                                                              // 23
    var added, alphabet, carry, i, index, isUpperCase, last, length, next, result;                                     // 24
    alphabet = 'abcdefghijklmnopqrstuvwxyz';                                                                           // 25
    length = alphabet.length;                                                                                          // 26
    result = input;                                                                                                    // 27
    i = input.length;                                                                                                  // 28
    while (i >= 0) {                                                                                                   // 29
      last = input.charAt(--i);                                                                                        // 30
      if (isNaN(last)) {                                                                                               // 31
        index = alphabet.indexOf(last.toLowerCase());                                                                  // 32
        if (index === -1) {                                                                                            // 33
          next = last;                                                                                                 // 34
          carry = true;                                                                                                // 35
        } else {                                                                                                       // 36
          next = alphabet.charAt((index + 1) % length);                                                                // 37
          isUpperCase = last === last.toUpperCase();                                                                   // 38
          if (isUpperCase) {                                                                                           // 39
            next = next.toUpperCase();                                                                                 // 40
          }                                                                                                            // 41
          carry = index + 1 >= length;                                                                                 // 42
          if (carry && i === 0) {                                                                                      // 43
            added = isUpperCase ? 'A' : 'a';                                                                           // 44
            result = added + next + result.slice(1);                                                                   // 45
            break;                                                                                                     // 46
          }                                                                                                            // 47
        }                                                                                                              // 48
      } else {                                                                                                         // 49
        next = +last + 1;                                                                                              // 50
        carry = next > 9;                                                                                              // 51
        if (carry) {                                                                                                   // 52
          next = 0;                                                                                                    // 53
        }                                                                                                              // 54
        if (carry && i === 0) {                                                                                        // 55
          result = '1' + next + result.slice(1);                                                                       // 56
          break;                                                                                                       // 57
        }                                                                                                              // 58
      }                                                                                                                // 59
      result = result.slice(0, i) + next + result.slice(i + 1);                                                        // 60
      if (!carry) {                                                                                                    // 61
        break;                                                                                                         // 62
      }                                                                                                                // 63
    }                                                                                                                  // 64
    return result;                                                                                                     // 65
  };                                                                                                                   // 66
                                                                                                                       // 67
  exports.invert = function(object) {                                                                                  // 68
    var key, ret, val;                                                                                                 // 69
    ret = {};                                                                                                          // 70
    for (key in object) {                                                                                              // 71
      val = object[key];                                                                                               // 72
      ret[val] = key;                                                                                                  // 73
    }                                                                                                                  // 74
    return ret;                                                                                                        // 75
  };                                                                                                                   // 76
                                                                                                                       // 77
}).call(this);                                                                                                         // 78
                                                                                                                       // 79
},{}],66:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var PDFGradient, PDFLinearGradient, PDFRadialGradient,                                                               // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  PDFGradient = (function() {                                                                                          // 7
    function PDFGradient(doc) {                                                                                        // 8
      this.doc = doc;                                                                                                  // 9
      this.stops = [];                                                                                                 // 10
      this.embedded = false;                                                                                           // 11
      this.transform = [1, 0, 0, 1, 0, 0];                                                                             // 12
      this._colorSpace = 'DeviceRGB';                                                                                  // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    PDFGradient.prototype.stop = function(pos, color, opacity) {                                                       // 16
      if (opacity == null) {                                                                                           // 17
        opacity = 1;                                                                                                   // 18
      }                                                                                                                // 19
      opacity = Math.max(0, Math.min(1, opacity));                                                                     // 20
      this.stops.push([pos, this.doc._normalizeColor(color), opacity]);                                                // 21
      return this;                                                                                                     // 22
    };                                                                                                                 // 23
                                                                                                                       // 24
    PDFGradient.prototype.embed = function() {                                                                         // 25
      var bounds, dx, dy, encode, fn, form, grad, group, gstate, i, last, m, m0, m1, m11, m12, m2, m21, m22, m3, m4, m5, name, pattern, resources, sMask, shader, stop, stops, v, _i, _j, _len, _ref, _ref1, _ref2;
      if (this.embedded || this.stops.length === 0) {                                                                  // 27
        return;                                                                                                        // 28
      }                                                                                                                // 29
      this.embedded = true;                                                                                            // 30
      last = this.stops[this.stops.length - 1];                                                                        // 31
      if (last[0] < 1) {                                                                                               // 32
        this.stops.push([1, last[1], last[2]]);                                                                        // 33
      }                                                                                                                // 34
      bounds = [];                                                                                                     // 35
      encode = [];                                                                                                     // 36
      stops = [];                                                                                                      // 37
      for (i = _i = 0, _ref = this.stops.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        encode.push(0, 1);                                                                                             // 39
        if (i + 2 !== this.stops.length) {                                                                             // 40
          bounds.push(this.stops[i + 1][0]);                                                                           // 41
        }                                                                                                              // 42
        fn = this.doc.ref({                                                                                            // 43
          FunctionType: 2,                                                                                             // 44
          Domain: [0, 1],                                                                                              // 45
          C0: this.stops[i + 0][1],                                                                                    // 46
          C1: this.stops[i + 1][1],                                                                                    // 47
          N: 1                                                                                                         // 48
        });                                                                                                            // 49
        stops.push(fn);                                                                                                // 50
        fn.end();                                                                                                      // 51
      }                                                                                                                // 52
      if (stops.length === 1) {                                                                                        // 53
        fn = stops[0];                                                                                                 // 54
      } else {                                                                                                         // 55
        fn = this.doc.ref({                                                                                            // 56
          FunctionType: 3,                                                                                             // 57
          Domain: [0, 1],                                                                                              // 58
          Functions: stops,                                                                                            // 59
          Bounds: bounds,                                                                                              // 60
          Encode: encode                                                                                               // 61
        });                                                                                                            // 62
        fn.end();                                                                                                      // 63
      }                                                                                                                // 64
      this.id = 'Sh' + (++this.doc._gradCount);                                                                        // 65
      m = this.doc._ctm.slice();                                                                                       // 66
      m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];                                                // 67
      _ref1 = this.transform, m11 = _ref1[0], m12 = _ref1[1], m21 = _ref1[2], m22 = _ref1[3], dx = _ref1[4], dy = _ref1[5];
      m[0] = m0 * m11 + m2 * m12;                                                                                      // 69
      m[1] = m1 * m11 + m3 * m12;                                                                                      // 70
      m[2] = m0 * m21 + m2 * m22;                                                                                      // 71
      m[3] = m1 * m21 + m3 * m22;                                                                                      // 72
      m[4] = m0 * dx + m2 * dy + m4;                                                                                   // 73
      m[5] = m1 * dx + m3 * dy + m5;                                                                                   // 74
      shader = this.shader(fn);                                                                                        // 75
      shader.end();                                                                                                    // 76
      pattern = this.doc.ref({                                                                                         // 77
        Type: 'Pattern',                                                                                               // 78
        PatternType: 2,                                                                                                // 79
        Shading: shader,                                                                                               // 80
        Matrix: (function() {                                                                                          // 81
          var _j, _len, _results;                                                                                      // 82
          _results = [];                                                                                               // 83
          for (_j = 0, _len = m.length; _j < _len; _j++) {                                                             // 84
            v = m[_j];                                                                                                 // 85
            _results.push(+v.toFixed(5));                                                                              // 86
          }                                                                                                            // 87
          return _results;                                                                                             // 88
        })()                                                                                                           // 89
      });                                                                                                              // 90
      this.doc.page.patterns[this.id] = pattern;                                                                       // 91
      pattern.end();                                                                                                   // 92
      if (this.stops.some(function(stop) {                                                                             // 93
        return stop[2] < 1;                                                                                            // 94
      })) {                                                                                                            // 95
        grad = this.opacityGradient();                                                                                 // 96
        grad._colorSpace = 'DeviceGray';                                                                               // 97
        _ref2 = this.stops;                                                                                            // 98
        for (_j = 0, _len = _ref2.length; _j < _len; _j++) {                                                           // 99
          stop = _ref2[_j];                                                                                            // 100
          grad.stop(stop[0], [stop[2]]);                                                                               // 101
        }                                                                                                              // 102
        grad = grad.embed();                                                                                           // 103
        group = this.doc.ref({                                                                                         // 104
          Type: 'Group',                                                                                               // 105
          S: 'Transparency',                                                                                           // 106
          CS: 'DeviceGray'                                                                                             // 107
        });                                                                                                            // 108
        group.end();                                                                                                   // 109
        resources = this.doc.ref({                                                                                     // 110
          ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],                                                      // 111
          Shading: {                                                                                                   // 112
            Sh1: grad.data.Shading                                                                                     // 113
          }                                                                                                            // 114
        });                                                                                                            // 115
        resources.end();                                                                                               // 116
        form = this.doc.ref({                                                                                          // 117
          Type: 'XObject',                                                                                             // 118
          Subtype: 'Form',                                                                                             // 119
          FormType: 1,                                                                                                 // 120
          BBox: [0, 0, this.doc.page.width, this.doc.page.height],                                                     // 121
          Group: group,                                                                                                // 122
          Resources: resources                                                                                         // 123
        });                                                                                                            // 124
        form.end("/Sh1 sh");                                                                                           // 125
        sMask = this.doc.ref({                                                                                         // 126
          Type: 'Mask',                                                                                                // 127
          S: 'Luminosity',                                                                                             // 128
          G: form                                                                                                      // 129
        });                                                                                                            // 130
        sMask.end();                                                                                                   // 131
        gstate = this.doc.ref({                                                                                        // 132
          Type: 'ExtGState',                                                                                           // 133
          SMask: sMask                                                                                                 // 134
        });                                                                                                            // 135
        this.opacity_id = ++this.doc._opacityCount;                                                                    // 136
        name = "Gs" + this.opacity_id;                                                                                 // 137
        this.doc.page.ext_gstates[name] = gstate;                                                                      // 138
        gstate.end();                                                                                                  // 139
      }                                                                                                                // 140
      return pattern;                                                                                                  // 141
    };                                                                                                                 // 142
                                                                                                                       // 143
    PDFGradient.prototype.apply = function(op) {                                                                       // 144
      if (!this.embedded) {                                                                                            // 145
        this.embed();                                                                                                  // 146
      }                                                                                                                // 147
      this.doc.addContent("/" + this.id + " " + op);                                                                   // 148
      if (this.opacity_id) {                                                                                           // 149
        this.doc.addContent("/Gs" + this.opacity_id + " gs");                                                          // 150
        return this.doc._sMasked = true;                                                                               // 151
      }                                                                                                                // 152
    };                                                                                                                 // 153
                                                                                                                       // 154
    return PDFGradient;                                                                                                // 155
                                                                                                                       // 156
  })();                                                                                                                // 157
                                                                                                                       // 158
  PDFLinearGradient = (function(_super) {                                                                              // 159
    __extends(PDFLinearGradient, _super);                                                                              // 160
                                                                                                                       // 161
    function PDFLinearGradient(doc, x1, y1, x2, y2) {                                                                  // 162
      this.doc = doc;                                                                                                  // 163
      this.x1 = x1;                                                                                                    // 164
      this.y1 = y1;                                                                                                    // 165
      this.x2 = x2;                                                                                                    // 166
      this.y2 = y2;                                                                                                    // 167
      PDFLinearGradient.__super__.constructor.apply(this, arguments);                                                  // 168
    }                                                                                                                  // 169
                                                                                                                       // 170
    PDFLinearGradient.prototype.shader = function(fn) {                                                                // 171
      return this.doc.ref({                                                                                            // 172
        ShadingType: 2,                                                                                                // 173
        ColorSpace: this._colorSpace,                                                                                  // 174
        Coords: [this.x1, this.y1, this.x2, this.y2],                                                                  // 175
        Function: fn,                                                                                                  // 176
        Extend: [true, true]                                                                                           // 177
      });                                                                                                              // 178
    };                                                                                                                 // 179
                                                                                                                       // 180
    PDFLinearGradient.prototype.opacityGradient = function() {                                                         // 181
      return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);                                      // 182
    };                                                                                                                 // 183
                                                                                                                       // 184
    return PDFLinearGradient;                                                                                          // 185
                                                                                                                       // 186
  })(PDFGradient);                                                                                                     // 187
                                                                                                                       // 188
  PDFRadialGradient = (function(_super) {                                                                              // 189
    __extends(PDFRadialGradient, _super);                                                                              // 190
                                                                                                                       // 191
    function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {                                                          // 192
      this.doc = doc;                                                                                                  // 193
      this.x1 = x1;                                                                                                    // 194
      this.y1 = y1;                                                                                                    // 195
      this.r1 = r1;                                                                                                    // 196
      this.x2 = x2;                                                                                                    // 197
      this.y2 = y2;                                                                                                    // 198
      this.r2 = r2;                                                                                                    // 199
      PDFRadialGradient.__super__.constructor.apply(this, arguments);                                                  // 200
    }                                                                                                                  // 201
                                                                                                                       // 202
    PDFRadialGradient.prototype.shader = function(fn) {                                                                // 203
      return this.doc.ref({                                                                                            // 204
        ShadingType: 3,                                                                                                // 205
        ColorSpace: this._colorSpace,                                                                                  // 206
        Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],                                                // 207
        Function: fn,                                                                                                  // 208
        Extend: [true, true]                                                                                           // 209
      });                                                                                                              // 210
    };                                                                                                                 // 211
                                                                                                                       // 212
    PDFRadialGradient.prototype.opacityGradient = function() {                                                         // 213
      return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);                    // 214
    };                                                                                                                 // 215
                                                                                                                       // 216
    return PDFRadialGradient;                                                                                          // 217
                                                                                                                       // 218
  })(PDFGradient);                                                                                                     // 219
                                                                                                                       // 220
  module.exports = {                                                                                                   // 221
    PDFGradient: PDFGradient,                                                                                          // 222
    PDFLinearGradient: PDFLinearGradient,                                                                              // 223
    PDFRadialGradient: PDFRadialGradient                                                                               // 224
  };                                                                                                                   // 225
                                                                                                                       // 226
}).call(this);                                                                                                         // 227
                                                                                                                       // 228
},{}],67:[function(require,module,exports){                                                                            //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
PDFImage - embeds images in PDF documents                                                                              // 4
By Devon Govett                                                                                                        // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
(function() {                                                                                                          // 8
  var Data, JPEG, PDFImage, PNG, fs;                                                                                   // 9
                                                                                                                       // 10
                                                                                                                       // 11
                                                                                                                       // 12
  Data = require('./data');                                                                                            // 13
                                                                                                                       // 14
  JPEG = require('./image/jpeg');                                                                                      // 15
                                                                                                                       // 16
  PNG = require('./image/png');                                                                                        // 17
                                                                                                                       // 18
  PDFImage = (function() {                                                                                             // 19
    function PDFImage() {}                                                                                             // 20
                                                                                                                       // 21
    PDFImage.open = function(src, label) {                                                                             // 22
      var data, match;                                                                                                 // 23
      if (Buffer.isBuffer(src)) {                                                                                      // 24
        data = src;                                                                                                    // 25
      } else {                                                                                                         // 26
        if (match = /^data:.+;base64,(.*)$/.exec(src)) {                                                               // 27
          data = new Buffer(match[1], 'base64');                                                                       // 28
        } else {                                                                                                       // 29
          data = fs.readFileSync(src);                                                                                 // 30
          if (!data) {                                                                                                 // 31
            return;                                                                                                    // 32
          }                                                                                                            // 33
        }                                                                                                              // 34
      }                                                                                                                // 35
      if (data[0] === 0xff && data[1] === 0xd8) {                                                                      // 36
        return new JPEG(data, label);                                                                                  // 37
      } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {                                         // 38
        return new PNG(data, label);                                                                                   // 39
      } else {                                                                                                         // 40
        throw new Error('Unknown image format.');                                                                      // 41
      }                                                                                                                // 42
    };                                                                                                                 // 43
                                                                                                                       // 44
    return PDFImage;                                                                                                   // 45
                                                                                                                       // 46
  })();                                                                                                                // 47
                                                                                                                       // 48
  module.exports = PDFImage;                                                                                           // 49
                                                                                                                       // 50
}).call(this);                                                                                                         // 51
                                                                                                                       // 52
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"./data":46,"./image/jpeg":68,"./image/png":69,"buffer":17}],68:[function(require,module,exports){                  //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var JPEG, fs,                                                                                                        // 3
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
  JPEG = (function() {                                                                                                 // 8
    var MARKERS;                                                                                                       // 9
                                                                                                                       // 10
    MARKERS = [0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC5, 0xFFC6, 0xFFC7, 0xFFC8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF];
                                                                                                                       // 12
    function JPEG(data, label) {                                                                                       // 13
      var channels, marker, pos;                                                                                       // 14
      this.data = data;                                                                                                // 15
      this.label = label;                                                                                              // 16
      if (this.data.readUInt16BE(0) !== 0xFFD8) {                                                                      // 17
        throw "SOI not found in JPEG";                                                                                 // 18
      }                                                                                                                // 19
      pos = 2;                                                                                                         // 20
      while (pos < this.data.length) {                                                                                 // 21
        marker = this.data.readUInt16BE(pos);                                                                          // 22
        pos += 2;                                                                                                      // 23
        if (__indexOf.call(MARKERS, marker) >= 0) {                                                                    // 24
          break;                                                                                                       // 25
        }                                                                                                              // 26
        pos += this.data.readUInt16BE(pos);                                                                            // 27
      }                                                                                                                // 28
      if (__indexOf.call(MARKERS, marker) < 0) {                                                                       // 29
        throw "Invalid JPEG.";                                                                                         // 30
      }                                                                                                                // 31
      pos += 2;                                                                                                        // 32
      this.bits = this.data[pos++];                                                                                    // 33
      this.height = this.data.readUInt16BE(pos);                                                                       // 34
      pos += 2;                                                                                                        // 35
      this.width = this.data.readUInt16BE(pos);                                                                        // 36
      pos += 2;                                                                                                        // 37
      channels = this.data[pos++];                                                                                     // 38
      this.colorSpace = (function() {                                                                                  // 39
        switch (channels) {                                                                                            // 40
          case 1:                                                                                                      // 41
            return 'DeviceGray';                                                                                       // 42
          case 3:                                                                                                      // 43
            return 'DeviceRGB';                                                                                        // 44
          case 4:                                                                                                      // 45
            return 'DeviceCMYK';                                                                                       // 46
        }                                                                                                              // 47
      })();                                                                                                            // 48
      this.obj = null;                                                                                                 // 49
    }                                                                                                                  // 50
                                                                                                                       // 51
    JPEG.prototype.embed = function(document) {                                                                        // 52
      if (this.obj) {                                                                                                  // 53
        return;                                                                                                        // 54
      }                                                                                                                // 55
      this.obj = document.ref({                                                                                        // 56
        Type: 'XObject',                                                                                               // 57
        Subtype: 'Image',                                                                                              // 58
        BitsPerComponent: this.bits,                                                                                   // 59
        Width: this.width,                                                                                             // 60
        Height: this.height,                                                                                           // 61
        ColorSpace: this.colorSpace,                                                                                   // 62
        Filter: 'DCTDecode'                                                                                            // 63
      });                                                                                                              // 64
      if (this.colorSpace === 'DeviceCMYK') {                                                                          // 65
        this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];                                            // 66
      }                                                                                                                // 67
      this.obj.end(this.data);                                                                                         // 68
      return this.data = null;                                                                                         // 69
    };                                                                                                                 // 70
                                                                                                                       // 71
    return JPEG;                                                                                                       // 72
                                                                                                                       // 73
  })();                                                                                                                // 74
                                                                                                                       // 75
  module.exports = JPEG;                                                                                               // 76
                                                                                                                       // 77
}).call(this);                                                                                                         // 78
                                                                                                                       // 79
},{}],69:[function(require,module,exports){                                                                            //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var PNG, PNGImage, zlib;                                                                                             // 3
                                                                                                                       // 4
  zlib = require('zlib');                                                                                              // 5
                                                                                                                       // 6
  PNG = require('png-js');                                                                                             // 7
                                                                                                                       // 8
  PNGImage = (function() {                                                                                             // 9
    function PNGImage(data, label) {                                                                                   // 10
      this.label = label;                                                                                              // 11
      this.image = new PNG(data);                                                                                      // 12
      this.width = this.image.width;                                                                                   // 13
      this.height = this.image.height;                                                                                 // 14
      this.imgData = this.image.imgData;                                                                               // 15
      this.obj = null;                                                                                                 // 16
    }                                                                                                                  // 17
                                                                                                                       // 18
    PNGImage.prototype.embed = function(document) {                                                                    // 19
      var mask, palette, params, rgb, val, x, _i, _len;                                                                // 20
      this.document = document;                                                                                        // 21
      if (this.obj) {                                                                                                  // 22
        return;                                                                                                        // 23
      }                                                                                                                // 24
      this.obj = document.ref({                                                                                        // 25
        Type: 'XObject',                                                                                               // 26
        Subtype: 'Image',                                                                                              // 27
        BitsPerComponent: this.image.bits,                                                                             // 28
        Width: this.width,                                                                                             // 29
        Height: this.height,                                                                                           // 30
        Filter: 'FlateDecode'                                                                                          // 31
      });                                                                                                              // 32
      if (!this.image.hasAlphaChannel) {                                                                               // 33
        params = document.ref({                                                                                        // 34
          Predictor: 15,                                                                                               // 35
          Colors: this.image.colors,                                                                                   // 36
          BitsPerComponent: this.image.bits,                                                                           // 37
          Columns: this.width                                                                                          // 38
        });                                                                                                            // 39
        this.obj.data['DecodeParms'] = params;                                                                         // 40
        params.end();                                                                                                  // 41
      }                                                                                                                // 42
      if (this.image.palette.length === 0) {                                                                           // 43
        this.obj.data['ColorSpace'] = this.image.colorSpace;                                                           // 44
      } else {                                                                                                         // 45
        palette = document.ref();                                                                                      // 46
        palette.end(new Buffer(this.image.palette));                                                                   // 47
        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', (this.image.palette.length / 3) - 1, palette];          // 48
      }                                                                                                                // 49
      if (this.image.transparency.grayscale) {                                                                         // 50
        val = this.image.transparency.greyscale;                                                                       // 51
        return this.obj.data['Mask'] = [val, val];                                                                     // 52
      } else if (this.image.transparency.rgb) {                                                                        // 53
        rgb = this.image.transparency.rgb;                                                                             // 54
        mask = [];                                                                                                     // 55
        for (_i = 0, _len = rgb.length; _i < _len; _i++) {                                                             // 56
          x = rgb[_i];                                                                                                 // 57
          mask.push(x, x);                                                                                             // 58
        }                                                                                                              // 59
        return this.obj.data['Mask'] = mask;                                                                           // 60
      } else if (this.image.transparency.indexed) {                                                                    // 61
        return this.loadIndexedAlphaChannel();                                                                         // 62
      } else if (this.image.hasAlphaChannel) {                                                                         // 63
        return this.splitAlphaChannel();                                                                               // 64
      } else {                                                                                                         // 65
        return this.finalize();                                                                                        // 66
      }                                                                                                                // 67
    };                                                                                                                 // 68
                                                                                                                       // 69
    PNGImage.prototype.finalize = function() {                                                                         // 70
      var sMask;                                                                                                       // 71
      if (this.alphaChannel) {                                                                                         // 72
        sMask = this.document.ref({                                                                                    // 73
          Type: 'XObject',                                                                                             // 74
          Subtype: 'Image',                                                                                            // 75
          Height: this.height,                                                                                         // 76
          Width: this.width,                                                                                           // 77
          BitsPerComponent: 8,                                                                                         // 78
          Filter: 'FlateDecode',                                                                                       // 79
          ColorSpace: 'DeviceGray',                                                                                    // 80
          Decode: [0, 1]                                                                                               // 81
        });                                                                                                            // 82
        sMask.end(this.alphaChannel);                                                                                  // 83
        this.obj.data['SMask'] = sMask;                                                                                // 84
      }                                                                                                                // 85
      this.obj.end(this.imgData);                                                                                      // 86
      this.image = null;                                                                                               // 87
      return this.imgData = null;                                                                                      // 88
    };                                                                                                                 // 89
                                                                                                                       // 90
    PNGImage.prototype.splitAlphaChannel = function() {                                                                // 91
      return this.image.decodePixels((function(_this) {                                                                // 92
        return function(pixels) {                                                                                      // 93
          var a, alphaChannel, colorByteSize, done, i, imgData, len, p, pixelCount;                                    // 94
          colorByteSize = _this.image.colors * _this.image.bits / 8;                                                   // 95
          pixelCount = _this.width * _this.height;                                                                     // 96
          imgData = new Buffer(pixelCount * colorByteSize);                                                            // 97
          alphaChannel = new Buffer(pixelCount);                                                                       // 98
          i = p = a = 0;                                                                                               // 99
          len = pixels.length;                                                                                         // 100
          while (i < len) {                                                                                            // 101
            imgData[p++] = pixels[i++];                                                                                // 102
            imgData[p++] = pixels[i++];                                                                                // 103
            imgData[p++] = pixels[i++];                                                                                // 104
            alphaChannel[a++] = pixels[i++];                                                                           // 105
          }                                                                                                            // 106
          done = 0;                                                                                                    // 107
          zlib.deflate(imgData, function(err, imgData) {                                                               // 108
            _this.imgData = imgData;                                                                                   // 109
            if (err) {                                                                                                 // 110
              throw err;                                                                                               // 111
            }                                                                                                          // 112
            if (++done === 2) {                                                                                        // 113
              return _this.finalize();                                                                                 // 114
            }                                                                                                          // 115
          });                                                                                                          // 116
          return zlib.deflate(alphaChannel, function(err, alphaChannel) {                                              // 117
            _this.alphaChannel = alphaChannel;                                                                         // 118
            if (err) {                                                                                                 // 119
              throw err;                                                                                               // 120
            }                                                                                                          // 121
            if (++done === 2) {                                                                                        // 122
              return _this.finalize();                                                                                 // 123
            }                                                                                                          // 124
          });                                                                                                          // 125
        };                                                                                                             // 126
      })(this));                                                                                                       // 127
    };                                                                                                                 // 128
                                                                                                                       // 129
    PNGImage.prototype.loadIndexedAlphaChannel = function(fn) {                                                        // 130
      var transparency;                                                                                                // 131
      transparency = this.image.transparency.indexed;                                                                  // 132
      return this.image.decodePixels((function(_this) {                                                                // 133
        return function(pixels) {                                                                                      // 134
          var alphaChannel, i, j, _i, _ref;                                                                            // 135
          alphaChannel = new Buffer(_this.width * _this.height);                                                       // 136
          i = 0;                                                                                                       // 137
          for (j = _i = 0, _ref = pixels.length; _i < _ref; j = _i += 1) {                                             // 138
            alphaChannel[i++] = transparency[pixels[j]];                                                               // 139
          }                                                                                                            // 140
          return zlib.deflate(alphaChannel, function(err, alphaChannel) {                                              // 141
            _this.alphaChannel = alphaChannel;                                                                         // 142
            if (err) {                                                                                                 // 143
              throw err;                                                                                               // 144
            }                                                                                                          // 145
            return _this.finalize();                                                                                   // 146
          });                                                                                                          // 147
        };                                                                                                             // 148
      })(this));                                                                                                       // 149
    };                                                                                                                 // 150
                                                                                                                       // 151
    return PNGImage;                                                                                                   // 152
                                                                                                                       // 153
  })();                                                                                                                // 154
                                                                                                                       // 155
  module.exports = PNGImage;                                                                                           // 156
                                                                                                                       // 157
}).call(this);                                                                                                         // 158
                                                                                                                       // 159
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"buffer":17,"png-js":86,"zlib":16}],70:[function(require,module,exports){                                           //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var EventEmitter, LineBreaker, LineWrapper,                                                                          // 3
    __hasProp = {}.hasOwnProperty,                                                                                     // 4
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
                                                                                                                       // 6
  EventEmitter = require('events').EventEmitter;                                                                       // 7
                                                                                                                       // 8
  LineBreaker = require('linebreak');                                                                                  // 9
                                                                                                                       // 10
  LineWrapper = (function(_super) {                                                                                    // 11
    __extends(LineWrapper, _super);                                                                                    // 12
                                                                                                                       // 13
    function LineWrapper(document, options) {                                                                          // 14
      var _ref;                                                                                                        // 15
      this.document = document;                                                                                        // 16
      this.indent = options.indent || 0;                                                                               // 17
      this.characterSpacing = options.characterSpacing || 0;                                                           // 18
      this.wordSpacing = options.wordSpacing === 0;                                                                    // 19
      this.columns = options.columns || 1;                                                                             // 20
      this.columnGap = (_ref = options.columnGap) != null ? _ref : 18;                                                 // 21
      this.lineWidth = (options.width - (this.columnGap * (this.columns - 1))) / this.columns;                         // 22
      this.spaceLeft = this.lineWidth;                                                                                 // 23
      this.startX = this.document.x;                                                                                   // 24
      this.startY = this.document.y;                                                                                   // 25
      this.column = 1;                                                                                                 // 26
      this.ellipsis = options.ellipsis;                                                                                // 27
      this.continuedX = 0;                                                                                             // 28
      if (options.height != null) {                                                                                    // 29
        this.height = options.height;                                                                                  // 30
        this.maxY = this.startY + options.height;                                                                      // 31
      } else {                                                                                                         // 32
        this.maxY = this.document.page.maxY();                                                                         // 33
      }                                                                                                                // 34
      this.on('firstLine', (function(_this) {                                                                          // 35
        return function(options) {                                                                                     // 36
          var indent;                                                                                                  // 37
          indent = _this.continuedX || _this.indent;                                                                   // 38
          _this.document.x += indent;                                                                                  // 39
          _this.lineWidth -= indent;                                                                                   // 40
          return _this.once('line', function() {                                                                       // 41
            _this.document.x -= indent;                                                                                // 42
            _this.lineWidth += indent;                                                                                 // 43
            if (options.continued && !_this.continuedX) {                                                              // 44
              _this.continuedX = _this.indent;                                                                         // 45
            }                                                                                                          // 46
            if (!options.continued) {                                                                                  // 47
              return _this.continuedX = 0;                                                                             // 48
            }                                                                                                          // 49
          });                                                                                                          // 50
        };                                                                                                             // 51
      })(this));                                                                                                       // 52
      this.on('lastLine', (function(_this) {                                                                           // 53
        return function(options) {                                                                                     // 54
          var align;                                                                                                   // 55
          align = options.align;                                                                                       // 56
          if (align === 'justify') {                                                                                   // 57
            options.align = 'left';                                                                                    // 58
          }                                                                                                            // 59
          _this.lastLine = true;                                                                                       // 60
          return _this.once('line', function() {                                                                       // 61
            _this.document.y += options.paragraphGap || 0;                                                             // 62
            options.align = align;                                                                                     // 63
            return _this.lastLine = false;                                                                             // 64
          });                                                                                                          // 65
        };                                                                                                             // 66
      })(this));                                                                                                       // 67
    }                                                                                                                  // 68
                                                                                                                       // 69
    LineWrapper.prototype.wordWidth = function(word) {                                                                 // 70
      return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;                       // 71
    };                                                                                                                 // 72
                                                                                                                       // 73
    LineWrapper.prototype.eachWord = function(text, fn) {                                                              // 74
      var bk, breaker, fbk, l, last, lbk, shouldContinue, w, word, wordWidths;                                         // 75
      breaker = new LineBreaker(text);                                                                                 // 76
      last = null;                                                                                                     // 77
      wordWidths = {};                                                                                                 // 78
      while (bk = breaker.nextBreak()) {                                                                               // 79
        word = text.slice((last != null ? last.position : void 0) || 0, bk.position);                                  // 80
        w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);                     // 81
        if (w > this.lineWidth + this.continuedX) {                                                                    // 82
          lbk = last;                                                                                                  // 83
          fbk = {};                                                                                                    // 84
          while (word.length) {                                                                                        // 85
            l = word.length;                                                                                           // 86
            while (w > this.spaceLeft) {                                                                               // 87
              w = this.wordWidth(word.slice(0, --l));                                                                  // 88
            }                                                                                                          // 89
            fbk.required = l < word.length;                                                                            // 90
            shouldContinue = fn(word.slice(0, l), w, fbk, lbk);                                                        // 91
            lbk = {                                                                                                    // 92
              required: false                                                                                          // 93
            };                                                                                                         // 94
            word = word.slice(l);                                                                                      // 95
            w = this.wordWidth(word);                                                                                  // 96
            if (shouldContinue === false) {                                                                            // 97
              break;                                                                                                   // 98
            }                                                                                                          // 99
          }                                                                                                            // 100
        } else {                                                                                                       // 101
          shouldContinue = fn(word, w, bk, last);                                                                      // 102
        }                                                                                                              // 103
        if (shouldContinue === false) {                                                                                // 104
          break;                                                                                                       // 105
        }                                                                                                              // 106
        last = bk;                                                                                                     // 107
      }                                                                                                                // 108
    };                                                                                                                 // 109
                                                                                                                       // 110
    LineWrapper.prototype.wrap = function(text, options) {                                                             // 111
      var buffer, emitLine, lc, nextY, textWidth, wc, y;                                                               // 112
      if (options.indent != null) {                                                                                    // 113
        this.indent = options.indent;                                                                                  // 114
      }                                                                                                                // 115
      if (options.characterSpacing != null) {                                                                          // 116
        this.characterSpacing = options.characterSpacing;                                                              // 117
      }                                                                                                                // 118
      if (options.wordSpacing != null) {                                                                               // 119
        this.wordSpacing = options.wordSpacing;                                                                        // 120
      }                                                                                                                // 121
      if (options.ellipsis != null) {                                                                                  // 122
        this.ellipsis = options.ellipsis;                                                                              // 123
      }                                                                                                                // 124
      nextY = this.document.y + this.document.currentLineHeight(true);                                                 // 125
      if (this.document.y > this.maxY || nextY > this.maxY) {                                                          // 126
        this.nextSection();                                                                                            // 127
      }                                                                                                                // 128
      buffer = '';                                                                                                     // 129
      textWidth = 0;                                                                                                   // 130
      wc = 0;                                                                                                          // 131
      lc = 0;                                                                                                          // 132
      y = this.document.y;                                                                                             // 133
      emitLine = (function(_this) {                                                                                    // 134
        return function() {                                                                                            // 135
          options.textWidth = textWidth + _this.wordSpacing * (wc - 1);                                                // 136
          options.wordCount = wc;                                                                                      // 137
          options.lineWidth = _this.lineWidth;                                                                         // 138
          y = _this.document.y;                                                                                        // 139
          _this.emit('line', buffer, options, _this);                                                                  // 140
          return lc++;                                                                                                 // 141
        };                                                                                                             // 142
      })(this);                                                                                                        // 143
      this.emit('sectionStart', options, this);                                                                        // 144
      this.eachWord(text, (function(_this) {                                                                           // 145
        return function(word, w, bk, last) {                                                                           // 146
          var lh, shouldContinue;                                                                                      // 147
          if ((last == null) || last.required) {                                                                       // 148
            _this.emit('firstLine', options, _this);                                                                   // 149
            _this.spaceLeft = _this.lineWidth;                                                                         // 150
          }                                                                                                            // 151
          if (w <= _this.spaceLeft) {                                                                                  // 152
            buffer += word;                                                                                            // 153
            textWidth += w;                                                                                            // 154
            wc++;                                                                                                      // 155
          }                                                                                                            // 156
          if (bk.required || w > _this.spaceLeft) {                                                                    // 157
            if (bk.required) {                                                                                         // 158
              _this.emit('lastLine', options, _this);                                                                  // 159
            }                                                                                                          // 160
            lh = _this.document.currentLineHeight(true);                                                               // 161
            if ((_this.height != null) && _this.ellipsis && _this.document.y + lh * 2 > _this.maxY && _this.column >= _this.columns) {
              if (_this.ellipsis === true) {                                                                           // 163
                _this.ellipsis = '…';                                                                                  // 164
              }                                                                                                        // 165
              buffer = buffer.replace(/\s+$/, '');                                                                     // 166
              textWidth = _this.wordWidth(buffer + _this.ellipsis);                                                    // 167
              while (textWidth > _this.lineWidth) {                                                                    // 168
                buffer = buffer.slice(0, -1).replace(/\s+$/, '');                                                      // 169
                textWidth = _this.wordWidth(buffer + _this.ellipsis);                                                  // 170
              }                                                                                                        // 171
              buffer = buffer + _this.ellipsis;                                                                        // 172
            }                                                                                                          // 173
            emitLine();                                                                                                // 174
            if (_this.document.y + lh > _this.maxY) {                                                                  // 175
              shouldContinue = _this.nextSection();                                                                    // 176
              if (!shouldContinue) {                                                                                   // 177
                wc = 0;                                                                                                // 178
                buffer = '';                                                                                           // 179
                return false;                                                                                          // 180
              }                                                                                                        // 181
            }                                                                                                          // 182
            if (bk.required) {                                                                                         // 183
              if (w > _this.spaceLeft) {                                                                               // 184
                buffer = word;                                                                                         // 185
                textWidth = w;                                                                                         // 186
                wc = 1;                                                                                                // 187
                emitLine();                                                                                            // 188
              }                                                                                                        // 189
              _this.spaceLeft = _this.lineWidth;                                                                       // 190
              buffer = '';                                                                                             // 191
              textWidth = 0;                                                                                           // 192
              return wc = 0;                                                                                           // 193
            } else {                                                                                                   // 194
              _this.spaceLeft = _this.lineWidth - w;                                                                   // 195
              buffer = word;                                                                                           // 196
              textWidth = w;                                                                                           // 197
              return wc = 1;                                                                                           // 198
            }                                                                                                          // 199
          } else {                                                                                                     // 200
            return _this.spaceLeft -= w;                                                                               // 201
          }                                                                                                            // 202
        };                                                                                                             // 203
      })(this));                                                                                                       // 204
      if (wc > 0) {                                                                                                    // 205
        this.emit('lastLine', options, this);                                                                          // 206
        emitLine();                                                                                                    // 207
      }                                                                                                                // 208
      this.emit('sectionEnd', options, this);                                                                          // 209
      if (options.continued === true) {                                                                                // 210
        if (lc > 1) {                                                                                                  // 211
          this.continuedX = 0;                                                                                         // 212
        }                                                                                                              // 213
        this.continuedX += options.textWidth;                                                                          // 214
        return this.document.y = y;                                                                                    // 215
      } else {                                                                                                         // 216
        return this.document.x = this.startX;                                                                          // 217
      }                                                                                                                // 218
    };                                                                                                                 // 219
                                                                                                                       // 220
    LineWrapper.prototype.nextSection = function(options) {                                                            // 221
      var _ref;                                                                                                        // 222
      this.emit('sectionEnd', options, this);                                                                          // 223
      if (++this.column > this.columns) {                                                                              // 224
        if (this.height != null) {                                                                                     // 225
          return false;                                                                                                // 226
        }                                                                                                              // 227
        this.document.addPage();                                                                                       // 228
        this.column = 1;                                                                                               // 229
        this.startY = this.document.page.margins.top;                                                                  // 230
        this.maxY = this.document.page.maxY();                                                                         // 231
        this.document.x = this.startX;                                                                                 // 232
        if (this.document._fillColor) {                                                                                // 233
          (_ref = this.document).fillColor.apply(_ref, this.document._fillColor);                                      // 234
        }                                                                                                              // 235
        this.emit('pageBreak', options, this);                                                                         // 236
      } else {                                                                                                         // 237
        this.document.x += this.lineWidth + this.columnGap;                                                            // 238
        this.document.y = this.startY;                                                                                 // 239
        this.emit('columnBreak', options, this);                                                                       // 240
      }                                                                                                                // 241
      this.emit('sectionStart', options, this);                                                                        // 242
      return true;                                                                                                     // 243
    };                                                                                                                 // 244
                                                                                                                       // 245
    return LineWrapper;                                                                                                // 246
                                                                                                                       // 247
  })(EventEmitter);                                                                                                    // 248
                                                                                                                       // 249
  module.exports = LineWrapper;                                                                                        // 250
                                                                                                                       // 251
}).call(this);                                                                                                         // 252
                                                                                                                       // 253
},{"events":21,"linebreak":84}],71:[function(require,module,exports){                                                  //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  module.exports = {                                                                                                   // 3
    annotate: function(x, y, w, h, options) {                                                                          // 4
      var key, ref, val;                                                                                               // 5
      options.Type = 'Annot';                                                                                          // 6
      options.Rect = this._convertRect(x, y, w, h);                                                                    // 7
      options.Border = [0, 0, 0];                                                                                      // 8
      if (options.Subtype !== 'Link') {                                                                                // 9
        if (options.C == null) {                                                                                       // 10
          options.C = this._normalizeColor(options.color || [0, 0, 0]);                                                // 11
        }                                                                                                              // 12
      }                                                                                                                // 13
      delete options.color;                                                                                            // 14
      if (typeof options.Dest === 'string') {                                                                          // 15
        options.Dest = new String(options.Dest);                                                                       // 16
      }                                                                                                                // 17
      for (key in options) {                                                                                           // 18
        val = options[key];                                                                                            // 19
        options[key[0].toUpperCase() + key.slice(1)] = val;                                                            // 20
      }                                                                                                                // 21
      ref = this.ref(options);                                                                                         // 22
      this.page.annotations.push(ref);                                                                                 // 23
      ref.end();                                                                                                       // 24
      return this;                                                                                                     // 25
    },                                                                                                                 // 26
    note: function(x, y, w, h, contents, options) {                                                                    // 27
      if (options == null) {                                                                                           // 28
        options = {};                                                                                                  // 29
      }                                                                                                                // 30
      options.Subtype = 'Text';                                                                                        // 31
      options.Contents = new String(contents);                                                                         // 32
      options.Name = 'Comment';                                                                                        // 33
      if (options.color == null) {                                                                                     // 34
        options.color = [243, 223, 92];                                                                                // 35
      }                                                                                                                // 36
      return this.annotate(x, y, w, h, options);                                                                       // 37
    },                                                                                                                 // 38
    link: function(x, y, w, h, url, options) {                                                                         // 39
      if (options == null) {                                                                                           // 40
        options = {};                                                                                                  // 41
      }                                                                                                                // 42
      options.Subtype = 'Link';                                                                                        // 43
      options.A = this.ref({                                                                                           // 44
        S: 'URI',                                                                                                      // 45
        URI: new String(url)                                                                                           // 46
      });                                                                                                              // 47
      options.A.end();                                                                                                 // 48
      return this.annotate(x, y, w, h, options);                                                                       // 49
    },                                                                                                                 // 50
    _markup: function(x, y, w, h, options) {                                                                           // 51
      var x1, x2, y1, y2, _ref;                                                                                        // 52
      if (options == null) {                                                                                           // 53
        options = {};                                                                                                  // 54
      }                                                                                                                // 55
      _ref = this._convertRect(x, y, w, h), x1 = _ref[0], y1 = _ref[1], x2 = _ref[2], y2 = _ref[3];                    // 56
      options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];                                                           // 57
      options.Contents = new String;                                                                                   // 58
      return this.annotate(x, y, w, h, options);                                                                       // 59
    },                                                                                                                 // 60
    highlight: function(x, y, w, h, options) {                                                                         // 61
      if (options == null) {                                                                                           // 62
        options = {};                                                                                                  // 63
      }                                                                                                                // 64
      options.Subtype = 'Highlight';                                                                                   // 65
      if (options.color == null) {                                                                                     // 66
        options.color = [241, 238, 148];                                                                               // 67
      }                                                                                                                // 68
      return this._markup(x, y, w, h, options);                                                                        // 69
    },                                                                                                                 // 70
    underline: function(x, y, w, h, options) {                                                                         // 71
      if (options == null) {                                                                                           // 72
        options = {};                                                                                                  // 73
      }                                                                                                                // 74
      options.Subtype = 'Underline';                                                                                   // 75
      return this._markup(x, y, w, h, options);                                                                        // 76
    },                                                                                                                 // 77
    strike: function(x, y, w, h, options) {                                                                            // 78
      if (options == null) {                                                                                           // 79
        options = {};                                                                                                  // 80
      }                                                                                                                // 81
      options.Subtype = 'StrikeOut';                                                                                   // 82
      return this._markup(x, y, w, h, options);                                                                        // 83
    },                                                                                                                 // 84
    lineAnnotation: function(x1, y1, x2, y2, options) {                                                                // 85
      if (options == null) {                                                                                           // 86
        options = {};                                                                                                  // 87
      }                                                                                                                // 88
      options.Subtype = 'Line';                                                                                        // 89
      options.Contents = new String;                                                                                   // 90
      options.L = [x1, this.page.height - y1, x2, this.page.height - y2];                                              // 91
      return this.annotate(x1, y1, x2, y2, options);                                                                   // 92
    },                                                                                                                 // 93
    rectAnnotation: function(x, y, w, h, options) {                                                                    // 94
      if (options == null) {                                                                                           // 95
        options = {};                                                                                                  // 96
      }                                                                                                                // 97
      options.Subtype = 'Square';                                                                                      // 98
      options.Contents = new String;                                                                                   // 99
      return this.annotate(x, y, w, h, options);                                                                       // 100
    },                                                                                                                 // 101
    ellipseAnnotation: function(x, y, w, h, options) {                                                                 // 102
      if (options == null) {                                                                                           // 103
        options = {};                                                                                                  // 104
      }                                                                                                                // 105
      options.Subtype = 'Circle';                                                                                      // 106
      options.Contents = new String;                                                                                   // 107
      return this.annotate(x, y, w, h, options);                                                                       // 108
    },                                                                                                                 // 109
    textAnnotation: function(x, y, w, h, text, options) {                                                              // 110
      if (options == null) {                                                                                           // 111
        options = {};                                                                                                  // 112
      }                                                                                                                // 113
      options.Subtype = 'FreeText';                                                                                    // 114
      options.Contents = new String(text);                                                                             // 115
      options.DA = new String;                                                                                         // 116
      return this.annotate(x, y, w, h, options);                                                                       // 117
    },                                                                                                                 // 118
    _convertRect: function(x1, y1, w, h) {                                                                             // 119
      var m0, m1, m2, m3, m4, m5, x2, y2, _ref;                                                                        // 120
      y2 = y1;                                                                                                         // 121
      y1 += h;                                                                                                         // 122
      x2 = x1 + w;                                                                                                     // 123
      _ref = this._ctm, m0 = _ref[0], m1 = _ref[1], m2 = _ref[2], m3 = _ref[3], m4 = _ref[4], m5 = _ref[5];            // 124
      x1 = m0 * x1 + m2 * y1 + m4;                                                                                     // 125
      y1 = m1 * x1 + m3 * y1 + m5;                                                                                     // 126
      x2 = m0 * x2 + m2 * y2 + m4;                                                                                     // 127
      y2 = m1 * x2 + m3 * y2 + m5;                                                                                     // 128
      return [x1, y1, x2, y2];                                                                                         // 129
    }                                                                                                                  // 130
  };                                                                                                                   // 131
                                                                                                                       // 132
}).call(this);                                                                                                         // 133
                                                                                                                       // 134
},{}],72:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var PDFGradient, PDFLinearGradient, PDFRadialGradient, namedColors, _ref;                                            // 3
                                                                                                                       // 4
  _ref = require('../gradient'), PDFGradient = _ref.PDFGradient, PDFLinearGradient = _ref.PDFLinearGradient, PDFRadialGradient = _ref.PDFRadialGradient;
                                                                                                                       // 6
  module.exports = {                                                                                                   // 7
    initColor: function() {                                                                                            // 8
      this._opacityRegistry = {};                                                                                      // 9
      this._opacityCount = 0;                                                                                          // 10
      return this._gradCount = 0;                                                                                      // 11
    },                                                                                                                 // 12
    _normalizeColor: function(color) {                                                                                 // 13
      var hex, part;                                                                                                   // 14
      if (color instanceof PDFGradient) {                                                                              // 15
        return color;                                                                                                  // 16
      }                                                                                                                // 17
      if (typeof color === 'string') {                                                                                 // 18
        if (color.charAt(0) === '#') {                                                                                 // 19
          if (color.length === 4) {                                                                                    // 20
            color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");                                // 21
          }                                                                                                            // 22
          hex = parseInt(color.slice(1), 16);                                                                          // 23
          color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];                                                            // 24
        } else if (namedColors[color]) {                                                                               // 25
          color = namedColors[color];                                                                                  // 26
        }                                                                                                              // 27
      }                                                                                                                // 28
      if (Array.isArray(color)) {                                                                                      // 29
        if (color.length === 3) {                                                                                      // 30
          color = (function() {                                                                                        // 31
            var _i, _len, _results;                                                                                    // 32
            _results = [];                                                                                             // 33
            for (_i = 0, _len = color.length; _i < _len; _i++) {                                                       // 34
              part = color[_i];                                                                                        // 35
              _results.push(part / 255);                                                                               // 36
            }                                                                                                          // 37
            return _results;                                                                                           // 38
          })();                                                                                                        // 39
        } else if (color.length === 4) {                                                                               // 40
          color = (function() {                                                                                        // 41
            var _i, _len, _results;                                                                                    // 42
            _results = [];                                                                                             // 43
            for (_i = 0, _len = color.length; _i < _len; _i++) {                                                       // 44
              part = color[_i];                                                                                        // 45
              _results.push(part / 100);                                                                               // 46
            }                                                                                                          // 47
            return _results;                                                                                           // 48
          })();                                                                                                        // 49
        }                                                                                                              // 50
        return color;                                                                                                  // 51
      }                                                                                                                // 52
      return null;                                                                                                     // 53
    },                                                                                                                 // 54
    _setColor: function(color, stroke) {                                                                               // 55
      var gstate, name, op, space;                                                                                     // 56
      color = this._normalizeColor(color);                                                                             // 57
      if (!color) {                                                                                                    // 58
        return false;                                                                                                  // 59
      }                                                                                                                // 60
      if (this._sMasked) {                                                                                             // 61
        gstate = this.ref({                                                                                            // 62
          Type: 'ExtGState',                                                                                           // 63
          SMask: 'None'                                                                                                // 64
        });                                                                                                            // 65
        gstate.end();                                                                                                  // 66
        name = "Gs" + (++this._opacityCount);                                                                          // 67
        this.page.ext_gstates[name] = gstate;                                                                          // 68
        this.addContent("/" + name + " gs");                                                                           // 69
        this._sMasked = false;                                                                                         // 70
      }                                                                                                                // 71
      op = stroke ? 'SCN' : 'scn';                                                                                     // 72
      if (color instanceof PDFGradient) {                                                                              // 73
        this._setColorSpace('Pattern', stroke);                                                                        // 74
        color.apply(op);                                                                                               // 75
      } else {                                                                                                         // 76
        space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';                                                       // 77
        this._setColorSpace(space, stroke);                                                                            // 78
        color = color.join(' ');                                                                                       // 79
        this.addContent("" + color + " " + op);                                                                        // 80
      }                                                                                                                // 81
      return true;                                                                                                     // 82
    },                                                                                                                 // 83
    _setColorSpace: function(space, stroke) {                                                                          // 84
      var op;                                                                                                          // 85
      op = stroke ? 'CS' : 'cs';                                                                                       // 86
      return this.addContent("/" + space + " " + op);                                                                  // 87
    },                                                                                                                 // 88
    fillColor: function(color, opacity) {                                                                              // 89
      var set;                                                                                                         // 90
      if (opacity == null) {                                                                                           // 91
        opacity = 1;                                                                                                   // 92
      }                                                                                                                // 93
      set = this._setColor(color, false);                                                                              // 94
      if (set) {                                                                                                       // 95
        this.fillOpacity(opacity);                                                                                     // 96
      }                                                                                                                // 97
      this._fillColor = [color, opacity];                                                                              // 98
      return this;                                                                                                     // 99
    },                                                                                                                 // 100
    strokeColor: function(color, opacity) {                                                                            // 101
      var set;                                                                                                         // 102
      if (opacity == null) {                                                                                           // 103
        opacity = 1;                                                                                                   // 104
      }                                                                                                                // 105
      set = this._setColor(color, true);                                                                               // 106
      if (set) {                                                                                                       // 107
        this.strokeOpacity(opacity);                                                                                   // 108
      }                                                                                                                // 109
      return this;                                                                                                     // 110
    },                                                                                                                 // 111
    opacity: function(opacity) {                                                                                       // 112
      this._doOpacity(opacity, opacity);                                                                               // 113
      return this;                                                                                                     // 114
    },                                                                                                                 // 115
    fillOpacity: function(opacity) {                                                                                   // 116
      this._doOpacity(opacity, null);                                                                                  // 117
      return this;                                                                                                     // 118
    },                                                                                                                 // 119
    strokeOpacity: function(opacity) {                                                                                 // 120
      this._doOpacity(null, opacity);                                                                                  // 121
      return this;                                                                                                     // 122
    },                                                                                                                 // 123
    _doOpacity: function(fillOpacity, strokeOpacity) {                                                                 // 124
      var dictionary, id, key, name, _ref1;                                                                            // 125
      if (!((fillOpacity != null) || (strokeOpacity != null))) {                                                       // 126
        return;                                                                                                        // 127
      }                                                                                                                // 128
      if (fillOpacity != null) {                                                                                       // 129
        fillOpacity = Math.max(0, Math.min(1, fillOpacity));                                                           // 130
      }                                                                                                                // 131
      if (strokeOpacity != null) {                                                                                     // 132
        strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));                                                       // 133
      }                                                                                                                // 134
      key = "" + fillOpacity + "_" + strokeOpacity;                                                                    // 135
      if (this._opacityRegistry[key]) {                                                                                // 136
        _ref1 = this._opacityRegistry[key], dictionary = _ref1[0], name = _ref1[1];                                    // 137
      } else {                                                                                                         // 138
        dictionary = {                                                                                                 // 139
          Type: 'ExtGState'                                                                                            // 140
        };                                                                                                             // 141
        if (fillOpacity != null) {                                                                                     // 142
          dictionary.ca = fillOpacity;                                                                                 // 143
        }                                                                                                              // 144
        if (strokeOpacity != null) {                                                                                   // 145
          dictionary.CA = strokeOpacity;                                                                               // 146
        }                                                                                                              // 147
        dictionary = this.ref(dictionary);                                                                             // 148
        dictionary.end();                                                                                              // 149
        id = ++this._opacityCount;                                                                                     // 150
        name = "Gs" + id;                                                                                              // 151
        this._opacityRegistry[key] = [dictionary, name];                                                               // 152
      }                                                                                                                // 153
      this.page.ext_gstates[name] = dictionary;                                                                        // 154
      return this.addContent("/" + name + " gs");                                                                      // 155
    },                                                                                                                 // 156
    linearGradient: function(x1, y1, x2, y2) {                                                                         // 157
      return new PDFLinearGradient(this, x1, y1, x2, y2);                                                              // 158
    },                                                                                                                 // 159
    radialGradient: function(x1, y1, r1, x2, y2, r2) {                                                                 // 160
      return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);                                                      // 161
    }                                                                                                                  // 162
  };                                                                                                                   // 163
                                                                                                                       // 164
  namedColors = {                                                                                                      // 165
    aliceblue: [240, 248, 255],                                                                                        // 166
    antiquewhite: [250, 235, 215],                                                                                     // 167
    aqua: [0, 255, 255],                                                                                               // 168
    aquamarine: [127, 255, 212],                                                                                       // 169
    azure: [240, 255, 255],                                                                                            // 170
    beige: [245, 245, 220],                                                                                            // 171
    bisque: [255, 228, 196],                                                                                           // 172
    black: [0, 0, 0],                                                                                                  // 173
    blanchedalmond: [255, 235, 205],                                                                                   // 174
    blue: [0, 0, 255],                                                                                                 // 175
    blueviolet: [138, 43, 226],                                                                                        // 176
    brown: [165, 42, 42],                                                                                              // 177
    burlywood: [222, 184, 135],                                                                                        // 178
    cadetblue: [95, 158, 160],                                                                                         // 179
    chartreuse: [127, 255, 0],                                                                                         // 180
    chocolate: [210, 105, 30],                                                                                         // 181
    coral: [255, 127, 80],                                                                                             // 182
    cornflowerblue: [100, 149, 237],                                                                                   // 183
    cornsilk: [255, 248, 220],                                                                                         // 184
    crimson: [220, 20, 60],                                                                                            // 185
    cyan: [0, 255, 255],                                                                                               // 186
    darkblue: [0, 0, 139],                                                                                             // 187
    darkcyan: [0, 139, 139],                                                                                           // 188
    darkgoldenrod: [184, 134, 11],                                                                                     // 189
    darkgray: [169, 169, 169],                                                                                         // 190
    darkgreen: [0, 100, 0],                                                                                            // 191
    darkgrey: [169, 169, 169],                                                                                         // 192
    darkkhaki: [189, 183, 107],                                                                                        // 193
    darkmagenta: [139, 0, 139],                                                                                        // 194
    darkolivegreen: [85, 107, 47],                                                                                     // 195
    darkorange: [255, 140, 0],                                                                                         // 196
    darkorchid: [153, 50, 204],                                                                                        // 197
    darkred: [139, 0, 0],                                                                                              // 198
    darksalmon: [233, 150, 122],                                                                                       // 199
    darkseagreen: [143, 188, 143],                                                                                     // 200
    darkslateblue: [72, 61, 139],                                                                                      // 201
    darkslategray: [47, 79, 79],                                                                                       // 202
    darkslategrey: [47, 79, 79],                                                                                       // 203
    darkturquoise: [0, 206, 209],                                                                                      // 204
    darkviolet: [148, 0, 211],                                                                                         // 205
    deeppink: [255, 20, 147],                                                                                          // 206
    deepskyblue: [0, 191, 255],                                                                                        // 207
    dimgray: [105, 105, 105],                                                                                          // 208
    dimgrey: [105, 105, 105],                                                                                          // 209
    dodgerblue: [30, 144, 255],                                                                                        // 210
    firebrick: [178, 34, 34],                                                                                          // 211
    floralwhite: [255, 250, 240],                                                                                      // 212
    forestgreen: [34, 139, 34],                                                                                        // 213
    fuchsia: [255, 0, 255],                                                                                            // 214
    gainsboro: [220, 220, 220],                                                                                        // 215
    ghostwhite: [248, 248, 255],                                                                                       // 216
    gold: [255, 215, 0],                                                                                               // 217
    goldenrod: [218, 165, 32],                                                                                         // 218
    gray: [128, 128, 128],                                                                                             // 219
    grey: [128, 128, 128],                                                                                             // 220
    green: [0, 128, 0],                                                                                                // 221
    greenyellow: [173, 255, 47],                                                                                       // 222
    honeydew: [240, 255, 240],                                                                                         // 223
    hotpink: [255, 105, 180],                                                                                          // 224
    indianred: [205, 92, 92],                                                                                          // 225
    indigo: [75, 0, 130],                                                                                              // 226
    ivory: [255, 255, 240],                                                                                            // 227
    khaki: [240, 230, 140],                                                                                            // 228
    lavender: [230, 230, 250],                                                                                         // 229
    lavenderblush: [255, 240, 245],                                                                                    // 230
    lawngreen: [124, 252, 0],                                                                                          // 231
    lemonchiffon: [255, 250, 205],                                                                                     // 232
    lightblue: [173, 216, 230],                                                                                        // 233
    lightcoral: [240, 128, 128],                                                                                       // 234
    lightcyan: [224, 255, 255],                                                                                        // 235
    lightgoldenrodyellow: [250, 250, 210],                                                                             // 236
    lightgray: [211, 211, 211],                                                                                        // 237
    lightgreen: [144, 238, 144],                                                                                       // 238
    lightgrey: [211, 211, 211],                                                                                        // 239
    lightpink: [255, 182, 193],                                                                                        // 240
    lightsalmon: [255, 160, 122],                                                                                      // 241
    lightseagreen: [32, 178, 170],                                                                                     // 242
    lightskyblue: [135, 206, 250],                                                                                     // 243
    lightslategray: [119, 136, 153],                                                                                   // 244
    lightslategrey: [119, 136, 153],                                                                                   // 245
    lightsteelblue: [176, 196, 222],                                                                                   // 246
    lightyellow: [255, 255, 224],                                                                                      // 247
    lime: [0, 255, 0],                                                                                                 // 248
    limegreen: [50, 205, 50],                                                                                          // 249
    linen: [250, 240, 230],                                                                                            // 250
    magenta: [255, 0, 255],                                                                                            // 251
    maroon: [128, 0, 0],                                                                                               // 252
    mediumaquamarine: [102, 205, 170],                                                                                 // 253
    mediumblue: [0, 0, 205],                                                                                           // 254
    mediumorchid: [186, 85, 211],                                                                                      // 255
    mediumpurple: [147, 112, 219],                                                                                     // 256
    mediumseagreen: [60, 179, 113],                                                                                    // 257
    mediumslateblue: [123, 104, 238],                                                                                  // 258
    mediumspringgreen: [0, 250, 154],                                                                                  // 259
    mediumturquoise: [72, 209, 204],                                                                                   // 260
    mediumvioletred: [199, 21, 133],                                                                                   // 261
    midnightblue: [25, 25, 112],                                                                                       // 262
    mintcream: [245, 255, 250],                                                                                        // 263
    mistyrose: [255, 228, 225],                                                                                        // 264
    moccasin: [255, 228, 181],                                                                                         // 265
    navajowhite: [255, 222, 173],                                                                                      // 266
    navy: [0, 0, 128],                                                                                                 // 267
    oldlace: [253, 245, 230],                                                                                          // 268
    olive: [128, 128, 0],                                                                                              // 269
    olivedrab: [107, 142, 35],                                                                                         // 270
    orange: [255, 165, 0],                                                                                             // 271
    orangered: [255, 69, 0],                                                                                           // 272
    orchid: [218, 112, 214],                                                                                           // 273
    palegoldenrod: [238, 232, 170],                                                                                    // 274
    palegreen: [152, 251, 152],                                                                                        // 275
    paleturquoise: [175, 238, 238],                                                                                    // 276
    palevioletred: [219, 112, 147],                                                                                    // 277
    papayawhip: [255, 239, 213],                                                                                       // 278
    peachpuff: [255, 218, 185],                                                                                        // 279
    peru: [205, 133, 63],                                                                                              // 280
    pink: [255, 192, 203],                                                                                             // 281
    plum: [221, 160, 221],                                                                                             // 282
    powderblue: [176, 224, 230],                                                                                       // 283
    purple: [128, 0, 128],                                                                                             // 284
    red: [255, 0, 0],                                                                                                  // 285
    rosybrown: [188, 143, 143],                                                                                        // 286
    royalblue: [65, 105, 225],                                                                                         // 287
    saddlebrown: [139, 69, 19],                                                                                        // 288
    salmon: [250, 128, 114],                                                                                           // 289
    sandybrown: [244, 164, 96],                                                                                        // 290
    seagreen: [46, 139, 87],                                                                                           // 291
    seashell: [255, 245, 238],                                                                                         // 292
    sienna: [160, 82, 45],                                                                                             // 293
    silver: [192, 192, 192],                                                                                           // 294
    skyblue: [135, 206, 235],                                                                                          // 295
    slateblue: [106, 90, 205],                                                                                         // 296
    slategray: [112, 128, 144],                                                                                        // 297
    slategrey: [112, 128, 144],                                                                                        // 298
    snow: [255, 250, 250],                                                                                             // 299
    springgreen: [0, 255, 127],                                                                                        // 300
    steelblue: [70, 130, 180],                                                                                         // 301
    tan: [210, 180, 140],                                                                                              // 302
    teal: [0, 128, 128],                                                                                               // 303
    thistle: [216, 191, 216],                                                                                          // 304
    tomato: [255, 99, 71],                                                                                             // 305
    turquoise: [64, 224, 208],                                                                                         // 306
    violet: [238, 130, 238],                                                                                           // 307
    wheat: [245, 222, 179],                                                                                            // 308
    white: [255, 255, 255],                                                                                            // 309
    whitesmoke: [245, 245, 245],                                                                                       // 310
    yellow: [255, 255, 0],                                                                                             // 311
    yellowgreen: [154, 205, 50]                                                                                        // 312
  };                                                                                                                   // 313
                                                                                                                       // 314
}).call(this);                                                                                                         // 315
                                                                                                                       // 316
},{"../gradient":66}],73:[function(require,module,exports){                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var PDFFont;                                                                                                         // 3
                                                                                                                       // 4
  PDFFont = require('../font');                                                                                        // 5
                                                                                                                       // 6
  module.exports = {                                                                                                   // 7
    initFonts: function() {                                                                                            // 8
      this._fontFamilies = {};                                                                                         // 9
      this._fontCount = 0;                                                                                             // 10
      this._fontSize = 12;                                                                                             // 11
      this._font = null;                                                                                               // 12
      this._registeredFonts = {};                                                                                      // 13
      return this.font('Helvetica');                                                                                   // 14
    },                                                                                                                 // 15
    font: function(src, family, size) {                                                                                // 16
      var cacheKey, font, id, _ref;                                                                                    // 17
      if (typeof family === 'number') {                                                                                // 18
        size = family;                                                                                                 // 19
        family = null;                                                                                                 // 20
      }                                                                                                                // 21
      if (typeof src === 'string' && this._registeredFonts[src]) {                                                     // 22
        cacheKey = src;                                                                                                // 23
        _ref = this._registeredFonts[src], src = _ref.src, family = _ref.family;                                       // 24
      } else {                                                                                                         // 25
        cacheKey = family || src;                                                                                      // 26
        if (typeof cacheKey !== 'string') {                                                                            // 27
          cacheKey = null;                                                                                             // 28
        }                                                                                                              // 29
      }                                                                                                                // 30
      if (size != null) {                                                                                              // 31
        this.fontSize(size);                                                                                           // 32
      }                                                                                                                // 33
      if (font = this._fontFamilies[cacheKey]) {                                                                       // 34
        this._font = font;                                                                                             // 35
        return this;                                                                                                   // 36
      }                                                                                                                // 37
      id = 'F' + (++this._fontCount);                                                                                  // 38
      this._font = new PDFFont(this, src, family, id);                                                                 // 39
      if (font = this._fontFamilies[this._font.name]) {                                                                // 40
        this._font = font;                                                                                             // 41
        return this;                                                                                                   // 42
      }                                                                                                                // 43
      if (cacheKey) {                                                                                                  // 44
        this._fontFamilies[cacheKey] = this._font;                                                                     // 45
      }                                                                                                                // 46
      this._fontFamilies[this._font.name] = this._font;                                                                // 47
      return this;                                                                                                     // 48
    },                                                                                                                 // 49
    fontSize: function(_fontSize) {                                                                                    // 50
      this._fontSize = _fontSize;                                                                                      // 51
      return this;                                                                                                     // 52
    },                                                                                                                 // 53
    currentLineHeight: function(includeGap) {                                                                          // 54
      if (includeGap == null) {                                                                                        // 55
        includeGap = false;                                                                                            // 56
      }                                                                                                                // 57
      return this._font.lineHeight(this._fontSize, includeGap);                                                        // 58
    },                                                                                                                 // 59
    registerFont: function(name, src, family) {                                                                        // 60
      this._registeredFonts[name] = {                                                                                  // 61
        src: src,                                                                                                      // 62
        family: family                                                                                                 // 63
      };                                                                                                               // 64
      return this;                                                                                                     // 65
    }                                                                                                                  // 66
  };                                                                                                                   // 67
                                                                                                                       // 68
}).call(this);                                                                                                         // 69
                                                                                                                       // 70
},{"../font":48}],74:[function(require,module,exports){                                                                //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var PDFImage;                                                                                                        // 3
                                                                                                                       // 4
  PDFImage = require('../image');                                                                                      // 5
                                                                                                                       // 6
  module.exports = {                                                                                                   // 7
    initImages: function() {                                                                                           // 8
      this._imageRegistry = {};                                                                                        // 9
      return this._imageCount = 0;                                                                                     // 10
    },                                                                                                                 // 11
    image: function(src, x, y, options) {                                                                              // 12
      var bh, bp, bw, h, hp, image, ip, w, wp, _base, _name, _ref, _ref1, _ref2;                                       // 13
      if (options == null) {                                                                                           // 14
        options = {};                                                                                                  // 15
      }                                                                                                                // 16
      if (typeof x === 'object') {                                                                                     // 17
        options = x;                                                                                                   // 18
        x = null;                                                                                                      // 19
      }                                                                                                                // 20
      x = (_ref = x != null ? x : options.x) != null ? _ref : this.x;                                                  // 21
      y = (_ref1 = y != null ? y : options.y) != null ? _ref1 : this.y;                                                // 22
      if (!Buffer.isBuffer(src)) {                                                                                     // 23
        image = this._imageRegistry[src];                                                                              // 24
      }                                                                                                                // 25
      if (!image) {                                                                                                    // 26
        image = PDFImage.open(src, 'I' + (++this._imageCount));                                                        // 27
        image.embed(this);                                                                                             // 28
        if (!Buffer.isBuffer(src)) {                                                                                   // 29
          this._imageRegistry[src] = image;                                                                            // 30
        }                                                                                                              // 31
      }                                                                                                                // 32
      if ((_base = this.page.xobjects)[_name = image.label] == null) {                                                 // 33
        _base[_name] = image.obj;                                                                                      // 34
      }                                                                                                                // 35
      w = options.width || image.width;                                                                                // 36
      h = options.height || image.height;                                                                              // 37
      if (options.width && !options.height) {                                                                          // 38
        wp = w / image.width;                                                                                          // 39
        w = image.width * wp;                                                                                          // 40
        h = image.height * wp;                                                                                         // 41
      } else if (options.height && !options.width) {                                                                   // 42
        hp = h / image.height;                                                                                         // 43
        w = image.width * hp;                                                                                          // 44
        h = image.height * hp;                                                                                         // 45
      } else if (options.scale) {                                                                                      // 46
        w = image.width * options.scale;                                                                               // 47
        h = image.height * options.scale;                                                                              // 48
      } else if (options.fit) {                                                                                        // 49
        _ref2 = options.fit, bw = _ref2[0], bh = _ref2[1];                                                             // 50
        bp = bw / bh;                                                                                                  // 51
        ip = image.width / image.height;                                                                               // 52
        if (ip > bp) {                                                                                                 // 53
          w = bw;                                                                                                      // 54
          h = bw / ip;                                                                                                 // 55
        } else {                                                                                                       // 56
          h = bh;                                                                                                      // 57
          w = bh * ip;                                                                                                 // 58
        }                                                                                                              // 59
        if (options.align === 'center') {                                                                              // 60
          x = x + bw / 2 - w / 2;                                                                                      // 61
        } else if (options.align === 'right') {                                                                        // 62
          x = x + bw - w;                                                                                              // 63
        }                                                                                                              // 64
        if (options.valign === 'center') {                                                                             // 65
          y = y + bh / 2 - h / 2;                                                                                      // 66
        } else if (options.valign === 'bottom') {                                                                      // 67
          y = y + bh - h;                                                                                              // 68
        }                                                                                                              // 69
      }                                                                                                                // 70
      if (this.y === y) {                                                                                              // 71
        this.y += h;                                                                                                   // 72
      }                                                                                                                // 73
      this.save();                                                                                                     // 74
      this.transform(w, 0, 0, -h, x, y + h);                                                                           // 75
      this.addContent("/" + image.label + " Do");                                                                      // 76
      this.restore();                                                                                                  // 77
      return this;                                                                                                     // 78
    }                                                                                                                  // 79
  };                                                                                                                   // 80
                                                                                                                       // 81
}).call(this);                                                                                                         // 82
                                                                                                                       // 83
}).call(this,{"isBuffer":require("../../../../../../../cosmos_browserify/.0.10.0.g9wtft++os+web.browser+web.cordova/plugin.CosmosBrowserify.os/npm/node_modules/meteor/CosmosBrowserify/CosmosBrowserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})
                                                                                                                       //
},{"../../../../../../../cosmos_browserify/.0.10.0.g9wtft++os+web.browser+web.cordova/plugin.CosmosBrowserify.os/npm/node_modules/meteor/CosmosBrowserify/CosmosBrowserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":23,"../image":67}],75:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var LineWrapper;                                                                                                     // 3
                                                                                                                       // 4
  LineWrapper = require('../line_wrapper');                                                                            // 5
                                                                                                                       // 6
  module.exports = {                                                                                                   // 7
    initText: function() {                                                                                             // 8
      this.x = 0;                                                                                                      // 9
      this.y = 0;                                                                                                      // 10
      return this._lineGap = 0;                                                                                        // 11
    },                                                                                                                 // 12
    lineGap: function(_lineGap) {                                                                                      // 13
      this._lineGap = _lineGap;                                                                                        // 14
      return this;                                                                                                     // 15
    },                                                                                                                 // 16
    moveDown: function(lines) {                                                                                        // 17
      if (lines == null) {                                                                                             // 18
        lines = 1;                                                                                                     // 19
      }                                                                                                                // 20
      this.y += this.currentLineHeight(true) * lines + this._lineGap;                                                  // 21
      return this;                                                                                                     // 22
    },                                                                                                                 // 23
    moveUp: function(lines) {                                                                                          // 24
      if (lines == null) {                                                                                             // 25
        lines = 1;                                                                                                     // 26
      }                                                                                                                // 27
      this.y -= this.currentLineHeight(true) * lines + this._lineGap;                                                  // 28
      return this;                                                                                                     // 29
    },                                                                                                                 // 30
    _text: function(text, x, y, options, lineCallback) {                                                               // 31
      var line, wrapper, _i, _len, _ref;                                                                               // 32
      options = this._initOptions(x, y, options);                                                                      // 33
      text = '' + text;                                                                                                // 34
      if (options.wordSpacing) {                                                                                       // 35
        text = text.replace(/\s{2,}/g, ' ');                                                                           // 36
      }                                                                                                                // 37
      if (options.width) {                                                                                             // 38
        wrapper = this._wrapper;                                                                                       // 39
        if (!wrapper) {                                                                                                // 40
          wrapper = new LineWrapper(this, options);                                                                    // 41
          wrapper.on('line', lineCallback);                                                                            // 42
        }                                                                                                              // 43
        this._wrapper = options.continued ? wrapper : null;                                                            // 44
        this._textOptions = options.continued ? options : null;                                                        // 45
        wrapper.wrap(text, options);                                                                                   // 46
      } else {                                                                                                         // 47
        _ref = text.split('\n');                                                                                       // 48
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                            // 49
          line = _ref[_i];                                                                                             // 50
          lineCallback(line, options);                                                                                 // 51
        }                                                                                                              // 52
      }                                                                                                                // 53
      return this;                                                                                                     // 54
    },                                                                                                                 // 55
    text: function(text, x, y, options) {                                                                              // 56
      return this._text(text, x, y, options, this._line.bind(this));                                                   // 57
    },                                                                                                                 // 58
    widthOfString: function(string, options) {                                                                         // 59
      if (options == null) {                                                                                           // 60
        options = {};                                                                                                  // 61
      }                                                                                                                // 62
      return this._font.widthOfString(string, this._fontSize) + (options.characterSpacing || 0) * (string.length - 1);
    },                                                                                                                 // 64
    heightOfString: function(text, options) {                                                                          // 65
      var height, lineGap, x, y;                                                                                       // 66
      if (options == null) {                                                                                           // 67
        options = {};                                                                                                  // 68
      }                                                                                                                // 69
      x = this.x, y = this.y;                                                                                          // 70
      options = this._initOptions(options);                                                                            // 71
      options.height = Infinity;                                                                                       // 72
      lineGap = options.lineGap || this._lineGap || 0;                                                                 // 73
      this._text(text, this.x, this.y, options, (function(_this) {                                                     // 74
        return function(line, options) {                                                                               // 75
          return _this.y += _this.currentLineHeight(true) + lineGap;                                                   // 76
        };                                                                                                             // 77
      })(this));                                                                                                       // 78
      height = this.y - y;                                                                                             // 79
      this.x = x;                                                                                                      // 80
      this.y = y;                                                                                                      // 81
      return height;                                                                                                   // 82
    },                                                                                                                 // 83
    list: function(list, x, y, options, wrapper) {                                                                     // 84
      var flatten, i, indent, itemIndent, items, level, levels, r;                                                     // 85
      options = this._initOptions(x, y, options);                                                                      // 86
      r = Math.round((this._font.ascender / 1000 * this._fontSize) / 3);                                               // 87
      indent = options.textIndent || r * 5;                                                                            // 88
      itemIndent = options.bulletIndent || r * 8;                                                                      // 89
      level = 1;                                                                                                       // 90
      items = [];                                                                                                      // 91
      levels = [];                                                                                                     // 92
      flatten = function(list) {                                                                                       // 93
        var i, item, _i, _len, _results;                                                                               // 94
        _results = [];                                                                                                 // 95
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {                                                    // 96
          item = list[i];                                                                                              // 97
          if (Array.isArray(item)) {                                                                                   // 98
            level++;                                                                                                   // 99
            flatten(item);                                                                                             // 100
            _results.push(level--);                                                                                    // 101
          } else {                                                                                                     // 102
            items.push(item);                                                                                          // 103
            _results.push(levels.push(level));                                                                         // 104
          }                                                                                                            // 105
        }                                                                                                              // 106
        return _results;                                                                                               // 107
      };                                                                                                               // 108
      flatten(list);                                                                                                   // 109
      wrapper = new LineWrapper(this, options);                                                                        // 110
      wrapper.on('line', this._line.bind(this));                                                                       // 111
      level = 1;                                                                                                       // 112
      i = 0;                                                                                                           // 113
      wrapper.on('firstLine', (function(_this) {                                                                       // 114
        return function() {                                                                                            // 115
          var diff, l;                                                                                                 // 116
          if ((l = levels[i++]) !== level) {                                                                           // 117
            diff = itemIndent * (l - level);                                                                           // 118
            _this.x += diff;                                                                                           // 119
            wrapper.lineWidth -= diff;                                                                                 // 120
            level = l;                                                                                                 // 121
          }                                                                                                            // 122
          _this.circle(_this.x - indent + r, _this.y + r + (r / 2), r);                                                // 123
          return _this.fill();                                                                                         // 124
        };                                                                                                             // 125
      })(this));                                                                                                       // 126
      wrapper.on('sectionStart', (function(_this) {                                                                    // 127
        return function() {                                                                                            // 128
          var pos;                                                                                                     // 129
          pos = indent + itemIndent * (level - 1);                                                                     // 130
          _this.x += pos;                                                                                              // 131
          return wrapper.lineWidth -= pos;                                                                             // 132
        };                                                                                                             // 133
      })(this));                                                                                                       // 134
      wrapper.on('sectionEnd', (function(_this) {                                                                      // 135
        return function() {                                                                                            // 136
          var pos;                                                                                                     // 137
          pos = indent + itemIndent * (level - 1);                                                                     // 138
          _this.x -= pos;                                                                                              // 139
          return wrapper.lineWidth += pos;                                                                             // 140
        };                                                                                                             // 141
      })(this));                                                                                                       // 142
      wrapper.wrap(items.join('\n'), options);                                                                         // 143
      return this;                                                                                                     // 144
    },                                                                                                                 // 145
    _initOptions: function(x, y, options) {                                                                            // 146
      var key, margins, val, _ref;                                                                                     // 147
      if (x == null) {                                                                                                 // 148
        x = {};                                                                                                        // 149
      }                                                                                                                // 150
      if (options == null) {                                                                                           // 151
        options = {};                                                                                                  // 152
      }                                                                                                                // 153
      if (typeof x === 'object') {                                                                                     // 154
        options = x;                                                                                                   // 155
        x = null;                                                                                                      // 156
      }                                                                                                                // 157
      options = (function() {                                                                                          // 158
        var k, opts, v;                                                                                                // 159
        opts = {};                                                                                                     // 160
        for (k in options) {                                                                                           // 161
          v = options[k];                                                                                              // 162
          opts[k] = v;                                                                                                 // 163
        }                                                                                                              // 164
        return opts;                                                                                                   // 165
      })();                                                                                                            // 166
      if (this._textOptions) {                                                                                         // 167
        _ref = this._textOptions;                                                                                      // 168
        for (key in _ref) {                                                                                            // 169
          val = _ref[key];                                                                                             // 170
          if (key !== 'continued') {                                                                                   // 171
            if (options[key] == null) {                                                                                // 172
              options[key] = val;                                                                                      // 173
            }                                                                                                          // 174
          }                                                                                                            // 175
        }                                                                                                              // 176
      }                                                                                                                // 177
      if (x != null) {                                                                                                 // 178
        this.x = x;                                                                                                    // 179
      }                                                                                                                // 180
      if (y != null) {                                                                                                 // 181
        this.y = y;                                                                                                    // 182
      }                                                                                                                // 183
      if (options.lineBreak !== false) {                                                                               // 184
        margins = this.page.margins;                                                                                   // 185
        if (options.width == null) {                                                                                   // 186
          options.width = this.page.width - this.x - margins.right;                                                    // 187
        }                                                                                                              // 188
      }                                                                                                                // 189
      options.columns || (options.columns = 0);                                                                        // 190
      if (options.columnGap == null) {                                                                                 // 191
        options.columnGap = 18;                                                                                        // 192
      }                                                                                                                // 193
      return options;                                                                                                  // 194
    },                                                                                                                 // 195
    _line: function(text, options, wrapper) {                                                                          // 196
      var lineGap;                                                                                                     // 197
      if (options == null) {                                                                                           // 198
        options = {};                                                                                                  // 199
      }                                                                                                                // 200
      this._fragment(text, this.x, this.y, options);                                                                   // 201
      lineGap = options.lineGap || this._lineGap || 0;                                                                 // 202
      if (!wrapper) {                                                                                                  // 203
        return this.x += this.widthOfString(text);                                                                     // 204
      } else {                                                                                                         // 205
        return this.y += this.currentLineHeight(true) + lineGap;                                                       // 206
      }                                                                                                                // 207
    },                                                                                                                 // 208
    _fragment: function(text, x, y, options) {                                                                         // 209
      var align, characterSpacing, commands, d, encoded, i, lineWidth, lineY, mode, renderedWidth, spaceWidth, textWidth, word, wordSpacing, words, _base, _i, _len, _name;
      text = '' + text;                                                                                                // 211
      if (text.length === 0) {                                                                                         // 212
        return;                                                                                                        // 213
      }                                                                                                                // 214
      align = options.align || 'left';                                                                                 // 215
      wordSpacing = options.wordSpacing || 0;                                                                          // 216
      characterSpacing = options.characterSpacing || 0;                                                                // 217
      if (options.width) {                                                                                             // 218
        switch (align) {                                                                                               // 219
          case 'right':                                                                                                // 220
            textWidth = this.widthOfString(text.replace(/\s+$/, ''), options);                                         // 221
            x += options.lineWidth - textWidth;                                                                        // 222
            break;                                                                                                     // 223
          case 'center':                                                                                               // 224
            x += options.lineWidth / 2 - options.textWidth / 2;                                                        // 225
            break;                                                                                                     // 226
          case 'justify':                                                                                              // 227
            words = text.trim().split(/\s+/);                                                                          // 228
            textWidth = this.widthOfString(text.replace(/\s+/g, ''), options);                                         // 229
            spaceWidth = this.widthOfString(' ') + characterSpacing;                                                   // 230
            wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);   // 231
        }                                                                                                              // 232
      }                                                                                                                // 233
      renderedWidth = options.textWidth + (wordSpacing * (options.wordCount - 1)) + (characterSpacing * (text.length - 1));
      if (options.link) {                                                                                              // 235
        this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);                                        // 236
      }                                                                                                                // 237
      if (options.underline || options.strike) {                                                                       // 238
        this.save();                                                                                                   // 239
        if (!options.stroke) {                                                                                         // 240
          this.strokeColor.apply(this, this._fillColor);                                                               // 241
        }                                                                                                              // 242
        lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);                                       // 243
        this.lineWidth(lineWidth);                                                                                     // 244
        d = options.underline ? 1 : 2;                                                                                 // 245
        lineY = y + this.currentLineHeight() / d;                                                                      // 246
        if (options.underline) {                                                                                       // 247
          lineY -= lineWidth;                                                                                          // 248
        }                                                                                                              // 249
        this.moveTo(x, lineY);                                                                                         // 250
        this.lineTo(x + renderedWidth, lineY);                                                                         // 251
        this.stroke();                                                                                                 // 252
        this.restore();                                                                                                // 253
      }                                                                                                                // 254
      this.save();                                                                                                     // 255
      this.transform(1, 0, 0, -1, 0, this.page.height);                                                                // 256
      y = this.page.height - y - (this._font.ascender / 1000 * this._fontSize);                                        // 257
      if ((_base = this.page.fonts)[_name = this._font.id] == null) {                                                  // 258
        _base[_name] = this._font.ref();                                                                               // 259
      }                                                                                                                // 260
      this._font.use(text);                                                                                            // 261
      this.addContent("BT");                                                                                           // 262
      this.addContent("" + x + " " + y + " Td");                                                                       // 263
      this.addContent("/" + this._font.id + " " + this._fontSize + " Tf");                                             // 264
      mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;                                              // 265
      if (mode) {                                                                                                      // 266
        this.addContent("" + mode + " Tr");                                                                            // 267
      }                                                                                                                // 268
      if (characterSpacing) {                                                                                          // 269
        this.addContent("" + characterSpacing + " Tc");                                                                // 270
      }                                                                                                                // 271
      if (wordSpacing) {                                                                                               // 272
        words = text.trim().split(/\s+/);                                                                              // 273
        wordSpacing += this.widthOfString(' ') + characterSpacing;                                                     // 274
        wordSpacing *= 1000 / this._fontSize;                                                                          // 275
        commands = [];                                                                                                 // 276
        for (_i = 0, _len = words.length; _i < _len; _i++) {                                                           // 277
          word = words[_i];                                                                                            // 278
          encoded = this._font.encode(word);                                                                           // 279
          encoded = ((function() {                                                                                     // 280
            var _j, _ref, _results;                                                                                    // 281
            _results = [];                                                                                             // 282
            for (i = _j = 0, _ref = encoded.length; _j < _ref; i = _j += 1) {                                          // 283
              _results.push(encoded.charCodeAt(i).toString(16));                                                       // 284
            }                                                                                                          // 285
            return _results;                                                                                           // 286
          })()).join('');                                                                                              // 287
          commands.push("<" + encoded + "> " + (-wordSpacing));                                                        // 288
        }                                                                                                              // 289
        this.addContent("[" + (commands.join(' ')) + "] TJ");                                                          // 290
      } else {                                                                                                         // 291
        encoded = this._font.encode(text);                                                                             // 292
        encoded = ((function() {                                                                                       // 293
          var _j, _ref, _results;                                                                                      // 294
          _results = [];                                                                                               // 295
          for (i = _j = 0, _ref = encoded.length; _j < _ref; i = _j += 1) {                                            // 296
            _results.push(encoded.charCodeAt(i).toString(16));                                                         // 297
          }                                                                                                            // 298
          return _results;                                                                                             // 299
        })()).join('');                                                                                                // 300
        this.addContent("<" + encoded + "> Tj");                                                                       // 301
      }                                                                                                                // 302
      this.addContent("ET");                                                                                           // 303
      return this.restore();                                                                                           // 304
    }                                                                                                                  // 305
  };                                                                                                                   // 306
                                                                                                                       // 307
}).call(this);                                                                                                         // 308
                                                                                                                       // 309
},{"../line_wrapper":70}],76:[function(require,module,exports){                                                        //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var KAPPA, SVGPath,                                                                                                  // 3
    __slice = [].slice;                                                                                                // 4
                                                                                                                       // 5
  SVGPath = require('../path');                                                                                        // 6
                                                                                                                       // 7
  KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);                                                                          // 8
                                                                                                                       // 9
  module.exports = {                                                                                                   // 10
    initVector: function() {                                                                                           // 11
      this._ctm = [1, 0, 0, 1, 0, 0];                                                                                  // 12
      return this._ctmStack = [];                                                                                      // 13
    },                                                                                                                 // 14
    save: function() {                                                                                                 // 15
      this._ctmStack.push(this._ctm.slice());                                                                          // 16
      return this.addContent('q');                                                                                     // 17
    },                                                                                                                 // 18
    restore: function() {                                                                                              // 19
      this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];                                                          // 20
      return this.addContent('Q');                                                                                     // 21
    },                                                                                                                 // 22
    closePath: function() {                                                                                            // 23
      return this.addContent('h');                                                                                     // 24
    },                                                                                                                 // 25
    lineWidth: function(w) {                                                                                           // 26
      return this.addContent("" + w + " w");                                                                           // 27
    },                                                                                                                 // 28
    _CAP_STYLES: {                                                                                                     // 29
      BUTT: 0,                                                                                                         // 30
      ROUND: 1,                                                                                                        // 31
      SQUARE: 2                                                                                                        // 32
    },                                                                                                                 // 33
    lineCap: function(c) {                                                                                             // 34
      if (typeof c === 'string') {                                                                                     // 35
        c = this._CAP_STYLES[c.toUpperCase()];                                                                         // 36
      }                                                                                                                // 37
      return this.addContent("" + c + " J");                                                                           // 38
    },                                                                                                                 // 39
    _JOIN_STYLES: {                                                                                                    // 40
      MITER: 0,                                                                                                        // 41
      ROUND: 1,                                                                                                        // 42
      BEVEL: 2                                                                                                         // 43
    },                                                                                                                 // 44
    lineJoin: function(j) {                                                                                            // 45
      if (typeof j === 'string') {                                                                                     // 46
        j = this._JOIN_STYLES[j.toUpperCase()];                                                                        // 47
      }                                                                                                                // 48
      return this.addContent("" + j + " j");                                                                           // 49
    },                                                                                                                 // 50
    miterLimit: function(m) {                                                                                          // 51
      return this.addContent("" + m + " M");                                                                           // 52
    },                                                                                                                 // 53
    dash: function(length, options) {                                                                                  // 54
      var phase, space, _ref;                                                                                          // 55
      if (options == null) {                                                                                           // 56
        options = {};                                                                                                  // 57
      }                                                                                                                // 58
      if (length == null) {                                                                                            // 59
        return this;                                                                                                   // 60
      }                                                                                                                // 61
      space = (_ref = options.space) != null ? _ref : length;                                                          // 62
      phase = options.phase || 0;                                                                                      // 63
      return this.addContent("[" + length + " " + space + "] " + phase + " d");                                        // 64
    },                                                                                                                 // 65
    undash: function() {                                                                                               // 66
      return this.addContent("[] 0 d");                                                                                // 67
    },                                                                                                                 // 68
    moveTo: function(x, y) {                                                                                           // 69
      return this.addContent("" + x + " " + y + " m");                                                                 // 70
    },                                                                                                                 // 71
    lineTo: function(x, y) {                                                                                           // 72
      return this.addContent("" + x + " " + y + " l");                                                                 // 73
    },                                                                                                                 // 74
    bezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {                                                            // 75
      return this.addContent("" + cp1x + " " + cp1y + " " + cp2x + " " + cp2y + " " + x + " " + y + " c");             // 76
    },                                                                                                                 // 77
    quadraticCurveTo: function(cpx, cpy, x, y) {                                                                       // 78
      return this.addContent("" + cpx + " " + cpy + " " + x + " " + y + " v");                                         // 79
    },                                                                                                                 // 80
    rect: function(x, y, w, h) {                                                                                       // 81
      return this.addContent("" + x + " " + y + " " + w + " " + h + " re");                                            // 82
    },                                                                                                                 // 83
    roundedRect: function(x, y, w, h, r) {                                                                             // 84
      if (r == null) {                                                                                                 // 85
        r = 0;                                                                                                         // 86
      }                                                                                                                // 87
      this.moveTo(x + r, y);                                                                                           // 88
      this.lineTo(x + w - r, y);                                                                                       // 89
      this.quadraticCurveTo(x + w, y, x + w, y + r);                                                                   // 90
      this.lineTo(x + w, y + h - r);                                                                                   // 91
      this.quadraticCurveTo(x + w, y + h, x + w - r, y + h);                                                           // 92
      this.lineTo(x + r, y + h);                                                                                       // 93
      this.quadraticCurveTo(x, y + h, x, y + h - r);                                                                   // 94
      this.lineTo(x, y + r);                                                                                           // 95
      return this.quadraticCurveTo(x, y, x + r, y);                                                                    // 96
    },                                                                                                                 // 97
    ellipse: function(x, y, r1, r2) {                                                                                  // 98
      var ox, oy, xe, xm, ye, ym;                                                                                      // 99
      if (r2 == null) {                                                                                                // 100
        r2 = r1;                                                                                                       // 101
      }                                                                                                                // 102
      x -= r1;                                                                                                         // 103
      y -= r2;                                                                                                         // 104
      ox = r1 * KAPPA;                                                                                                 // 105
      oy = r2 * KAPPA;                                                                                                 // 106
      xe = x + r1 * 2;                                                                                                 // 107
      ye = y + r2 * 2;                                                                                                 // 108
      xm = x + r1;                                                                                                     // 109
      ym = y + r2;                                                                                                     // 110
      this.moveTo(x, ym);                                                                                              // 111
      this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);                                                               // 112
      this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);                                                             // 113
      this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);                                                            // 114
      this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);                                                              // 115
      return this.closePath();                                                                                         // 116
    },                                                                                                                 // 117
    circle: function(x, y, radius) {                                                                                   // 118
      return this.ellipse(x, y, radius);                                                                               // 119
    },                                                                                                                 // 120
    polygon: function() {                                                                                              // 121
      var point, points, _i, _len;                                                                                     // 122
      points = 1 <= arguments.length ? __slice.call(arguments, 0) : [];                                                // 123
      this.moveTo.apply(this, points.shift());                                                                         // 124
      for (_i = 0, _len = points.length; _i < _len; _i++) {                                                            // 125
        point = points[_i];                                                                                            // 126
        this.lineTo.apply(this, point);                                                                                // 127
      }                                                                                                                // 128
      return this.closePath();                                                                                         // 129
    },                                                                                                                 // 130
    path: function(path) {                                                                                             // 131
      SVGPath.apply(this, path);                                                                                       // 132
      return this;                                                                                                     // 133
    },                                                                                                                 // 134
    _windingRule: function(rule) {                                                                                     // 135
      if (/even-?odd/.test(rule)) {                                                                                    // 136
        return '*';                                                                                                    // 137
      }                                                                                                                // 138
      return '';                                                                                                       // 139
    },                                                                                                                 // 140
    fill: function(color, rule) {                                                                                      // 141
      if (/(even-?odd)|(non-?zero)/.test(color)) {                                                                     // 142
        rule = color;                                                                                                  // 143
        color = null;                                                                                                  // 144
      }                                                                                                                // 145
      if (color) {                                                                                                     // 146
        this.fillColor(color);                                                                                         // 147
      }                                                                                                                // 148
      return this.addContent('f' + this._windingRule(rule));                                                           // 149
    },                                                                                                                 // 150
    stroke: function(color) {                                                                                          // 151
      if (color) {                                                                                                     // 152
        this.strokeColor(color);                                                                                       // 153
      }                                                                                                                // 154
      return this.addContent('S');                                                                                     // 155
    },                                                                                                                 // 156
    fillAndStroke: function(fillColor, strokeColor, rule) {                                                            // 157
      var isFillRule;                                                                                                  // 158
      if (strokeColor == null) {                                                                                       // 159
        strokeColor = fillColor;                                                                                       // 160
      }                                                                                                                // 161
      isFillRule = /(even-?odd)|(non-?zero)/;                                                                          // 162
      if (isFillRule.test(fillColor)) {                                                                                // 163
        rule = fillColor;                                                                                              // 164
        fillColor = null;                                                                                              // 165
      }                                                                                                                // 166
      if (isFillRule.test(strokeColor)) {                                                                              // 167
        rule = strokeColor;                                                                                            // 168
        strokeColor = fillColor;                                                                                       // 169
      }                                                                                                                // 170
      if (fillColor) {                                                                                                 // 171
        this.fillColor(fillColor);                                                                                     // 172
        this.strokeColor(strokeColor);                                                                                 // 173
      }                                                                                                                // 174
      return this.addContent('B' + this._windingRule(rule));                                                           // 175
    },                                                                                                                 // 176
    clip: function(rule) {                                                                                             // 177
      return this.addContent('W' + this._windingRule(rule) + ' n');                                                    // 178
    },                                                                                                                 // 179
    transform: function(m11, m12, m21, m22, dx, dy) {                                                                  // 180
      var m, m0, m1, m2, m3, m4, m5, v, values;                                                                        // 181
      m = this._ctm;                                                                                                   // 182
      m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];                                                // 183
      m[0] = m0 * m11 + m2 * m12;                                                                                      // 184
      m[1] = m1 * m11 + m3 * m12;                                                                                      // 185
      m[2] = m0 * m21 + m2 * m22;                                                                                      // 186
      m[3] = m1 * m21 + m3 * m22;                                                                                      // 187
      m[4] = m0 * dx + m2 * dy + m4;                                                                                   // 188
      m[5] = m1 * dx + m3 * dy + m5;                                                                                   // 189
      values = ((function() {                                                                                          // 190
        var _i, _len, _ref, _results;                                                                                  // 191
        _ref = [m11, m12, m21, m22, dx, dy];                                                                           // 192
        _results = [];                                                                                                 // 193
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                            // 194
          v = _ref[_i];                                                                                                // 195
          _results.push(+v.toFixed(5));                                                                                // 196
        }                                                                                                              // 197
        return _results;                                                                                               // 198
      })()).join(' ');                                                                                                 // 199
      return this.addContent("" + values + " cm");                                                                     // 200
    },                                                                                                                 // 201
    translate: function(x, y) {                                                                                        // 202
      return this.transform(1, 0, 0, 1, x, y);                                                                         // 203
    },                                                                                                                 // 204
    rotate: function(angle, options) {                                                                                 // 205
      var cos, rad, sin, x, x1, y, y1, _ref;                                                                           // 206
      if (options == null) {                                                                                           // 207
        options = {};                                                                                                  // 208
      }                                                                                                                // 209
      rad = angle * Math.PI / 180;                                                                                     // 210
      cos = Math.cos(rad);                                                                                             // 211
      sin = Math.sin(rad);                                                                                             // 212
      x = y = 0;                                                                                                       // 213
      if (options.origin != null) {                                                                                    // 214
        _ref = options.origin, x = _ref[0], y = _ref[1];                                                               // 215
        x1 = x * cos - y * sin;                                                                                        // 216
        y1 = x * sin + y * cos;                                                                                        // 217
        x -= x1;                                                                                                       // 218
        y -= y1;                                                                                                       // 219
      }                                                                                                                // 220
      return this.transform(cos, sin, -sin, cos, x, y);                                                                // 221
    },                                                                                                                 // 222
    scale: function(xFactor, yFactor, options) {                                                                       // 223
      var x, y, _ref;                                                                                                  // 224
      if (yFactor == null) {                                                                                           // 225
        yFactor = xFactor;                                                                                             // 226
      }                                                                                                                // 227
      if (options == null) {                                                                                           // 228
        options = {};                                                                                                  // 229
      }                                                                                                                // 230
      if (arguments.length === 2) {                                                                                    // 231
        yFactor = xFactor;                                                                                             // 232
        options = yFactor;                                                                                             // 233
      }                                                                                                                // 234
      x = y = 0;                                                                                                       // 235
      if (options.origin != null) {                                                                                    // 236
        _ref = options.origin, x = _ref[0], y = _ref[1];                                                               // 237
        x -= xFactor * x;                                                                                              // 238
        y -= yFactor * y;                                                                                              // 239
      }                                                                                                                // 240
      return this.transform(xFactor, 0, 0, yFactor, x, y);                                                             // 241
    }                                                                                                                  // 242
  };                                                                                                                   // 243
                                                                                                                       // 244
}).call(this);                                                                                                         // 245
                                                                                                                       // 246
},{"../path":79}],77:[function(require,module,exports){                                                                //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
PDFObject - converts JavaScript types into their corrisponding PDF types.                                              // 4
By Devon Govett                                                                                                        // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
(function() {                                                                                                          // 8
  var PDFObject, PDFReference;                                                                                         // 9
                                                                                                                       // 10
  PDFObject = (function() {                                                                                            // 11
    var escapable, escapableRe, pad, swapBytes;                                                                        // 12
                                                                                                                       // 13
    function PDFObject() {}                                                                                            // 14
                                                                                                                       // 15
    pad = function(str, length) {                                                                                      // 16
      return (Array(length + 1).join('0') + str).slice(-length);                                                       // 17
    };                                                                                                                 // 18
                                                                                                                       // 19
    escapableRe = /[\n\r\t\b\f\(\)\\]/g;                                                                               // 20
                                                                                                                       // 21
    escapable = {                                                                                                      // 22
      '\n': '\\n',                                                                                                     // 23
      '\r': '\\r',                                                                                                     // 24
      '\t': '\\t',                                                                                                     // 25
      '\b': '\\b',                                                                                                     // 26
      '\f': '\\f',                                                                                                     // 27
      '\\': '\\\\',                                                                                                    // 28
      '(': '\\(',                                                                                                      // 29
      ')': '\\)'                                                                                                       // 30
    };                                                                                                                 // 31
                                                                                                                       // 32
    swapBytes = function(buff) {                                                                                       // 33
      var a, i, l, _i, _ref;                                                                                           // 34
      l = buff.length;                                                                                                 // 35
      if (l & 0x01) {                                                                                                  // 36
        throw new Error("Buffer length must be even");                                                                 // 37
      } else {                                                                                                         // 38
        for (i = _i = 0, _ref = l - 1; _i < _ref; i = _i += 2) {                                                       // 39
          a = buff[i];                                                                                                 // 40
          buff[i] = buff[i + 1];                                                                                       // 41
          buff[i + 1] = a;                                                                                             // 42
        }                                                                                                              // 43
      }                                                                                                                // 44
      return buff;                                                                                                     // 45
    };                                                                                                                 // 46
                                                                                                                       // 47
    PDFObject.convert = function(object) {                                                                             // 48
      var e, i, isUnicode, items, key, out, string, val, _i, _ref;                                                     // 49
      if (typeof object === 'string') {                                                                                // 50
        return '/' + object;                                                                                           // 51
      } else if (object instanceof String) {                                                                           // 52
        string = object.replace(escapableRe, function(c) {                                                             // 53
          return escapable[c];                                                                                         // 54
        });                                                                                                            // 55
        isUnicode = false;                                                                                             // 56
        for (i = _i = 0, _ref = string.length; _i < _ref; i = _i += 1) {                                               // 57
          if (string.charCodeAt(i) > 0x7f) {                                                                           // 58
            isUnicode = true;                                                                                          // 59
            break;                                                                                                     // 60
          }                                                                                                            // 61
        }                                                                                                              // 62
        if (isUnicode) {                                                                                               // 63
          string = swapBytes(new Buffer('\ufeff' + string, 'utf16le')).toString('binary');                             // 64
        }                                                                                                              // 65
        return '(' + string + ')';                                                                                     // 66
      } else if (Buffer.isBuffer(object)) {                                                                            // 67
        return '<' + object.toString('hex') + '>';                                                                     // 68
      } else if (object instanceof PDFReference) {                                                                     // 69
        return object.toString();                                                                                      // 70
      } else if (object instanceof Date) {                                                                             // 71
        return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth(), 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';
      } else if (Array.isArray(object)) {                                                                              // 73
        items = ((function() {                                                                                         // 74
          var _j, _len, _results;                                                                                      // 75
          _results = [];                                                                                               // 76
          for (_j = 0, _len = object.length; _j < _len; _j++) {                                                        // 77
            e = object[_j];                                                                                            // 78
            _results.push(PDFObject.convert(e));                                                                       // 79
          }                                                                                                            // 80
          return _results;                                                                                             // 81
        })()).join(' ');                                                                                               // 82
        return '[' + items + ']';                                                                                      // 83
      } else if ({}.toString.call(object) === '[object Object]') {                                                     // 84
        out = ['<<'];                                                                                                  // 85
        for (key in object) {                                                                                          // 86
          val = object[key];                                                                                           // 87
          out.push('/' + key + ' ' + PDFObject.convert(val));                                                          // 88
        }                                                                                                              // 89
        out.push('>>');                                                                                                // 90
        return out.join('\n');                                                                                         // 91
      } else {                                                                                                         // 92
        return '' + object;                                                                                            // 93
      }                                                                                                                // 94
    };                                                                                                                 // 95
                                                                                                                       // 96
    return PDFObject;                                                                                                  // 97
                                                                                                                       // 98
  })();                                                                                                                // 99
                                                                                                                       // 100
  module.exports = PDFObject;                                                                                          // 101
                                                                                                                       // 102
  PDFReference = require('./reference');                                                                               // 103
                                                                                                                       // 104
}).call(this);                                                                                                         // 105
                                                                                                                       // 106
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"./reference":80,"buffer":17}],78:[function(require,module,exports){                                                //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
PDFPage - represents a single page in the PDF document                                                                 // 4
By Devon Govett                                                                                                        // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
(function() {                                                                                                          // 8
  var PDFPage;                                                                                                         // 9
                                                                                                                       // 10
  PDFPage = (function() {                                                                                              // 11
    var DEFAULT_MARGINS, SIZES;                                                                                        // 12
                                                                                                                       // 13
    function PDFPage(document, options) {                                                                              // 14
      var dimensions;                                                                                                  // 15
      this.document = document;                                                                                        // 16
      if (options == null) {                                                                                           // 17
        options = {};                                                                                                  // 18
      }                                                                                                                // 19
      this.size = options.size || 'letter';                                                                            // 20
      this.layout = options.layout || 'portrait';                                                                      // 21
      if (typeof options.margin === 'number') {                                                                        // 22
        this.margins = {                                                                                               // 23
          top: options.margin,                                                                                         // 24
          left: options.margin,                                                                                        // 25
          bottom: options.margin,                                                                                      // 26
          right: options.margin                                                                                        // 27
        };                                                                                                             // 28
      } else {                                                                                                         // 29
        this.margins = options.margins || DEFAULT_MARGINS;                                                             // 30
      }                                                                                                                // 31
      dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];                              // 32
      this.width = dimensions[this.layout === 'portrait' ? 0 : 1];                                                     // 33
      this.height = dimensions[this.layout === 'portrait' ? 1 : 0];                                                    // 34
      this.content = this.document.ref();                                                                              // 35
      this.resources = this.document.ref({                                                                             // 36
        ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']                                                         // 37
      });                                                                                                              // 38
      Object.defineProperties(this, {                                                                                  // 39
        fonts: {                                                                                                       // 40
          get: (function(_this) {                                                                                      // 41
            return function() {                                                                                        // 42
              var _base;                                                                                               // 43
              return (_base = _this.resources.data).Font != null ? _base.Font : _base.Font = {};                       // 44
            };                                                                                                         // 45
          })(this)                                                                                                     // 46
        },                                                                                                             // 47
        xobjects: {                                                                                                    // 48
          get: (function(_this) {                                                                                      // 49
            return function() {                                                                                        // 50
              var _base;                                                                                               // 51
              return (_base = _this.resources.data).XObject != null ? _base.XObject : _base.XObject = {};              // 52
            };                                                                                                         // 53
          })(this)                                                                                                     // 54
        },                                                                                                             // 55
        ext_gstates: {                                                                                                 // 56
          get: (function(_this) {                                                                                      // 57
            return function() {                                                                                        // 58
              var _base;                                                                                               // 59
              return (_base = _this.resources.data).ExtGState != null ? _base.ExtGState : _base.ExtGState = {};        // 60
            };                                                                                                         // 61
          })(this)                                                                                                     // 62
        },                                                                                                             // 63
        patterns: {                                                                                                    // 64
          get: (function(_this) {                                                                                      // 65
            return function() {                                                                                        // 66
              var _base;                                                                                               // 67
              return (_base = _this.resources.data).Pattern != null ? _base.Pattern : _base.Pattern = {};              // 68
            };                                                                                                         // 69
          })(this)                                                                                                     // 70
        },                                                                                                             // 71
        annotations: {                                                                                                 // 72
          get: (function(_this) {                                                                                      // 73
            return function() {                                                                                        // 74
              var _base;                                                                                               // 75
              return (_base = _this.dictionary.data).Annots != null ? _base.Annots : _base.Annots = [];                // 76
            };                                                                                                         // 77
          })(this)                                                                                                     // 78
        }                                                                                                              // 79
      });                                                                                                              // 80
      this.dictionary = this.document.ref({                                                                            // 81
        Type: 'Page',                                                                                                  // 82
        Parent: this.document._root.data.Pages,                                                                        // 83
        MediaBox: [0, 0, this.width, this.height],                                                                     // 84
        Contents: this.content,                                                                                        // 85
        Resources: this.resources                                                                                      // 86
      });                                                                                                              // 87
    }                                                                                                                  // 88
                                                                                                                       // 89
    PDFPage.prototype.maxY = function() {                                                                              // 90
      return this.height - this.margins.bottom;                                                                        // 91
    };                                                                                                                 // 92
                                                                                                                       // 93
    PDFPage.prototype.write = function(chunk) {                                                                        // 94
      return this.content.write(chunk);                                                                                // 95
    };                                                                                                                 // 96
                                                                                                                       // 97
    PDFPage.prototype.end = function() {                                                                               // 98
      this.dictionary.end();                                                                                           // 99
      this.resources.end();                                                                                            // 100
      return this.content.end();                                                                                       // 101
    };                                                                                                                 // 102
                                                                                                                       // 103
    DEFAULT_MARGINS = {                                                                                                // 104
      top: 72,                                                                                                         // 105
      left: 72,                                                                                                        // 106
      bottom: 72,                                                                                                      // 107
      right: 72                                                                                                        // 108
    };                                                                                                                 // 109
                                                                                                                       // 110
    SIZES = {                                                                                                          // 111
      '4A0': [4767.87, 6740.79],                                                                                       // 112
      '2A0': [3370.39, 4767.87],                                                                                       // 113
      A0: [2383.94, 3370.39],                                                                                          // 114
      A1: [1683.78, 2383.94],                                                                                          // 115
      A2: [1190.55, 1683.78],                                                                                          // 116
      A3: [841.89, 1190.55],                                                                                           // 117
      A4: [595.28, 841.89],                                                                                            // 118
      A5: [419.53, 595.28],                                                                                            // 119
      A6: [297.64, 419.53],                                                                                            // 120
      A7: [209.76, 297.64],                                                                                            // 121
      A8: [147.40, 209.76],                                                                                            // 122
      A9: [104.88, 147.40],                                                                                            // 123
      A10: [73.70, 104.88],                                                                                            // 124
      B0: [2834.65, 4008.19],                                                                                          // 125
      B1: [2004.09, 2834.65],                                                                                          // 126
      B2: [1417.32, 2004.09],                                                                                          // 127
      B3: [1000.63, 1417.32],                                                                                          // 128
      B4: [708.66, 1000.63],                                                                                           // 129
      B5: [498.90, 708.66],                                                                                            // 130
      B6: [354.33, 498.90],                                                                                            // 131
      B7: [249.45, 354.33],                                                                                            // 132
      B8: [175.75, 249.45],                                                                                            // 133
      B9: [124.72, 175.75],                                                                                            // 134
      B10: [87.87, 124.72],                                                                                            // 135
      C0: [2599.37, 3676.54],                                                                                          // 136
      C1: [1836.85, 2599.37],                                                                                          // 137
      C2: [1298.27, 1836.85],                                                                                          // 138
      C3: [918.43, 1298.27],                                                                                           // 139
      C4: [649.13, 918.43],                                                                                            // 140
      C5: [459.21, 649.13],                                                                                            // 141
      C6: [323.15, 459.21],                                                                                            // 142
      C7: [229.61, 323.15],                                                                                            // 143
      C8: [161.57, 229.61],                                                                                            // 144
      C9: [113.39, 161.57],                                                                                            // 145
      C10: [79.37, 113.39],                                                                                            // 146
      RA0: [2437.80, 3458.27],                                                                                         // 147
      RA1: [1729.13, 2437.80],                                                                                         // 148
      RA2: [1218.90, 1729.13],                                                                                         // 149
      RA3: [864.57, 1218.90],                                                                                          // 150
      RA4: [609.45, 864.57],                                                                                           // 151
      SRA0: [2551.18, 3628.35],                                                                                        // 152
      SRA1: [1814.17, 2551.18],                                                                                        // 153
      SRA2: [1275.59, 1814.17],                                                                                        // 154
      SRA3: [907.09, 1275.59],                                                                                         // 155
      SRA4: [637.80, 907.09],                                                                                          // 156
      EXECUTIVE: [521.86, 756.00],                                                                                     // 157
      FOLIO: [612.00, 936.00],                                                                                         // 158
      LEGAL: [612.00, 1008.00],                                                                                        // 159
      LETTER: [612.00, 792.00],                                                                                        // 160
      TABLOID: [792.00, 1224.00]                                                                                       // 161
    };                                                                                                                 // 162
                                                                                                                       // 163
    return PDFPage;                                                                                                    // 164
                                                                                                                       // 165
  })();                                                                                                                // 166
                                                                                                                       // 167
  module.exports = PDFPage;                                                                                            // 168
                                                                                                                       // 169
}).call(this);                                                                                                         // 170
                                                                                                                       // 171
},{}],79:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var SVGPath;                                                                                                         // 3
                                                                                                                       // 4
  SVGPath = (function() {                                                                                              // 5
    var apply, arcToSegments, cx, cy, parameters, parse, px, py, runners, segmentToBezier, solveArc, sx, sy;           // 6
                                                                                                                       // 7
    function SVGPath() {}                                                                                              // 8
                                                                                                                       // 9
    SVGPath.apply = function(doc, path) {                                                                              // 10
      var commands;                                                                                                    // 11
      commands = parse(path);                                                                                          // 12
      return apply(commands, doc);                                                                                     // 13
    };                                                                                                                 // 14
                                                                                                                       // 15
    parameters = {                                                                                                     // 16
      A: 7,                                                                                                            // 17
      a: 7,                                                                                                            // 18
      C: 6,                                                                                                            // 19
      c: 6,                                                                                                            // 20
      H: 1,                                                                                                            // 21
      h: 1,                                                                                                            // 22
      L: 2,                                                                                                            // 23
      l: 2,                                                                                                            // 24
      M: 2,                                                                                                            // 25
      m: 2,                                                                                                            // 26
      Q: 4,                                                                                                            // 27
      q: 4,                                                                                                            // 28
      S: 4,                                                                                                            // 29
      s: 4,                                                                                                            // 30
      T: 2,                                                                                                            // 31
      t: 2,                                                                                                            // 32
      V: 1,                                                                                                            // 33
      v: 1,                                                                                                            // 34
      Z: 0,                                                                                                            // 35
      z: 0                                                                                                             // 36
    };                                                                                                                 // 37
                                                                                                                       // 38
    parse = function(path) {                                                                                           // 39
      var args, c, cmd, curArg, foundDecimal, params, ret, _i, _len;                                                   // 40
      ret = [];                                                                                                        // 41
      args = [];                                                                                                       // 42
      curArg = "";                                                                                                     // 43
      foundDecimal = false;                                                                                            // 44
      params = 0;                                                                                                      // 45
      for (_i = 0, _len = path.length; _i < _len; _i++) {                                                              // 46
        c = path[_i];                                                                                                  // 47
        if (parameters[c] != null) {                                                                                   // 48
          params = parameters[c];                                                                                      // 49
          if (cmd) {                                                                                                   // 50
            if (curArg.length > 0) {                                                                                   // 51
              args[args.length] = +curArg;                                                                             // 52
            }                                                                                                          // 53
            ret[ret.length] = {                                                                                        // 54
              cmd: cmd,                                                                                                // 55
              args: args                                                                                               // 56
            };                                                                                                         // 57
            args = [];                                                                                                 // 58
            curArg = "";                                                                                               // 59
            foundDecimal = false;                                                                                      // 60
          }                                                                                                            // 61
          cmd = c;                                                                                                     // 62
        } else if ((c === " " || c === ",") || (c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== 'e') || (c === "." && foundDecimal)) {
          if (curArg.length === 0) {                                                                                   // 64
            continue;                                                                                                  // 65
          }                                                                                                            // 66
          if (args.length === params) {                                                                                // 67
            ret[ret.length] = {                                                                                        // 68
              cmd: cmd,                                                                                                // 69
              args: args                                                                                               // 70
            };                                                                                                         // 71
            args = [+curArg];                                                                                          // 72
            if (cmd === "M") {                                                                                         // 73
              cmd = "L";                                                                                               // 74
            }                                                                                                          // 75
            if (cmd === "m") {                                                                                         // 76
              cmd = "l";                                                                                               // 77
            }                                                                                                          // 78
          } else {                                                                                                     // 79
            args[args.length] = +curArg;                                                                               // 80
          }                                                                                                            // 81
          foundDecimal = c === ".";                                                                                    // 82
          curArg = c === '-' || c === '.' ? c : '';                                                                    // 83
        } else {                                                                                                       // 84
          curArg += c;                                                                                                 // 85
          if (c === '.') {                                                                                             // 86
            foundDecimal = true;                                                                                       // 87
          }                                                                                                            // 88
        }                                                                                                              // 89
      }                                                                                                                // 90
      if (curArg.length > 0) {                                                                                         // 91
        if (args.length === params) {                                                                                  // 92
          ret[ret.length] = {                                                                                          // 93
            cmd: cmd,                                                                                                  // 94
            args: args                                                                                                 // 95
          };                                                                                                           // 96
          args = [+curArg];                                                                                            // 97
          if (cmd === "M") {                                                                                           // 98
            cmd = "L";                                                                                                 // 99
          }                                                                                                            // 100
          if (cmd === "m") {                                                                                           // 101
            cmd = "l";                                                                                                 // 102
          }                                                                                                            // 103
        } else {                                                                                                       // 104
          args[args.length] = +curArg;                                                                                 // 105
        }                                                                                                              // 106
      }                                                                                                                // 107
      ret[ret.length] = {                                                                                              // 108
        cmd: cmd,                                                                                                      // 109
        args: args                                                                                                     // 110
      };                                                                                                               // 111
      return ret;                                                                                                      // 112
    };                                                                                                                 // 113
                                                                                                                       // 114
    cx = cy = px = py = sx = sy = 0;                                                                                   // 115
                                                                                                                       // 116
    apply = function(commands, doc) {                                                                                  // 117
      var c, i, _i, _len, _name;                                                                                       // 118
      cx = cy = px = py = sx = sy = 0;                                                                                 // 119
      for (i = _i = 0, _len = commands.length; _i < _len; i = ++_i) {                                                  // 120
        c = commands[i];                                                                                               // 121
        if (typeof runners[_name = c.cmd] === "function") {                                                            // 122
          runners[_name](doc, c.args);                                                                                 // 123
        }                                                                                                              // 124
      }                                                                                                                // 125
      return cx = cy = px = py = 0;                                                                                    // 126
    };                                                                                                                 // 127
                                                                                                                       // 128
    runners = {                                                                                                        // 129
      M: function(doc, a) {                                                                                            // 130
        cx = a[0];                                                                                                     // 131
        cy = a[1];                                                                                                     // 132
        px = py = null;                                                                                                // 133
        sx = cx;                                                                                                       // 134
        sy = cy;                                                                                                       // 135
        return doc.moveTo(cx, cy);                                                                                     // 136
      },                                                                                                               // 137
      m: function(doc, a) {                                                                                            // 138
        cx += a[0];                                                                                                    // 139
        cy += a[1];                                                                                                    // 140
        px = py = null;                                                                                                // 141
        sx = cx;                                                                                                       // 142
        sy = cy;                                                                                                       // 143
        return doc.moveTo(cx, cy);                                                                                     // 144
      },                                                                                                               // 145
      C: function(doc, a) {                                                                                            // 146
        cx = a[4];                                                                                                     // 147
        cy = a[5];                                                                                                     // 148
        px = a[2];                                                                                                     // 149
        py = a[3];                                                                                                     // 150
        return doc.bezierCurveTo.apply(doc, a);                                                                        // 151
      },                                                                                                               // 152
      c: function(doc, a) {                                                                                            // 153
        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);                           // 154
        px = cx + a[2];                                                                                                // 155
        py = cy + a[3];                                                                                                // 156
        cx += a[4];                                                                                                    // 157
        return cy += a[5];                                                                                             // 158
      },                                                                                                               // 159
      S: function(doc, a) {                                                                                            // 160
        if (px === null) {                                                                                             // 161
          px = cx;                                                                                                     // 162
          py = cy;                                                                                                     // 163
        }                                                                                                              // 164
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);                                     // 165
        px = a[0];                                                                                                     // 166
        py = a[1];                                                                                                     // 167
        cx = a[2];                                                                                                     // 168
        return cy = a[3];                                                                                              // 169
      },                                                                                                               // 170
      s: function(doc, a) {                                                                                            // 171
        if (px === null) {                                                                                             // 172
          px = cx;                                                                                                     // 173
          py = cy;                                                                                                     // 174
        }                                                                                                              // 175
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);                 // 176
        px = cx + a[0];                                                                                                // 177
        py = cy + a[1];                                                                                                // 178
        cx += a[2];                                                                                                    // 179
        return cy += a[3];                                                                                             // 180
      },                                                                                                               // 181
      Q: function(doc, a) {                                                                                            // 182
        px = a[0];                                                                                                     // 183
        py = a[1];                                                                                                     // 184
        cx = a[2];                                                                                                     // 185
        cy = a[3];                                                                                                     // 186
        return doc.quadraticCurveTo(a[0], a[1], cx, cy);                                                               // 187
      },                                                                                                               // 188
      q: function(doc, a) {                                                                                            // 189
        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);                                              // 190
        px = cx + a[0];                                                                                                // 191
        py = cy + a[1];                                                                                                // 192
        cx += a[2];                                                                                                    // 193
        return cy += a[3];                                                                                             // 194
      },                                                                                                               // 195
      T: function(doc, a) {                                                                                            // 196
        if (px === null) {                                                                                             // 197
          px = cx;                                                                                                     // 198
          py = cy;                                                                                                     // 199
        } else {                                                                                                       // 200
          px = cx - (px - cx);                                                                                         // 201
          py = cy - (py - cy);                                                                                         // 202
        }                                                                                                              // 203
        doc.quadraticCurveTo(px, py, a[0], a[1]);                                                                      // 204
        px = cx - (px - cx);                                                                                           // 205
        py = cy - (py - cy);                                                                                           // 206
        cx = a[0];                                                                                                     // 207
        return cy = a[1];                                                                                              // 208
      },                                                                                                               // 209
      t: function(doc, a) {                                                                                            // 210
        if (px === null) {                                                                                             // 211
          px = cx;                                                                                                     // 212
          py = cy;                                                                                                     // 213
        } else {                                                                                                       // 214
          px = cx - (px - cx);                                                                                         // 215
          py = cy - (py - cy);                                                                                         // 216
        }                                                                                                              // 217
        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);                                                            // 218
        cx += a[0];                                                                                                    // 219
        return cy += a[1];                                                                                             // 220
      },                                                                                                               // 221
      A: function(doc, a) {                                                                                            // 222
        solveArc(doc, cx, cy, a);                                                                                      // 223
        cx = a[5];                                                                                                     // 224
        return cy = a[6];                                                                                              // 225
      },                                                                                                               // 226
      a: function(doc, a) {                                                                                            // 227
        a[5] += cx;                                                                                                    // 228
        a[6] += cy;                                                                                                    // 229
        solveArc(doc, cx, cy, a);                                                                                      // 230
        cx = a[5];                                                                                                     // 231
        return cy = a[6];                                                                                              // 232
      },                                                                                                               // 233
      L: function(doc, a) {                                                                                            // 234
        cx = a[0];                                                                                                     // 235
        cy = a[1];                                                                                                     // 236
        px = py = null;                                                                                                // 237
        return doc.lineTo(cx, cy);                                                                                     // 238
      },                                                                                                               // 239
      l: function(doc, a) {                                                                                            // 240
        cx += a[0];                                                                                                    // 241
        cy += a[1];                                                                                                    // 242
        px = py = null;                                                                                                // 243
        return doc.lineTo(cx, cy);                                                                                     // 244
      },                                                                                                               // 245
      H: function(doc, a) {                                                                                            // 246
        cx = a[0];                                                                                                     // 247
        px = py = null;                                                                                                // 248
        return doc.lineTo(cx, cy);                                                                                     // 249
      },                                                                                                               // 250
      h: function(doc, a) {                                                                                            // 251
        cx += a[0];                                                                                                    // 252
        px = py = null;                                                                                                // 253
        return doc.lineTo(cx, cy);                                                                                     // 254
      },                                                                                                               // 255
      V: function(doc, a) {                                                                                            // 256
        cy = a[0];                                                                                                     // 257
        px = py = null;                                                                                                // 258
        return doc.lineTo(cx, cy);                                                                                     // 259
      },                                                                                                               // 260
      v: function(doc, a) {                                                                                            // 261
        cy += a[0];                                                                                                    // 262
        px = py = null;                                                                                                // 263
        return doc.lineTo(cx, cy);                                                                                     // 264
      },                                                                                                               // 265
      Z: function(doc) {                                                                                               // 266
        doc.closePath();                                                                                               // 267
        cx = sx;                                                                                                       // 268
        return cy = sy;                                                                                                // 269
      },                                                                                                               // 270
      z: function(doc) {                                                                                               // 271
        doc.closePath();                                                                                               // 272
        cx = sx;                                                                                                       // 273
        return cy = sy;                                                                                                // 274
      }                                                                                                                // 275
    };                                                                                                                 // 276
                                                                                                                       // 277
    solveArc = function(doc, x, y, coords) {                                                                           // 278
      var bez, ex, ey, large, rot, rx, ry, seg, segs, sweep, _i, _len, _results;                                       // 279
      rx = coords[0], ry = coords[1], rot = coords[2], large = coords[3], sweep = coords[4], ex = coords[5], ey = coords[6];
      segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);                                                   // 281
      _results = [];                                                                                                   // 282
      for (_i = 0, _len = segs.length; _i < _len; _i++) {                                                              // 283
        seg = segs[_i];                                                                                                // 284
        bez = segmentToBezier.apply(null, seg);                                                                        // 285
        _results.push(doc.bezierCurveTo.apply(doc, bez));                                                              // 286
      }                                                                                                                // 287
      return _results;                                                                                                 // 288
    };                                                                                                                 // 289
                                                                                                                       // 290
    arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {                                            // 291
      var a00, a01, a10, a11, cos_th, d, i, pl, result, segments, sfactor, sfactor_sq, sin_th, th, th0, th1, th2, th3, th_arc, x0, x1, xc, y0, y1, yc, _i;
      th = rotateX * (Math.PI / 180);                                                                                  // 293
      sin_th = Math.sin(th);                                                                                           // 294
      cos_th = Math.cos(th);                                                                                           // 295
      rx = Math.abs(rx);                                                                                               // 296
      ry = Math.abs(ry);                                                                                               // 297
      px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;                                                          // 298
      py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;                                                          // 299
      pl = (px * px) / (rx * rx) + (py * py) / (ry * ry);                                                              // 300
      if (pl > 1) {                                                                                                    // 301
        pl = Math.sqrt(pl);                                                                                            // 302
        rx *= pl;                                                                                                      // 303
        ry *= pl;                                                                                                      // 304
      }                                                                                                                // 305
      a00 = cos_th / rx;                                                                                               // 306
      a01 = sin_th / rx;                                                                                               // 307
      a10 = (-sin_th) / ry;                                                                                            // 308
      a11 = cos_th / ry;                                                                                               // 309
      x0 = a00 * ox + a01 * oy;                                                                                        // 310
      y0 = a10 * ox + a11 * oy;                                                                                        // 311
      x1 = a00 * x + a01 * y;                                                                                          // 312
      y1 = a10 * x + a11 * y;                                                                                          // 313
      d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);                                                               // 314
      sfactor_sq = 1 / d - 0.25;                                                                                       // 315
      if (sfactor_sq < 0) {                                                                                            // 316
        sfactor_sq = 0;                                                                                                // 317
      }                                                                                                                // 318
      sfactor = Math.sqrt(sfactor_sq);                                                                                 // 319
      if (sweep === large) {                                                                                           // 320
        sfactor = -sfactor;                                                                                            // 321
      }                                                                                                                // 322
      xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);                                                                      // 323
      yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);                                                                      // 324
      th0 = Math.atan2(y0 - yc, x0 - xc);                                                                              // 325
      th1 = Math.atan2(y1 - yc, x1 - xc);                                                                              // 326
      th_arc = th1 - th0;                                                                                              // 327
      if (th_arc < 0 && sweep === 1) {                                                                                 // 328
        th_arc += 2 * Math.PI;                                                                                         // 329
      } else if (th_arc > 0 && sweep === 0) {                                                                          // 330
        th_arc -= 2 * Math.PI;                                                                                         // 331
      }                                                                                                                // 332
      segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));                                                // 333
      result = [];                                                                                                     // 334
      for (i = _i = 0; 0 <= segments ? _i < segments : _i > segments; i = 0 <= segments ? ++_i : --_i) {               // 335
        th2 = th0 + i * th_arc / segments;                                                                             // 336
        th3 = th0 + (i + 1) * th_arc / segments;                                                                       // 337
        result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];                                                        // 338
      }                                                                                                                // 339
      return result;                                                                                                   // 340
    };                                                                                                                 // 341
                                                                                                                       // 342
    segmentToBezier = function(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {                                             // 343
      var a00, a01, a10, a11, t, th_half, x1, x2, x3, y1, y2, y3;                                                      // 344
      a00 = cos_th * rx;                                                                                               // 345
      a01 = -sin_th * ry;                                                                                              // 346
      a10 = sin_th * rx;                                                                                               // 347
      a11 = cos_th * ry;                                                                                               // 348
      th_half = 0.5 * (th1 - th0);                                                                                     // 349
      t = (8 / 3) * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);                             // 350
      x1 = cx + Math.cos(th0) - t * Math.sin(th0);                                                                     // 351
      y1 = cy + Math.sin(th0) + t * Math.cos(th0);                                                                     // 352
      x3 = cx + Math.cos(th1);                                                                                         // 353
      y3 = cy + Math.sin(th1);                                                                                         // 354
      x2 = x3 + t * Math.sin(th1);                                                                                     // 355
      y2 = y3 - t * Math.cos(th1);                                                                                     // 356
      return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
    };                                                                                                                 // 358
                                                                                                                       // 359
    return SVGPath;                                                                                                    // 360
                                                                                                                       // 361
  })();                                                                                                                // 362
                                                                                                                       // 363
  module.exports = SVGPath;                                                                                            // 364
                                                                                                                       // 365
}).call(this);                                                                                                         // 366
                                                                                                                       // 367
},{}],80:[function(require,module,exports){                                                                            //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
PDFReference - represents a reference to another object in the PDF object heirarchy                                    // 4
By Devon Govett                                                                                                        // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
(function() {                                                                                                          // 8
  var PDFObject, PDFReference, zlib,                                                                                   // 9
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };                                // 10
                                                                                                                       // 11
  zlib = require('zlib');                                                                                              // 12
                                                                                                                       // 13
  PDFReference = (function() {                                                                                         // 14
    function PDFReference(document, id, data) {                                                                        // 15
      this.document = document;                                                                                        // 16
      this.id = id;                                                                                                    // 17
      this.data = data != null ? data : {};                                                                            // 18
      this.finalize = __bind(this.finalize, this);                                                                     // 19
      this.gen = 0;                                                                                                    // 20
      this.deflate = null;                                                                                             // 21
      this.compress = this.document.compress && !this.data.Filter;                                                     // 22
      this.uncompressedLength = 0;                                                                                     // 23
      this.chunks = [];                                                                                                // 24
    }                                                                                                                  // 25
                                                                                                                       // 26
    PDFReference.prototype.initDeflate = function() {                                                                  // 27
      this.data.Filter = 'FlateDecode';                                                                                // 28
      this.deflate = zlib.createDeflate();                                                                             // 29
      this.deflate.on('data', (function(_this) {                                                                       // 30
        return function(chunk) {                                                                                       // 31
          _this.chunks.push(chunk);                                                                                    // 32
          return _this.data.Length += chunk.length;                                                                    // 33
        };                                                                                                             // 34
      })(this));                                                                                                       // 35
      return this.deflate.on('end', this.finalize);                                                                    // 36
    };                                                                                                                 // 37
                                                                                                                       // 38
    PDFReference.prototype.write = function(chunk) {                                                                   // 39
      var _base;                                                                                                       // 40
      if (!Buffer.isBuffer(chunk)) {                                                                                   // 41
        chunk = new Buffer(chunk + '\n', 'binary');                                                                    // 42
      }                                                                                                                // 43
      this.uncompressedLength += chunk.length;                                                                         // 44
      if ((_base = this.data).Length == null) {                                                                        // 45
        _base.Length = 0;                                                                                              // 46
      }                                                                                                                // 47
      if (this.compress) {                                                                                             // 48
        if (!this.deflate) {                                                                                           // 49
          this.initDeflate();                                                                                          // 50
        }                                                                                                              // 51
        return this.deflate.write(chunk);                                                                              // 52
      } else {                                                                                                         // 53
        this.chunks.push(chunk);                                                                                       // 54
        return this.data.Length += chunk.length;                                                                       // 55
      }                                                                                                                // 56
    };                                                                                                                 // 57
                                                                                                                       // 58
    PDFReference.prototype.end = function(chunk) {                                                                     // 59
      if (typeof chunk === 'string' || Buffer.isBuffer(chunk)) {                                                       // 60
        this.write(chunk);                                                                                             // 61
      }                                                                                                                // 62
      if (this.deflate) {                                                                                              // 63
        return this.deflate.end();                                                                                     // 64
      } else {                                                                                                         // 65
        return this.finalize();                                                                                        // 66
      }                                                                                                                // 67
    };                                                                                                                 // 68
                                                                                                                       // 69
    PDFReference.prototype.finalize = function() {                                                                     // 70
      var chunk, _i, _len, _ref;                                                                                       // 71
      this.offset = this.document._offset;                                                                             // 72
      this.document._write("" + this.id + " " + this.gen + " obj");                                                    // 73
      this.document._write(PDFObject.convert(this.data));                                                              // 74
      if (this.chunks.length) {                                                                                        // 75
        this.document._write('stream');                                                                                // 76
        _ref = this.chunks;                                                                                            // 77
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                            // 78
          chunk = _ref[_i];                                                                                            // 79
          this.document._write(chunk);                                                                                 // 80
        }                                                                                                              // 81
        this.chunks.length = 0;                                                                                        // 82
        this.document._write('\nendstream');                                                                           // 83
      }                                                                                                                // 84
      this.document._write('endobj');                                                                                  // 85
      return this.document._refEnd(this);                                                                              // 86
    };                                                                                                                 // 87
                                                                                                                       // 88
    PDFReference.prototype.toString = function() {                                                                     // 89
      return "" + this.id + " " + this.gen + " R";                                                                     // 90
    };                                                                                                                 // 91
                                                                                                                       // 92
    return PDFReference;                                                                                               // 93
                                                                                                                       // 94
  })();                                                                                                                // 95
                                                                                                                       // 96
  module.exports = PDFReference;                                                                                       // 97
                                                                                                                       // 98
  PDFObject = require('./object');                                                                                     // 99
                                                                                                                       // 100
}).call(this);                                                                                                         // 101
                                                                                                                       // 102
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"./object":77,"buffer":17,"zlib":16}],81:[function(require,module,exports){                                         //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
var UnicodeTrie,                                                                                                       // 2
  __slice = [].slice;                                                                                                  // 3
                                                                                                                       // 4
UnicodeTrie = (function() {                                                                                            // 5
  var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;
                                                                                                                       // 7
  SHIFT_1 = 6 + 5;                                                                                                     // 8
                                                                                                                       // 9
  SHIFT_2 = 5;                                                                                                         // 10
                                                                                                                       // 11
  SHIFT_1_2 = SHIFT_1 - SHIFT_2;                                                                                       // 12
                                                                                                                       // 13
  OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;                                                                     // 14
                                                                                                                       // 15
  INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;                                                                               // 16
                                                                                                                       // 17
  INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;                                                                             // 18
                                                                                                                       // 19
  INDEX_SHIFT = 2;                                                                                                     // 20
                                                                                                                       // 21
  DATA_BLOCK_LENGTH = 1 << SHIFT_2;                                                                                    // 22
                                                                                                                       // 23
  DATA_MASK = DATA_BLOCK_LENGTH - 1;                                                                                   // 24
                                                                                                                       // 25
  LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;                                                                            // 26
                                                                                                                       // 27
  LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;                                                                              // 28
                                                                                                                       // 29
  INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;                                                      // 30
                                                                                                                       // 31
  UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;                                                                         // 32
                                                                                                                       // 33
  UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;                                                                                 // 34
                                                                                                                       // 35
  INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;                                                    // 36
                                                                                                                       // 37
  DATA_GRANULARITY = 1 << INDEX_SHIFT;                                                                                 // 38
                                                                                                                       // 39
  function UnicodeTrie(json) {                                                                                         // 40
    var _ref, _ref1;                                                                                                   // 41
    if (json == null) {                                                                                                // 42
      json = {};                                                                                                       // 43
    }                                                                                                                  // 44
    this.data = json.data || [];                                                                                       // 45
    this.highStart = (_ref = json.highStart) != null ? _ref : 0;                                                       // 46
    this.errorValue = (_ref1 = json.errorValue) != null ? _ref1 : -1;                                                  // 47
  }                                                                                                                    // 48
                                                                                                                       // 49
  UnicodeTrie.prototype.get = function(codePoint) {                                                                    // 50
    var index;                                                                                                         // 51
    if (codePoint < 0 || codePoint > 0x10ffff) {                                                                       // 52
      return this.errorValue;                                                                                          // 53
    }                                                                                                                  // 54
    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {                                           // 55
      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);                              // 56
      return this.data[index];                                                                                         // 57
    }                                                                                                                  // 58
    if (codePoint <= 0xffff) {                                                                                         // 59
      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];                                                                                         // 61
    }                                                                                                                  // 62
    if (codePoint < this.highStart) {                                                                                  // 63
      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];                       // 64
      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];                                              // 65
      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);                                                        // 66
      return this.data[index];                                                                                         // 67
    }                                                                                                                  // 68
    return this.data[this.data.length - DATA_GRANULARITY];                                                             // 69
  };                                                                                                                   // 70
                                                                                                                       // 71
  UnicodeTrie.prototype.toJSON = function() {                                                                          // 72
    var res;                                                                                                           // 73
    res = {                                                                                                            // 74
      data: __slice.call(this.data),                                                                                   // 75
      highStart: this.highStart,                                                                                       // 76
      errorValue: this.errorValue                                                                                      // 77
    };                                                                                                                 // 78
    return res;                                                                                                        // 79
  };                                                                                                                   // 80
                                                                                                                       // 81
  return UnicodeTrie;                                                                                                  // 82
                                                                                                                       // 83
})();                                                                                                                  // 84
                                                                                                                       // 85
module.exports = UnicodeTrie;                                                                                          // 86
                                                                                                                       // 87
},{}],82:[function(require,module,exports){                                                                            //
module.exports={"data":[1961,1969,1977,1985,2025,2033,2041,2049,2057,2065,2073,2081,2089,2097,2105,2113,2121,2129,2137,2145,2153,2161,2169,2177,2185,2193,2201,2209,2217,2225,2233,2241,2249,2257,2265,2273,2281,2289,2297,2305,2313,2321,2329,2337,2345,2353,2361,2369,2377,2385,2393,2401,2409,2417,2425,2433,2441,2449,2457,2465,2473,2481,2489,2497,2505,2513,2521,2529,2529,2537,2009,2545,2553,2561,2569,2577,2585,2593,2601,2609,2617,2625,2633,2641,2649,2657,2665,2673,2681,2689,2697,2705,2713,2721,2729,2737,2745,2753,2761,2769,2777,2785,2793,2801,2809,2817,2825,2833,2841,2849,2857,2865,2873,2881,2889,2009,2897,2905,2913,2009,2921,2929,2937,2945,2953,2961,2969,2009,2977,2977,2985,2993,3001,3009,3009,3009,3017,3017,3017,3025,3025,3033,3041,3041,3049,3049,3049,3049,3049,3049,3049,3049,3049,3049,3057,3065,3073,3073,3073,3081,3089,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,3105,3113,3113,3121,3129,3137,3145,3153,3161,3161,3169,3177,3185,3193,3193,3193,3193,3201,3209,3209,3217,3225,3233,3241,3241,3241,3249,3257,3265,3273,3273,3281,3289,3297,2009,2009,3305,3313,3321,3329,3337,3345,3353,3361,3369,3377,3385,3393,2009,2009,3401,3409,3417,3417,3417,3417,3417,3417,3425,3425,3433,3433,3433,3433,3433,3433,3433,3433,3433,3433,3433,3433,3433,3433,3433,3441,3449,3457,3465,3473,3481,3489,3497,3505,3513,3521,3529,3537,3545,3553,3561,3569,3577,3585,3593,3601,3609,3617,3625,3625,3633,3641,3649,3649,3649,3649,3649,3657,3665,3665,3673,3681,3681,3681,3681,3689,3697,3697,3705,3713,3721,3729,3737,3745,3753,3761,3769,3777,3785,3793,3801,3809,3817,3825,3833,3841,3849,3857,3865,3873,3881,3881,3881,3881,3881,3881,3881,3881,3881,3881,3881,3881,3889,3897,3905,3913,3921,3921,3921,3921,3921,3921,3921,3921,3921,3921,3929,2009,2009,2009,2009,2009,3937,3937,3937,3937,3937,3937,3937,3945,3953,3953,3953,3961,3969,3969,3977,3985,3993,4001,2009,2009,4009,4009,4009,4009,4009,4009,4009,4009,4009,4009,4009,4009,4017,4025,4033,4041,4049,4057,4065,4073,4081,4081,4081,4081,4081,4081,4081,4089,4097,4097,4105,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4113,4121,4121,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4129,4137,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4145,4153,4161,4169,4169,4169,4169,4169,4169,4169,4169,4177,4185,4193,4201,4209,4217,4217,4225,4233,4233,4233,4233,4233,4233,4233,4233,4241,4249,4257,4265,4273,4281,4289,4297,4305,4313,4321,4329,4337,4345,4353,4361,4361,4369,4377,4385,4385,4385,4385,4393,4401,4409,4409,4409,4409,4409,4409,4417,4425,4433,4441,4449,4457,4465,4473,4481,4489,4497,4505,4513,4521,4529,4537,4545,4553,4561,4569,4577,4585,4593,4601,4609,4617,4625,4633,4641,4649,4657,4665,4673,4681,4689,4697,4705,4713,4721,4729,4737,4745,4753,4761,4769,4777,4785,4793,4801,4809,4817,4825,4833,4841,4849,4857,4865,4873,4881,4889,4897,4905,4913,4921,4929,4937,4945,4953,4961,4969,4977,4985,4993,5001,5009,5017,5025,5033,5041,5049,5057,5065,5073,5081,5089,5097,5105,5113,5121,5129,5137,5145,5153,5161,5169,5177,5185,5193,5201,5209,5217,5225,5233,5241,5249,5257,5265,5273,5281,5289,5297,5305,5313,5321,5329,5337,5345,5353,5361,5369,5377,5385,5393,5401,5409,5417,5425,5433,5441,5449,5457,5465,5473,5481,5489,5497,5505,5513,5521,5529,5537,5545,5553,5561,5569,5577,5585,5593,5601,5609,5617,5625,5633,5641,5649,5657,5665,5673,5681,5689,5697,5705,5713,5721,5729,5737,5745,5753,5761,5769,5777,5785,5793,5801,5809,5817,5825,5833,5841,5849,5857,5865,5873,5881,5889,5897,5905,5913,5921,5929,5937,5945,5953,5961,5969,5977,5985,5993,6001,6009,6017,6025,6033,6041,6049,6057,6065,6073,6081,6089,6097,6105,6113,6121,6129,6137,6145,6153,6161,6169,6177,6185,6193,6201,6209,6217,6225,6233,6241,6249,6257,6265,6273,6281,6289,6297,6305,6313,6321,6329,6337,6345,6353,6361,6369,6377,6385,6393,6401,6409,6417,6425,6433,6441,6449,6457,6465,6473,6481,6489,6497,6505,6513,6521,6529,6537,6545,6553,6561,6569,6577,6585,6593,6601,6609,6617,6625,6633,6641,6649,6657,6665,6673,6681,6689,6697,6705,6713,6721,6729,6737,6745,6753,6761,6769,6777,6785,6793,6801,6809,6817,6825,6833,6841,6849,6857,6865,6873,6881,6889,6897,6905,6913,6921,6929,6937,6945,6953,6961,6969,6977,6985,6993,7001,7009,7017,7025,7033,7041,7049,7057,7065,7073,7081,7089,7097,7105,7113,7121,7129,7137,7145,7153,7161,7169,7177,7185,7193,7201,7209,7217,7225,7233,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7249,7257,7265,7273,7281,7281,7281,7281,7281,7281,7281,7281,7281,7281,7281,7281,7281,7281,7289,7297,7305,7305,7305,7305,7313,7321,7329,7337,7345,7353,7353,7353,7361,7369,7377,7385,7393,7401,7409,7417,7425,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7241,7972,7972,8100,8164,8228,8292,8356,8420,8484,8548,8612,8676,8740,8804,8868,8932,8996,9060,9124,9188,9252,9316,9380,9444,9508,9572,9636,9700,9764,9828,9892,9956,2593,2657,2721,2529,2785,2529,2849,2913,2977,3041,3105,3169,3233,3297,2529,2529,2529,2529,2529,2529,2529,2529,3361,2529,2529,2529,3425,2529,2529,3489,3553,2529,3617,3681,3745,3809,3873,3937,4001,4065,4129,4193,4257,4321,4385,4449,4513,4577,4641,4705,4769,4833,4897,4961,5025,5089,5153,5217,5281,5345,5409,5473,5537,5601,5665,5729,5793,5857,5921,5985,6049,6113,6177,6241,6305,6369,6433,6497,6561,6625,6689,6753,6817,6881,6945,7009,7073,7137,7201,7265,7329,7393,7457,7521,7585,7649,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,2529,7713,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7433,7433,7433,7433,7433,7433,7433,7441,7449,7457,7457,7457,7457,7457,7457,7465,2009,2009,2009,2009,7473,7473,7473,7473,7473,7473,7473,7473,7481,7489,7497,7505,7505,7505,7505,7505,7513,7521,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7529,7529,7537,7545,7545,7545,7545,7545,7553,7561,7561,7561,7561,7561,7561,7561,7569,7577,7585,7593,7593,7593,7593,7593,7593,7601,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7609,7617,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7625,7633,7641,7649,7657,7665,7673,7681,7689,7697,7705,2009,7713,7721,7729,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7737,7745,7753,2009,2009,2009,2009,2009,2009,2009,2009,2009,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7761,7769,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7777,7785,7793,7801,7809,7809,7809,7809,7809,7809,7817,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7825,7833,7841,7849,2009,2009,2009,7857,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7865,7865,7865,7865,7865,7865,7865,7865,7865,7865,7865,7873,7881,7889,7897,7897,7897,7897,7905,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7913,7921,7929,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,7937,7937,7937,7937,7937,7937,7937,7945,2009,2009,2009,2009,2009,2009,2009,2009,7953,7953,7953,7953,7953,7953,7953,2009,7961,7969,7977,7985,7993,2009,2009,8001,8009,8009,8009,8009,8009,8009,8009,8009,8009,8009,8009,8009,8009,8017,8025,8025,8025,8025,8025,8025,8025,8033,8041,8049,8057,8065,8073,8081,8081,8081,8081,8081,8081,8081,8081,8081,8081,8081,8089,2009,8097,8097,8097,8105,2009,2009,2009,2009,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8113,8121,8129,8137,8137,8137,8137,8137,8137,8137,8137,8137,8137,8137,8137,8137,8137,8145,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,67496,67496,67496,21,21,21,21,21,21,21,21,21,17,34,30,30,33,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,38,6,3,12,9,10,12,3,0,2,12,9,8,16,8,7,11,11,11,11,11,11,11,11,11,11,8,8,12,12,12,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,9,2,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,17,1,12,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,21,21,35,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,4,0,10,9,9,9,12,29,29,12,29,3,12,17,12,12,10,9,29,29,18,12,29,29,29,29,29,3,29,29,29,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,18,29,29,29,18,29,12,12,29,12,12,12,12,12,12,12,29,29,29,29,12,29,12,18,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,4,21,21,21,21,21,21,21,21,21,21,21,21,4,4,4,4,4,4,4,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,8,17,39,39,39,39,9,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,17,21,12,21,21,12,21,21,6,21,39,39,39,39,39,39,39,39,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,8,8,12,12,21,21,21,21,21,21,21,21,21,21,21,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,12,21,21,21,21,21,21,21,12,12,21,21,21,21,21,21,12,12,21,21,12,21,21,21,21,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,12,39,39,39,39,39,39,39,39,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,12,12,12,12,8,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,12,21,21,21,21,21,21,21,21,21,12,21,21,21,12,21,21,21,21,21,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,21,21,17,17,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,21,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,21,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,39,39,39,39,39,39,39,39,21,39,39,39,39,12,12,12,12,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,12,12,12,12,10,12,9,39,39,39,39,39,21,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,12,12,12,12,12,12,39,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,21,21,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,21,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,12,9,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,21,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,12,12,12,12,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,12,39,39,39,39,39,39,21,39,39,39,39,39,39,39,39,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,9,12,39,39,39,39,39,39,21,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,12,12,12,12,12,12,12,12,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,39,39,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,21,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,12,12,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,39,12,12,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,39,39,39,39,39,39,39,39,21,39,39,39,39,39,39,39,39,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,39,39,39,10,12,12,12,12,12,12,39,39,21,21,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,39,39,39,39,39,39,39,39,39,39,39,39,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,39,39,39,39,9,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,12,11,11,11,11,11,11,11,11,11,11,17,17,39,39,39,39,39,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,39,39,11,11,11,11,11,11,11,11,11,11,39,39,36,36,36,36,12,18,18,18,18,12,18,18,4,18,18,17,4,6,6,6,6,6,4,12,6,12,12,12,21,21,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,17,21,12,21,12,21,0,1,0,1,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,17,21,21,21,21,21,17,21,21,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,17,17,12,12,12,12,12,12,21,12,12,12,12,12,12,12,12,12,18,18,17,18,12,12,12,12,12,4,4,39,39,39,39,39,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,11,11,11,11,11,11,11,11,11,11,17,17,12,12,12,12,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,11,11,11,11,11,11,11,11,11,11,36,36,36,36,36,36,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,21,21,21,12,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,17,17,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,21,21,39,39,39,39,39,39,39,39,39,39,39,39,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,17,17,5,36,17,12,17,9,36,36,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,6,17,17,18,12,6,6,12,21,21,21,4,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,12,39,39,39,6,6,11,11,11,11,11,11,11,11,11,11,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,36,36,36,36,36,36,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,39,39,12,12,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,39,39,21,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,36,36,36,36,36,36,36,36,36,36,36,36,36,36,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,39,39,39,39,11,11,11,11,11,11,11,11,11,11,17,17,12,17,17,17,17,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,39,39,39,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,39,39,39,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,17,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,21,21,21,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,21,12,12,12,12,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,18,12,39,17,17,17,17,17,17,17,4,17,17,17,20,21,21,21,21,17,4,17,17,19,29,29,12,3,3,0,3,3,3,0,3,29,29,12,12,15,15,15,17,30,30,21,21,21,21,21,4,10,10,10,10,10,10,10,10,12,3,3,29,5,5,12,12,12,12,12,12,8,0,1,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,17,12,17,17,17,17,12,17,17,17,22,12,12,12,12,39,39,39,39,39,21,21,21,21,21,21,12,12,39,39,29,12,12,12,12,12,12,12,12,0,1,29,12,29,29,29,29,12,12,12,12,12,12,12,12,0,1,39,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,9,9,9,9,9,9,9,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,9,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,10,12,29,12,12,12,10,12,12,12,12,12,12,12,12,12,29,12,12,9,12,12,12,12,12,12,12,12,12,12,29,29,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,12,12,12,12,12,29,12,12,29,12,29,29,29,29,29,29,29,29,29,29,29,29,12,12,12,12,29,29,29,29,29,29,29,29,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,29,29,12,12,12,29,29,12,12,29,12,12,12,29,12,29,9,9,12,29,12,12,12,12,29,12,12,29,29,29,29,12,12,29,12,29,12,29,29,29,29,29,29,12,29,12,12,12,12,12,29,29,29,29,12,12,12,12,29,29,12,12,12,12,12,12,12,12,12,12,29,12,12,12,29,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,12,12,29,29,29,29,12,12,29,29,12,12,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,12,12,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,14,14,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,12,12,12,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,12,12,12,12,12,12,12,12,12,12,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,12,29,29,29,29,12,12,12,12,12,12,12,12,12,12,29,29,12,29,29,29,29,29,29,29,12,12,12,12,12,12,12,12,29,29,12,12,29,29,12,12,12,12,29,29,12,12,29,29,12,12,12,12,29,29,29,12,12,29,12,12,29,29,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,29,29,12,12,12,12,12,12,12,12,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,14,14,12,29,29,12,12,29,12,12,12,12,29,29,12,12,12,12,14,14,29,29,14,12,14,14,14,14,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,14,12,12,12,12,29,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,12,29,29,29,12,29,14,29,29,12,29,29,12,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,14,14,14,14,14,14,14,14,14,14,29,29,29,29,14,12,14,14,14,29,14,14,29,29,29,14,14,29,29,14,29,29,14,14,14,12,29,12,12,12,12,29,29,14,29,29,29,29,29,29,14,14,14,14,14,29,14,14,14,14,29,29,14,14,14,14,14,14,14,14,12,12,12,14,14,14,14,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,12,12,12,3,3,3,3,12,12,12,6,6,12,12,12,12,0,1,0,1,0,1,0,1,0,1,0,1,0,1,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,0,1,0,1,0,1,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,29,29,29,29,29,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,12,12,39,39,39,39,39,6,17,17,17,12,6,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,3,3,3,3,3,3,3,3,3,3,3,3,3,3,17,17,17,17,17,17,17,17,12,17,0,17,12,12,3,3,12,12,3,3,0,1,0,1,0,1,0,1,17,17,17,17,6,12,17,17,12,17,17,12,12,12,12,12,19,19,39,39,39,39,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,14,14,5,14,14,0,1,0,1,0,1,0,1,0,1,14,14,0,1,0,1,0,1,0,1,5,0,1,1,14,14,14,14,14,14,14,14,14,14,21,21,21,21,21,21,14,14,14,14,14,14,14,14,14,14,14,5,5,14,14,14,39,32,14,32,14,32,14,32,14,32,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,32,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,32,14,32,14,32,14,14,14,14,14,14,32,14,14,14,14,14,14,32,32,39,39,21,21,5,5,5,5,14,5,32,14,32,14,32,14,32,14,32,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,32,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,32,14,32,14,32,14,14,14,14,14,14,32,14,14,14,14,14,14,32,32,14,14,14,14,5,32,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,39,39,39,39,39,39,39,39,39,39,39,39,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,6,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,12,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,12,17,17,17,17,17,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,12,12,12,21,12,12,12,12,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,18,18,6,6,39,39,39,39,39,39,39,39,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,39,17,17,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,39,39,39,39,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,39,39,39,12,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,39,39,39,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,17,17,17,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,39,12,12,12,21,12,12,12,12,12,12,12,12,21,21,39,39,11,11,11,11,11,11,11,11,11,11,39,39,12,17,17,17,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,17,17,12,12,12,21,21,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,17,21,21,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,39,39,39,39,39,39,39,39,39,39,39,39,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,39,39,39,39,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,39,39,39,39,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,13,21,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,12,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,8,1,1,8,8,6,6,0,1,15,39,39,39,39,39,39,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,39,14,14,14,14,14,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,14,14,0,1,14,14,14,14,14,14,14,1,14,1,39,5,5,6,6,14,0,1,0,1,0,1,14,14,14,14,14,14,14,14,14,14,9,10,14,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,22,39,6,14,14,9,10,14,14,0,1,14,14,1,14,1,14,14,14,14,14,14,14,14,14,14,14,5,5,14,14,14,6,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,1,14,0,1,1,0,1,1,5,12,32,32,32,32,32,32,32,32,32,32,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,10,9,14,14,14,9,9,39,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,21,21,21,31,29,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,17,17,17,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,17,17,17,17,17,17,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,17,17,17,17,17,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,12,12,12,17,17,17,17,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,11,11,11,11,11,11,11,11,11,11,17,17,17,17,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,17,17,12,17,39,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,11,11,11,11,11,11,11,11,11,11,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,39,39,17,17,17,17,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,1,1,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,12,12,12,0,1,0,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,21,12,12,12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,12,12,21,21,21,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,39,39,39,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,39,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,12,12,39,39,39,39,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,39,39,39,39,39,39,39,39,39,39,39,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,12,14,14,14,14,14,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,14,12,14,12,14,14,14,14,14,14,14,14,14,14,12,14,12,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,39,39,39,12,12,12,12,12,12,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,14,14,14,14,14,14,14,14,14,14,14,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,39,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,39,39,39,39,39,39,39,39,39,39,39,39,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,39,39,39,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39],"highStart":919552,"errorValue":0}
},{}],83:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3, HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU, RI, SA, SG, SP, SY, WJ, XX, ZW;
                                                                                                                       // 4
  exports.OP = OP = 0;                                                                                                 // 5
                                                                                                                       // 6
  exports.CL = CL = 1;                                                                                                 // 7
                                                                                                                       // 8
  exports.CP = CP = 2;                                                                                                 // 9
                                                                                                                       // 10
  exports.QU = QU = 3;                                                                                                 // 11
                                                                                                                       // 12
  exports.GL = GL = 4;                                                                                                 // 13
                                                                                                                       // 14
  exports.NS = NS = 5;                                                                                                 // 15
                                                                                                                       // 16
  exports.EX = EX = 6;                                                                                                 // 17
                                                                                                                       // 18
  exports.SY = SY = 7;                                                                                                 // 19
                                                                                                                       // 20
  exports.IS = IS = 8;                                                                                                 // 21
                                                                                                                       // 22
  exports.PR = PR = 9;                                                                                                 // 23
                                                                                                                       // 24
  exports.PO = PO = 10;                                                                                                // 25
                                                                                                                       // 26
  exports.NU = NU = 11;                                                                                                // 27
                                                                                                                       // 28
  exports.AL = AL = 12;                                                                                                // 29
                                                                                                                       // 30
  exports.HL = HL = 13;                                                                                                // 31
                                                                                                                       // 32
  exports.ID = ID = 14;                                                                                                // 33
                                                                                                                       // 34
  exports.IN = IN = 15;                                                                                                // 35
                                                                                                                       // 36
  exports.HY = HY = 16;                                                                                                // 37
                                                                                                                       // 38
  exports.BA = BA = 17;                                                                                                // 39
                                                                                                                       // 40
  exports.BB = BB = 18;                                                                                                // 41
                                                                                                                       // 42
  exports.B2 = B2 = 19;                                                                                                // 43
                                                                                                                       // 44
  exports.ZW = ZW = 20;                                                                                                // 45
                                                                                                                       // 46
  exports.CM = CM = 21;                                                                                                // 47
                                                                                                                       // 48
  exports.WJ = WJ = 22;                                                                                                // 49
                                                                                                                       // 50
  exports.H2 = H2 = 23;                                                                                                // 51
                                                                                                                       // 52
  exports.H3 = H3 = 24;                                                                                                // 53
                                                                                                                       // 54
  exports.JL = JL = 25;                                                                                                // 55
                                                                                                                       // 56
  exports.JV = JV = 26;                                                                                                // 57
                                                                                                                       // 58
  exports.JT = JT = 27;                                                                                                // 59
                                                                                                                       // 60
  exports.RI = RI = 28;                                                                                                // 61
                                                                                                                       // 62
  exports.AI = AI = 29;                                                                                                // 63
                                                                                                                       // 64
  exports.BK = BK = 30;                                                                                                // 65
                                                                                                                       // 66
  exports.CB = CB = 31;                                                                                                // 67
                                                                                                                       // 68
  exports.CJ = CJ = 32;                                                                                                // 69
                                                                                                                       // 70
  exports.CR = CR = 33;                                                                                                // 71
                                                                                                                       // 72
  exports.LF = LF = 34;                                                                                                // 73
                                                                                                                       // 74
  exports.NL = NL = 35;                                                                                                // 75
                                                                                                                       // 76
  exports.SA = SA = 36;                                                                                                // 77
                                                                                                                       // 78
  exports.SG = SG = 37;                                                                                                // 79
                                                                                                                       // 80
  exports.SP = SP = 38;                                                                                                // 81
                                                                                                                       // 82
  exports.XX = XX = 39;                                                                                                // 83
                                                                                                                       // 84
}).call(this);                                                                                                         // 85
                                                                                                                       // 86
},{}],84:[function(require,module,exports){                                                                            //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var AI, AL, BA, BK, CB, CI_BRK, CJ, CP_BRK, CR, DI_BRK, ID, IN_BRK, LF, LineBreaker, NL, NS, PR_BRK, SA, SG, SP, UnicodeTrie, WJ, XX, characterClasses, classTrie, pairTable, _ref, _ref1;
                                                                                                                       // 4
  UnicodeTrie = require('unicode-trie');                                                                               // 5
                                                                                                                       // 6
  classTrie = new UnicodeTrie(require('./class_trie.json'));                                                           // 7
                                                                                                                       // 8
  _ref = require('./classes'), BK = _ref.BK, CR = _ref.CR, LF = _ref.LF, NL = _ref.NL, CB = _ref.CB, BA = _ref.BA, SP = _ref.SP, WJ = _ref.WJ, SP = _ref.SP, BK = _ref.BK, LF = _ref.LF, NL = _ref.NL, AI = _ref.AI, AL = _ref.AL, SA = _ref.SA, SG = _ref.SG, XX = _ref.XX, CJ = _ref.CJ, ID = _ref.ID, NS = _ref.NS, characterClasses = _ref.characterClasses;
                                                                                                                       // 10
  _ref1 = require('./pairs'), DI_BRK = _ref1.DI_BRK, IN_BRK = _ref1.IN_BRK, CI_BRK = _ref1.CI_BRK, CP_BRK = _ref1.CP_BRK, PR_BRK = _ref1.PR_BRK, pairTable = _ref1.pairTable;
                                                                                                                       // 12
  LineBreaker = (function() {                                                                                          // 13
    var Break, mapClass, mapFirst;                                                                                     // 14
                                                                                                                       // 15
    function LineBreaker(string) {                                                                                     // 16
      this.string = string;                                                                                            // 17
      this.pos = 0;                                                                                                    // 18
      this.lastPos = 0;                                                                                                // 19
      this.curClass = null;                                                                                            // 20
      this.nextClass = null;                                                                                           // 21
    }                                                                                                                  // 22
                                                                                                                       // 23
    LineBreaker.prototype.nextCodePoint = function() {                                                                 // 24
      var code, next;                                                                                                  // 25
      code = this.string.charCodeAt(this.pos++);                                                                       // 26
      next = this.string.charCodeAt(this.pos);                                                                         // 27
      if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {                                  // 28
        this.pos++;                                                                                                    // 29
        return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;                                                  // 30
      }                                                                                                                // 31
      return code;                                                                                                     // 32
    };                                                                                                                 // 33
                                                                                                                       // 34
    mapClass = function(c) {                                                                                           // 35
      switch (c) {                                                                                                     // 36
        case AI:                                                                                                       // 37
          return AL;                                                                                                   // 38
        case SA:                                                                                                       // 39
        case SG:                                                                                                       // 40
        case XX:                                                                                                       // 41
          return AL;                                                                                                   // 42
        case CJ:                                                                                                       // 43
          return NS;                                                                                                   // 44
        default:                                                                                                       // 45
          return c;                                                                                                    // 46
      }                                                                                                                // 47
    };                                                                                                                 // 48
                                                                                                                       // 49
    mapFirst = function(c) {                                                                                           // 50
      switch (c) {                                                                                                     // 51
        case LF:                                                                                                       // 52
        case NL:                                                                                                       // 53
          return BK;                                                                                                   // 54
        case CB:                                                                                                       // 55
          return BA;                                                                                                   // 56
        case SP:                                                                                                       // 57
          return WJ;                                                                                                   // 58
        default:                                                                                                       // 59
          return c;                                                                                                    // 60
      }                                                                                                                // 61
    };                                                                                                                 // 62
                                                                                                                       // 63
    LineBreaker.prototype.nextCharClass = function(first) {                                                            // 64
      if (first == null) {                                                                                             // 65
        first = false;                                                                                                 // 66
      }                                                                                                                // 67
      return mapClass(classTrie.get(this.nextCodePoint()));                                                            // 68
    };                                                                                                                 // 69
                                                                                                                       // 70
    Break = (function() {                                                                                              // 71
      function Break(position, required) {                                                                             // 72
        this.position = position;                                                                                      // 73
        this.required = required != null ? required : false;                                                           // 74
      }                                                                                                                // 75
                                                                                                                       // 76
      return Break;                                                                                                    // 77
                                                                                                                       // 78
    })();                                                                                                              // 79
                                                                                                                       // 80
    LineBreaker.prototype.nextBreak = function() {                                                                     // 81
      var cur, lastClass, shouldBreak;                                                                                 // 82
      if (this.curClass == null) {                                                                                     // 83
        this.curClass = mapFirst(this.nextCharClass());                                                                // 84
      }                                                                                                                // 85
      while (this.pos < this.string.length) {                                                                          // 86
        this.lastPos = this.pos;                                                                                       // 87
        lastClass = this.nextClass;                                                                                    // 88
        this.nextClass = this.nextCharClass();                                                                         // 89
        if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {                                 // 90
          this.curClass = mapFirst(mapClass(this.nextClass));                                                          // 91
          return new Break(this.lastPos, true);                                                                        // 92
        }                                                                                                              // 93
        cur = (function() {                                                                                            // 94
          switch (this.nextClass) {                                                                                    // 95
            case SP:                                                                                                   // 96
              return this.curClass;                                                                                    // 97
            case BK:                                                                                                   // 98
            case LF:                                                                                                   // 99
            case NL:                                                                                                   // 100
              return BK;                                                                                               // 101
            case CR:                                                                                                   // 102
              return CR;                                                                                               // 103
            case CB:                                                                                                   // 104
              return BA;                                                                                               // 105
          }                                                                                                            // 106
        }).call(this);                                                                                                 // 107
        if (cur != null) {                                                                                             // 108
          this.curClass = cur;                                                                                         // 109
          if (this.nextClass === CB) {                                                                                 // 110
            return new Break(this.lastPos);                                                                            // 111
          }                                                                                                            // 112
          continue;                                                                                                    // 113
        }                                                                                                              // 114
        shouldBreak = false;                                                                                           // 115
        switch (pairTable[this.curClass][this.nextClass]) {                                                            // 116
          case DI_BRK:                                                                                                 // 117
            shouldBreak = true;                                                                                        // 118
            break;                                                                                                     // 119
          case IN_BRK:                                                                                                 // 120
            shouldBreak = lastClass === SP;                                                                            // 121
            break;                                                                                                     // 122
          case CI_BRK:                                                                                                 // 123
            shouldBreak = lastClass === SP;                                                                            // 124
            if (!shouldBreak) {                                                                                        // 125
              continue;                                                                                                // 126
            }                                                                                                          // 127
            break;                                                                                                     // 128
          case CP_BRK:                                                                                                 // 129
            if (lastClass !== SP) {                                                                                    // 130
              continue;                                                                                                // 131
            }                                                                                                          // 132
        }                                                                                                              // 133
        this.curClass = this.nextClass;                                                                                // 134
        if (shouldBreak) {                                                                                             // 135
          return new Break(this.lastPos);                                                                              // 136
        }                                                                                                              // 137
      }                                                                                                                // 138
      if (this.pos >= this.string.length) {                                                                            // 139
        if (this.lastPos < this.string.length) {                                                                       // 140
          this.lastPos = this.string.length;                                                                           // 141
          return new Break(this.string.length);                                                                        // 142
        } else {                                                                                                       // 143
          return null;                                                                                                 // 144
        }                                                                                                              // 145
      }                                                                                                                // 146
    };                                                                                                                 // 147
                                                                                                                       // 148
    return LineBreaker;                                                                                                // 149
                                                                                                                       // 150
  })();                                                                                                                // 151
                                                                                                                       // 152
  module.exports = LineBreaker;                                                                                        // 153
                                                                                                                       // 154
}).call(this);                                                                                                         // 155
                                                                                                                       // 156
},{"./class_trie.json":82,"./classes":83,"./pairs":85,"unicode-trie":81}],85:[function(require,module,exports){        //
// Generated by CoffeeScript 1.7.1                                                                                     // 1
(function() {                                                                                                          // 2
  var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;                                                                          // 3
                                                                                                                       // 4
  exports.DI_BRK = DI_BRK = 0;                                                                                         // 5
                                                                                                                       // 6
  exports.IN_BRK = IN_BRK = 1;                                                                                         // 7
                                                                                                                       // 8
  exports.CI_BRK = CI_BRK = 2;                                                                                         // 9
                                                                                                                       // 10
  exports.CP_BRK = CP_BRK = 3;                                                                                         // 11
                                                                                                                       // 12
  exports.PR_BRK = PR_BRK = 4;                                                                                         // 13
                                                                                                                       // 14
  exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];
                                                                                                                       // 16
}).call(this);                                                                                                         // 17
                                                                                                                       // 18
},{}],86:[function(require,module,exports){                                                                            //
(function (Buffer){                                                                                                    //
// Generated by CoffeeScript 1.4.0                                                                                     // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
# MIT LICENSE                                                                                                          // 4
# Copyright (c) 2011 Devon Govett                                                                                      // 5
#                                                                                                                      // 6
# Permission is hereby granted, free of charge, to any person obtaining a copy of this                                 // 7
# software and associated documentation files (the "Software"), to deal in the Software                                // 8
# without restriction, including without limitation the rights to use, copy, modify, merge,                            // 9
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons                           // 10
# to whom the Software is furnished to do so, subject to the following conditions:                                     // 11
#                                                                                                                      // 12
# The above copyright notice and this permission notice shall be included in all copies or                             // 13
# substantial portions of the Software.                                                                                // 14
#                                                                                                                      // 15
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING                        // 16
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                           // 17
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                         // 18
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                       // 19
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                              // 20
*/                                                                                                                     // 21
                                                                                                                       // 22
                                                                                                                       // 23
(function() {                                                                                                          // 24
  var PNG, fs, zlib;                                                                                                   // 25
                                                                                                                       // 26
  fs = require('fs');                                                                                                  // 27
                                                                                                                       // 28
  zlib = require('zlib');                                                                                              // 29
                                                                                                                       // 30
  module.exports = PNG = (function() {                                                                                 // 31
                                                                                                                       // 32
    PNG.decode = function(path, fn) {                                                                                  // 33
      return fs.readFile(path, function(err, file) {                                                                   // 34
        var png;                                                                                                       // 35
        png = new PNG(file);                                                                                           // 36
        return png.decode(function(pixels) {                                                                           // 37
          return fn(pixels);                                                                                           // 38
        });                                                                                                            // 39
      });                                                                                                              // 40
    };                                                                                                                 // 41
                                                                                                                       // 42
    PNG.load = function(path) {                                                                                        // 43
      var file;                                                                                                        // 44
      file = fs.readFileSync(path);                                                                                    // 45
      return new PNG(file);                                                                                            // 46
    };                                                                                                                 // 47
                                                                                                                       // 48
    function PNG(data) {                                                                                               // 49
      var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;                                        // 50
      this.data = data;                                                                                                // 51
      this.pos = 8;                                                                                                    // 52
      this.palette = [];                                                                                               // 53
      this.imgData = [];                                                                                               // 54
      this.transparency = {};                                                                                          // 55
      this.text = {};                                                                                                  // 56
      while (true) {                                                                                                   // 57
        chunkSize = this.readUInt32();                                                                                 // 58
        section = ((function() {                                                                                       // 59
          var _i, _results;                                                                                            // 60
          _results = [];                                                                                               // 61
          for (i = _i = 0; _i < 4; i = ++_i) {                                                                         // 62
            _results.push(String.fromCharCode(this.data[this.pos++]));                                                 // 63
          }                                                                                                            // 64
          return _results;                                                                                             // 65
        }).call(this)).join('');                                                                                       // 66
        switch (section) {                                                                                             // 67
          case 'IHDR':                                                                                                 // 68
            this.width = this.readUInt32();                                                                            // 69
            this.height = this.readUInt32();                                                                           // 70
            this.bits = this.data[this.pos++];                                                                         // 71
            this.colorType = this.data[this.pos++];                                                                    // 72
            this.compressionMethod = this.data[this.pos++];                                                            // 73
            this.filterMethod = this.data[this.pos++];                                                                 // 74
            this.interlaceMethod = this.data[this.pos++];                                                              // 75
            break;                                                                                                     // 76
          case 'PLTE':                                                                                                 // 77
            this.palette = this.read(chunkSize);                                                                       // 78
            break;                                                                                                     // 79
          case 'IDAT':                                                                                                 // 80
            for (i = _i = 0; _i < chunkSize; i = _i += 1) {                                                            // 81
              this.imgData.push(this.data[this.pos++]);                                                                // 82
            }                                                                                                          // 83
            break;                                                                                                     // 84
          case 'tRNS':                                                                                                 // 85
            this.transparency = {};                                                                                    // 86
            switch (this.colorType) {                                                                                  // 87
              case 3:                                                                                                  // 88
                this.transparency.indexed = this.read(chunkSize);                                                      // 89
                short = 255 - this.transparency.indexed.length;                                                        // 90
                if (short > 0) {                                                                                       // 91
                  for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {               // 92
                    this.transparency.indexed.push(255);                                                               // 93
                  }                                                                                                    // 94
                }                                                                                                      // 95
                break;                                                                                                 // 96
              case 0:                                                                                                  // 97
                this.transparency.grayscale = this.read(chunkSize)[0];                                                 // 98
                break;                                                                                                 // 99
              case 2:                                                                                                  // 100
                this.transparency.rgb = this.read(chunkSize);                                                          // 101
            }                                                                                                          // 102
            break;                                                                                                     // 103
          case 'tEXt':                                                                                                 // 104
            text = this.read(chunkSize);                                                                               // 105
            index = text.indexOf(0);                                                                                   // 106
            key = String.fromCharCode.apply(String, text.slice(0, index));                                             // 107
            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));                                 // 108
            break;                                                                                                     // 109
          case 'IEND':                                                                                                 // 110
            this.colors = (function() {                                                                                // 111
              switch (this.colorType) {                                                                                // 112
                case 0:                                                                                                // 113
                case 3:                                                                                                // 114
                case 4:                                                                                                // 115
                  return 1;                                                                                            // 116
                case 2:                                                                                                // 117
                case 6:                                                                                                // 118
                  return 3;                                                                                            // 119
              }                                                                                                        // 120
            }).call(this);                                                                                             // 121
            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;                                        // 122
            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);                                                     // 123
            this.pixelBitlength = this.bits * colors;                                                                  // 124
            this.colorSpace = (function() {                                                                            // 125
              switch (this.colors) {                                                                                   // 126
                case 1:                                                                                                // 127
                  return 'DeviceGray';                                                                                 // 128
                case 3:                                                                                                // 129
                  return 'DeviceRGB';                                                                                  // 130
              }                                                                                                        // 131
            }).call(this);                                                                                             // 132
            this.imgData = new Buffer(this.imgData);                                                                   // 133
            return;                                                                                                    // 134
          default:                                                                                                     // 135
            this.pos += chunkSize;                                                                                     // 136
        }                                                                                                              // 137
        this.pos += 4;                                                                                                 // 138
        if (this.pos > this.data.length) {                                                                             // 139
          throw new Error("Incomplete or corrupt PNG file");                                                           // 140
        }                                                                                                              // 141
      }                                                                                                                // 142
      return;                                                                                                          // 143
    }                                                                                                                  // 144
                                                                                                                       // 145
    PNG.prototype.read = function(bytes) {                                                                             // 146
      var i, _i, _results;                                                                                             // 147
      _results = [];                                                                                                   // 148
      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {                           // 149
        _results.push(this.data[this.pos++]);                                                                          // 150
      }                                                                                                                // 151
      return _results;                                                                                                 // 152
    };                                                                                                                 // 153
                                                                                                                       // 154
    PNG.prototype.readUInt32 = function() {                                                                            // 155
      var b1, b2, b3, b4;                                                                                              // 156
      b1 = this.data[this.pos++] << 24;                                                                                // 157
      b2 = this.data[this.pos++] << 16;                                                                                // 158
      b3 = this.data[this.pos++] << 8;                                                                                 // 159
      b4 = this.data[this.pos++];                                                                                      // 160
      return b1 | b2 | b3 | b4;                                                                                        // 161
    };                                                                                                                 // 162
                                                                                                                       // 163
    PNG.prototype.readUInt16 = function() {                                                                            // 164
      var b1, b2;                                                                                                      // 165
      b1 = this.data[this.pos++] << 8;                                                                                 // 166
      b2 = this.data[this.pos++];                                                                                      // 167
      return b1 | b2;                                                                                                  // 168
    };                                                                                                                 // 169
                                                                                                                       // 170
    PNG.prototype.decodePixels = function(fn) {                                                                        // 171
      var _this = this;                                                                                                // 172
      return zlib.inflate(this.imgData, function(err, data) {                                                          // 173
        var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;
        if (err) {                                                                                                     // 175
          throw err;                                                                                                   // 176
        }                                                                                                              // 177
        pixelBytes = _this.pixelBitlength / 8;                                                                         // 178
        scanlineLength = pixelBytes * _this.width;                                                                     // 179
        pixels = new Buffer(scanlineLength * _this.height);                                                            // 180
        length = data.length;                                                                                          // 181
        row = 0;                                                                                                       // 182
        pos = 0;                                                                                                       // 183
        c = 0;                                                                                                         // 184
        while (pos < length) {                                                                                         // 185
          switch (data[pos++]) {                                                                                       // 186
            case 0:                                                                                                    // 187
              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {                                                     // 188
                pixels[c++] = data[pos++];                                                                             // 189
              }                                                                                                        // 190
              break;                                                                                                   // 191
            case 1:                                                                                                    // 192
              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {                                                     // 193
                byte = data[pos++];                                                                                    // 194
                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];                                                    // 195
                pixels[c++] = (byte + left) % 256;                                                                     // 196
              }                                                                                                        // 197
              break;                                                                                                   // 198
            case 2:                                                                                                    // 199
              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {                                                     // 200
                byte = data[pos++];                                                                                    // 201
                col = (i - (i % pixelBytes)) / pixelBytes;                                                             // 202
                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];               // 203
                pixels[c++] = (upper + byte) % 256;                                                                    // 204
              }                                                                                                        // 205
              break;                                                                                                   // 206
            case 3:                                                                                                    // 207
              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {                                                     // 208
                byte = data[pos++];                                                                                    // 209
                col = (i - (i % pixelBytes)) / pixelBytes;                                                             // 210
                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];                                                    // 211
                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];               // 212
                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;                                           // 213
              }                                                                                                        // 214
              break;                                                                                                   // 215
            case 4:                                                                                                    // 216
              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {                                                     // 217
                byte = data[pos++];                                                                                    // 218
                col = (i - (i % pixelBytes)) / pixelBytes;                                                             // 219
                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];                                                    // 220
                if (row === 0) {                                                                                       // 221
                  upper = upperLeft = 0;                                                                               // 222
                } else {                                                                                               // 223
                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];                    // 224
                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];   // 225
                }                                                                                                      // 226
                p = left + upper - upperLeft;                                                                          // 227
                pa = Math.abs(p - left);                                                                               // 228
                pb = Math.abs(p - upper);                                                                              // 229
                pc = Math.abs(p - upperLeft);                                                                          // 230
                if (pa <= pb && pa <= pc) {                                                                            // 231
                  paeth = left;                                                                                        // 232
                } else if (pb <= pc) {                                                                                 // 233
                  paeth = upper;                                                                                       // 234
                } else {                                                                                               // 235
                  paeth = upperLeft;                                                                                   // 236
                }                                                                                                      // 237
                pixels[c++] = (byte + paeth) % 256;                                                                    // 238
              }                                                                                                        // 239
              break;                                                                                                   // 240
            default:                                                                                                   // 241
              throw new Error("Invalid filter algorithm: " + data[pos - 1]);                                           // 242
          }                                                                                                            // 243
          row++;                                                                                                       // 244
        }                                                                                                              // 245
        return fn(pixels);                                                                                             // 246
      });                                                                                                              // 247
    };                                                                                                                 // 248
                                                                                                                       // 249
    PNG.prototype.decodePalette = function() {                                                                         // 250
      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;                                              // 251
      palette = this.palette;                                                                                          // 252
      transparency = this.transparency.indexed || [];                                                                  // 253
      ret = new Buffer(transparency.length + palette.length);                                                          // 254
      pos = 0;                                                                                                         // 255
      length = palette.length;                                                                                         // 256
      c = 0;                                                                                                           // 257
      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {                                                // 258
        ret[pos++] = palette[i];                                                                                       // 259
        ret[pos++] = palette[i + 1];                                                                                   // 260
        ret[pos++] = palette[i + 2];                                                                                   // 261
        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;                                                // 262
      }                                                                                                                // 263
      return ret;                                                                                                      // 264
    };                                                                                                                 // 265
                                                                                                                       // 266
    PNG.prototype.copyToImageData = function(imageData, pixels) {                                                      // 267
      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;                                               // 268
      colors = this.colors;                                                                                            // 269
      palette = null;                                                                                                  // 270
      alpha = this.hasAlphaChannel;                                                                                    // 271
      if (this.palette.length) {                                                                                       // 272
        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();          // 273
        colors = 4;                                                                                                    // 274
        alpha = true;                                                                                                  // 275
      }                                                                                                                // 276
      data = (imageData != null ? imageData.data : void 0) || imageData;                                               // 277
      length = data.length;                                                                                            // 278
      input = palette || pixels;                                                                                       // 279
      i = j = 0;                                                                                                       // 280
      if (colors === 1) {                                                                                              // 281
        while (i < length) {                                                                                           // 282
          k = palette ? pixels[i / 4] * 4 : j;                                                                         // 283
          v = input[k++];                                                                                              // 284
          data[i++] = v;                                                                                               // 285
          data[i++] = v;                                                                                               // 286
          data[i++] = v;                                                                                               // 287
          data[i++] = alpha ? input[k++] : 255;                                                                        // 288
          j = k;                                                                                                       // 289
        }                                                                                                              // 290
      } else {                                                                                                         // 291
        while (i < length) {                                                                                           // 292
          k = palette ? pixels[i / 4] * 4 : j;                                                                         // 293
          data[i++] = input[k++];                                                                                      // 294
          data[i++] = input[k++];                                                                                      // 295
          data[i++] = input[k++];                                                                                      // 296
          data[i++] = alpha ? input[k++] : 255;                                                                        // 297
          j = k;                                                                                                       // 298
        }                                                                                                              // 299
      }                                                                                                                // 300
    };                                                                                                                 // 301
                                                                                                                       // 302
    PNG.prototype.decode = function(fn) {                                                                              // 303
      var ret,                                                                                                         // 304
        _this = this;                                                                                                  // 305
      ret = new Buffer(this.width * this.height * 4);                                                                  // 306
      return this.decodePixels(function(pixels) {                                                                      // 307
        _this.copyToImageData(ret, pixels);                                                                            // 308
        return fn(ret);                                                                                                // 309
      });                                                                                                              // 310
    };                                                                                                                 // 311
                                                                                                                       // 312
    return PNG;                                                                                                        // 313
                                                                                                                       // 314
  })();                                                                                                                // 315
                                                                                                                       // 316
}).call(this);                                                                                                         // 317
                                                                                                                       // 318
}).call(this,require("buffer").Buffer)                                                                                 //
                                                                                                                       //
},{"buffer":17,"fs":1,"zlib":16}]},{},[43])                                                                            //
//# sourceMappingURL=/packages/pascoual_pdfkitx/pdfkitx.browserify.js                                                  //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/pascoual_pdfkitx/pdfkitx.client.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
PDFDocument.PX_PER_CM = 28.33;                                                                                         // 1
                                                                                                                       // 2
                                                                                                                       // 3
PDFDocument.prototype.write = function (filename) {                                                                    // 4
  stream = this.pipe(blobStream());                                                                                    // 5
  stream.on('finish', function() {                                                                                     // 6
    var link = document.createElement('a');                                                                            // 7
    link.href = this.toBlobURL('application/pdf')                                                                      // 8
    link.download = filename;                                                                                          // 9
    link.click();                                                                                                      // 10
  });                                                                                                                  // 11
  this.end();                                                                                                          // 12
}                                                                                                                      // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['pascoual:pdfkitx'] = {}, {
  PDFDocument: PDFDocument,
  blobStream: blobStream,
  brfs: brfs
});

})();
