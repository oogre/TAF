//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var moment = Package['momentjs:moment'].moment;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.4.0                                                                                                 // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery', 'moment' ], factory);                                                                             // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'), require('moment'));                                                      // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery, moment);                                                                                             // 15
	}                                                                                                                     // 16
})(function($, moment) {                                                                                               // 17
                                                                                                                       // 18
;;                                                                                                                     // 19
                                                                                                                       // 20
var fc = $.fullCalendar = { version: "2.4.0" };                                                                        // 21
var fcViews = fc.views = {};                                                                                           // 22
                                                                                                                       // 23
                                                                                                                       // 24
$.fn.fullCalendar = function(options) {                                                                                // 25
	var args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 26
	var res = this; // what this function will return (this jQuery object by default)                                     // 27
                                                                                                                       // 28
	this.each(function(i, _element) { // loop each DOM element involved                                                   // 29
		var element = $(_element);                                                                                           // 30
		var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 31
		var singleRes; // the returned value of this single method call                                                      // 32
                                                                                                                       // 33
		// a method call                                                                                                     // 34
		if (typeof options === 'string') {                                                                                   // 35
			if (calendar && $.isFunction(calendar[options])) {                                                                  // 36
				singleRes = calendar[options].apply(calendar, args);                                                               // 37
				if (!i) {                                                                                                          // 38
					res = singleRes; // record the first method call result                                                           // 39
				}                                                                                                                  // 40
				if (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 41
					element.removeData('fullCalendar');                                                                               // 42
				}                                                                                                                  // 43
			}                                                                                                                   // 44
		}                                                                                                                    // 45
		// a new calendar initialization                                                                                     // 46
		else if (!calendar) { // don't initialize twice                                                                      // 47
			calendar = new Calendar(element, options);                                                                          // 48
			element.data('fullCalendar', calendar);                                                                             // 49
			calendar.render();                                                                                                  // 50
		}                                                                                                                    // 51
	});                                                                                                                   // 52
	                                                                                                                      // 53
	return res;                                                                                                           // 54
};                                                                                                                     // 55
                                                                                                                       // 56
                                                                                                                       // 57
var complexOptions = [ // names of options that are objects whose properties should be combined                        // 58
	'header',                                                                                                             // 59
	'buttonText',                                                                                                         // 60
	'buttonIcons',                                                                                                        // 61
	'themeButtonIcons'                                                                                                    // 62
];                                                                                                                     // 63
                                                                                                                       // 64
                                                                                                                       // 65
// Merges an array of option objects into a single object                                                              // 66
function mergeOptions(optionObjs) {                                                                                    // 67
	return mergeProps(optionObjs, complexOptions);                                                                        // 68
}                                                                                                                      // 69
                                                                                                                       // 70
                                                                                                                       // 71
// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 72
// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 73
function massageOverrides(input) {                                                                                     // 74
	var overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 75
	var subObj;                                                                                                           // 76
                                                                                                                       // 77
	// iterate through all option override properties (except `views`)                                                    // 78
	$.each(input, function(name, val) {                                                                                   // 79
		if (name != 'views') {                                                                                               // 80
                                                                                                                       // 81
			// could the value be a legacy View-Option-Hash?                                                                    // 82
			if (                                                                                                                // 83
				$.isPlainObject(val) &&                                                                                            // 84
				!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 85
				$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 86
			) {                                                                                                                 // 87
				subObj = null;                                                                                                     // 88
                                                                                                                       // 89
				// iterate through the properties of this possible View-Option-Hash value                                          // 90
				$.each(val, function(subName, subVal) {                                                                            // 91
                                                                                                                       // 92
					// is the property targeting a view?                                                                              // 93
					if (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 94
						if (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 95
							overrides.views[subName] = {};                                                                                  // 96
						}                                                                                                                // 97
						overrides.views[subName][name] = subVal; // record the value in the `views` object                               // 98
					}                                                                                                                 // 99
					else { // a non-View-Option-Hash property                                                                         // 100
						if (!subObj) {                                                                                                   // 101
							subObj = {};                                                                                                    // 102
						}                                                                                                                // 103
						subObj[subName] = subVal; // accumulate these unrelated values for later                                         // 104
					}                                                                                                                 // 105
				});                                                                                                                // 106
                                                                                                                       // 107
				if (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 108
					overrides[name] = subObj;                                                                                         // 109
				}                                                                                                                  // 110
			}                                                                                                                   // 111
			else {                                                                                                              // 112
				overrides[name] = val; // transfer normal options as-is                                                            // 113
			}                                                                                                                   // 114
		}                                                                                                                    // 115
	});                                                                                                                   // 116
                                                                                                                       // 117
	return overrides;                                                                                                     // 118
}                                                                                                                      // 119
                                                                                                                       // 120
;;                                                                                                                     // 121
                                                                                                                       // 122
// exports                                                                                                             // 123
fc.intersectionToSeg = intersectionToSeg;                                                                              // 124
fc.applyAll = applyAll;                                                                                                // 125
fc.debounce = debounce;                                                                                                // 126
fc.isInt = isInt;                                                                                                      // 127
fc.htmlEscape = htmlEscape;                                                                                            // 128
fc.cssToStr = cssToStr;                                                                                                // 129
fc.proxy = proxy;                                                                                                      // 130
fc.capitaliseFirstLetter = capitaliseFirstLetter;                                                                      // 131
                                                                                                                       // 132
                                                                                                                       // 133
/* FullCalendar-specific DOM Utilities                                                                                 // 134
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 136
                                                                                                                       // 137
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 138
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 139
function compensateScroll(rowEls, scrollbarWidths) {                                                                   // 140
	if (scrollbarWidths.left) {                                                                                           // 141
		rowEls.css({                                                                                                         // 142
			'border-left-width': 1,                                                                                             // 143
			'margin-left': scrollbarWidths.left - 1                                                                             // 144
		});                                                                                                                  // 145
	}                                                                                                                     // 146
	if (scrollbarWidths.right) {                                                                                          // 147
		rowEls.css({                                                                                                         // 148
			'border-right-width': 1,                                                                                            // 149
			'margin-right': scrollbarWidths.right - 1                                                                           // 150
		});                                                                                                                  // 151
	}                                                                                                                     // 152
}                                                                                                                      // 153
                                                                                                                       // 154
                                                                                                                       // 155
// Undoes compensateScroll and restores all borders/margins                                                            // 156
function uncompensateScroll(rowEls) {                                                                                  // 157
	rowEls.css({                                                                                                          // 158
		'margin-left': '',                                                                                                   // 159
		'margin-right': '',                                                                                                  // 160
		'border-left-width': '',                                                                                             // 161
		'border-right-width': ''                                                                                             // 162
	});                                                                                                                   // 163
}                                                                                                                      // 164
                                                                                                                       // 165
                                                                                                                       // 166
// Make the mouse cursor express that an event is not allowed in the current area                                      // 167
function disableCursor() {                                                                                             // 168
	$('body').addClass('fc-not-allowed');                                                                                 // 169
}                                                                                                                      // 170
                                                                                                                       // 171
                                                                                                                       // 172
// Returns the mouse cursor to its original look                                                                       // 173
function enableCursor() {                                                                                              // 174
	$('body').removeClass('fc-not-allowed');                                                                              // 175
}                                                                                                                      // 176
                                                                                                                       // 177
                                                                                                                       // 178
// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 179
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 180
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 181
// reduces the available height.                                                                                       // 182
function distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 183
                                                                                                                       // 184
	// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 185
	// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 186
                                                                                                                       // 187
	var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 188
	var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 189
	var flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 190
	var flexOffsets = []; // amount of vertical space it takes up                                                         // 191
	var flexHeights = []; // actual css height                                                                            // 192
	var usedHeight = 0;                                                                                                   // 193
                                                                                                                       // 194
	undistributeHeight(els); // give all elements their natural height                                                    // 195
                                                                                                                       // 196
	// find elements that are below the recommended height (expandable).                                                  // 197
	// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 198
	els.each(function(i, el) {                                                                                            // 199
		var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 200
		var naturalOffset = $(el).outerHeight(true);                                                                         // 201
                                                                                                                       // 202
		if (naturalOffset < minOffset) {                                                                                     // 203
			flexEls.push(el);                                                                                                   // 204
			flexOffsets.push(naturalOffset);                                                                                    // 205
			flexHeights.push($(el).height());                                                                                   // 206
		}                                                                                                                    // 207
		else {                                                                                                               // 208
			// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 209
			usedHeight += naturalOffset;                                                                                        // 210
		}                                                                                                                    // 211
	});                                                                                                                   // 212
                                                                                                                       // 213
	// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 214
	if (shouldRedistribute) {                                                                                             // 215
		availableHeight -= usedHeight;                                                                                       // 216
		minOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 217
		minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 218
	}                                                                                                                     // 219
                                                                                                                       // 220
	// assign heights to all expandable elements                                                                          // 221
	$(flexEls).each(function(i, el) {                                                                                     // 222
		var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 223
		var naturalOffset = flexOffsets[i];                                                                                  // 224
		var naturalHeight = flexHeights[i];                                                                                  // 225
		var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 226
                                                                                                                       // 227
		if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 228
			$(el).height(newHeight);                                                                                            // 229
		}                                                                                                                    // 230
	});                                                                                                                   // 231
}                                                                                                                      // 232
                                                                                                                       // 233
                                                                                                                       // 234
// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 235
function undistributeHeight(els) {                                                                                     // 236
	els.height('');                                                                                                       // 237
}                                                                                                                      // 238
                                                                                                                       // 239
                                                                                                                       // 240
// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.                                                                                             // 242
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 243
function matchCellWidths(els) {                                                                                        // 244
	var maxInnerWidth = 0;                                                                                                // 245
                                                                                                                       // 246
	els.find('> *').each(function(i, innerEl) {                                                                           // 247
		var innerWidth = $(innerEl).outerWidth();                                                                            // 248
		if (innerWidth > maxInnerWidth) {                                                                                    // 249
			maxInnerWidth = innerWidth;                                                                                         // 250
		}                                                                                                                    // 251
	});                                                                                                                   // 252
                                                                                                                       // 253
	maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 254
                                                                                                                       // 255
	els.width(maxInnerWidth);                                                                                             // 256
                                                                                                                       // 257
	return maxInnerWidth;                                                                                                 // 258
}                                                                                                                      // 259
                                                                                                                       // 260
                                                                                                                       // 261
// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 262
// Returns true if the element is now a scroller, false otherwise.                                                     // 263
// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 264
function setPotentialScroller(containerEl, height) {                                                                   // 265
	containerEl.height(height).addClass('fc-scroller');                                                                   // 266
                                                                                                                       // 267
	// are scrollbars needed?                                                                                             // 268
	if (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 269
		return true;                                                                                                         // 270
	}                                                                                                                     // 271
                                                                                                                       // 272
	unsetScroller(containerEl); // undo                                                                                   // 273
	return false;                                                                                                         // 274
}                                                                                                                      // 275
                                                                                                                       // 276
                                                                                                                       // 277
// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 278
function unsetScroller(containerEl) {                                                                                  // 279
	containerEl.height('').removeClass('fc-scroller');                                                                    // 280
}                                                                                                                      // 281
                                                                                                                       // 282
                                                                                                                       // 283
/* General DOM Utilities                                                                                               // 284
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 286
fc.getClientRect = getClientRect;                                                                                      // 287
fc.getContentRect = getContentRect;                                                                                    // 288
fc.getScrollbarWidths = getScrollbarWidths;                                                                            // 289
                                                                                                                       // 290
                                                                                                                       // 291
// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 292
function getScrollParent(el) {                                                                                         // 293
	var position = el.css('position'),                                                                                    // 294
		scrollParent = el.parents().filter(function() {                                                                      // 295
			var parent = $(this);                                                                                               // 296
			return (/(auto|scroll)/).test(                                                                                      // 297
				parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 298
			);                                                                                                                  // 299
		}).eq(0);                                                                                                            // 300
                                                                                                                       // 301
	return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 302
}                                                                                                                      // 303
                                                                                                                       // 304
                                                                                                                       // 305
// Queries the outer bounding area of a jQuery element.                                                                // 306
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 307
function getOuterRect(el) {                                                                                            // 308
	var offset = el.offset();                                                                                             // 309
                                                                                                                       // 310
	return {                                                                                                              // 311
		left: offset.left,                                                                                                   // 312
		right: offset.left + el.outerWidth(),                                                                                // 313
		top: offset.top,                                                                                                     // 314
		bottom: offset.top + el.outerHeight()                                                                                // 315
	};                                                                                                                    // 316
}                                                                                                                      // 317
                                                                                                                       // 318
                                                                                                                       // 319
// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 320
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 321
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 322
function getClientRect(el) {                                                                                           // 323
	var offset = el.offset();                                                                                             // 324
	var scrollbarWidths = getScrollbarWidths(el);                                                                         // 325
	var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 326
	var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 327
                                                                                                                       // 328
	return {                                                                                                              // 329
		left: left,                                                                                                          // 330
		right: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 331
		top: top,                                                                                                            // 332
		bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 333
	};                                                                                                                    // 334
}                                                                                                                      // 335
                                                                                                                       // 336
                                                                                                                       // 337
// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 338
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 339
function getContentRect(el) {                                                                                          // 340
	var offset = el.offset(); // just outside of border, margin not included                                              // 341
	var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 342
	var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 343
                                                                                                                       // 344
	return {                                                                                                              // 345
		left: left,                                                                                                          // 346
		right: left + el.width(),                                                                                            // 347
		top: top,                                                                                                            // 348
		bottom: top + el.height()                                                                                            // 349
	};                                                                                                                    // 350
}                                                                                                                      // 351
                                                                                                                       // 352
                                                                                                                       // 353
// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 354
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 355
function getScrollbarWidths(el) {                                                                                      // 356
	var leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 357
	var widths = {                                                                                                        // 358
		left: 0,                                                                                                             // 359
		right: 0,                                                                                                            // 360
		top: 0,                                                                                                              // 361
		bottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 362
	};                                                                                                                    // 363
                                                                                                                       // 364
	if (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 365
		widths.left = leftRightWidth;                                                                                        // 366
	}                                                                                                                     // 367
	else {                                                                                                                // 368
		widths.right = leftRightWidth;                                                                                       // 369
	}                                                                                                                     // 370
                                                                                                                       // 371
	return widths;                                                                                                        // 372
}                                                                                                                      // 373
                                                                                                                       // 374
                                                                                                                       // 375
// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 376
                                                                                                                       // 377
var _isLeftRtlScrollbars = null;                                                                                       // 378
                                                                                                                       // 379
function getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 380
	if (_isLeftRtlScrollbars === null) {                                                                                  // 381
		_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 382
	}                                                                                                                     // 383
	return _isLeftRtlScrollbars;                                                                                          // 384
}                                                                                                                      // 385
                                                                                                                       // 386
function computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 387
	var el = $('<div><div/></div>')                                                                                       // 388
		.css({                                                                                                               // 389
			position: 'absolute',                                                                                               // 390
			top: -1000,                                                                                                         // 391
			left: 0,                                                                                                            // 392
			border: 0,                                                                                                          // 393
			padding: 0,                                                                                                         // 394
			overflow: 'scroll',                                                                                                 // 395
			direction: 'rtl'                                                                                                    // 396
		})                                                                                                                   // 397
		.appendTo('body');                                                                                                   // 398
	var innerEl = el.children();                                                                                          // 399
	var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 400
	el.remove();                                                                                                          // 401
	return res;                                                                                                           // 402
}                                                                                                                      // 403
                                                                                                                       // 404
                                                                                                                       // 405
// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 406
// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.           // 407
function getCssFloat(el, prop) {                                                                                       // 408
	return parseFloat(el.css(prop)) || 0;                                                                                 // 409
}                                                                                                                      // 410
                                                                                                                       // 411
                                                                                                                       // 412
// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 413
function isPrimaryMouseButton(ev) {                                                                                    // 414
	return ev.which == 1 && !ev.ctrlKey;                                                                                  // 415
}                                                                                                                      // 416
                                                                                                                       // 417
                                                                                                                       // 418
/* Geometry                                                                                                            // 419
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 421
fc.intersectRects = intersectRects;                                                                                    // 422
                                                                                                                       // 423
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 424
function intersectRects(rect1, rect2) {                                                                                // 425
	var res = {                                                                                                           // 426
		left: Math.max(rect1.left, rect2.left),                                                                              // 427
		right: Math.min(rect1.right, rect2.right),                                                                           // 428
		top: Math.max(rect1.top, rect2.top),                                                                                 // 429
		bottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 430
	};                                                                                                                    // 431
                                                                                                                       // 432
	if (res.left < res.right && res.top < res.bottom) {                                                                   // 433
		return res;                                                                                                          // 434
	}                                                                                                                     // 435
	return false;                                                                                                         // 436
}                                                                                                                      // 437
                                                                                                                       // 438
                                                                                                                       // 439
// Returns a new point that will have been moved to reside within the given rectangle                                  // 440
function constrainPoint(point, rect) {                                                                                 // 441
	return {                                                                                                              // 442
		left: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 443
		top: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 444
	};                                                                                                                    // 445
}                                                                                                                      // 446
                                                                                                                       // 447
                                                                                                                       // 448
// Returns a point that is the center of the given rectangle                                                           // 449
function getRectCenter(rect) {                                                                                         // 450
	return {                                                                                                              // 451
		left: (rect.left + rect.right) / 2,                                                                                  // 452
		top: (rect.top + rect.bottom) / 2                                                                                    // 453
	};                                                                                                                    // 454
}                                                                                                                      // 455
                                                                                                                       // 456
                                                                                                                       // 457
// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 458
function diffPoints(point1, point2) {                                                                                  // 459
	return {                                                                                                              // 460
		left: point1.left - point2.left,                                                                                     // 461
		top: point1.top - point2.top                                                                                         // 462
	};                                                                                                                    // 463
}                                                                                                                      // 464
                                                                                                                       // 465
                                                                                                                       // 466
/* Object Ordering by Field                                                                                            // 467
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 469
fc.parseFieldSpecs = parseFieldSpecs;                                                                                  // 470
fc.compareByFieldSpecs = compareByFieldSpecs;                                                                          // 471
fc.compareByFieldSpec = compareByFieldSpec;                                                                            // 472
fc.flexibleCompare = flexibleCompare;                                                                                  // 473
                                                                                                                       // 474
                                                                                                                       // 475
function parseFieldSpecs(input) {                                                                                      // 476
	var specs = [];                                                                                                       // 477
	var tokens = [];                                                                                                      // 478
	var i, token;                                                                                                         // 479
                                                                                                                       // 480
	if (typeof input === 'string') {                                                                                      // 481
		tokens = input.split(/\s*,\s*/);                                                                                     // 482
	}                                                                                                                     // 483
	else if (typeof input === 'function') {                                                                               // 484
		tokens = [ input ];                                                                                                  // 485
	}                                                                                                                     // 486
	else if ($.isArray(input)) {                                                                                          // 487
		tokens = input;                                                                                                      // 488
	}                                                                                                                     // 489
                                                                                                                       // 490
	for (i = 0; i < tokens.length; i++) {                                                                                 // 491
		token = tokens[i];                                                                                                   // 492
                                                                                                                       // 493
		if (typeof token === 'string') {                                                                                     // 494
			specs.push(                                                                                                         // 495
				token.charAt(0) == '-' ?                                                                                           // 496
					{ field: token.substring(1), order: -1 } :                                                                        // 497
					{ field: token, order: 1 }                                                                                        // 498
			);                                                                                                                  // 499
		}                                                                                                                    // 500
		else if (typeof token === 'function') {                                                                              // 501
			specs.push({ func: token });                                                                                        // 502
		}                                                                                                                    // 503
	}                                                                                                                     // 504
                                                                                                                       // 505
	return specs;                                                                                                         // 506
}                                                                                                                      // 507
                                                                                                                       // 508
                                                                                                                       // 509
function compareByFieldSpecs(obj1, obj2, fieldSpecs) {                                                                 // 510
	var i;                                                                                                                // 511
	var cmp;                                                                                                              // 512
                                                                                                                       // 513
	for (i = 0; i < fieldSpecs.length; i++) {                                                                             // 514
		cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);                                                                 // 515
		if (cmp) {                                                                                                           // 516
			return cmp;                                                                                                         // 517
		}                                                                                                                    // 518
	}                                                                                                                     // 519
                                                                                                                       // 520
	return 0;                                                                                                             // 521
}                                                                                                                      // 522
                                                                                                                       // 523
                                                                                                                       // 524
function compareByFieldSpec(obj1, obj2, fieldSpec) {                                                                   // 525
	if (fieldSpec.func) {                                                                                                 // 526
		return fieldSpec.func(obj1, obj2);                                                                                   // 527
	}                                                                                                                     // 528
	return flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *                                                // 529
		(fieldSpec.order || 1);                                                                                              // 530
}                                                                                                                      // 531
                                                                                                                       // 532
                                                                                                                       // 533
function flexibleCompare(a, b) {                                                                                       // 534
	if (!a && !b) {                                                                                                       // 535
		return 0;                                                                                                            // 536
	}                                                                                                                     // 537
	if (b == null) {                                                                                                      // 538
		return -1;                                                                                                           // 539
	}                                                                                                                     // 540
	if (a == null) {                                                                                                      // 541
		return 1;                                                                                                            // 542
	}                                                                                                                     // 543
	if ($.type(a) === 'string' || $.type(b) === 'string') {                                                               // 544
		return String(a).localeCompare(String(b));                                                                           // 545
	}                                                                                                                     // 546
	return a - b;                                                                                                         // 547
}                                                                                                                      // 548
                                                                                                                       // 549
                                                                                                                       // 550
/* FullCalendar-specific Misc Utilities                                                                                // 551
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 553
                                                                                                                       // 554
// Creates a basic segment with the intersection of the two ranges. Returns undefined if no intersection.              // 555
// Expects all dates to be normalized to the same timezone beforehand.                                                 // 556
// TODO: move to date section?                                                                                         // 557
function intersectionToSeg(subjectRange, constraintRange) {                                                            // 558
	var subjectStart = subjectRange.start;                                                                                // 559
	var subjectEnd = subjectRange.end;                                                                                    // 560
	var constraintStart = constraintRange.start;                                                                          // 561
	var constraintEnd = constraintRange.end;                                                                              // 562
	var segStart, segEnd;                                                                                                 // 563
	var isStart, isEnd;                                                                                                   // 564
                                                                                                                       // 565
	if (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 566
                                                                                                                       // 567
		if (subjectStart >= constraintStart) {                                                                               // 568
			segStart = subjectStart.clone();                                                                                    // 569
			isStart = true;                                                                                                     // 570
		}                                                                                                                    // 571
		else {                                                                                                               // 572
			segStart = constraintStart.clone();                                                                                 // 573
			isStart =  false;                                                                                                   // 574
		}                                                                                                                    // 575
                                                                                                                       // 576
		if (subjectEnd <= constraintEnd) {                                                                                   // 577
			segEnd = subjectEnd.clone();                                                                                        // 578
			isEnd = true;                                                                                                       // 579
		}                                                                                                                    // 580
		else {                                                                                                               // 581
			segEnd = constraintEnd.clone();                                                                                     // 582
			isEnd = false;                                                                                                      // 583
		}                                                                                                                    // 584
                                                                                                                       // 585
		return {                                                                                                             // 586
			start: segStart,                                                                                                    // 587
			end: segEnd,                                                                                                        // 588
			isStart: isStart,                                                                                                   // 589
			isEnd: isEnd                                                                                                        // 590
		};                                                                                                                   // 591
	}                                                                                                                     // 592
}                                                                                                                      // 593
                                                                                                                       // 594
                                                                                                                       // 595
/* Date Utilities                                                                                                      // 596
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 598
fc.computeIntervalUnit = computeIntervalUnit;                                                                          // 599
fc.divideRangeByDuration = divideRangeByDuration;                                                                      // 600
fc.divideDurationByDuration = divideDurationByDuration;                                                                // 601
fc.multiplyDuration = multiplyDuration;                                                                                // 602
fc.durationHasTime = durationHasTime;                                                                                  // 603
                                                                                                                       // 604
var dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 605
var intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 606
                                                                                                                       // 607
                                                                                                                       // 608
// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 609
// Moments will have their timezones normalized.                                                                       // 610
function diffDayTime(a, b) {                                                                                           // 611
	return moment.duration({                                                                                              // 612
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 613
		ms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 614
	});                                                                                                                   // 615
}                                                                                                                      // 616
                                                                                                                       // 617
                                                                                                                       // 618
// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 619
function diffDay(a, b) {                                                                                               // 620
	return moment.duration({                                                                                              // 621
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 622
	});                                                                                                                   // 623
}                                                                                                                      // 624
                                                                                                                       // 625
                                                                                                                       // 626
// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 627
function diffByUnit(a, b, unit) {                                                                                      // 628
	return moment.duration(                                                                                               // 629
		Math.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 630
		unit                                                                                                                 // 631
	);                                                                                                                    // 632
}                                                                                                                      // 633
                                                                                                                       // 634
                                                                                                                       // 635
// Computes the unit name of the largest whole-unit period of time.                                                    // 636
// For example, 48 hours will be "days" whereas 49 hours will be "hours".                                              // 637
// Accepts start/end, a range object, or an original duration object.                                                  // 638
function computeIntervalUnit(start, end) {                                                                             // 639
	var i, unit;                                                                                                          // 640
	var val;                                                                                                              // 641
                                                                                                                       // 642
	for (i = 0; i < intervalUnits.length; i++) {                                                                          // 643
		unit = intervalUnits[i];                                                                                             // 644
		val = computeRangeAs(unit, start, end);                                                                              // 645
                                                                                                                       // 646
		if (val >= 1 && isInt(val)) {                                                                                        // 647
			break;                                                                                                              // 648
		}                                                                                                                    // 649
	}                                                                                                                     // 650
                                                                                                                       // 651
	return unit; // will be "milliseconds" if nothing else matches                                                        // 652
}                                                                                                                      // 653
                                                                                                                       // 654
                                                                                                                       // 655
// Computes the number of units (like "hours") in the given range.                                                     // 656
// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 657
// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 658
// of month-diffing logic (which tends to vary from version to version).                                               // 659
function computeRangeAs(unit, start, end) {                                                                            // 660
                                                                                                                       // 661
	if (end != null) { // given start, end                                                                                // 662
		return end.diff(start, unit, true);                                                                                  // 663
	}                                                                                                                     // 664
	else if (moment.isDuration(start)) { // given duration                                                                // 665
		return start.as(unit);                                                                                               // 666
	}                                                                                                                     // 667
	else { // given { start, end } range object                                                                           // 668
		return start.end.diff(start.start, unit, true);                                                                      // 669
	}                                                                                                                     // 670
}                                                                                                                      // 671
                                                                                                                       // 672
                                                                                                                       // 673
// Intelligently divides a range (specified by a start/end params) by a duration                                       // 674
function divideRangeByDuration(start, end, dur) {                                                                      // 675
	var months;                                                                                                           // 676
                                                                                                                       // 677
	if (durationHasTime(dur)) {                                                                                           // 678
		return (end - start) / dur;                                                                                          // 679
	}                                                                                                                     // 680
	months = dur.asMonths();                                                                                              // 681
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 682
		return end.diff(start, 'months', true) / months;                                                                     // 683
	}                                                                                                                     // 684
	return end.diff(start, 'days', true) / dur.asDays();                                                                  // 685
}                                                                                                                      // 686
                                                                                                                       // 687
                                                                                                                       // 688
// Intelligently divides one duration by another                                                                       // 689
function divideDurationByDuration(dur1, dur2) {                                                                        // 690
	var months1, months2;                                                                                                 // 691
                                                                                                                       // 692
	if (durationHasTime(dur1) || durationHasTime(dur2)) {                                                                 // 693
		return dur1 / dur2;                                                                                                  // 694
	}                                                                                                                     // 695
	months1 = dur1.asMonths();                                                                                            // 696
	months2 = dur2.asMonths();                                                                                            // 697
	if (                                                                                                                  // 698
		Math.abs(months1) >= 1 && isInt(months1) &&                                                                          // 699
		Math.abs(months2) >= 1 && isInt(months2)                                                                             // 700
	) {                                                                                                                   // 701
		return months1 / months2;                                                                                            // 702
	}                                                                                                                     // 703
	return dur1.asDays() / dur2.asDays();                                                                                 // 704
}                                                                                                                      // 705
                                                                                                                       // 706
                                                                                                                       // 707
// Intelligently multiplies a duration by a number                                                                     // 708
function multiplyDuration(dur, n) {                                                                                    // 709
	var months;                                                                                                           // 710
                                                                                                                       // 711
	if (durationHasTime(dur)) {                                                                                           // 712
		return moment.duration(dur * n);                                                                                     // 713
	}                                                                                                                     // 714
	months = dur.asMonths();                                                                                              // 715
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 716
		return moment.duration({ months: months * n });                                                                      // 717
	}                                                                                                                     // 718
	return moment.duration({ days: dur.asDays() * n });                                                                   // 719
}                                                                                                                      // 720
                                                                                                                       // 721
                                                                                                                       // 722
// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 723
function durationHasTime(dur) {                                                                                        // 724
	return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 725
}                                                                                                                      // 726
                                                                                                                       // 727
                                                                                                                       // 728
function isNativeDate(input) {                                                                                         // 729
	return  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 730
}                                                                                                                      // 731
                                                                                                                       // 732
                                                                                                                       // 733
// Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"                        // 734
function isTimeString(str) {                                                                                           // 735
	return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);                                                                 // 736
}                                                                                                                      // 737
                                                                                                                       // 738
                                                                                                                       // 739
/* Logging and Debug                                                                                                   // 740
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 742
fc.log = function() {                                                                                                  // 743
	var console = window.console;                                                                                         // 744
                                                                                                                       // 745
	if (console && console.log) {                                                                                         // 746
		return console.log.apply(console, arguments);                                                                        // 747
	}                                                                                                                     // 748
};                                                                                                                     // 749
                                                                                                                       // 750
fc.warn = function() {                                                                                                 // 751
	var console = window.console;                                                                                         // 752
                                                                                                                       // 753
	if (console && console.warn) {                                                                                        // 754
		return console.warn.apply(console, arguments);                                                                       // 755
	}                                                                                                                     // 756
	else {                                                                                                                // 757
		return fc.log.apply(fc, arguments);                                                                                  // 758
	}                                                                                                                     // 759
};                                                                                                                     // 760
                                                                                                                       // 761
                                                                                                                       // 762
/* General Utilities                                                                                                   // 763
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 765
var hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 766
                                                                                                                       // 767
                                                                                                                       // 768
// Merges an array of objects into a single object.                                                                    // 769
// The second argument allows for an array of property names who's object values will be merged together.              // 770
function mergeProps(propObjs, complexProps) {                                                                          // 771
	var dest = {};                                                                                                        // 772
	var i, name;                                                                                                          // 773
	var complexObjs;                                                                                                      // 774
	var j, val;                                                                                                           // 775
	var props;                                                                                                            // 776
                                                                                                                       // 777
	if (complexProps) {                                                                                                   // 778
		for (i = 0; i < complexProps.length; i++) {                                                                          // 779
			name = complexProps[i];                                                                                             // 780
			complexObjs = [];                                                                                                   // 781
                                                                                                                       // 782
			// collect the trailing object values, stopping when a non-object is discovered                                     // 783
			for (j = propObjs.length - 1; j >= 0; j--) {                                                                        // 784
				val = propObjs[j][name];                                                                                           // 785
                                                                                                                       // 786
				if (typeof val === 'object') {                                                                                     // 787
					complexObjs.unshift(val);                                                                                         // 788
				}                                                                                                                  // 789
				else if (val !== undefined) {                                                                                      // 790
					dest[name] = val; // if there were no objects, this value will be used                                            // 791
					break;                                                                                                            // 792
				}                                                                                                                  // 793
			}                                                                                                                   // 794
                                                                                                                       // 795
			// if the trailing values were objects, use the merged value                                                        // 796
			if (complexObjs.length) {                                                                                           // 797
				dest[name] = mergeProps(complexObjs);                                                                              // 798
			}                                                                                                                   // 799
		}                                                                                                                    // 800
	}                                                                                                                     // 801
                                                                                                                       // 802
	// copy values into the destination, going from last to first                                                         // 803
	for (i = propObjs.length - 1; i >= 0; i--) {                                                                          // 804
		props = propObjs[i];                                                                                                 // 805
                                                                                                                       // 806
		for (name in props) {                                                                                                // 807
			if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign                    // 808
				dest[name] = props[name];                                                                                          // 809
			}                                                                                                                   // 810
		}                                                                                                                    // 811
	}                                                                                                                     // 812
                                                                                                                       // 813
	return dest;                                                                                                          // 814
}                                                                                                                      // 815
                                                                                                                       // 816
                                                                                                                       // 817
// Create an object that has the given prototype. Just like Object.create                                              // 818
function createObject(proto) {                                                                                         // 819
	var f = function() {};                                                                                                // 820
	f.prototype = proto;                                                                                                  // 821
	return new f();                                                                                                       // 822
}                                                                                                                      // 823
                                                                                                                       // 824
                                                                                                                       // 825
function copyOwnProps(src, dest) {                                                                                     // 826
	for (var name in src) {                                                                                               // 827
		if (hasOwnProp(src, name)) {                                                                                         // 828
			dest[name] = src[name];                                                                                             // 829
		}                                                                                                                    // 830
	}                                                                                                                     // 831
}                                                                                                                      // 832
                                                                                                                       // 833
                                                                                                                       // 834
// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 835
// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 836
function copyNativeMethods(src, dest) {                                                                                // 837
	var names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 838
	var i, name;                                                                                                          // 839
                                                                                                                       // 840
	for (i = 0; i < names.length; i++) {                                                                                  // 841
		name = names[i];                                                                                                     // 842
                                                                                                                       // 843
		if (src[name] !== Object.prototype[name]) {                                                                          // 844
			dest[name] = src[name];                                                                                             // 845
		}                                                                                                                    // 846
	}                                                                                                                     // 847
}                                                                                                                      // 848
                                                                                                                       // 849
                                                                                                                       // 850
function hasOwnProp(obj, name) {                                                                                       // 851
	return hasOwnPropMethod.call(obj, name);                                                                              // 852
}                                                                                                                      // 853
                                                                                                                       // 854
                                                                                                                       // 855
// Is the given value a non-object non-function value?                                                                 // 856
function isAtomic(val) {                                                                                               // 857
	return /undefined|null|boolean|number|string/.test($.type(val));                                                      // 858
}                                                                                                                      // 859
                                                                                                                       // 860
                                                                                                                       // 861
function applyAll(functions, thisObj, args) {                                                                          // 862
	if ($.isFunction(functions)) {                                                                                        // 863
		functions = [ functions ];                                                                                           // 864
	}                                                                                                                     // 865
	if (functions) {                                                                                                      // 866
		var i;                                                                                                               // 867
		var ret;                                                                                                             // 868
		for (i=0; i<functions.length; i++) {                                                                                 // 869
			ret = functions[i].apply(thisObj, args) || ret;                                                                     // 870
		}                                                                                                                    // 871
		return ret;                                                                                                          // 872
	}                                                                                                                     // 873
}                                                                                                                      // 874
                                                                                                                       // 875
                                                                                                                       // 876
function firstDefined() {                                                                                              // 877
	for (var i=0; i<arguments.length; i++) {                                                                              // 878
		if (arguments[i] !== undefined) {                                                                                    // 879
			return arguments[i];                                                                                                // 880
		}                                                                                                                    // 881
	}                                                                                                                     // 882
}                                                                                                                      // 883
                                                                                                                       // 884
                                                                                                                       // 885
function htmlEscape(s) {                                                                                               // 886
	return (s + '').replace(/&/g, '&amp;')                                                                                // 887
		.replace(/</g, '&lt;')                                                                                               // 888
		.replace(/>/g, '&gt;')                                                                                               // 889
		.replace(/'/g, '&#039;')                                                                                             // 890
		.replace(/"/g, '&quot;')                                                                                             // 891
		.replace(/\n/g, '<br />');                                                                                           // 892
}                                                                                                                      // 893
                                                                                                                       // 894
                                                                                                                       // 895
function stripHtmlEntities(text) {                                                                                     // 896
	return text.replace(/&.*?;/g, '');                                                                                    // 897
}                                                                                                                      // 898
                                                                                                                       // 899
                                                                                                                       // 900
// Given a hash of CSS properties, returns a string of CSS.                                                            // 901
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 902
function cssToStr(cssProps) {                                                                                          // 903
	var statements = [];                                                                                                  // 904
                                                                                                                       // 905
	$.each(cssProps, function(name, val) {                                                                                // 906
		if (val != null) {                                                                                                   // 907
			statements.push(name + ':' + val);                                                                                  // 908
		}                                                                                                                    // 909
	});                                                                                                                   // 910
                                                                                                                       // 911
	return statements.join(';');                                                                                          // 912
}                                                                                                                      // 913
                                                                                                                       // 914
                                                                                                                       // 915
function capitaliseFirstLetter(str) {                                                                                  // 916
	return str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 917
}                                                                                                                      // 918
                                                                                                                       // 919
                                                                                                                       // 920
function compareNumbers(a, b) { // for .sort()                                                                         // 921
	return a - b;                                                                                                         // 922
}                                                                                                                      // 923
                                                                                                                       // 924
                                                                                                                       // 925
function isInt(n) {                                                                                                    // 926
	return n % 1 === 0;                                                                                                   // 927
}                                                                                                                      // 928
                                                                                                                       // 929
                                                                                                                       // 930
// Returns a method bound to the given object context.                                                                 // 931
// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 932
// different contexts as identical when binding/unbinding events.                                                      // 933
function proxy(obj, methodName) {                                                                                      // 934
	var method = obj[methodName];                                                                                         // 935
                                                                                                                       // 936
	return function() {                                                                                                   // 937
		return method.apply(obj, arguments);                                                                                 // 938
	};                                                                                                                    // 939
}                                                                                                                      // 940
                                                                                                                       // 941
                                                                                                                       // 942
// Returns a function, that, as long as it continues to be invoked, will not                                           // 943
// be triggered. The function will be called after it stops being called for                                           // 944
// N milliseconds.                                                                                                     // 945
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 946
function debounce(func, wait) {                                                                                        // 947
	var timeoutId;                                                                                                        // 948
	var args;                                                                                                             // 949
	var context;                                                                                                          // 950
	var timestamp; // of most recent call                                                                                 // 951
	var later = function() {                                                                                              // 952
		var last = +new Date() - timestamp;                                                                                  // 953
		if (last < wait && last > 0) {                                                                                       // 954
			timeoutId = setTimeout(later, wait - last);                                                                         // 955
		}                                                                                                                    // 956
		else {                                                                                                               // 957
			timeoutId = null;                                                                                                   // 958
			func.apply(context, args);                                                                                          // 959
			if (!timeoutId) {                                                                                                   // 960
				context = args = null;                                                                                             // 961
			}                                                                                                                   // 962
		}                                                                                                                    // 963
	};                                                                                                                    // 964
                                                                                                                       // 965
	return function() {                                                                                                   // 966
		context = this;                                                                                                      // 967
		args = arguments;                                                                                                    // 968
		timestamp = +new Date();                                                                                             // 969
		if (!timeoutId) {                                                                                                    // 970
			timeoutId = setTimeout(later, wait);                                                                                // 971
		}                                                                                                                    // 972
	};                                                                                                                    // 973
}                                                                                                                      // 974
                                                                                                                       // 975
;;                                                                                                                     // 976
                                                                                                                       // 977
var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;                                                                         // 978
var ambigTimeOrZoneRegex =                                                                                             // 979
	/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;                     // 980
var newMomentProto = moment.fn; // where we will attach our new methods                                                // 981
var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 982
var allowValueOptimization;                                                                                            // 983
var setUTCValues; // function defined below                                                                            // 984
var setLocalValues; // function defined below                                                                          // 985
                                                                                                                       // 986
                                                                                                                       // 987
// Creating                                                                                                            // 988
// -------------------------------------------------------------------------------------------------                   // 989
                                                                                                                       // 990
// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 991
// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 992
// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 993
// result in a moment in the local zone.                                                                               // 994
fc.moment = function() {                                                                                               // 995
	return makeMoment(arguments);                                                                                         // 996
};                                                                                                                     // 997
                                                                                                                       // 998
// Sames as fc.moment, but forces the resulting moment to be in the UTC timezone.                                      // 999
fc.moment.utc = function() {                                                                                           // 1000
	var mom = makeMoment(arguments, true);                                                                                // 1001
                                                                                                                       // 1002
	// Force it into UTC because makeMoment doesn't guarantee it                                                          // 1003
	// (if given a pre-existing moment for example)                                                                       // 1004
	if (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 1005
		mom.utc();                                                                                                           // 1006
	}                                                                                                                     // 1007
                                                                                                                       // 1008
	return mom;                                                                                                           // 1009
};                                                                                                                     // 1010
                                                                                                                       // 1011
// Same as fc.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 1012
// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 1013
fc.moment.parseZone = function() {                                                                                     // 1014
	return makeMoment(arguments, true, true);                                                                             // 1015
};                                                                                                                     // 1016
                                                                                                                       // 1017
// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 1018
// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 1019
// Anything else needs to be "parsed" (a string or an array), and will be affected by:                                 // 1020
//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 1021
//    parseZone - if there is zone information, should we force the zone of the moment?                                // 1022
function makeMoment(args, parseAsUTC, parseZone) {                                                                     // 1023
	var input = args[0];                                                                                                  // 1024
	var isSingleString = args.length == 1 && typeof input === 'string';                                                   // 1025
	var isAmbigTime;                                                                                                      // 1026
	var isAmbigZone;                                                                                                      // 1027
	var ambigMatch;                                                                                                       // 1028
	var mom;                                                                                                              // 1029
                                                                                                                       // 1030
	if (moment.isMoment(input)) {                                                                                         // 1031
		mom = moment.apply(null, args); // clone it                                                                          // 1032
		transferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 1033
	}                                                                                                                     // 1034
	else if (isNativeDate(input) || input === undefined) {                                                                // 1035
		mom = moment.apply(null, args); // will be local                                                                     // 1036
	}                                                                                                                     // 1037
	else { // "parsing" is required                                                                                       // 1038
		isAmbigTime = false;                                                                                                 // 1039
		isAmbigZone = false;                                                                                                 // 1040
                                                                                                                       // 1041
		if (isSingleString) {                                                                                                // 1042
			if (ambigDateOfMonthRegex.test(input)) {                                                                            // 1043
				// accept strings like '2014-05', but convert to the first of the month                                            // 1044
				input += '-01';                                                                                                    // 1045
				args = [ input ]; // for when we pass it on to moment's constructor                                                // 1046
				isAmbigTime = true;                                                                                                // 1047
				isAmbigZone = true;                                                                                                // 1048
			}                                                                                                                   // 1049
			else if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 1050
				isAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 1051
				isAmbigZone = true;                                                                                                // 1052
			}                                                                                                                   // 1053
		}                                                                                                                    // 1054
		else if ($.isArray(input)) {                                                                                         // 1055
			// arrays have no timezone information, so assume ambiguous zone                                                    // 1056
			isAmbigZone = true;                                                                                                 // 1057
		}                                                                                                                    // 1058
		// otherwise, probably a string with a format                                                                        // 1059
                                                                                                                       // 1060
		if (parseAsUTC || isAmbigTime) {                                                                                     // 1061
			mom = moment.utc.apply(moment, args);                                                                               // 1062
		}                                                                                                                    // 1063
		else {                                                                                                               // 1064
			mom = moment.apply(null, args);                                                                                     // 1065
		}                                                                                                                    // 1066
                                                                                                                       // 1067
		if (isAmbigTime) {                                                                                                   // 1068
			mom._ambigTime = true;                                                                                              // 1069
			mom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 1070
		}                                                                                                                    // 1071
		else if (parseZone) { // let's record the inputted zone somehow                                                      // 1072
			if (isAmbigZone) {                                                                                                  // 1073
				mom._ambigZone = true;                                                                                             // 1074
			}                                                                                                                   // 1075
			else if (isSingleString) {                                                                                          // 1076
				if (mom.utcOffset) {                                                                                               // 1077
					mom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 1078
				}                                                                                                                  // 1079
				else {                                                                                                             // 1080
					mom.zone(input); // for moment-pre-2.9                                                                            // 1081
				}                                                                                                                  // 1082
			}                                                                                                                   // 1083
		}                                                                                                                    // 1084
	}                                                                                                                     // 1085
                                                                                                                       // 1086
	mom._fullCalendar = true; // flag for extended functionality                                                          // 1087
                                                                                                                       // 1088
	return mom;                                                                                                           // 1089
}                                                                                                                      // 1090
                                                                                                                       // 1091
                                                                                                                       // 1092
// A clone method that works with the flags related to our enhanced functionality.                                     // 1093
// In the future, use moment.momentProperties                                                                          // 1094
newMomentProto.clone = function() {                                                                                    // 1095
	var mom = oldMomentProto.clone.apply(this, arguments);                                                                // 1096
                                                                                                                       // 1097
	// these flags weren't transfered with the clone                                                                      // 1098
	transferAmbigs(this, mom);                                                                                            // 1099
	if (this._fullCalendar) {                                                                                             // 1100
		mom._fullCalendar = true;                                                                                            // 1101
	}                                                                                                                     // 1102
                                                                                                                       // 1103
	return mom;                                                                                                           // 1104
};                                                                                                                     // 1105
                                                                                                                       // 1106
                                                                                                                       // 1107
// Week Number                                                                                                         // 1108
// -------------------------------------------------------------------------------------------------                   // 1109
                                                                                                                       // 1110
                                                                                                                       // 1111
// Returns the week number, considering the locale's custom week number calcuation                                     // 1112
// `weeks` is an alias for `week`                                                                                      // 1113
newMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 1114
	var weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 1115
		._fullCalendar_weekCalc;                                                                                             // 1116
                                                                                                                       // 1117
	if (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 1118
		return weekCalc(this);                                                                                               // 1119
	}                                                                                                                     // 1120
	else if (weekCalc === 'ISO') {                                                                                        // 1121
		return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 1122
	}                                                                                                                     // 1123
                                                                                                                       // 1124
	return oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 1125
};                                                                                                                     // 1126
                                                                                                                       // 1127
                                                                                                                       // 1128
// Time-of-day                                                                                                         // 1129
// -------------------------------------------------------------------------------------------------                   // 1130
                                                                                                                       // 1131
// GETTER                                                                                                              // 1132
// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 1133
// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 1134
//                                                                                                                     // 1135
// SETTER                                                                                                              // 1136
// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 1137
// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 1138
newMomentProto.time = function(time) {                                                                                 // 1139
                                                                                                                       // 1140
	// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 1141
	// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 1142
	if (!this._fullCalendar) {                                                                                            // 1143
		return oldMomentProto.time.apply(this, arguments);                                                                   // 1144
	}                                                                                                                     // 1145
                                                                                                                       // 1146
	if (time == null) { // getter                                                                                         // 1147
		return moment.duration({                                                                                             // 1148
			hours: this.hours(),                                                                                                // 1149
			minutes: this.minutes(),                                                                                            // 1150
			seconds: this.seconds(),                                                                                            // 1151
			milliseconds: this.milliseconds()                                                                                   // 1152
		});                                                                                                                  // 1153
	}                                                                                                                     // 1154
	else { // setter                                                                                                      // 1155
                                                                                                                       // 1156
		this._ambigTime = false; // mark that the moment now has a time                                                      // 1157
                                                                                                                       // 1158
		if (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 1159
			time = moment.duration(time);                                                                                       // 1160
		}                                                                                                                    // 1161
                                                                                                                       // 1162
		// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 1163
		// Only for Duration times, not Moment times.                                                                        // 1164
		var dayHours = 0;                                                                                                    // 1165
		if (moment.isDuration(time)) {                                                                                       // 1166
			dayHours = Math.floor(time.asDays()) * 24;                                                                          // 1167
		}                                                                                                                    // 1168
                                                                                                                       // 1169
		// We need to set the individual fields.                                                                             // 1170
		// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 1171
		return this.hours(dayHours + time.hours())                                                                           // 1172
			.minutes(time.minutes())                                                                                            // 1173
			.seconds(time.seconds())                                                                                            // 1174
			.milliseconds(time.milliseconds());                                                                                 // 1175
	}                                                                                                                     // 1176
};                                                                                                                     // 1177
                                                                                                                       // 1178
// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1179
// but preserving its YMD. A moment with a stripped time will display no time                                          // 1180
// nor timezone offset when .format() is called.                                                                       // 1181
newMomentProto.stripTime = function() {                                                                                // 1182
	var a;                                                                                                                // 1183
                                                                                                                       // 1184
	if (!this._ambigTime) {                                                                                               // 1185
                                                                                                                       // 1186
		// get the values before any conversion happens                                                                      // 1187
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1188
                                                                                                                       // 1189
		// TODO: use keepLocalTime in the future                                                                             // 1190
		this.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1191
		setUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1192
                                                                                                                       // 1193
		// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1194
		// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1195
		this._ambigTime = true;                                                                                              // 1196
		this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1197
	}                                                                                                                     // 1198
                                                                                                                       // 1199
	return this; // for chaining                                                                                          // 1200
};                                                                                                                     // 1201
                                                                                                                       // 1202
// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1203
newMomentProto.hasTime = function() {                                                                                  // 1204
	return !this._ambigTime;                                                                                              // 1205
};                                                                                                                     // 1206
                                                                                                                       // 1207
                                                                                                                       // 1208
// Timezone                                                                                                            // 1209
// -------------------------------------------------------------------------------------------------                   // 1210
                                                                                                                       // 1211
// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1212
// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1213
// timezone offset when .format() is called.                                                                           // 1214
// TODO: look into Moment's keepLocalTime functionality                                                                // 1215
newMomentProto.stripZone = function() {                                                                                // 1216
	var a, wasAmbigTime;                                                                                                  // 1217
                                                                                                                       // 1218
	if (!this._ambigZone) {                                                                                               // 1219
                                                                                                                       // 1220
		// get the values before any conversion happens                                                                      // 1221
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1222
		wasAmbigTime = this._ambigTime;                                                                                      // 1223
                                                                                                                       // 1224
		this.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1225
		setUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1226
                                                                                                                       // 1227
		// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1228
		this._ambigTime = wasAmbigTime || false;                                                                             // 1229
                                                                                                                       // 1230
		// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1231
		// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1232
		this._ambigZone = true;                                                                                              // 1233
	}                                                                                                                     // 1234
                                                                                                                       // 1235
	return this; // for chaining                                                                                          // 1236
};                                                                                                                     // 1237
                                                                                                                       // 1238
// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1239
newMomentProto.hasZone = function() {                                                                                  // 1240
	return !this._ambigZone;                                                                                              // 1241
};                                                                                                                     // 1242
                                                                                                                       // 1243
                                                                                                                       // 1244
// this method implicitly marks a zone                                                                                 // 1245
newMomentProto.local = function() {                                                                                    // 1246
	var a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1247
	var wasAmbigZone = this._ambigZone;                                                                                   // 1248
                                                                                                                       // 1249
	oldMomentProto.local.apply(this, arguments);                                                                          // 1250
                                                                                                                       // 1251
	// ensure non-ambiguous                                                                                               // 1252
	// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1253
	this._ambigTime = false;                                                                                              // 1254
	this._ambigZone = false;                                                                                              // 1255
                                                                                                                       // 1256
	if (wasAmbigZone) {                                                                                                   // 1257
		// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1258
		// We want to preserve these, but in local time.                                                                     // 1259
		// TODO: look into Moment's keepLocalTime functionality                                                              // 1260
		setLocalValues(this, a);                                                                                             // 1261
	}                                                                                                                     // 1262
                                                                                                                       // 1263
	return this; // for chaining                                                                                          // 1264
};                                                                                                                     // 1265
                                                                                                                       // 1266
                                                                                                                       // 1267
// implicitly marks a zone                                                                                             // 1268
newMomentProto.utc = function() {                                                                                      // 1269
	oldMomentProto.utc.apply(this, arguments);                                                                            // 1270
                                                                                                                       // 1271
	// ensure non-ambiguous                                                                                               // 1272
	// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1273
	this._ambigTime = false;                                                                                              // 1274
	this._ambigZone = false;                                                                                              // 1275
                                                                                                                       // 1276
	return this;                                                                                                          // 1277
};                                                                                                                     // 1278
                                                                                                                       // 1279
                                                                                                                       // 1280
// methods for arbitrarily manipulating timezone offset.                                                               // 1281
// should clear time/zone ambiguity when called.                                                                       // 1282
$.each([                                                                                                               // 1283
	'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1284
	'utcOffset'                                                                                                           // 1285
], function(i, name) {                                                                                                 // 1286
	if (oldMomentProto[name]) { // original method exists?                                                                // 1287
                                                                                                                       // 1288
		// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1289
		newMomentProto[name] = function(tzo) {                                                                               // 1290
                                                                                                                       // 1291
			if (tzo != null) { // setter                                                                                        // 1292
				// these assignments needs to happen before the original zone method is called.                                    // 1293
				// I forget why, something to do with a browser crash.                                                             // 1294
				this._ambigTime = false;                                                                                           // 1295
				this._ambigZone = false;                                                                                           // 1296
			}                                                                                                                   // 1297
                                                                                                                       // 1298
			return oldMomentProto[name].apply(this, arguments);                                                                 // 1299
		};                                                                                                                   // 1300
	}                                                                                                                     // 1301
});                                                                                                                    // 1302
                                                                                                                       // 1303
                                                                                                                       // 1304
// Formatting                                                                                                          // 1305
// -------------------------------------------------------------------------------------------------                   // 1306
                                                                                                                       // 1307
newMomentProto.format = function() {                                                                                   // 1308
	if (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1309
		return formatDate(this, arguments[0]); // our extended formatting                                                    // 1310
	}                                                                                                                     // 1311
	if (this._ambigTime) {                                                                                                // 1312
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1313
	}                                                                                                                     // 1314
	if (this._ambigZone) {                                                                                                // 1315
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1316
	}                                                                                                                     // 1317
	return oldMomentProto.format.apply(this, arguments);                                                                  // 1318
};                                                                                                                     // 1319
                                                                                                                       // 1320
newMomentProto.toISOString = function() {                                                                              // 1321
	if (this._ambigTime) {                                                                                                // 1322
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1323
	}                                                                                                                     // 1324
	if (this._ambigZone) {                                                                                                // 1325
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1326
	}                                                                                                                     // 1327
	return oldMomentProto.toISOString.apply(this, arguments);                                                             // 1328
};                                                                                                                     // 1329
                                                                                                                       // 1330
                                                                                                                       // 1331
// Querying                                                                                                            // 1332
// -------------------------------------------------------------------------------------------------                   // 1333
                                                                                                                       // 1334
// Is the moment within the specified range? `end` is exclusive.                                                       // 1335
// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1336
newMomentProto.isWithin = function(start, end) {                                                                       // 1337
	var a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1338
	return a[0] >= a[1] && a[0] < a[2];                                                                                   // 1339
};                                                                                                                     // 1340
                                                                                                                       // 1341
// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1342
// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1343
newMomentProto.isSame = function(input, units) {                                                                       // 1344
	var a;                                                                                                                // 1345
                                                                                                                       // 1346
	// only do custom logic if this is an enhanced moment                                                                 // 1347
	if (!this._fullCalendar) {                                                                                            // 1348
		return oldMomentProto.isSame.apply(this, arguments);                                                                 // 1349
	}                                                                                                                     // 1350
                                                                                                                       // 1351
	if (units) {                                                                                                          // 1352
		a = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1353
		return oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1354
	}                                                                                                                     // 1355
	else {                                                                                                                // 1356
		input = fc.moment.parseZone(input); // normalize input                                                               // 1357
		return oldMomentProto.isSame.call(this, input) &&                                                                    // 1358
			Boolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1359
			Boolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1360
	}                                                                                                                     // 1361
};                                                                                                                     // 1362
                                                                                                                       // 1363
// Make these query methods work with ambiguous moments                                                                // 1364
$.each([                                                                                                               // 1365
	'isBefore',                                                                                                           // 1366
	'isAfter'                                                                                                             // 1367
], function(i, methodName) {                                                                                           // 1368
	newMomentProto[methodName] = function(input, units) {                                                                 // 1369
		var a;                                                                                                               // 1370
                                                                                                                       // 1371
		// only do custom logic if this is an enhanced moment                                                                // 1372
		if (!this._fullCalendar) {                                                                                           // 1373
			return oldMomentProto[methodName].apply(this, arguments);                                                           // 1374
		}                                                                                                                    // 1375
                                                                                                                       // 1376
		a = commonlyAmbiguate([ this, input ]);                                                                              // 1377
		return oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1378
	};                                                                                                                    // 1379
});                                                                                                                    // 1380
                                                                                                                       // 1381
                                                                                                                       // 1382
// Misc Internals                                                                                                      // 1383
// -------------------------------------------------------------------------------------------------                   // 1384
                                                                                                                       // 1385
// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1386
// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1387
// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1388
// returns the original moments if no modifications are necessary.                                                     // 1389
function commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1390
	var anyAmbigTime = false;                                                                                             // 1391
	var anyAmbigZone = false;                                                                                             // 1392
	var len = inputs.length;                                                                                              // 1393
	var moms = [];                                                                                                        // 1394
	var i, mom;                                                                                                           // 1395
                                                                                                                       // 1396
	// parse inputs into real moments and query their ambig flags                                                         // 1397
	for (i = 0; i < len; i++) {                                                                                           // 1398
		mom = inputs[i];                                                                                                     // 1399
		if (!moment.isMoment(mom)) {                                                                                         // 1400
			mom = fc.moment.parseZone(mom);                                                                                     // 1401
		}                                                                                                                    // 1402
		anyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1403
		anyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1404
		moms.push(mom);                                                                                                      // 1405
	}                                                                                                                     // 1406
                                                                                                                       // 1407
	// strip each moment down to lowest common ambiguity                                                                  // 1408
	// use clones to avoid modifying the original moments                                                                 // 1409
	for (i = 0; i < len; i++) {                                                                                           // 1410
		mom = moms[i];                                                                                                       // 1411
		if (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1412
			moms[i] = mom.clone().stripTime();                                                                                  // 1413
		}                                                                                                                    // 1414
		else if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1415
			moms[i] = mom.clone().stripZone();                                                                                  // 1416
		}                                                                                                                    // 1417
	}                                                                                                                     // 1418
                                                                                                                       // 1419
	return moms;                                                                                                          // 1420
}                                                                                                                      // 1421
                                                                                                                       // 1422
// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1423
// TODO: look into moment.momentProperties for this.                                                                   // 1424
function transferAmbigs(src, dest) {                                                                                   // 1425
	if (src._ambigTime) {                                                                                                 // 1426
		dest._ambigTime = true;                                                                                              // 1427
	}                                                                                                                     // 1428
	else if (dest._ambigTime) {                                                                                           // 1429
		dest._ambigTime = false;                                                                                             // 1430
	}                                                                                                                     // 1431
                                                                                                                       // 1432
	if (src._ambigZone) {                                                                                                 // 1433
		dest._ambigZone = true;                                                                                              // 1434
	}                                                                                                                     // 1435
	else if (dest._ambigZone) {                                                                                           // 1436
		dest._ambigZone = false;                                                                                             // 1437
	}                                                                                                                     // 1438
}                                                                                                                      // 1439
                                                                                                                       // 1440
                                                                                                                       // 1441
// Sets the year/month/date/etc values of the moment from the given array.                                             // 1442
// Inefficient because it calls each individual setter.                                                                // 1443
function setMomentValues(mom, a) {                                                                                     // 1444
	mom.year(a[0] || 0)                                                                                                   // 1445
		.month(a[1] || 0)                                                                                                    // 1446
		.date(a[2] || 0)                                                                                                     // 1447
		.hours(a[3] || 0)                                                                                                    // 1448
		.minutes(a[4] || 0)                                                                                                  // 1449
		.seconds(a[5] || 0)                                                                                                  // 1450
		.milliseconds(a[6] || 0);                                                                                            // 1451
}                                                                                                                      // 1452
                                                                                                                       // 1453
// Can we set the moment's internal date directly?                                                                     // 1454
allowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1455
                                                                                                                       // 1456
// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1457
// Assumes the given moment is already in UTC mode.                                                                    // 1458
setUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1459
	// simlate what moment's accessors do                                                                                 // 1460
	mom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1461
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1462
} : setMomentValues;                                                                                                   // 1463
                                                                                                                       // 1464
// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1465
// Assumes the given moment is already in local mode.                                                                  // 1466
setLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1467
	// simlate what moment's accessors do                                                                                 // 1468
	mom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1469
		a[0] || 0,                                                                                                           // 1470
		a[1] || 0,                                                                                                           // 1471
		a[2] || 0,                                                                                                           // 1472
		a[3] || 0,                                                                                                           // 1473
		a[4] || 0,                                                                                                           // 1474
		a[5] || 0,                                                                                                           // 1475
		a[6] || 0                                                                                                            // 1476
	));                                                                                                                   // 1477
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1478
} : setMomentValues;                                                                                                   // 1479
                                                                                                                       // 1480
;;                                                                                                                     // 1481
                                                                                                                       // 1482
// Single Date Formatting                                                                                              // 1483
// -------------------------------------------------------------------------------------------------                   // 1484
                                                                                                                       // 1485
                                                                                                                       // 1486
// call this if you want Moment's original format method to be used                                                    // 1487
function oldMomentFormat(mom, formatStr) {                                                                             // 1488
	return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1489
}                                                                                                                      // 1490
                                                                                                                       // 1491
                                                                                                                       // 1492
// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1493
// additional token.                                                                                                   // 1494
function formatDate(date, formatStr) {                                                                                 // 1495
	return formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1496
}                                                                                                                      // 1497
                                                                                                                       // 1498
                                                                                                                       // 1499
function formatDateWithChunks(date, chunks) {                                                                          // 1500
	var s = '';                                                                                                           // 1501
	var i;                                                                                                                // 1502
                                                                                                                       // 1503
	for (i=0; i<chunks.length; i++) {                                                                                     // 1504
		s += formatDateWithChunk(date, chunks[i]);                                                                           // 1505
	}                                                                                                                     // 1506
                                                                                                                       // 1507
	return s;                                                                                                             // 1508
}                                                                                                                      // 1509
                                                                                                                       // 1510
                                                                                                                       // 1511
// addition formatting tokens we want recognized                                                                       // 1512
var tokenOverrides = {                                                                                                 // 1513
	t: function(date) { // "a" or "p"                                                                                     // 1514
		return oldMomentFormat(date, 'a').charAt(0);                                                                         // 1515
	},                                                                                                                    // 1516
	T: function(date) { // "A" or "P"                                                                                     // 1517
		return oldMomentFormat(date, 'A').charAt(0);                                                                         // 1518
	}                                                                                                                     // 1519
};                                                                                                                     // 1520
                                                                                                                       // 1521
                                                                                                                       // 1522
function formatDateWithChunk(date, chunk) {                                                                            // 1523
	var token;                                                                                                            // 1524
	var maybeStr;                                                                                                         // 1525
                                                                                                                       // 1526
	if (typeof chunk === 'string') { // a literal string                                                                  // 1527
		return chunk;                                                                                                        // 1528
	}                                                                                                                     // 1529
	else if ((token = chunk.token)) { // a token, like "YYYY"                                                             // 1530
		if (tokenOverrides[token]) {                                                                                         // 1531
			return tokenOverrides[token](date); // use our custom token                                                         // 1532
		}                                                                                                                    // 1533
		return oldMomentFormat(date, token);                                                                                 // 1534
	}                                                                                                                     // 1535
	else if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1536
		maybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1537
		if (maybeStr.match(/[1-9]/)) {                                                                                       // 1538
			return maybeStr;                                                                                                    // 1539
		}                                                                                                                    // 1540
	}                                                                                                                     // 1541
                                                                                                                       // 1542
	return '';                                                                                                            // 1543
}                                                                                                                      // 1544
                                                                                                                       // 1545
                                                                                                                       // 1546
// Date Range Formatting                                                                                               // 1547
// -------------------------------------------------------------------------------------------------                   // 1548
// TODO: make it work with timezone offset                                                                             // 1549
                                                                                                                       // 1550
// Using a formatting string meant for a single date, generate a range string, like                                    // 1551
// "Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.                                    // 1552
// If the dates are the same as far as the format string is concerned, just return a single                            // 1553
// rendering of one date, without any separator.                                                                       // 1554
function formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1555
	var localeData;                                                                                                       // 1556
                                                                                                                       // 1557
	date1 = fc.moment.parseZone(date1);                                                                                   // 1558
	date2 = fc.moment.parseZone(date2);                                                                                   // 1559
                                                                                                                       // 1560
	localeData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1561
                                                                                                                       // 1562
	// Expand localized format strings, like "LL" -> "MMMM D YYYY"                                                        // 1563
	formatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1564
	// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1565
	// or non-zero areas in Moment's localized format strings.                                                            // 1566
                                                                                                                       // 1567
	separator = separator || ' - ';                                                                                       // 1568
                                                                                                                       // 1569
	return formatRangeWithChunks(                                                                                         // 1570
		date1,                                                                                                               // 1571
		date2,                                                                                                               // 1572
		getFormatStringChunks(formatStr),                                                                                    // 1573
		separator,                                                                                                           // 1574
		isRTL                                                                                                                // 1575
	);                                                                                                                    // 1576
}                                                                                                                      // 1577
fc.formatRange = formatRange; // expose                                                                                // 1578
                                                                                                                       // 1579
                                                                                                                       // 1580
function formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1581
	var chunkStr; // the rendering of the chunk                                                                           // 1582
	var leftI;                                                                                                            // 1583
	var leftStr = '';                                                                                                     // 1584
	var rightI;                                                                                                           // 1585
	var rightStr = '';                                                                                                    // 1586
	var middleI;                                                                                                          // 1587
	var middleStr1 = '';                                                                                                  // 1588
	var middleStr2 = '';                                                                                                  // 1589
	var middleStr = '';                                                                                                   // 1590
                                                                                                                       // 1591
	// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1592
	// that is not the same between dates.                                                                                // 1593
	for (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1594
		chunkStr = formatSimilarChunk(date1, date2, chunks[leftI]);                                                          // 1595
		if (chunkStr === false) {                                                                                            // 1596
			break;                                                                                                              // 1597
		}                                                                                                                    // 1598
		leftStr += chunkStr;                                                                                                 // 1599
	}                                                                                                                     // 1600
                                                                                                                       // 1601
	// Similarly, start at the rightmost side of the formatting string and move left                                      // 1602
	for (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1603
		chunkStr = formatSimilarChunk(date1, date2, chunks[rightI]);                                                         // 1604
		if (chunkStr === false) {                                                                                            // 1605
			break;                                                                                                              // 1606
		}                                                                                                                    // 1607
		rightStr = chunkStr + rightStr;                                                                                      // 1608
	}                                                                                                                     // 1609
                                                                                                                       // 1610
	// The area in the middle is different for both of the dates.                                                         // 1611
	// Collect them distinctly so we can jam them together later.                                                         // 1612
	for (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1613
		middleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1614
		middleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1615
	}                                                                                                                     // 1616
                                                                                                                       // 1617
	if (middleStr1 || middleStr2) {                                                                                       // 1618
		if (isRTL) {                                                                                                         // 1619
			middleStr = middleStr2 + separator + middleStr1;                                                                    // 1620
		}                                                                                                                    // 1621
		else {                                                                                                               // 1622
			middleStr = middleStr1 + separator + middleStr2;                                                                    // 1623
		}                                                                                                                    // 1624
	}                                                                                                                     // 1625
                                                                                                                       // 1626
	return leftStr + middleStr + rightStr;                                                                                // 1627
}                                                                                                                      // 1628
                                                                                                                       // 1629
                                                                                                                       // 1630
var similarUnitMap = {                                                                                                 // 1631
	Y: 'year',                                                                                                            // 1632
	M: 'month',                                                                                                           // 1633
	D: 'day', // day of month                                                                                             // 1634
	d: 'day', // day of week                                                                                              // 1635
	// prevents a separator between anything time-related...                                                              // 1636
	A: 'second', // AM/PM                                                                                                 // 1637
	a: 'second', // am/pm                                                                                                 // 1638
	T: 'second', // A/P                                                                                                   // 1639
	t: 'second', // a/p                                                                                                   // 1640
	H: 'second', // hour (24)                                                                                             // 1641
	h: 'second', // hour (12)                                                                                             // 1642
	m: 'second', // minute                                                                                                // 1643
	s: 'second' // second                                                                                                 // 1644
};                                                                                                                     // 1645
// TODO: week maybe?                                                                                                   // 1646
                                                                                                                       // 1647
                                                                                                                       // 1648
// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1649
// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1650
function formatSimilarChunk(date1, date2, chunk) {                                                                     // 1651
	var token;                                                                                                            // 1652
	var unit;                                                                                                             // 1653
                                                                                                                       // 1654
	if (typeof chunk === 'string') { // a literal string                                                                  // 1655
		return chunk;                                                                                                        // 1656
	}                                                                                                                     // 1657
	else if ((token = chunk.token)) {                                                                                     // 1658
		unit = similarUnitMap[token.charAt(0)];                                                                              // 1659
		// are the dates the same for this unit of measurement?                                                              // 1660
		if (unit && date1.isSame(date2, unit)) {                                                                             // 1661
			return oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1662
			// BTW, don't support custom tokens                                                                                 // 1663
		}                                                                                                                    // 1664
	}                                                                                                                     // 1665
                                                                                                                       // 1666
	return false; // the chunk is NOT the same for the two dates                                                          // 1667
	// BTW, don't support splitting on non-zero areas                                                                     // 1668
}                                                                                                                      // 1669
                                                                                                                       // 1670
                                                                                                                       // 1671
// Chunking Utils                                                                                                      // 1672
// -------------------------------------------------------------------------------------------------                   // 1673
                                                                                                                       // 1674
                                                                                                                       // 1675
var formatStringChunkCache = {};                                                                                       // 1676
                                                                                                                       // 1677
                                                                                                                       // 1678
function getFormatStringChunks(formatStr) {                                                                            // 1679
	if (formatStr in formatStringChunkCache) {                                                                            // 1680
		return formatStringChunkCache[formatStr];                                                                            // 1681
	}                                                                                                                     // 1682
	return (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1683
}                                                                                                                      // 1684
                                                                                                                       // 1685
                                                                                                                       // 1686
// Break the formatting string into an array of chunks                                                                 // 1687
function chunkFormatString(formatStr) {                                                                                // 1688
	var chunks = [];                                                                                                      // 1689
	var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; // TODO: more descrimination              // 1690
	var match;                                                                                                            // 1691
                                                                                                                       // 1692
	while ((match = chunker.exec(formatStr))) {                                                                           // 1693
		if (match[1]) { // a literal string inside [ ... ]                                                                   // 1694
			chunks.push(match[1]);                                                                                              // 1695
		}                                                                                                                    // 1696
		else if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1697
			chunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1698
		}                                                                                                                    // 1699
		else if (match[3]) { // a formatting token                                                                           // 1700
			chunks.push({ token: match[3] });                                                                                   // 1701
		}                                                                                                                    // 1702
		else if (match[5]) { // an unenclosed literal string                                                                 // 1703
			chunks.push(match[5]);                                                                                              // 1704
		}                                                                                                                    // 1705
	}                                                                                                                     // 1706
                                                                                                                       // 1707
	return chunks;                                                                                                        // 1708
}                                                                                                                      // 1709
                                                                                                                       // 1710
;;                                                                                                                     // 1711
                                                                                                                       // 1712
fc.Class = Class; // export                                                                                            // 1713
                                                                                                                       // 1714
// class that all other classes will inherit from                                                                      // 1715
function Class() { }                                                                                                   // 1716
                                                                                                                       // 1717
// called upon a class to create a subclass                                                                            // 1718
Class.extend = function(members) {                                                                                     // 1719
	var superClass = this;                                                                                                // 1720
	var subClass;                                                                                                         // 1721
                                                                                                                       // 1722
	members = members || {};                                                                                              // 1723
                                                                                                                       // 1724
	// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1725
	if (hasOwnProp(members, 'constructor')) {                                                                             // 1726
		subClass = members.constructor;                                                                                      // 1727
	}                                                                                                                     // 1728
	if (typeof subClass !== 'function') {                                                                                 // 1729
		subClass = members.constructor = function() {                                                                        // 1730
			superClass.apply(this, arguments);                                                                                  // 1731
		};                                                                                                                   // 1732
	}                                                                                                                     // 1733
                                                                                                                       // 1734
	// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1735
	subClass.prototype = createObject(superClass.prototype);                                                              // 1736
                                                                                                                       // 1737
	// copy each member variable/method onto the the subclass's prototype                                                 // 1738
	copyOwnProps(members, subClass.prototype);                                                                            // 1739
	copyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1740
                                                                                                                       // 1741
	// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1742
	copyOwnProps(superClass, subClass);                                                                                   // 1743
                                                                                                                       // 1744
	return subClass;                                                                                                      // 1745
};                                                                                                                     // 1746
                                                                                                                       // 1747
// adds new member variables/methods to the class's prototype.                                                         // 1748
// can be called with another class, or a plain object hash containing new members.                                    // 1749
Class.mixin = function(members) {                                                                                      // 1750
	copyOwnProps(members.prototype || members, this.prototype); // TODO: copyNativeMethods?                               // 1751
};                                                                                                                     // 1752
;;                                                                                                                     // 1753
                                                                                                                       // 1754
var Emitter = fc.Emitter = Class.extend({                                                                              // 1755
                                                                                                                       // 1756
	callbackHash: null,                                                                                                   // 1757
                                                                                                                       // 1758
                                                                                                                       // 1759
	on: function(name, callback) {                                                                                        // 1760
		this.getCallbacks(name).add(callback);                                                                               // 1761
		return this; // for chaining                                                                                         // 1762
	},                                                                                                                    // 1763
                                                                                                                       // 1764
                                                                                                                       // 1765
	off: function(name, callback) {                                                                                       // 1766
		this.getCallbacks(name).remove(callback);                                                                            // 1767
		return this; // for chaining                                                                                         // 1768
	},                                                                                                                    // 1769
                                                                                                                       // 1770
                                                                                                                       // 1771
	trigger: function(name) { // args...                                                                                  // 1772
		var args = Array.prototype.slice.call(arguments, 1);                                                                 // 1773
                                                                                                                       // 1774
		this.triggerWith(name, this, args);                                                                                  // 1775
                                                                                                                       // 1776
		return this; // for chaining                                                                                         // 1777
	},                                                                                                                    // 1778
                                                                                                                       // 1779
                                                                                                                       // 1780
	triggerWith: function(name, context, args) {                                                                          // 1781
		var callbacks = this.getCallbacks(name);                                                                             // 1782
                                                                                                                       // 1783
		callbacks.fireWith(context, args);                                                                                   // 1784
                                                                                                                       // 1785
		return this; // for chaining                                                                                         // 1786
	},                                                                                                                    // 1787
                                                                                                                       // 1788
                                                                                                                       // 1789
	getCallbacks: function(name) {                                                                                        // 1790
		var callbacks;                                                                                                       // 1791
                                                                                                                       // 1792
		if (!this.callbackHash) {                                                                                            // 1793
			this.callbackHash = {};                                                                                             // 1794
		}                                                                                                                    // 1795
                                                                                                                       // 1796
		callbacks = this.callbackHash[name];                                                                                 // 1797
		if (!callbacks) {                                                                                                    // 1798
			callbacks = this.callbackHash[name] = $.Callbacks();                                                                // 1799
		}                                                                                                                    // 1800
                                                                                                                       // 1801
		return callbacks;                                                                                                    // 1802
	}                                                                                                                     // 1803
                                                                                                                       // 1804
});                                                                                                                    // 1805
;;                                                                                                                     // 1806
                                                                                                                       // 1807
/* A rectangular panel that is absolutely positioned over other content                                                // 1808
------------------------------------------------------------------------------------------------------------------------
Options:                                                                                                               // 1810
	- className (string)                                                                                                  // 1811
	- content (HTML string or jQuery element set)                                                                         // 1812
	- parentEl                                                                                                            // 1813
	- top                                                                                                                 // 1814
	- left                                                                                                                // 1815
	- right (the x coord of where the right edge should be. not a "CSS" right)                                            // 1816
	- autoHide (boolean)                                                                                                  // 1817
	- show (callback)                                                                                                     // 1818
	- hide (callback)                                                                                                     // 1819
*/                                                                                                                     // 1820
                                                                                                                       // 1821
var Popover = Class.extend({                                                                                           // 1822
                                                                                                                       // 1823
	isHidden: true,                                                                                                       // 1824
	options: null,                                                                                                        // 1825
	el: null, // the container element for the popover. generated by this object                                          // 1826
	documentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1827
	margin: 10, // the space required between the popover and the edges of the scroll container                           // 1828
                                                                                                                       // 1829
                                                                                                                       // 1830
	constructor: function(options) {                                                                                      // 1831
		this.options = options || {};                                                                                        // 1832
	},                                                                                                                    // 1833
                                                                                                                       // 1834
                                                                                                                       // 1835
	// Shows the popover on the specified position. Renders it if not already                                             // 1836
	show: function() {                                                                                                    // 1837
		if (this.isHidden) {                                                                                                 // 1838
			if (!this.el) {                                                                                                     // 1839
				this.render();                                                                                                     // 1840
			}                                                                                                                   // 1841
			this.el.show();                                                                                                     // 1842
			this.position();                                                                                                    // 1843
			this.isHidden = false;                                                                                              // 1844
			this.trigger('show');                                                                                               // 1845
		}                                                                                                                    // 1846
	},                                                                                                                    // 1847
                                                                                                                       // 1848
                                                                                                                       // 1849
	// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1850
	hide: function() {                                                                                                    // 1851
		if (!this.isHidden) {                                                                                                // 1852
			this.el.hide();                                                                                                     // 1853
			this.isHidden = true;                                                                                               // 1854
			this.trigger('hide');                                                                                               // 1855
		}                                                                                                                    // 1856
	},                                                                                                                    // 1857
                                                                                                                       // 1858
                                                                                                                       // 1859
	// Creates `this.el` and renders content inside of it                                                                 // 1860
	render: function() {                                                                                                  // 1861
		var _this = this;                                                                                                    // 1862
		var options = this.options;                                                                                          // 1863
                                                                                                                       // 1864
		this.el = $('<div class="fc-popover"/>')                                                                             // 1865
			.addClass(options.className || '')                                                                                  // 1866
			.css({                                                                                                              // 1867
				// position initially to the top left to avoid creating scrollbars                                                 // 1868
				top: 0,                                                                                                            // 1869
				left: 0                                                                                                            // 1870
			})                                                                                                                  // 1871
			.append(options.content)                                                                                            // 1872
			.appendTo(options.parentEl);                                                                                        // 1873
                                                                                                                       // 1874
		// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1875
		this.el.on('click', '.fc-close', function() {                                                                        // 1876
			_this.hide();                                                                                                       // 1877
		});                                                                                                                  // 1878
                                                                                                                       // 1879
		if (options.autoHide) {                                                                                              // 1880
			$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1881
		}                                                                                                                    // 1882
	},                                                                                                                    // 1883
                                                                                                                       // 1884
                                                                                                                       // 1885
	// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1886
	documentMousedown: function(ev) {                                                                                     // 1887
		// only hide the popover if the click happened outside the popover                                                   // 1888
		if (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1889
			this.hide();                                                                                                        // 1890
		}                                                                                                                    // 1891
	},                                                                                                                    // 1892
                                                                                                                       // 1893
                                                                                                                       // 1894
	// Hides and unregisters any handlers                                                                                 // 1895
	removeElement: function() {                                                                                           // 1896
		this.hide();                                                                                                         // 1897
                                                                                                                       // 1898
		if (this.el) {                                                                                                       // 1899
			this.el.remove();                                                                                                   // 1900
			this.el = null;                                                                                                     // 1901
		}                                                                                                                    // 1902
                                                                                                                       // 1903
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1904
	},                                                                                                                    // 1905
                                                                                                                       // 1906
                                                                                                                       // 1907
	// Positions the popover optimally, using the top/left/right options                                                  // 1908
	position: function() {                                                                                                // 1909
		var options = this.options;                                                                                          // 1910
		var origin = this.el.offsetParent().offset();                                                                        // 1911
		var width = this.el.outerWidth();                                                                                    // 1912
		var height = this.el.outerHeight();                                                                                  // 1913
		var windowEl = $(window);                                                                                            // 1914
		var viewportEl = getScrollParent(this.el);                                                                           // 1915
		var viewportTop;                                                                                                     // 1916
		var viewportLeft;                                                                                                    // 1917
		var viewportOffset;                                                                                                  // 1918
		var top; // the "position" (not "offset") values for the popover                                                     // 1919
		var left; //                                                                                                         // 1920
                                                                                                                       // 1921
		// compute top and left                                                                                              // 1922
		top = options.top || 0;                                                                                              // 1923
		if (options.left !== undefined) {                                                                                    // 1924
			left = options.left;                                                                                                // 1925
		}                                                                                                                    // 1926
		else if (options.right !== undefined) {                                                                              // 1927
			left = options.right - width; // derive the left value from the right value                                         // 1928
		}                                                                                                                    // 1929
		else {                                                                                                               // 1930
			left = 0;                                                                                                           // 1931
		}                                                                                                                    // 1932
                                                                                                                       // 1933
		if (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1934
			viewportEl = windowEl;                                                                                              // 1935
			viewportTop = 0; // the window is always at the top left                                                            // 1936
			viewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1937
		}                                                                                                                    // 1938
		else {                                                                                                               // 1939
			viewportOffset = viewportEl.offset();                                                                               // 1940
			viewportTop = viewportOffset.top;                                                                                   // 1941
			viewportLeft = viewportOffset.left;                                                                                 // 1942
		}                                                                                                                    // 1943
                                                                                                                       // 1944
		// if the window is scrolled, it causes the visible area to be further down                                          // 1945
		viewportTop += windowEl.scrollTop();                                                                                 // 1946
		viewportLeft += windowEl.scrollLeft();                                                                               // 1947
                                                                                                                       // 1948
		// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1949
		if (options.viewportConstrain !== false) {                                                                           // 1950
			top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1951
			top = Math.max(top, viewportTop + this.margin);                                                                     // 1952
			left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1953
			left = Math.max(left, viewportLeft + this.margin);                                                                  // 1954
		}                                                                                                                    // 1955
                                                                                                                       // 1956
		this.el.css({                                                                                                        // 1957
			top: top - origin.top,                                                                                              // 1958
			left: left - origin.left                                                                                            // 1959
		});                                                                                                                  // 1960
	},                                                                                                                    // 1961
                                                                                                                       // 1962
                                                                                                                       // 1963
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1964
	// Arguments beyond the first `name` are forwarded on.                                                                // 1965
	// TODO: better code reuse for this. Repeat code                                                                      // 1966
	trigger: function(name) {                                                                                             // 1967
		if (this.options[name]) {                                                                                            // 1968
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1969
		}                                                                                                                    // 1970
	}                                                                                                                     // 1971
                                                                                                                       // 1972
});                                                                                                                    // 1973
                                                                                                                       // 1974
;;                                                                                                                     // 1975
                                                                                                                       // 1976
/* A "coordinate map" converts pixel coordinates into an associated cell, which has an associated date                 // 1977
------------------------------------------------------------------------------------------------------------------------
Common interface:                                                                                                      // 1979
                                                                                                                       // 1980
	CoordMap.prototype = {                                                                                                // 1981
		build: function() {},                                                                                                // 1982
		getCell: function(x, y) {}                                                                                           // 1983
	};                                                                                                                    // 1984
                                                                                                                       // 1985
*/                                                                                                                     // 1986
                                                                                                                       // 1987
/* Coordinate map for a grid component                                                                                 // 1988
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1990
var GridCoordMap = Class.extend({                                                                                      // 1991
                                                                                                                       // 1992
	grid: null, // reference to the Grid                                                                                  // 1993
	rowCoords: null, // array of {top,bottom} objects                                                                     // 1994
	colCoords: null, // array of {left,right} objects                                                                     // 1995
                                                                                                                       // 1996
	containerEl: null, // container element that all coordinates are constrained to. optionally assigned                  // 1997
	bounds: null,                                                                                                         // 1998
                                                                                                                       // 1999
                                                                                                                       // 2000
	constructor: function(grid) {                                                                                         // 2001
		this.grid = grid;                                                                                                    // 2002
	},                                                                                                                    // 2003
                                                                                                                       // 2004
                                                                                                                       // 2005
	// Queries the grid for the coordinates of all the cells                                                              // 2006
	build: function() {                                                                                                   // 2007
		this.grid.build();                                                                                                   // 2008
		this.rowCoords = this.grid.computeRowCoords();                                                                       // 2009
		this.colCoords = this.grid.computeColCoords();                                                                       // 2010
		this.computeBounds();                                                                                                // 2011
	},                                                                                                                    // 2012
                                                                                                                       // 2013
                                                                                                                       // 2014
	// Clears the coordinates data to free up memory                                                                      // 2015
	clear: function() {                                                                                                   // 2016
		this.grid.clear();                                                                                                   // 2017
		this.rowCoords = null;                                                                                               // 2018
		this.colCoords = null;                                                                                               // 2019
	},                                                                                                                    // 2020
                                                                                                                       // 2021
                                                                                                                       // 2022
	// Given a coordinate of the document, gets the associated cell. If no cell is underneath, returns null               // 2023
	getCell: function(x, y) {                                                                                             // 2024
		var rowCoords = this.rowCoords;                                                                                      // 2025
		var rowCnt = rowCoords.length;                                                                                       // 2026
		var colCoords = this.colCoords;                                                                                      // 2027
		var colCnt = colCoords.length;                                                                                       // 2028
		var hitRow = null;                                                                                                   // 2029
		var hitCol = null;                                                                                                   // 2030
		var i, coords;                                                                                                       // 2031
		var cell;                                                                                                            // 2032
                                                                                                                       // 2033
		if (this.inBounds(x, y)) {                                                                                           // 2034
                                                                                                                       // 2035
			for (i = 0; i < rowCnt; i++) {                                                                                      // 2036
				coords = rowCoords[i];                                                                                             // 2037
				if (y >= coords.top && y < coords.bottom) {                                                                        // 2038
					hitRow = i;                                                                                                       // 2039
					break;                                                                                                            // 2040
				}                                                                                                                  // 2041
			}                                                                                                                   // 2042
                                                                                                                       // 2043
			for (i = 0; i < colCnt; i++) {                                                                                      // 2044
				coords = colCoords[i];                                                                                             // 2045
				if (x >= coords.left && x < coords.right) {                                                                        // 2046
					hitCol = i;                                                                                                       // 2047
					break;                                                                                                            // 2048
				}                                                                                                                  // 2049
			}                                                                                                                   // 2050
                                                                                                                       // 2051
			if (hitRow !== null && hitCol !== null) {                                                                           // 2052
                                                                                                                       // 2053
				cell = this.grid.getCell(hitRow, hitCol); // expected to return a fresh object we can modify                       // 2054
				cell.grid = this.grid; // for CellDragListener's isCellsEqual. dragging between grids                              // 2055
                                                                                                                       // 2056
				// make the coordinates available on the cell object                                                               // 2057
				$.extend(cell, rowCoords[hitRow], colCoords[hitCol]);                                                              // 2058
                                                                                                                       // 2059
				return cell;                                                                                                       // 2060
			}                                                                                                                   // 2061
		}                                                                                                                    // 2062
                                                                                                                       // 2063
		return null;                                                                                                         // 2064
	},                                                                                                                    // 2065
                                                                                                                       // 2066
                                                                                                                       // 2067
	// If there is a containerEl, compute the bounds into min/max values                                                  // 2068
	computeBounds: function() {                                                                                           // 2069
		this.bounds = this.containerEl ?                                                                                     // 2070
			getClientRect(this.containerEl) : // area within scrollbars                                                         // 2071
			null;                                                                                                               // 2072
	},                                                                                                                    // 2073
                                                                                                                       // 2074
                                                                                                                       // 2075
	// Determines if the given coordinates are in bounds. If no `containerEl`, always true                                // 2076
	inBounds: function(x, y) {                                                                                            // 2077
		var bounds = this.bounds;                                                                                            // 2078
                                                                                                                       // 2079
		if (bounds) {                                                                                                        // 2080
			return x >= bounds.left && x < bounds.right && y >= bounds.top && y < bounds.bottom;                                // 2081
		}                                                                                                                    // 2082
                                                                                                                       // 2083
		return true;                                                                                                         // 2084
	}                                                                                                                     // 2085
                                                                                                                       // 2086
});                                                                                                                    // 2087
                                                                                                                       // 2088
                                                                                                                       // 2089
/* Coordinate map that is a combination of multiple other coordinate maps                                              // 2090
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2092
var ComboCoordMap = Class.extend({                                                                                     // 2093
                                                                                                                       // 2094
	coordMaps: null, // an array of CoordMaps                                                                             // 2095
                                                                                                                       // 2096
                                                                                                                       // 2097
	constructor: function(coordMaps) {                                                                                    // 2098
		this.coordMaps = coordMaps;                                                                                          // 2099
	},                                                                                                                    // 2100
                                                                                                                       // 2101
                                                                                                                       // 2102
	// Builds all coordMaps                                                                                               // 2103
	build: function() {                                                                                                   // 2104
		var coordMaps = this.coordMaps;                                                                                      // 2105
		var i;                                                                                                               // 2106
                                                                                                                       // 2107
		for (i = 0; i < coordMaps.length; i++) {                                                                             // 2108
			coordMaps[i].build();                                                                                               // 2109
		}                                                                                                                    // 2110
	},                                                                                                                    // 2111
                                                                                                                       // 2112
                                                                                                                       // 2113
	// Queries all coordMaps for the cell underneath the given coordinates, returning the first result                    // 2114
	getCell: function(x, y) {                                                                                             // 2115
		var coordMaps = this.coordMaps;                                                                                      // 2116
		var cell = null;                                                                                                     // 2117
		var i;                                                                                                               // 2118
                                                                                                                       // 2119
		for (i = 0; i < coordMaps.length && !cell; i++) {                                                                    // 2120
			cell = coordMaps[i].getCell(x, y);                                                                                  // 2121
		}                                                                                                                    // 2122
                                                                                                                       // 2123
		return cell;                                                                                                         // 2124
	},                                                                                                                    // 2125
                                                                                                                       // 2126
                                                                                                                       // 2127
	// Clears all coordMaps                                                                                               // 2128
	clear: function() {                                                                                                   // 2129
		var coordMaps = this.coordMaps;                                                                                      // 2130
		var i;                                                                                                               // 2131
                                                                                                                       // 2132
		for (i = 0; i < coordMaps.length; i++) {                                                                             // 2133
			coordMaps[i].clear();                                                                                               // 2134
		}                                                                                                                    // 2135
	}                                                                                                                     // 2136
                                                                                                                       // 2137
});                                                                                                                    // 2138
                                                                                                                       // 2139
;;                                                                                                                     // 2140
                                                                                                                       // 2141
/* Tracks a drag's mouse movement, firing various handlers                                                             // 2142
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2144
var DragListener = fc.DragListener = Class.extend({                                                                    // 2145
                                                                                                                       // 2146
	options: null,                                                                                                        // 2147
                                                                                                                       // 2148
	isListening: false,                                                                                                   // 2149
	isDragging: false,                                                                                                    // 2150
                                                                                                                       // 2151
	// coordinates of the initial mousedown                                                                               // 2152
	originX: null,                                                                                                        // 2153
	originY: null,                                                                                                        // 2154
                                                                                                                       // 2155
	// handler attached to the document, bound to the DragListener's `this`                                               // 2156
	mousemoveProxy: null,                                                                                                 // 2157
	mouseupProxy: null,                                                                                                   // 2158
                                                                                                                       // 2159
	// for IE8 bug-fighting behavior, for now                                                                             // 2160
	subjectEl: null, // the element being draged. optional                                                                // 2161
	subjectHref: null,                                                                                                    // 2162
                                                                                                                       // 2163
	scrollEl: null,                                                                                                       // 2164
	scrollBounds: null, // { top, bottom, left, right }                                                                   // 2165
	scrollTopVel: null, // pixels per second                                                                              // 2166
	scrollLeftVel: null, // pixels per second                                                                             // 2167
	scrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 2168
	scrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 2169
                                                                                                                       // 2170
	scrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 2171
	scrollSpeed: 200, // pixels per second, at maximum speed                                                              // 2172
	scrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 2173
                                                                                                                       // 2174
                                                                                                                       // 2175
	constructor: function(options) {                                                                                      // 2176
		options = options || {};                                                                                             // 2177
		this.options = options;                                                                                              // 2178
		this.subjectEl = options.subjectEl;                                                                                  // 2179
	},                                                                                                                    // 2180
                                                                                                                       // 2181
                                                                                                                       // 2182
	// Call this when the user does a mousedown. Will probably lead to startListening                                     // 2183
	mousedown: function(ev) {                                                                                             // 2184
		if (isPrimaryMouseButton(ev)) {                                                                                      // 2185
                                                                                                                       // 2186
			ev.preventDefault(); // prevents native selection in most browsers                                                  // 2187
                                                                                                                       // 2188
			this.startListening(ev);                                                                                            // 2189
                                                                                                                       // 2190
			// start the drag immediately if there is no minimum distance for a drag start                                      // 2191
			if (!this.options.distance) {                                                                                       // 2192
				this.startDrag(ev);                                                                                                // 2193
			}                                                                                                                   // 2194
		}                                                                                                                    // 2195
	},                                                                                                                    // 2196
                                                                                                                       // 2197
                                                                                                                       // 2198
	// Call this to start tracking mouse movements                                                                        // 2199
	startListening: function(ev) {                                                                                        // 2200
		var scrollParent;                                                                                                    // 2201
                                                                                                                       // 2202
		if (!this.isListening) {                                                                                             // 2203
                                                                                                                       // 2204
			// grab scroll container and attach handler                                                                         // 2205
			if (ev && this.options.scroll) {                                                                                    // 2206
				scrollParent = getScrollParent($(ev.target));                                                                      // 2207
				if (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 2208
					this.scrollEl = scrollParent;                                                                                     // 2209
                                                                                                                       // 2210
					// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 2211
					this.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 2212
					this.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 2213
				}                                                                                                                  // 2214
			}                                                                                                                   // 2215
                                                                                                                       // 2216
			$(document)                                                                                                         // 2217
				.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 2218
				.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 2219
				.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 2220
                                                                                                                       // 2221
			if (ev) {                                                                                                           // 2222
				this.originX = ev.pageX;                                                                                           // 2223
				this.originY = ev.pageY;                                                                                           // 2224
			}                                                                                                                   // 2225
			else {                                                                                                              // 2226
				// if no starting information was given, origin will be the topleft corner of the screen.                          // 2227
				// if so, dx/dy in the future will be the absolute coordinates.                                                    // 2228
				this.originX = 0;                                                                                                  // 2229
				this.originY = 0;                                                                                                  // 2230
			}                                                                                                                   // 2231
                                                                                                                       // 2232
			this.isListening = true;                                                                                            // 2233
			this.listenStart(ev);                                                                                               // 2234
		}                                                                                                                    // 2235
	},                                                                                                                    // 2236
                                                                                                                       // 2237
                                                                                                                       // 2238
	// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2239
	listenStart: function(ev) {                                                                                           // 2240
		this.trigger('listenStart', ev);                                                                                     // 2241
	},                                                                                                                    // 2242
                                                                                                                       // 2243
                                                                                                                       // 2244
	// Called when the user moves the mouse                                                                               // 2245
	mousemove: function(ev) {                                                                                             // 2246
		var dx = ev.pageX - this.originX;                                                                                    // 2247
		var dy = ev.pageY - this.originY;                                                                                    // 2248
		var minDistance;                                                                                                     // 2249
		var distanceSq; // current distance from the origin, squared                                                         // 2250
                                                                                                                       // 2251
		if (!this.isDragging) { // if not already dragging...                                                                // 2252
			// then start the drag if the minimum distance criteria is met                                                      // 2253
			minDistance = this.options.distance || 1;                                                                           // 2254
			distanceSq = dx * dx + dy * dy;                                                                                     // 2255
			if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2256
				this.startDrag(ev);                                                                                                // 2257
			}                                                                                                                   // 2258
		}                                                                                                                    // 2259
                                                                                                                       // 2260
		if (this.isDragging) {                                                                                               // 2261
			this.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2262
		}                                                                                                                    // 2263
	},                                                                                                                    // 2264
                                                                                                                       // 2265
                                                                                                                       // 2266
	// Call this to initiate a legitimate drag.                                                                           // 2267
	// This function is called internally from this class, but can also be called explicitly from outside                 // 2268
	startDrag: function(ev) {                                                                                             // 2269
                                                                                                                       // 2270
		if (!this.isListening) { // startDrag must have manually initiated                                                   // 2271
			this.startListening();                                                                                              // 2272
		}                                                                                                                    // 2273
                                                                                                                       // 2274
		if (!this.isDragging) {                                                                                              // 2275
			this.isDragging = true;                                                                                             // 2276
			this.dragStart(ev);                                                                                                 // 2277
		}                                                                                                                    // 2278
	},                                                                                                                    // 2279
                                                                                                                       // 2280
                                                                                                                       // 2281
	// Called when the actual drag has started (went beyond minDistance)                                                  // 2282
	dragStart: function(ev) {                                                                                             // 2283
		var subjectEl = this.subjectEl;                                                                                      // 2284
                                                                                                                       // 2285
		this.trigger('dragStart', ev);                                                                                       // 2286
                                                                                                                       // 2287
		// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2288
		if ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2289
			subjectEl.removeAttr('href');                                                                                       // 2290
		}                                                                                                                    // 2291
	},                                                                                                                    // 2292
                                                                                                                       // 2293
                                                                                                                       // 2294
	// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2295
	drag: function(dx, dy, ev) {                                                                                          // 2296
		this.trigger('drag', dx, dy, ev);                                                                                    // 2297
		this.updateScroll(ev); // will possibly cause scrolling                                                              // 2298
	},                                                                                                                    // 2299
                                                                                                                       // 2300
                                                                                                                       // 2301
	// Called when the user does a mouseup                                                                                // 2302
	mouseup: function(ev) {                                                                                               // 2303
		this.stopListening(ev);                                                                                              // 2304
	},                                                                                                                    // 2305
                                                                                                                       // 2306
                                                                                                                       // 2307
	// Called when the drag is over. Will not cause listening to stop however.                                            // 2308
	// A concluding 'cellOut' event will NOT be triggered.                                                                // 2309
	stopDrag: function(ev) {                                                                                              // 2310
		if (this.isDragging) {                                                                                               // 2311
			this.stopScrolling();                                                                                               // 2312
			this.dragStop(ev);                                                                                                  // 2313
			this.isDragging = false;                                                                                            // 2314
		}                                                                                                                    // 2315
	},                                                                                                                    // 2316
                                                                                                                       // 2317
                                                                                                                       // 2318
	// Called when dragging has been stopped                                                                              // 2319
	dragStop: function(ev) {                                                                                              // 2320
		var _this = this;                                                                                                    // 2321
                                                                                                                       // 2322
		this.trigger('dragStop', ev);                                                                                        // 2323
                                                                                                                       // 2324
		// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2325
		setTimeout(function() { // must be outside of the click's execution                                                  // 2326
			if (_this.subjectHref) {                                                                                            // 2327
				_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2328
			}                                                                                                                   // 2329
		}, 0);                                                                                                               // 2330
	},                                                                                                                    // 2331
                                                                                                                       // 2332
                                                                                                                       // 2333
	// Call this to stop listening to the user's mouse events                                                             // 2334
	stopListening: function(ev) {                                                                                         // 2335
		this.stopDrag(ev); // if there's a current drag, kill it                                                             // 2336
                                                                                                                       // 2337
		if (this.isListening) {                                                                                              // 2338
                                                                                                                       // 2339
			// remove the scroll handler if there is a scrollEl                                                                 // 2340
			if (this.scrollEl) {                                                                                                // 2341
				this.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2342
				this.scrollHandlerProxy = null;                                                                                    // 2343
			}                                                                                                                   // 2344
                                                                                                                       // 2345
			$(document)                                                                                                         // 2346
				.off('mousemove', this.mousemoveProxy)                                                                             // 2347
				.off('mouseup', this.mouseupProxy)                                                                                 // 2348
				.off('selectstart', this.preventDefault);                                                                          // 2349
                                                                                                                       // 2350
			this.mousemoveProxy = null;                                                                                         // 2351
			this.mouseupProxy = null;                                                                                           // 2352
                                                                                                                       // 2353
			this.isListening = false;                                                                                           // 2354
			this.listenStop(ev);                                                                                                // 2355
		}                                                                                                                    // 2356
	},                                                                                                                    // 2357
                                                                                                                       // 2358
                                                                                                                       // 2359
	// Called when drag listening has stopped                                                                             // 2360
	listenStop: function(ev) {                                                                                            // 2361
		this.trigger('listenStop', ev);                                                                                      // 2362
	},                                                                                                                    // 2363
                                                                                                                       // 2364
                                                                                                                       // 2365
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2366
	// Arguments beyond the first `name` are forwarded on.                                                                // 2367
	trigger: function(name) {                                                                                             // 2368
		if (this.options[name]) {                                                                                            // 2369
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2370
		}                                                                                                                    // 2371
	},                                                                                                                    // 2372
                                                                                                                       // 2373
                                                                                                                       // 2374
	// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2375
	preventDefault: function(ev) {                                                                                        // 2376
		ev.preventDefault();                                                                                                 // 2377
	},                                                                                                                    // 2378
                                                                                                                       // 2379
                                                                                                                       // 2380
	/* Scrolling                                                                                                          // 2381
	------------------------------------------------------------------------------------------------------------------*/  // 2382
                                                                                                                       // 2383
                                                                                                                       // 2384
	// Computes and stores the bounding rectangle of scrollEl                                                             // 2385
	computeScrollBounds: function() {                                                                                     // 2386
		var el = this.scrollEl;                                                                                              // 2387
                                                                                                                       // 2388
		this.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2389
			// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2390
	},                                                                                                                    // 2391
                                                                                                                       // 2392
                                                                                                                       // 2393
	// Called when the dragging is in progress and scrolling should be updated                                            // 2394
	updateScroll: function(ev) {                                                                                          // 2395
		var sensitivity = this.scrollSensitivity;                                                                            // 2396
		var bounds = this.scrollBounds;                                                                                      // 2397
		var topCloseness, bottomCloseness;                                                                                   // 2398
		var leftCloseness, rightCloseness;                                                                                   // 2399
		var topVel = 0;                                                                                                      // 2400
		var leftVel = 0;                                                                                                     // 2401
                                                                                                                       // 2402
		if (bounds) { // only scroll if scrollEl exists                                                                      // 2403
                                                                                                                       // 2404
			// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2405
			topCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2406
			bottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2407
			leftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2408
			rightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2409
                                                                                                                       // 2410
			// translate vertical closeness into velocity.                                                                      // 2411
			// mouse must be completely in bounds for velocity to happen.                                                       // 2412
			if (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2413
				topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2414
			}                                                                                                                   // 2415
			else if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2416
				topVel = bottomCloseness * this.scrollSpeed;                                                                       // 2417
			}                                                                                                                   // 2418
                                                                                                                       // 2419
			// translate horizontal closeness into velocity                                                                     // 2420
			if (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2421
				leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2422
			}                                                                                                                   // 2423
			else if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2424
				leftVel = rightCloseness * this.scrollSpeed;                                                                       // 2425
			}                                                                                                                   // 2426
		}                                                                                                                    // 2427
                                                                                                                       // 2428
		this.setScrollVel(topVel, leftVel);                                                                                  // 2429
	},                                                                                                                    // 2430
                                                                                                                       // 2431
                                                                                                                       // 2432
	// Sets the speed-of-scrolling for the scrollEl                                                                       // 2433
	setScrollVel: function(topVel, leftVel) {                                                                             // 2434
                                                                                                                       // 2435
		this.scrollTopVel = topVel;                                                                                          // 2436
		this.scrollLeftVel = leftVel;                                                                                        // 2437
                                                                                                                       // 2438
		this.constrainScrollVel(); // massages into realistic values                                                         // 2439
                                                                                                                       // 2440
		// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2441
		if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2442
			this.scrollIntervalId = setInterval(                                                                                // 2443
				proxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2444
				this.scrollIntervalMs                                                                                              // 2445
			);                                                                                                                  // 2446
		}                                                                                                                    // 2447
	},                                                                                                                    // 2448
                                                                                                                       // 2449
                                                                                                                       // 2450
	// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2451
	constrainScrollVel: function() {                                                                                      // 2452
		var el = this.scrollEl;                                                                                              // 2453
                                                                                                                       // 2454
		if (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2455
			if (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2456
				this.scrollTopVel = 0;                                                                                             // 2457
			}                                                                                                                   // 2458
		}                                                                                                                    // 2459
		else if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2460
			if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2461
				this.scrollTopVel = 0;                                                                                             // 2462
			}                                                                                                                   // 2463
		}                                                                                                                    // 2464
                                                                                                                       // 2465
		if (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2466
			if (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2467
				this.scrollLeftVel = 0;                                                                                            // 2468
			}                                                                                                                   // 2469
		}                                                                                                                    // 2470
		else if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2471
			if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2472
				this.scrollLeftVel = 0;                                                                                            // 2473
			}                                                                                                                   // 2474
		}                                                                                                                    // 2475
	},                                                                                                                    // 2476
                                                                                                                       // 2477
                                                                                                                       // 2478
	// This function gets called during every iteration of the scrolling animation loop                                   // 2479
	scrollIntervalFunc: function() {                                                                                      // 2480
		var el = this.scrollEl;                                                                                              // 2481
		var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2482
                                                                                                                       // 2483
		// change the value of scrollEl's scroll                                                                             // 2484
		if (this.scrollTopVel) {                                                                                             // 2485
			el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2486
		}                                                                                                                    // 2487
		if (this.scrollLeftVel) {                                                                                            // 2488
			el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2489
		}                                                                                                                    // 2490
                                                                                                                       // 2491
		this.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2492
                                                                                                                       // 2493
		// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2494
		if (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2495
			this.stopScrolling();                                                                                               // 2496
		}                                                                                                                    // 2497
	},                                                                                                                    // 2498
                                                                                                                       // 2499
                                                                                                                       // 2500
	// Kills any existing scrolling animation loop                                                                        // 2501
	stopScrolling: function() {                                                                                           // 2502
		if (this.scrollIntervalId) {                                                                                         // 2503
			clearInterval(this.scrollIntervalId);                                                                               // 2504
			this.scrollIntervalId = null;                                                                                       // 2505
                                                                                                                       // 2506
			// when all done with scrolling, recompute positions since they probably changed                                    // 2507
			this.scrollStop();                                                                                                  // 2508
		}                                                                                                                    // 2509
	},                                                                                                                    // 2510
                                                                                                                       // 2511
                                                                                                                       // 2512
	// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2513
	scrollHandler: function() {                                                                                           // 2514
		// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2515
		if (!this.scrollIntervalId) {                                                                                        // 2516
			this.scrollStop();                                                                                                  // 2517
		}                                                                                                                    // 2518
	},                                                                                                                    // 2519
                                                                                                                       // 2520
                                                                                                                       // 2521
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2522
	scrollStop: function() {                                                                                              // 2523
	}                                                                                                                     // 2524
                                                                                                                       // 2525
});                                                                                                                    // 2526
                                                                                                                       // 2527
;;                                                                                                                     // 2528
                                                                                                                       // 2529
/* Tracks mouse movements over a CoordMap and raises events about which cell the mouse is over.                        // 2530
------------------------------------------------------------------------------------------------------------------------
options:                                                                                                               // 2532
- subjectEl                                                                                                            // 2533
- subjectCenter                                                                                                        // 2534
*/                                                                                                                     // 2535
                                                                                                                       // 2536
var CellDragListener = DragListener.extend({                                                                           // 2537
                                                                                                                       // 2538
	coordMap: null, // converts coordinates to date cells                                                                 // 2539
	origCell: null, // the cell the mouse was over when listening started                                                 // 2540
	cell: null, // the cell the mouse is over                                                                             // 2541
	coordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2542
                                                                                                                       // 2543
                                                                                                                       // 2544
	constructor: function(coordMap, options) {                                                                            // 2545
		DragListener.prototype.constructor.call(this, options); // call the super-constructor                                // 2546
                                                                                                                       // 2547
		this.coordMap = coordMap;                                                                                            // 2548
	},                                                                                                                    // 2549
                                                                                                                       // 2550
                                                                                                                       // 2551
	// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2552
	// ev might be undefined if dragging was started manually.                                                            // 2553
	listenStart: function(ev) {                                                                                           // 2554
		var subjectEl = this.subjectEl;                                                                                      // 2555
		var subjectRect;                                                                                                     // 2556
		var origPoint;                                                                                                       // 2557
		var point;                                                                                                           // 2558
                                                                                                                       // 2559
		DragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2560
                                                                                                                       // 2561
		this.computeCoords();                                                                                                // 2562
                                                                                                                       // 2563
		if (ev) {                                                                                                            // 2564
			origPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2565
			point = origPoint;                                                                                                  // 2566
                                                                                                                       // 2567
			// constrain the point to bounds of the element being dragged                                                       // 2568
			if (subjectEl) {                                                                                                    // 2569
				subjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2570
				point = constrainPoint(point, subjectRect);                                                                        // 2571
			}                                                                                                                   // 2572
                                                                                                                       // 2573
			this.origCell = this.getCell(point.left, point.top);                                                                // 2574
                                                                                                                       // 2575
			// treat the center of the subject as the collision point?                                                          // 2576
			if (subjectEl && this.options.subjectCenter) {                                                                      // 2577
                                                                                                                       // 2578
				// only consider the area the subject overlaps the cell. best for large subjects                                   // 2579
				if (this.origCell) {                                                                                               // 2580
					subjectRect = intersectRects(this.origCell, subjectRect) ||                                                       // 2581
						subjectRect; // in case there is no intersection                                                                 // 2582
				}                                                                                                                  // 2583
                                                                                                                       // 2584
				point = getRectCenter(subjectRect);                                                                                // 2585
			}                                                                                                                   // 2586
                                                                                                                       // 2587
			this.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2588
		}                                                                                                                    // 2589
		else {                                                                                                               // 2590
			this.origCell = null;                                                                                               // 2591
			this.coordAdjust = null;                                                                                            // 2592
		}                                                                                                                    // 2593
	},                                                                                                                    // 2594
                                                                                                                       // 2595
                                                                                                                       // 2596
	// Recomputes the drag-critical positions of elements                                                                 // 2597
	computeCoords: function() {                                                                                           // 2598
		this.coordMap.build();                                                                                               // 2599
		this.computeScrollBounds();                                                                                          // 2600
	},                                                                                                                    // 2601
                                                                                                                       // 2602
                                                                                                                       // 2603
	// Called when the actual drag has started                                                                            // 2604
	dragStart: function(ev) {                                                                                             // 2605
		var cell;                                                                                                            // 2606
                                                                                                                       // 2607
		DragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2608
                                                                                                                       // 2609
		cell = this.getCell(ev.pageX, ev.pageY); // might be different from this.origCell if the min-distance is large       // 2610
                                                                                                                       // 2611
		// report the initial cell the mouse is over                                                                         // 2612
		// especially important if no min-distance and drag starts immediately                                               // 2613
		if (cell) {                                                                                                          // 2614
			this.cellOver(cell);                                                                                                // 2615
		}                                                                                                                    // 2616
	},                                                                                                                    // 2617
                                                                                                                       // 2618
                                                                                                                       // 2619
	// Called when the drag moves                                                                                         // 2620
	drag: function(dx, dy, ev) {                                                                                          // 2621
		var cell;                                                                                                            // 2622
                                                                                                                       // 2623
		DragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2624
                                                                                                                       // 2625
		cell = this.getCell(ev.pageX, ev.pageY);                                                                             // 2626
                                                                                                                       // 2627
		if (!isCellsEqual(cell, this.cell)) { // a different cell than before?                                               // 2628
			if (this.cell) {                                                                                                    // 2629
				this.cellOut();                                                                                                    // 2630
			}                                                                                                                   // 2631
			if (cell) {                                                                                                         // 2632
				this.cellOver(cell);                                                                                               // 2633
			}                                                                                                                   // 2634
		}                                                                                                                    // 2635
	},                                                                                                                    // 2636
                                                                                                                       // 2637
                                                                                                                       // 2638
	// Called when dragging has been stopped                                                                              // 2639
	dragStop: function() {                                                                                                // 2640
		this.cellDone();                                                                                                     // 2641
		DragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2642
	},                                                                                                                    // 2643
                                                                                                                       // 2644
                                                                                                                       // 2645
	// Called when a the mouse has just moved over a new cell                                                             // 2646
	cellOver: function(cell) {                                                                                            // 2647
		this.cell = cell;                                                                                                    // 2648
		this.trigger('cellOver', cell, isCellsEqual(cell, this.origCell), this.origCell);                                    // 2649
	},                                                                                                                    // 2650
                                                                                                                       // 2651
                                                                                                                       // 2652
	// Called when the mouse has just moved out of a cell                                                                 // 2653
	cellOut: function() {                                                                                                 // 2654
		if (this.cell) {                                                                                                     // 2655
			this.trigger('cellOut', this.cell);                                                                                 // 2656
			this.cellDone();                                                                                                    // 2657
			this.cell = null;                                                                                                   // 2658
		}                                                                                                                    // 2659
	},                                                                                                                    // 2660
                                                                                                                       // 2661
                                                                                                                       // 2662
	// Called after a cellOut. Also called before a dragStop                                                              // 2663
	cellDone: function() {                                                                                                // 2664
		if (this.cell) {                                                                                                     // 2665
			this.trigger('cellDone', this.cell);                                                                                // 2666
		}                                                                                                                    // 2667
	},                                                                                                                    // 2668
                                                                                                                       // 2669
                                                                                                                       // 2670
	// Called when drag listening has stopped                                                                             // 2671
	listenStop: function() {                                                                                              // 2672
		DragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2673
                                                                                                                       // 2674
		this.origCell = this.cell = null;                                                                                    // 2675
		this.coordMap.clear();                                                                                               // 2676
	},                                                                                                                    // 2677
                                                                                                                       // 2678
                                                                                                                       // 2679
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2680
	scrollStop: function() {                                                                                              // 2681
		DragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2682
                                                                                                                       // 2683
		this.computeCoords(); // cells' absolute positions will be in new places. recompute                                  // 2684
	},                                                                                                                    // 2685
                                                                                                                       // 2686
                                                                                                                       // 2687
	// Gets the cell underneath the coordinates for the given mouse event                                                 // 2688
	getCell: function(left, top) {                                                                                        // 2689
                                                                                                                       // 2690
		if (this.coordAdjust) {                                                                                              // 2691
			left += this.coordAdjust.left;                                                                                      // 2692
			top += this.coordAdjust.top;                                                                                        // 2693
		}                                                                                                                    // 2694
                                                                                                                       // 2695
		return this.coordMap.getCell(left, top);                                                                             // 2696
	}                                                                                                                     // 2697
                                                                                                                       // 2698
});                                                                                                                    // 2699
                                                                                                                       // 2700
                                                                                                                       // 2701
// Returns `true` if the cells are identically equal. `false` otherwise.                                               // 2702
// They must have the same row, col, and be from the same grid.                                                        // 2703
// Two null values will be considered equal, as two "out of the grid" states are the same.                             // 2704
function isCellsEqual(cell1, cell2) {                                                                                  // 2705
                                                                                                                       // 2706
	if (!cell1 && !cell2) {                                                                                               // 2707
		return true;                                                                                                         // 2708
	}                                                                                                                     // 2709
                                                                                                                       // 2710
	if (cell1 && cell2) {                                                                                                 // 2711
		return cell1.grid === cell2.grid &&                                                                                  // 2712
			cell1.row === cell2.row &&                                                                                          // 2713
			cell1.col === cell2.col;                                                                                            // 2714
	}                                                                                                                     // 2715
                                                                                                                       // 2716
	return false;                                                                                                         // 2717
}                                                                                                                      // 2718
                                                                                                                       // 2719
;;                                                                                                                     // 2720
                                                                                                                       // 2721
/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2722
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2724
var MouseFollower = Class.extend({                                                                                     // 2725
                                                                                                                       // 2726
	options: null,                                                                                                        // 2727
                                                                                                                       // 2728
	sourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2729
	el: null, // the clone of `sourceEl` that will track the mouse                                                        // 2730
	parentEl: null, // the element that `el` (the clone) will be attached to                                              // 2731
                                                                                                                       // 2732
	// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2733
	top0: null,                                                                                                           // 2734
	left0: null,                                                                                                          // 2735
                                                                                                                       // 2736
	// the initial position of the mouse                                                                                  // 2737
	mouseY0: null,                                                                                                        // 2738
	mouseX0: null,                                                                                                        // 2739
                                                                                                                       // 2740
	// the number of pixels the mouse has moved from its initial position                                                 // 2741
	topDelta: null,                                                                                                       // 2742
	leftDelta: null,                                                                                                      // 2743
                                                                                                                       // 2744
	mousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2745
                                                                                                                       // 2746
	isFollowing: false,                                                                                                   // 2747
	isHidden: false,                                                                                                      // 2748
	isAnimating: false, // doing the revert animation?                                                                    // 2749
                                                                                                                       // 2750
	constructor: function(sourceEl, options) {                                                                            // 2751
		this.options = options = options || {};                                                                              // 2752
		this.sourceEl = sourceEl;                                                                                            // 2753
		this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2754
	},                                                                                                                    // 2755
                                                                                                                       // 2756
                                                                                                                       // 2757
	// Causes the element to start following the mouse                                                                    // 2758
	start: function(ev) {                                                                                                 // 2759
		if (!this.isFollowing) {                                                                                             // 2760
			this.isFollowing = true;                                                                                            // 2761
                                                                                                                       // 2762
			this.mouseY0 = ev.pageY;                                                                                            // 2763
			this.mouseX0 = ev.pageX;                                                                                            // 2764
			this.topDelta = 0;                                                                                                  // 2765
			this.leftDelta = 0;                                                                                                 // 2766
                                                                                                                       // 2767
			if (!this.isHidden) {                                                                                               // 2768
				this.updatePosition();                                                                                             // 2769
			}                                                                                                                   // 2770
                                                                                                                       // 2771
			$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2772
		}                                                                                                                    // 2773
	},                                                                                                                    // 2774
                                                                                                                       // 2775
                                                                                                                       // 2776
	// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2777
	// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2778
	stop: function(shouldRevert, callback) {                                                                              // 2779
		var _this = this;                                                                                                    // 2780
		var revertDuration = this.options.revertDuration;                                                                    // 2781
                                                                                                                       // 2782
		function complete() {                                                                                                // 2783
			this.isAnimating = false;                                                                                           // 2784
			_this.removeElement();                                                                                              // 2785
                                                                                                                       // 2786
			this.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2787
                                                                                                                       // 2788
			if (callback) {                                                                                                     // 2789
				callback();                                                                                                        // 2790
			}                                                                                                                   // 2791
		}                                                                                                                    // 2792
                                                                                                                       // 2793
		if (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2794
			this.isFollowing = false;                                                                                           // 2795
                                                                                                                       // 2796
			$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2797
                                                                                                                       // 2798
			if (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2799
				this.isAnimating = true;                                                                                           // 2800
				this.el.animate({                                                                                                  // 2801
					top: this.top0,                                                                                                   // 2802
					left: this.left0                                                                                                  // 2803
				}, {                                                                                                               // 2804
					duration: revertDuration,                                                                                         // 2805
					complete: complete                                                                                                // 2806
				});                                                                                                                // 2807
			}                                                                                                                   // 2808
			else {                                                                                                              // 2809
				complete();                                                                                                        // 2810
			}                                                                                                                   // 2811
		}                                                                                                                    // 2812
	},                                                                                                                    // 2813
                                                                                                                       // 2814
                                                                                                                       // 2815
	// Gets the tracking element. Create it if necessary                                                                  // 2816
	getEl: function() {                                                                                                   // 2817
		var el = this.el;                                                                                                    // 2818
                                                                                                                       // 2819
		if (!el) {                                                                                                           // 2820
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2821
			el = this.el = this.sourceEl.clone()                                                                                // 2822
				.css({                                                                                                             // 2823
					position: 'absolute',                                                                                             // 2824
					visibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2825
					display: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2826
					margin: 0,                                                                                                        // 2827
					right: 'auto', // erase and set width instead                                                                     // 2828
					bottom: 'auto', // erase and set height instead                                                                   // 2829
					width: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2830
					height: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2831
					opacity: this.options.opacity || '',                                                                              // 2832
					zIndex: this.options.zIndex                                                                                       // 2833
				})                                                                                                                 // 2834
				.appendTo(this.parentEl);                                                                                          // 2835
		}                                                                                                                    // 2836
                                                                                                                       // 2837
		return el;                                                                                                           // 2838
	},                                                                                                                    // 2839
                                                                                                                       // 2840
                                                                                                                       // 2841
	// Removes the tracking element if it has already been created                                                        // 2842
	removeElement: function() {                                                                                           // 2843
		if (this.el) {                                                                                                       // 2844
			this.el.remove();                                                                                                   // 2845
			this.el = null;                                                                                                     // 2846
		}                                                                                                                    // 2847
	},                                                                                                                    // 2848
                                                                                                                       // 2849
                                                                                                                       // 2850
	// Update the CSS position of the tracking element                                                                    // 2851
	updatePosition: function() {                                                                                          // 2852
		var sourceOffset;                                                                                                    // 2853
		var origin;                                                                                                          // 2854
                                                                                                                       // 2855
		this.getEl(); // ensure this.el                                                                                      // 2856
                                                                                                                       // 2857
		// make sure origin info was computed                                                                                // 2858
		if (this.top0 === null) {                                                                                            // 2859
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2860
			sourceOffset = this.sourceEl.offset();                                                                              // 2861
			origin = this.el.offsetParent().offset();                                                                           // 2862
			this.top0 = sourceOffset.top - origin.top;                                                                          // 2863
			this.left0 = sourceOffset.left - origin.left;                                                                       // 2864
		}                                                                                                                    // 2865
                                                                                                                       // 2866
		this.el.css({                                                                                                        // 2867
			top: this.top0 + this.topDelta,                                                                                     // 2868
			left: this.left0 + this.leftDelta                                                                                   // 2869
		});                                                                                                                  // 2870
	},                                                                                                                    // 2871
                                                                                                                       // 2872
                                                                                                                       // 2873
	// Gets called when the user moves the mouse                                                                          // 2874
	mousemove: function(ev) {                                                                                             // 2875
		this.topDelta = ev.pageY - this.mouseY0;                                                                             // 2876
		this.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2877
                                                                                                                       // 2878
		if (!this.isHidden) {                                                                                                // 2879
			this.updatePosition();                                                                                              // 2880
		}                                                                                                                    // 2881
	},                                                                                                                    // 2882
                                                                                                                       // 2883
                                                                                                                       // 2884
	// Temporarily makes the tracking element invisible. Can be called before following starts                            // 2885
	hide: function() {                                                                                                    // 2886
		if (!this.isHidden) {                                                                                                // 2887
			this.isHidden = true;                                                                                               // 2888
			if (this.el) {                                                                                                      // 2889
				this.el.hide();                                                                                                    // 2890
			}                                                                                                                   // 2891
		}                                                                                                                    // 2892
	},                                                                                                                    // 2893
                                                                                                                       // 2894
                                                                                                                       // 2895
	// Show the tracking element after it has been temporarily hidden                                                     // 2896
	show: function() {                                                                                                    // 2897
		if (this.isHidden) {                                                                                                 // 2898
			this.isHidden = false;                                                                                              // 2899
			this.updatePosition();                                                                                              // 2900
			this.getEl().show();                                                                                                // 2901
		}                                                                                                                    // 2902
	}                                                                                                                     // 2903
                                                                                                                       // 2904
});                                                                                                                    // 2905
                                                                                                                       // 2906
;;                                                                                                                     // 2907
                                                                                                                       // 2908
/* A utility class for rendering <tr> rows.                                                                            // 2909
----------------------------------------------------------------------------------------------------------------------*/
// It leverages methods of the subclass and the View to determine custom rendering behavior for each row "type"        // 2911
// (such as highlight rows, day rows, helper rows, etc).                                                               // 2912
                                                                                                                       // 2913
var RowRenderer = Class.extend({                                                                                       // 2914
                                                                                                                       // 2915
	view: null, // a View object                                                                                          // 2916
	isRTL: null, // shortcut to the view's isRTL option                                                                   // 2917
	cellHtml: '<td/>', // plain default HTML used for a cell when no other is available                                   // 2918
                                                                                                                       // 2919
                                                                                                                       // 2920
	constructor: function(view) {                                                                                         // 2921
		this.view = view;                                                                                                    // 2922
		this.isRTL = view.opt('isRTL');                                                                                      // 2923
	},                                                                                                                    // 2924
                                                                                                                       // 2925
                                                                                                                       // 2926
	// Renders the HTML for a row, leveraging custom cell-HTML-renderers based on the `rowType`.                          // 2927
	// Also applies the "intro" and "outro" cells, which are specified by the subclass and views.                         // 2928
	// `row` is an optional row number.                                                                                   // 2929
	rowHtml: function(rowType, row) {                                                                                     // 2930
		var renderCell = this.getHtmlRenderer('cell', rowType);                                                              // 2931
		var rowCellHtml = '';                                                                                                // 2932
		var col;                                                                                                             // 2933
		var cell;                                                                                                            // 2934
                                                                                                                       // 2935
		row = row || 0;                                                                                                      // 2936
                                                                                                                       // 2937
		for (col = 0; col < this.colCnt; col++) {                                                                            // 2938
			cell = this.getCell(row, col);                                                                                      // 2939
			rowCellHtml += renderCell(cell);                                                                                    // 2940
		}                                                                                                                    // 2941
                                                                                                                       // 2942
		rowCellHtml = this.bookendCells(rowCellHtml, rowType, row); // apply intro and outro                                 // 2943
                                                                                                                       // 2944
		return '<tr>' + rowCellHtml + '</tr>';                                                                               // 2945
	},                                                                                                                    // 2946
                                                                                                                       // 2947
                                                                                                                       // 2948
	// Applies the "intro" and "outro" HTML to the given cells.                                                           // 2949
	// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 2950
	// `cells` can be an HTML string of <td>'s or a jQuery <tr> element                                                   // 2951
	// `row` is an optional row number.                                                                                   // 2952
	bookendCells: function(cells, rowType, row) {                                                                         // 2953
		var intro = this.getHtmlRenderer('intro', rowType)(row || 0);                                                        // 2954
		var outro = this.getHtmlRenderer('outro', rowType)(row || 0);                                                        // 2955
		var prependHtml = this.isRTL ? outro : intro;                                                                        // 2956
		var appendHtml = this.isRTL ? intro : outro;                                                                         // 2957
                                                                                                                       // 2958
		if (typeof cells === 'string') {                                                                                     // 2959
			return prependHtml + cells + appendHtml;                                                                            // 2960
		}                                                                                                                    // 2961
		else { // a jQuery <tr> element                                                                                      // 2962
			return cells.prepend(prependHtml).append(appendHtml);                                                               // 2963
		}                                                                                                                    // 2964
	},                                                                                                                    // 2965
                                                                                                                       // 2966
                                                                                                                       // 2967
	// Returns an HTML-rendering function given a specific `rendererName` (like cell, intro, or outro) and a specific     // 2968
	// `rowType` (like day, eventSkeleton, helperSkeleton), which is optional.                                            // 2969
	// If a renderer for the specific rowType doesn't exist, it will fall back to a generic renderer.                     // 2970
	// We will query the View object first for any custom rendering functions, then the methods of the subclass.          // 2971
	getHtmlRenderer: function(rendererName, rowType) {                                                                    // 2972
		var view = this.view;                                                                                                // 2973
		var generalName; // like "cellHtml"                                                                                  // 2974
		var specificName; // like "dayCellHtml". based on rowType                                                            // 2975
		var provider; // either the View or the RowRenderer subclass, whichever provided the method                          // 2976
		var renderer;                                                                                                        // 2977
                                                                                                                       // 2978
		generalName = rendererName + 'Html';                                                                                 // 2979
		if (rowType) {                                                                                                       // 2980
			specificName = rowType + capitaliseFirstLetter(rendererName) + 'Html';                                              // 2981
		}                                                                                                                    // 2982
                                                                                                                       // 2983
		if (specificName && (renderer = view[specificName])) {                                                               // 2984
			provider = view;                                                                                                    // 2985
		}                                                                                                                    // 2986
		else if (specificName && (renderer = this[specificName])) {                                                          // 2987
			provider = this;                                                                                                    // 2988
		}                                                                                                                    // 2989
		else if ((renderer = view[generalName])) {                                                                           // 2990
			provider = view;                                                                                                    // 2991
		}                                                                                                                    // 2992
		else if ((renderer = this[generalName])) {                                                                           // 2993
			provider = this;                                                                                                    // 2994
		}                                                                                                                    // 2995
                                                                                                                       // 2996
		if (typeof renderer === 'function') {                                                                                // 2997
			return function() {                                                                                                 // 2998
				return renderer.apply(provider, arguments) || ''; // use correct `this` and always return a string                 // 2999
			};                                                                                                                  // 3000
		}                                                                                                                    // 3001
                                                                                                                       // 3002
		// the rendered can be a plain string as well. if not specified, always an empty string.                             // 3003
		return function() {                                                                                                  // 3004
			return renderer || '';                                                                                              // 3005
		};                                                                                                                   // 3006
	}                                                                                                                     // 3007
                                                                                                                       // 3008
});                                                                                                                    // 3009
                                                                                                                       // 3010
;;                                                                                                                     // 3011
                                                                                                                       // 3012
/* An abstract class comprised of a "grid" of cells that each represent a specific datetime                            // 3013
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3015
var Grid = fc.Grid = RowRenderer.extend({                                                                              // 3016
                                                                                                                       // 3017
	start: null, // the date of the first cell                                                                            // 3018
	end: null, // the date after the last cell                                                                            // 3019
                                                                                                                       // 3020
	rowCnt: 0, // number of rows                                                                                          // 3021
	colCnt: 0, // number of cols                                                                                          // 3022
                                                                                                                       // 3023
	el: null, // the containing element                                                                                   // 3024
	coordMap: null, // a GridCoordMap that converts pixel values to datetimes                                             // 3025
	elsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 3026
                                                                                                                       // 3027
	externalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 3028
                                                                                                                       // 3029
	// derived from options                                                                                               // 3030
	colHeadFormat: null, // TODO: move to another class. not applicable to all Grids                                      // 3031
	eventTimeFormat: null,                                                                                                // 3032
	displayEventTime: null,                                                                                               // 3033
	displayEventEnd: null,                                                                                                // 3034
                                                                                                                       // 3035
	// if all cells are the same length of time, the duration they all share. optional.                                   // 3036
	// when defined, allows the computeCellRange shortcut, as well as improved resizing behavior.                         // 3037
	cellDuration: null,                                                                                                   // 3038
                                                                                                                       // 3039
	// if defined, holds the unit identified (ex: "year" or "month") that determines the level of granularity             // 3040
	// of the date cells. if not defined, assumes to be day and time granularity.                                         // 3041
	largeUnit: null,                                                                                                      // 3042
                                                                                                                       // 3043
                                                                                                                       // 3044
	constructor: function() {                                                                                             // 3045
		RowRenderer.apply(this, arguments); // call the super-constructor                                                    // 3046
                                                                                                                       // 3047
		this.coordMap = new GridCoordMap(this);                                                                              // 3048
		this.elsByFill = {};                                                                                                 // 3049
		this.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 3050
	},                                                                                                                    // 3051
                                                                                                                       // 3052
                                                                                                                       // 3053
	/* Options                                                                                                            // 3054
	------------------------------------------------------------------------------------------------------------------*/  // 3055
                                                                                                                       // 3056
                                                                                                                       // 3057
	// Generates the format string used for the text in column headers, if not explicitly defined by 'columnFormat'       // 3058
	// TODO: move to another class. not applicable to all Grids                                                           // 3059
	computeColHeadFormat: function() {                                                                                    // 3060
		// subclasses must implement if they want to use headHtml()                                                          // 3061
	},                                                                                                                    // 3062
                                                                                                                       // 3063
                                                                                                                       // 3064
	// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 3065
	computeEventTimeFormat: function() {                                                                                  // 3066
		return this.view.opt('smallTimeFormat');                                                                             // 3067
	},                                                                                                                    // 3068
                                                                                                                       // 3069
                                                                                                                       // 3070
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 3071
	// Only applies to non-all-day events.                                                                                // 3072
	computeDisplayEventTime: function() {                                                                                 // 3073
		return true;                                                                                                         // 3074
	},                                                                                                                    // 3075
                                                                                                                       // 3076
                                                                                                                       // 3077
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 3078
	computeDisplayEventEnd: function() {                                                                                  // 3079
		return true;                                                                                                         // 3080
	},                                                                                                                    // 3081
                                                                                                                       // 3082
                                                                                                                       // 3083
	/* Dates                                                                                                              // 3084
	------------------------------------------------------------------------------------------------------------------*/  // 3085
                                                                                                                       // 3086
                                                                                                                       // 3087
	// Tells the grid about what period of time to display.                                                               // 3088
	// Any date-related cell system internal data should be generated.                                                    // 3089
	setRange: function(range) {                                                                                           // 3090
		this.start = range.start.clone();                                                                                    // 3091
		this.end = range.end.clone();                                                                                        // 3092
                                                                                                                       // 3093
		this.rangeUpdated();                                                                                                 // 3094
		this.processRangeOptions();                                                                                          // 3095
	},                                                                                                                    // 3096
                                                                                                                       // 3097
                                                                                                                       // 3098
	// Called when internal variables that rely on the range should be updated                                            // 3099
	rangeUpdated: function() {                                                                                            // 3100
	},                                                                                                                    // 3101
                                                                                                                       // 3102
                                                                                                                       // 3103
	// Updates values that rely on options and also relate to range                                                       // 3104
	processRangeOptions: function() {                                                                                     // 3105
		var view = this.view;                                                                                                // 3106
		var displayEventTime;                                                                                                // 3107
		var displayEventEnd;                                                                                                 // 3108
                                                                                                                       // 3109
		// Populate option-derived settings. Look for override first, then compute if necessary.                             // 3110
		this.colHeadFormat = view.opt('columnFormat') || this.computeColHeadFormat();                                        // 3111
                                                                                                                       // 3112
		this.eventTimeFormat =                                                                                               // 3113
			view.opt('eventTimeFormat') ||                                                                                      // 3114
			view.opt('timeFormat') || // deprecated                                                                             // 3115
			this.computeEventTimeFormat();                                                                                      // 3116
                                                                                                                       // 3117
		displayEventTime = view.opt('displayEventTime');                                                                     // 3118
		if (displayEventTime == null) {                                                                                      // 3119
			displayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 3120
		}                                                                                                                    // 3121
                                                                                                                       // 3122
		displayEventEnd = view.opt('displayEventEnd');                                                                       // 3123
		if (displayEventEnd == null) {                                                                                       // 3124
			displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 3125
		}                                                                                                                    // 3126
                                                                                                                       // 3127
		this.displayEventTime = displayEventTime;                                                                            // 3128
		this.displayEventEnd = displayEventEnd;                                                                              // 3129
	},                                                                                                                    // 3130
                                                                                                                       // 3131
                                                                                                                       // 3132
	// Called before the grid's coordinates will need to be queried for cells.                                            // 3133
	// Any non-date-related cell system internal data should be built.                                                    // 3134
	build: function() {                                                                                                   // 3135
	},                                                                                                                    // 3136
                                                                                                                       // 3137
                                                                                                                       // 3138
	// Called after the grid's coordinates are done being relied upon.                                                    // 3139
	// Any non-date-related cell system internal data should be cleared.                                                  // 3140
	clear: function() {                                                                                                   // 3141
	},                                                                                                                    // 3142
                                                                                                                       // 3143
                                                                                                                       // 3144
	// Converts a range with an inclusive `start` and an exclusive `end` into an array of segment objects                 // 3145
	rangeToSegs: function(range) {                                                                                        // 3146
		// subclasses must implement                                                                                         // 3147
	},                                                                                                                    // 3148
                                                                                                                       // 3149
                                                                                                                       // 3150
	// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 3151
	diffDates: function(a, b) {                                                                                           // 3152
		if (this.largeUnit) {                                                                                                // 3153
			return diffByUnit(a, b, this.largeUnit);                                                                            // 3154
		}                                                                                                                    // 3155
		else {                                                                                                               // 3156
			return diffDayTime(a, b);                                                                                           // 3157
		}                                                                                                                    // 3158
	},                                                                                                                    // 3159
                                                                                                                       // 3160
                                                                                                                       // 3161
	/* Cells                                                                                                              // 3162
	------------------------------------------------------------------------------------------------------------------*/  // 3163
	// NOTE: columns are ordered left-to-right                                                                            // 3164
                                                                                                                       // 3165
                                                                                                                       // 3166
	// Gets an object containing row/col number, misc data, and range information about the cell.                         // 3167
	// Accepts row/col values, an object with row/col properties, or a single-number offset from the first cell.          // 3168
	getCell: function(row, col) {                                                                                         // 3169
		var cell;                                                                                                            // 3170
                                                                                                                       // 3171
		if (col == null) {                                                                                                   // 3172
			if (typeof row === 'number') { // a single-number offset                                                            // 3173
				col = row % this.colCnt;                                                                                           // 3174
				row = Math.floor(row / this.colCnt);                                                                               // 3175
			}                                                                                                                   // 3176
			else { // an object with row/col properties                                                                         // 3177
				col = row.col;                                                                                                     // 3178
				row = row.row;                                                                                                     // 3179
			}                                                                                                                   // 3180
		}                                                                                                                    // 3181
                                                                                                                       // 3182
		cell = { row: row, col: col };                                                                                       // 3183
                                                                                                                       // 3184
		$.extend(cell, this.getRowData(row), this.getColData(col));                                                          // 3185
		$.extend(cell, this.computeCellRange(cell));                                                                         // 3186
                                                                                                                       // 3187
		return cell;                                                                                                         // 3188
	},                                                                                                                    // 3189
                                                                                                                       // 3190
                                                                                                                       // 3191
	// Given a cell object with index and misc data, generates a range object                                             // 3192
	// If the grid is leveraging cellDuration, this doesn't need to be defined. Only computeCellDate does.                // 3193
	// If being overridden, should return a range with reference-free date copies.                                        // 3194
	computeCellRange: function(cell) {                                                                                    // 3195
		var date = this.computeCellDate(cell);                                                                               // 3196
                                                                                                                       // 3197
		return {                                                                                                             // 3198
			start: date,                                                                                                        // 3199
			end: date.clone().add(this.cellDuration)                                                                            // 3200
		};                                                                                                                   // 3201
	},                                                                                                                    // 3202
                                                                                                                       // 3203
                                                                                                                       // 3204
	// Given a cell, returns its start date. Should return a reference-free date copy.                                    // 3205
	computeCellDate: function(cell) {                                                                                     // 3206
		// subclasses can implement                                                                                          // 3207
	},                                                                                                                    // 3208
                                                                                                                       // 3209
                                                                                                                       // 3210
	// Retrieves misc data about the given row                                                                            // 3211
	getRowData: function(row) {                                                                                           // 3212
		return {};                                                                                                           // 3213
	},                                                                                                                    // 3214
                                                                                                                       // 3215
                                                                                                                       // 3216
	// Retrieves misc data baout the given column                                                                         // 3217
	getColData: function(col) {                                                                                           // 3218
		return {};                                                                                                           // 3219
	},                                                                                                                    // 3220
                                                                                                                       // 3221
                                                                                                                       // 3222
	// Retrieves the element representing the given row                                                                   // 3223
	getRowEl: function(row) {                                                                                             // 3224
		// subclasses should implement if leveraging the default getCellDayEl() or computeRowCoords()                        // 3225
	},                                                                                                                    // 3226
                                                                                                                       // 3227
                                                                                                                       // 3228
	// Retrieves the element representing the given column                                                                // 3229
	getColEl: function(col) {                                                                                             // 3230
		// subclasses should implement if leveraging the default getCellDayEl() or computeColCoords()                        // 3231
	},                                                                                                                    // 3232
                                                                                                                       // 3233
                                                                                                                       // 3234
	// Given a cell object, returns the element that represents the cell's whole-day                                      // 3235
	getCellDayEl: function(cell) {                                                                                        // 3236
		return this.getColEl(cell.col) || this.getRowEl(cell.row);                                                           // 3237
	},                                                                                                                    // 3238
                                                                                                                       // 3239
                                                                                                                       // 3240
	/* Cell Coordinates                                                                                                   // 3241
	------------------------------------------------------------------------------------------------------------------*/  // 3242
                                                                                                                       // 3243
                                                                                                                       // 3244
	// Computes the top/bottom coordinates of all rows.                                                                   // 3245
	// By default, queries the dimensions of the element provided by getRowEl().                                          // 3246
	computeRowCoords: function() {                                                                                        // 3247
		var items = [];                                                                                                      // 3248
		var i, el;                                                                                                           // 3249
		var top;                                                                                                             // 3250
                                                                                                                       // 3251
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 3252
			el = this.getRowEl(i);                                                                                              // 3253
			top = el.offset().top;                                                                                              // 3254
			items.push({                                                                                                        // 3255
				top: top,                                                                                                          // 3256
				bottom: top + el.outerHeight()                                                                                     // 3257
			});                                                                                                                 // 3258
		}                                                                                                                    // 3259
                                                                                                                       // 3260
		return items;                                                                                                        // 3261
	},                                                                                                                    // 3262
                                                                                                                       // 3263
                                                                                                                       // 3264
	// Computes the left/right coordinates of all rows.                                                                   // 3265
	// By default, queries the dimensions of the element provided by getColEl(). Columns can be LTR or RTL.               // 3266
	computeColCoords: function() {                                                                                        // 3267
		var items = [];                                                                                                      // 3268
		var i, el;                                                                                                           // 3269
		var left;                                                                                                            // 3270
                                                                                                                       // 3271
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 3272
			el = this.getColEl(i);                                                                                              // 3273
			left = el.offset().left;                                                                                            // 3274
			items.push({                                                                                                        // 3275
				left: left,                                                                                                        // 3276
				right: left + el.outerWidth()                                                                                      // 3277
			});                                                                                                                 // 3278
		}                                                                                                                    // 3279
                                                                                                                       // 3280
		return items;                                                                                                        // 3281
	},                                                                                                                    // 3282
                                                                                                                       // 3283
                                                                                                                       // 3284
	/* Rendering                                                                                                          // 3285
	------------------------------------------------------------------------------------------------------------------*/  // 3286
                                                                                                                       // 3287
                                                                                                                       // 3288
	// Sets the container element that the grid should render inside of.                                                  // 3289
	// Does other DOM-related initializations.                                                                            // 3290
	setElement: function(el) {                                                                                            // 3291
		var _this = this;                                                                                                    // 3292
                                                                                                                       // 3293
		this.el = el;                                                                                                        // 3294
                                                                                                                       // 3295
		// attach a handler to the grid's root element.                                                                      // 3296
		// jQuery will take care of unregistering them when removeElement gets called.                                       // 3297
		el.on('mousedown', function(ev) {                                                                                    // 3298
			if (                                                                                                                // 3299
				!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or "more.." link                // 3300
				!$(ev.target).closest('.fc-popover').length // not on a popover (like the "more.." events one)                     // 3301
			) {                                                                                                                 // 3302
				_this.dayMousedown(ev);                                                                                            // 3303
			}                                                                                                                   // 3304
		});                                                                                                                  // 3305
                                                                                                                       // 3306
		// attach event-element-related handlers. in Grid.events                                                             // 3307
		// same garbage collection note as above.                                                                            // 3308
		this.bindSegHandlers();                                                                                              // 3309
                                                                                                                       // 3310
		this.bindGlobalHandlers();                                                                                           // 3311
	},                                                                                                                    // 3312
                                                                                                                       // 3313
                                                                                                                       // 3314
	// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3315
	// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View                   // 3316
	removeElement: function() {                                                                                           // 3317
		this.unbindGlobalHandlers();                                                                                         // 3318
                                                                                                                       // 3319
		this.el.remove();                                                                                                    // 3320
                                                                                                                       // 3321
		// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3322
	},                                                                                                                    // 3323
                                                                                                                       // 3324
                                                                                                                       // 3325
	// Renders the basic structure of grid view before any content is rendered                                            // 3326
	renderSkeleton: function() {                                                                                          // 3327
		// subclasses should implement                                                                                       // 3328
	},                                                                                                                    // 3329
                                                                                                                       // 3330
                                                                                                                       // 3331
	// Renders the grid's date-related content (like cells that represent days/times).                                    // 3332
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3333
	renderDates: function() {                                                                                             // 3334
		// subclasses should implement                                                                                       // 3335
	},                                                                                                                    // 3336
                                                                                                                       // 3337
                                                                                                                       // 3338
	// Unrenders the grid's date-related content                                                                          // 3339
	unrenderDates: function() {                                                                                           // 3340
		// subclasses should implement                                                                                       // 3341
	},                                                                                                                    // 3342
                                                                                                                       // 3343
                                                                                                                       // 3344
	/* Handlers                                                                                                           // 3345
	------------------------------------------------------------------------------------------------------------------*/  // 3346
                                                                                                                       // 3347
                                                                                                                       // 3348
	// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3349
	bindGlobalHandlers: function() {                                                                                      // 3350
		$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3351
	},                                                                                                                    // 3352
                                                                                                                       // 3353
                                                                                                                       // 3354
	// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3355
	unbindGlobalHandlers: function() {                                                                                    // 3356
		$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3357
	},                                                                                                                    // 3358
                                                                                                                       // 3359
                                                                                                                       // 3360
	// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3361
	dayMousedown: function(ev) {                                                                                          // 3362
		var _this = this;                                                                                                    // 3363
		var view = this.view;                                                                                                // 3364
		var isSelectable = view.opt('selectable');                                                                           // 3365
		var dayClickCell; // null if invalid dayClick                                                                        // 3366
		var selectionRange; // null if invalid selection                                                                     // 3367
                                                                                                                       // 3368
		// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3369
		// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3370
		// if 'selectable' is enabled, this listener also detects selections.                                                // 3371
		var dragListener = new CellDragListener(this.coordMap, {                                                             // 3372
			//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3373
			scroll: view.opt('dragScroll'),                                                                                     // 3374
			dragStart: function() {                                                                                             // 3375
				view.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3376
			},                                                                                                                  // 3377
			cellOver: function(cell, isOrig, origCell) {                                                                        // 3378
				if (origCell) { // click needs to have started on a cell                                                           // 3379
					dayClickCell = isOrig ? cell : null; // single-cell selection is a day click                                      // 3380
					if (isSelectable) {                                                                                               // 3381
						selectionRange = _this.computeSelection(origCell, cell);                                                         // 3382
						if (selectionRange) {                                                                                            // 3383
							_this.renderSelection(selectionRange);                                                                          // 3384
						}                                                                                                                // 3385
						else {                                                                                                           // 3386
							disableCursor();                                                                                                // 3387
						}                                                                                                                // 3388
					}                                                                                                                 // 3389
				}                                                                                                                  // 3390
			},                                                                                                                  // 3391
			cellOut: function(cell) {                                                                                           // 3392
				dayClickCell = null;                                                                                               // 3393
				selectionRange = null;                                                                                             // 3394
				_this.unrenderSelection();                                                                                         // 3395
				enableCursor();                                                                                                    // 3396
			},                                                                                                                  // 3397
			listenStop: function(ev) {                                                                                          // 3398
				if (dayClickCell) {                                                                                                // 3399
					view.triggerDayClick(dayClickCell, _this.getCellDayEl(dayClickCell), ev);                                         // 3400
				}                                                                                                                  // 3401
				if (selectionRange) {                                                                                              // 3402
					// the selection will already have been rendered. just report it                                                  // 3403
					view.reportSelection(selectionRange, ev);                                                                         // 3404
				}                                                                                                                  // 3405
				enableCursor();                                                                                                    // 3406
			}                                                                                                                   // 3407
		});                                                                                                                  // 3408
                                                                                                                       // 3409
		dragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3410
	},                                                                                                                    // 3411
                                                                                                                       // 3412
                                                                                                                       // 3413
	/* Event Helper                                                                                                       // 3414
	------------------------------------------------------------------------------------------------------------------*/  // 3415
	// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3416
                                                                                                                       // 3417
                                                                                                                       // 3418
	// Renders a mock event over the given range                                                                          // 3419
	renderRangeHelper: function(range, sourceSeg) {                                                                       // 3420
		var fakeEvent = this.fabricateHelperEvent(range, sourceSeg);                                                         // 3421
                                                                                                                       // 3422
		this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3423
	},                                                                                                                    // 3424
                                                                                                                       // 3425
                                                                                                                       // 3426
	// Builds a fake event given a date range it should cover, and a segment is should be inspired from.                  // 3427
	// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3428
	// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3429
	fabricateHelperEvent: function(range, sourceSeg) {                                                                    // 3430
		var fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3431
                                                                                                                       // 3432
		fakeEvent.start = range.start.clone();                                                                               // 3433
		fakeEvent.end = range.end ? range.end.clone() : null;                                                                // 3434
		fakeEvent.allDay = null; // force it to be freshly computed by normalizeEventRange                                   // 3435
		this.view.calendar.normalizeEventRange(fakeEvent);                                                                   // 3436
                                                                                                                       // 3437
		// this extra className will be useful for differentiating real events from mock events in CSS                       // 3438
		fakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3439
                                                                                                                       // 3440
		// if something external is being dragged in, don't render a resizer                                                 // 3441
		if (!sourceSeg) {                                                                                                    // 3442
			fakeEvent.editable = false;                                                                                         // 3443
		}                                                                                                                    // 3444
                                                                                                                       // 3445
		return fakeEvent;                                                                                                    // 3446
	},                                                                                                                    // 3447
                                                                                                                       // 3448
                                                                                                                       // 3449
	// Renders a mock event                                                                                               // 3450
	renderHelper: function(event, sourceSeg) {                                                                            // 3451
		// subclasses must implement                                                                                         // 3452
	},                                                                                                                    // 3453
                                                                                                                       // 3454
                                                                                                                       // 3455
	// Unrenders a mock event                                                                                             // 3456
	unrenderHelper: function() {                                                                                          // 3457
		// subclasses must implement                                                                                         // 3458
	},                                                                                                                    // 3459
                                                                                                                       // 3460
                                                                                                                       // 3461
	/* Selection                                                                                                          // 3462
	------------------------------------------------------------------------------------------------------------------*/  // 3463
                                                                                                                       // 3464
                                                                                                                       // 3465
	// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3466
	renderSelection: function(range) {                                                                                    // 3467
		this.renderHighlight(this.selectionRangeToSegs(range));                                                              // 3468
	},                                                                                                                    // 3469
                                                                                                                       // 3470
                                                                                                                       // 3471
	// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3472
	unrenderSelection: function() {                                                                                       // 3473
		this.unrenderHighlight();                                                                                            // 3474
	},                                                                                                                    // 3475
                                                                                                                       // 3476
                                                                                                                       // 3477
	// Given the first and last cells of a selection, returns a range object.                                             // 3478
	// Will return something falsy if the selection is invalid (when outside of selectionConstraint for example).         // 3479
	// Subclasses can override and provide additional data in the range object. Will be passed to renderSelection().      // 3480
	computeSelection: function(firstCell, lastCell) {                                                                     // 3481
		var dates = [                                                                                                        // 3482
			firstCell.start,                                                                                                    // 3483
			firstCell.end,                                                                                                      // 3484
			lastCell.start,                                                                                                     // 3485
			lastCell.end                                                                                                        // 3486
		];                                                                                                                   // 3487
		var range;                                                                                                           // 3488
                                                                                                                       // 3489
		dates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3490
                                                                                                                       // 3491
		range = {                                                                                                            // 3492
			start: dates[0].clone(),                                                                                            // 3493
			end: dates[3].clone()                                                                                               // 3494
		};                                                                                                                   // 3495
                                                                                                                       // 3496
		if (!this.view.calendar.isSelectionRangeAllowed(range)) {                                                            // 3497
			return null;                                                                                                        // 3498
		}                                                                                                                    // 3499
                                                                                                                       // 3500
		return range;                                                                                                        // 3501
	},                                                                                                                    // 3502
                                                                                                                       // 3503
                                                                                                                       // 3504
	selectionRangeToSegs: function(range) {                                                                               // 3505
		return this.rangeToSegs(range);                                                                                      // 3506
	},                                                                                                                    // 3507
                                                                                                                       // 3508
                                                                                                                       // 3509
	/* Highlight                                                                                                          // 3510
	------------------------------------------------------------------------------------------------------------------*/  // 3511
                                                                                                                       // 3512
                                                                                                                       // 3513
	// Renders an emphasis on the given date range. Given an array of segments.                                           // 3514
	renderHighlight: function(segs) {                                                                                     // 3515
		this.renderFill('highlight', segs);                                                                                  // 3516
	},                                                                                                                    // 3517
                                                                                                                       // 3518
                                                                                                                       // 3519
	// Unrenders the emphasis on a date range                                                                             // 3520
	unrenderHighlight: function() {                                                                                       // 3521
		this.unrenderFill('highlight');                                                                                      // 3522
	},                                                                                                                    // 3523
                                                                                                                       // 3524
                                                                                                                       // 3525
	// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3526
	highlightSegClasses: function() {                                                                                     // 3527
		return [ 'fc-highlight' ];                                                                                           // 3528
	},                                                                                                                    // 3529
                                                                                                                       // 3530
                                                                                                                       // 3531
	/* Fill System (highlight, background events, business hours)                                                         // 3532
	------------------------------------------------------------------------------------------------------------------*/  // 3533
                                                                                                                       // 3534
                                                                                                                       // 3535
	// Renders a set of rectangles over the given segments of time.                                                       // 3536
	// MUST RETURN a subset of segs, the segs that were actually rendered.                                                // 3537
	// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3538
	renderFill: function(type, segs) {                                                                                    // 3539
		// subclasses must implement                                                                                         // 3540
	},                                                                                                                    // 3541
                                                                                                                       // 3542
                                                                                                                       // 3543
	// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3544
	unrenderFill: function(type) {                                                                                        // 3545
		var el = this.elsByFill[type];                                                                                       // 3546
                                                                                                                       // 3547
		if (el) {                                                                                                            // 3548
			el.remove();                                                                                                        // 3549
			delete this.elsByFill[type];                                                                                        // 3550
		}                                                                                                                    // 3551
	},                                                                                                                    // 3552
                                                                                                                       // 3553
                                                                                                                       // 3554
	// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3555
	// Only returns segments that successfully rendered.                                                                  // 3556
	// To be harnessed by renderFill (implemented by subclasses).                                                         // 3557
	// Analagous to renderFgSegEls.                                                                                       // 3558
	renderFillSegEls: function(type, segs) {                                                                              // 3559
		var _this = this;                                                                                                    // 3560
		var segElMethod = this[type + 'SegEl'];                                                                              // 3561
		var html = '';                                                                                                       // 3562
		var renderedSegs = [];                                                                                               // 3563
		var i;                                                                                                               // 3564
                                                                                                                       // 3565
		if (segs.length) {                                                                                                   // 3566
                                                                                                                       // 3567
			// build a large concatenation of segment HTML                                                                      // 3568
			for (i = 0; i < segs.length; i++) {                                                                                 // 3569
				html += this.fillSegHtml(type, segs[i]);                                                                           // 3570
			}                                                                                                                   // 3571
                                                                                                                       // 3572
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3573
			// Then, compute the 'el' for each segment.                                                                         // 3574
			$(html).each(function(i, node) {                                                                                    // 3575
				var seg = segs[i];                                                                                                 // 3576
				var el = $(node);                                                                                                  // 3577
                                                                                                                       // 3578
				// allow custom filter methods per-type                                                                            // 3579
				if (segElMethod) {                                                                                                 // 3580
					el = segElMethod.call(_this, seg, el);                                                                            // 3581
				}                                                                                                                  // 3582
                                                                                                                       // 3583
				if (el) { // custom filters did not cancel the render                                                              // 3584
					el = $(el); // allow custom filter to return raw DOM node                                                         // 3585
                                                                                                                       // 3586
					// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3587
					if (el.is(_this.fillSegTag)) {                                                                                    // 3588
						seg.el = el;                                                                                                     // 3589
						renderedSegs.push(seg);                                                                                          // 3590
					}                                                                                                                 // 3591
				}                                                                                                                  // 3592
			});                                                                                                                 // 3593
		}                                                                                                                    // 3594
                                                                                                                       // 3595
		return renderedSegs;                                                                                                 // 3596
	},                                                                                                                    // 3597
                                                                                                                       // 3598
                                                                                                                       // 3599
	fillSegTag: 'div', // subclasses can override                                                                         // 3600
                                                                                                                       // 3601
                                                                                                                       // 3602
	// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3603
	fillSegHtml: function(type, seg) {                                                                                    // 3604
                                                                                                                       // 3605
		// custom hooks per-type                                                                                             // 3606
		var classesMethod = this[type + 'SegClasses'];                                                                       // 3607
		var cssMethod = this[type + 'SegCss'];                                                                               // 3608
                                                                                                                       // 3609
		var classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3610
		var css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3611
                                                                                                                       // 3612
		return '<' + this.fillSegTag +                                                                                       // 3613
			(classes.length ? ' class="' + classes.join(' ') + '"' : '') +                                                      // 3614
			(css ? ' style="' + css + '"' : '') +                                                                               // 3615
			' />';                                                                                                              // 3616
	},                                                                                                                    // 3617
                                                                                                                       // 3618
                                                                                                                       // 3619
	/* Generic rendering utilities for subclasses                                                                         // 3620
	------------------------------------------------------------------------------------------------------------------*/  // 3621
                                                                                                                       // 3622
                                                                                                                       // 3623
	// Renders a day-of-week header row.                                                                                  // 3624
	// TODO: move to another class. not applicable to all Grids                                                           // 3625
	headHtml: function() {                                                                                                // 3626
		return '' +                                                                                                          // 3627
			'<div class="fc-row ' + this.view.widgetHeaderClass + '">' +                                                        // 3628
				'<table>' +                                                                                                        // 3629
					'<thead>' +                                                                                                       // 3630
						this.rowHtml('head') + // leverages RowRenderer                                                                  // 3631
					'</thead>' +                                                                                                      // 3632
				'</table>' +                                                                                                       // 3633
			'</div>';                                                                                                           // 3634
	},                                                                                                                    // 3635
                                                                                                                       // 3636
                                                                                                                       // 3637
	// Used by the `headHtml` method, via RowRenderer, for rendering the HTML of a day-of-week header cell                // 3638
	// TODO: move to another class. not applicable to all Grids                                                           // 3639
	headCellHtml: function(cell) {                                                                                        // 3640
		var view = this.view;                                                                                                // 3641
		var date = cell.start;                                                                                               // 3642
                                                                                                                       // 3643
		return '' +                                                                                                          // 3644
			'<th class="fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '">' +                         // 3645
				htmlEscape(date.format(this.colHeadFormat)) +                                                                      // 3646
			'</th>';                                                                                                            // 3647
	},                                                                                                                    // 3648
                                                                                                                       // 3649
                                                                                                                       // 3650
	// Renders the HTML for a single-day background cell                                                                  // 3651
	bgCellHtml: function(cell) {                                                                                          // 3652
		var view = this.view;                                                                                                // 3653
		var date = cell.start;                                                                                               // 3654
		var classes = this.getDayClasses(date);                                                                              // 3655
                                                                                                                       // 3656
		classes.unshift('fc-day', view.widgetContentClass);                                                                  // 3657
                                                                                                                       // 3658
		return '<td class="' + classes.join(' ') + '"' +                                                                     // 3659
			' data-date="' + date.format('YYYY-MM-DD') + '"' + // if date has a time, won't format it                           // 3660
			'></td>';                                                                                                           // 3661
	},                                                                                                                    // 3662
                                                                                                                       // 3663
                                                                                                                       // 3664
	// Computes HTML classNames for a single-day cell                                                                     // 3665
	getDayClasses: function(date) {                                                                                       // 3666
		var view = this.view;                                                                                                // 3667
		var today = view.calendar.getNow().stripTime();                                                                      // 3668
		var classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3669
                                                                                                                       // 3670
		if (                                                                                                                 // 3671
			view.intervalDuration.as('months') == 1 &&                                                                          // 3672
			date.month() != view.intervalStart.month()                                                                          // 3673
		) {                                                                                                                  // 3674
			classes.push('fc-other-month');                                                                                     // 3675
		}                                                                                                                    // 3676
                                                                                                                       // 3677
		if (date.isSame(today, 'day')) {                                                                                     // 3678
			classes.push(                                                                                                       // 3679
				'fc-today',                                                                                                        // 3680
				view.highlightStateClass                                                                                           // 3681
			);                                                                                                                  // 3682
		}                                                                                                                    // 3683
		else if (date < today) {                                                                                             // 3684
			classes.push('fc-past');                                                                                            // 3685
		}                                                                                                                    // 3686
		else {                                                                                                               // 3687
			classes.push('fc-future');                                                                                          // 3688
		}                                                                                                                    // 3689
                                                                                                                       // 3690
		return classes;                                                                                                      // 3691
	}                                                                                                                     // 3692
                                                                                                                       // 3693
});                                                                                                                    // 3694
                                                                                                                       // 3695
;;                                                                                                                     // 3696
                                                                                                                       // 3697
/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3698
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3700
Grid.mixin({                                                                                                           // 3701
                                                                                                                       // 3702
	mousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3703
	isDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3704
	isResizingSeg: false, // is a segment being resized? boolean                                                          // 3705
	isDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3706
	segs: null, // the event segments currently rendered in the grid                                                      // 3707
                                                                                                                       // 3708
                                                                                                                       // 3709
	// Renders the given events onto the grid                                                                             // 3710
	renderEvents: function(events) {                                                                                      // 3711
		var segs = this.eventsToSegs(events);                                                                                // 3712
		var bgSegs = [];                                                                                                     // 3713
		var fgSegs = [];                                                                                                     // 3714
		var i, seg;                                                                                                          // 3715
                                                                                                                       // 3716
		for (i = 0; i < segs.length; i++) {                                                                                  // 3717
			seg = segs[i];                                                                                                      // 3718
                                                                                                                       // 3719
			if (isBgEvent(seg.event)) {                                                                                         // 3720
				bgSegs.push(seg);                                                                                                  // 3721
			}                                                                                                                   // 3722
			else {                                                                                                              // 3723
				fgSegs.push(seg);                                                                                                  // 3724
			}                                                                                                                   // 3725
		}                                                                                                                    // 3726
                                                                                                                       // 3727
		// Render each different type of segment.                                                                            // 3728
		// Each function may return a subset of the segs, segs that were actually rendered.                                  // 3729
		bgSegs = this.renderBgSegs(bgSegs) || bgSegs;                                                                        // 3730
		fgSegs = this.renderFgSegs(fgSegs) || fgSegs;                                                                        // 3731
                                                                                                                       // 3732
		this.segs = bgSegs.concat(fgSegs);                                                                                   // 3733
	},                                                                                                                    // 3734
                                                                                                                       // 3735
                                                                                                                       // 3736
	// Unrenders all events currently rendered on the grid                                                                // 3737
	unrenderEvents: function() {                                                                                          // 3738
		this.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3739
                                                                                                                       // 3740
		this.unrenderFgSegs();                                                                                               // 3741
		this.unrenderBgSegs();                                                                                               // 3742
                                                                                                                       // 3743
		this.segs = null;                                                                                                    // 3744
	},                                                                                                                    // 3745
                                                                                                                       // 3746
                                                                                                                       // 3747
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 3748
	getEventSegs: function() {                                                                                            // 3749
		return this.segs || [];                                                                                              // 3750
	},                                                                                                                    // 3751
                                                                                                                       // 3752
                                                                                                                       // 3753
	/* Foreground Segment Rendering                                                                                       // 3754
	------------------------------------------------------------------------------------------------------------------*/  // 3755
                                                                                                                       // 3756
                                                                                                                       // 3757
	// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3758
	renderFgSegs: function(segs) {                                                                                        // 3759
		// subclasses must implement                                                                                         // 3760
	},                                                                                                                    // 3761
                                                                                                                       // 3762
                                                                                                                       // 3763
	// Unrenders all currently rendered foreground segments                                                               // 3764
	unrenderFgSegs: function() {                                                                                          // 3765
		// subclasses must implement                                                                                         // 3766
	},                                                                                                                    // 3767
                                                                                                                       // 3768
                                                                                                                       // 3769
	// Renders and assigns an `el` property for each foreground event segment.                                            // 3770
	// Only returns segments that successfully rendered.                                                                  // 3771
	// A utility that subclasses may use.                                                                                 // 3772
	renderFgSegEls: function(segs, disableResizing) {                                                                     // 3773
		var view = this.view;                                                                                                // 3774
		var html = '';                                                                                                       // 3775
		var renderedSegs = [];                                                                                               // 3776
		var i;                                                                                                               // 3777
                                                                                                                       // 3778
		if (segs.length) { // don't build an empty html string                                                               // 3779
                                                                                                                       // 3780
			// build a large concatenation of event segment HTML                                                                // 3781
			for (i = 0; i < segs.length; i++) {                                                                                 // 3782
				html += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3783
			}                                                                                                                   // 3784
                                                                                                                       // 3785
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3786
			// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3787
			$(html).each(function(i, node) {                                                                                    // 3788
				var seg = segs[i];                                                                                                 // 3789
				var el = view.resolveEventEl(seg.event, $(node));                                                                  // 3790
                                                                                                                       // 3791
				if (el) {                                                                                                          // 3792
					el.data('fc-seg', seg); // used by handlers                                                                       // 3793
					seg.el = el;                                                                                                      // 3794
					renderedSegs.push(seg);                                                                                           // 3795
				}                                                                                                                  // 3796
			});                                                                                                                 // 3797
		}                                                                                                                    // 3798
                                                                                                                       // 3799
		return renderedSegs;                                                                                                 // 3800
	},                                                                                                                    // 3801
                                                                                                                       // 3802
                                                                                                                       // 3803
	// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3804
	fgSegHtml: function(seg, disableResizing) {                                                                           // 3805
		// subclasses should implement                                                                                       // 3806
	},                                                                                                                    // 3807
                                                                                                                       // 3808
                                                                                                                       // 3809
	/* Background Segment Rendering                                                                                       // 3810
	------------------------------------------------------------------------------------------------------------------*/  // 3811
                                                                                                                       // 3812
                                                                                                                       // 3813
	// Renders the given background event segments onto the grid.                                                         // 3814
	// Returns a subset of the segs that were actually rendered.                                                          // 3815
	renderBgSegs: function(segs) {                                                                                        // 3816
		return this.renderFill('bgEvent', segs);                                                                             // 3817
	},                                                                                                                    // 3818
                                                                                                                       // 3819
                                                                                                                       // 3820
	// Unrenders all the currently rendered background event segments                                                     // 3821
	unrenderBgSegs: function() {                                                                                          // 3822
		this.unrenderFill('bgEvent');                                                                                        // 3823
	},                                                                                                                    // 3824
                                                                                                                       // 3825
                                                                                                                       // 3826
	// Renders a background event element, given the default rendering. Called by the fill system.                        // 3827
	bgEventSegEl: function(seg, el) {                                                                                     // 3828
		return this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3829
	},                                                                                                                    // 3830
                                                                                                                       // 3831
                                                                                                                       // 3832
	// Generates an array of classNames to be used for the default rendering of a background event.                       // 3833
	// Called by the fill system.                                                                                         // 3834
	bgEventSegClasses: function(seg) {                                                                                    // 3835
		var event = seg.event;                                                                                               // 3836
		var source = event.source || {};                                                                                     // 3837
                                                                                                                       // 3838
		return [ 'fc-bgevent' ].concat(                                                                                      // 3839
			event.className,                                                                                                    // 3840
			source.className || []                                                                                              // 3841
		);                                                                                                                   // 3842
	},                                                                                                                    // 3843
                                                                                                                       // 3844
                                                                                                                       // 3845
	// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3846
	// Called by the fill system.                                                                                         // 3847
	// TODO: consolidate with getEventSkinCss?                                                                            // 3848
	bgEventSegCss: function(seg) {                                                                                        // 3849
		var view = this.view;                                                                                                // 3850
		var event = seg.event;                                                                                               // 3851
		var source = event.source || {};                                                                                     // 3852
                                                                                                                       // 3853
		return {                                                                                                             // 3854
			'background-color':                                                                                                 // 3855
				event.backgroundColor ||                                                                                           // 3856
				event.color ||                                                                                                     // 3857
				source.backgroundColor ||                                                                                          // 3858
				source.color ||                                                                                                    // 3859
				view.opt('eventBackgroundColor') ||                                                                                // 3860
				view.opt('eventColor')                                                                                             // 3861
		};                                                                                                                   // 3862
	},                                                                                                                    // 3863
                                                                                                                       // 3864
                                                                                                                       // 3865
	// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3866
	businessHoursSegClasses: function(seg) {                                                                              // 3867
		return [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3868
	},                                                                                                                    // 3869
                                                                                                                       // 3870
                                                                                                                       // 3871
	/* Handlers                                                                                                           // 3872
	------------------------------------------------------------------------------------------------------------------*/  // 3873
                                                                                                                       // 3874
                                                                                                                       // 3875
	// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3876
	bindSegHandlers: function() {                                                                                         // 3877
		var _this = this;                                                                                                    // 3878
		var view = this.view;                                                                                                // 3879
                                                                                                                       // 3880
		$.each(                                                                                                              // 3881
			{                                                                                                                   // 3882
				mouseenter: function(seg, ev) {                                                                                    // 3883
					_this.triggerSegMouseover(seg, ev);                                                                               // 3884
				},                                                                                                                 // 3885
				mouseleave: function(seg, ev) {                                                                                    // 3886
					_this.triggerSegMouseout(seg, ev);                                                                                // 3887
				},                                                                                                                 // 3888
				click: function(seg, ev) {                                                                                         // 3889
					return view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3890
				},                                                                                                                 // 3891
				mousedown: function(seg, ev) {                                                                                     // 3892
					if ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3893
						_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3894
					}                                                                                                                 // 3895
					else if (view.isEventDraggable(seg.event)) {                                                                      // 3896
						_this.segDragMousedown(seg, ev);                                                                                 // 3897
					}                                                                                                                 // 3898
				}                                                                                                                  // 3899
			},                                                                                                                  // 3900
			function(name, func) {                                                                                              // 3901
				// attach the handler to the container element and only listen for real event elements via bubbling                // 3902
				_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3903
					var seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3904
                                                                                                                       // 3905
					// only call the handlers if there is not a drag/resize in progress                                               // 3906
					if (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3907
						return func.call(this, seg, ev); // `this` will be the event element                                             // 3908
					}                                                                                                                 // 3909
				});                                                                                                                // 3910
			}                                                                                                                   // 3911
		);                                                                                                                   // 3912
	},                                                                                                                    // 3913
                                                                                                                       // 3914
                                                                                                                       // 3915
	// Updates internal state and triggers handlers for when an event element is moused over                              // 3916
	triggerSegMouseover: function(seg, ev) {                                                                              // 3917
		if (!this.mousedOverSeg) {                                                                                           // 3918
			this.mousedOverSeg = seg;                                                                                           // 3919
			this.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3920
		}                                                                                                                    // 3921
	},                                                                                                                    // 3922
                                                                                                                       // 3923
                                                                                                                       // 3924
	// Updates internal state and triggers handlers for when an event element is moused out.                              // 3925
	// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3926
	triggerSegMouseout: function(seg, ev) {                                                                               // 3927
		ev = ev || {}; // if given no args, make a mock mouse event                                                          // 3928
                                                                                                                       // 3929
		if (this.mousedOverSeg) {                                                                                            // 3930
			seg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3931
			this.mousedOverSeg = null;                                                                                          // 3932
			this.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3933
		}                                                                                                                    // 3934
	},                                                                                                                    // 3935
                                                                                                                       // 3936
                                                                                                                       // 3937
	/* Event Dragging                                                                                                     // 3938
	------------------------------------------------------------------------------------------------------------------*/  // 3939
                                                                                                                       // 3940
                                                                                                                       // 3941
	// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3942
	// Generic enough to work with any type of Grid.                                                                      // 3943
	segDragMousedown: function(seg, ev) {                                                                                 // 3944
		var _this = this;                                                                                                    // 3945
		var view = this.view;                                                                                                // 3946
		var calendar = view.calendar;                                                                                        // 3947
		var el = seg.el;                                                                                                     // 3948
		var event = seg.event;                                                                                               // 3949
		var dropLocation;                                                                                                    // 3950
                                                                                                                       // 3951
		// A clone of the original element that will move with the mouse                                                     // 3952
		var mouseFollower = new MouseFollower(seg.el, {                                                                      // 3953
			parentEl: view.el,                                                                                                  // 3954
			opacity: view.opt('dragOpacity'),                                                                                   // 3955
			revertDuration: view.opt('dragRevertDuration'),                                                                     // 3956
			zIndex: 2 // one above the .fc-view                                                                                 // 3957
		});                                                                                                                  // 3958
                                                                                                                       // 3959
		// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3960
		// of the view.                                                                                                      // 3961
		var dragListener = new CellDragListener(view.coordMap, {                                                             // 3962
			distance: 5,                                                                                                        // 3963
			scroll: view.opt('dragScroll'),                                                                                     // 3964
			subjectEl: el,                                                                                                      // 3965
			subjectCenter: true,                                                                                                // 3966
			listenStart: function(ev) {                                                                                         // 3967
				mouseFollower.hide(); // don't show until we know this is a real drag                                              // 3968
				mouseFollower.start(ev);                                                                                           // 3969
			},                                                                                                                  // 3970
			dragStart: function(ev) {                                                                                           // 3971
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3972
				_this.segDragStart(seg, ev);                                                                                       // 3973
				view.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3974
			},                                                                                                                  // 3975
			cellOver: function(cell, isOrig, origCell) {                                                                        // 3976
                                                                                                                       // 3977
				// starting cell could be forced (DayGrid.limit)                                                                   // 3978
				if (seg.cell) {                                                                                                    // 3979
					origCell = seg.cell;                                                                                              // 3980
				}                                                                                                                  // 3981
                                                                                                                       // 3982
				dropLocation = _this.computeEventDrop(origCell, cell, event);                                                      // 3983
                                                                                                                       // 3984
				if (dropLocation && !calendar.isEventRangeAllowed(dropLocation, event)) {                                          // 3985
					disableCursor();                                                                                                  // 3986
					dropLocation = null;                                                                                              // 3987
				}                                                                                                                  // 3988
                                                                                                                       // 3989
				// if a valid drop location, have the subclass render a visual indication                                          // 3990
				if (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3991
					mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own                     // 3992
				}                                                                                                                  // 3993
				else {                                                                                                             // 3994
					mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3995
				}                                                                                                                  // 3996
                                                                                                                       // 3997
				if (isOrig) {                                                                                                      // 3998
					dropLocation = null; // needs to have moved cells to be a valid drop                                              // 3999
				}                                                                                                                  // 4000
			},                                                                                                                  // 4001
			cellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 4002
				view.unrenderDrag(); // unrender whatever was done in renderDrag                                                   // 4003
				mouseFollower.show(); // show in case we are moving out of all cells                                               // 4004
				dropLocation = null;                                                                                               // 4005
			},                                                                                                                  // 4006
			cellDone: function() { // Called after a cellOut OR before a dragStop                                               // 4007
				enableCursor();                                                                                                    // 4008
			},                                                                                                                  // 4009
			dragStop: function(ev) {                                                                                            // 4010
				// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 4011
				mouseFollower.stop(!dropLocation, function() {                                                                     // 4012
					view.unrenderDrag();                                                                                              // 4013
					view.showEvent(event);                                                                                            // 4014
					_this.segDragStop(seg, ev);                                                                                       // 4015
                                                                                                                       // 4016
					if (dropLocation) {                                                                                               // 4017
						view.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 4018
					}                                                                                                                 // 4019
				});                                                                                                                // 4020
			},                                                                                                                  // 4021
			listenStop: function() {                                                                                            // 4022
				mouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 4023
			}                                                                                                                   // 4024
		});                                                                                                                  // 4025
                                                                                                                       // 4026
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4027
	},                                                                                                                    // 4028
                                                                                                                       // 4029
                                                                                                                       // 4030
	// Called before event segment dragging starts                                                                        // 4031
	segDragStart: function(seg, ev) {                                                                                     // 4032
		this.isDraggingSeg = true;                                                                                           // 4033
		this.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 4034
	},                                                                                                                    // 4035
                                                                                                                       // 4036
                                                                                                                       // 4037
	// Called after event segment dragging stops                                                                          // 4038
	segDragStop: function(seg, ev) {                                                                                      // 4039
		this.isDraggingSeg = false;                                                                                          // 4040
		this.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 4041
	},                                                                                                                    // 4042
                                                                                                                       // 4043
                                                                                                                       // 4044
	// Given the cell an event drag began, and the cell event was dropped, calculates the new start/end/allDay            // 4045
	// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 4046
	// A falsy returned value indicates an invalid drop.                                                                  // 4047
	computeEventDrop: function(startCell, endCell, event) {                                                               // 4048
		var calendar = this.view.calendar;                                                                                   // 4049
		var dragStart = startCell.start;                                                                                     // 4050
		var dragEnd = endCell.start;                                                                                         // 4051
		var delta;                                                                                                           // 4052
		var dropLocation;                                                                                                    // 4053
                                                                                                                       // 4054
		if (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 4055
			delta = this.diffDates(dragEnd, dragStart);                                                                         // 4056
                                                                                                                       // 4057
			// if an all-day event was in a timed area and it was dragged to a different time,                                  // 4058
			// guarantee an end and adjust start/end to have times                                                              // 4059
			if (event.allDay && durationHasTime(delta)) {                                                                       // 4060
				dropLocation = {                                                                                                   // 4061
					start: event.start.clone(),                                                                                       // 4062
					end: calendar.getEventEnd(event), // will be an ambig day                                                         // 4063
					allDay: false // for normalizeEventRangeTimes                                                                     // 4064
				};                                                                                                                 // 4065
				calendar.normalizeEventRangeTimes(dropLocation);                                                                   // 4066
			}                                                                                                                   // 4067
			// othewise, work off existing values                                                                               // 4068
			else {                                                                                                              // 4069
				dropLocation = {                                                                                                   // 4070
					start: event.start.clone(),                                                                                       // 4071
					end: event.end ? event.end.clone() : null,                                                                        // 4072
					allDay: event.allDay // keep it the same                                                                          // 4073
				};                                                                                                                 // 4074
			}                                                                                                                   // 4075
                                                                                                                       // 4076
			dropLocation.start.add(delta);                                                                                      // 4077
			if (dropLocation.end) {                                                                                             // 4078
				dropLocation.end.add(delta);                                                                                       // 4079
			}                                                                                                                   // 4080
		}                                                                                                                    // 4081
		else {                                                                                                               // 4082
			// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 4083
			dropLocation = {                                                                                                    // 4084
				start: dragEnd.clone(),                                                                                            // 4085
				end: null, // end should be cleared                                                                                // 4086
				allDay: !dragEnd.hasTime()                                                                                         // 4087
			};                                                                                                                  // 4088
		}                                                                                                                    // 4089
                                                                                                                       // 4090
		return dropLocation;                                                                                                 // 4091
	},                                                                                                                    // 4092
                                                                                                                       // 4093
                                                                                                                       // 4094
	// Utility for apply dragOpacity to a jQuery set                                                                      // 4095
	applyDragOpacity: function(els) {                                                                                     // 4096
		var opacity = this.view.opt('dragOpacity');                                                                          // 4097
                                                                                                                       // 4098
		if (opacity != null) {                                                                                               // 4099
			els.each(function(i, node) {                                                                                        // 4100
				// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 4101
				// In IE8, a helper element will disappears if there's a filter.                                                   // 4102
				node.style.opacity = opacity;                                                                                      // 4103
			});                                                                                                                 // 4104
		}                                                                                                                    // 4105
	},                                                                                                                    // 4106
                                                                                                                       // 4107
                                                                                                                       // 4108
	/* External Element Dragging                                                                                          // 4109
	------------------------------------------------------------------------------------------------------------------*/  // 4110
                                                                                                                       // 4111
                                                                                                                       // 4112
	// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 4113
	externalDragStart: function(ev, ui) {                                                                                 // 4114
		var view = this.view;                                                                                                // 4115
		var el;                                                                                                              // 4116
		var accept;                                                                                                          // 4117
                                                                                                                       // 4118
		if (view.opt('droppable')) { // only listen if this setting is on                                                    // 4119
			el = $((ui ? ui.item : null) || ev.target);                                                                         // 4120
                                                                                                                       // 4121
			// Test that the dragged element passes the dropAccept selector or filter function.                                 // 4122
			// FYI, the default is "*" (matches all)                                                                            // 4123
			accept = view.opt('dropAccept');                                                                                    // 4124
			if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 4125
				if (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 4126
					this.listenToExternalDrag(el, ev, ui);                                                                            // 4127
				}                                                                                                                  // 4128
			}                                                                                                                   // 4129
		}                                                                                                                    // 4130
	},                                                                                                                    // 4131
                                                                                                                       // 4132
                                                                                                                       // 4133
	// Called when a jQuery UI drag starts and it needs to be monitored for cell dropping                                 // 4134
	listenToExternalDrag: function(el, ev, ui) {                                                                          // 4135
		var _this = this;                                                                                                    // 4136
		var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 4137
		var dragListener;                                                                                                    // 4138
		var dropLocation; // a null value signals an unsuccessful drag                                                       // 4139
                                                                                                                       // 4140
		// listener that tracks mouse movement over date-associated pixel regions                                            // 4141
		dragListener = new CellDragListener(this.coordMap, {                                                                 // 4142
			listenStart: function() {                                                                                           // 4143
				_this.isDraggingExternal = true;                                                                                   // 4144
			},                                                                                                                  // 4145
			cellOver: function(cell) {                                                                                          // 4146
				dropLocation = _this.computeExternalDrop(cell, meta);                                                              // 4147
				if (dropLocation) {                                                                                                // 4148
					_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 4149
				}                                                                                                                  // 4150
				else { // invalid drop cell                                                                                        // 4151
					disableCursor();                                                                                                  // 4152
				}                                                                                                                  // 4153
			},                                                                                                                  // 4154
			cellOut: function() {                                                                                               // 4155
				dropLocation = null; // signal unsuccessful                                                                        // 4156
				_this.unrenderDrag();                                                                                              // 4157
				enableCursor();                                                                                                    // 4158
			},                                                                                                                  // 4159
			dragStop: function() {                                                                                              // 4160
				_this.unrenderDrag();                                                                                              // 4161
				enableCursor();                                                                                                    // 4162
                                                                                                                       // 4163
				if (dropLocation) { // element was dropped on a valid date/time cell                                               // 4164
					_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 4165
				}                                                                                                                  // 4166
			},                                                                                                                  // 4167
			listenStop: function() {                                                                                            // 4168
				_this.isDraggingExternal = false;                                                                                  // 4169
			}                                                                                                                   // 4170
		});                                                                                                                  // 4171
                                                                                                                       // 4172
		dragListener.startDrag(ev); // start listening immediately                                                           // 4173
	},                                                                                                                    // 4174
                                                                                                                       // 4175
                                                                                                                       // 4176
	// Given a cell to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),    // 4177
	// returns start/end dates for the event that would result from the hypothetical drop. end might be null.             // 4178
	// Returning a null value signals an invalid drop cell.                                                               // 4179
	computeExternalDrop: function(cell, meta) {                                                                           // 4180
		var dropLocation = {                                                                                                 // 4181
			start: cell.start.clone(),                                                                                          // 4182
			end: null                                                                                                           // 4183
		};                                                                                                                   // 4184
                                                                                                                       // 4185
		// if dropped on an all-day cell, and element's metadata specified a time, set it                                    // 4186
		if (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 4187
			dropLocation.start.time(meta.startTime);                                                                            // 4188
		}                                                                                                                    // 4189
                                                                                                                       // 4190
		if (meta.duration) {                                                                                                 // 4191
			dropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 4192
		}                                                                                                                    // 4193
                                                                                                                       // 4194
		if (!this.view.calendar.isExternalDropRangeAllowed(dropLocation, meta.eventProps)) {                                 // 4195
			return null;                                                                                                        // 4196
		}                                                                                                                    // 4197
                                                                                                                       // 4198
		return dropLocation;                                                                                                 // 4199
	},                                                                                                                    // 4200
                                                                                                                       // 4201
                                                                                                                       // 4202
                                                                                                                       // 4203
	/* Drag Rendering (for both events and an external elements)                                                          // 4204
	------------------------------------------------------------------------------------------------------------------*/  // 4205
                                                                                                                       // 4206
                                                                                                                       // 4207
	// Renders a visual indication of an event or external element being dragged.                                         // 4208
	// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 4209
	// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 4210
	// A truthy returned value indicates this method has rendered a helper element.                                       // 4211
	renderDrag: function(dropLocation, seg) {                                                                             // 4212
		// subclasses must implement                                                                                         // 4213
	},                                                                                                                    // 4214
                                                                                                                       // 4215
                                                                                                                       // 4216
	// Unrenders a visual indication of an event or external element being dragged                                        // 4217
	unrenderDrag: function() {                                                                                            // 4218
		// subclasses must implement                                                                                         // 4219
	},                                                                                                                    // 4220
                                                                                                                       // 4221
                                                                                                                       // 4222
	/* Resizing                                                                                                           // 4223
	------------------------------------------------------------------------------------------------------------------*/  // 4224
                                                                                                                       // 4225
                                                                                                                       // 4226
	// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 4227
	// Generic enough to work with any type of Grid.                                                                      // 4228
	segResizeMousedown: function(seg, ev, isStart) {                                                                      // 4229
		var _this = this;                                                                                                    // 4230
		var view = this.view;                                                                                                // 4231
		var calendar = view.calendar;                                                                                        // 4232
		var el = seg.el;                                                                                                     // 4233
		var event = seg.event;                                                                                               // 4234
		var eventEnd = calendar.getEventEnd(event);                                                                          // 4235
		var dragListener;                                                                                                    // 4236
		var resizeLocation; // falsy if invalid resize                                                                       // 4237
                                                                                                                       // 4238
		// Tracks mouse movement over the *grid's* coordinate map                                                            // 4239
		dragListener = new CellDragListener(this.coordMap, {                                                                 // 4240
			distance: 5,                                                                                                        // 4241
			scroll: view.opt('dragScroll'),                                                                                     // 4242
			subjectEl: el,                                                                                                      // 4243
			dragStart: function(ev) {                                                                                           // 4244
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 4245
				_this.segResizeStart(seg, ev);                                                                                     // 4246
			},                                                                                                                  // 4247
			cellOver: function(cell, isOrig, origCell) {                                                                        // 4248
				resizeLocation = isStart ?                                                                                         // 4249
					_this.computeEventStartResize(origCell, cell, event) :                                                            // 4250
					_this.computeEventEndResize(origCell, cell, event);                                                               // 4251
                                                                                                                       // 4252
				if (resizeLocation) {                                                                                              // 4253
					if (!calendar.isEventRangeAllowed(resizeLocation, event)) {                                                       // 4254
						disableCursor();                                                                                                 // 4255
						resizeLocation = null;                                                                                           // 4256
					}                                                                                                                 // 4257
					// no change? (TODO: how does this work with timezones?)                                                          // 4258
					else if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4259
						resizeLocation = null;                                                                                           // 4260
					}                                                                                                                 // 4261
				}                                                                                                                  // 4262
                                                                                                                       // 4263
				if (resizeLocation) {                                                                                              // 4264
					view.hideEvent(event);                                                                                            // 4265
					_this.renderEventResize(resizeLocation, seg);                                                                     // 4266
				}                                                                                                                  // 4267
			},                                                                                                                  // 4268
			cellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 4269
				resizeLocation = null;                                                                                             // 4270
			},                                                                                                                  // 4271
			cellDone: function() { // resets the rendering to show the original event                                           // 4272
				_this.unrenderEventResize();                                                                                       // 4273
				view.showEvent(event);                                                                                             // 4274
				enableCursor();                                                                                                    // 4275
			},                                                                                                                  // 4276
			dragStop: function(ev) {                                                                                            // 4277
				_this.segResizeStop(seg, ev);                                                                                      // 4278
                                                                                                                       // 4279
				if (resizeLocation) { // valid date to resize to?                                                                  // 4280
					view.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4281
				}                                                                                                                  // 4282
			}                                                                                                                   // 4283
		});                                                                                                                  // 4284
                                                                                                                       // 4285
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4286
	},                                                                                                                    // 4287
                                                                                                                       // 4288
                                                                                                                       // 4289
	// Called before event segment resizing starts                                                                        // 4290
	segResizeStart: function(seg, ev) {                                                                                   // 4291
		this.isResizingSeg = true;                                                                                           // 4292
		this.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4293
	},                                                                                                                    // 4294
                                                                                                                       // 4295
                                                                                                                       // 4296
	// Called after event segment resizing stops                                                                          // 4297
	segResizeStop: function(seg, ev) {                                                                                    // 4298
		this.isResizingSeg = false;                                                                                          // 4299
		this.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4300
	},                                                                                                                    // 4301
                                                                                                                       // 4302
                                                                                                                       // 4303
	// Returns new date-information for an event segment being resized from its start                                     // 4304
	computeEventStartResize: function(startCell, endCell, event) {                                                        // 4305
		return this.computeEventResize('start', startCell, endCell, event);                                                  // 4306
	},                                                                                                                    // 4307
                                                                                                                       // 4308
                                                                                                                       // 4309
	// Returns new date-information for an event segment being resized from its end                                       // 4310
	computeEventEndResize: function(startCell, endCell, event) {                                                          // 4311
		return this.computeEventResize('end', startCell, endCell, event);                                                    // 4312
	},                                                                                                                    // 4313
                                                                                                                       // 4314
                                                                                                                       // 4315
	// Returns new date-information for an event segment being resized from its start OR end                              // 4316
	// `type` is either 'start' or 'end'                                                                                  // 4317
	computeEventResize: function(type, startCell, endCell, event) {                                                       // 4318
		var calendar = this.view.calendar;                                                                                   // 4319
		var delta = this.diffDates(endCell[type], startCell[type]);                                                          // 4320
		var range;                                                                                                           // 4321
		var defaultDuration;                                                                                                 // 4322
                                                                                                                       // 4323
		// build original values to work from, guaranteeing a start and end                                                  // 4324
		range = {                                                                                                            // 4325
			start: event.start.clone(),                                                                                         // 4326
			end: calendar.getEventEnd(event),                                                                                   // 4327
			allDay: event.allDay                                                                                                // 4328
		};                                                                                                                   // 4329
                                                                                                                       // 4330
		// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4331
		if (range.allDay && durationHasTime(delta)) {                                                                        // 4332
			range.allDay = false;                                                                                               // 4333
			calendar.normalizeEventRangeTimes(range);                                                                           // 4334
		}                                                                                                                    // 4335
                                                                                                                       // 4336
		range[type].add(delta); // apply delta to start or end                                                               // 4337
                                                                                                                       // 4338
		// if the event was compressed too small, find a new reasonable duration for it                                      // 4339
		if (!range.start.isBefore(range.end)) {                                                                              // 4340
                                                                                                                       // 4341
			defaultDuration = event.allDay ?                                                                                    // 4342
				calendar.defaultAllDayEventDuration :                                                                              // 4343
				calendar.defaultTimedEventDuration;                                                                                // 4344
                                                                                                                       // 4345
			// between the cell's duration and the event's default duration, use the smaller of the two.                        // 4346
			// example: if year-length slots, and compressed to one slot, we don't want the event to be a year long             // 4347
			if (this.cellDuration && this.cellDuration < defaultDuration) {                                                     // 4348
				defaultDuration = this.cellDuration;                                                                               // 4349
			}                                                                                                                   // 4350
                                                                                                                       // 4351
			if (type == 'start') { // resizing the start?                                                                       // 4352
				range.start = range.end.clone().subtract(defaultDuration);                                                         // 4353
			}                                                                                                                   // 4354
			else { // resizing the end?                                                                                         // 4355
				range.end = range.start.clone().add(defaultDuration);                                                              // 4356
			}                                                                                                                   // 4357
		}                                                                                                                    // 4358
                                                                                                                       // 4359
		return range;                                                                                                        // 4360
	},                                                                                                                    // 4361
                                                                                                                       // 4362
                                                                                                                       // 4363
	// Renders a visual indication of an event being resized.                                                             // 4364
	// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4365
	renderEventResize: function(range, seg) {                                                                             // 4366
		// subclasses must implement                                                                                         // 4367
	},                                                                                                                    // 4368
                                                                                                                       // 4369
                                                                                                                       // 4370
	// Unrenders a visual indication of an event being resized.                                                           // 4371
	unrenderEventResize: function() {                                                                                     // 4372
		// subclasses must implement                                                                                         // 4373
	},                                                                                                                    // 4374
                                                                                                                       // 4375
                                                                                                                       // 4376
	/* Rendering Utils                                                                                                    // 4377
	------------------------------------------------------------------------------------------------------------------*/  // 4378
                                                                                                                       // 4379
                                                                                                                       // 4380
	// Compute the text that should be displayed on an event's element.                                                   // 4381
	// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4382
	// If event times are disabled, or the event has no time, will return a blank string.                                 // 4383
	// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4384
	// and displayEnd will default to the displayEventEnd setting.                                                        // 4385
	getEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4386
                                                                                                                       // 4387
		if (formatStr == null) {                                                                                             // 4388
			formatStr = this.eventTimeFormat;                                                                                   // 4389
		}                                                                                                                    // 4390
                                                                                                                       // 4391
		if (displayEnd == null) {                                                                                            // 4392
			displayEnd = this.displayEventEnd;                                                                                  // 4393
		}                                                                                                                    // 4394
                                                                                                                       // 4395
		if (this.displayEventTime && range.start.hasTime()) {                                                                // 4396
			if (displayEnd && range.end) {                                                                                      // 4397
				return this.view.formatRange(range, formatStr);                                                                    // 4398
			}                                                                                                                   // 4399
			else {                                                                                                              // 4400
				return range.start.format(formatStr);                                                                              // 4401
			}                                                                                                                   // 4402
		}                                                                                                                    // 4403
                                                                                                                       // 4404
		return '';                                                                                                           // 4405
	},                                                                                                                    // 4406
                                                                                                                       // 4407
                                                                                                                       // 4408
	// Generic utility for generating the HTML classNames for an event segment's element                                  // 4409
	getSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4410
		var event = seg.event;                                                                                               // 4411
		var classes = [                                                                                                      // 4412
			'fc-event',                                                                                                         // 4413
			seg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4414
			seg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4415
		].concat(                                                                                                            // 4416
			event.className,                                                                                                    // 4417
			event.source ? event.source.className : []                                                                          // 4418
		);                                                                                                                   // 4419
                                                                                                                       // 4420
		if (isDraggable) {                                                                                                   // 4421
			classes.push('fc-draggable');                                                                                       // 4422
		}                                                                                                                    // 4423
		if (isResizable) {                                                                                                   // 4424
			classes.push('fc-resizable');                                                                                       // 4425
		}                                                                                                                    // 4426
                                                                                                                       // 4427
		return classes;                                                                                                      // 4428
	},                                                                                                                    // 4429
                                                                                                                       // 4430
                                                                                                                       // 4431
	// Utility for generating event skin-related CSS properties                                                           // 4432
	getEventSkinCss: function(event) {                                                                                    // 4433
		var view = this.view;                                                                                                // 4434
		var source = event.source || {};                                                                                     // 4435
		var eventColor = event.color;                                                                                        // 4436
		var sourceColor = source.color;                                                                                      // 4437
		var optionColor = view.opt('eventColor');                                                                            // 4438
                                                                                                                       // 4439
		return {                                                                                                             // 4440
			'background-color':                                                                                                 // 4441
				event.backgroundColor ||                                                                                           // 4442
				eventColor ||                                                                                                      // 4443
				source.backgroundColor ||                                                                                          // 4444
				sourceColor ||                                                                                                     // 4445
				view.opt('eventBackgroundColor') ||                                                                                // 4446
				optionColor,                                                                                                       // 4447
			'border-color':                                                                                                     // 4448
				event.borderColor ||                                                                                               // 4449
				eventColor ||                                                                                                      // 4450
				source.borderColor ||                                                                                              // 4451
				sourceColor ||                                                                                                     // 4452
				view.opt('eventBorderColor') ||                                                                                    // 4453
				optionColor,                                                                                                       // 4454
			color:                                                                                                              // 4455
				event.textColor ||                                                                                                 // 4456
				source.textColor ||                                                                                                // 4457
				view.opt('eventTextColor')                                                                                         // 4458
		};                                                                                                                   // 4459
	},                                                                                                                    // 4460
                                                                                                                       // 4461
                                                                                                                       // 4462
	/* Converting events -> ranges -> segs                                                                                // 4463
	------------------------------------------------------------------------------------------------------------------*/  // 4464
                                                                                                                       // 4465
                                                                                                                       // 4466
	// Converts an array of event objects into an array of event segment objects.                                         // 4467
	// A custom `rangeToSegsFunc` may be given for arbitrarily slicing up events.                                         // 4468
	// Doesn't guarantee an order for the resulting array.                                                                // 4469
	eventsToSegs: function(events, rangeToSegsFunc) {                                                                     // 4470
		var eventRanges = this.eventsToRanges(events);                                                                       // 4471
		var segs = [];                                                                                                       // 4472
		var i;                                                                                                               // 4473
                                                                                                                       // 4474
		for (i = 0; i < eventRanges.length; i++) {                                                                           // 4475
			segs.push.apply(                                                                                                    // 4476
				segs,                                                                                                              // 4477
				this.eventRangeToSegs(eventRanges[i], rangeToSegsFunc)                                                             // 4478
			);                                                                                                                  // 4479
		}                                                                                                                    // 4480
                                                                                                                       // 4481
		return segs;                                                                                                         // 4482
	},                                                                                                                    // 4483
                                                                                                                       // 4484
                                                                                                                       // 4485
	// Converts an array of events into an array of "range" objects.                                                      // 4486
	// A "range" object is a plain object with start/end properties denoting the time it covers. Also an event property.  // 4487
	// For "normal" events, this will be identical to the event's start/end, but for "inverse-background" events,         // 4488
	// will create an array of ranges that span the time *not* covered by the given event.                                // 4489
	// Doesn't guarantee an order for the resulting array.                                                                // 4490
	eventsToRanges: function(events) {                                                                                    // 4491
		var _this = this;                                                                                                    // 4492
		var eventsById = groupEventsById(events);                                                                            // 4493
		var ranges = [];                                                                                                     // 4494
                                                                                                                       // 4495
		// group by ID so that related inverse-background events can be rendered together                                    // 4496
		$.each(eventsById, function(id, eventGroup) {                                                                        // 4497
			if (eventGroup.length) {                                                                                            // 4498
				ranges.push.apply(                                                                                                 // 4499
					ranges,                                                                                                           // 4500
					isInverseBgEvent(eventGroup[0]) ?                                                                                 // 4501
						_this.eventsToInverseRanges(eventGroup) :                                                                        // 4502
						_this.eventsToNormalRanges(eventGroup)                                                                           // 4503
				);                                                                                                                 // 4504
			}                                                                                                                   // 4505
		});                                                                                                                  // 4506
                                                                                                                       // 4507
		return ranges;                                                                                                       // 4508
	},                                                                                                                    // 4509
                                                                                                                       // 4510
                                                                                                                       // 4511
	// Converts an array of "normal" events (not inverted rendering) into a parallel array of ranges                      // 4512
	eventsToNormalRanges: function(events) {                                                                              // 4513
		var calendar = this.view.calendar;                                                                                   // 4514
		var ranges = [];                                                                                                     // 4515
		var i, event;                                                                                                        // 4516
		var eventStart, eventEnd;                                                                                            // 4517
                                                                                                                       // 4518
		for (i = 0; i < events.length; i++) {                                                                                // 4519
			event = events[i];                                                                                                  // 4520
                                                                                                                       // 4521
			// make copies and normalize by stripping timezone                                                                  // 4522
			eventStart = event.start.clone().stripZone();                                                                       // 4523
			eventEnd = calendar.getEventEnd(event).stripZone();                                                                 // 4524
                                                                                                                       // 4525
			ranges.push({                                                                                                       // 4526
				event: event,                                                                                                      // 4527
				start: eventStart,                                                                                                 // 4528
				end: eventEnd,                                                                                                     // 4529
				eventStartMS: +eventStart,                                                                                         // 4530
				eventDurationMS: eventEnd - eventStart                                                                             // 4531
			});                                                                                                                 // 4532
		}                                                                                                                    // 4533
                                                                                                                       // 4534
		return ranges;                                                                                                       // 4535
	},                                                                                                                    // 4536
                                                                                                                       // 4537
                                                                                                                       // 4538
	// Converts an array of events, with inverse-background rendering, into an array of range objects.                    // 4539
	// The range objects will cover all the time NOT covered by the events.                                               // 4540
	eventsToInverseRanges: function(events) {                                                                             // 4541
		var view = this.view;                                                                                                // 4542
		var viewStart = view.start.clone().stripZone(); // normalize timezone                                                // 4543
		var viewEnd = view.end.clone().stripZone(); // normalize timezone                                                    // 4544
		var normalRanges = this.eventsToNormalRanges(events); // will give us normalized dates we can use w/o copies         // 4545
		var inverseRanges = [];                                                                                              // 4546
		var event0 = events[0]; // assign this to each range's `.event`                                                      // 4547
		var start = viewStart; // the end of the previous range. the start of the new range                                  // 4548
		var i, normalRange;                                                                                                  // 4549
                                                                                                                       // 4550
		// ranges need to be in order. required for our date-walking algorithm                                               // 4551
		normalRanges.sort(compareNormalRanges);                                                                              // 4552
                                                                                                                       // 4553
		for (i = 0; i < normalRanges.length; i++) {                                                                          // 4554
			normalRange = normalRanges[i];                                                                                      // 4555
                                                                                                                       // 4556
			// add the span of time before the event (if there is any)                                                          // 4557
			if (normalRange.start > start) { // compare millisecond time (skip any ambig logic)                                 // 4558
				inverseRanges.push({                                                                                               // 4559
					event: event0,                                                                                                    // 4560
					start: start,                                                                                                     // 4561
					end: normalRange.start                                                                                            // 4562
				});                                                                                                                // 4563
			}                                                                                                                   // 4564
                                                                                                                       // 4565
			start = normalRange.end;                                                                                            // 4566
		}                                                                                                                    // 4567
                                                                                                                       // 4568
		// add the span of time after the last event (if there is any)                                                       // 4569
		if (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4570
			inverseRanges.push({                                                                                                // 4571
				event: event0,                                                                                                     // 4572
				start: start,                                                                                                      // 4573
				end: viewEnd                                                                                                       // 4574
			});                                                                                                                 // 4575
		}                                                                                                                    // 4576
                                                                                                                       // 4577
		return inverseRanges;                                                                                                // 4578
	},                                                                                                                    // 4579
                                                                                                                       // 4580
                                                                                                                       // 4581
	// Slices the given event range into one or more segment objects.                                                     // 4582
	// A `rangeToSegsFunc` custom slicing function can be given.                                                          // 4583
	eventRangeToSegs: function(eventRange, rangeToSegsFunc) {                                                             // 4584
		var segs;                                                                                                            // 4585
		var i, seg;                                                                                                          // 4586
                                                                                                                       // 4587
		eventRange = this.view.calendar.ensureVisibleEventRange(eventRange);                                                 // 4588
                                                                                                                       // 4589
		if (rangeToSegsFunc) {                                                                                               // 4590
			segs = rangeToSegsFunc(eventRange);                                                                                 // 4591
		}                                                                                                                    // 4592
		else {                                                                                                               // 4593
			segs = this.rangeToSegs(eventRange); // defined by the subclass                                                     // 4594
		}                                                                                                                    // 4595
                                                                                                                       // 4596
		for (i = 0; i < segs.length; i++) {                                                                                  // 4597
			seg = segs[i];                                                                                                      // 4598
			seg.event = eventRange.event;                                                                                       // 4599
			seg.eventStartMS = eventRange.eventStartMS;                                                                         // 4600
			seg.eventDurationMS = eventRange.eventDurationMS;                                                                   // 4601
		}                                                                                                                    // 4602
                                                                                                                       // 4603
		return segs;                                                                                                         // 4604
	},                                                                                                                    // 4605
                                                                                                                       // 4606
                                                                                                                       // 4607
	sortSegs: function(segs) {                                                                                            // 4608
		segs.sort(proxy(this, 'compareSegs'));                                                                               // 4609
	},                                                                                                                    // 4610
                                                                                                                       // 4611
                                                                                                                       // 4612
	// A cmp function for determining which segments should take visual priority                                          // 4613
	// DOES NOT WORK ON INVERTED BACKGROUND EVENTS because they have no eventStartMS/eventDurationMS                      // 4614
	compareSegs: function(seg1, seg2) {                                                                                   // 4615
		return seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                           // 4616
			seg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                       // 4617
			seg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                    // 4618
			compareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);                                             // 4619
	}                                                                                                                     // 4620
                                                                                                                       // 4621
});                                                                                                                    // 4622
                                                                                                                       // 4623
                                                                                                                       // 4624
/* Utilities                                                                                                           // 4625
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4627
                                                                                                                       // 4628
function isBgEvent(event) { // returns true if background OR inverse-background                                        // 4629
	var rendering = getEventRendering(event);                                                                             // 4630
	return rendering === 'background' || rendering === 'inverse-background';                                              // 4631
}                                                                                                                      // 4632
                                                                                                                       // 4633
                                                                                                                       // 4634
function isInverseBgEvent(event) {                                                                                     // 4635
	return getEventRendering(event) === 'inverse-background';                                                             // 4636
}                                                                                                                      // 4637
                                                                                                                       // 4638
                                                                                                                       // 4639
function getEventRendering(event) {                                                                                    // 4640
	return firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4641
}                                                                                                                      // 4642
                                                                                                                       // 4643
                                                                                                                       // 4644
function groupEventsById(events) {                                                                                     // 4645
	var eventsById = {};                                                                                                  // 4646
	var i, event;                                                                                                         // 4647
                                                                                                                       // 4648
	for (i = 0; i < events.length; i++) {                                                                                 // 4649
		event = events[i];                                                                                                   // 4650
		(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4651
	}                                                                                                                     // 4652
                                                                                                                       // 4653
	return eventsById;                                                                                                    // 4654
}                                                                                                                      // 4655
                                                                                                                       // 4656
                                                                                                                       // 4657
// A cmp function for determining which non-inverted "ranges" (see above) happen earlier                               // 4658
function compareNormalRanges(range1, range2) {                                                                         // 4659
	return range1.eventStartMS - range2.eventStartMS; // earlier ranges go first                                          // 4660
}                                                                                                                      // 4661
                                                                                                                       // 4662
                                                                                                                       // 4663
/* External-Dragging-Element Data                                                                                      // 4664
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4666
// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4667
// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4668
fc.dataAttrPrefix = '';                                                                                                // 4669
                                                                                                                       // 4670
// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4671
// to be used for Event Object creation.                                                                               // 4672
// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4673
function getDraggedElMeta(el) {                                                                                        // 4674
	var prefix = fc.dataAttrPrefix;                                                                                       // 4675
	var eventProps; // properties for creating the event, not related to date/time                                        // 4676
	var startTime; // a Duration                                                                                          // 4677
	var duration;                                                                                                         // 4678
	var stick;                                                                                                            // 4679
                                                                                                                       // 4680
	if (prefix) { prefix += '-'; }                                                                                        // 4681
	eventProps = el.data(prefix + 'event') || null;                                                                       // 4682
                                                                                                                       // 4683
	if (eventProps) {                                                                                                     // 4684
		if (typeof eventProps === 'object') {                                                                                // 4685
			eventProps = $.extend({}, eventProps); // make a copy                                                               // 4686
		}                                                                                                                    // 4687
		else { // something like 1 or true. still signal event creation                                                      // 4688
			eventProps = {};                                                                                                    // 4689
		}                                                                                                                    // 4690
                                                                                                                       // 4691
		// pluck special-cased date/time properties                                                                          // 4692
		startTime = eventProps.start;                                                                                        // 4693
		if (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4694
		duration = eventProps.duration;                                                                                      // 4695
		stick = eventProps.stick;                                                                                            // 4696
		delete eventProps.start;                                                                                             // 4697
		delete eventProps.time;                                                                                              // 4698
		delete eventProps.duration;                                                                                          // 4699
		delete eventProps.stick;                                                                                             // 4700
	}                                                                                                                     // 4701
                                                                                                                       // 4702
	// fallback to standalone attribute values for each of the date/time properties                                       // 4703
	if (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4704
	if (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4705
	if (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4706
	if (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4707
                                                                                                                       // 4708
	// massage into correct data types                                                                                    // 4709
	startTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4710
	duration = duration != null ? moment.duration(duration) : null;                                                       // 4711
	stick = Boolean(stick);                                                                                               // 4712
                                                                                                                       // 4713
	return { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4714
}                                                                                                                      // 4715
                                                                                                                       // 4716
                                                                                                                       // 4717
;;                                                                                                                     // 4718
                                                                                                                       // 4719
/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 4720
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4722
var DayGrid = Grid.extend({                                                                                            // 4723
                                                                                                                       // 4724
	numbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 4725
	bottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 4726
	breakOnWeeks: null, // should create a new row for each week? set by outside view                                     // 4727
                                                                                                                       // 4728
	cellDates: null, // flat chronological array of each cell's dates                                                     // 4729
	dayToCellOffsets: null, // maps days offsets from grid's start date, to cell offsets                                  // 4730
                                                                                                                       // 4731
	rowEls: null, // set of fake row elements                                                                             // 4732
	dayEls: null, // set of whole-day elements comprising the row's background                                            // 4733
	helperEls: null, // set of cell skeleton elements for rendering the mock event "helper"                               // 4734
                                                                                                                       // 4735
                                                                                                                       // 4736
	constructor: function() {                                                                                             // 4737
		Grid.apply(this, arguments);                                                                                         // 4738
                                                                                                                       // 4739
		this.cellDuration = moment.duration(1, 'day'); // for Grid system                                                    // 4740
	},                                                                                                                    // 4741
                                                                                                                       // 4742
                                                                                                                       // 4743
	// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 4744
	// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 4745
	// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 4746
	renderDates: function(isRigid) {                                                                                      // 4747
		var view = this.view;                                                                                                // 4748
		var rowCnt = this.rowCnt;                                                                                            // 4749
		var colCnt = this.colCnt;                                                                                            // 4750
		var cellCnt = rowCnt * colCnt;                                                                                       // 4751
		var html = '';                                                                                                       // 4752
		var row;                                                                                                             // 4753
		var i, cell;                                                                                                         // 4754
                                                                                                                       // 4755
		for (row = 0; row < rowCnt; row++) {                                                                                 // 4756
			html += this.dayRowHtml(row, isRigid);                                                                              // 4757
		}                                                                                                                    // 4758
		this.el.html(html);                                                                                                  // 4759
                                                                                                                       // 4760
		this.rowEls = this.el.find('.fc-row');                                                                               // 4761
		this.dayEls = this.el.find('.fc-day');                                                                               // 4762
                                                                                                                       // 4763
		// trigger dayRender with each cell's element                                                                        // 4764
		for (i = 0; i < cellCnt; i++) {                                                                                      // 4765
			cell = this.getCell(i);                                                                                             // 4766
			view.trigger('dayRender', null, cell.start, this.dayEls.eq(i));                                                     // 4767
		}                                                                                                                    // 4768
	},                                                                                                                    // 4769
                                                                                                                       // 4770
                                                                                                                       // 4771
	unrenderDates: function() {                                                                                           // 4772
		this.removeSegPopover();                                                                                             // 4773
	},                                                                                                                    // 4774
                                                                                                                       // 4775
                                                                                                                       // 4776
	renderBusinessHours: function() {                                                                                     // 4777
		var events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 4778
		var segs = this.eventsToSegs(events);                                                                                // 4779
                                                                                                                       // 4780
		this.renderFill('businessHours', segs, 'bgevent');                                                                   // 4781
	},                                                                                                                    // 4782
                                                                                                                       // 4783
                                                                                                                       // 4784
	// Generates the HTML for a single row. `row` is the row number.                                                      // 4785
	dayRowHtml: function(row, isRigid) {                                                                                  // 4786
		var view = this.view;                                                                                                // 4787
		var classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 4788
                                                                                                                       // 4789
		if (isRigid) {                                                                                                       // 4790
			classes.push('fc-rigid');                                                                                           // 4791
		}                                                                                                                    // 4792
                                                                                                                       // 4793
		return '' +                                                                                                          // 4794
			'<div class="' + classes.join(' ') + '">' +                                                                         // 4795
				'<div class="fc-bg">' +                                                                                            // 4796
					'<table>' +                                                                                                       // 4797
						this.rowHtml('day', row) + // leverages RowRenderer. calls dayCellHtml()                                         // 4798
					'</table>' +                                                                                                      // 4799
				'</div>' +                                                                                                         // 4800
				'<div class="fc-content-skeleton">' +                                                                              // 4801
					'<table>' +                                                                                                       // 4802
						(this.numbersVisible ?                                                                                           // 4803
							'<thead>' +                                                                                                     // 4804
								this.rowHtml('number', row) + // leverages RowRenderer. View will define render method                         // 4805
							'</thead>' :                                                                                                    // 4806
							''                                                                                                              // 4807
							) +                                                                                                             // 4808
					'</table>' +                                                                                                      // 4809
				'</div>' +                                                                                                         // 4810
			'</div>';                                                                                                           // 4811
	},                                                                                                                    // 4812
                                                                                                                       // 4813
                                                                                                                       // 4814
	// Renders the HTML for a whole-day cell. Will eventually end up in the day-row's background.                         // 4815
	// We go through a 'day' row type instead of just doing a 'bg' row type so that the View can do custom rendering      // 4816
	// specifically for whole-day rows, whereas a 'bg' might also be used for other purposes (TimeGrid bg for example).   // 4817
	dayCellHtml: function(cell) {                                                                                         // 4818
		return this.bgCellHtml(cell);                                                                                        // 4819
	},                                                                                                                    // 4820
                                                                                                                       // 4821
                                                                                                                       // 4822
	/* Options                                                                                                            // 4823
	------------------------------------------------------------------------------------------------------------------*/  // 4824
                                                                                                                       // 4825
                                                                                                                       // 4826
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4827
	computeColHeadFormat: function() {                                                                                    // 4828
		if (this.rowCnt > 1) { // more than one week row. day numbers will be in each cell                                   // 4829
			return 'ddd'; // "Sat"                                                                                              // 4830
		}                                                                                                                    // 4831
		else if (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                      // 4832
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 4833
		}                                                                                                                    // 4834
		else { // single day, so full single date string will probably be in title text                                      // 4835
			return 'dddd'; // "Saturday"                                                                                        // 4836
		}                                                                                                                    // 4837
	},                                                                                                                    // 4838
                                                                                                                       // 4839
                                                                                                                       // 4840
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 4841
	computeEventTimeFormat: function() {                                                                                  // 4842
		return this.view.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"                                                // 4843
	},                                                                                                                    // 4844
                                                                                                                       // 4845
                                                                                                                       // 4846
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 4847
	computeDisplayEventEnd: function() {                                                                                  // 4848
		return this.colCnt == 1; // we'll likely have space if there's only one day                                          // 4849
	},                                                                                                                    // 4850
                                                                                                                       // 4851
                                                                                                                       // 4852
	/* Cell System                                                                                                        // 4853
	------------------------------------------------------------------------------------------------------------------*/  // 4854
                                                                                                                       // 4855
                                                                                                                       // 4856
	rangeUpdated: function() {                                                                                            // 4857
		var cellDates;                                                                                                       // 4858
		var firstDay;                                                                                                        // 4859
		var rowCnt;                                                                                                          // 4860
		var colCnt;                                                                                                          // 4861
                                                                                                                       // 4862
		this.updateCellDates(); // populates cellDates and dayToCellOffsets                                                  // 4863
		cellDates = this.cellDates;                                                                                          // 4864
                                                                                                                       // 4865
		if (this.breakOnWeeks) {                                                                                             // 4866
			// count columns until the day-of-week repeats                                                                      // 4867
			firstDay = cellDates[0].day();                                                                                      // 4868
			for (colCnt = 1; colCnt < cellDates.length; colCnt++) {                                                             // 4869
				if (cellDates[colCnt].day() == firstDay) {                                                                         // 4870
					break;                                                                                                            // 4871
				}                                                                                                                  // 4872
			}                                                                                                                   // 4873
			rowCnt = Math.ceil(cellDates.length / colCnt);                                                                      // 4874
		}                                                                                                                    // 4875
		else {                                                                                                               // 4876
			rowCnt = 1;                                                                                                         // 4877
			colCnt = cellDates.length;                                                                                          // 4878
		}                                                                                                                    // 4879
                                                                                                                       // 4880
		this.rowCnt = rowCnt;                                                                                                // 4881
		this.colCnt = colCnt;                                                                                                // 4882
	},                                                                                                                    // 4883
                                                                                                                       // 4884
                                                                                                                       // 4885
	// Populates cellDates and dayToCellOffsets                                                                           // 4886
	updateCellDates: function() {                                                                                         // 4887
		var view = this.view;                                                                                                // 4888
		var date = this.start.clone();                                                                                       // 4889
		var dates = [];                                                                                                      // 4890
		var offset = -1;                                                                                                     // 4891
		var offsets = [];                                                                                                    // 4892
                                                                                                                       // 4893
		while (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4894
			if (view.isHiddenDay(date)) {                                                                                       // 4895
				offsets.push(offset + 0.5); // mark that it's between offsets                                                      // 4896
			}                                                                                                                   // 4897
			else {                                                                                                              // 4898
				offset++;                                                                                                          // 4899
				offsets.push(offset);                                                                                              // 4900
				dates.push(date.clone());                                                                                          // 4901
			}                                                                                                                   // 4902
			date.add(1, 'days');                                                                                                // 4903
		}                                                                                                                    // 4904
                                                                                                                       // 4905
		this.cellDates = dates;                                                                                              // 4906
		this.dayToCellOffsets = offsets;                                                                                     // 4907
	},                                                                                                                    // 4908
                                                                                                                       // 4909
                                                                                                                       // 4910
	// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 4911
	computeCellDate: function(cell) {                                                                                     // 4912
		var colCnt = this.colCnt;                                                                                            // 4913
		var index = cell.row * colCnt + (this.isRTL ? colCnt - cell.col - 1 : cell.col);                                     // 4914
                                                                                                                       // 4915
		return this.cellDates[index].clone();                                                                                // 4916
	},                                                                                                                    // 4917
                                                                                                                       // 4918
                                                                                                                       // 4919
	// Retrieves the element representing the given row                                                                   // 4920
	getRowEl: function(row) {                                                                                             // 4921
		return this.rowEls.eq(row);                                                                                          // 4922
	},                                                                                                                    // 4923
                                                                                                                       // 4924
                                                                                                                       // 4925
	// Retrieves the element representing the given column                                                                // 4926
	getColEl: function(col) {                                                                                             // 4927
		return this.dayEls.eq(col);                                                                                          // 4928
	},                                                                                                                    // 4929
                                                                                                                       // 4930
                                                                                                                       // 4931
	// Gets the whole-day element associated with the cell                                                                // 4932
	getCellDayEl: function(cell) {                                                                                        // 4933
		return this.dayEls.eq(cell.row * this.colCnt + cell.col);                                                            // 4934
	},                                                                                                                    // 4935
                                                                                                                       // 4936
                                                                                                                       // 4937
	// Overrides Grid's method for when row coordinates are computed                                                      // 4938
	computeRowCoords: function() {                                                                                        // 4939
		var rowCoords = Grid.prototype.computeRowCoords.call(this); // call the super-method                                 // 4940
                                                                                                                       // 4941
		// hack for extending last row (used by AgendaView)                                                                  // 4942
		rowCoords[rowCoords.length - 1].bottom += this.bottomCoordPadding;                                                   // 4943
                                                                                                                       // 4944
		return rowCoords;                                                                                                    // 4945
	},                                                                                                                    // 4946
                                                                                                                       // 4947
                                                                                                                       // 4948
	/* Dates                                                                                                              // 4949
	------------------------------------------------------------------------------------------------------------------*/  // 4950
                                                                                                                       // 4951
                                                                                                                       // 4952
	// Slices up a date range by row into an array of segments                                                            // 4953
	rangeToSegs: function(range) {                                                                                        // 4954
		var isRTL = this.isRTL;                                                                                              // 4955
		var rowCnt = this.rowCnt;                                                                                            // 4956
		var colCnt = this.colCnt;                                                                                            // 4957
		var segs = [];                                                                                                       // 4958
		var first, last; // inclusive cell-offset range for given range                                                      // 4959
		var row;                                                                                                             // 4960
		var rowFirst, rowLast; // inclusive cell-offset range for current row                                                // 4961
		var isStart, isEnd;                                                                                                  // 4962
		var segFirst, segLast; // inclusive cell-offset range for segment                                                    // 4963
		var seg;                                                                                                             // 4964
                                                                                                                       // 4965
		range = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold                      // 4966
		first = this.dateToCellOffset(range.start);                                                                          // 4967
		last = this.dateToCellOffset(range.end.subtract(1, 'days')); // offset of inclusive end date                         // 4968
                                                                                                                       // 4969
		for (row = 0; row < rowCnt; row++) {                                                                                 // 4970
			rowFirst = row * colCnt;                                                                                            // 4971
			rowLast = rowFirst + colCnt - 1;                                                                                    // 4972
                                                                                                                       // 4973
			// intersect segment's offset range with the row's                                                                  // 4974
			segFirst = Math.max(rowFirst, first);                                                                               // 4975
			segLast = Math.min(rowLast, last);                                                                                  // 4976
                                                                                                                       // 4977
			// deal with in-between indices                                                                                     // 4978
			segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4979
			segLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4980
                                                                                                                       // 4981
			if (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4982
                                                                                                                       // 4983
				// must be matching integers to be the segment's start/end                                                         // 4984
				isStart = segFirst === first;                                                                                      // 4985
				isEnd = segLast === last;                                                                                          // 4986
                                                                                                                       // 4987
				// translate offsets to be relative to start-of-row                                                                // 4988
				segFirst -= rowFirst;                                                                                              // 4989
				segLast -= rowFirst;                                                                                               // 4990
                                                                                                                       // 4991
				seg = { row: row, isStart: isStart, isEnd: isEnd };                                                                // 4992
				if (isRTL) {                                                                                                       // 4993
					seg.leftCol = colCnt - segLast - 1;                                                                               // 4994
					seg.rightCol = colCnt - segFirst - 1;                                                                             // 4995
				}                                                                                                                  // 4996
				else {                                                                                                             // 4997
					seg.leftCol = segFirst;                                                                                           // 4998
					seg.rightCol = segLast;                                                                                           // 4999
				}                                                                                                                  // 5000
				segs.push(seg);                                                                                                    // 5001
			}                                                                                                                   // 5002
		}                                                                                                                    // 5003
                                                                                                                       // 5004
		return segs;                                                                                                         // 5005
	},                                                                                                                    // 5006
                                                                                                                       // 5007
                                                                                                                       // 5008
	// Given a date, returns its chronolocial cell-offset from the first cell of the grid.                                // 5009
	// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 5010
	// If before the first offset, returns a negative number.                                                             // 5011
	// If after the last offset, returns an offset past the last cell offset.                                             // 5012
	// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 5013
	dateToCellOffset: function(date) {                                                                                    // 5014
		var offsets = this.dayToCellOffsets;                                                                                 // 5015
		var day = date.diff(this.start, 'days');                                                                             // 5016
                                                                                                                       // 5017
		if (day < 0) {                                                                                                       // 5018
			return offsets[0] - 1;                                                                                              // 5019
		}                                                                                                                    // 5020
		else if (day >= offsets.length) {                                                                                    // 5021
			return offsets[offsets.length - 1] + 1;                                                                             // 5022
		}                                                                                                                    // 5023
		else {                                                                                                               // 5024
			return offsets[day];                                                                                                // 5025
		}                                                                                                                    // 5026
	},                                                                                                                    // 5027
                                                                                                                       // 5028
                                                                                                                       // 5029
	/* Event Drag Visualization                                                                                           // 5030
	------------------------------------------------------------------------------------------------------------------*/  // 5031
	// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 5032
                                                                                                                       // 5033
                                                                                                                       // 5034
	// Renders a visual indication of an event or external element being dragged.                                         // 5035
	// The dropLocation's end can be null. seg can be null. See Grid::renderDrag for more info.                           // 5036
	renderDrag: function(dropLocation, seg) {                                                                             // 5037
                                                                                                                       // 5038
		// always render a highlight underneath                                                                              // 5039
		this.renderHighlight(this.eventRangeToSegs(dropLocation));                                                           // 5040
                                                                                                                       // 5041
		// if a segment from the same calendar but another component is being dragged, render a helper event                 // 5042
		if (seg && !seg.el.closest(this.el).length) {                                                                        // 5043
                                                                                                                       // 5044
			this.renderRangeHelper(dropLocation, seg);                                                                          // 5045
			this.applyDragOpacity(this.helperEls);                                                                              // 5046
                                                                                                                       // 5047
			return true; // a helper has been rendered                                                                          // 5048
		}                                                                                                                    // 5049
	},                                                                                                                    // 5050
                                                                                                                       // 5051
                                                                                                                       // 5052
	// Unrenders any visual indication of a hovering event                                                                // 5053
	unrenderDrag: function() {                                                                                            // 5054
		this.unrenderHighlight();                                                                                            // 5055
		this.unrenderHelper();                                                                                               // 5056
	},                                                                                                                    // 5057
                                                                                                                       // 5058
                                                                                                                       // 5059
	/* Event Resize Visualization                                                                                         // 5060
	------------------------------------------------------------------------------------------------------------------*/  // 5061
                                                                                                                       // 5062
                                                                                                                       // 5063
	// Renders a visual indication of an event being resized                                                              // 5064
	renderEventResize: function(range, seg) {                                                                             // 5065
		this.renderHighlight(this.eventRangeToSegs(range));                                                                  // 5066
		this.renderRangeHelper(range, seg);                                                                                  // 5067
	},                                                                                                                    // 5068
                                                                                                                       // 5069
                                                                                                                       // 5070
	// Unrenders a visual indication of an event being resized                                                            // 5071
	unrenderEventResize: function() {                                                                                     // 5072
		this.unrenderHighlight();                                                                                            // 5073
		this.unrenderHelper();                                                                                               // 5074
	},                                                                                                                    // 5075
                                                                                                                       // 5076
                                                                                                                       // 5077
	/* Event Helper                                                                                                       // 5078
	------------------------------------------------------------------------------------------------------------------*/  // 5079
                                                                                                                       // 5080
                                                                                                                       // 5081
	// Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.              // 5082
	renderHelper: function(event, sourceSeg) {                                                                            // 5083
		var helperNodes = [];                                                                                                // 5084
		var segs = this.eventsToSegs([ event ]);                                                                             // 5085
		var rowStructs;                                                                                                      // 5086
                                                                                                                       // 5087
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 5088
		rowStructs = this.renderSegRows(segs);                                                                               // 5089
                                                                                                                       // 5090
		// inject each new event skeleton into each associated row                                                           // 5091
		this.rowEls.each(function(row, rowNode) {                                                                            // 5092
			var rowEl = $(rowNode); // the .fc-row                                                                              // 5093
			var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned              // 5094
			var skeletonTop;                                                                                                    // 5095
                                                                                                                       // 5096
			// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 5097
			if (sourceSeg && sourceSeg.row === row) {                                                                           // 5098
				skeletonTop = sourceSeg.el.position().top;                                                                         // 5099
			}                                                                                                                   // 5100
			else {                                                                                                              // 5101
				skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 5102
			}                                                                                                                   // 5103
                                                                                                                       // 5104
			skeletonEl.css('top', skeletonTop)                                                                                  // 5105
				.find('table')                                                                                                     // 5106
					.append(rowStructs[row].tbodyEl);                                                                                 // 5107
                                                                                                                       // 5108
			rowEl.append(skeletonEl);                                                                                           // 5109
			helperNodes.push(skeletonEl[0]);                                                                                    // 5110
		});                                                                                                                  // 5111
                                                                                                                       // 5112
		this.helperEls = $(helperNodes); // array -> jQuery set                                                              // 5113
	},                                                                                                                    // 5114
                                                                                                                       // 5115
                                                                                                                       // 5116
	// Unrenders any visual indication of a mock helper event                                                             // 5117
	unrenderHelper: function() {                                                                                          // 5118
		if (this.helperEls) {                                                                                                // 5119
			this.helperEls.remove();                                                                                            // 5120
			this.helperEls = null;                                                                                              // 5121
		}                                                                                                                    // 5122
	},                                                                                                                    // 5123
                                                                                                                       // 5124
                                                                                                                       // 5125
	/* Fill System (highlight, background events, business hours)                                                         // 5126
	------------------------------------------------------------------------------------------------------------------*/  // 5127
                                                                                                                       // 5128
                                                                                                                       // 5129
	fillSegTag: 'td', // override the default tag name                                                                    // 5130
                                                                                                                       // 5131
                                                                                                                       // 5132
	// Renders a set of rectangles over the given segments of days.                                                       // 5133
	// Only returns segments that successfully rendered.                                                                  // 5134
	renderFill: function(type, segs, className) {                                                                         // 5135
		var nodes = [];                                                                                                      // 5136
		var i, seg;                                                                                                          // 5137
		var skeletonEl;                                                                                                      // 5138
                                                                                                                       // 5139
		segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 5140
                                                                                                                       // 5141
		for (i = 0; i < segs.length; i++) {                                                                                  // 5142
			seg = segs[i];                                                                                                      // 5143
			skeletonEl = this.renderFillRow(type, seg, className);                                                              // 5144
			this.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 5145
			nodes.push(skeletonEl[0]);                                                                                          // 5146
		}                                                                                                                    // 5147
                                                                                                                       // 5148
		this.elsByFill[type] = $(nodes);                                                                                     // 5149
                                                                                                                       // 5150
		return segs;                                                                                                         // 5151
	},                                                                                                                    // 5152
                                                                                                                       // 5153
                                                                                                                       // 5154
	// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 5155
	renderFillRow: function(type, seg, className) {                                                                       // 5156
		var colCnt = this.colCnt;                                                                                            // 5157
		var startCol = seg.leftCol;                                                                                          // 5158
		var endCol = seg.rightCol + 1;                                                                                       // 5159
		var skeletonEl;                                                                                                      // 5160
		var trEl;                                                                                                            // 5161
                                                                                                                       // 5162
		className = className || type.toLowerCase();                                                                         // 5163
                                                                                                                       // 5164
		skeletonEl = $(                                                                                                      // 5165
			'<div class="fc-' + className + '-skeleton">' +                                                                     // 5166
				'<table><tr/></table>' +                                                                                           // 5167
			'</div>'                                                                                                            // 5168
		);                                                                                                                   // 5169
		trEl = skeletonEl.find('tr');                                                                                        // 5170
                                                                                                                       // 5171
		if (startCol > 0) {                                                                                                  // 5172
			trEl.append('<td colspan="' + startCol + '"/>');                                                                    // 5173
		}                                                                                                                    // 5174
                                                                                                                       // 5175
		trEl.append(                                                                                                         // 5176
			seg.el.attr('colspan', endCol - startCol)                                                                           // 5177
		);                                                                                                                   // 5178
                                                                                                                       // 5179
		if (endCol < colCnt) {                                                                                               // 5180
			trEl.append('<td colspan="' + (colCnt - endCol) + '"/>');                                                           // 5181
		}                                                                                                                    // 5182
                                                                                                                       // 5183
		this.bookendCells(trEl, type);                                                                                       // 5184
                                                                                                                       // 5185
		return skeletonEl;                                                                                                   // 5186
	}                                                                                                                     // 5187
                                                                                                                       // 5188
});                                                                                                                    // 5189
                                                                                                                       // 5190
;;                                                                                                                     // 5191
                                                                                                                       // 5192
/* Event-rendering methods for the DayGrid class                                                                       // 5193
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5195
DayGrid.mixin({                                                                                                        // 5196
                                                                                                                       // 5197
	rowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 5198
                                                                                                                       // 5199
                                                                                                                       // 5200
	// Unrenders all events currently rendered on the grid                                                                // 5201
	unrenderEvents: function() {                                                                                          // 5202
		this.removeSegPopover(); // removes the "more.." events popover                                                      // 5203
		Grid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method                                      // 5204
	},                                                                                                                    // 5205
                                                                                                                       // 5206
                                                                                                                       // 5207
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 5208
	getEventSegs: function() {                                                                                            // 5209
		return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 5210
			.concat(this.popoverSegs || []); // append the segments from the "more..." popover                                  // 5211
	},                                                                                                                    // 5212
                                                                                                                       // 5213
                                                                                                                       // 5214
	// Renders the given background event segments onto the grid                                                          // 5215
	renderBgSegs: function(segs) {                                                                                        // 5216
                                                                                                                       // 5217
		// don't render timed background events                                                                              // 5218
		var allDaySegs = $.grep(segs, function(seg) {                                                                        // 5219
			return seg.event.allDay;                                                                                            // 5220
		});                                                                                                                  // 5221
                                                                                                                       // 5222
		return Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 5223
	},                                                                                                                    // 5224
                                                                                                                       // 5225
                                                                                                                       // 5226
	// Renders the given foreground event segments onto the grid                                                          // 5227
	renderFgSegs: function(segs) {                                                                                        // 5228
		var rowStructs;                                                                                                      // 5229
                                                                                                                       // 5230
		// render an `.el` on each seg                                                                                       // 5231
		// returns a subset of the segs. segs that were actually rendered                                                    // 5232
		segs = this.renderFgSegEls(segs);                                                                                    // 5233
                                                                                                                       // 5234
		rowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 5235
                                                                                                                       // 5236
		// append to each row's content skeleton                                                                             // 5237
		this.rowEls.each(function(i, rowNode) {                                                                              // 5238
			$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 5239
				rowStructs[i].tbodyEl                                                                                              // 5240
			);                                                                                                                  // 5241
		});                                                                                                                  // 5242
                                                                                                                       // 5243
		return segs; // return only the segs that were actually rendered                                                     // 5244
	},                                                                                                                    // 5245
                                                                                                                       // 5246
                                                                                                                       // 5247
	// Unrenders all currently rendered foreground event segments                                                         // 5248
	unrenderFgSegs: function() {                                                                                          // 5249
		var rowStructs = this.rowStructs || [];                                                                              // 5250
		var rowStruct;                                                                                                       // 5251
                                                                                                                       // 5252
		while ((rowStruct = rowStructs.pop())) {                                                                             // 5253
			rowStruct.tbodyEl.remove();                                                                                         // 5254
		}                                                                                                                    // 5255
                                                                                                                       // 5256
		this.rowStructs = null;                                                                                              // 5257
	},                                                                                                                    // 5258
                                                                                                                       // 5259
                                                                                                                       // 5260
	// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5261
	// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5262
	// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5263
	renderSegRows: function(segs) {                                                                                       // 5264
		var rowStructs = [];                                                                                                 // 5265
		var segRows;                                                                                                         // 5266
		var row;                                                                                                             // 5267
                                                                                                                       // 5268
		segRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5269
                                                                                                                       // 5270
		// iterate each row of segment groupings                                                                             // 5271
		for (row = 0; row < segRows.length; row++) {                                                                         // 5272
			rowStructs.push(                                                                                                    // 5273
				this.renderSegRow(row, segRows[row])                                                                               // 5274
			);                                                                                                                  // 5275
		}                                                                                                                    // 5276
                                                                                                                       // 5277
		return rowStructs;                                                                                                   // 5278
	},                                                                                                                    // 5279
                                                                                                                       // 5280
                                                                                                                       // 5281
	// Builds the HTML to be used for the default element for an individual segment                                       // 5282
	fgSegHtml: function(seg, disableResizing) {                                                                           // 5283
		var view = this.view;                                                                                                // 5284
		var event = seg.event;                                                                                               // 5285
		var isDraggable = view.isEventDraggable(event);                                                                      // 5286
		var isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5287
			seg.isStart && view.isEventResizableFromStart(event);                                                               // 5288
		var isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5289
			seg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5290
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5291
		var skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 5292
		var timeHtml = '';                                                                                                   // 5293
		var timeText;                                                                                                        // 5294
		var titleHtml;                                                                                                       // 5295
                                                                                                                       // 5296
		classes.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5297
                                                                                                                       // 5298
		// Only display a timed events time if it is the starting segment                                                    // 5299
		if (seg.isStart) {                                                                                                   // 5300
			timeText = this.getEventTimeText(event);                                                                            // 5301
			if (timeText) {                                                                                                     // 5302
				timeHtml = '<span class="fc-time">' + htmlEscape(timeText) + '</span>';                                            // 5303
			}                                                                                                                   // 5304
		}                                                                                                                    // 5305
                                                                                                                       // 5306
		titleHtml =                                                                                                          // 5307
			'<span class="fc-title">' +                                                                                         // 5308
				(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5309
			'</span>';                                                                                                          // 5310
		                                                                                                                     // 5311
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 5312
				(event.url ?                                                                                                       // 5313
					' href="' + htmlEscape(event.url) + '"' :                                                                         // 5314
					''                                                                                                                // 5315
					) +                                                                                                               // 5316
				(skinCss ?                                                                                                         // 5317
					' style="' + skinCss + '"' :                                                                                      // 5318
					''                                                                                                                // 5319
					) +                                                                                                               // 5320
			'>' +                                                                                                               // 5321
				'<div class="fc-content">' +                                                                                       // 5322
					(this.isRTL ?                                                                                                     // 5323
						titleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5324
						timeHtml + ' ' + titleHtml   //                                                                                  // 5325
						) +                                                                                                              // 5326
				'</div>' +                                                                                                         // 5327
				(isResizableFromStart ?                                                                                            // 5328
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 5329
					''                                                                                                                // 5330
					) +                                                                                                               // 5331
				(isResizableFromEnd ?                                                                                              // 5332
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 5333
					''                                                                                                                // 5334
					) +                                                                                                               // 5335
			'</a>';                                                                                                             // 5336
	},                                                                                                                    // 5337
                                                                                                                       // 5338
                                                                                                                       // 5339
	// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5340
	// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5341
	// NOTE: modifies rowSegs                                                                                             // 5342
	renderSegRow: function(row, rowSegs) {                                                                                // 5343
		var colCnt = this.colCnt;                                                                                            // 5344
		var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5345
		var levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5346
		var tbody = $('<tbody/>');                                                                                           // 5347
		var segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5348
		var cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5349
		var loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5350
		var i, levelSegs;                                                                                                    // 5351
		var col;                                                                                                             // 5352
		var tr;                                                                                                              // 5353
		var j, seg;                                                                                                          // 5354
		var td;                                                                                                              // 5355
                                                                                                                       // 5356
		// populates empty cells from the current column (`col`) to `endCol`                                                 // 5357
		function emptyCellsUntil(endCol) {                                                                                   // 5358
			while (col < endCol) {                                                                                              // 5359
				// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5360
				td = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5361
				if (td) {                                                                                                          // 5362
					td.attr(                                                                                                          // 5363
						'rowspan',                                                                                                       // 5364
						parseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5365
					);                                                                                                                // 5366
				}                                                                                                                  // 5367
				else {                                                                                                             // 5368
					td = $('<td/>');                                                                                                  // 5369
					tr.append(td);                                                                                                    // 5370
				}                                                                                                                  // 5371
				cellMatrix[i][col] = td;                                                                                           // 5372
				loneCellMatrix[i][col] = td;                                                                                       // 5373
				col++;                                                                                                             // 5374
			}                                                                                                                   // 5375
		}                                                                                                                    // 5376
                                                                                                                       // 5377
		for (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5378
			levelSegs = segLevels[i];                                                                                           // 5379
			col = 0;                                                                                                            // 5380
			tr = $('<tr/>');                                                                                                    // 5381
                                                                                                                       // 5382
			segMatrix.push([]);                                                                                                 // 5383
			cellMatrix.push([]);                                                                                                // 5384
			loneCellMatrix.push([]);                                                                                            // 5385
                                                                                                                       // 5386
			// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5387
			// this single empty row is useful for styling.                                                                     // 5388
			if (levelSegs) {                                                                                                    // 5389
				for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5390
					seg = levelSegs[j];                                                                                               // 5391
                                                                                                                       // 5392
					emptyCellsUntil(seg.leftCol);                                                                                     // 5393
                                                                                                                       // 5394
					// create a container that occupies or more columns. append the event element.                                    // 5395
					td = $('<td class="fc-event-container"/>').append(seg.el);                                                        // 5396
					if (seg.leftCol != seg.rightCol) {                                                                                // 5397
						td.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5398
					}                                                                                                                 // 5399
					else { // a single-column segment                                                                                 // 5400
						loneCellMatrix[i][col] = td;                                                                                     // 5401
					}                                                                                                                 // 5402
                                                                                                                       // 5403
					while (col <= seg.rightCol) {                                                                                     // 5404
						cellMatrix[i][col] = td;                                                                                         // 5405
						segMatrix[i][col] = seg;                                                                                         // 5406
						col++;                                                                                                           // 5407
					}                                                                                                                 // 5408
                                                                                                                       // 5409
					tr.append(td);                                                                                                    // 5410
				}                                                                                                                  // 5411
			}                                                                                                                   // 5412
                                                                                                                       // 5413
			emptyCellsUntil(colCnt); // finish off the row                                                                      // 5414
			this.bookendCells(tr, 'eventSkeleton');                                                                             // 5415
			tbody.append(tr);                                                                                                   // 5416
		}                                                                                                                    // 5417
                                                                                                                       // 5418
		return { // a "rowStruct"                                                                                            // 5419
			row: row, // the row number                                                                                         // 5420
			tbodyEl: tbody,                                                                                                     // 5421
			cellMatrix: cellMatrix,                                                                                             // 5422
			segMatrix: segMatrix,                                                                                               // 5423
			segLevels: segLevels,                                                                                               // 5424
			segs: rowSegs                                                                                                       // 5425
		};                                                                                                                   // 5426
	},                                                                                                                    // 5427
                                                                                                                       // 5428
                                                                                                                       // 5429
	// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5430
	// NOTE: modifies segs                                                                                                // 5431
	buildSegLevels: function(segs) {                                                                                      // 5432
		var levels = [];                                                                                                     // 5433
		var i, seg;                                                                                                          // 5434
		var j;                                                                                                               // 5435
                                                                                                                       // 5436
		// Give preference to elements with certain criteria, so they have                                                   // 5437
		// a chance to be closer to the top.                                                                                 // 5438
		this.sortSegs(segs);                                                                                                 // 5439
		                                                                                                                     // 5440
		for (i = 0; i < segs.length; i++) {                                                                                  // 5441
			seg = segs[i];                                                                                                      // 5442
                                                                                                                       // 5443
			// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5444
			for (j = 0; j < levels.length; j++) {                                                                               // 5445
				if (!isDaySegCollision(seg, levels[j])) {                                                                          // 5446
					break;                                                                                                            // 5447
				}                                                                                                                  // 5448
			}                                                                                                                   // 5449
			// `j` now holds the desired subrow index                                                                           // 5450
			seg.level = j;                                                                                                      // 5451
                                                                                                                       // 5452
			// create new level array if needed and append segment                                                              // 5453
			(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5454
		}                                                                                                                    // 5455
                                                                                                                       // 5456
		// order segments left-to-right. very important if calendar is RTL                                                   // 5457
		for (j = 0; j < levels.length; j++) {                                                                                // 5458
			levels[j].sort(compareDaySegCols);                                                                                  // 5459
		}                                                                                                                    // 5460
                                                                                                                       // 5461
		return levels;                                                                                                       // 5462
	},                                                                                                                    // 5463
                                                                                                                       // 5464
                                                                                                                       // 5465
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5466
	groupSegRows: function(segs) {                                                                                        // 5467
		var segRows = [];                                                                                                    // 5468
		var i;                                                                                                               // 5469
                                                                                                                       // 5470
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 5471
			segRows.push([]);                                                                                                   // 5472
		}                                                                                                                    // 5473
                                                                                                                       // 5474
		for (i = 0; i < segs.length; i++) {                                                                                  // 5475
			segRows[segs[i].row].push(segs[i]);                                                                                 // 5476
		}                                                                                                                    // 5477
                                                                                                                       // 5478
		return segRows;                                                                                                      // 5479
	}                                                                                                                     // 5480
                                                                                                                       // 5481
});                                                                                                                    // 5482
                                                                                                                       // 5483
                                                                                                                       // 5484
// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5485
function isDaySegCollision(seg, otherSegs) {                                                                           // 5486
	var i, otherSeg;                                                                                                      // 5487
                                                                                                                       // 5488
	for (i = 0; i < otherSegs.length; i++) {                                                                              // 5489
		otherSeg = otherSegs[i];                                                                                             // 5490
                                                                                                                       // 5491
		if (                                                                                                                 // 5492
			otherSeg.leftCol <= seg.rightCol &&                                                                                 // 5493
			otherSeg.rightCol >= seg.leftCol                                                                                    // 5494
		) {                                                                                                                  // 5495
			return true;                                                                                                        // 5496
		}                                                                                                                    // 5497
	}                                                                                                                     // 5498
                                                                                                                       // 5499
	return false;                                                                                                         // 5500
}                                                                                                                      // 5501
                                                                                                                       // 5502
                                                                                                                       // 5503
// A cmp function for determining the leftmost event                                                                   // 5504
function compareDaySegCols(a, b) {                                                                                     // 5505
	return a.leftCol - b.leftCol;                                                                                         // 5506
}                                                                                                                      // 5507
                                                                                                                       // 5508
;;                                                                                                                     // 5509
                                                                                                                       // 5510
/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5511
----------------------------------------------------------------------------------------------------------------------*/
// NOTE: all the segs being passed around in here are foreground segs                                                  // 5513
                                                                                                                       // 5514
DayGrid.mixin({                                                                                                        // 5515
                                                                                                                       // 5516
	segPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5517
	popoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5518
                                                                                                                       // 5519
                                                                                                                       // 5520
	removeSegPopover: function() {                                                                                        // 5521
		if (this.segPopover) {                                                                                               // 5522
			this.segPopover.hide(); // in handler, will call segPopover's removeElement                                         // 5523
		}                                                                                                                    // 5524
	},                                                                                                                    // 5525
                                                                                                                       // 5526
                                                                                                                       // 5527
	// Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.                     // 5528
	// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5529
	limitRows: function(levelLimit) {                                                                                     // 5530
		var rowStructs = this.rowStructs || [];                                                                              // 5531
		var row; // row #                                                                                                    // 5532
		var rowLevelLimit;                                                                                                   // 5533
                                                                                                                       // 5534
		for (row = 0; row < rowStructs.length; row++) {                                                                      // 5535
			this.unlimitRow(row);                                                                                               // 5536
                                                                                                                       // 5537
			if (!levelLimit) {                                                                                                  // 5538
				rowLevelLimit = false;                                                                                             // 5539
			}                                                                                                                   // 5540
			else if (typeof levelLimit === 'number') {                                                                          // 5541
				rowLevelLimit = levelLimit;                                                                                        // 5542
			}                                                                                                                   // 5543
			else {                                                                                                              // 5544
				rowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5545
			}                                                                                                                   // 5546
                                                                                                                       // 5547
			if (rowLevelLimit !== false) {                                                                                      // 5548
				this.limitRow(row, rowLevelLimit);                                                                                 // 5549
			}                                                                                                                   // 5550
		}                                                                                                                    // 5551
	},                                                                                                                    // 5552
                                                                                                                       // 5553
                                                                                                                       // 5554
	// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5555
	// Assumes the row is "rigid" (maintains a constant height regardless of what is inside).                             // 5556
	// `row` is the row number.                                                                                           // 5557
	computeRowLevelLimit: function(row) {                                                                                 // 5558
		var rowEl = this.rowEls.eq(row); // the containing "fake" row div                                                    // 5559
		var rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5560
		var trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5561
		var i, trEl;                                                                                                         // 5562
		var trHeight;                                                                                                        // 5563
                                                                                                                       // 5564
		function iterInnerHeights(i, childNode) {                                                                            // 5565
			trHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5566
		}                                                                                                                    // 5567
                                                                                                                       // 5568
		// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5569
		for (i = 0; i < trEls.length; i++) {                                                                                 // 5570
			trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5571
                                                                                                                       // 5572
			// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5573
			// so instead, find the tallest inner content element.                                                              // 5574
			trHeight = 0;                                                                                                       // 5575
			trEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5576
                                                                                                                       // 5577
			if (trEl.position().top + trHeight > rowHeight) {                                                                   // 5578
				return i;                                                                                                          // 5579
			}                                                                                                                   // 5580
		}                                                                                                                    // 5581
                                                                                                                       // 5582
		return false; // should not limit at all                                                                             // 5583
	},                                                                                                                    // 5584
                                                                                                                       // 5585
                                                                                                                       // 5586
	// Limits the given grid row to the maximum number of levels and injects "more" links if necessary.                   // 5587
	// `row` is the row number.                                                                                           // 5588
	// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5589
	limitRow: function(row, levelLimit) {                                                                                 // 5590
		var _this = this;                                                                                                    // 5591
		var rowStruct = this.rowStructs[row];                                                                                // 5592
		var moreNodes = []; // array of "more" <a> links and <td> DOM nodes                                                  // 5593
		var col = 0; // col #, left-to-right (not chronologically)                                                           // 5594
		var cell;                                                                                                            // 5595
		var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5596
		var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5597
		var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5598
		var i, seg;                                                                                                          // 5599
		var segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5600
		var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5601
		var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5602
		var td, rowspan;                                                                                                     // 5603
		var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell                        // 5604
		var j;                                                                                                               // 5605
		var moreTd, moreWrap, moreLink;                                                                                      // 5606
                                                                                                                       // 5607
		// Iterates through empty level cells and places "more" links inside if need be                                      // 5608
		function emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5609
			while (col < endCol) {                                                                                              // 5610
				cell = _this.getCell(row, col);                                                                                    // 5611
				segsBelow = _this.getCellSegs(cell, levelLimit);                                                                   // 5612
				if (segsBelow.length) {                                                                                            // 5613
					td = cellMatrix[levelLimit - 1][col];                                                                             // 5614
					moreLink = _this.renderMoreLink(cell, segsBelow);                                                                 // 5615
					moreWrap = $('<div/>').append(moreLink);                                                                          // 5616
					td.append(moreWrap);                                                                                              // 5617
					moreNodes.push(moreWrap[0]);                                                                                      // 5618
				}                                                                                                                  // 5619
				col++;                                                                                                             // 5620
			}                                                                                                                   // 5621
		}                                                                                                                    // 5622
                                                                                                                       // 5623
		if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5624
			levelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5625
			cellMatrix = rowStruct.cellMatrix;                                                                                  // 5626
                                                                                                                       // 5627
			limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5628
				.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5629
                                                                                                                       // 5630
			// iterate though segments in the last allowable level                                                              // 5631
			for (i = 0; i < levelSegs.length; i++) {                                                                            // 5632
				seg = levelSegs[i];                                                                                                // 5633
				emptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5634
                                                                                                                       // 5635
				// determine *all* segments below `seg` that occupy the same columns                                               // 5636
				colSegsBelow = [];                                                                                                 // 5637
				totalSegsBelow = 0;                                                                                                // 5638
				while (col <= seg.rightCol) {                                                                                      // 5639
					cell = this.getCell(row, col);                                                                                    // 5640
					segsBelow = this.getCellSegs(cell, levelLimit);                                                                   // 5641
					colSegsBelow.push(segsBelow);                                                                                     // 5642
					totalSegsBelow += segsBelow.length;                                                                               // 5643
					col++;                                                                                                            // 5644
				}                                                                                                                  // 5645
                                                                                                                       // 5646
				if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?                         // 5647
					td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5648
					rowspan = td.attr('rowspan') || 1;                                                                                // 5649
					segMoreNodes = [];                                                                                                // 5650
                                                                                                                       // 5651
					// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5652
					for (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5653
						moreTd = $('<td class="fc-more-cell"/>').attr('rowspan', rowspan);                                               // 5654
						segsBelow = colSegsBelow[j];                                                                                     // 5655
						cell = this.getCell(row, seg.leftCol + j);                                                                       // 5656
						moreLink = this.renderMoreLink(cell, [ seg ].concat(segsBelow)); // count seg as hidden too                      // 5657
						moreWrap = $('<div/>').append(moreLink);                                                                         // 5658
						moreTd.append(moreWrap);                                                                                         // 5659
						segMoreNodes.push(moreTd[0]);                                                                                    // 5660
						moreNodes.push(moreTd[0]);                                                                                       // 5661
					}                                                                                                                 // 5662
                                                                                                                       // 5663
					td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5664
					limitedNodes.push(td[0]);                                                                                         // 5665
				}                                                                                                                  // 5666
			}                                                                                                                   // 5667
                                                                                                                       // 5668
			emptyCellsUntil(this.colCnt); // finish off the level                                                               // 5669
			rowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5670
			rowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5671
		}                                                                                                                    // 5672
	},                                                                                                                    // 5673
                                                                                                                       // 5674
                                                                                                                       // 5675
	// Reveals all levels and removes all "more"-related elements for a grid's row.                                       // 5676
	// `row` is a row number.                                                                                             // 5677
	unlimitRow: function(row) {                                                                                           // 5678
		var rowStruct = this.rowStructs[row];                                                                                // 5679
                                                                                                                       // 5680
		if (rowStruct.moreEls) {                                                                                             // 5681
			rowStruct.moreEls.remove();                                                                                         // 5682
			rowStruct.moreEls = null;                                                                                           // 5683
		}                                                                                                                    // 5684
                                                                                                                       // 5685
		if (rowStruct.limitedEls) {                                                                                          // 5686
			rowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5687
			rowStruct.limitedEls = null;                                                                                        // 5688
		}                                                                                                                    // 5689
	},                                                                                                                    // 5690
                                                                                                                       // 5691
                                                                                                                       // 5692
	// Renders an <a> element that represents hidden event element for a cell.                                            // 5693
	// Responsible for attaching click handler as well.                                                                   // 5694
	renderMoreLink: function(cell, hiddenSegs) {                                                                          // 5695
		var _this = this;                                                                                                    // 5696
		var view = this.view;                                                                                                // 5697
                                                                                                                       // 5698
		return $('<a class="fc-more"/>')                                                                                     // 5699
			.text(                                                                                                              // 5700
				this.getMoreLinkText(hiddenSegs.length)                                                                            // 5701
			)                                                                                                                   // 5702
			.on('click', function(ev) {                                                                                         // 5703
				var clickOption = view.opt('eventLimitClick');                                                                     // 5704
				var date = cell.start;                                                                                             // 5705
				var moreEl = $(this);                                                                                              // 5706
				var dayEl = _this.getCellDayEl(cell);                                                                              // 5707
				var allSegs = _this.getCellSegs(cell);                                                                             // 5708
                                                                                                                       // 5709
				// rescope the segments to be within the cell's date                                                               // 5710
				var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5711
				var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5712
                                                                                                                       // 5713
				if (typeof clickOption === 'function') {                                                                           // 5714
					// the returned value can be an atomic option                                                                     // 5715
					clickOption = view.trigger('eventLimitClick', null, {                                                             // 5716
						date: date,                                                                                                      // 5717
						dayEl: dayEl,                                                                                                    // 5718
						moreEl: moreEl,                                                                                                  // 5719
						segs: reslicedAllSegs,                                                                                           // 5720
						hiddenSegs: reslicedHiddenSegs                                                                                   // 5721
					}, ev);                                                                                                           // 5722
				}                                                                                                                  // 5723
                                                                                                                       // 5724
				if (clickOption === 'popover') {                                                                                   // 5725
					_this.showSegPopover(cell, moreEl, reslicedAllSegs);                                                              // 5726
				}                                                                                                                  // 5727
				else if (typeof clickOption === 'string') { // a view name                                                         // 5728
					view.calendar.zoomTo(date, clickOption);                                                                          // 5729
				}                                                                                                                  // 5730
			});                                                                                                                 // 5731
	},                                                                                                                    // 5732
                                                                                                                       // 5733
                                                                                                                       // 5734
	// Reveals the popover that displays all events within a cell                                                         // 5735
	showSegPopover: function(cell, moreLink, segs) {                                                                      // 5736
		var _this = this;                                                                                                    // 5737
		var view = this.view;                                                                                                // 5738
		var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 5739
		var topEl; // the element we want to match the top coordinate of                                                     // 5740
		var options;                                                                                                         // 5741
                                                                                                                       // 5742
		if (this.rowCnt == 1) {                                                                                              // 5743
			topEl = view.el; // will cause the popover to cover any sort of header                                              // 5744
		}                                                                                                                    // 5745
		else {                                                                                                               // 5746
			topEl = this.rowEls.eq(cell.row); // will align with top of row                                                     // 5747
		}                                                                                                                    // 5748
                                                                                                                       // 5749
		options = {                                                                                                          // 5750
			className: 'fc-more-popover',                                                                                       // 5751
			content: this.renderSegPopoverContent(cell, segs),                                                                  // 5752
			parentEl: this.el,                                                                                                  // 5753
			top: topEl.offset().top,                                                                                            // 5754
			autoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 5755
			viewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 5756
			hide: function() {                                                                                                  // 5757
				// kill everything when the popover is hidden                                                                      // 5758
				_this.segPopover.removeElement();                                                                                  // 5759
				_this.segPopover = null;                                                                                           // 5760
				_this.popoverSegs = null;                                                                                          // 5761
			}                                                                                                                   // 5762
		};                                                                                                                   // 5763
                                                                                                                       // 5764
		// Determine horizontal coordinate.                                                                                  // 5765
		// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 5766
		if (this.isRTL) {                                                                                                    // 5767
			options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 5768
		}                                                                                                                    // 5769
		else {                                                                                                               // 5770
			options.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 5771
		}                                                                                                                    // 5772
                                                                                                                       // 5773
		this.segPopover = new Popover(options);                                                                              // 5774
		this.segPopover.show();                                                                                              // 5775
	},                                                                                                                    // 5776
                                                                                                                       // 5777
                                                                                                                       // 5778
	// Builds the inner DOM contents of the segment popover                                                               // 5779
	renderSegPopoverContent: function(cell, segs) {                                                                       // 5780
		var view = this.view;                                                                                                // 5781
		var isTheme = view.opt('theme');                                                                                     // 5782
		var title = cell.start.format(view.opt('dayPopoverFormat'));                                                         // 5783
		var content = $(                                                                                                     // 5784
			'<div class="fc-header ' + view.widgetHeaderClass + '">' +                                                          // 5785
				'<span class="fc-close ' +                                                                                         // 5786
					(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 5787
				'"></span>' +                                                                                                      // 5788
				'<span class="fc-title">' +                                                                                        // 5789
					htmlEscape(title) +                                                                                               // 5790
				'</span>' +                                                                                                        // 5791
				'<div class="fc-clear"/>' +                                                                                        // 5792
			'</div>' +                                                                                                          // 5793
			'<div class="fc-body ' + view.widgetContentClass + '">' +                                                           // 5794
				'<div class="fc-event-container"></div>' +                                                                         // 5795
			'</div>'                                                                                                            // 5796
		);                                                                                                                   // 5797
		var segContainer = content.find('.fc-event-container');                                                              // 5798
		var i;                                                                                                               // 5799
                                                                                                                       // 5800
		// render each seg's `el` and only return the visible segs                                                           // 5801
		segs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 5802
		this.popoverSegs = segs;                                                                                             // 5803
                                                                                                                       // 5804
		for (i = 0; i < segs.length; i++) {                                                                                  // 5805
                                                                                                                       // 5806
			// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 5807
			// grids that want to do drag-n-drop about which cell it came from                                                  // 5808
			segs[i].cell = cell;                                                                                                // 5809
                                                                                                                       // 5810
			segContainer.append(segs[i].el);                                                                                    // 5811
		}                                                                                                                    // 5812
                                                                                                                       // 5813
		return content;                                                                                                      // 5814
	},                                                                                                                    // 5815
                                                                                                                       // 5816
                                                                                                                       // 5817
	// Given the events within an array of segment objects, reslice them to be in a single day                            // 5818
	resliceDaySegs: function(segs, dayDate) {                                                                             // 5819
                                                                                                                       // 5820
		// build an array of the original events                                                                             // 5821
		var events = $.map(segs, function(seg) {                                                                             // 5822
			return seg.event;                                                                                                   // 5823
		});                                                                                                                  // 5824
                                                                                                                       // 5825
		var dayStart = dayDate.clone().stripTime();                                                                          // 5826
		var dayEnd = dayStart.clone().add(1, 'days');                                                                        // 5827
		var dayRange = { start: dayStart, end: dayEnd };                                                                     // 5828
                                                                                                                       // 5829
		// slice the events with a custom slicing function                                                                   // 5830
		segs = this.eventsToSegs(                                                                                            // 5831
			events,                                                                                                             // 5832
			function(range) {                                                                                                   // 5833
				var seg = intersectionToSeg(range, dayRange); // undefind if no intersection                                       // 5834
				return seg ? [ seg ] : []; // must return an array of segments                                                     // 5835
			}                                                                                                                   // 5836
		);                                                                                                                   // 5837
                                                                                                                       // 5838
		// force an order because eventsToSegs doesn't guarantee one                                                         // 5839
		this.sortSegs(segs);                                                                                                 // 5840
                                                                                                                       // 5841
		return segs;                                                                                                         // 5842
	},                                                                                                                    // 5843
                                                                                                                       // 5844
                                                                                                                       // 5845
	// Generates the text that should be inside a "more" link, given the number of events it represents                   // 5846
	getMoreLinkText: function(num) {                                                                                      // 5847
		var opt = this.view.opt('eventLimitText');                                                                           // 5848
                                                                                                                       // 5849
		if (typeof opt === 'function') {                                                                                     // 5850
			return opt(num);                                                                                                    // 5851
		}                                                                                                                    // 5852
		else {                                                                                                               // 5853
			return '+' + num + ' ' + opt;                                                                                       // 5854
		}                                                                                                                    // 5855
	},                                                                                                                    // 5856
                                                                                                                       // 5857
                                                                                                                       // 5858
	// Returns segments within a given cell.                                                                              // 5859
	// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 5860
	getCellSegs: function(cell, startLevel) {                                                                             // 5861
		var segMatrix = this.rowStructs[cell.row].segMatrix;                                                                 // 5862
		var level = startLevel || 0;                                                                                         // 5863
		var segs = [];                                                                                                       // 5864
		var seg;                                                                                                             // 5865
                                                                                                                       // 5866
		while (level < segMatrix.length) {                                                                                   // 5867
			seg = segMatrix[level][cell.col];                                                                                   // 5868
			if (seg) {                                                                                                          // 5869
				segs.push(seg);                                                                                                    // 5870
			}                                                                                                                   // 5871
			level++;                                                                                                            // 5872
		}                                                                                                                    // 5873
                                                                                                                       // 5874
		return segs;                                                                                                         // 5875
	}                                                                                                                     // 5876
                                                                                                                       // 5877
});                                                                                                                    // 5878
                                                                                                                       // 5879
;;                                                                                                                     // 5880
                                                                                                                       // 5881
/* A component that renders one or more columns of vertical time slots                                                 // 5882
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5884
var TimeGrid = Grid.extend({                                                                                           // 5885
                                                                                                                       // 5886
	slotDuration: null, // duration of a "slot", a distinct time segment on given day, visualized by lines                // 5887
	snapDuration: null, // granularity of time for dragging and selecting                                                 // 5888
	minTime: null, // Duration object that denotes the first visible time of any given day                                // 5889
	maxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 5890
	colDates: null, // whole-day dates for each column. left to right                                                     // 5891
	labelFormat: null, // formatting string for times running along vertical axis                                         // 5892
	labelInterval: null, // duration of how often a label should be displayed for a slot                                  // 5893
                                                                                                                       // 5894
	dayEls: null, // cells elements in the day-row background                                                             // 5895
	slatEls: null, // elements running horizontally across all columns                                                    // 5896
                                                                                                                       // 5897
	slatTops: null, // an array of top positions, relative to the container. last item holds bottom of last slot          // 5898
                                                                                                                       // 5899
	helperEl: null, // cell skeleton element for rendering the mock event "helper"                                        // 5900
                                                                                                                       // 5901
	businessHourSegs: null,                                                                                               // 5902
                                                                                                                       // 5903
                                                                                                                       // 5904
	constructor: function() {                                                                                             // 5905
		Grid.apply(this, arguments); // call the super-constructor                                                           // 5906
		this.processOptions();                                                                                               // 5907
	},                                                                                                                    // 5908
                                                                                                                       // 5909
                                                                                                                       // 5910
	// Renders the time grid into `this.el`, which should already be assigned.                                            // 5911
	// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 5912
	renderDates: function() {                                                                                             // 5913
		this.el.html(this.renderHtml());                                                                                     // 5914
		this.dayEls = this.el.find('.fc-day');                                                                               // 5915
		this.slatEls = this.el.find('.fc-slats tr');                                                                         // 5916
	},                                                                                                                    // 5917
                                                                                                                       // 5918
                                                                                                                       // 5919
	renderBusinessHours: function() {                                                                                     // 5920
		var events = this.view.calendar.getBusinessHoursEvents();                                                            // 5921
		this.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');                      // 5922
	},                                                                                                                    // 5923
                                                                                                                       // 5924
                                                                                                                       // 5925
	// Renders the basic HTML skeleton for the grid                                                                       // 5926
	renderHtml: function() {                                                                                              // 5927
		return '' +                                                                                                          // 5928
			'<div class="fc-bg">' +                                                                                             // 5929
				'<table>' +                                                                                                        // 5930
					this.rowHtml('slotBg') + // leverages RowRenderer, which will call slotBgCellHtml                                 // 5931
				'</table>' +                                                                                                       // 5932
			'</div>' +                                                                                                          // 5933
			'<div class="fc-slats">' +                                                                                          // 5934
				'<table>' +                                                                                                        // 5935
					this.slatRowHtml() +                                                                                              // 5936
				'</table>' +                                                                                                       // 5937
			'</div>';                                                                                                           // 5938
	},                                                                                                                    // 5939
                                                                                                                       // 5940
                                                                                                                       // 5941
	// Renders the HTML for a vertical background cell behind the slots.                                                  // 5942
	// This method is distinct from 'bg' because we wanted a new `rowType` so the View could customize the rendering.     // 5943
	slotBgCellHtml: function(cell) {                                                                                      // 5944
		return this.bgCellHtml(cell);                                                                                        // 5945
	},                                                                                                                    // 5946
                                                                                                                       // 5947
                                                                                                                       // 5948
	// Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.      // 5949
	slatRowHtml: function() {                                                                                             // 5950
		var view = this.view;                                                                                                // 5951
		var isRTL = this.isRTL;                                                                                              // 5952
		var html = '';                                                                                                       // 5953
		var slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 5954
		var slotDate; // will be on the view's first day, but we only care about its time                                    // 5955
		var isLabeled;                                                                                                       // 5956
		var axisHtml;                                                                                                        // 5957
                                                                                                                       // 5958
		// Calculate the time for each slot                                                                                  // 5959
		while (slotTime < this.maxTime) {                                                                                    // 5960
			slotDate = this.start.clone().time(slotTime); // after .time() will be in UTC. but that's good, avoids DST issues   // 5961
			isLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));                                          // 5962
                                                                                                                       // 5963
			axisHtml =                                                                                                          // 5964
				'<td class="fc-axis fc-time ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                      // 5965
					(isLabeled ?                                                                                                      // 5966
						'<span>' + // for matchCellWidths                                                                                // 5967
							htmlEscape(slotDate.format(this.labelFormat)) +                                                                 // 5968
						'</span>' :                                                                                                      // 5969
						''                                                                                                               // 5970
						) +                                                                                                              // 5971
				'</td>';                                                                                                           // 5972
                                                                                                                       // 5973
			html +=                                                                                                             // 5974
				'<tr ' + (isLabeled ? '' : 'class="fc-minor"') + '>' +                                                             // 5975
					(!isRTL ? axisHtml : '') +                                                                                        // 5976
					'<td class="' + view.widgetContentClass + '"/>' +                                                                 // 5977
					(isRTL ? axisHtml : '') +                                                                                         // 5978
				"</tr>";                                                                                                           // 5979
                                                                                                                       // 5980
			slotTime.add(this.slotDuration);                                                                                    // 5981
		}                                                                                                                    // 5982
                                                                                                                       // 5983
		return html;                                                                                                         // 5984
	},                                                                                                                    // 5985
                                                                                                                       // 5986
                                                                                                                       // 5987
	/* Options                                                                                                            // 5988
	------------------------------------------------------------------------------------------------------------------*/  // 5989
                                                                                                                       // 5990
                                                                                                                       // 5991
	// Parses various options into properties of this object                                                              // 5992
	processOptions: function() {                                                                                          // 5993
		var view = this.view;                                                                                                // 5994
		var slotDuration = view.opt('slotDuration');                                                                         // 5995
		var snapDuration = view.opt('snapDuration');                                                                         // 5996
		var input;                                                                                                           // 5997
                                                                                                                       // 5998
		slotDuration = moment.duration(slotDuration);                                                                        // 5999
		snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 6000
                                                                                                                       // 6001
		this.slotDuration = slotDuration;                                                                                    // 6002
		this.snapDuration = snapDuration;                                                                                    // 6003
		this.cellDuration = snapDuration; // for Grid system                                                                 // 6004
                                                                                                                       // 6005
		this.minTime = moment.duration(view.opt('minTime'));                                                                 // 6006
		this.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 6007
                                                                                                                       // 6008
		// might be an array value (for TimelineView).                                                                       // 6009
		// if so, getting the most granular entry (the last one probably).                                                   // 6010
		input = view.opt('slotLabelFormat');                                                                                 // 6011
		if ($.isArray(input)) {                                                                                              // 6012
			input = input[input.length - 1];                                                                                    // 6013
		}                                                                                                                    // 6014
                                                                                                                       // 6015
		this.labelFormat =                                                                                                   // 6016
			input ||                                                                                                            // 6017
			view.opt('axisFormat') || // deprecated                                                                             // 6018
			view.opt('smallTimeFormat'); // the computed default                                                                // 6019
                                                                                                                       // 6020
		input = view.opt('slotLabelInterval');                                                                               // 6021
		this.labelInterval = input ?                                                                                         // 6022
			moment.duration(input) :                                                                                            // 6023
			this.computeLabelInterval(slotDuration);                                                                            // 6024
	},                                                                                                                    // 6025
                                                                                                                       // 6026
                                                                                                                       // 6027
	// Computes an automatic value for slotLabelInterval                                                                  // 6028
	computeLabelInterval: function(slotDuration) {                                                                        // 6029
		var i;                                                                                                               // 6030
		var labelInterval;                                                                                                   // 6031
		var slotsPerLabel;                                                                                                   // 6032
                                                                                                                       // 6033
		// find the smallest stock label interval that results in more than one slots-per-label                              // 6034
		for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {                                                       // 6035
			labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);                                                     // 6036
			slotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);                                              // 6037
			if (isInt(slotsPerLabel) && slotsPerLabel > 1) {                                                                    // 6038
				return labelInterval;                                                                                              // 6039
			}                                                                                                                   // 6040
		}                                                                                                                    // 6041
                                                                                                                       // 6042
		return moment.duration(slotDuration); // fall back. clone                                                            // 6043
	},                                                                                                                    // 6044
                                                                                                                       // 6045
                                                                                                                       // 6046
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 6047
	computeColHeadFormat: function() {                                                                                    // 6048
		if (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                           // 6049
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 6050
		}                                                                                                                    // 6051
		else { // single day, so full single date string will probably be in title text                                      // 6052
			return 'dddd'; // "Saturday"                                                                                        // 6053
		}                                                                                                                    // 6054
	},                                                                                                                    // 6055
                                                                                                                       // 6056
                                                                                                                       // 6057
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 6058
	computeEventTimeFormat: function() {                                                                                  // 6059
		return this.view.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)                                              // 6060
	},                                                                                                                    // 6061
                                                                                                                       // 6062
                                                                                                                       // 6063
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 6064
	computeDisplayEventEnd: function() {                                                                                  // 6065
		return true;                                                                                                         // 6066
	},                                                                                                                    // 6067
                                                                                                                       // 6068
                                                                                                                       // 6069
	/* Cell System                                                                                                        // 6070
	------------------------------------------------------------------------------------------------------------------*/  // 6071
                                                                                                                       // 6072
                                                                                                                       // 6073
	rangeUpdated: function() {                                                                                            // 6074
		var view = this.view;                                                                                                // 6075
		var colDates = [];                                                                                                   // 6076
		var date;                                                                                                            // 6077
                                                                                                                       // 6078
		date = this.start.clone();                                                                                           // 6079
		while (date.isBefore(this.end)) {                                                                                    // 6080
			colDates.push(date.clone());                                                                                        // 6081
			date.add(1, 'day');                                                                                                 // 6082
			date = view.skipHiddenDays(date);                                                                                   // 6083
		}                                                                                                                    // 6084
                                                                                                                       // 6085
		if (this.isRTL) {                                                                                                    // 6086
			colDates.reverse();                                                                                                 // 6087
		}                                                                                                                    // 6088
                                                                                                                       // 6089
		this.colDates = colDates;                                                                                            // 6090
		this.colCnt = colDates.length;                                                                                       // 6091
		this.rowCnt = Math.ceil((this.maxTime - this.minTime) / this.snapDuration); // # of vertical snaps                   // 6092
	},                                                                                                                    // 6093
                                                                                                                       // 6094
                                                                                                                       // 6095
	// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 6096
	computeCellDate: function(cell) {                                                                                     // 6097
		var date = this.colDates[cell.col];                                                                                  // 6098
		var time = this.computeSnapTime(cell.row);                                                                           // 6099
                                                                                                                       // 6100
		date = this.view.calendar.rezoneDate(date); // give it a 00:00 time                                                  // 6101
		date.time(time);                                                                                                     // 6102
                                                                                                                       // 6103
		return date;                                                                                                         // 6104
	},                                                                                                                    // 6105
                                                                                                                       // 6106
                                                                                                                       // 6107
	// Retrieves the element representing the given column                                                                // 6108
	getColEl: function(col) {                                                                                             // 6109
		return this.dayEls.eq(col);                                                                                          // 6110
	},                                                                                                                    // 6111
                                                                                                                       // 6112
                                                                                                                       // 6113
	/* Dates                                                                                                              // 6114
	------------------------------------------------------------------------------------------------------------------*/  // 6115
                                                                                                                       // 6116
                                                                                                                       // 6117
	// Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day             // 6118
	computeSnapTime: function(row) {                                                                                      // 6119
		return moment.duration(this.minTime + this.snapDuration * row);                                                      // 6120
	},                                                                                                                    // 6121
                                                                                                                       // 6122
                                                                                                                       // 6123
	// Slices up a date range by column into an array of segments                                                         // 6124
	rangeToSegs: function(range) {                                                                                        // 6125
		var colCnt = this.colCnt;                                                                                            // 6126
		var segs = [];                                                                                                       // 6127
		var seg;                                                                                                             // 6128
		var col;                                                                                                             // 6129
		var colDate;                                                                                                         // 6130
		var colRange;                                                                                                        // 6131
                                                                                                                       // 6132
		// normalize :(                                                                                                      // 6133
		range = {                                                                                                            // 6134
			start: range.start.clone().stripZone(),                                                                             // 6135
			end: range.end.clone().stripZone()                                                                                  // 6136
		};                                                                                                                   // 6137
                                                                                                                       // 6138
		for (col = 0; col < colCnt; col++) {                                                                                 // 6139
			colDate = this.colDates[col]; // will be ambig time/timezone                                                        // 6140
			colRange = {                                                                                                        // 6141
				start: colDate.clone().time(this.minTime),                                                                         // 6142
				end: colDate.clone().time(this.maxTime)                                                                            // 6143
			};                                                                                                                  // 6144
			seg = intersectionToSeg(range, colRange); // both will be ambig timezone                                            // 6145
			if (seg) {                                                                                                          // 6146
				seg.col = col;                                                                                                     // 6147
				segs.push(seg);                                                                                                    // 6148
			}                                                                                                                   // 6149
		}                                                                                                                    // 6150
                                                                                                                       // 6151
		return segs;                                                                                                         // 6152
	},                                                                                                                    // 6153
                                                                                                                       // 6154
                                                                                                                       // 6155
	/* Coordinates                                                                                                        // 6156
	------------------------------------------------------------------------------------------------------------------*/  // 6157
                                                                                                                       // 6158
                                                                                                                       // 6159
	updateSize: function(isResize) { // NOT a standard Grid method                                                        // 6160
		this.computeSlatTops();                                                                                              // 6161
                                                                                                                       // 6162
		if (isResize) {                                                                                                      // 6163
			this.updateSegVerticals();                                                                                          // 6164
		}                                                                                                                    // 6165
	},                                                                                                                    // 6166
                                                                                                                       // 6167
                                                                                                                       // 6168
	// Computes the top/bottom coordinates of each "snap" rows                                                            // 6169
	computeRowCoords: function() {                                                                                        // 6170
		var originTop = this.el.offset().top;                                                                                // 6171
		var items = [];                                                                                                      // 6172
		var i;                                                                                                               // 6173
		var item;                                                                                                            // 6174
                                                                                                                       // 6175
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 6176
			item = {                                                                                                            // 6177
				top: originTop + this.computeTimeTop(this.computeSnapTime(i))                                                      // 6178
			};                                                                                                                  // 6179
			if (i > 0) {                                                                                                        // 6180
				items[i - 1].bottom = item.top;                                                                                    // 6181
			}                                                                                                                   // 6182
			items.push(item);                                                                                                   // 6183
		}                                                                                                                    // 6184
		item.bottom = item.top + this.computeTimeTop(this.computeSnapTime(i));                                               // 6185
                                                                                                                       // 6186
		return items;                                                                                                        // 6187
	},                                                                                                                    // 6188
                                                                                                                       // 6189
                                                                                                                       // 6190
	// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 6191
	// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 6192
	computeDateTop: function(date, startOfDayDate) {                                                                      // 6193
		return this.computeTimeTop(                                                                                          // 6194
			moment.duration(                                                                                                    // 6195
				date.clone().stripZone() - startOfDayDate.clone().stripTime()                                                      // 6196
			)                                                                                                                   // 6197
		);                                                                                                                   // 6198
	},                                                                                                                    // 6199
                                                                                                                       // 6200
                                                                                                                       // 6201
	// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 6202
	computeTimeTop: function(time) {                                                                                      // 6203
		var slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 6204
		var slatIndex;                                                                                                       // 6205
		var slatRemainder;                                                                                                   // 6206
		var slatTop;                                                                                                         // 6207
		var slatBottom;                                                                                                      // 6208
                                                                                                                       // 6209
		// constrain. because minTime/maxTime might be customized                                                            // 6210
		slatCoverage = Math.max(0, slatCoverage);                                                                            // 6211
		slatCoverage = Math.min(this.slatEls.length, slatCoverage);                                                          // 6212
                                                                                                                       // 6213
		slatIndex = Math.floor(slatCoverage); // an integer index of the furthest whole slot                                 // 6214
		slatRemainder = slatCoverage - slatIndex;                                                                            // 6215
		slatTop = this.slatTops[slatIndex]; // the top position of the furthest whole slot                                   // 6216
                                                                                                                       // 6217
		if (slatRemainder) { // time spans part-way into the slot                                                            // 6218
			slatBottom = this.slatTops[slatIndex + 1];                                                                          // 6219
			return slatTop + (slatBottom - slatTop) * slatRemainder; // part-way between slots                                  // 6220
		}                                                                                                                    // 6221
		else {                                                                                                               // 6222
			return slatTop;                                                                                                     // 6223
		}                                                                                                                    // 6224
	},                                                                                                                    // 6225
                                                                                                                       // 6226
                                                                                                                       // 6227
	// Queries each `slatEl` for its position relative to the grid's container and stores it in `slatTops`.               // 6228
	// Includes the the bottom of the last slat as the last item in the array.                                            // 6229
	computeSlatTops: function() {                                                                                         // 6230
		var tops = [];                                                                                                       // 6231
		var top;                                                                                                             // 6232
                                                                                                                       // 6233
		this.slatEls.each(function(i, node) {                                                                                // 6234
			top = $(node).position().top;                                                                                       // 6235
			tops.push(top);                                                                                                     // 6236
		});                                                                                                                  // 6237
                                                                                                                       // 6238
		tops.push(top + this.slatEls.last().outerHeight()); // bottom of the last slat                                       // 6239
                                                                                                                       // 6240
		this.slatTops = tops;                                                                                                // 6241
	},                                                                                                                    // 6242
                                                                                                                       // 6243
                                                                                                                       // 6244
	/* Event Drag Visualization                                                                                           // 6245
	------------------------------------------------------------------------------------------------------------------*/  // 6246
                                                                                                                       // 6247
                                                                                                                       // 6248
	// Renders a visual indication of an event being dragged over the specified date(s).                                  // 6249
	// dropLocation's end might be null, as well as `seg`. See Grid::renderDrag for more info.                            // 6250
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 6251
	renderDrag: function(dropLocation, seg) {                                                                             // 6252
                                                                                                                       // 6253
		if (seg) { // if there is event information for this drag, render a helper event                                     // 6254
			this.renderRangeHelper(dropLocation, seg);                                                                          // 6255
			this.applyDragOpacity(this.helperEl);                                                                               // 6256
                                                                                                                       // 6257
			return true; // signal that a helper has been rendered                                                              // 6258
		}                                                                                                                    // 6259
		else {                                                                                                               // 6260
			// otherwise, just render a highlight                                                                               // 6261
			this.renderHighlight(this.eventRangeToSegs(dropLocation));                                                          // 6262
		}                                                                                                                    // 6263
	},                                                                                                                    // 6264
                                                                                                                       // 6265
                                                                                                                       // 6266
	// Unrenders any visual indication of an event being dragged                                                          // 6267
	unrenderDrag: function() {                                                                                            // 6268
		this.unrenderHelper();                                                                                               // 6269
		this.unrenderHighlight();                                                                                            // 6270
	},                                                                                                                    // 6271
                                                                                                                       // 6272
                                                                                                                       // 6273
	/* Event Resize Visualization                                                                                         // 6274
	------------------------------------------------------------------------------------------------------------------*/  // 6275
                                                                                                                       // 6276
                                                                                                                       // 6277
	// Renders a visual indication of an event being resized                                                              // 6278
	renderEventResize: function(range, seg) {                                                                             // 6279
		this.renderRangeHelper(range, seg);                                                                                  // 6280
	},                                                                                                                    // 6281
                                                                                                                       // 6282
                                                                                                                       // 6283
	// Unrenders any visual indication of an event being resized                                                          // 6284
	unrenderEventResize: function() {                                                                                     // 6285
		this.unrenderHelper();                                                                                               // 6286
	},                                                                                                                    // 6287
                                                                                                                       // 6288
                                                                                                                       // 6289
	/* Event Helper                                                                                                       // 6290
	------------------------------------------------------------------------------------------------------------------*/  // 6291
                                                                                                                       // 6292
                                                                                                                       // 6293
	// Renders a mock "helper" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6294
	renderHelper: function(event, sourceSeg) {                                                                            // 6295
		var segs = this.eventsToSegs([ event ]);                                                                             // 6296
		var tableEl;                                                                                                         // 6297
		var i, seg;                                                                                                          // 6298
		var sourceEl;                                                                                                        // 6299
                                                                                                                       // 6300
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 6301
		tableEl = this.renderSegTable(segs);                                                                                 // 6302
                                                                                                                       // 6303
		// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6304
		for (i = 0; i < segs.length; i++) {                                                                                  // 6305
			seg = segs[i];                                                                                                      // 6306
			if (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6307
				sourceEl = sourceSeg.el;                                                                                           // 6308
				seg.el.css({                                                                                                       // 6309
					left: sourceEl.css('left'),                                                                                       // 6310
					right: sourceEl.css('right'),                                                                                     // 6311
					'margin-left': sourceEl.css('margin-left'),                                                                       // 6312
					'margin-right': sourceEl.css('margin-right')                                                                      // 6313
				});                                                                                                                // 6314
			}                                                                                                                   // 6315
		}                                                                                                                    // 6316
                                                                                                                       // 6317
		this.helperEl = $('<div class="fc-helper-skeleton"/>')                                                               // 6318
			.append(tableEl)                                                                                                    // 6319
				.appendTo(this.el);                                                                                                // 6320
	},                                                                                                                    // 6321
                                                                                                                       // 6322
                                                                                                                       // 6323
	// Unrenders any mock helper event                                                                                    // 6324
	unrenderHelper: function() {                                                                                          // 6325
		if (this.helperEl) {                                                                                                 // 6326
			this.helperEl.remove();                                                                                             // 6327
			this.helperEl = null;                                                                                               // 6328
		}                                                                                                                    // 6329
	},                                                                                                                    // 6330
                                                                                                                       // 6331
                                                                                                                       // 6332
	/* Selection                                                                                                          // 6333
	------------------------------------------------------------------------------------------------------------------*/  // 6334
                                                                                                                       // 6335
                                                                                                                       // 6336
	// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6337
	renderSelection: function(range) {                                                                                    // 6338
		if (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6339
			this.renderRangeHelper(range);                                                                                      // 6340
		}                                                                                                                    // 6341
		else {                                                                                                               // 6342
			this.renderHighlight(this.selectionRangeToSegs(range));                                                             // 6343
		}                                                                                                                    // 6344
	},                                                                                                                    // 6345
                                                                                                                       // 6346
                                                                                                                       // 6347
	// Unrenders any visual indication of a selection                                                                     // 6348
	unrenderSelection: function() {                                                                                       // 6349
		this.unrenderHelper();                                                                                               // 6350
		this.unrenderHighlight();                                                                                            // 6351
	},                                                                                                                    // 6352
                                                                                                                       // 6353
                                                                                                                       // 6354
	/* Fill System (highlight, background events, business hours)                                                         // 6355
	------------------------------------------------------------------------------------------------------------------*/  // 6356
                                                                                                                       // 6357
                                                                                                                       // 6358
	// Renders a set of rectangles over the given time segments.                                                          // 6359
	// Only returns segments that successfully rendered.                                                                  // 6360
	renderFill: function(type, segs, className) {                                                                         // 6361
		var segCols;                                                                                                         // 6362
		var skeletonEl;                                                                                                      // 6363
		var trEl;                                                                                                            // 6364
		var col, colSegs;                                                                                                    // 6365
		var tdEl;                                                                                                            // 6366
		var containerEl;                                                                                                     // 6367
		var dayDate;                                                                                                         // 6368
		var i, seg;                                                                                                          // 6369
                                                                                                                       // 6370
		if (segs.length) {                                                                                                   // 6371
                                                                                                                       // 6372
			segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs         // 6373
			segCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                          // 6374
                                                                                                                       // 6375
			className = className || type.toLowerCase();                                                                        // 6376
			skeletonEl = $(                                                                                                     // 6377
				'<div class="fc-' + className + '-skeleton">' +                                                                    // 6378
					'<table><tr/></table>' +                                                                                          // 6379
				'</div>'                                                                                                           // 6380
			);                                                                                                                  // 6381
			trEl = skeletonEl.find('tr');                                                                                       // 6382
                                                                                                                       // 6383
			for (col = 0; col < segCols.length; col++) {                                                                        // 6384
				colSegs = segCols[col];                                                                                            // 6385
				tdEl = $('<td/>').appendTo(trEl);                                                                                  // 6386
                                                                                                                       // 6387
				if (colSegs.length) {                                                                                              // 6388
					containerEl = $('<div class="fc-' + className + '-container"/>').appendTo(tdEl);                                  // 6389
					dayDate = this.colDates[col];                                                                                     // 6390
                                                                                                                       // 6391
					for (i = 0; i < colSegs.length; i++) {                                                                            // 6392
						seg = colSegs[i];                                                                                                // 6393
						containerEl.append(                                                                                              // 6394
							seg.el.css({                                                                                                    // 6395
								top: this.computeDateTop(seg.start, dayDate),                                                                  // 6396
								bottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge                            // 6397
							})                                                                                                              // 6398
						);                                                                                                               // 6399
					}                                                                                                                 // 6400
				}                                                                                                                  // 6401
			}                                                                                                                   // 6402
                                                                                                                       // 6403
			this.bookendCells(trEl, type);                                                                                      // 6404
                                                                                                                       // 6405
			this.el.append(skeletonEl);                                                                                         // 6406
			this.elsByFill[type] = skeletonEl;                                                                                  // 6407
		}                                                                                                                    // 6408
                                                                                                                       // 6409
		return segs;                                                                                                         // 6410
	}                                                                                                                     // 6411
                                                                                                                       // 6412
});                                                                                                                    // 6413
                                                                                                                       // 6414
;;                                                                                                                     // 6415
                                                                                                                       // 6416
/* Event-rendering methods for the TimeGrid class                                                                      // 6417
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6419
TimeGrid.mixin({                                                                                                       // 6420
                                                                                                                       // 6421
	eventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements         // 6422
                                                                                                                       // 6423
                                                                                                                       // 6424
	// Renders the given foreground event segments onto the grid                                                          // 6425
	renderFgSegs: function(segs) {                                                                                        // 6426
		segs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered                  // 6427
                                                                                                                       // 6428
		this.el.append(                                                                                                      // 6429
			this.eventSkeletonEl = $('<div class="fc-content-skeleton"/>')                                                      // 6430
				.append(this.renderSegTable(segs))                                                                                 // 6431
		);                                                                                                                   // 6432
                                                                                                                       // 6433
		return segs; // return only the segs that were actually rendered                                                     // 6434
	},                                                                                                                    // 6435
                                                                                                                       // 6436
                                                                                                                       // 6437
	// Unrenders all currently rendered foreground event segments                                                         // 6438
	unrenderFgSegs: function(segs) {                                                                                      // 6439
		if (this.eventSkeletonEl) {                                                                                          // 6440
			this.eventSkeletonEl.remove();                                                                                      // 6441
			this.eventSkeletonEl = null;                                                                                        // 6442
		}                                                                                                                    // 6443
	},                                                                                                                    // 6444
                                                                                                                       // 6445
                                                                                                                       // 6446
	// Renders and returns the <table> portion of the event-skeleton.                                                     // 6447
	// Returns an object with properties 'tbodyEl' and 'segs'.                                                            // 6448
	renderSegTable: function(segs) {                                                                                      // 6449
		var tableEl = $('<table><tr/></table>');                                                                             // 6450
		var trEl = tableEl.find('tr');                                                                                       // 6451
		var segCols;                                                                                                         // 6452
		var i, seg;                                                                                                          // 6453
		var col, colSegs;                                                                                                    // 6454
		var containerEl;                                                                                                     // 6455
                                                                                                                       // 6456
		segCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                           // 6457
                                                                                                                       // 6458
		this.computeSegVerticals(segs); // compute and assign top/bottom                                                     // 6459
                                                                                                                       // 6460
		for (col = 0; col < segCols.length; col++) { // iterate each column grouping                                         // 6461
			colSegs = segCols[col];                                                                                             // 6462
			this.placeSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array                    // 6463
                                                                                                                       // 6464
			containerEl = $('<div class="fc-event-container"/>');                                                               // 6465
                                                                                                                       // 6466
			// assign positioning CSS and insert into container                                                                 // 6467
			for (i = 0; i < colSegs.length; i++) {                                                                              // 6468
				seg = colSegs[i];                                                                                                  // 6469
				seg.el.css(this.generateSegPositionCss(seg));                                                                      // 6470
                                                                                                                       // 6471
				// if the height is short, add a className for alternate styling                                                   // 6472
				if (seg.bottom - seg.top < 30) {                                                                                   // 6473
					seg.el.addClass('fc-short');                                                                                      // 6474
				}                                                                                                                  // 6475
                                                                                                                       // 6476
				containerEl.append(seg.el);                                                                                        // 6477
			}                                                                                                                   // 6478
                                                                                                                       // 6479
			trEl.append($('<td/>').append(containerEl));                                                                        // 6480
		}                                                                                                                    // 6481
                                                                                                                       // 6482
		this.bookendCells(trEl, 'eventSkeleton');                                                                            // 6483
                                                                                                                       // 6484
		return tableEl;                                                                                                      // 6485
	},                                                                                                                    // 6486
                                                                                                                       // 6487
                                                                                                                       // 6488
	// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.       // 6489
	// NOTE: Also reorders the given array by date!                                                                       // 6490
	placeSlotSegs: function(segs) {                                                                                       // 6491
		var levels;                                                                                                          // 6492
		var level0;                                                                                                          // 6493
		var i;                                                                                                               // 6494
                                                                                                                       // 6495
		this.sortSegs(segs); // order by date                                                                                // 6496
		levels = buildSlotSegLevels(segs);                                                                                   // 6497
		computeForwardSlotSegs(levels);                                                                                      // 6498
                                                                                                                       // 6499
		if ((level0 = levels[0])) {                                                                                          // 6500
                                                                                                                       // 6501
			for (i = 0; i < level0.length; i++) {                                                                               // 6502
				computeSlotSegPressures(level0[i]);                                                                                // 6503
			}                                                                                                                   // 6504
                                                                                                                       // 6505
			for (i = 0; i < level0.length; i++) {                                                                               // 6506
				this.computeSlotSegCoords(level0[i], 0, 0);                                                                        // 6507
			}                                                                                                                   // 6508
		}                                                                                                                    // 6509
	},                                                                                                                    // 6510
                                                                                                                       // 6511
                                                                                                                       // 6512
	// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                          // 6513
	// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and                            // 6514
	// seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.                    // 6515
	//                                                                                                                    // 6516
	// The segment might be part of a "series", which means consecutive segments with the same pressure                   // 6517
	// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                       // 6518
	// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                          // 6519
	// coordinate of the first segment in the series.                                                                     // 6520
	computeSlotSegCoords: function(seg, seriesBackwardPressure, seriesBackwardCoord) {                                    // 6521
		var forwardSegs = seg.forwardSegs;                                                                                   // 6522
		var i;                                                                                                               // 6523
                                                                                                                       // 6524
		if (seg.forwardCoord === undefined) { // not already computed                                                        // 6525
                                                                                                                       // 6526
			if (!forwardSegs.length) {                                                                                          // 6527
                                                                                                                       // 6528
				// if there are no forward segments, this segment should butt up against the edge                                  // 6529
				seg.forwardCoord = 1;                                                                                              // 6530
			}                                                                                                                   // 6531
			else {                                                                                                              // 6532
                                                                                                                       // 6533
				// sort highest pressure first                                                                                     // 6534
				this.sortForwardSlotSegs(forwardSegs);                                                                             // 6535
                                                                                                                       // 6536
				// this segment's forwardCoord will be calculated from the backwardCoord of the                                    // 6537
				// highest-pressure forward segment.                                                                               // 6538
				this.computeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                        // 6539
				seg.forwardCoord = forwardSegs[0].backwardCoord;                                                                   // 6540
			}                                                                                                                   // 6541
                                                                                                                       // 6542
			// calculate the backwardCoord from the forwardCoord. consider the series                                           // 6543
			seg.backwardCoord = seg.forwardCoord -                                                                              // 6544
				(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                           // 6545
				(seriesBackwardPressure + 1); // # of segments in the series                                                       // 6546
                                                                                                                       // 6547
			// use this segment's coordinates to computed the coordinates of the less-pressurized                               // 6548
			// forward segments                                                                                                 // 6549
			for (i=0; i<forwardSegs.length; i++) {                                                                              // 6550
				this.computeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);                                                    // 6551
			}                                                                                                                   // 6552
		}                                                                                                                    // 6553
	},                                                                                                                    // 6554
                                                                                                                       // 6555
                                                                                                                       // 6556
	// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.            // 6557
	// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.                              // 6558
	updateSegVerticals: function() {                                                                                      // 6559
		var allSegs = (this.segs || []).concat(this.businessHourSegs || []);                                                 // 6560
		var i;                                                                                                               // 6561
                                                                                                                       // 6562
		this.computeSegVerticals(allSegs);                                                                                   // 6563
                                                                                                                       // 6564
		for (i = 0; i < allSegs.length; i++) {                                                                               // 6565
			allSegs[i].el.css(                                                                                                  // 6566
				this.generateSegVerticalCss(allSegs[i])                                                                            // 6567
			);                                                                                                                  // 6568
		}                                                                                                                    // 6569
	},                                                                                                                    // 6570
                                                                                                                       // 6571
                                                                                                                       // 6572
	// For each segment in an array, computes and assigns its top and bottom properties                                   // 6573
	computeSegVerticals: function(segs) {                                                                                 // 6574
		var i, seg;                                                                                                          // 6575
                                                                                                                       // 6576
		for (i = 0; i < segs.length; i++) {                                                                                  // 6577
			seg = segs[i];                                                                                                      // 6578
			seg.top = this.computeDateTop(seg.start, seg.start);                                                                // 6579
			seg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 6580
		}                                                                                                                    // 6581
	},                                                                                                                    // 6582
                                                                                                                       // 6583
                                                                                                                       // 6584
	// Renders the HTML for a single event segment's default rendering                                                    // 6585
	fgSegHtml: function(seg, disableResizing) {                                                                           // 6586
		var view = this.view;                                                                                                // 6587
		var event = seg.event;                                                                                               // 6588
		var isDraggable = view.isEventDraggable(event);                                                                      // 6589
		var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6590
		var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6591
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6592
		var skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 6593
		var timeText;                                                                                                        // 6594
		var fullTimeText; // more verbose time text. for the print stylesheet                                                // 6595
		var startTimeText; // just the start time text                                                                       // 6596
                                                                                                                       // 6597
		classes.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6598
                                                                                                                       // 6599
		if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6600
			// Don't display time text on segments that run entirely through a day.                                             // 6601
			// That would appear as midnight-midnight and would look dumb.                                                      // 6602
			// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6603
			if (seg.isStart || seg.isEnd) {                                                                                     // 6604
				timeText = this.getEventTimeText(seg);                                                                             // 6605
				fullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6606
				startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6607
			}                                                                                                                   // 6608
		} else {                                                                                                             // 6609
			// Display the normal time text for the *event's* times                                                             // 6610
			timeText = this.getEventTimeText(event);                                                                            // 6611
			fullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6612
			startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6613
		}                                                                                                                    // 6614
                                                                                                                       // 6615
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 6616
			(event.url ?                                                                                                        // 6617
				' href="' + htmlEscape(event.url) + '"' :                                                                          // 6618
				''                                                                                                                 // 6619
				) +                                                                                                                // 6620
			(skinCss ?                                                                                                          // 6621
				' style="' + skinCss + '"' :                                                                                       // 6622
				''                                                                                                                 // 6623
				) +                                                                                                                // 6624
			'>' +                                                                                                               // 6625
				'<div class="fc-content">' +                                                                                       // 6626
					(timeText ?                                                                                                       // 6627
						'<div class="fc-time"' +                                                                                         // 6628
						' data-start="' + htmlEscape(startTimeText) + '"' +                                                              // 6629
						' data-full="' + htmlEscape(fullTimeText) + '"' +                                                                // 6630
						'>' +                                                                                                            // 6631
							'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6632
						'</div>' :                                                                                                       // 6633
						''                                                                                                               // 6634
						) +                                                                                                              // 6635
					(event.title ?                                                                                                    // 6636
						'<div class="fc-title">' +                                                                                       // 6637
							htmlEscape(event.title) +                                                                                       // 6638
						'</div>' :                                                                                                       // 6639
						''                                                                                                               // 6640
						) +                                                                                                              // 6641
				'</div>' +                                                                                                         // 6642
				'<div class="fc-bg"/>' +                                                                                           // 6643
				/* TODO: write CSS for this                                                                                        // 6644
				(isResizableFromStart ?                                                                                            // 6645
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 6646
					''                                                                                                                // 6647
					) +                                                                                                               // 6648
				*/                                                                                                                 // 6649
				(isResizableFromEnd ?                                                                                              // 6650
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 6651
					''                                                                                                                // 6652
					) +                                                                                                               // 6653
			'</a>';                                                                                                             // 6654
	},                                                                                                                    // 6655
                                                                                                                       // 6656
                                                                                                                       // 6657
	// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 6658
	// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 6659
	generateSegPositionCss: function(seg) {                                                                               // 6660
		var shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 6661
		var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 6662
		var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 6663
		var props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 6664
		var left; // amount of space from left edge, a fraction of the total width                                           // 6665
		var right; // amount of space from right edge, a fraction of the total width                                         // 6666
                                                                                                                       // 6667
		if (shouldOverlap) {                                                                                                 // 6668
			// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 6669
			forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 6670
		}                                                                                                                    // 6671
                                                                                                                       // 6672
		if (this.isRTL) {                                                                                                    // 6673
			left = 1 - forwardCoord;                                                                                            // 6674
			right = backwardCoord;                                                                                              // 6675
		}                                                                                                                    // 6676
		else {                                                                                                               // 6677
			left = backwardCoord;                                                                                               // 6678
			right = 1 - forwardCoord;                                                                                           // 6679
		}                                                                                                                    // 6680
                                                                                                                       // 6681
		props.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 6682
		props.left = left * 100 + '%';                                                                                       // 6683
		props.right = right * 100 + '%';                                                                                     // 6684
                                                                                                                       // 6685
		if (shouldOverlap && seg.forwardPressure) {                                                                          // 6686
			// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 6687
			props[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 6688
		}                                                                                                                    // 6689
                                                                                                                       // 6690
		return props;                                                                                                        // 6691
	},                                                                                                                    // 6692
                                                                                                                       // 6693
                                                                                                                       // 6694
	// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 6695
	generateSegVerticalCss: function(seg) {                                                                               // 6696
		return {                                                                                                             // 6697
			top: seg.top,                                                                                                       // 6698
			bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 6699
		};                                                                                                                   // 6700
	},                                                                                                                    // 6701
                                                                                                                       // 6702
                                                                                                                       // 6703
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6704
	groupSegCols: function(segs) {                                                                                        // 6705
		var segCols = [];                                                                                                    // 6706
		var i;                                                                                                               // 6707
                                                                                                                       // 6708
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 6709
			segCols.push([]);                                                                                                   // 6710
		}                                                                                                                    // 6711
                                                                                                                       // 6712
		for (i = 0; i < segs.length; i++) {                                                                                  // 6713
			segCols[segs[i].col].push(segs[i]);                                                                                 // 6714
		}                                                                                                                    // 6715
                                                                                                                       // 6716
		return segCols;                                                                                                      // 6717
	},                                                                                                                    // 6718
                                                                                                                       // 6719
                                                                                                                       // 6720
	sortForwardSlotSegs: function(forwardSegs) {                                                                          // 6721
		forwardSegs.sort(proxy(this, 'compareForwardSlotSegs'));                                                             // 6722
	},                                                                                                                    // 6723
                                                                                                                       // 6724
                                                                                                                       // 6725
	// A cmp function for determining which forward segment to rely on more when computing coordinates.                   // 6726
	compareForwardSlotSegs: function(seg1, seg2) {                                                                        // 6727
		// put higher-pressure first                                                                                         // 6728
		return seg2.forwardPressure - seg1.forwardPressure ||                                                                // 6729
			// put segments that are closer to initial edge first (and favor ones with no coords yet)                           // 6730
			(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                            // 6731
			// do normal sorting...                                                                                             // 6732
			this.compareSegs(seg1, seg2);                                                                                       // 6733
	}                                                                                                                     // 6734
                                                                                                                       // 6735
});                                                                                                                    // 6736
                                                                                                                       // 6737
                                                                                                                       // 6738
// Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is      // 6739
// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
function buildSlotSegLevels(segs) {                                                                                    // 6741
	var levels = [];                                                                                                      // 6742
	var i, seg;                                                                                                           // 6743
	var j;                                                                                                                // 6744
                                                                                                                       // 6745
	for (i=0; i<segs.length; i++) {                                                                                       // 6746
		seg = segs[i];                                                                                                       // 6747
                                                                                                                       // 6748
		// go through all the levels and stop on the first level where there are no collisions                               // 6749
		for (j=0; j<levels.length; j++) {                                                                                    // 6750
			if (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 6751
				break;                                                                                                             // 6752
			}                                                                                                                   // 6753
		}                                                                                                                    // 6754
                                                                                                                       // 6755
		seg.level = j;                                                                                                       // 6756
                                                                                                                       // 6757
		(levels[j] || (levels[j] = [])).push(seg);                                                                           // 6758
	}                                                                                                                     // 6759
                                                                                                                       // 6760
	return levels;                                                                                                        // 6761
}                                                                                                                      // 6762
                                                                                                                       // 6763
                                                                                                                       // 6764
// For every segment, figure out the other segments that are in subsequent                                             // 6765
// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 6766
function computeForwardSlotSegs(levels) {                                                                              // 6767
	var i, level;                                                                                                         // 6768
	var j, seg;                                                                                                           // 6769
	var k;                                                                                                                // 6770
                                                                                                                       // 6771
	for (i=0; i<levels.length; i++) {                                                                                     // 6772
		level = levels[i];                                                                                                   // 6773
                                                                                                                       // 6774
		for (j=0; j<level.length; j++) {                                                                                     // 6775
			seg = level[j];                                                                                                     // 6776
                                                                                                                       // 6777
			seg.forwardSegs = [];                                                                                               // 6778
			for (k=i+1; k<levels.length; k++) {                                                                                 // 6779
				computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 6780
			}                                                                                                                   // 6781
		}                                                                                                                    // 6782
	}                                                                                                                     // 6783
}                                                                                                                      // 6784
                                                                                                                       // 6785
                                                                                                                       // 6786
// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 6787
// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 6788
function computeSlotSegPressures(seg) {                                                                                // 6789
	var forwardSegs = seg.forwardSegs;                                                                                    // 6790
	var forwardPressure = 0;                                                                                              // 6791
	var i, forwardSeg;                                                                                                    // 6792
                                                                                                                       // 6793
	if (seg.forwardPressure === undefined) { // not already computed                                                      // 6794
                                                                                                                       // 6795
		for (i=0; i<forwardSegs.length; i++) {                                                                               // 6796
			forwardSeg = forwardSegs[i];                                                                                        // 6797
                                                                                                                       // 6798
			// figure out the child's maximum forward path                                                                      // 6799
			computeSlotSegPressures(forwardSeg);                                                                                // 6800
                                                                                                                       // 6801
			// either use the existing maximum, or use the child's forward pressure                                             // 6802
			// plus one (for the forwardSeg itself)                                                                             // 6803
			forwardPressure = Math.max(                                                                                         // 6804
				forwardPressure,                                                                                                   // 6805
				1 + forwardSeg.forwardPressure                                                                                     // 6806
			);                                                                                                                  // 6807
		}                                                                                                                    // 6808
                                                                                                                       // 6809
		seg.forwardPressure = forwardPressure;                                                                               // 6810
	}                                                                                                                     // 6811
}                                                                                                                      // 6812
                                                                                                                       // 6813
                                                                                                                       // 6814
// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 6815
// Append into an optionally-supplied `results` array and return.                                                      // 6816
function computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 6817
	results = results || [];                                                                                              // 6818
                                                                                                                       // 6819
	for (var i=0; i<otherSegs.length; i++) {                                                                              // 6820
		if (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 6821
			results.push(otherSegs[i]);                                                                                         // 6822
		}                                                                                                                    // 6823
	}                                                                                                                     // 6824
                                                                                                                       // 6825
	return results;                                                                                                       // 6826
}                                                                                                                      // 6827
                                                                                                                       // 6828
                                                                                                                       // 6829
// Do these segments occupy the same vertical space?                                                                   // 6830
function isSlotSegCollision(seg1, seg2) {                                                                              // 6831
	return seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 6832
}                                                                                                                      // 6833
                                                                                                                       // 6834
;;                                                                                                                     // 6835
                                                                                                                       // 6836
/* An abstract class from which other views inherit from                                                               // 6837
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6839
var View = fc.View = Class.extend({                                                                                    // 6840
                                                                                                                       // 6841
	type: null, // subclass' view name (string)                                                                           // 6842
	name: null, // deprecated. use `type` instead                                                                         // 6843
	title: null, // the text that will be displayed in the header's title                                                 // 6844
                                                                                                                       // 6845
	calendar: null, // owner Calendar object                                                                              // 6846
	options: null, // hash containing all options. already merged with view-specific-options                              // 6847
	coordMap: null, // a CoordMap object for converting pixel regions to dates                                            // 6848
	el: null, // the view's containing element. set by Calendar                                                           // 6849
                                                                                                                       // 6850
	displaying: null, // a promise representing the state of rendering. null if no render requested                       // 6851
	isSkeletonRendered: false,                                                                                            // 6852
	isEventsRendered: false,                                                                                              // 6853
                                                                                                                       // 6854
	// range the view is actually displaying (moments)                                                                    // 6855
	start: null,                                                                                                          // 6856
	end: null, // exclusive                                                                                               // 6857
                                                                                                                       // 6858
	// range the view is formally responsible for (moments)                                                               // 6859
	// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 6860
	intervalStart: null,                                                                                                  // 6861
	intervalEnd: null, // exclusive                                                                                       // 6862
	intervalDuration: null,                                                                                               // 6863
	intervalUnit: null, // name of largest unit being displayed, like "month" or "week"                                   // 6864
                                                                                                                       // 6865
	isRTL: false,                                                                                                         // 6866
	isSelected: false, // boolean whether a range of time is user-selected or not                                         // 6867
                                                                                                                       // 6868
	eventOrderSpecs: null, // criteria for ordering events when they have same date/time                                  // 6869
                                                                                                                       // 6870
	// subclasses can optionally use a scroll container                                                                   // 6871
	scrollerEl: null, // the element that will most likely scroll when content is too tall                                // 6872
	scrollTop: null, // cached vertical scroll value                                                                      // 6873
                                                                                                                       // 6874
	// classNames styled by jqui themes                                                                                   // 6875
	widgetHeaderClass: null,                                                                                              // 6876
	widgetContentClass: null,                                                                                             // 6877
	highlightStateClass: null,                                                                                            // 6878
                                                                                                                       // 6879
	// for date utils, computed from options                                                                              // 6880
	nextDayThreshold: null,                                                                                               // 6881
	isHiddenDayHash: null,                                                                                                // 6882
                                                                                                                       // 6883
	// document handlers, bound to `this` object                                                                          // 6884
	documentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 6885
                                                                                                                       // 6886
                                                                                                                       // 6887
	constructor: function(calendar, type, options, intervalDuration) {                                                    // 6888
                                                                                                                       // 6889
		this.calendar = calendar;                                                                                            // 6890
		this.type = this.name = type; // .name is deprecated                                                                 // 6891
		this.options = options;                                                                                              // 6892
		this.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 6893
                                                                                                                       // 6894
		this.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 6895
		this.initThemingProps();                                                                                             // 6896
		this.initHiddenDays();                                                                                               // 6897
		this.isRTL = this.opt('isRTL');                                                                                      // 6898
                                                                                                                       // 6899
		this.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));                                                      // 6900
                                                                                                                       // 6901
		this.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 6902
                                                                                                                       // 6903
		this.initialize();                                                                                                   // 6904
	},                                                                                                                    // 6905
                                                                                                                       // 6906
                                                                                                                       // 6907
	// A good place for subclasses to initialize member variables                                                         // 6908
	initialize: function() {                                                                                              // 6909
		// subclasses can implement                                                                                          // 6910
	},                                                                                                                    // 6911
                                                                                                                       // 6912
                                                                                                                       // 6913
	// Retrieves an option with the given name                                                                            // 6914
	opt: function(name) {                                                                                                 // 6915
		return this.options[name];                                                                                           // 6916
	},                                                                                                                    // 6917
                                                                                                                       // 6918
                                                                                                                       // 6919
	// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 6920
	trigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 6921
		var calendar = this.calendar;                                                                                        // 6922
                                                                                                                       // 6923
		return calendar.trigger.apply(                                                                                       // 6924
			calendar,                                                                                                           // 6925
			[name, thisObj || this].concat(                                                                                     // 6926
				Array.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 6927
				[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 6928
			)                                                                                                                   // 6929
		);                                                                                                                   // 6930
	},                                                                                                                    // 6931
                                                                                                                       // 6932
                                                                                                                       // 6933
	/* Dates                                                                                                              // 6934
	------------------------------------------------------------------------------------------------------------------*/  // 6935
                                                                                                                       // 6936
                                                                                                                       // 6937
	// Updates all internal dates to center around the given current date                                                 // 6938
	setDate: function(date) {                                                                                             // 6939
		this.setRange(this.computeRange(date));                                                                              // 6940
	},                                                                                                                    // 6941
                                                                                                                       // 6942
                                                                                                                       // 6943
	// Updates all internal dates for displaying the given range.                                                         // 6944
	// Expects all values to be normalized (like what computeRange does).                                                 // 6945
	setRange: function(range) {                                                                                           // 6946
		$.extend(this, range);                                                                                               // 6947
		this.updateTitle();                                                                                                  // 6948
	},                                                                                                                    // 6949
                                                                                                                       // 6950
                                                                                                                       // 6951
	// Given a single current date, produce information about what range to display.                                      // 6952
	// Subclasses can override. Must return all properties.                                                               // 6953
	computeRange: function(date) {                                                                                        // 6954
		var intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 6955
		var intervalStart = date.clone().startOf(intervalUnit);                                                              // 6956
		var intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 6957
		var start, end;                                                                                                      // 6958
                                                                                                                       // 6959
		// normalize the range's time-ambiguity                                                                              // 6960
		if (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 6961
			intervalStart.stripTime();                                                                                          // 6962
			intervalEnd.stripTime();                                                                                            // 6963
		}                                                                                                                    // 6964
		else { // needs to have a time?                                                                                      // 6965
			if (!intervalStart.hasTime()) {                                                                                     // 6966
				intervalStart = this.calendar.rezoneDate(intervalStart); // convert to current timezone, with 00:00                // 6967
			}                                                                                                                   // 6968
			if (!intervalEnd.hasTime()) {                                                                                       // 6969
				intervalEnd = this.calendar.rezoneDate(intervalEnd); // convert to current timezone, with 00:00                    // 6970
			}                                                                                                                   // 6971
		}                                                                                                                    // 6972
                                                                                                                       // 6973
		start = intervalStart.clone();                                                                                       // 6974
		start = this.skipHiddenDays(start);                                                                                  // 6975
		end = intervalEnd.clone();                                                                                           // 6976
		end = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 6977
                                                                                                                       // 6978
		return {                                                                                                             // 6979
			intervalUnit: intervalUnit,                                                                                         // 6980
			intervalStart: intervalStart,                                                                                       // 6981
			intervalEnd: intervalEnd,                                                                                           // 6982
			start: start,                                                                                                       // 6983
			end: end                                                                                                            // 6984
		};                                                                                                                   // 6985
	},                                                                                                                    // 6986
                                                                                                                       // 6987
                                                                                                                       // 6988
	// Computes the new date when the user hits the prev button, given the current date                                   // 6989
	computePrevDate: function(date) {                                                                                     // 6990
		return this.massageCurrentDate(                                                                                      // 6991
			date.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 6992
		);                                                                                                                   // 6993
	},                                                                                                                    // 6994
                                                                                                                       // 6995
                                                                                                                       // 6996
	// Computes the new date when the user hits the next button, given the current date                                   // 6997
	computeNextDate: function(date) {                                                                                     // 6998
		return this.massageCurrentDate(                                                                                      // 6999
			date.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 7000
		);                                                                                                                   // 7001
	},                                                                                                                    // 7002
                                                                                                                       // 7003
                                                                                                                       // 7004
	// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 7005
	// visible. `direction` is optional and indicates which direction the current date was being                          // 7006
	// incremented or decremented (1 or -1).                                                                              // 7007
	massageCurrentDate: function(date, direction) {                                                                       // 7008
		if (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 7009
			if (this.isHiddenDay(date)) {                                                                                       // 7010
				date = this.skipHiddenDays(date, direction);                                                                       // 7011
				date.startOf('day');                                                                                               // 7012
			}                                                                                                                   // 7013
		}                                                                                                                    // 7014
                                                                                                                       // 7015
		return date;                                                                                                         // 7016
	},                                                                                                                    // 7017
                                                                                                                       // 7018
                                                                                                                       // 7019
	/* Title and Date Formatting                                                                                          // 7020
	------------------------------------------------------------------------------------------------------------------*/  // 7021
                                                                                                                       // 7022
                                                                                                                       // 7023
	// Sets the view's title property to the most updated computed value                                                  // 7024
	updateTitle: function() {                                                                                             // 7025
		this.title = this.computeTitle();                                                                                    // 7026
	},                                                                                                                    // 7027
                                                                                                                       // 7028
                                                                                                                       // 7029
	// Computes what the title at the top of the calendar should be for this view                                         // 7030
	computeTitle: function() {                                                                                            // 7031
		return this.formatRange(                                                                                             // 7032
			{ start: this.intervalStart, end: this.intervalEnd },                                                               // 7033
			this.opt('titleFormat') || this.computeTitleFormat(),                                                               // 7034
			this.opt('titleRangeSeparator')                                                                                     // 7035
		);                                                                                                                   // 7036
	},                                                                                                                    // 7037
                                                                                                                       // 7038
                                                                                                                       // 7039
	// Generates the format string that should be used to generate the title for the current date range.                  // 7040
	// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 7041
	computeTitleFormat: function() {                                                                                      // 7042
		if (this.intervalUnit == 'year') {                                                                                   // 7043
			return 'YYYY';                                                                                                      // 7044
		}                                                                                                                    // 7045
		else if (this.intervalUnit == 'month') {                                                                             // 7046
			return this.opt('monthYearFormat'); // like "September 2014"                                                        // 7047
		}                                                                                                                    // 7048
		else if (this.intervalDuration.as('days') > 1) {                                                                     // 7049
			return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"                                                    // 7050
		}                                                                                                                    // 7051
		else {                                                                                                               // 7052
			return 'LL'; // one day. longer, like "September 9 2014"                                                            // 7053
		}                                                                                                                    // 7054
	},                                                                                                                    // 7055
                                                                                                                       // 7056
                                                                                                                       // 7057
	// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 7058
	// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 7059
	formatRange: function(range, formatStr, separator) {                                                                  // 7060
		var end = range.end;                                                                                                 // 7061
                                                                                                                       // 7062
		if (!end.hasTime()) { // all-day?                                                                                    // 7063
			end = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 7064
		}                                                                                                                    // 7065
                                                                                                                       // 7066
		return formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 7067
	},                                                                                                                    // 7068
                                                                                                                       // 7069
                                                                                                                       // 7070
	/* Rendering                                                                                                          // 7071
	------------------------------------------------------------------------------------------------------------------*/  // 7072
                                                                                                                       // 7073
                                                                                                                       // 7074
	// Sets the container element that the view should render inside of.                                                  // 7075
	// Does other DOM-related initializations.                                                                            // 7076
	setElement: function(el) {                                                                                            // 7077
		this.el = el;                                                                                                        // 7078
		this.bindGlobalHandlers();                                                                                           // 7079
	},                                                                                                                    // 7080
                                                                                                                       // 7081
                                                                                                                       // 7082
	// Removes the view's container element from the DOM, clearing any content beforehand.                                // 7083
	// Undoes any other DOM-related attachments.                                                                          // 7084
	removeElement: function() {                                                                                           // 7085
		this.clear(); // clears all content                                                                                  // 7086
                                                                                                                       // 7087
		// clean up the skeleton                                                                                             // 7088
		if (this.isSkeletonRendered) {                                                                                       // 7089
			this.unrenderSkeleton();                                                                                            // 7090
			this.isSkeletonRendered = false;                                                                                    // 7091
		}                                                                                                                    // 7092
                                                                                                                       // 7093
		this.unbindGlobalHandlers();                                                                                         // 7094
                                                                                                                       // 7095
		this.el.remove();                                                                                                    // 7096
                                                                                                                       // 7097
		// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 7098
		// We don't null-out the View's other jQuery element references upon destroy,                                        // 7099
		//  so we shouldn't kill this.el either.                                                                             // 7100
	},                                                                                                                    // 7101
                                                                                                                       // 7102
                                                                                                                       // 7103
	// Does everything necessary to display the view centered around the given date.                                      // 7104
	// Does every type of rendering EXCEPT rendering events.                                                              // 7105
	// Is asychronous and returns a promise.                                                                              // 7106
	display: function(date) {                                                                                             // 7107
		var _this = this;                                                                                                    // 7108
		var scrollState = null;                                                                                              // 7109
                                                                                                                       // 7110
		if (this.displaying) {                                                                                               // 7111
			scrollState = this.queryScroll();                                                                                   // 7112
		}                                                                                                                    // 7113
                                                                                                                       // 7114
		return this.clear().then(function() { // clear the content first (async)                                             // 7115
			return (                                                                                                            // 7116
				_this.displaying =                                                                                                 // 7117
					$.when(_this.displayView(date)) // displayView might return a promise                                             // 7118
						.then(function() {                                                                                               // 7119
							_this.forceScroll(_this.computeInitialScroll(scrollState));                                                     // 7120
							_this.triggerRender();                                                                                          // 7121
						})                                                                                                               // 7122
			);                                                                                                                  // 7123
		});                                                                                                                  // 7124
	},                                                                                                                    // 7125
                                                                                                                       // 7126
                                                                                                                       // 7127
	// Does everything necessary to clear the content of the view.                                                        // 7128
	// Clears dates and events. Does not clear the skeleton.                                                              // 7129
	// Is asychronous and returns a promise.                                                                              // 7130
	clear: function() {                                                                                                   // 7131
		var _this = this;                                                                                                    // 7132
		var displaying = this.displaying;                                                                                    // 7133
                                                                                                                       // 7134
		if (displaying) { // previously displayed, or in the process of being displayed?                                     // 7135
			return displaying.then(function() { // wait for the display to finish                                               // 7136
				_this.displaying = null;                                                                                           // 7137
				_this.clearEvents();                                                                                               // 7138
				return _this.clearView(); // might return a promise. chain it                                                      // 7139
			});                                                                                                                 // 7140
		}                                                                                                                    // 7141
		else {                                                                                                               // 7142
			return $.when(); // an immediately-resolved promise                                                                 // 7143
		}                                                                                                                    // 7144
	},                                                                                                                    // 7145
                                                                                                                       // 7146
                                                                                                                       // 7147
	// Displays the view's non-event content, such as date-related content or anything required by events.                // 7148
	// Renders the view's non-content skeleton if necessary.                                                              // 7149
	// Can be asynchronous and return a promise.                                                                          // 7150
	displayView: function(date) {                                                                                         // 7151
		if (!this.isSkeletonRendered) {                                                                                      // 7152
			this.renderSkeleton();                                                                                              // 7153
			this.isSkeletonRendered = true;                                                                                     // 7154
		}                                                                                                                    // 7155
		this.setDate(date);                                                                                                  // 7156
		if (this.render) {                                                                                                   // 7157
			this.render(); // TODO: deprecate                                                                                   // 7158
		}                                                                                                                    // 7159
		this.renderDates();                                                                                                  // 7160
		this.updateSize();                                                                                                   // 7161
		this.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 7162
	},                                                                                                                    // 7163
                                                                                                                       // 7164
                                                                                                                       // 7165
	// Unrenders the view content that was rendered in displayView.                                                       // 7166
	// Can be asynchronous and return a promise.                                                                          // 7167
	clearView: function() {                                                                                               // 7168
		this.unselect();                                                                                                     // 7169
		this.triggerUnrender();                                                                                              // 7170
		this.unrenderBusinessHours();                                                                                        // 7171
		this.unrenderDates();                                                                                                // 7172
		if (this.destroy) {                                                                                                  // 7173
			this.destroy(); // TODO: deprecate                                                                                  // 7174
		}                                                                                                                    // 7175
	},                                                                                                                    // 7176
                                                                                                                       // 7177
                                                                                                                       // 7178
	// Renders the basic structure of the view before any content is rendered                                             // 7179
	renderSkeleton: function() {                                                                                          // 7180
		// subclasses should implement                                                                                       // 7181
	},                                                                                                                    // 7182
                                                                                                                       // 7183
                                                                                                                       // 7184
	// Unrenders the basic structure of the view                                                                          // 7185
	unrenderSkeleton: function() {                                                                                        // 7186
		// subclasses should implement                                                                                       // 7187
	},                                                                                                                    // 7188
                                                                                                                       // 7189
                                                                                                                       // 7190
	// Renders the view's date-related content (like cells that represent days/times).                                    // 7191
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 7192
	renderDates: function() {                                                                                             // 7193
		// subclasses should implement                                                                                       // 7194
	},                                                                                                                    // 7195
                                                                                                                       // 7196
                                                                                                                       // 7197
	// Unrenders the view's date-related content                                                                          // 7198
	unrenderDates: function() {                                                                                           // 7199
		// subclasses should override                                                                                        // 7200
	},                                                                                                                    // 7201
                                                                                                                       // 7202
                                                                                                                       // 7203
	// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 7204
	renderBusinessHours: function() {                                                                                     // 7205
		// subclasses should implement                                                                                       // 7206
	},                                                                                                                    // 7207
                                                                                                                       // 7208
                                                                                                                       // 7209
	// Unrenders previously-rendered business-hours                                                                       // 7210
	unrenderBusinessHours: function() {                                                                                   // 7211
		// subclasses should implement                                                                                       // 7212
	},                                                                                                                    // 7213
                                                                                                                       // 7214
                                                                                                                       // 7215
	// Signals that the view's content has been rendered                                                                  // 7216
	triggerRender: function() {                                                                                           // 7217
		this.trigger('viewRender', this, this, this.el);                                                                     // 7218
	},                                                                                                                    // 7219
                                                                                                                       // 7220
                                                                                                                       // 7221
	// Signals that the view's content is about to be unrendered                                                          // 7222
	triggerUnrender: function() {                                                                                         // 7223
		this.trigger('viewDestroy', this, this, this.el);                                                                    // 7224
	},                                                                                                                    // 7225
                                                                                                                       // 7226
                                                                                                                       // 7227
	// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 7228
	bindGlobalHandlers: function() {                                                                                      // 7229
		$(document).on('mousedown', this.documentMousedownProxy);                                                            // 7230
	},                                                                                                                    // 7231
                                                                                                                       // 7232
                                                                                                                       // 7233
	// Unbinds DOM handlers from elements that reside outside the view container                                          // 7234
	unbindGlobalHandlers: function() {                                                                                    // 7235
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 7236
	},                                                                                                                    // 7237
                                                                                                                       // 7238
                                                                                                                       // 7239
	// Initializes internal variables related to theming                                                                  // 7240
	initThemingProps: function() {                                                                                        // 7241
		var tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 7242
                                                                                                                       // 7243
		this.widgetHeaderClass = tm + '-widget-header';                                                                      // 7244
		this.widgetContentClass = tm + '-widget-content';                                                                    // 7245
		this.highlightStateClass = tm + '-state-highlight';                                                                  // 7246
	},                                                                                                                    // 7247
                                                                                                                       // 7248
                                                                                                                       // 7249
	/* Dimensions                                                                                                         // 7250
	------------------------------------------------------------------------------------------------------------------*/  // 7251
                                                                                                                       // 7252
                                                                                                                       // 7253
	// Refreshes anything dependant upon sizing of the container element of the grid                                      // 7254
	updateSize: function(isResize) {                                                                                      // 7255
		var scrollState;                                                                                                     // 7256
                                                                                                                       // 7257
		if (isResize) {                                                                                                      // 7258
			scrollState = this.queryScroll();                                                                                   // 7259
		}                                                                                                                    // 7260
                                                                                                                       // 7261
		this.updateHeight(isResize);                                                                                         // 7262
		this.updateWidth(isResize);                                                                                          // 7263
                                                                                                                       // 7264
		if (isResize) {                                                                                                      // 7265
			this.setScroll(scrollState);                                                                                        // 7266
		}                                                                                                                    // 7267
	},                                                                                                                    // 7268
                                                                                                                       // 7269
                                                                                                                       // 7270
	// Refreshes the horizontal dimensions of the calendar                                                                // 7271
	updateWidth: function(isResize) {                                                                                     // 7272
		// subclasses should implement                                                                                       // 7273
	},                                                                                                                    // 7274
                                                                                                                       // 7275
                                                                                                                       // 7276
	// Refreshes the vertical dimensions of the calendar                                                                  // 7277
	updateHeight: function(isResize) {                                                                                    // 7278
		var calendar = this.calendar; // we poll the calendar for height information                                         // 7279
                                                                                                                       // 7280
		this.setHeight(                                                                                                      // 7281
			calendar.getSuggestedViewHeight(),                                                                                  // 7282
			calendar.isHeightAuto()                                                                                             // 7283
		);                                                                                                                   // 7284
	},                                                                                                                    // 7285
                                                                                                                       // 7286
                                                                                                                       // 7287
	// Updates the vertical dimensions of the calendar to the specified height.                                           // 7288
	// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its "natural" height.       // 7289
	setHeight: function(height, isAuto) {                                                                                 // 7290
		// subclasses should implement                                                                                       // 7291
	},                                                                                                                    // 7292
                                                                                                                       // 7293
                                                                                                                       // 7294
	/* Scroller                                                                                                           // 7295
	------------------------------------------------------------------------------------------------------------------*/  // 7296
                                                                                                                       // 7297
                                                                                                                       // 7298
	// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 7299
	// Utility for subclasses.                                                                                            // 7300
	computeScrollerHeight: function(totalHeight) {                                                                        // 7301
		var scrollerEl = this.scrollerEl;                                                                                    // 7302
		var both;                                                                                                            // 7303
		var otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 7304
                                                                                                                       // 7305
		both = this.el.add(scrollerEl);                                                                                      // 7306
                                                                                                                       // 7307
		// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 7308
		both.css({                                                                                                           // 7309
			position: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 7310
			left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 7311
		});                                                                                                                  // 7312
		otherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 7313
		both.css({ position: '', left: '' }); // undo hack                                                                   // 7314
                                                                                                                       // 7315
		return totalHeight - otherHeight;                                                                                    // 7316
	},                                                                                                                    // 7317
                                                                                                                       // 7318
                                                                                                                       // 7319
	// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7320
	// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7321
	computeInitialScroll: function(previousScrollState) {                                                                 // 7322
		return 0;                                                                                                            // 7323
	},                                                                                                                    // 7324
                                                                                                                       // 7325
                                                                                                                       // 7326
	// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7327
	queryScroll: function() {                                                                                             // 7328
		if (this.scrollerEl) {                                                                                               // 7329
			return this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7330
		}                                                                                                                    // 7331
	},                                                                                                                    // 7332
                                                                                                                       // 7333
                                                                                                                       // 7334
	// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7335
	setScroll: function(scrollState) {                                                                                    // 7336
		if (this.scrollerEl) {                                                                                               // 7337
			return this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7338
		}                                                                                                                    // 7339
	},                                                                                                                    // 7340
                                                                                                                       // 7341
                                                                                                                       // 7342
	// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7343
	forceScroll: function(scrollState) {                                                                                  // 7344
		var _this = this;                                                                                                    // 7345
                                                                                                                       // 7346
		this.setScroll(scrollState);                                                                                         // 7347
		setTimeout(function() {                                                                                              // 7348
			_this.setScroll(scrollState);                                                                                       // 7349
		}, 0);                                                                                                               // 7350
	},                                                                                                                    // 7351
                                                                                                                       // 7352
                                                                                                                       // 7353
	/* Event Elements / Segments                                                                                          // 7354
	------------------------------------------------------------------------------------------------------------------*/  // 7355
                                                                                                                       // 7356
                                                                                                                       // 7357
	// Does everything necessary to display the given events onto the current view                                        // 7358
	displayEvents: function(events) {                                                                                     // 7359
		var scrollState = this.queryScroll();                                                                                // 7360
                                                                                                                       // 7361
		this.clearEvents();                                                                                                  // 7362
		this.renderEvents(events);                                                                                           // 7363
		this.isEventsRendered = true;                                                                                        // 7364
		this.setScroll(scrollState);                                                                                         // 7365
		this.triggerEventRender();                                                                                           // 7366
	},                                                                                                                    // 7367
                                                                                                                       // 7368
                                                                                                                       // 7369
	// Does everything necessary to clear the view's currently-rendered events                                            // 7370
	clearEvents: function() {                                                                                             // 7371
		if (this.isEventsRendered) {                                                                                         // 7372
			this.triggerEventUnrender();                                                                                        // 7373
			if (this.destroyEvents) {                                                                                           // 7374
				this.destroyEvents(); // TODO: deprecate                                                                           // 7375
			}                                                                                                                   // 7376
			this.unrenderEvents();                                                                                              // 7377
			this.isEventsRendered = false;                                                                                      // 7378
		}                                                                                                                    // 7379
	},                                                                                                                    // 7380
                                                                                                                       // 7381
                                                                                                                       // 7382
	// Renders the events onto the view.                                                                                  // 7383
	renderEvents: function(events) {                                                                                      // 7384
		// subclasses should implement                                                                                       // 7385
	},                                                                                                                    // 7386
                                                                                                                       // 7387
                                                                                                                       // 7388
	// Removes event elements from the view.                                                                              // 7389
	unrenderEvents: function() {                                                                                          // 7390
		// subclasses should implement                                                                                       // 7391
	},                                                                                                                    // 7392
                                                                                                                       // 7393
                                                                                                                       // 7394
	// Signals that all events have been rendered                                                                         // 7395
	triggerEventRender: function() {                                                                                      // 7396
		this.renderedEventSegEach(function(seg) {                                                                            // 7397
			this.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7398
		});                                                                                                                  // 7399
		this.trigger('eventAfterAllRender');                                                                                 // 7400
	},                                                                                                                    // 7401
                                                                                                                       // 7402
                                                                                                                       // 7403
	// Signals that all event elements are about to be removed                                                            // 7404
	triggerEventUnrender: function() {                                                                                    // 7405
		this.renderedEventSegEach(function(seg) {                                                                            // 7406
			this.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7407
		});                                                                                                                  // 7408
	},                                                                                                                    // 7409
                                                                                                                       // 7410
                                                                                                                       // 7411
	// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7412
	// Basically runs events and elements through the eventRender hook.                                                   // 7413
	resolveEventEl: function(event, el) {                                                                                 // 7414
		var custom = this.trigger('eventRender', event, event, el);                                                          // 7415
                                                                                                                       // 7416
		if (custom === false) { // means don't render at all                                                                 // 7417
			el = null;                                                                                                          // 7418
		}                                                                                                                    // 7419
		else if (custom && custom !== true) {                                                                                // 7420
			el = $(custom);                                                                                                     // 7421
		}                                                                                                                    // 7422
                                                                                                                       // 7423
		return el;                                                                                                           // 7424
	},                                                                                                                    // 7425
                                                                                                                       // 7426
                                                                                                                       // 7427
	// Hides all rendered event segments linked to the given event                                                        // 7428
	showEvent: function(event) {                                                                                          // 7429
		this.renderedEventSegEach(function(seg) {                                                                            // 7430
			seg.el.css('visibility', '');                                                                                       // 7431
		}, event);                                                                                                           // 7432
	},                                                                                                                    // 7433
                                                                                                                       // 7434
                                                                                                                       // 7435
	// Shows all rendered event segments linked to the given event                                                        // 7436
	hideEvent: function(event) {                                                                                          // 7437
		this.renderedEventSegEach(function(seg) {                                                                            // 7438
			seg.el.css('visibility', 'hidden');                                                                                 // 7439
		}, event);                                                                                                           // 7440
	},                                                                                                                    // 7441
                                                                                                                       // 7442
                                                                                                                       // 7443
	// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 7444
	// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 7445
	// The `this` value of the callback function will be the view.                                                        // 7446
	renderedEventSegEach: function(func, event) {                                                                         // 7447
		var segs = this.getEventSegs();                                                                                      // 7448
		var i;                                                                                                               // 7449
                                                                                                                       // 7450
		for (i = 0; i < segs.length; i++) {                                                                                  // 7451
			if (!event || segs[i].event._id === event._id) {                                                                    // 7452
				if (segs[i].el) {                                                                                                  // 7453
					func.call(this, segs[i]);                                                                                         // 7454
				}                                                                                                                  // 7455
			}                                                                                                                   // 7456
		}                                                                                                                    // 7457
	},                                                                                                                    // 7458
                                                                                                                       // 7459
                                                                                                                       // 7460
	// Retrieves all the rendered segment objects for the view                                                            // 7461
	getEventSegs: function() {                                                                                            // 7462
		// subclasses must implement                                                                                         // 7463
		return [];                                                                                                           // 7464
	},                                                                                                                    // 7465
                                                                                                                       // 7466
                                                                                                                       // 7467
	/* Event Drag-n-Drop                                                                                                  // 7468
	------------------------------------------------------------------------------------------------------------------*/  // 7469
                                                                                                                       // 7470
                                                                                                                       // 7471
	// Computes if the given event is allowed to be dragged by the user                                                   // 7472
	isEventDraggable: function(event) {                                                                                   // 7473
		var source = event.source || {};                                                                                     // 7474
                                                                                                                       // 7475
		return firstDefined(                                                                                                 // 7476
			event.startEditable,                                                                                                // 7477
			source.startEditable,                                                                                               // 7478
			this.opt('eventStartEditable'),                                                                                     // 7479
			event.editable,                                                                                                     // 7480
			source.editable,                                                                                                    // 7481
			this.opt('editable')                                                                                                // 7482
		);                                                                                                                   // 7483
	},                                                                                                                    // 7484
                                                                                                                       // 7485
                                                                                                                       // 7486
	// Must be called when an event in the view is dropped onto new location.                                             // 7487
	// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7488
	reportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 7489
		var calendar = this.calendar;                                                                                        // 7490
		var mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 7491
		var undoFunc = function() {                                                                                          // 7492
			mutateResult.undo();                                                                                                // 7493
			calendar.reportEventChange();                                                                                       // 7494
		};                                                                                                                   // 7495
                                                                                                                       // 7496
		this.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 7497
		calendar.reportEventChange(); // will rerender events                                                                // 7498
	},                                                                                                                    // 7499
                                                                                                                       // 7500
                                                                                                                       // 7501
	// Triggers event-drop handlers that have subscribed via the API                                                      // 7502
	triggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 7503
		this.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 7504
	},                                                                                                                    // 7505
                                                                                                                       // 7506
                                                                                                                       // 7507
	/* External Element Drag-n-Drop                                                                                       // 7508
	------------------------------------------------------------------------------------------------------------------*/  // 7509
                                                                                                                       // 7510
                                                                                                                       // 7511
	// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 7512
	// `meta` is the parsed data that has been embedded into the dragging event.                                          // 7513
	// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7514
	reportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 7515
		var eventProps = meta.eventProps;                                                                                    // 7516
		var eventInput;                                                                                                      // 7517
		var event;                                                                                                           // 7518
                                                                                                                       // 7519
		// Try to build an event object and render it. TODO: decouple the two                                                // 7520
		if (eventProps) {                                                                                                    // 7521
			eventInput = $.extend({}, eventProps, dropLocation);                                                                // 7522
			event = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 7523
		}                                                                                                                    // 7524
                                                                                                                       // 7525
		this.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 7526
	},                                                                                                                    // 7527
                                                                                                                       // 7528
                                                                                                                       // 7529
	// Triggers external-drop handlers that have subscribed via the API                                                   // 7530
	triggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 7531
                                                                                                                       // 7532
		// trigger 'drop' regardless of whether element represents an event                                                  // 7533
		this.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 7534
                                                                                                                       // 7535
		if (event) {                                                                                                         // 7536
			this.trigger('eventReceive', null, event); // signal an external event landed                                       // 7537
		}                                                                                                                    // 7538
	},                                                                                                                    // 7539
                                                                                                                       // 7540
                                                                                                                       // 7541
	/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 7542
	------------------------------------------------------------------------------------------------------------------*/  // 7543
                                                                                                                       // 7544
                                                                                                                       // 7545
	// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 7546
	// If an external-element, seg will be `null`                                                                         // 7547
	renderDrag: function(dropLocation, seg) {                                                                             // 7548
		// subclasses must implement                                                                                         // 7549
	},                                                                                                                    // 7550
                                                                                                                       // 7551
                                                                                                                       // 7552
	// Unrenders a visual indication of an event or external-element being dragged.                                       // 7553
	unrenderDrag: function() {                                                                                            // 7554
		// subclasses must implement                                                                                         // 7555
	},                                                                                                                    // 7556
                                                                                                                       // 7557
                                                                                                                       // 7558
	/* Event Resizing                                                                                                     // 7559
	------------------------------------------------------------------------------------------------------------------*/  // 7560
                                                                                                                       // 7561
                                                                                                                       // 7562
	// Computes if the given event is allowed to be resized from its starting edge                                        // 7563
	isEventResizableFromStart: function(event) {                                                                          // 7564
		return this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 7565
	},                                                                                                                    // 7566
                                                                                                                       // 7567
                                                                                                                       // 7568
	// Computes if the given event is allowed to be resized from its ending edge                                          // 7569
	isEventResizableFromEnd: function(event) {                                                                            // 7570
		return this.isEventResizable(event);                                                                                 // 7571
	},                                                                                                                    // 7572
                                                                                                                       // 7573
                                                                                                                       // 7574
	// Computes if the given event is allowed to be resized by the user at all                                            // 7575
	isEventResizable: function(event) {                                                                                   // 7576
		var source = event.source || {};                                                                                     // 7577
                                                                                                                       // 7578
		return firstDefined(                                                                                                 // 7579
			event.durationEditable,                                                                                             // 7580
			source.durationEditable,                                                                                            // 7581
			this.opt('eventDurationEditable'),                                                                                  // 7582
			event.editable,                                                                                                     // 7583
			source.editable,                                                                                                    // 7584
			this.opt('editable')                                                                                                // 7585
		);                                                                                                                   // 7586
	},                                                                                                                    // 7587
                                                                                                                       // 7588
                                                                                                                       // 7589
	// Must be called when an event in the view has been resized to a new length                                          // 7590
	reportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 7591
		var calendar = this.calendar;                                                                                        // 7592
		var mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 7593
		var undoFunc = function() {                                                                                          // 7594
			mutateResult.undo();                                                                                                // 7595
			calendar.reportEventChange();                                                                                       // 7596
		};                                                                                                                   // 7597
                                                                                                                       // 7598
		this.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 7599
		calendar.reportEventChange(); // will rerender events                                                                // 7600
	},                                                                                                                    // 7601
                                                                                                                       // 7602
                                                                                                                       // 7603
	// Triggers event-resize handlers that have subscribed via the API                                                    // 7604
	triggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 7605
		this.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 7606
	},                                                                                                                    // 7607
                                                                                                                       // 7608
                                                                                                                       // 7609
	/* Selection                                                                                                          // 7610
	------------------------------------------------------------------------------------------------------------------*/  // 7611
                                                                                                                       // 7612
                                                                                                                       // 7613
	// Selects a date range on the view. `start` and `end` are both Moments.                                              // 7614
	// `ev` is the native mouse event that begin the interaction.                                                         // 7615
	select: function(range, ev) {                                                                                         // 7616
		this.unselect(ev);                                                                                                   // 7617
		this.renderSelection(range);                                                                                         // 7618
		this.reportSelection(range, ev);                                                                                     // 7619
	},                                                                                                                    // 7620
                                                                                                                       // 7621
                                                                                                                       // 7622
	// Renders a visual indication of the selection                                                                       // 7623
	renderSelection: function(range) {                                                                                    // 7624
		// subclasses should implement                                                                                       // 7625
	},                                                                                                                    // 7626
                                                                                                                       // 7627
                                                                                                                       // 7628
	// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 7629
	reportSelection: function(range, ev) {                                                                                // 7630
		this.isSelected = true;                                                                                              // 7631
		this.triggerSelect(range, ev);                                                                                       // 7632
	},                                                                                                                    // 7633
                                                                                                                       // 7634
                                                                                                                       // 7635
	// Triggers handlers to 'select'                                                                                      // 7636
	triggerSelect: function(range, ev) {                                                                                  // 7637
		this.trigger('select', null, range.start, range.end, ev);                                                            // 7638
	},                                                                                                                    // 7639
                                                                                                                       // 7640
                                                                                                                       // 7641
	// Undoes a selection. updates in the internal state and triggers handlers.                                           // 7642
	// `ev` is the native mouse event that began the interaction.                                                         // 7643
	unselect: function(ev) {                                                                                              // 7644
		if (this.isSelected) {                                                                                               // 7645
			this.isSelected = false;                                                                                            // 7646
			if (this.destroySelection) {                                                                                        // 7647
				this.destroySelection(); // TODO: deprecate                                                                        // 7648
			}                                                                                                                   // 7649
			this.unrenderSelection();                                                                                           // 7650
			this.trigger('unselect', null, ev);                                                                                 // 7651
		}                                                                                                                    // 7652
	},                                                                                                                    // 7653
                                                                                                                       // 7654
                                                                                                                       // 7655
	// Unrenders a visual indication of selection                                                                         // 7656
	unrenderSelection: function() {                                                                                       // 7657
		// subclasses should implement                                                                                       // 7658
	},                                                                                                                    // 7659
                                                                                                                       // 7660
                                                                                                                       // 7661
	// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 7662
	documentMousedown: function(ev) {                                                                                     // 7663
		var ignore;                                                                                                          // 7664
                                                                                                                       // 7665
		// is there a selection, and has the user made a proper left click?                                                  // 7666
		if (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 7667
                                                                                                                       // 7668
			// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 7669
			ignore = this.opt('unselectCancel');                                                                                // 7670
			if (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 7671
				this.unselect(ev);                                                                                                 // 7672
			}                                                                                                                   // 7673
		}                                                                                                                    // 7674
	},                                                                                                                    // 7675
                                                                                                                       // 7676
                                                                                                                       // 7677
	/* Day Click                                                                                                          // 7678
	------------------------------------------------------------------------------------------------------------------*/  // 7679
                                                                                                                       // 7680
                                                                                                                       // 7681
	// Triggers handlers to 'dayClick'                                                                                    // 7682
	triggerDayClick: function(cell, dayEl, ev) {                                                                          // 7683
		this.trigger('dayClick', dayEl, cell.start, ev);                                                                     // 7684
	},                                                                                                                    // 7685
                                                                                                                       // 7686
                                                                                                                       // 7687
	/* Date Utils                                                                                                         // 7688
	------------------------------------------------------------------------------------------------------------------*/  // 7689
                                                                                                                       // 7690
                                                                                                                       // 7691
	// Initializes internal variables related to calculating hidden days-of-week                                          // 7692
	initHiddenDays: function() {                                                                                          // 7693
		var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 7694
		var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 7695
		var dayCnt = 0;                                                                                                      // 7696
		var i;                                                                                                               // 7697
                                                                                                                       // 7698
		if (this.opt('weekends') === false) {                                                                                // 7699
			hiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 7700
		}                                                                                                                    // 7701
                                                                                                                       // 7702
		for (i = 0; i < 7; i++) {                                                                                            // 7703
			if (                                                                                                                // 7704
				!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 7705
			) {                                                                                                                 // 7706
				dayCnt++;                                                                                                          // 7707
			}                                                                                                                   // 7708
		}                                                                                                                    // 7709
                                                                                                                       // 7710
		if (!dayCnt) {                                                                                                       // 7711
			throw 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 7712
		}                                                                                                                    // 7713
                                                                                                                       // 7714
		this.isHiddenDayHash = isHiddenDayHash;                                                                              // 7715
	},                                                                                                                    // 7716
                                                                                                                       // 7717
                                                                                                                       // 7718
	// Is the current day hidden?                                                                                         // 7719
	// `day` is a day-of-week index (0-6), or a Moment                                                                    // 7720
	isHiddenDay: function(day) {                                                                                          // 7721
		if (moment.isMoment(day)) {                                                                                          // 7722
			day = day.day();                                                                                                    // 7723
		}                                                                                                                    // 7724
		return this.isHiddenDayHash[day];                                                                                    // 7725
	},                                                                                                                    // 7726
                                                                                                                       // 7727
                                                                                                                       // 7728
	// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 7729
	// If the initial value of `date` is not a hidden day, don't do anything.                                             // 7730
	// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 7731
	// `inc` defaults to `1` (increment one day forward each time)                                                        // 7732
	skipHiddenDays: function(date, inc, isExclusive) {                                                                    // 7733
		var out = date.clone();                                                                                              // 7734
		inc = inc || 1;                                                                                                      // 7735
		while (                                                                                                              // 7736
			this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 7737
		) {                                                                                                                  // 7738
			out.add(inc, 'days');                                                                                               // 7739
		}                                                                                                                    // 7740
		return out;                                                                                                          // 7741
	},                                                                                                                    // 7742
                                                                                                                       // 7743
                                                                                                                       // 7744
	// Returns the date range of the full days the given range visually appears to occupy.                                // 7745
	// Returns a new range object.                                                                                        // 7746
	computeDayRange: function(range) {                                                                                    // 7747
		var startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 7748
		var end = range.end;                                                                                                 // 7749
		var endDay = null;                                                                                                   // 7750
		var endTimeMS;                                                                                                       // 7751
                                                                                                                       // 7752
		if (end) {                                                                                                           // 7753
			endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 7754
			endTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 7755
                                                                                                                       // 7756
			// If the end time is actually inclusively part of the next day and is equal to or                                  // 7757
			// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 7758
			// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 7759
			if (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 7760
				endDay.add(1, 'days');                                                                                             // 7761
			}                                                                                                                   // 7762
		}                                                                                                                    // 7763
                                                                                                                       // 7764
		// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 7765
		// assign the default duration of one day.                                                                           // 7766
		if (!end || endDay <= startDay) {                                                                                    // 7767
			endDay = startDay.clone().add(1, 'days');                                                                           // 7768
		}                                                                                                                    // 7769
                                                                                                                       // 7770
		return { start: startDay, end: endDay };                                                                             // 7771
	},                                                                                                                    // 7772
                                                                                                                       // 7773
                                                                                                                       // 7774
	// Does the given event visually appear to occupy more than one day?                                                  // 7775
	isMultiDayEvent: function(event) {                                                                                    // 7776
		var range = this.computeDayRange(event); // event is range-ish                                                       // 7777
                                                                                                                       // 7778
		return range.end.diff(range.start, 'days') > 1;                                                                      // 7779
	}                                                                                                                     // 7780
                                                                                                                       // 7781
});                                                                                                                    // 7782
                                                                                                                       // 7783
;;                                                                                                                     // 7784
                                                                                                                       // 7785
var Calendar = fc.Calendar = Class.extend({                                                                            // 7786
                                                                                                                       // 7787
	dirDefaults: null, // option defaults related to LTR or RTL                                                           // 7788
	langDefaults: null, // option defaults related to current locale                                                      // 7789
	overrides: null, // option overrides given to the fullCalendar constructor                                            // 7790
	options: null, // all defaults combined with overrides                                                                // 7791
	viewSpecCache: null, // cache of view definitions                                                                     // 7792
	view: null, // current View object                                                                                    // 7793
	header: null,                                                                                                         // 7794
	loadingLevel: 0, // number of simultaneous loading tasks                                                              // 7795
                                                                                                                       // 7796
                                                                                                                       // 7797
	// a lot of this class' OOP logic is scoped within this constructor function,                                         // 7798
	// but in the future, write individual methods on the prototype.                                                      // 7799
	constructor: Calendar_constructor,                                                                                    // 7800
                                                                                                                       // 7801
                                                                                                                       // 7802
	// Subclasses can override this for initialization logic after the constructor has been called                        // 7803
	initialize: function() {                                                                                              // 7804
	},                                                                                                                    // 7805
                                                                                                                       // 7806
                                                                                                                       // 7807
	// Initializes `this.options` and other important options-related objects                                             // 7808
	initOptions: function(overrides) {                                                                                    // 7809
		var lang, langDefaults;                                                                                              // 7810
		var isRTL, dirDefaults;                                                                                              // 7811
                                                                                                                       // 7812
		// converts legacy options into non-legacy ones.                                                                     // 7813
		// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 7814
		overrides = massageOverrides(overrides);                                                                             // 7815
                                                                                                                       // 7816
		lang = overrides.lang;                                                                                               // 7817
		langDefaults = langOptionHash[lang];                                                                                 // 7818
		if (!langDefaults) {                                                                                                 // 7819
			lang = Calendar.defaults.lang;                                                                                      // 7820
			langDefaults = langOptionHash[lang] || {};                                                                          // 7821
		}                                                                                                                    // 7822
                                                                                                                       // 7823
		isRTL = firstDefined(                                                                                                // 7824
			overrides.isRTL,                                                                                                    // 7825
			langDefaults.isRTL,                                                                                                 // 7826
			Calendar.defaults.isRTL                                                                                             // 7827
		);                                                                                                                   // 7828
		dirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 7829
                                                                                                                       // 7830
		this.dirDefaults = dirDefaults;                                                                                      // 7831
		this.langDefaults = langDefaults;                                                                                    // 7832
		this.overrides = overrides;                                                                                          // 7833
		this.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence                          // 7834
			Calendar.defaults, // global defaults                                                                               // 7835
			dirDefaults,                                                                                                        // 7836
			langDefaults,                                                                                                       // 7837
			overrides                                                                                                           // 7838
		]);                                                                                                                  // 7839
		populateInstanceComputableOptions(this.options);                                                                     // 7840
                                                                                                                       // 7841
		this.viewSpecCache = {}; // somewhat unrelated                                                                       // 7842
	},                                                                                                                    // 7843
                                                                                                                       // 7844
                                                                                                                       // 7845
	// Gets information about how to create a view. Will use a cache.                                                     // 7846
	getViewSpec: function(viewType) {                                                                                     // 7847
		var cache = this.viewSpecCache;                                                                                      // 7848
                                                                                                                       // 7849
		return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 7850
	},                                                                                                                    // 7851
                                                                                                                       // 7852
                                                                                                                       // 7853
	// Given a duration singular unit, like "week" or "day", finds a matching view spec.                                  // 7854
	// Preference is given to views that have corresponding buttons.                                                      // 7855
	getUnitViewSpec: function(unit) {                                                                                     // 7856
		var viewTypes;                                                                                                       // 7857
		var i;                                                                                                               // 7858
		var spec;                                                                                                            // 7859
                                                                                                                       // 7860
		if ($.inArray(unit, intervalUnits) != -1) {                                                                          // 7861
                                                                                                                       // 7862
			// put views that have buttons first. there will be duplicates, but oh well                                         // 7863
			viewTypes = this.header.getViewsWithButtons();                                                                      // 7864
			$.each(fc.views, function(viewType) { // all views                                                                  // 7865
				viewTypes.push(viewType);                                                                                          // 7866
			});                                                                                                                 // 7867
                                                                                                                       // 7868
			for (i = 0; i < viewTypes.length; i++) {                                                                            // 7869
				spec = this.getViewSpec(viewTypes[i]);                                                                             // 7870
				if (spec) {                                                                                                        // 7871
					if (spec.singleUnit == unit) {                                                                                    // 7872
						return spec;                                                                                                     // 7873
					}                                                                                                                 // 7874
				}                                                                                                                  // 7875
			}                                                                                                                   // 7876
		}                                                                                                                    // 7877
	},                                                                                                                    // 7878
                                                                                                                       // 7879
                                                                                                                       // 7880
	// Builds an object with information on how to create a given view                                                    // 7881
	buildViewSpec: function(requestedViewType) {                                                                          // 7882
		var viewOverrides = this.overrides.views || {};                                                                      // 7883
		var specChain = []; // for the view. lowest to highest priority                                                      // 7884
		var defaultsChain = []; // for the view. lowest to highest priority                                                  // 7885
		var overridesChain = []; // for the view. lowest to highest priority                                                 // 7886
		var viewType = requestedViewType;                                                                                    // 7887
		var spec; // for the view                                                                                            // 7888
		var overrides; // for the view                                                                                       // 7889
		var duration;                                                                                                        // 7890
		var unit;                                                                                                            // 7891
                                                                                                                       // 7892
		// iterate from the specific view definition to a more general one until we hit an actual View class                 // 7893
		while (viewType) {                                                                                                   // 7894
			spec = fcViews[viewType];                                                                                           // 7895
			overrides = viewOverrides[viewType];                                                                                // 7896
			viewType = null; // clear. might repopulate for another iteration                                                   // 7897
                                                                                                                       // 7898
			if (typeof spec === 'function') { // TODO: deprecate                                                                // 7899
				spec = { 'class': spec };                                                                                          // 7900
			}                                                                                                                   // 7901
                                                                                                                       // 7902
			if (spec) {                                                                                                         // 7903
				specChain.unshift(spec);                                                                                           // 7904
				defaultsChain.unshift(spec.defaults || {});                                                                        // 7905
				duration = duration || spec.duration;                                                                              // 7906
				viewType = viewType || spec.type;                                                                                  // 7907
			}                                                                                                                   // 7908
                                                                                                                       // 7909
			if (overrides) {                                                                                                    // 7910
				overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level                       // 7911
				duration = duration || overrides.duration;                                                                         // 7912
				viewType = viewType || overrides.type;                                                                             // 7913
			}                                                                                                                   // 7914
		}                                                                                                                    // 7915
                                                                                                                       // 7916
		spec = mergeProps(specChain);                                                                                        // 7917
		spec.type = requestedViewType;                                                                                       // 7918
		if (!spec['class']) {                                                                                                // 7919
			return false;                                                                                                       // 7920
		}                                                                                                                    // 7921
                                                                                                                       // 7922
		if (duration) {                                                                                                      // 7923
			duration = moment.duration(duration);                                                                               // 7924
			if (duration.valueOf()) { // valid?                                                                                 // 7925
				spec.duration = duration;                                                                                          // 7926
				unit = computeIntervalUnit(duration);                                                                              // 7927
                                                                                                                       // 7928
				// view is a single-unit duration, like "week" or "day"                                                            // 7929
				// incorporate options for this. lowest priority                                                                   // 7930
				if (duration.as(unit) === 1) {                                                                                     // 7931
					spec.singleUnit = unit;                                                                                           // 7932
					overridesChain.unshift(viewOverrides[unit] || {});                                                                // 7933
				}                                                                                                                  // 7934
			}                                                                                                                   // 7935
		}                                                                                                                    // 7936
                                                                                                                       // 7937
		spec.defaults = mergeOptions(defaultsChain);                                                                         // 7938
		spec.overrides = mergeOptions(overridesChain);                                                                       // 7939
                                                                                                                       // 7940
		this.buildViewSpecOptions(spec);                                                                                     // 7941
		this.buildViewSpecButtonText(spec, requestedViewType);                                                               // 7942
                                                                                                                       // 7943
		return spec;                                                                                                         // 7944
	},                                                                                                                    // 7945
                                                                                                                       // 7946
                                                                                                                       // 7947
	// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 7948
	buildViewSpecOptions: function(spec) {                                                                                // 7949
		spec.options = mergeOptions([ // lowest to highest priority                                                          // 7950
			Calendar.defaults, // global defaults                                                                               // 7951
			spec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 7952
			this.dirDefaults,                                                                                                   // 7953
			this.langDefaults, // locale and dir take precedence over view's defaults!                                          // 7954
			this.overrides, // calendar's overrides (options given to constructor)                                              // 7955
			spec.overrides // view's overrides (view-specific options)                                                          // 7956
		]);                                                                                                                  // 7957
		populateInstanceComputableOptions(spec.options);                                                                     // 7958
	},                                                                                                                    // 7959
                                                                                                                       // 7960
                                                                                                                       // 7961
	// Computes and assigns a view spec's buttonText-related options                                                      // 7962
	buildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 7963
                                                                                                                       // 7964
		// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 7965
		// requested view, falling back to a generic unit entry like "week" or "day"                                         // 7966
		function queryButtonText(options) {                                                                                  // 7967
			var buttonText = options.buttonText || {};                                                                          // 7968
			return buttonText[requestedViewType] ||                                                                             // 7969
				(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 7970
		}                                                                                                                    // 7971
                                                                                                                       // 7972
		// highest to lowest priority                                                                                        // 7973
		spec.buttonTextOverride =                                                                                            // 7974
			queryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 7975
			spec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 7976
                                                                                                                       // 7977
		// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 7978
		spec.buttonTextDefault =                                                                                             // 7979
			queryButtonText(this.langDefaults) ||                                                                               // 7980
			queryButtonText(this.dirDefaults) ||                                                                                // 7981
			spec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 7982
			queryButtonText(Calendar.defaults) ||                                                                               // 7983
			(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like "3 days"                                   // 7984
			requestedViewType; // fall back to given view name                                                                  // 7985
	},                                                                                                                    // 7986
                                                                                                                       // 7987
                                                                                                                       // 7988
	// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 7989
	instantiateView: function(viewType) {                                                                                 // 7990
		var spec = this.getViewSpec(viewType);                                                                               // 7991
                                                                                                                       // 7992
		return new spec['class'](this, viewType, spec.options, spec.duration);                                               // 7993
	},                                                                                                                    // 7994
                                                                                                                       // 7995
                                                                                                                       // 7996
	// Returns a boolean about whether the view is okay to instantiate at some point                                      // 7997
	isValidViewType: function(viewType) {                                                                                 // 7998
		return Boolean(this.getViewSpec(viewType));                                                                          // 7999
	},                                                                                                                    // 8000
                                                                                                                       // 8001
                                                                                                                       // 8002
	// Should be called when any type of async data fetching begins                                                       // 8003
	pushLoading: function() {                                                                                             // 8004
		if (!(this.loadingLevel++)) {                                                                                        // 8005
			this.trigger('loading', null, true, this.view);                                                                     // 8006
		}                                                                                                                    // 8007
	},                                                                                                                    // 8008
                                                                                                                       // 8009
                                                                                                                       // 8010
	// Should be called when any type of async data fetching completes                                                    // 8011
	popLoading: function() {                                                                                              // 8012
		if (!(--this.loadingLevel)) {                                                                                        // 8013
			this.trigger('loading', null, false, this.view);                                                                    // 8014
		}                                                                                                                    // 8015
	},                                                                                                                    // 8016
                                                                                                                       // 8017
                                                                                                                       // 8018
	// Given arguments to the select method in the API, returns a range                                                   // 8019
	buildSelectRange: function(start, end) {                                                                              // 8020
                                                                                                                       // 8021
		start = this.moment(start);                                                                                          // 8022
		if (end) {                                                                                                           // 8023
			end = this.moment(end);                                                                                             // 8024
		}                                                                                                                    // 8025
		else if (start.hasTime()) {                                                                                          // 8026
			end = start.clone().add(this.defaultTimedEventDuration);                                                            // 8027
		}                                                                                                                    // 8028
		else {                                                                                                               // 8029
			end = start.clone().add(this.defaultAllDayEventDuration);                                                           // 8030
		}                                                                                                                    // 8031
                                                                                                                       // 8032
		return { start: start, end: end };                                                                                   // 8033
	}                                                                                                                     // 8034
                                                                                                                       // 8035
});                                                                                                                    // 8036
                                                                                                                       // 8037
                                                                                                                       // 8038
Calendar.mixin(Emitter);                                                                                               // 8039
                                                                                                                       // 8040
                                                                                                                       // 8041
function Calendar_constructor(element, overrides) {                                                                    // 8042
	var t = this;                                                                                                         // 8043
                                                                                                                       // 8044
                                                                                                                       // 8045
	t.initOptions(overrides || {});                                                                                       // 8046
	var options = this.options;                                                                                           // 8047
                                                                                                                       // 8048
	                                                                                                                      // 8049
	// Exports                                                                                                            // 8050
	// -----------------------------------------------------------------------------------                                // 8051
                                                                                                                       // 8052
	t.render = render;                                                                                                    // 8053
	t.destroy = destroy;                                                                                                  // 8054
	t.refetchEvents = refetchEvents;                                                                                      // 8055
	t.reportEvents = reportEvents;                                                                                        // 8056
	t.reportEventChange = reportEventChange;                                                                              // 8057
	t.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 8058
	t.changeView = renderView; // `renderView` will switch to another view                                                // 8059
	t.select = select;                                                                                                    // 8060
	t.unselect = unselect;                                                                                                // 8061
	t.prev = prev;                                                                                                        // 8062
	t.next = next;                                                                                                        // 8063
	t.prevYear = prevYear;                                                                                                // 8064
	t.nextYear = nextYear;                                                                                                // 8065
	t.today = today;                                                                                                      // 8066
	t.gotoDate = gotoDate;                                                                                                // 8067
	t.incrementDate = incrementDate;                                                                                      // 8068
	t.zoomTo = zoomTo;                                                                                                    // 8069
	t.getDate = getDate;                                                                                                  // 8070
	t.getCalendar = getCalendar;                                                                                          // 8071
	t.getView = getView;                                                                                                  // 8072
	t.option = option;                                                                                                    // 8073
	t.trigger = trigger;                                                                                                  // 8074
                                                                                                                       // 8075
                                                                                                                       // 8076
                                                                                                                       // 8077
	// Language-data Internals                                                                                            // 8078
	// -----------------------------------------------------------------------------------                                // 8079
	// Apply overrides to the current language's data                                                                     // 8080
                                                                                                                       // 8081
                                                                                                                       // 8082
	var localeData = createObject( // make a cheap copy                                                                   // 8083
		getMomentLocaleData(options.lang) // will fall back to en                                                            // 8084
	);                                                                                                                    // 8085
                                                                                                                       // 8086
	if (options.monthNames) {                                                                                             // 8087
		localeData._months = options.monthNames;                                                                             // 8088
	}                                                                                                                     // 8089
	if (options.monthNamesShort) {                                                                                        // 8090
		localeData._monthsShort = options.monthNamesShort;                                                                   // 8091
	}                                                                                                                     // 8092
	if (options.dayNames) {                                                                                               // 8093
		localeData._weekdays = options.dayNames;                                                                             // 8094
	}                                                                                                                     // 8095
	if (options.dayNamesShort) {                                                                                          // 8096
		localeData._weekdaysShort = options.dayNamesShort;                                                                   // 8097
	}                                                                                                                     // 8098
	if (options.firstDay != null) {                                                                                       // 8099
		var _week = createObject(localeData._week); // _week: { dow: # }                                                     // 8100
		_week.dow = options.firstDay;                                                                                        // 8101
		localeData._week = _week;                                                                                            // 8102
	}                                                                                                                     // 8103
                                                                                                                       // 8104
	// assign a normalized value, to be used by our .week() moment extension                                              // 8105
	localeData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 8106
		if (typeof weekCalc === 'function') {                                                                                // 8107
			return weekCalc;                                                                                                    // 8108
		}                                                                                                                    // 8109
		else if (weekCalc === 'local') {                                                                                     // 8110
			return weekCalc;                                                                                                    // 8111
		}                                                                                                                    // 8112
		else if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 8113
			return 'ISO';                                                                                                       // 8114
		}                                                                                                                    // 8115
	})(options.weekNumberCalculation);                                                                                    // 8116
                                                                                                                       // 8117
                                                                                                                       // 8118
                                                                                                                       // 8119
	// Calendar-specific Date Utilities                                                                                   // 8120
	// -----------------------------------------------------------------------------------                                // 8121
                                                                                                                       // 8122
                                                                                                                       // 8123
	t.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 8124
	t.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 8125
                                                                                                                       // 8126
                                                                                                                       // 8127
	// Builds a moment using the settings of the current calendar: timezone and language.                                 // 8128
	// Accepts anything the vanilla moment() constructor accepts.                                                         // 8129
	t.moment = function() {                                                                                               // 8130
		var mom;                                                                                                             // 8131
                                                                                                                       // 8132
		if (options.timezone === 'local') {                                                                                  // 8133
			mom = fc.moment.apply(null, arguments);                                                                             // 8134
                                                                                                                       // 8135
			// Force the moment to be local, because fc.moment doesn't guarantee it.                                            // 8136
			if (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 8137
				mom.local();                                                                                                       // 8138
			}                                                                                                                   // 8139
		}                                                                                                                    // 8140
		else if (options.timezone === 'UTC') {                                                                               // 8141
			mom = fc.moment.utc.apply(null, arguments); // process as UTC                                                       // 8142
		}                                                                                                                    // 8143
		else {                                                                                                               // 8144
			mom = fc.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 8145
		}                                                                                                                    // 8146
                                                                                                                       // 8147
		if ('_locale' in mom) { // moment 2.8 and above                                                                      // 8148
			mom._locale = localeData;                                                                                           // 8149
		}                                                                                                                    // 8150
		else { // pre-moment-2.8                                                                                             // 8151
			mom._lang = localeData;                                                                                             // 8152
		}                                                                                                                    // 8153
                                                                                                                       // 8154
		return mom;                                                                                                          // 8155
	};                                                                                                                    // 8156
                                                                                                                       // 8157
                                                                                                                       // 8158
	// Returns a boolean about whether or not the calendar knows how to calculate                                         // 8159
	// the timezone offset of arbitrary dates in the current timezone.                                                    // 8160
	t.getIsAmbigTimezone = function() {                                                                                   // 8161
		return options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 8162
	};                                                                                                                    // 8163
                                                                                                                       // 8164
                                                                                                                       // 8165
	// Returns a copy of the given date in the current timezone of it is ambiguously zoned.                               // 8166
	// This will also give the date an unambiguous time.                                                                  // 8167
	t.rezoneDate = function(date) {                                                                                       // 8168
		return t.moment(date.toArray());                                                                                     // 8169
	};                                                                                                                    // 8170
                                                                                                                       // 8171
                                                                                                                       // 8172
	// Returns a moment for the current date, as defined by the client's computer,                                        // 8173
	// or overridden by the `now` option.                                                                                 // 8174
	t.getNow = function() {                                                                                               // 8175
		var now = options.now;                                                                                               // 8176
		if (typeof now === 'function') {                                                                                     // 8177
			now = now();                                                                                                        // 8178
		}                                                                                                                    // 8179
		return t.moment(now);                                                                                                // 8180
	};                                                                                                                    // 8181
                                                                                                                       // 8182
                                                                                                                       // 8183
	// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 8184
	t.getEventEnd = function(event) {                                                                                     // 8185
		if (event.end) {                                                                                                     // 8186
			return event.end.clone();                                                                                           // 8187
		}                                                                                                                    // 8188
		else {                                                                                                               // 8189
			return t.getDefaultEventEnd(event.allDay, event.start);                                                             // 8190
		}                                                                                                                    // 8191
	};                                                                                                                    // 8192
                                                                                                                       // 8193
                                                                                                                       // 8194
	// Given an event's allDay status and start date, return swhat its fallback end date should be.                       // 8195
	t.getDefaultEventEnd = function(allDay, start) { // TODO: rename to computeDefaultEventEnd                            // 8196
		var end = start.clone();                                                                                             // 8197
                                                                                                                       // 8198
		if (allDay) {                                                                                                        // 8199
			end.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 8200
		}                                                                                                                    // 8201
		else {                                                                                                               // 8202
			end.add(t.defaultTimedEventDuration);                                                                               // 8203
		}                                                                                                                    // 8204
                                                                                                                       // 8205
		if (t.getIsAmbigTimezone()) {                                                                                        // 8206
			end.stripZone(); // we don't know what the tzo should be                                                            // 8207
		}                                                                                                                    // 8208
                                                                                                                       // 8209
		return end;                                                                                                          // 8210
	};                                                                                                                    // 8211
                                                                                                                       // 8212
                                                                                                                       // 8213
	// Produces a human-readable string for the given duration.                                                           // 8214
	// Side-effect: changes the locale of the given duration.                                                             // 8215
	t.humanizeDuration = function(duration) {                                                                             // 8216
		return (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 8217
			.humanize();                                                                                                        // 8218
	};                                                                                                                    // 8219
                                                                                                                       // 8220
                                                                                                                       // 8221
	                                                                                                                      // 8222
	// Imports                                                                                                            // 8223
	// -----------------------------------------------------------------------------------                                // 8224
                                                                                                                       // 8225
                                                                                                                       // 8226
	EventManager.call(t, options);                                                                                        // 8227
	var isFetchNeeded = t.isFetchNeeded;                                                                                  // 8228
	var fetchEvents = t.fetchEvents;                                                                                      // 8229
                                                                                                                       // 8230
                                                                                                                       // 8231
                                                                                                                       // 8232
	// Locals                                                                                                             // 8233
	// -----------------------------------------------------------------------------------                                // 8234
                                                                                                                       // 8235
                                                                                                                       // 8236
	var _element = element[0];                                                                                            // 8237
	var header;                                                                                                           // 8238
	var headerElement;                                                                                                    // 8239
	var content;                                                                                                          // 8240
	var tm; // for making theme classes                                                                                   // 8241
	var currentView; // NOTE: keep this in sync with this.view                                                            // 8242
	var viewsByType = {}; // holds all instantiated view instances, current or not                                        // 8243
	var suggestedViewHeight;                                                                                              // 8244
	var windowResizeProxy; // wraps the windowResize function                                                             // 8245
	var ignoreWindowResize = 0;                                                                                           // 8246
	var date;                                                                                                             // 8247
	var events = [];                                                                                                      // 8248
	                                                                                                                      // 8249
	                                                                                                                      // 8250
	                                                                                                                      // 8251
	// Main Rendering                                                                                                     // 8252
	// -----------------------------------------------------------------------------------                                // 8253
                                                                                                                       // 8254
                                                                                                                       // 8255
	if (options.defaultDate != null) {                                                                                    // 8256
		date = t.moment(options.defaultDate);                                                                                // 8257
	}                                                                                                                     // 8258
	else {                                                                                                                // 8259
		date = t.getNow();                                                                                                   // 8260
	}                                                                                                                     // 8261
	                                                                                                                      // 8262
	                                                                                                                      // 8263
	function render() {                                                                                                   // 8264
		if (!content) {                                                                                                      // 8265
			initialRender();                                                                                                    // 8266
		}                                                                                                                    // 8267
		else if (elementVisible()) {                                                                                         // 8268
			// mainly for the public API                                                                                        // 8269
			calcSize();                                                                                                         // 8270
			renderView();                                                                                                       // 8271
		}                                                                                                                    // 8272
	}                                                                                                                     // 8273
	                                                                                                                      // 8274
	                                                                                                                      // 8275
	function initialRender() {                                                                                            // 8276
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 8277
		element.addClass('fc');                                                                                              // 8278
                                                                                                                       // 8279
		if (options.isRTL) {                                                                                                 // 8280
			element.addClass('fc-rtl');                                                                                         // 8281
		}                                                                                                                    // 8282
		else {                                                                                                               // 8283
			element.addClass('fc-ltr');                                                                                         // 8284
		}                                                                                                                    // 8285
                                                                                                                       // 8286
		if (options.theme) {                                                                                                 // 8287
			element.addClass('ui-widget');                                                                                      // 8288
		}                                                                                                                    // 8289
		else {                                                                                                               // 8290
			element.addClass('fc-unthemed');                                                                                    // 8291
		}                                                                                                                    // 8292
                                                                                                                       // 8293
		content = $("<div class='fc-view-container'/>").prependTo(element);                                                  // 8294
                                                                                                                       // 8295
		header = t.header = new Header(t, options);                                                                          // 8296
		headerElement = header.render();                                                                                     // 8297
		if (headerElement) {                                                                                                 // 8298
			element.prepend(headerElement);                                                                                     // 8299
		}                                                                                                                    // 8300
                                                                                                                       // 8301
		renderView(options.defaultView);                                                                                     // 8302
                                                                                                                       // 8303
		if (options.handleWindowResize) {                                                                                    // 8304
			windowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 8305
			$(window).resize(windowResizeProxy);                                                                                // 8306
		}                                                                                                                    // 8307
	}                                                                                                                     // 8308
	                                                                                                                      // 8309
	                                                                                                                      // 8310
	function destroy() {                                                                                                  // 8311
                                                                                                                       // 8312
		if (currentView) {                                                                                                   // 8313
			currentView.removeElement();                                                                                        // 8314
                                                                                                                       // 8315
			// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 8316
			// It is still the "current" view, just not rendered.                                                               // 8317
		}                                                                                                                    // 8318
                                                                                                                       // 8319
		header.removeElement();                                                                                              // 8320
		content.remove();                                                                                                    // 8321
		element.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 8322
                                                                                                                       // 8323
		if (windowResizeProxy) {                                                                                             // 8324
			$(window).unbind('resize', windowResizeProxy);                                                                      // 8325
		}                                                                                                                    // 8326
	}                                                                                                                     // 8327
	                                                                                                                      // 8328
	                                                                                                                      // 8329
	function elementVisible() {                                                                                           // 8330
		return element.is(':visible');                                                                                       // 8331
	}                                                                                                                     // 8332
	                                                                                                                      // 8333
	                                                                                                                      // 8334
                                                                                                                       // 8335
	// View Rendering                                                                                                     // 8336
	// -----------------------------------------------------------------------------------                                // 8337
                                                                                                                       // 8338
                                                                                                                       // 8339
	// Renders a view because of a date change, view-type change, or for the first time.                                  // 8340
	// If not given a viewType, keep the current view but render different dates.                                         // 8341
	function renderView(viewType) {                                                                                       // 8342
		ignoreWindowResize++;                                                                                                // 8343
                                                                                                                       // 8344
		// if viewType is changing, remove the old view's rendering                                                          // 8345
		if (currentView && viewType && currentView.type !== viewType) {                                                      // 8346
			header.deactivateButton(currentView.type);                                                                          // 8347
			freezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 8348
			currentView.removeElement();                                                                                        // 8349
			currentView = t.view = null;                                                                                        // 8350
		}                                                                                                                    // 8351
                                                                                                                       // 8352
		// if viewType changed, or the view was never created, create a fresh view                                           // 8353
		if (!currentView && viewType) {                                                                                      // 8354
			currentView = t.view =                                                                                              // 8355
				viewsByType[viewType] ||                                                                                           // 8356
				(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 8357
                                                                                                                       // 8358
			currentView.setElement(                                                                                             // 8359
				$("<div class='fc-view fc-" + viewType + "-view' />").appendTo(content)                                            // 8360
			);                                                                                                                  // 8361
			header.activateButton(viewType);                                                                                    // 8362
		}                                                                                                                    // 8363
                                                                                                                       // 8364
		if (currentView) {                                                                                                   // 8365
                                                                                                                       // 8366
			// in case the view should render a period of time that is completely hidden                                        // 8367
			date = currentView.massageCurrentDate(date);                                                                        // 8368
                                                                                                                       // 8369
			// render or rerender the view                                                                                      // 8370
			if (                                                                                                                // 8371
				!currentView.displaying ||                                                                                         // 8372
				!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 8373
			) {                                                                                                                 // 8374
				if (elementVisible()) {                                                                                            // 8375
                                                                                                                       // 8376
					freezeContentHeight();                                                                                            // 8377
					currentView.display(date);                                                                                        // 8378
					unfreezeContentHeight(); // immediately unfreeze regardless of whether display is async                           // 8379
                                                                                                                       // 8380
					// need to do this after View::render, so dates are calculated                                                    // 8381
					updateHeaderTitle();                                                                                              // 8382
					updateTodayButton();                                                                                              // 8383
                                                                                                                       // 8384
					getAndRenderEvents();                                                                                             // 8385
				}                                                                                                                  // 8386
			}                                                                                                                   // 8387
		}                                                                                                                    // 8388
                                                                                                                       // 8389
		unfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8390
		ignoreWindowResize--;                                                                                                // 8391
	}                                                                                                                     // 8392
                                                                                                                       // 8393
	                                                                                                                      // 8394
                                                                                                                       // 8395
	// Resizing                                                                                                           // 8396
	// -----------------------------------------------------------------------------------                                // 8397
                                                                                                                       // 8398
                                                                                                                       // 8399
	t.getSuggestedViewHeight = function() {                                                                               // 8400
		if (suggestedViewHeight === undefined) {                                                                             // 8401
			calcSize();                                                                                                         // 8402
		}                                                                                                                    // 8403
		return suggestedViewHeight;                                                                                          // 8404
	};                                                                                                                    // 8405
                                                                                                                       // 8406
                                                                                                                       // 8407
	t.isHeightAuto = function() {                                                                                         // 8408
		return options.contentHeight === 'auto' || options.height === 'auto';                                                // 8409
	};                                                                                                                    // 8410
	                                                                                                                      // 8411
	                                                                                                                      // 8412
	function updateSize(shouldRecalc) {                                                                                   // 8413
		if (elementVisible()) {                                                                                              // 8414
                                                                                                                       // 8415
			if (shouldRecalc) {                                                                                                 // 8416
				_calcSize();                                                                                                       // 8417
			}                                                                                                                   // 8418
                                                                                                                       // 8419
			ignoreWindowResize++;                                                                                               // 8420
			currentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 8421
			ignoreWindowResize--;                                                                                               // 8422
                                                                                                                       // 8423
			return true; // signal success                                                                                      // 8424
		}                                                                                                                    // 8425
	}                                                                                                                     // 8426
                                                                                                                       // 8427
                                                                                                                       // 8428
	function calcSize() {                                                                                                 // 8429
		if (elementVisible()) {                                                                                              // 8430
			_calcSize();                                                                                                        // 8431
		}                                                                                                                    // 8432
	}                                                                                                                     // 8433
	                                                                                                                      // 8434
	                                                                                                                      // 8435
	function _calcSize() { // assumes elementVisible                                                                      // 8436
		if (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 8437
			suggestedViewHeight = options.contentHeight;                                                                        // 8438
		}                                                                                                                    // 8439
		else if (typeof options.height === 'number') { // exists and not 'auto'                                              // 8440
			suggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 8441
		}                                                                                                                    // 8442
		else {                                                                                                               // 8443
			suggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 8444
		}                                                                                                                    // 8445
	}                                                                                                                     // 8446
	                                                                                                                      // 8447
	                                                                                                                      // 8448
	function windowResize(ev) {                                                                                           // 8449
		if (                                                                                                                 // 8450
			!ignoreWindowResize &&                                                                                              // 8451
			ev.target === window && // so we don't process jqui "resize" events that have bubbled up                            // 8452
			currentView.start // view has already been rendered                                                                 // 8453
		) {                                                                                                                  // 8454
			if (updateSize(true)) {                                                                                             // 8455
				currentView.trigger('windowResize', _element);                                                                     // 8456
			}                                                                                                                   // 8457
		}                                                                                                                    // 8458
	}                                                                                                                     // 8459
	                                                                                                                      // 8460
	                                                                                                                      // 8461
	                                                                                                                      // 8462
	/* Event Fetching/Rendering                                                                                           // 8463
	-----------------------------------------------------------------------------*/                                       // 8464
	// TODO: going forward, most of this stuff should be directly handled by the view                                     // 8465
                                                                                                                       // 8466
                                                                                                                       // 8467
	function refetchEvents() { // can be called as an API method                                                          // 8468
		destroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 8469
		fetchAndRenderEvents();                                                                                              // 8470
	}                                                                                                                     // 8471
                                                                                                                       // 8472
                                                                                                                       // 8473
	function renderEvents() { // destroys old events if previously rendered                                               // 8474
		if (elementVisible()) {                                                                                              // 8475
			freezeContentHeight();                                                                                              // 8476
			currentView.displayEvents(events);                                                                                  // 8477
			unfreezeContentHeight();                                                                                            // 8478
		}                                                                                                                    // 8479
	}                                                                                                                     // 8480
                                                                                                                       // 8481
                                                                                                                       // 8482
	function destroyEvents() {                                                                                            // 8483
		freezeContentHeight();                                                                                               // 8484
		currentView.clearEvents();                                                                                           // 8485
		unfreezeContentHeight();                                                                                             // 8486
	}                                                                                                                     // 8487
	                                                                                                                      // 8488
                                                                                                                       // 8489
	function getAndRenderEvents() {                                                                                       // 8490
		if (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 8491
			fetchAndRenderEvents();                                                                                             // 8492
		}                                                                                                                    // 8493
		else {                                                                                                               // 8494
			renderEvents();                                                                                                     // 8495
		}                                                                                                                    // 8496
	}                                                                                                                     // 8497
                                                                                                                       // 8498
                                                                                                                       // 8499
	function fetchAndRenderEvents() {                                                                                     // 8500
		fetchEvents(currentView.start, currentView.end);                                                                     // 8501
			// ... will call reportEvents                                                                                       // 8502
			// ... which will call renderEvents                                                                                 // 8503
	}                                                                                                                     // 8504
                                                                                                                       // 8505
	                                                                                                                      // 8506
	// called when event data arrives                                                                                     // 8507
	function reportEvents(_events) {                                                                                      // 8508
		events = _events;                                                                                                    // 8509
		renderEvents();                                                                                                      // 8510
	}                                                                                                                     // 8511
                                                                                                                       // 8512
                                                                                                                       // 8513
	// called when a single event's data has been changed                                                                 // 8514
	function reportEventChange() {                                                                                        // 8515
		renderEvents();                                                                                                      // 8516
	}                                                                                                                     // 8517
                                                                                                                       // 8518
                                                                                                                       // 8519
                                                                                                                       // 8520
	/* Header Updating                                                                                                    // 8521
	-----------------------------------------------------------------------------*/                                       // 8522
                                                                                                                       // 8523
                                                                                                                       // 8524
	function updateHeaderTitle() {                                                                                        // 8525
		header.updateTitle(currentView.title);                                                                               // 8526
	}                                                                                                                     // 8527
                                                                                                                       // 8528
                                                                                                                       // 8529
	function updateTodayButton() {                                                                                        // 8530
		var now = t.getNow();                                                                                                // 8531
		if (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 8532
			header.disableButton('today');                                                                                      // 8533
		}                                                                                                                    // 8534
		else {                                                                                                               // 8535
			header.enableButton('today');                                                                                       // 8536
		}                                                                                                                    // 8537
	}                                                                                                                     // 8538
	                                                                                                                      // 8539
                                                                                                                       // 8540
                                                                                                                       // 8541
	/* Selection                                                                                                          // 8542
	-----------------------------------------------------------------------------*/                                       // 8543
	                                                                                                                      // 8544
                                                                                                                       // 8545
	function select(start, end) {                                                                                         // 8546
		currentView.select(                                                                                                  // 8547
			t.buildSelectRange.apply(t, arguments)                                                                              // 8548
		);                                                                                                                   // 8549
	}                                                                                                                     // 8550
	                                                                                                                      // 8551
                                                                                                                       // 8552
	function unselect() { // safe to be called before renderView                                                          // 8553
		if (currentView) {                                                                                                   // 8554
			currentView.unselect();                                                                                             // 8555
		}                                                                                                                    // 8556
	}                                                                                                                     // 8557
	                                                                                                                      // 8558
	                                                                                                                      // 8559
	                                                                                                                      // 8560
	/* Date                                                                                                               // 8561
	-----------------------------------------------------------------------------*/                                       // 8562
	                                                                                                                      // 8563
	                                                                                                                      // 8564
	function prev() {                                                                                                     // 8565
		date = currentView.computePrevDate(date);                                                                            // 8566
		renderView();                                                                                                        // 8567
	}                                                                                                                     // 8568
	                                                                                                                      // 8569
	                                                                                                                      // 8570
	function next() {                                                                                                     // 8571
		date = currentView.computeNextDate(date);                                                                            // 8572
		renderView();                                                                                                        // 8573
	}                                                                                                                     // 8574
	                                                                                                                      // 8575
	                                                                                                                      // 8576
	function prevYear() {                                                                                                 // 8577
		date.add(-1, 'years');                                                                                               // 8578
		renderView();                                                                                                        // 8579
	}                                                                                                                     // 8580
	                                                                                                                      // 8581
	                                                                                                                      // 8582
	function nextYear() {                                                                                                 // 8583
		date.add(1, 'years');                                                                                                // 8584
		renderView();                                                                                                        // 8585
	}                                                                                                                     // 8586
	                                                                                                                      // 8587
	                                                                                                                      // 8588
	function today() {                                                                                                    // 8589
		date = t.getNow();                                                                                                   // 8590
		renderView();                                                                                                        // 8591
	}                                                                                                                     // 8592
	                                                                                                                      // 8593
	                                                                                                                      // 8594
	function gotoDate(dateInput) {                                                                                        // 8595
		date = t.moment(dateInput);                                                                                          // 8596
		renderView();                                                                                                        // 8597
	}                                                                                                                     // 8598
	                                                                                                                      // 8599
	                                                                                                                      // 8600
	function incrementDate(delta) {                                                                                       // 8601
		date.add(moment.duration(delta));                                                                                    // 8602
		renderView();                                                                                                        // 8603
	}                                                                                                                     // 8604
                                                                                                                       // 8605
                                                                                                                       // 8606
	// Forces navigation to a view for the given date.                                                                    // 8607
	// `viewType` can be a specific view name or a generic one like "week" or "day".                                      // 8608
	function zoomTo(newDate, viewType) {                                                                                  // 8609
		var spec;                                                                                                            // 8610
                                                                                                                       // 8611
		viewType = viewType || 'day'; // day is default zoom                                                                 // 8612
		spec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 8613
                                                                                                                       // 8614
		date = newDate;                                                                                                      // 8615
		renderView(spec ? spec.type : null);                                                                                 // 8616
	}                                                                                                                     // 8617
	                                                                                                                      // 8618
	                                                                                                                      // 8619
	function getDate() {                                                                                                  // 8620
		return date.clone();                                                                                                 // 8621
	}                                                                                                                     // 8622
                                                                                                                       // 8623
                                                                                                                       // 8624
                                                                                                                       // 8625
	/* Height "Freezing"                                                                                                  // 8626
	-----------------------------------------------------------------------------*/                                       // 8627
	// TODO: move this into the view                                                                                      // 8628
                                                                                                                       // 8629
                                                                                                                       // 8630
	function freezeContentHeight() {                                                                                      // 8631
		content.css({                                                                                                        // 8632
			width: '100%',                                                                                                      // 8633
			height: content.height(),                                                                                           // 8634
			overflow: 'hidden'                                                                                                  // 8635
		});                                                                                                                  // 8636
	}                                                                                                                     // 8637
                                                                                                                       // 8638
                                                                                                                       // 8639
	function unfreezeContentHeight() {                                                                                    // 8640
		content.css({                                                                                                        // 8641
			width: '',                                                                                                          // 8642
			height: '',                                                                                                         // 8643
			overflow: ''                                                                                                        // 8644
		});                                                                                                                  // 8645
	}                                                                                                                     // 8646
	                                                                                                                      // 8647
	                                                                                                                      // 8648
	                                                                                                                      // 8649
	/* Misc                                                                                                               // 8650
	-----------------------------------------------------------------------------*/                                       // 8651
	                                                                                                                      // 8652
                                                                                                                       // 8653
	function getCalendar() {                                                                                              // 8654
		return t;                                                                                                            // 8655
	}                                                                                                                     // 8656
                                                                                                                       // 8657
	                                                                                                                      // 8658
	function getView() {                                                                                                  // 8659
		return currentView;                                                                                                  // 8660
	}                                                                                                                     // 8661
	                                                                                                                      // 8662
	                                                                                                                      // 8663
	function option(name, value) {                                                                                        // 8664
		if (value === undefined) {                                                                                           // 8665
			return options[name];                                                                                               // 8666
		}                                                                                                                    // 8667
		if (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 8668
			options[name] = value;                                                                                              // 8669
			updateSize(true); // true = allow recalculation of height                                                           // 8670
		}                                                                                                                    // 8671
	}                                                                                                                     // 8672
	                                                                                                                      // 8673
	                                                                                                                      // 8674
	function trigger(name, thisObj) { // overrides the Emitter's trigger method :(                                        // 8675
		var args = Array.prototype.slice.call(arguments, 2);                                                                 // 8676
                                                                                                                       // 8677
		thisObj = thisObj || _element;                                                                                       // 8678
		this.triggerWith(name, thisObj, args); // Emitter's method                                                           // 8679
                                                                                                                       // 8680
		if (options[name]) {                                                                                                 // 8681
			return options[name].apply(thisObj, args);                                                                          // 8682
		}                                                                                                                    // 8683
	}                                                                                                                     // 8684
                                                                                                                       // 8685
	t.initialize();                                                                                                       // 8686
}                                                                                                                      // 8687
                                                                                                                       // 8688
;;                                                                                                                     // 8689
                                                                                                                       // 8690
Calendar.defaults = {                                                                                                  // 8691
                                                                                                                       // 8692
	titleRangeSeparator: ' \u2014 ', // emphasized dash                                                                   // 8693
	monthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 8694
                                                                                                                       // 8695
	defaultTimedEventDuration: '02:00:00',                                                                                // 8696
	defaultAllDayEventDuration: { days: 1 },                                                                              // 8697
	forceEventDuration: false,                                                                                            // 8698
	nextDayThreshold: '09:00:00', // 9am                                                                                  // 8699
                                                                                                                       // 8700
	// display                                                                                                            // 8701
	defaultView: 'month',                                                                                                 // 8702
	aspectRatio: 1.35,                                                                                                    // 8703
	header: {                                                                                                             // 8704
		left: 'title',                                                                                                       // 8705
		center: '',                                                                                                          // 8706
		right: 'today prev,next'                                                                                             // 8707
	},                                                                                                                    // 8708
	weekends: true,                                                                                                       // 8709
	weekNumbers: false,                                                                                                   // 8710
                                                                                                                       // 8711
	weekNumberTitle: 'W',                                                                                                 // 8712
	weekNumberCalculation: 'local',                                                                                       // 8713
	                                                                                                                      // 8714
	//editable: false,                                                                                                    // 8715
                                                                                                                       // 8716
	scrollTime: '06:00:00',                                                                                               // 8717
	                                                                                                                      // 8718
	// event ajax                                                                                                         // 8719
	lazyFetching: true,                                                                                                   // 8720
	startParam: 'start',                                                                                                  // 8721
	endParam: 'end',                                                                                                      // 8722
	timezoneParam: 'timezone',                                                                                            // 8723
                                                                                                                       // 8724
	timezone: false,                                                                                                      // 8725
                                                                                                                       // 8726
	//allDayDefault: undefined,                                                                                           // 8727
                                                                                                                       // 8728
	// locale                                                                                                             // 8729
	isRTL: false,                                                                                                         // 8730
	buttonText: {                                                                                                         // 8731
		prev: "prev",                                                                                                        // 8732
		next: "next",                                                                                                        // 8733
		prevYear: "prev year",                                                                                               // 8734
		nextYear: "next year",                                                                                               // 8735
		year: 'year', // TODO: locale files need to specify this                                                             // 8736
		today: 'today',                                                                                                      // 8737
		month: 'month',                                                                                                      // 8738
		week: 'week',                                                                                                        // 8739
		day: 'day'                                                                                                           // 8740
	},                                                                                                                    // 8741
                                                                                                                       // 8742
	buttonIcons: {                                                                                                        // 8743
		prev: 'left-single-arrow',                                                                                           // 8744
		next: 'right-single-arrow',                                                                                          // 8745
		prevYear: 'left-double-arrow',                                                                                       // 8746
		nextYear: 'right-double-arrow'                                                                                       // 8747
	},                                                                                                                    // 8748
	                                                                                                                      // 8749
	// jquery-ui theming                                                                                                  // 8750
	theme: false,                                                                                                         // 8751
	themeButtonIcons: {                                                                                                   // 8752
		prev: 'circle-triangle-w',                                                                                           // 8753
		next: 'circle-triangle-e',                                                                                           // 8754
		prevYear: 'seek-prev',                                                                                               // 8755
		nextYear: 'seek-next'                                                                                                // 8756
	},                                                                                                                    // 8757
                                                                                                                       // 8758
	//eventResizableFromStart: false,                                                                                     // 8759
	dragOpacity: .75,                                                                                                     // 8760
	dragRevertDuration: 500,                                                                                              // 8761
	dragScroll: true,                                                                                                     // 8762
	                                                                                                                      // 8763
	//selectable: false,                                                                                                  // 8764
	unselectAuto: true,                                                                                                   // 8765
	                                                                                                                      // 8766
	dropAccept: '*',                                                                                                      // 8767
                                                                                                                       // 8768
	eventOrder: 'title',                                                                                                  // 8769
                                                                                                                       // 8770
	eventLimit: false,                                                                                                    // 8771
	eventLimitText: 'more',                                                                                               // 8772
	eventLimitClick: 'popover',                                                                                           // 8773
	dayPopoverFormat: 'LL',                                                                                               // 8774
	                                                                                                                      // 8775
	handleWindowResize: true,                                                                                             // 8776
	windowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 8777
	                                                                                                                      // 8778
};                                                                                                                     // 8779
                                                                                                                       // 8780
                                                                                                                       // 8781
Calendar.englishDefaults = { // used by lang.js                                                                        // 8782
	dayPopoverFormat: 'dddd, MMMM D'                                                                                      // 8783
};                                                                                                                     // 8784
                                                                                                                       // 8785
                                                                                                                       // 8786
Calendar.rtlDefaults = { // right-to-left defaults                                                                     // 8787
	header: { // TODO: smarter solution (first/center/last ?)                                                             // 8788
		left: 'next,prev today',                                                                                             // 8789
		center: '',                                                                                                          // 8790
		right: 'title'                                                                                                       // 8791
	},                                                                                                                    // 8792
	buttonIcons: {                                                                                                        // 8793
		prev: 'right-single-arrow',                                                                                          // 8794
		next: 'left-single-arrow',                                                                                           // 8795
		prevYear: 'right-double-arrow',                                                                                      // 8796
		nextYear: 'left-double-arrow'                                                                                        // 8797
	},                                                                                                                    // 8798
	themeButtonIcons: {                                                                                                   // 8799
		prev: 'circle-triangle-e',                                                                                           // 8800
		next: 'circle-triangle-w',                                                                                           // 8801
		nextYear: 'seek-prev',                                                                                               // 8802
		prevYear: 'seek-next'                                                                                                // 8803
	}                                                                                                                     // 8804
};                                                                                                                     // 8805
                                                                                                                       // 8806
;;                                                                                                                     // 8807
                                                                                                                       // 8808
var langOptionHash = fc.langs = {}; // initialize and expose                                                           // 8809
                                                                                                                       // 8810
                                                                                                                       // 8811
// TODO: document the structure and ordering of a FullCalendar lang file                                               // 8812
// TODO: rename everything "lang" to "locale", like what the moment project did                                        // 8813
                                                                                                                       // 8814
                                                                                                                       // 8815
// Initialize jQuery UI datepicker translations while using some of the translations                                   // 8816
// Will set this as the default language for datepicker.                                                               // 8817
fc.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 8818
                                                                                                                       // 8819
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 8820
	var fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 8821
                                                                                                                       // 8822
	// transfer some simple options from datepicker to fc                                                                 // 8823
	fcOptions.isRTL = dpOptions.isRTL;                                                                                    // 8824
	fcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 8825
                                                                                                                       // 8826
	// compute some more complex options from datepicker                                                                  // 8827
	$.each(dpComputableOptions, function(name, func) {                                                                    // 8828
		fcOptions[name] = func(dpOptions);                                                                                   // 8829
	});                                                                                                                   // 8830
                                                                                                                       // 8831
	// is jQuery UI Datepicker is on the page?                                                                            // 8832
	if ($.datepicker) {                                                                                                   // 8833
                                                                                                                       // 8834
		// Register the language data.                                                                                       // 8835
		// FullCalendar and MomentJS use language codes like "pt-br" but Datepicker                                          // 8836
		// does it like "pt-BR" or if it doesn't have the language, maybe just "pt".                                         // 8837
		// Make an alias so the language can be referenced either way.                                                       // 8838
		$.datepicker.regional[dpLangCode] =                                                                                  // 8839
			$.datepicker.regional[langCode] = // alias                                                                          // 8840
				dpOptions;                                                                                                         // 8841
                                                                                                                       // 8842
		// Alias 'en' to the default language data. Do this every time.                                                      // 8843
		$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 8844
                                                                                                                       // 8845
		// Set as Datepicker's global defaults.                                                                              // 8846
		$.datepicker.setDefaults(dpOptions);                                                                                 // 8847
	}                                                                                                                     // 8848
};                                                                                                                     // 8849
                                                                                                                       // 8850
                                                                                                                       // 8851
// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 8852
fc.lang = function(langCode, newFcOptions) {                                                                           // 8853
	var fcOptions;                                                                                                        // 8854
	var momOptions;                                                                                                       // 8855
                                                                                                                       // 8856
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 8857
	fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 8858
                                                                                                                       // 8859
	// provided new options for this language? merge them in                                                              // 8860
	if (newFcOptions) {                                                                                                   // 8861
		fcOptions = langOptionHash[langCode] = mergeOptions([ fcOptions, newFcOptions ]);                                    // 8862
	}                                                                                                                     // 8863
                                                                                                                       // 8864
	// compute language options that weren't defined.                                                                     // 8865
	// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 8866
	// so no way to tell if this is an initialization or a default-setting.                                               // 8867
	momOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 8868
	$.each(momComputableOptions, function(name, func) {                                                                   // 8869
		if (fcOptions[name] == null) {                                                                                       // 8870
			fcOptions[name] = func(momOptions, fcOptions);                                                                      // 8871
		}                                                                                                                    // 8872
	});                                                                                                                   // 8873
                                                                                                                       // 8874
	// set it as the default language for FullCalendar                                                                    // 8875
	Calendar.defaults.lang = langCode;                                                                                    // 8876
};                                                                                                                     // 8877
                                                                                                                       // 8878
                                                                                                                       // 8879
// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 8880
// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 8881
var dpComputableOptions = {                                                                                            // 8882
                                                                                                                       // 8883
	buttonText: function(dpOptions) {                                                                                     // 8884
		return {                                                                                                             // 8885
			// the translations sometimes wrongly contain HTML entities                                                         // 8886
			prev: stripHtmlEntities(dpOptions.prevText),                                                                        // 8887
			next: stripHtmlEntities(dpOptions.nextText),                                                                        // 8888
			today: stripHtmlEntities(dpOptions.currentText)                                                                     // 8889
		};                                                                                                                   // 8890
	},                                                                                                                    // 8891
                                                                                                                       // 8892
	// Produces format strings like "MMMM YYYY" -> "September 2014"                                                       // 8893
	monthYearFormat: function(dpOptions) {                                                                                // 8894
		return dpOptions.showMonthAfterYear ?                                                                                // 8895
			'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 8896
			'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 8897
	}                                                                                                                     // 8898
                                                                                                                       // 8899
};                                                                                                                     // 8900
                                                                                                                       // 8901
var momComputableOptions = {                                                                                           // 8902
                                                                                                                       // 8903
	// Produces format strings like "ddd M/D" -> "Fri 9/15"                                                               // 8904
	dayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 8905
		var format = momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"                                       // 8906
                                                                                                                       // 8907
		// strip the year off the edge, as well as other misc non-whitespace chars                                           // 8908
		format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, '');                                                             // 8909
                                                                                                                       // 8910
		if (fcOptions.isRTL) {                                                                                               // 8911
			format += ' ddd'; // for RTL, add day-of-week to end                                                                // 8912
		}                                                                                                                    // 8913
		else {                                                                                                               // 8914
			format = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 8915
		}                                                                                                                    // 8916
		return format;                                                                                                       // 8917
	},                                                                                                                    // 8918
                                                                                                                       // 8919
	// Produces format strings like "h:mma" -> "6:00pm"                                                                   // 8920
	mediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 8921
		return momOptions.longDateFormat('LT')                                                                               // 8922
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8923
	},                                                                                                                    // 8924
                                                                                                                       // 8925
	// Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"                                                         // 8926
	smallTimeFormat: function(momOptions) {                                                                               // 8927
		return momOptions.longDateFormat('LT')                                                                               // 8928
			.replace(':mm', '(:mm)')                                                                                            // 8929
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8930
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8931
	},                                                                                                                    // 8932
                                                                                                                       // 8933
	// Produces format strings like "h(:mm)t" -> "6p" / "6:30p"                                                           // 8934
	extraSmallTimeFormat: function(momOptions) {                                                                          // 8935
		return momOptions.longDateFormat('LT')                                                                               // 8936
			.replace(':mm', '(:mm)')                                                                                            // 8937
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8938
			.replace(/\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 8939
	},                                                                                                                    // 8940
                                                                                                                       // 8941
	// Produces format strings like "ha" / "H" -> "6pm" / "18"                                                            // 8942
	hourFormat: function(momOptions) {                                                                                    // 8943
		return momOptions.longDateFormat('LT')                                                                               // 8944
			.replace(':mm', '')                                                                                                 // 8945
			.replace(/(\Wmm)$/, '') // like above, but for foreign langs                                                        // 8946
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8947
	},                                                                                                                    // 8948
                                                                                                                       // 8949
	// Produces format strings like "h:mm" -> "6:30" (with no AM/PM)                                                      // 8950
	noMeridiemTimeFormat: function(momOptions) {                                                                          // 8951
		return momOptions.longDateFormat('LT')                                                                               // 8952
			.replace(/\s*a$/i, ''); // remove trailing AM/PM                                                                    // 8953
	}                                                                                                                     // 8954
                                                                                                                       // 8955
};                                                                                                                     // 8956
                                                                                                                       // 8957
                                                                                                                       // 8958
// options that should be computed off live calendar options (considers override options)                              // 8959
var instanceComputableOptions = { // TODO: best place for this? related to lang?                                       // 8960
                                                                                                                       // 8961
	// Produces format strings for results like "Mo 16"                                                                   // 8962
	smallDayDateFormat: function(options) {                                                                               // 8963
		return options.isRTL ?                                                                                               // 8964
			'D dd' :                                                                                                            // 8965
			'dd D';                                                                                                             // 8966
	},                                                                                                                    // 8967
                                                                                                                       // 8968
	// Produces format strings for results like "Wk 5"                                                                    // 8969
	weekFormat: function(options) {                                                                                       // 8970
		return options.isRTL ?                                                                                               // 8971
			'w[ ' + options.weekNumberTitle + ']' :                                                                             // 8972
			'[' + options.weekNumberTitle + ' ]w';                                                                              // 8973
	},                                                                                                                    // 8974
                                                                                                                       // 8975
	// Produces format strings for results like "Wk5"                                                                     // 8976
	smallWeekFormat: function(options) {                                                                                  // 8977
		return options.isRTL ?                                                                                               // 8978
			'w[' + options.weekNumberTitle + ']' :                                                                              // 8979
			'[' + options.weekNumberTitle + ']w';                                                                               // 8980
	}                                                                                                                     // 8981
                                                                                                                       // 8982
};                                                                                                                     // 8983
                                                                                                                       // 8984
function populateInstanceComputableOptions(options) {                                                                  // 8985
	$.each(instanceComputableOptions, function(name, func) {                                                              // 8986
		if (options[name] == null) {                                                                                         // 8987
			options[name] = func(options);                                                                                      // 8988
		}                                                                                                                    // 8989
	});                                                                                                                   // 8990
}                                                                                                                      // 8991
                                                                                                                       // 8992
                                                                                                                       // 8993
// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 8994
// Works with moment-pre-2.8                                                                                           // 8995
function getMomentLocaleData(langCode) {                                                                               // 8996
	var func = moment.localeData || moment.langData;                                                                      // 8997
	return func.call(moment, langCode) ||                                                                                 // 8998
		func.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 8999
}                                                                                                                      // 9000
                                                                                                                       // 9001
                                                                                                                       // 9002
// Initialize English by forcing computation of moment-derived options.                                                // 9003
// Also, sets it as the default.                                                                                       // 9004
fc.lang('en', Calendar.englishDefaults);                                                                               // 9005
                                                                                                                       // 9006
;;                                                                                                                     // 9007
                                                                                                                       // 9008
/* Top toolbar area with buttons and title                                                                             // 9009
----------------------------------------------------------------------------------------------------------------------*/
// TODO: rename all header-related things to "toolbar"                                                                 // 9011
                                                                                                                       // 9012
function Header(calendar, options) {                                                                                   // 9013
	var t = this;                                                                                                         // 9014
	                                                                                                                      // 9015
	// exports                                                                                                            // 9016
	t.render = render;                                                                                                    // 9017
	t.removeElement = removeElement;                                                                                      // 9018
	t.updateTitle = updateTitle;                                                                                          // 9019
	t.activateButton = activateButton;                                                                                    // 9020
	t.deactivateButton = deactivateButton;                                                                                // 9021
	t.disableButton = disableButton;                                                                                      // 9022
	t.enableButton = enableButton;                                                                                        // 9023
	t.getViewsWithButtons = getViewsWithButtons;                                                                          // 9024
	                                                                                                                      // 9025
	// locals                                                                                                             // 9026
	var el = $();                                                                                                         // 9027
	var viewsWithButtons = [];                                                                                            // 9028
	var tm;                                                                                                               // 9029
                                                                                                                       // 9030
                                                                                                                       // 9031
	function render() {                                                                                                   // 9032
		var sections = options.header;                                                                                       // 9033
                                                                                                                       // 9034
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 9035
                                                                                                                       // 9036
		if (sections) {                                                                                                      // 9037
			el = $("<div class='fc-toolbar'/>")                                                                                 // 9038
				.append(renderSection('left'))                                                                                     // 9039
				.append(renderSection('right'))                                                                                    // 9040
				.append(renderSection('center'))                                                                                   // 9041
				.append('<div class="fc-clear"/>');                                                                                // 9042
                                                                                                                       // 9043
			return el;                                                                                                          // 9044
		}                                                                                                                    // 9045
	}                                                                                                                     // 9046
	                                                                                                                      // 9047
	                                                                                                                      // 9048
	function removeElement() {                                                                                            // 9049
		el.remove();                                                                                                         // 9050
		el = $();                                                                                                            // 9051
	}                                                                                                                     // 9052
	                                                                                                                      // 9053
	                                                                                                                      // 9054
	function renderSection(position) {                                                                                    // 9055
		var sectionEl = $('<div class="fc-' + position + '"/>');                                                             // 9056
		var buttonStr = options.header[position];                                                                            // 9057
                                                                                                                       // 9058
		if (buttonStr) {                                                                                                     // 9059
			$.each(buttonStr.split(' '), function(i) {                                                                          // 9060
				var groupChildren = $();                                                                                           // 9061
				var isOnlyButtons = true;                                                                                          // 9062
				var groupEl;                                                                                                       // 9063
                                                                                                                       // 9064
				$.each(this.split(','), function(j, buttonName) {                                                                  // 9065
					var customButtonProps;                                                                                            // 9066
					var viewSpec;                                                                                                     // 9067
					var buttonClick;                                                                                                  // 9068
					var overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 9069
					var defaultText;                                                                                                  // 9070
					var themeIcon;                                                                                                    // 9071
					var normalIcon;                                                                                                   // 9072
					var innerHtml;                                                                                                    // 9073
					var classes;                                                                                                      // 9074
					var button; // the element                                                                                        // 9075
                                                                                                                       // 9076
					if (buttonName == 'title') {                                                                                      // 9077
						groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 9078
						isOnlyButtons = false;                                                                                           // 9079
					}                                                                                                                 // 9080
					else {                                                                                                            // 9081
						if ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {                                  // 9082
							buttonClick = function(ev) {                                                                                    // 9083
								if (customButtonProps.click) {                                                                                 // 9084
									customButtonProps.click.call(button[0], ev);                                                                  // 9085
								}                                                                                                              // 9086
							};                                                                                                              // 9087
							overrideText = ''; // icons will override text                                                                  // 9088
							defaultText = customButtonProps.text;                                                                           // 9089
						}                                                                                                                // 9090
						else if ((viewSpec = calendar.getViewSpec(buttonName))) {                                                        // 9091
							buttonClick = function() {                                                                                      // 9092
								calendar.changeView(buttonName);                                                                               // 9093
							};                                                                                                              // 9094
							viewsWithButtons.push(buttonName);                                                                              // 9095
							overrideText = viewSpec.buttonTextOverride;                                                                     // 9096
							defaultText = viewSpec.buttonTextDefault;                                                                       // 9097
						}                                                                                                                // 9098
						else if (calendar[buttonName]) { // a calendar method                                                            // 9099
							buttonClick = function() {                                                                                      // 9100
								calendar[buttonName]();                                                                                        // 9101
							};                                                                                                              // 9102
							overrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 9103
							defaultText = options.buttonText[buttonName]; // everything else is considered default                          // 9104
						}                                                                                                                // 9105
                                                                                                                       // 9106
						if (buttonClick) {                                                                                               // 9107
                                                                                                                       // 9108
							themeIcon =                                                                                                     // 9109
								customButtonProps ?                                                                                            // 9110
									customButtonProps.themeIcon :                                                                                 // 9111
									options.themeButtonIcons[buttonName];                                                                         // 9112
                                                                                                                       // 9113
							normalIcon =                                                                                                    // 9114
								customButtonProps ?                                                                                            // 9115
									customButtonProps.icon :                                                                                      // 9116
									options.buttonIcons[buttonName];                                                                              // 9117
                                                                                                                       // 9118
							if (overrideText) {                                                                                             // 9119
								innerHtml = htmlEscape(overrideText);                                                                          // 9120
							}                                                                                                               // 9121
							else if (themeIcon && options.theme) {                                                                          // 9122
								innerHtml = "<span class='ui-icon ui-icon-" + themeIcon + "'></span>";                                         // 9123
							}                                                                                                               // 9124
							else if (normalIcon && !options.theme) {                                                                        // 9125
								innerHtml = "<span class='fc-icon fc-icon-" + normalIcon + "'></span>";                                        // 9126
							}                                                                                                               // 9127
							else {                                                                                                          // 9128
								innerHtml = htmlEscape(defaultText);                                                                           // 9129
							}                                                                                                               // 9130
                                                                                                                       // 9131
							classes = [                                                                                                     // 9132
								'fc-' + buttonName + '-button',                                                                                // 9133
								tm + '-button',                                                                                                // 9134
								tm + '-state-default'                                                                                          // 9135
							];                                                                                                              // 9136
                                                                                                                       // 9137
							button = $( // type="button" so that it doesn't submit a form                                                   // 9138
								'<button type="button" class="' + classes.join(' ') + '">' +                                                   // 9139
									innerHtml +                                                                                                   // 9140
								'</button>'                                                                                                    // 9141
								)                                                                                                              // 9142
								.click(function(ev) {                                                                                          // 9143
									// don't process clicks for disabled buttons                                                                  // 9144
									if (!button.hasClass(tm + '-state-disabled')) {                                                               // 9145
                                                                                                                       // 9146
										buttonClick(ev);                                                                                             // 9147
                                                                                                                       // 9148
										// after the click action, if the button becomes the "active" tab, or disabled,                              // 9149
										// it should never have a hover class, so remove it now.                                                     // 9150
										if (                                                                                                         // 9151
											button.hasClass(tm + '-state-active') ||                                                                    // 9152
											button.hasClass(tm + '-state-disabled')                                                                     // 9153
										) {                                                                                                          // 9154
											button.removeClass(tm + '-state-hover');                                                                    // 9155
										}                                                                                                            // 9156
									}                                                                                                             // 9157
								})                                                                                                             // 9158
								.mousedown(function() {                                                                                        // 9159
									// the *down* effect (mouse pressed in).                                                                      // 9160
									// only on buttons that are not the "active" tab, or disabled                                                 // 9161
									button                                                                                                        // 9162
										.not('.' + tm + '-state-active')                                                                             // 9163
										.not('.' + tm + '-state-disabled')                                                                           // 9164
										.addClass(tm + '-state-down');                                                                               // 9165
								})                                                                                                             // 9166
								.mouseup(function() {                                                                                          // 9167
									// undo the *down* effect                                                                                     // 9168
									button.removeClass(tm + '-state-down');                                                                       // 9169
								})                                                                                                             // 9170
								.hover(                                                                                                        // 9171
									function() {                                                                                                  // 9172
										// the *hover* effect.                                                                                       // 9173
										// only on buttons that are not the "active" tab, or disabled                                                // 9174
										button                                                                                                       // 9175
											.not('.' + tm + '-state-active')                                                                            // 9176
											.not('.' + tm + '-state-disabled')                                                                          // 9177
											.addClass(tm + '-state-hover');                                                                             // 9178
									},                                                                                                            // 9179
									function() {                                                                                                  // 9180
										// undo the *hover* effect                                                                                   // 9181
										button                                                                                                       // 9182
											.removeClass(tm + '-state-hover')                                                                           // 9183
											.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 9184
									}                                                                                                             // 9185
								);                                                                                                             // 9186
                                                                                                                       // 9187
							groupChildren = groupChildren.add(button);                                                                      // 9188
						}                                                                                                                // 9189
					}                                                                                                                 // 9190
				});                                                                                                                // 9191
                                                                                                                       // 9192
				if (isOnlyButtons) {                                                                                               // 9193
					groupChildren                                                                                                     // 9194
						.first().addClass(tm + '-corner-left').end()                                                                     // 9195
						.last().addClass(tm + '-corner-right').end();                                                                    // 9196
				}                                                                                                                  // 9197
                                                                                                                       // 9198
				if (groupChildren.length > 1) {                                                                                    // 9199
					groupEl = $('<div/>');                                                                                            // 9200
					if (isOnlyButtons) {                                                                                              // 9201
						groupEl.addClass('fc-button-group');                                                                             // 9202
					}                                                                                                                 // 9203
					groupEl.append(groupChildren);                                                                                    // 9204
					sectionEl.append(groupEl);                                                                                        // 9205
				}                                                                                                                  // 9206
				else {                                                                                                             // 9207
					sectionEl.append(groupChildren); // 1 or 0 children                                                               // 9208
				}                                                                                                                  // 9209
			});                                                                                                                 // 9210
		}                                                                                                                    // 9211
                                                                                                                       // 9212
		return sectionEl;                                                                                                    // 9213
	}                                                                                                                     // 9214
	                                                                                                                      // 9215
	                                                                                                                      // 9216
	function updateTitle(text) {                                                                                          // 9217
		el.find('h2').text(text);                                                                                            // 9218
	}                                                                                                                     // 9219
	                                                                                                                      // 9220
	                                                                                                                      // 9221
	function activateButton(buttonName) {                                                                                 // 9222
		el.find('.fc-' + buttonName + '-button')                                                                             // 9223
			.addClass(tm + '-state-active');                                                                                    // 9224
	}                                                                                                                     // 9225
	                                                                                                                      // 9226
	                                                                                                                      // 9227
	function deactivateButton(buttonName) {                                                                               // 9228
		el.find('.fc-' + buttonName + '-button')                                                                             // 9229
			.removeClass(tm + '-state-active');                                                                                 // 9230
	}                                                                                                                     // 9231
	                                                                                                                      // 9232
	                                                                                                                      // 9233
	function disableButton(buttonName) {                                                                                  // 9234
		el.find('.fc-' + buttonName + '-button')                                                                             // 9235
			.attr('disabled', 'disabled')                                                                                       // 9236
			.addClass(tm + '-state-disabled');                                                                                  // 9237
	}                                                                                                                     // 9238
	                                                                                                                      // 9239
	                                                                                                                      // 9240
	function enableButton(buttonName) {                                                                                   // 9241
		el.find('.fc-' + buttonName + '-button')                                                                             // 9242
			.removeAttr('disabled')                                                                                             // 9243
			.removeClass(tm + '-state-disabled');                                                                               // 9244
	}                                                                                                                     // 9245
                                                                                                                       // 9246
                                                                                                                       // 9247
	function getViewsWithButtons() {                                                                                      // 9248
		return viewsWithButtons;                                                                                             // 9249
	}                                                                                                                     // 9250
                                                                                                                       // 9251
}                                                                                                                      // 9252
                                                                                                                       // 9253
;;                                                                                                                     // 9254
                                                                                                                       // 9255
fc.sourceNormalizers = [];                                                                                             // 9256
fc.sourceFetchers = [];                                                                                                // 9257
                                                                                                                       // 9258
var ajaxDefaults = {                                                                                                   // 9259
	dataType: 'json',                                                                                                     // 9260
	cache: false                                                                                                          // 9261
};                                                                                                                     // 9262
                                                                                                                       // 9263
var eventGUID = 1;                                                                                                     // 9264
                                                                                                                       // 9265
                                                                                                                       // 9266
function EventManager(options) { // assumed to be a calendar                                                           // 9267
	var t = this;                                                                                                         // 9268
	                                                                                                                      // 9269
	                                                                                                                      // 9270
	// exports                                                                                                            // 9271
	t.isFetchNeeded = isFetchNeeded;                                                                                      // 9272
	t.fetchEvents = fetchEvents;                                                                                          // 9273
	t.addEventSource = addEventSource;                                                                                    // 9274
	t.removeEventSource = removeEventSource;                                                                              // 9275
	t.updateEvent = updateEvent;                                                                                          // 9276
	t.renderEvent = renderEvent;                                                                                          // 9277
	t.removeEvents = removeEvents;                                                                                        // 9278
	t.clientEvents = clientEvents;                                                                                        // 9279
	t.mutateEvent = mutateEvent;                                                                                          // 9280
	t.normalizeEventRange = normalizeEventRange;                                                                          // 9281
	t.normalizeEventRangeTimes = normalizeEventRangeTimes;                                                                // 9282
	t.ensureVisibleEventRange = ensureVisibleEventRange;                                                                  // 9283
	                                                                                                                      // 9284
	                                                                                                                      // 9285
	// imports                                                                                                            // 9286
	var reportEvents = t.reportEvents;                                                                                    // 9287
	                                                                                                                      // 9288
	                                                                                                                      // 9289
	// locals                                                                                                             // 9290
	var stickySource = { events: [] };                                                                                    // 9291
	var sources = [ stickySource ];                                                                                       // 9292
	var rangeStart, rangeEnd;                                                                                             // 9293
	var currentFetchID = 0;                                                                                               // 9294
	var pendingSourceCnt = 0;                                                                                             // 9295
	var cache = []; // holds events that have already been expanded                                                       // 9296
                                                                                                                       // 9297
                                                                                                                       // 9298
	$.each(                                                                                                               // 9299
		(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 9300
		function(i, sourceInput) {                                                                                           // 9301
			var source = buildEventSource(sourceInput);                                                                         // 9302
			if (source) {                                                                                                       // 9303
				sources.push(source);                                                                                              // 9304
			}                                                                                                                   // 9305
		}                                                                                                                    // 9306
	);                                                                                                                    // 9307
	                                                                                                                      // 9308
	                                                                                                                      // 9309
	                                                                                                                      // 9310
	/* Fetching                                                                                                           // 9311
	-----------------------------------------------------------------------------*/                                       // 9312
	                                                                                                                      // 9313
	                                                                                                                      // 9314
	function isFetchNeeded(start, end) {                                                                                  // 9315
		return !rangeStart || // nothing has been fetched yet?                                                               // 9316
			// or, a part of the new range is outside of the old range? (after normalizing)                                     // 9317
			start.clone().stripZone() < rangeStart.clone().stripZone() ||                                                       // 9318
			end.clone().stripZone() > rangeEnd.clone().stripZone();                                                             // 9319
	}                                                                                                                     // 9320
	                                                                                                                      // 9321
	                                                                                                                      // 9322
	function fetchEvents(start, end) {                                                                                    // 9323
		rangeStart = start;                                                                                                  // 9324
		rangeEnd = end;                                                                                                      // 9325
		cache = [];                                                                                                          // 9326
		var fetchID = ++currentFetchID;                                                                                      // 9327
		var len = sources.length;                                                                                            // 9328
		pendingSourceCnt = len;                                                                                              // 9329
		for (var i=0; i<len; i++) {                                                                                          // 9330
			fetchEventSource(sources[i], fetchID);                                                                              // 9331
		}                                                                                                                    // 9332
	}                                                                                                                     // 9333
	                                                                                                                      // 9334
	                                                                                                                      // 9335
	function fetchEventSource(source, fetchID) {                                                                          // 9336
		_fetchEventSource(source, function(eventInputs) {                                                                    // 9337
			var isArraySource = $.isArray(source.events);                                                                       // 9338
			var i, eventInput;                                                                                                  // 9339
			var abstractEvent;                                                                                                  // 9340
                                                                                                                       // 9341
			if (fetchID == currentFetchID) {                                                                                    // 9342
                                                                                                                       // 9343
				if (eventInputs) {                                                                                                 // 9344
					for (i = 0; i < eventInputs.length; i++) {                                                                        // 9345
						eventInput = eventInputs[i];                                                                                     // 9346
                                                                                                                       // 9347
						if (isArraySource) { // array sources have already been convert to Event Objects                                 // 9348
							abstractEvent = eventInput;                                                                                     // 9349
						}                                                                                                                // 9350
						else {                                                                                                           // 9351
							abstractEvent = buildEventFromInput(eventInput, source);                                                        // 9352
						}                                                                                                                // 9353
                                                                                                                       // 9354
						if (abstractEvent) { // not false (an invalid event)                                                             // 9355
							cache.push.apply(                                                                                               // 9356
								cache,                                                                                                         // 9357
								expandEvent(abstractEvent) // add individual expanded events to the cache                                      // 9358
							);                                                                                                              // 9359
						}                                                                                                                // 9360
					}                                                                                                                 // 9361
				}                                                                                                                  // 9362
                                                                                                                       // 9363
				pendingSourceCnt--;                                                                                                // 9364
				if (!pendingSourceCnt) {                                                                                           // 9365
					reportEvents(cache);                                                                                              // 9366
				}                                                                                                                  // 9367
			}                                                                                                                   // 9368
		});                                                                                                                  // 9369
	}                                                                                                                     // 9370
	                                                                                                                      // 9371
	                                                                                                                      // 9372
	function _fetchEventSource(source, callback) {                                                                        // 9373
		var i;                                                                                                               // 9374
		var fetchers = fc.sourceFetchers;                                                                                    // 9375
		var res;                                                                                                             // 9376
                                                                                                                       // 9377
		for (i=0; i<fetchers.length; i++) {                                                                                  // 9378
			res = fetchers[i].call(                                                                                             // 9379
				t, // this, the Calendar object                                                                                    // 9380
				source,                                                                                                            // 9381
				rangeStart.clone(),                                                                                                // 9382
				rangeEnd.clone(),                                                                                                  // 9383
				options.timezone,                                                                                                  // 9384
				callback                                                                                                           // 9385
			);                                                                                                                  // 9386
                                                                                                                       // 9387
			if (res === true) {                                                                                                 // 9388
				// the fetcher is in charge. made its own async request                                                            // 9389
				return;                                                                                                            // 9390
			}                                                                                                                   // 9391
			else if (typeof res == 'object') {                                                                                  // 9392
				// the fetcher returned a new source. process it                                                                   // 9393
				_fetchEventSource(res, callback);                                                                                  // 9394
				return;                                                                                                            // 9395
			}                                                                                                                   // 9396
		}                                                                                                                    // 9397
                                                                                                                       // 9398
		var events = source.events;                                                                                          // 9399
		if (events) {                                                                                                        // 9400
			if ($.isFunction(events)) {                                                                                         // 9401
				t.pushLoading();                                                                                                   // 9402
				events.call(                                                                                                       // 9403
					t, // this, the Calendar object                                                                                   // 9404
					rangeStart.clone(),                                                                                               // 9405
					rangeEnd.clone(),                                                                                                 // 9406
					options.timezone,                                                                                                 // 9407
					function(events) {                                                                                                // 9408
						callback(events);                                                                                                // 9409
						t.popLoading();                                                                                                  // 9410
					}                                                                                                                 // 9411
				);                                                                                                                 // 9412
			}                                                                                                                   // 9413
			else if ($.isArray(events)) {                                                                                       // 9414
				callback(events);                                                                                                  // 9415
			}                                                                                                                   // 9416
			else {                                                                                                              // 9417
				callback();                                                                                                        // 9418
			}                                                                                                                   // 9419
		}else{                                                                                                               // 9420
			var url = source.url;                                                                                               // 9421
			if (url) {                                                                                                          // 9422
				var success = source.success;                                                                                      // 9423
				var error = source.error;                                                                                          // 9424
				var complete = source.complete;                                                                                    // 9425
                                                                                                                       // 9426
				// retrieve any outbound GET/POST $.ajax data from the options                                                     // 9427
				var customData;                                                                                                    // 9428
				if ($.isFunction(source.data)) {                                                                                   // 9429
					// supplied as a function that returns a key/value object                                                         // 9430
					customData = source.data();                                                                                       // 9431
				}                                                                                                                  // 9432
				else {                                                                                                             // 9433
					// supplied as a straight key/value object                                                                        // 9434
					customData = source.data;                                                                                         // 9435
				}                                                                                                                  // 9436
                                                                                                                       // 9437
				// use a copy of the custom data so we can modify the parameters                                                   // 9438
				// and not affect the passed-in object.                                                                            // 9439
				var data = $.extend({}, customData || {});                                                                         // 9440
                                                                                                                       // 9441
				var startParam = firstDefined(source.startParam, options.startParam);                                              // 9442
				var endParam = firstDefined(source.endParam, options.endParam);                                                    // 9443
				var timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 9444
                                                                                                                       // 9445
				if (startParam) {                                                                                                  // 9446
					data[startParam] = rangeStart.format();                                                                           // 9447
				}                                                                                                                  // 9448
				if (endParam) {                                                                                                    // 9449
					data[endParam] = rangeEnd.format();                                                                               // 9450
				}                                                                                                                  // 9451
				if (options.timezone && options.timezone != 'local') {                                                             // 9452
					data[timezoneParam] = options.timezone;                                                                           // 9453
				}                                                                                                                  // 9454
                                                                                                                       // 9455
				t.pushLoading();                                                                                                   // 9456
				$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 9457
					data: data,                                                                                                       // 9458
					success: function(events) {                                                                                       // 9459
						events = events || [];                                                                                           // 9460
						var res = applyAll(success, this, arguments);                                                                    // 9461
						if ($.isArray(res)) {                                                                                            // 9462
							events = res;                                                                                                   // 9463
						}                                                                                                                // 9464
						callback(events);                                                                                                // 9465
					},                                                                                                                // 9466
					error: function() {                                                                                               // 9467
						applyAll(error, this, arguments);                                                                                // 9468
						callback();                                                                                                      // 9469
					},                                                                                                                // 9470
					complete: function() {                                                                                            // 9471
						applyAll(complete, this, arguments);                                                                             // 9472
						t.popLoading();                                                                                                  // 9473
					}                                                                                                                 // 9474
				}));                                                                                                               // 9475
			}else{                                                                                                              // 9476
				callback();                                                                                                        // 9477
			}                                                                                                                   // 9478
		}                                                                                                                    // 9479
	}                                                                                                                     // 9480
	                                                                                                                      // 9481
	                                                                                                                      // 9482
	                                                                                                                      // 9483
	/* Sources                                                                                                            // 9484
	-----------------------------------------------------------------------------*/                                       // 9485
	                                                                                                                      // 9486
                                                                                                                       // 9487
	function addEventSource(sourceInput) {                                                                                // 9488
		var source = buildEventSource(sourceInput);                                                                          // 9489
		if (source) {                                                                                                        // 9490
			sources.push(source);                                                                                               // 9491
			pendingSourceCnt++;                                                                                                 // 9492
			fetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 9493
		}                                                                                                                    // 9494
	}                                                                                                                     // 9495
                                                                                                                       // 9496
                                                                                                                       // 9497
	function buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 9498
		var normalizers = fc.sourceNormalizers;                                                                              // 9499
		var source;                                                                                                          // 9500
		var i;                                                                                                               // 9501
                                                                                                                       // 9502
		if ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 9503
			source = { events: sourceInput };                                                                                   // 9504
		}                                                                                                                    // 9505
		else if (typeof sourceInput === 'string') {                                                                          // 9506
			source = { url: sourceInput };                                                                                      // 9507
		}                                                                                                                    // 9508
		else if (typeof sourceInput === 'object') {                                                                          // 9509
			source = $.extend({}, sourceInput); // shallow copy                                                                 // 9510
		}                                                                                                                    // 9511
                                                                                                                       // 9512
		if (source) {                                                                                                        // 9513
                                                                                                                       // 9514
			// TODO: repeat code, same code for event classNames                                                                // 9515
			if (source.className) {                                                                                             // 9516
				if (typeof source.className === 'string') {                                                                        // 9517
					source.className = source.className.split(/\s+/);                                                                 // 9518
				}                                                                                                                  // 9519
				// otherwise, assumed to be an array                                                                               // 9520
			}                                                                                                                   // 9521
			else {                                                                                                              // 9522
				source.className = [];                                                                                             // 9523
			}                                                                                                                   // 9524
                                                                                                                       // 9525
			// for array sources, we convert to standard Event Objects up front                                                 // 9526
			if ($.isArray(source.events)) {                                                                                     // 9527
				source.origArray = source.events; // for removeEventSource                                                         // 9528
				source.events = $.map(source.events, function(eventInput) {                                                        // 9529
					return buildEventFromInput(eventInput, source);                                                                   // 9530
				});                                                                                                                // 9531
			}                                                                                                                   // 9532
                                                                                                                       // 9533
			for (i=0; i<normalizers.length; i++) {                                                                              // 9534
				normalizers[i].call(t, source);                                                                                    // 9535
			}                                                                                                                   // 9536
                                                                                                                       // 9537
			return source;                                                                                                      // 9538
		}                                                                                                                    // 9539
	}                                                                                                                     // 9540
                                                                                                                       // 9541
                                                                                                                       // 9542
	function removeEventSource(source) {                                                                                  // 9543
		sources = $.grep(sources, function(src) {                                                                            // 9544
			return !isSourcesEqual(src, source);                                                                                // 9545
		});                                                                                                                  // 9546
		// remove all client events from that source                                                                         // 9547
		cache = $.grep(cache, function(e) {                                                                                  // 9548
			return !isSourcesEqual(e.source, source);                                                                           // 9549
		});                                                                                                                  // 9550
		reportEvents(cache);                                                                                                 // 9551
	}                                                                                                                     // 9552
                                                                                                                       // 9553
                                                                                                                       // 9554
	function isSourcesEqual(source1, source2) {                                                                           // 9555
		return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 9556
	}                                                                                                                     // 9557
                                                                                                                       // 9558
                                                                                                                       // 9559
	function getSourcePrimitive(source) {                                                                                 // 9560
		return (                                                                                                             // 9561
			(typeof source === 'object') ? // a normalized event source?                                                        // 9562
				(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 9563
				null                                                                                                               // 9564
		) ||                                                                                                                 // 9565
		source; // the given argument *is* the primitive                                                                     // 9566
	}                                                                                                                     // 9567
	                                                                                                                      // 9568
	                                                                                                                      // 9569
	                                                                                                                      // 9570
	/* Manipulation                                                                                                       // 9571
	-----------------------------------------------------------------------------*/                                       // 9572
                                                                                                                       // 9573
                                                                                                                       // 9574
	// Only ever called from the externally-facing API                                                                    // 9575
	function updateEvent(event) {                                                                                         // 9576
                                                                                                                       // 9577
		// massage start/end values, even if date string values                                                              // 9578
		event.start = t.moment(event.start);                                                                                 // 9579
		if (event.end) {                                                                                                     // 9580
			event.end = t.moment(event.end);                                                                                    // 9581
		}                                                                                                                    // 9582
		else {                                                                                                               // 9583
			event.end = null;                                                                                                   // 9584
		}                                                                                                                    // 9585
                                                                                                                       // 9586
		mutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 9587
		reportEvents(cache); // reports event modifications (so we can redraw)                                               // 9588
	}                                                                                                                     // 9589
                                                                                                                       // 9590
                                                                                                                       // 9591
	// Returns a hash of misc event properties that should be copied over to related events.                              // 9592
	function getMiscEventProps(event) {                                                                                   // 9593
		var props = {};                                                                                                      // 9594
                                                                                                                       // 9595
		$.each(event, function(name, val) {                                                                                  // 9596
			if (isMiscEventPropName(name)) {                                                                                    // 9597
				if (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 9598
					props[name] = val;                                                                                                // 9599
				}                                                                                                                  // 9600
			}                                                                                                                   // 9601
		});                                                                                                                  // 9602
                                                                                                                       // 9603
		return props;                                                                                                        // 9604
	}                                                                                                                     // 9605
                                                                                                                       // 9606
	// non-date-related, non-id-related, non-secret                                                                       // 9607
	function isMiscEventPropName(name) {                                                                                  // 9608
		return !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 9609
	}                                                                                                                     // 9610
                                                                                                                       // 9611
	                                                                                                                      // 9612
	// returns the expanded events that were created                                                                      // 9613
	function renderEvent(eventInput, stick) {                                                                             // 9614
		var abstractEvent = buildEventFromInput(eventInput);                                                                 // 9615
		var events;                                                                                                          // 9616
		var i, event;                                                                                                        // 9617
                                                                                                                       // 9618
		if (abstractEvent) { // not false (a valid input)                                                                    // 9619
			events = expandEvent(abstractEvent);                                                                                // 9620
                                                                                                                       // 9621
			for (i = 0; i < events.length; i++) {                                                                               // 9622
				event = events[i];                                                                                                 // 9623
                                                                                                                       // 9624
				if (!event.source) {                                                                                               // 9625
					if (stick) {                                                                                                      // 9626
						stickySource.events.push(event);                                                                                 // 9627
						event.source = stickySource;                                                                                     // 9628
					}                                                                                                                 // 9629
					cache.push(event);                                                                                                // 9630
				}                                                                                                                  // 9631
			}                                                                                                                   // 9632
                                                                                                                       // 9633
			reportEvents(cache);                                                                                                // 9634
                                                                                                                       // 9635
			return events;                                                                                                      // 9636
		}                                                                                                                    // 9637
                                                                                                                       // 9638
		return [];                                                                                                           // 9639
	}                                                                                                                     // 9640
	                                                                                                                      // 9641
	                                                                                                                      // 9642
	function removeEvents(filter) {                                                                                       // 9643
		var eventID;                                                                                                         // 9644
		var i;                                                                                                               // 9645
                                                                                                                       // 9646
		if (filter == null) { // null or undefined. remove all events                                                        // 9647
			filter = function() { return true; }; // will always match                                                          // 9648
		}                                                                                                                    // 9649
		else if (!$.isFunction(filter)) { // an event ID                                                                     // 9650
			eventID = filter + '';                                                                                              // 9651
			filter = function(event) {                                                                                          // 9652
				return event._id == eventID;                                                                                       // 9653
			};                                                                                                                  // 9654
		}                                                                                                                    // 9655
                                                                                                                       // 9656
		// Purge event(s) from our local cache                                                                               // 9657
		cache = $.grep(cache, filter, true); // inverse=true                                                                 // 9658
                                                                                                                       // 9659
		// Remove events from array sources.                                                                                 // 9660
		// This works because they have been converted to official Event Objects up front.                                   // 9661
		// (and as a result, event._id has been calculated).                                                                 // 9662
		for (i=0; i<sources.length; i++) {                                                                                   // 9663
			if ($.isArray(sources[i].events)) {                                                                                 // 9664
				sources[i].events = $.grep(sources[i].events, filter, true);                                                       // 9665
			}                                                                                                                   // 9666
		}                                                                                                                    // 9667
                                                                                                                       // 9668
		reportEvents(cache);                                                                                                 // 9669
	}                                                                                                                     // 9670
	                                                                                                                      // 9671
	                                                                                                                      // 9672
	function clientEvents(filter) {                                                                                       // 9673
		if ($.isFunction(filter)) {                                                                                          // 9674
			return $.grep(cache, filter);                                                                                       // 9675
		}                                                                                                                    // 9676
		else if (filter != null) { // not null, not undefined. an event ID                                                   // 9677
			filter += '';                                                                                                       // 9678
			return $.grep(cache, function(e) {                                                                                  // 9679
				return e._id == filter;                                                                                            // 9680
			});                                                                                                                 // 9681
		}                                                                                                                    // 9682
		return cache; // else, return all                                                                                    // 9683
	}                                                                                                                     // 9684
	                                                                                                                      // 9685
	                                                                                                                      // 9686
	                                                                                                                      // 9687
	/* Event Normalization                                                                                                // 9688
	-----------------------------------------------------------------------------*/                                       // 9689
                                                                                                                       // 9690
                                                                                                                       // 9691
	// Given a raw object with key/value properties, returns an "abstract" Event object.                                  // 9692
	// An "abstract" event is an event that, if recurring, will not have been expanded yet.                               // 9693
	// Will return `false` when input is invalid.                                                                         // 9694
	// `source` is optional                                                                                               // 9695
	function buildEventFromInput(input, source) {                                                                         // 9696
		var out = {};                                                                                                        // 9697
		var start, end;                                                                                                      // 9698
		var allDay;                                                                                                          // 9699
                                                                                                                       // 9700
		if (options.eventDataTransform) {                                                                                    // 9701
			input = options.eventDataTransform(input);                                                                          // 9702
		}                                                                                                                    // 9703
		if (source && source.eventDataTransform) {                                                                           // 9704
			input = source.eventDataTransform(input);                                                                           // 9705
		}                                                                                                                    // 9706
                                                                                                                       // 9707
		// Copy all properties over to the resulting object.                                                                 // 9708
		// The special-case properties will be copied over afterwards.                                                       // 9709
		$.extend(out, input);                                                                                                // 9710
                                                                                                                       // 9711
		if (source) {                                                                                                        // 9712
			out.source = source;                                                                                                // 9713
		}                                                                                                                    // 9714
                                                                                                                       // 9715
		out._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 9716
                                                                                                                       // 9717
		if (input.className) {                                                                                               // 9718
			if (typeof input.className == 'string') {                                                                           // 9719
				out.className = input.className.split(/\s+/);                                                                      // 9720
			}                                                                                                                   // 9721
			else { // assumed to be an array                                                                                    // 9722
				out.className = input.className;                                                                                   // 9723
			}                                                                                                                   // 9724
		}                                                                                                                    // 9725
		else {                                                                                                               // 9726
			out.className = [];                                                                                                 // 9727
		}                                                                                                                    // 9728
                                                                                                                       // 9729
		start = input.start || input.date; // "date" is an alias for "start"                                                 // 9730
		end = input.end;                                                                                                     // 9731
                                                                                                                       // 9732
		// parse as a time (Duration) if applicable                                                                          // 9733
		if (isTimeString(start)) {                                                                                           // 9734
			start = moment.duration(start);                                                                                     // 9735
		}                                                                                                                    // 9736
		if (isTimeString(end)) {                                                                                             // 9737
			end = moment.duration(end);                                                                                         // 9738
		}                                                                                                                    // 9739
                                                                                                                       // 9740
		if (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 9741
                                                                                                                       // 9742
			// the event is "abstract" (recurring) so don't calculate exact start/end dates just yet                            // 9743
			out.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 9744
			out.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 9745
			out._recurring = true; // our internal marker                                                                       // 9746
		}                                                                                                                    // 9747
		else {                                                                                                               // 9748
                                                                                                                       // 9749
			if (start) {                                                                                                        // 9750
				start = t.moment(start);                                                                                           // 9751
				if (!start.isValid()) {                                                                                            // 9752
					return false;                                                                                                     // 9753
				}                                                                                                                  // 9754
			}                                                                                                                   // 9755
                                                                                                                       // 9756
			if (end) {                                                                                                          // 9757
				end = t.moment(end);                                                                                               // 9758
				if (!end.isValid()) {                                                                                              // 9759
					end = null; // let defaults take over                                                                             // 9760
				}                                                                                                                  // 9761
			}                                                                                                                   // 9762
                                                                                                                       // 9763
			allDay = input.allDay;                                                                                              // 9764
			if (allDay === undefined) { // still undefined? fallback to default                                                 // 9765
				allDay = firstDefined(                                                                                             // 9766
					source ? source.allDayDefault : undefined,                                                                        // 9767
					options.allDayDefault                                                                                             // 9768
				);                                                                                                                 // 9769
				// still undefined? normalizeEventRange will calculate it                                                          // 9770
			}                                                                                                                   // 9771
                                                                                                                       // 9772
			assignDatesToEvent(start, end, allDay, out);                                                                        // 9773
		}                                                                                                                    // 9774
                                                                                                                       // 9775
		return out;                                                                                                          // 9776
	}                                                                                                                     // 9777
                                                                                                                       // 9778
                                                                                                                       // 9779
	// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 9780
	// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 9781
	function assignDatesToEvent(start, end, allDay, event) {                                                              // 9782
		event.start = start;                                                                                                 // 9783
		event.end = end;                                                                                                     // 9784
		event.allDay = allDay;                                                                                               // 9785
		normalizeEventRange(event);                                                                                          // 9786
		backupEventDates(event);                                                                                             // 9787
	}                                                                                                                     // 9788
                                                                                                                       // 9789
                                                                                                                       // 9790
	// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 9791
	// NOTE: Will modify the given object.                                                                                // 9792
	function normalizeEventRange(props) {                                                                                 // 9793
                                                                                                                       // 9794
		normalizeEventRangeTimes(props);                                                                                     // 9795
                                                                                                                       // 9796
		if (props.end && !props.end.isAfter(props.start)) {                                                                  // 9797
			props.end = null;                                                                                                   // 9798
		}                                                                                                                    // 9799
                                                                                                                       // 9800
		if (!props.end) {                                                                                                    // 9801
			if (options.forceEventDuration) {                                                                                   // 9802
				props.end = t.getDefaultEventEnd(props.allDay, props.start);                                                       // 9803
			}                                                                                                                   // 9804
			else {                                                                                                              // 9805
				props.end = null;                                                                                                  // 9806
			}                                                                                                                   // 9807
		}                                                                                                                    // 9808
	}                                                                                                                     // 9809
                                                                                                                       // 9810
                                                                                                                       // 9811
	// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 9812
	function normalizeEventRangeTimes(range) {                                                                            // 9813
		if (range.allDay == null) {                                                                                          // 9814
			range.allDay = !(range.start.hasTime() || (range.end && range.end.hasTime()));                                      // 9815
		}                                                                                                                    // 9816
                                                                                                                       // 9817
		if (range.allDay) {                                                                                                  // 9818
			range.start.stripTime();                                                                                            // 9819
			if (range.end) {                                                                                                    // 9820
				// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 9821
				range.end.stripTime();                                                                                             // 9822
			}                                                                                                                   // 9823
		}                                                                                                                    // 9824
		else {                                                                                                               // 9825
			if (!range.start.hasTime()) {                                                                                       // 9826
				range.start = t.rezoneDate(range.start); // will assign a 00:00 time                                               // 9827
			}                                                                                                                   // 9828
			if (range.end && !range.end.hasTime()) {                                                                            // 9829
				range.end = t.rezoneDate(range.end); // will assign a 00:00 time                                                   // 9830
			}                                                                                                                   // 9831
		}                                                                                                                    // 9832
	}                                                                                                                     // 9833
                                                                                                                       // 9834
                                                                                                                       // 9835
	// If `range` is a proper range with a start and end, returns the original object.                                    // 9836
	// If missing an end, computes a new range with an end, computing it as if it were an event.                          // 9837
	// TODO: make this a part of the event -> eventRange system                                                           // 9838
	function ensureVisibleEventRange(range) {                                                                             // 9839
		var allDay;                                                                                                          // 9840
                                                                                                                       // 9841
		if (!range.end) {                                                                                                    // 9842
                                                                                                                       // 9843
			allDay = range.allDay; // range might be more event-ish than we think                                               // 9844
			if (allDay == null) {                                                                                               // 9845
				allDay = !range.start.hasTime();                                                                                   // 9846
			}                                                                                                                   // 9847
                                                                                                                       // 9848
			range = $.extend({}, range); // make a copy, copying over other misc properties                                     // 9849
			range.end = t.getDefaultEventEnd(allDay, range.start);                                                              // 9850
		}                                                                                                                    // 9851
		return range;                                                                                                        // 9852
	}                                                                                                                     // 9853
                                                                                                                       // 9854
                                                                                                                       // 9855
	// If the given event is a recurring event, break it down into an array of individual instances.                      // 9856
	// If not a recurring event, return an array with the single original event.                                          // 9857
	// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 9858
	// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 9859
	function expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 9860
		var events = [];                                                                                                     // 9861
		var dowHash;                                                                                                         // 9862
		var dow;                                                                                                             // 9863
		var i;                                                                                                               // 9864
		var date;                                                                                                            // 9865
		var startTime, endTime;                                                                                              // 9866
		var start, end;                                                                                                      // 9867
		var event;                                                                                                           // 9868
                                                                                                                       // 9869
		_rangeStart = _rangeStart || rangeStart;                                                                             // 9870
		_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 9871
                                                                                                                       // 9872
		if (abstractEvent) {                                                                                                 // 9873
			if (abstractEvent._recurring) {                                                                                     // 9874
                                                                                                                       // 9875
				// make a boolean hash as to whether the event occurs on each day-of-week                                          // 9876
				if ((dow = abstractEvent.dow)) {                                                                                   // 9877
					dowHash = {};                                                                                                     // 9878
					for (i = 0; i < dow.length; i++) {                                                                                // 9879
						dowHash[dow[i]] = true;                                                                                          // 9880
					}                                                                                                                 // 9881
				}                                                                                                                  // 9882
                                                                                                                       // 9883
				// iterate through every day in the current range                                                                  // 9884
				date = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 9885
				while (date.isBefore(_rangeEnd)) {                                                                                 // 9886
                                                                                                                       // 9887
					if (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 9888
                                                                                                                       // 9889
						startTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 9890
						endTime = abstractEvent.end; // "                                                                                // 9891
						start = date.clone();                                                                                            // 9892
						end = null;                                                                                                      // 9893
                                                                                                                       // 9894
						if (startTime) {                                                                                                 // 9895
							start = start.time(startTime);                                                                                  // 9896
						}                                                                                                                // 9897
						if (endTime) {                                                                                                   // 9898
							end = date.clone().time(endTime);                                                                               // 9899
						}                                                                                                                // 9900
                                                                                                                       // 9901
						event = $.extend({}, abstractEvent); // make a copy of the original                                              // 9902
						assignDatesToEvent(                                                                                              // 9903
							start, end,                                                                                                     // 9904
							!startTime && !endTime, // allDay?                                                                              // 9905
							event                                                                                                           // 9906
						);                                                                                                               // 9907
						events.push(event);                                                                                              // 9908
					}                                                                                                                 // 9909
                                                                                                                       // 9910
					date.add(1, 'days');                                                                                              // 9911
				}                                                                                                                  // 9912
			}                                                                                                                   // 9913
			else {                                                                                                              // 9914
				events.push(abstractEvent); // return the original event. will be a one-item array                                 // 9915
			}                                                                                                                   // 9916
		}                                                                                                                    // 9917
                                                                                                                       // 9918
		return events;                                                                                                       // 9919
	}                                                                                                                     // 9920
                                                                                                                       // 9921
                                                                                                                       // 9922
                                                                                                                       // 9923
	/* Event Modification Math                                                                                            // 9924
	-----------------------------------------------------------------------------------------*/                           // 9925
                                                                                                                       // 9926
                                                                                                                       // 9927
	// Modifies an event and all related events by applying the given properties.                                         // 9928
	// Special date-diffing logic is used for manipulation of dates.                                                      // 9929
	// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 9930
	// All date comparisons are done against the event's pristine _start and _end dates.                                  // 9931
	// Returns an object with delta information and a function to undo all operations.                                    // 9932
	// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 9933
	// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 9934
	function mutateEvent(event, newProps, largeUnit) {                                                                    // 9935
		var miscProps = {};                                                                                                  // 9936
		var oldProps;                                                                                                        // 9937
		var clearEnd;                                                                                                        // 9938
		var startDelta;                                                                                                      // 9939
		var endDelta;                                                                                                        // 9940
		var durationDelta;                                                                                                   // 9941
		var undoFunc;                                                                                                        // 9942
                                                                                                                       // 9943
		// diffs the dates in the appropriate way, returning a duration                                                      // 9944
		function diffDates(date1, date0) { // date1 - date0                                                                  // 9945
			if (largeUnit) {                                                                                                    // 9946
				return diffByUnit(date1, date0, largeUnit);                                                                        // 9947
			}                                                                                                                   // 9948
			else if (newProps.allDay) {                                                                                         // 9949
				return diffDay(date1, date0);                                                                                      // 9950
			}                                                                                                                   // 9951
			else {                                                                                                              // 9952
				return diffDayTime(date1, date0);                                                                                  // 9953
			}                                                                                                                   // 9954
		}                                                                                                                    // 9955
                                                                                                                       // 9956
		newProps = newProps || {};                                                                                           // 9957
                                                                                                                       // 9958
		// normalize new date-related properties                                                                             // 9959
		if (!newProps.start) {                                                                                               // 9960
			newProps.start = event.start.clone();                                                                               // 9961
		}                                                                                                                    // 9962
		if (newProps.end === undefined) {                                                                                    // 9963
			newProps.end = event.end ? event.end.clone() : null;                                                                // 9964
		}                                                                                                                    // 9965
		if (newProps.allDay == null) { // is null or undefined?                                                              // 9966
			newProps.allDay = event.allDay;                                                                                     // 9967
		}                                                                                                                    // 9968
		normalizeEventRange(newProps);                                                                                       // 9969
                                                                                                                       // 9970
		// create normalized versions of the original props to compare against                                               // 9971
		// need a real end value, for diffing                                                                                // 9972
		oldProps = {                                                                                                         // 9973
			start: event._start.clone(),                                                                                        // 9974
			end: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 9975
			allDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 9976
		};                                                                                                                   // 9977
		normalizeEventRange(oldProps);                                                                                       // 9978
                                                                                                                       // 9979
		// need to clear the end date if explicitly changed to null                                                          // 9980
		clearEnd = event._end !== null && newProps.end === null;                                                             // 9981
                                                                                                                       // 9982
		// compute the delta for moving the start date                                                                       // 9983
		startDelta = diffDates(newProps.start, oldProps.start);                                                              // 9984
                                                                                                                       // 9985
		// compute the delta for moving the end date                                                                         // 9986
		if (newProps.end) {                                                                                                  // 9987
			endDelta = diffDates(newProps.end, oldProps.end);                                                                   // 9988
			durationDelta = endDelta.subtract(startDelta);                                                                      // 9989
		}                                                                                                                    // 9990
		else {                                                                                                               // 9991
			durationDelta = null;                                                                                               // 9992
		}                                                                                                                    // 9993
                                                                                                                       // 9994
		// gather all non-date-related properties                                                                            // 9995
		$.each(newProps, function(name, val) {                                                                               // 9996
			if (isMiscEventPropName(name)) {                                                                                    // 9997
				if (val !== undefined) {                                                                                           // 9998
					miscProps[name] = val;                                                                                            // 9999
				}                                                                                                                  // 10000
			}                                                                                                                   // 10001
		});                                                                                                                  // 10002
                                                                                                                       // 10003
		// apply the operations to the event and all related events                                                          // 10004
		undoFunc = mutateEvents(                                                                                             // 10005
			clientEvents(event._id), // get events with this ID                                                                 // 10006
			clearEnd,                                                                                                           // 10007
			newProps.allDay,                                                                                                    // 10008
			startDelta,                                                                                                         // 10009
			durationDelta,                                                                                                      // 10010
			miscProps                                                                                                           // 10011
		);                                                                                                                   // 10012
                                                                                                                       // 10013
		return {                                                                                                             // 10014
			dateDelta: startDelta,                                                                                              // 10015
			durationDelta: durationDelta,                                                                                       // 10016
			undo: undoFunc                                                                                                      // 10017
		};                                                                                                                   // 10018
	}                                                                                                                     // 10019
                                                                                                                       // 10020
                                                                                                                       // 10021
	// Modifies an array of events in the following ways (operations are in order):                                       // 10022
	// - clear the event's `end`                                                                                          // 10023
	// - convert the event to allDay                                                                                      // 10024
	// - add `dateDelta` to the start and end                                                                             // 10025
	// - add `durationDelta` to the event's duration                                                                      // 10026
	// - assign `miscProps` to the event                                                                                  // 10027
	//                                                                                                                    // 10028
	// Returns a function that can be called to undo all the operations.                                                  // 10029
	//                                                                                                                    // 10030
	// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 10031
	//                                                                                                                    // 10032
	function mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 10033
		var isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 10034
		var undoFunctions = [];                                                                                              // 10035
                                                                                                                       // 10036
		// normalize zero-length deltas to be null                                                                           // 10037
		if (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 10038
		if (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 10039
                                                                                                                       // 10040
		$.each(events, function(i, event) {                                                                                  // 10041
			var oldProps;                                                                                                       // 10042
			var newProps;                                                                                                       // 10043
                                                                                                                       // 10044
			// build an object holding all the old values, both date-related and misc.                                          // 10045
			// for the undo function.                                                                                           // 10046
			oldProps = {                                                                                                        // 10047
				start: event.start.clone(),                                                                                        // 10048
				end: event.end ? event.end.clone() : null,                                                                         // 10049
				allDay: event.allDay                                                                                               // 10050
			};                                                                                                                  // 10051
			$.each(miscProps, function(name) {                                                                                  // 10052
				oldProps[name] = event[name];                                                                                      // 10053
			});                                                                                                                 // 10054
                                                                                                                       // 10055
			// new date-related properties. work off the original date snapshot.                                                // 10056
			// ok to use references because they will be thrown away when backupEventDates is called.                           // 10057
			newProps = {                                                                                                        // 10058
				start: event._start,                                                                                               // 10059
				end: event._end,                                                                                                   // 10060
				allDay: allDay // normalize the dates in the same regard as the new properties                                     // 10061
			};                                                                                                                  // 10062
			normalizeEventRange(newProps); // massages start/end/allDay                                                         // 10063
                                                                                                                       // 10064
			// strip or ensure the end date                                                                                     // 10065
			if (clearEnd) {                                                                                                     // 10066
				newProps.end = null;                                                                                               // 10067
			}                                                                                                                   // 10068
			else if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 10069
				newProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 10070
			}                                                                                                                   // 10071
                                                                                                                       // 10072
			if (dateDelta) {                                                                                                    // 10073
				newProps.start.add(dateDelta);                                                                                     // 10074
				if (newProps.end) {                                                                                                // 10075
					newProps.end.add(dateDelta);                                                                                      // 10076
				}                                                                                                                  // 10077
			}                                                                                                                   // 10078
                                                                                                                       // 10079
			if (durationDelta) {                                                                                                // 10080
				newProps.end.add(durationDelta); // end already ensured above                                                      // 10081
			}                                                                                                                   // 10082
                                                                                                                       // 10083
			// if the dates have changed, and we know it is impossible to recompute the                                         // 10084
			// timezone offsets, strip the zone.                                                                                // 10085
			if (                                                                                                                // 10086
				isAmbigTimezone &&                                                                                                 // 10087
				!newProps.allDay &&                                                                                                // 10088
				(dateDelta || durationDelta)                                                                                       // 10089
			) {                                                                                                                 // 10090
				newProps.start.stripZone();                                                                                        // 10091
				if (newProps.end) {                                                                                                // 10092
					newProps.end.stripZone();                                                                                         // 10093
				}                                                                                                                  // 10094
			}                                                                                                                   // 10095
                                                                                                                       // 10096
			$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 10097
			backupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 10098
                                                                                                                       // 10099
			undoFunctions.push(function() {                                                                                     // 10100
				$.extend(event, oldProps);                                                                                         // 10101
				backupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 10102
			});                                                                                                                 // 10103
		});                                                                                                                  // 10104
                                                                                                                       // 10105
		return function() {                                                                                                  // 10106
			for (var i = 0; i < undoFunctions.length; i++) {                                                                    // 10107
				undoFunctions[i]();                                                                                                // 10108
			}                                                                                                                   // 10109
		};                                                                                                                   // 10110
	}                                                                                                                     // 10111
                                                                                                                       // 10112
                                                                                                                       // 10113
	/* Business Hours                                                                                                     // 10114
	-----------------------------------------------------------------------------------------*/                           // 10115
                                                                                                                       // 10116
	t.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 10117
                                                                                                                       // 10118
                                                                                                                       // 10119
	// Returns an array of events as to when the business hours occur in the given view.                                  // 10120
	// Abuse of our event system :(                                                                                       // 10121
	function getBusinessHoursEvents(wholeDay) {                                                                           // 10122
		var optionVal = options.businessHours;                                                                               // 10123
		var defaultVal = {                                                                                                   // 10124
			className: 'fc-nonbusiness',                                                                                        // 10125
			start: '09:00',                                                                                                     // 10126
			end: '17:00',                                                                                                       // 10127
			dow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 10128
			rendering: 'inverse-background'                                                                                     // 10129
		};                                                                                                                   // 10130
		var view = t.getView();                                                                                              // 10131
		var eventInput;                                                                                                      // 10132
                                                                                                                       // 10133
		if (optionVal) { // `true` (which means "use the defaults") or an override object                                    // 10134
			eventInput = $.extend(                                                                                              // 10135
				{}, // copy to a new object in either case                                                                         // 10136
				defaultVal,                                                                                                        // 10137
				typeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 10138
			);                                                                                                                  // 10139
		}                                                                                                                    // 10140
                                                                                                                       // 10141
		if (eventInput) {                                                                                                    // 10142
                                                                                                                       // 10143
			// if a whole-day series is requested, clear the start/end times                                                    // 10144
			if (wholeDay) {                                                                                                     // 10145
				eventInput.start = null;                                                                                           // 10146
				eventInput.end = null;                                                                                             // 10147
			}                                                                                                                   // 10148
                                                                                                                       // 10149
			return expandEvent(                                                                                                 // 10150
				buildEventFromInput(eventInput),                                                                                   // 10151
				view.start,                                                                                                        // 10152
				view.end                                                                                                           // 10153
			);                                                                                                                  // 10154
		}                                                                                                                    // 10155
                                                                                                                       // 10156
		return [];                                                                                                           // 10157
	}                                                                                                                     // 10158
                                                                                                                       // 10159
                                                                                                                       // 10160
	/* Overlapping / Constraining                                                                                         // 10161
	-----------------------------------------------------------------------------------------*/                           // 10162
                                                                                                                       // 10163
	t.isEventRangeAllowed = isEventRangeAllowed;                                                                          // 10164
	t.isSelectionRangeAllowed = isSelectionRangeAllowed;                                                                  // 10165
	t.isExternalDropRangeAllowed = isExternalDropRangeAllowed;                                                            // 10166
                                                                                                                       // 10167
                                                                                                                       // 10168
	function isEventRangeAllowed(range, event) {                                                                          // 10169
		var source = event.source || {};                                                                                     // 10170
		var constraint = firstDefined(                                                                                       // 10171
			event.constraint,                                                                                                   // 10172
			source.constraint,                                                                                                  // 10173
			options.eventConstraint                                                                                             // 10174
		);                                                                                                                   // 10175
		var overlap = firstDefined(                                                                                          // 10176
			event.overlap,                                                                                                      // 10177
			source.overlap,                                                                                                     // 10178
			options.eventOverlap                                                                                                // 10179
		);                                                                                                                   // 10180
                                                                                                                       // 10181
		range = ensureVisibleEventRange(range); // ensure a proper range with an end for isRangeAllowed                      // 10182
                                                                                                                       // 10183
		return isRangeAllowed(range, constraint, overlap, event);                                                            // 10184
	}                                                                                                                     // 10185
                                                                                                                       // 10186
                                                                                                                       // 10187
	function isSelectionRangeAllowed(range) {                                                                             // 10188
		return isRangeAllowed(range, options.selectConstraint, options.selectOverlap);                                       // 10189
	}                                                                                                                     // 10190
                                                                                                                       // 10191
                                                                                                                       // 10192
	// when `eventProps` is defined, consider this an event.                                                              // 10193
	// `eventProps` can contain misc non-date-related info about the event.                                               // 10194
	function isExternalDropRangeAllowed(range, eventProps) {                                                              // 10195
		var eventInput;                                                                                                      // 10196
		var event;                                                                                                           // 10197
                                                                                                                       // 10198
		// note: very similar logic is in View's reportExternalDrop                                                          // 10199
		if (eventProps) {                                                                                                    // 10200
			eventInput = $.extend({}, eventProps, range);                                                                       // 10201
			event = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 10202
		}                                                                                                                    // 10203
                                                                                                                       // 10204
		if (event) {                                                                                                         // 10205
			return isEventRangeAllowed(range, event);                                                                           // 10206
		}                                                                                                                    // 10207
		else { // treat it as a selection                                                                                    // 10208
                                                                                                                       // 10209
			range = ensureVisibleEventRange(range); // ensure a proper range with an end for isSelectionRangeAllowed            // 10210
                                                                                                                       // 10211
			return isSelectionRangeAllowed(range);                                                                              // 10212
		}                                                                                                                    // 10213
	}                                                                                                                     // 10214
                                                                                                                       // 10215
                                                                                                                       // 10216
	// Returns true if the given range (caused by an event drop/resize or a selection) is allowed to exist                // 10217
	// according to the constraint/overlap settings.                                                                      // 10218
	// `event` is not required if checking a selection.                                                                   // 10219
	function isRangeAllowed(range, constraint, overlap, event) {                                                          // 10220
		var constraintEvents;                                                                                                // 10221
		var anyContainment;                                                                                                  // 10222
		var peerEvents;                                                                                                      // 10223
		var i, peerEvent;                                                                                                    // 10224
		var peerOverlap;                                                                                                     // 10225
                                                                                                                       // 10226
		// normalize. fyi, we're normalizing in too many places :(                                                           // 10227
		range = $.extend({}, range); // copy all properties in case there are misc non-date properties                       // 10228
		range.start = range.start.clone().stripZone();                                                                       // 10229
		range.end = range.end.clone().stripZone();                                                                           // 10230
                                                                                                                       // 10231
		// the range must be fully contained by at least one of produced constraint events                                   // 10232
		if (constraint != null) {                                                                                            // 10233
                                                                                                                       // 10234
			// not treated as an event! intermediate data structure                                                             // 10235
			// TODO: use ranges in the future                                                                                   // 10236
			constraintEvents = constraintToEvents(constraint);                                                                  // 10237
                                                                                                                       // 10238
			anyContainment = false;                                                                                             // 10239
			for (i = 0; i < constraintEvents.length; i++) {                                                                     // 10240
				if (eventContainsRange(constraintEvents[i], range)) {                                                              // 10241
					anyContainment = true;                                                                                            // 10242
					break;                                                                                                            // 10243
				}                                                                                                                  // 10244
			}                                                                                                                   // 10245
                                                                                                                       // 10246
			if (!anyContainment) {                                                                                              // 10247
				return false;                                                                                                      // 10248
			}                                                                                                                   // 10249
		}                                                                                                                    // 10250
                                                                                                                       // 10251
		peerEvents = t.getPeerEvents(event, range);                                                                          // 10252
                                                                                                                       // 10253
		for (i = 0; i < peerEvents.length; i++)  {                                                                           // 10254
			peerEvent = peerEvents[i];                                                                                          // 10255
                                                                                                                       // 10256
			// there needs to be an actual intersection before disallowing anything                                             // 10257
			if (eventIntersectsRange(peerEvent, range)) {                                                                       // 10258
                                                                                                                       // 10259
				// evaluate overlap for the given range and short-circuit if necessary                                             // 10260
				if (overlap === false) {                                                                                           // 10261
					return false;                                                                                                     // 10262
				}                                                                                                                  // 10263
				// if the event's overlap is a test function, pass the peer event in question as the first param                   // 10264
				else if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 10265
					return false;                                                                                                     // 10266
				}                                                                                                                  // 10267
                                                                                                                       // 10268
				// if we are computing if the given range is allowable for an event, consider the other event's                    // 10269
				// EventObject-specific or Source-specific `overlap` property                                                      // 10270
				if (event) {                                                                                                       // 10271
					peerOverlap = firstDefined(                                                                                       // 10272
						peerEvent.overlap,                                                                                               // 10273
						(peerEvent.source || {}).overlap                                                                                 // 10274
						// we already considered the global `eventOverlap`                                                               // 10275
					);                                                                                                                // 10276
					if (peerOverlap === false) {                                                                                      // 10277
						return false;                                                                                                    // 10278
					}                                                                                                                 // 10279
					// if the peer event's overlap is a test function, pass the subject event as the first param                      // 10280
					if (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 10281
						return false;                                                                                                    // 10282
					}                                                                                                                 // 10283
				}                                                                                                                  // 10284
			}                                                                                                                   // 10285
		}                                                                                                                    // 10286
                                                                                                                       // 10287
		return true;                                                                                                         // 10288
	}                                                                                                                     // 10289
                                                                                                                       // 10290
                                                                                                                       // 10291
	// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 10292
	// 'businessHours'                                                                                                    // 10293
	// An event ID (number or string)                                                                                     // 10294
	// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 10295
	function constraintToEvents(constraintInput) {                                                                        // 10296
                                                                                                                       // 10297
		if (constraintInput === 'businessHours') {                                                                           // 10298
			return getBusinessHoursEvents();                                                                                    // 10299
		}                                                                                                                    // 10300
                                                                                                                       // 10301
		if (typeof constraintInput === 'object') {                                                                           // 10302
			return expandEvent(buildEventFromInput(constraintInput));                                                           // 10303
		}                                                                                                                    // 10304
                                                                                                                       // 10305
		return clientEvents(constraintInput); // probably an ID                                                              // 10306
	}                                                                                                                     // 10307
                                                                                                                       // 10308
                                                                                                                       // 10309
	// Does the event's date range fully contain the given range?                                                         // 10310
	// start/end already assumed to have stripped zones :(                                                                // 10311
	function eventContainsRange(event, range) {                                                                           // 10312
		var eventStart = event.start.clone().stripZone();                                                                    // 10313
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10314
                                                                                                                       // 10315
		return range.start >= eventStart && range.end <= eventEnd;                                                           // 10316
	}                                                                                                                     // 10317
                                                                                                                       // 10318
                                                                                                                       // 10319
	// Does the event's date range intersect with the given range?                                                        // 10320
	// start/end already assumed to have stripped zones :(                                                                // 10321
	function eventIntersectsRange(event, range) {                                                                         // 10322
		var eventStart = event.start.clone().stripZone();                                                                    // 10323
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10324
                                                                                                                       // 10325
		return range.start < eventEnd && range.end > eventStart;                                                             // 10326
	}                                                                                                                     // 10327
                                                                                                                       // 10328
                                                                                                                       // 10329
	t.getEventCache = function() {                                                                                        // 10330
		return cache;                                                                                                        // 10331
	};                                                                                                                    // 10332
                                                                                                                       // 10333
}                                                                                                                      // 10334
                                                                                                                       // 10335
                                                                                                                       // 10336
// Returns a list of events that the given event should be compared against when being considered for a move to        // 10337
// the specified range. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.           // 10338
Calendar.prototype.getPeerEvents = function(event, range) {                                                            // 10339
	var cache = this.getEventCache();                                                                                     // 10340
	var peerEvents = [];                                                                                                  // 10341
	var i, otherEvent;                                                                                                    // 10342
                                                                                                                       // 10343
	for (i = 0; i < cache.length; i++) {                                                                                  // 10344
		otherEvent = cache[i];                                                                                               // 10345
		if (                                                                                                                 // 10346
			!event ||                                                                                                           // 10347
			event._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 10348
		) {                                                                                                                  // 10349
			peerEvents.push(otherEvent);                                                                                        // 10350
		}                                                                                                                    // 10351
	}                                                                                                                     // 10352
                                                                                                                       // 10353
	return peerEvents;                                                                                                    // 10354
};                                                                                                                     // 10355
                                                                                                                       // 10356
                                                                                                                       // 10357
// updates the "backup" properties, which are preserved in order to compute diffs later on.                            // 10358
function backupEventDates(event) {                                                                                     // 10359
	event._allDay = event.allDay;                                                                                         // 10360
	event._start = event.start.clone();                                                                                   // 10361
	event._end = event.end ? event.end.clone() : null;                                                                    // 10362
}                                                                                                                      // 10363
                                                                                                                       // 10364
;;                                                                                                                     // 10365
                                                                                                                       // 10366
/* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.              // 10367
----------------------------------------------------------------------------------------------------------------------*/
// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 10369
// It is responsible for managing width/height.                                                                        // 10370
                                                                                                                       // 10371
var BasicView = View.extend({                                                                                          // 10372
                                                                                                                       // 10373
	dayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 10374
                                                                                                                       // 10375
	dayNumbersVisible: false, // display day numbers on each day cell?                                                    // 10376
	weekNumbersVisible: false, // display week numbers along the side?                                                    // 10377
                                                                                                                       // 10378
	weekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10379
                                                                                                                       // 10380
	headRowEl: null, // the fake row element of the day-of-week header                                                    // 10381
                                                                                                                       // 10382
                                                                                                                       // 10383
	initialize: function() {                                                                                              // 10384
		this.dayGrid = new DayGrid(this);                                                                                    // 10385
		this.coordMap = this.dayGrid.coordMap; // the view's date-to-cell mapping is identical to the subcomponent's         // 10386
	},                                                                                                                    // 10387
                                                                                                                       // 10388
                                                                                                                       // 10389
	// Sets the display range and computes all necessary dates                                                            // 10390
	setRange: function(range) {                                                                                           // 10391
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 10392
                                                                                                                       // 10393
		this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10394
		this.dayGrid.setRange(range);                                                                                        // 10395
	},                                                                                                                    // 10396
                                                                                                                       // 10397
                                                                                                                       // 10398
	// Compute the value to feed into setRange. Overrides superclass.                                                     // 10399
	computeRange: function(date) {                                                                                        // 10400
		var range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10401
                                                                                                                       // 10402
		// year and month views should be aligned with weeks. this is already done for week                                  // 10403
		if (/year|month/.test(range.intervalUnit)) {                                                                         // 10404
			range.start.startOf('week');                                                                                        // 10405
			range.start = this.skipHiddenDays(range.start);                                                                     // 10406
                                                                                                                       // 10407
			// make end-of-week if not already                                                                                  // 10408
			if (range.end.weekday()) {                                                                                          // 10409
				range.end.add(1, 'week').startOf('week');                                                                          // 10410
				range.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10411
			}                                                                                                                   // 10412
		}                                                                                                                    // 10413
                                                                                                                       // 10414
		return range;                                                                                                        // 10415
	},                                                                                                                    // 10416
                                                                                                                       // 10417
                                                                                                                       // 10418
	// Renders the view into `this.el`, which should already be assigned                                                  // 10419
	renderDates: function() {                                                                                             // 10420
                                                                                                                       // 10421
		this.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10422
		this.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 10423
		this.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 10424
                                                                                                                       // 10425
		this.el.addClass('fc-basic-view').html(this.renderHtml());                                                           // 10426
                                                                                                                       // 10427
		this.headRowEl = this.el.find('thead .fc-row');                                                                      // 10428
                                                                                                                       // 10429
		this.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 10430
		this.dayGrid.coordMap.containerEl = this.scrollerEl; // constrain clicks/etc to the dimensions of the scroller       // 10431
                                                                                                                       // 10432
		this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 10433
		this.dayGrid.renderDates(this.hasRigidRows());                                                                       // 10434
	},                                                                                                                    // 10435
                                                                                                                       // 10436
                                                                                                                       // 10437
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10438
	// always completely kill the dayGrid's rendering.                                                                    // 10439
	unrenderDates: function() {                                                                                           // 10440
		this.dayGrid.unrenderDates();                                                                                        // 10441
		this.dayGrid.removeElement();                                                                                        // 10442
	},                                                                                                                    // 10443
                                                                                                                       // 10444
                                                                                                                       // 10445
	renderBusinessHours: function() {                                                                                     // 10446
		this.dayGrid.renderBusinessHours();                                                                                  // 10447
	},                                                                                                                    // 10448
                                                                                                                       // 10449
                                                                                                                       // 10450
	// Builds the HTML skeleton for the view.                                                                             // 10451
	// The day-grid component will render inside of a container defined by this HTML.                                     // 10452
	renderHtml: function() {                                                                                              // 10453
		return '' +                                                                                                          // 10454
			'<table>' +                                                                                                         // 10455
				'<thead class="fc-head">' +                                                                                        // 10456
					'<tr>' +                                                                                                          // 10457
						'<td class="' + this.widgetHeaderClass + '">' +                                                                  // 10458
							this.dayGrid.headHtml() + // render the day-of-week headers                                                     // 10459
						'</td>' +                                                                                                        // 10460
					'</tr>' +                                                                                                         // 10461
				'</thead>' +                                                                                                       // 10462
				'<tbody class="fc-body">' +                                                                                        // 10463
					'<tr>' +                                                                                                          // 10464
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 10465
							'<div class="fc-day-grid-container">' +                                                                         // 10466
								'<div class="fc-day-grid"/>' +                                                                                 // 10467
							'</div>' +                                                                                                      // 10468
						'</td>' +                                                                                                        // 10469
					'</tr>' +                                                                                                         // 10470
				'</tbody>' +                                                                                                       // 10471
			'</table>';                                                                                                         // 10472
	},                                                                                                                    // 10473
                                                                                                                       // 10474
                                                                                                                       // 10475
	// Generates the HTML that will go before the day-of week header cells.                                               // 10476
	// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10477
	headIntroHtml: function() {                                                                                           // 10478
		if (this.weekNumbersVisible) {                                                                                       // 10479
			return '' +                                                                                                         // 10480
				'<th class="fc-week-number ' + this.widgetHeaderClass + '" ' + this.weekNumberStyleAttr() + '>' +                  // 10481
					'<span>' + // needed for matchCellWidths                                                                          // 10482
						htmlEscape(this.opt('weekNumberTitle')) +                                                                        // 10483
					'</span>' +                                                                                                       // 10484
				'</th>';                                                                                                           // 10485
		}                                                                                                                    // 10486
	},                                                                                                                    // 10487
                                                                                                                       // 10488
                                                                                                                       // 10489
	// Generates the HTML that will go before content-skeleton cells that display the day/week numbers.                   // 10490
	// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10491
	numberIntroHtml: function(row) {                                                                                      // 10492
		if (this.weekNumbersVisible) {                                                                                       // 10493
			return '' +                                                                                                         // 10494
				'<td class="fc-week-number" ' + this.weekNumberStyleAttr() + '>' +                                                 // 10495
					'<span>' + // needed for matchCellWidths                                                                          // 10496
						this.dayGrid.getCell(row, 0).start.format('w') +                                                                 // 10497
					'</span>' +                                                                                                       // 10498
				'</td>';                                                                                                           // 10499
		}                                                                                                                    // 10500
	},                                                                                                                    // 10501
                                                                                                                       // 10502
                                                                                                                       // 10503
	// Generates the HTML that goes before the day bg cells for each day-row.                                             // 10504
	// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10505
	dayIntroHtml: function() {                                                                                            // 10506
		if (this.weekNumbersVisible) {                                                                                       // 10507
			return '<td class="fc-week-number ' + this.widgetContentClass + '" ' +                                              // 10508
				this.weekNumberStyleAttr() + '></td>';                                                                             // 10509
		}                                                                                                                    // 10510
	},                                                                                                                    // 10511
                                                                                                                       // 10512
                                                                                                                       // 10513
	// Generates the HTML that goes before every other type of row generated by DayGrid. Ordering depends on isRTL.       // 10514
	// Affects helper-skeleton and highlight-skeleton rows.                                                               // 10515
	introHtml: function() {                                                                                               // 10516
		if (this.weekNumbersVisible) {                                                                                       // 10517
			return '<td class="fc-week-number" ' + this.weekNumberStyleAttr() + '></td>';                                       // 10518
		}                                                                                                                    // 10519
	},                                                                                                                    // 10520
                                                                                                                       // 10521
                                                                                                                       // 10522
	// Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.                            // 10523
	// The number row will only exist if either day numbers or week numbers are turned on.                                // 10524
	numberCellHtml: function(cell) {                                                                                      // 10525
		var date = cell.start;                                                                                               // 10526
		var classes;                                                                                                         // 10527
                                                                                                                       // 10528
		if (!this.dayNumbersVisible) { // if there are week numbers but not day numbers                                      // 10529
			return '<td/>'; //  will create an empty space above events :(                                                      // 10530
		}                                                                                                                    // 10531
                                                                                                                       // 10532
		classes = this.dayGrid.getDayClasses(date);                                                                          // 10533
		classes.unshift('fc-day-number');                                                                                    // 10534
                                                                                                                       // 10535
		return '' +                                                                                                          // 10536
			'<td class="' + classes.join(' ') + '" data-date="' + date.format() + '">' +                                        // 10537
				date.date() +                                                                                                      // 10538
			'</td>';                                                                                                            // 10539
	},                                                                                                                    // 10540
                                                                                                                       // 10541
                                                                                                                       // 10542
	// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 10543
	weekNumberStyleAttr: function() {                                                                                     // 10544
		if (this.weekNumberWidth !== null) {                                                                                 // 10545
			return 'style="width:' + this.weekNumberWidth + 'px"';                                                              // 10546
		}                                                                                                                    // 10547
		return '';                                                                                                           // 10548
	},                                                                                                                    // 10549
                                                                                                                       // 10550
                                                                                                                       // 10551
	// Determines whether each row should have a constant height                                                          // 10552
	hasRigidRows: function() {                                                                                            // 10553
		var eventLimit = this.opt('eventLimit');                                                                             // 10554
		return eventLimit && typeof eventLimit !== 'number';                                                                 // 10555
	},                                                                                                                    // 10556
                                                                                                                       // 10557
                                                                                                                       // 10558
	/* Dimensions                                                                                                         // 10559
	------------------------------------------------------------------------------------------------------------------*/  // 10560
                                                                                                                       // 10561
                                                                                                                       // 10562
	// Refreshes the horizontal dimensions of the view                                                                    // 10563
	updateWidth: function() {                                                                                             // 10564
		if (this.weekNumbersVisible) {                                                                                       // 10565
			// Make sure all week number cells running down the side have the same width.                                       // 10566
			// Record the width for cells created later.                                                                        // 10567
			this.weekNumberWidth = matchCellWidths(                                                                             // 10568
				this.el.find('.fc-week-number')                                                                                    // 10569
			);                                                                                                                  // 10570
		}                                                                                                                    // 10571
	},                                                                                                                    // 10572
                                                                                                                       // 10573
                                                                                                                       // 10574
	// Adjusts the vertical dimensions of the view to the specified values                                                // 10575
	setHeight: function(totalHeight, isAuto) {                                                                            // 10576
		var eventLimit = this.opt('eventLimit');                                                                             // 10577
		var scrollerHeight;                                                                                                  // 10578
                                                                                                                       // 10579
		// reset all heights to be natural                                                                                   // 10580
		unsetScroller(this.scrollerEl);                                                                                      // 10581
		uncompensateScroll(this.headRowEl);                                                                                  // 10582
                                                                                                                       // 10583
		this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                             // 10584
                                                                                                                       // 10585
		// is the event limit a constant level number?                                                                       // 10586
		if (eventLimit && typeof eventLimit === 'number') {                                                                  // 10587
			this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 10588
		}                                                                                                                    // 10589
                                                                                                                       // 10590
		scrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 10591
		this.setGridHeight(scrollerHeight, isAuto);                                                                          // 10592
                                                                                                                       // 10593
		// is the event limit dynamically calculated?                                                                        // 10594
		if (eventLimit && typeof eventLimit !== 'number') {                                                                  // 10595
			this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 10596
		}                                                                                                                    // 10597
                                                                                                                       // 10598
		if (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 10599
                                                                                                                       // 10600
			compensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 10601
                                                                                                                       // 10602
			// doing the scrollbar compensation might have created text overflow which created more height. redo                // 10603
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10604
			this.scrollerEl.height(scrollerHeight);                                                                             // 10605
		}                                                                                                                    // 10606
	},                                                                                                                    // 10607
                                                                                                                       // 10608
                                                                                                                       // 10609
	// Sets the height of just the DayGrid component in this view                                                         // 10610
	setGridHeight: function(height, isAuto) {                                                                             // 10611
		if (isAuto) {                                                                                                        // 10612
			undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 10613
		}                                                                                                                    // 10614
		else {                                                                                                               // 10615
			distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 10616
		}                                                                                                                    // 10617
	},                                                                                                                    // 10618
                                                                                                                       // 10619
                                                                                                                       // 10620
	/* Events                                                                                                             // 10621
	------------------------------------------------------------------------------------------------------------------*/  // 10622
                                                                                                                       // 10623
                                                                                                                       // 10624
	// Renders the given events onto the view and populates the segments array                                            // 10625
	renderEvents: function(events) {                                                                                      // 10626
		this.dayGrid.renderEvents(events);                                                                                   // 10627
                                                                                                                       // 10628
		this.updateHeight(); // must compensate for events that overflow the row                                             // 10629
	},                                                                                                                    // 10630
                                                                                                                       // 10631
                                                                                                                       // 10632
	// Retrieves all segment objects that are rendered in the view                                                        // 10633
	getEventSegs: function() {                                                                                            // 10634
		return this.dayGrid.getEventSegs();                                                                                  // 10635
	},                                                                                                                    // 10636
                                                                                                                       // 10637
                                                                                                                       // 10638
	// Unrenders all event elements and clears internal segment data                                                      // 10639
	unrenderEvents: function() {                                                                                          // 10640
		this.dayGrid.unrenderEvents();                                                                                       // 10641
                                                                                                                       // 10642
		// we DON'T need to call updateHeight() because:                                                                     // 10643
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10644
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10645
	},                                                                                                                    // 10646
                                                                                                                       // 10647
                                                                                                                       // 10648
	/* Dragging (for both events and external elements)                                                                   // 10649
	------------------------------------------------------------------------------------------------------------------*/  // 10650
                                                                                                                       // 10651
                                                                                                                       // 10652
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 10653
	renderDrag: function(dropLocation, seg) {                                                                             // 10654
		return this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 10655
	},                                                                                                                    // 10656
                                                                                                                       // 10657
                                                                                                                       // 10658
	unrenderDrag: function() {                                                                                            // 10659
		this.dayGrid.unrenderDrag();                                                                                         // 10660
	},                                                                                                                    // 10661
                                                                                                                       // 10662
                                                                                                                       // 10663
	/* Selection                                                                                                          // 10664
	------------------------------------------------------------------------------------------------------------------*/  // 10665
                                                                                                                       // 10666
                                                                                                                       // 10667
	// Renders a visual indication of a selection                                                                         // 10668
	renderSelection: function(range) {                                                                                    // 10669
		this.dayGrid.renderSelection(range);                                                                                 // 10670
	},                                                                                                                    // 10671
                                                                                                                       // 10672
                                                                                                                       // 10673
	// Unrenders a visual indications of a selection                                                                      // 10674
	unrenderSelection: function() {                                                                                       // 10675
		this.dayGrid.unrenderSelection();                                                                                    // 10676
	}                                                                                                                     // 10677
                                                                                                                       // 10678
});                                                                                                                    // 10679
                                                                                                                       // 10680
;;                                                                                                                     // 10681
                                                                                                                       // 10682
/* A month view with day cells running in rows (one-per-week) and columns                                              // 10683
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10685
var MonthView = BasicView.extend({                                                                                     // 10686
                                                                                                                       // 10687
	// Produces information about what range to display                                                                   // 10688
	computeRange: function(date) {                                                                                        // 10689
		var range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 10690
		var rowCnt;                                                                                                          // 10691
                                                                                                                       // 10692
		// ensure 6 weeks                                                                                                    // 10693
		if (this.isFixedWeeks()) {                                                                                           // 10694
			rowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 10695
			range.end.add(6 - rowCnt, 'weeks');                                                                                 // 10696
		}                                                                                                                    // 10697
                                                                                                                       // 10698
		return range;                                                                                                        // 10699
	},                                                                                                                    // 10700
                                                                                                                       // 10701
                                                                                                                       // 10702
	// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 10703
	setGridHeight: function(height, isAuto) {                                                                             // 10704
                                                                                                                       // 10705
		isAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 10706
                                                                                                                       // 10707
		// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 10708
		if (isAuto) {                                                                                                        // 10709
			height *= this.rowCnt / 6;                                                                                          // 10710
		}                                                                                                                    // 10711
                                                                                                                       // 10712
		distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 10713
	},                                                                                                                    // 10714
                                                                                                                       // 10715
                                                                                                                       // 10716
	isFixedWeeks: function() {                                                                                            // 10717
		var weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 10718
		if (weekMode) {                                                                                                      // 10719
			return weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 10720
		}                                                                                                                    // 10721
                                                                                                                       // 10722
		return this.opt('fixedWeekCount');                                                                                   // 10723
	}                                                                                                                     // 10724
                                                                                                                       // 10725
});                                                                                                                    // 10726
                                                                                                                       // 10727
;;                                                                                                                     // 10728
                                                                                                                       // 10729
fcViews.basic = {                                                                                                      // 10730
	'class': BasicView                                                                                                    // 10731
};                                                                                                                     // 10732
                                                                                                                       // 10733
fcViews.basicDay = {                                                                                                   // 10734
	type: 'basic',                                                                                                        // 10735
	duration: { days: 1 }                                                                                                 // 10736
};                                                                                                                     // 10737
                                                                                                                       // 10738
fcViews.basicWeek = {                                                                                                  // 10739
	type: 'basic',                                                                                                        // 10740
	duration: { weeks: 1 }                                                                                                // 10741
};                                                                                                                     // 10742
                                                                                                                       // 10743
fcViews.month = {                                                                                                      // 10744
	'class': MonthView,                                                                                                   // 10745
	duration: { months: 1 }, // important for prev/next                                                                   // 10746
	defaults: {                                                                                                           // 10747
		fixedWeekCount: true                                                                                                 // 10748
	}                                                                                                                     // 10749
};                                                                                                                     // 10750
;;                                                                                                                     // 10751
                                                                                                                       // 10752
/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 10753
----------------------------------------------------------------------------------------------------------------------*/
// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 10755
// Responsible for managing width/height.                                                                              // 10756
                                                                                                                       // 10757
var AgendaView = View.extend({                                                                                         // 10758
                                                                                                                       // 10759
	timeGrid: null, // the main time-grid subcomponent of this view                                                       // 10760
	dayGrid: null, // the "all-day" subcomponent. if all-day is turned off, this will be null                             // 10761
                                                                                                                       // 10762
	axisWidth: null, // the width of the time axis running down the side                                                  // 10763
                                                                                                                       // 10764
	noScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 10765
                                                                                                                       // 10766
	// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 10767
	bottomRuleEl: null,                                                                                                   // 10768
	bottomRuleHeight: null,                                                                                               // 10769
                                                                                                                       // 10770
                                                                                                                       // 10771
	initialize: function() {                                                                                              // 10772
		this.timeGrid = new TimeGrid(this);                                                                                  // 10773
                                                                                                                       // 10774
		if (this.opt('allDaySlot')) { // should we display the "all-day" area?                                               // 10775
			this.dayGrid = new DayGrid(this); // the all-day subcomponent of this view                                          // 10776
                                                                                                                       // 10777
			// the coordinate grid will be a combination of both subcomponents' grids                                           // 10778
			this.coordMap = new ComboCoordMap([                                                                                 // 10779
				this.dayGrid.coordMap,                                                                                             // 10780
				this.timeGrid.coordMap                                                                                             // 10781
			]);                                                                                                                 // 10782
		}                                                                                                                    // 10783
		else {                                                                                                               // 10784
			this.coordMap = this.timeGrid.coordMap;                                                                             // 10785
		}                                                                                                                    // 10786
	},                                                                                                                    // 10787
                                                                                                                       // 10788
                                                                                                                       // 10789
	/* Rendering                                                                                                          // 10790
	------------------------------------------------------------------------------------------------------------------*/  // 10791
                                                                                                                       // 10792
                                                                                                                       // 10793
	// Sets the display range and computes all necessary dates                                                            // 10794
	setRange: function(range) {                                                                                           // 10795
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 10796
                                                                                                                       // 10797
		this.timeGrid.setRange(range);                                                                                       // 10798
		if (this.dayGrid) {                                                                                                  // 10799
			this.dayGrid.setRange(range);                                                                                       // 10800
		}                                                                                                                    // 10801
	},                                                                                                                    // 10802
                                                                                                                       // 10803
                                                                                                                       // 10804
	// Renders the view into `this.el`, which has already been assigned                                                   // 10805
	renderDates: function() {                                                                                             // 10806
                                                                                                                       // 10807
		this.el.addClass('fc-agenda-view').html(this.renderHtml());                                                          // 10808
                                                                                                                       // 10809
		// the element that wraps the time-grid that will probably scroll                                                    // 10810
		this.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 10811
		this.timeGrid.coordMap.containerEl = this.scrollerEl; // don't accept clicks/etc outside of this                     // 10812
                                                                                                                       // 10813
		this.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 10814
		this.timeGrid.renderDates();                                                                                         // 10815
                                                                                                                       // 10816
		// the <hr> that sometimes displays under the time-grid                                                              // 10817
		this.bottomRuleEl = $('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>')                                     // 10818
			.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 10819
                                                                                                                       // 10820
		if (this.dayGrid) {                                                                                                  // 10821
			this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 10822
			this.dayGrid.renderDates();                                                                                         // 10823
                                                                                                                       // 10824
			// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 10825
			this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 10826
		}                                                                                                                    // 10827
                                                                                                                       // 10828
		this.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 10829
	},                                                                                                                    // 10830
                                                                                                                       // 10831
                                                                                                                       // 10832
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10833
	// always completely kill each grid's rendering.                                                                      // 10834
	unrenderDates: function() {                                                                                           // 10835
		this.timeGrid.unrenderDates();                                                                                       // 10836
		this.timeGrid.removeElement();                                                                                       // 10837
                                                                                                                       // 10838
		if (this.dayGrid) {                                                                                                  // 10839
			this.dayGrid.unrenderDates();                                                                                       // 10840
			this.dayGrid.removeElement();                                                                                       // 10841
		}                                                                                                                    // 10842
	},                                                                                                                    // 10843
                                                                                                                       // 10844
                                                                                                                       // 10845
	renderBusinessHours: function() {                                                                                     // 10846
		this.timeGrid.renderBusinessHours();                                                                                 // 10847
                                                                                                                       // 10848
		if (this.dayGrid) {                                                                                                  // 10849
			this.dayGrid.renderBusinessHours();                                                                                 // 10850
		}                                                                                                                    // 10851
	},                                                                                                                    // 10852
                                                                                                                       // 10853
                                                                                                                       // 10854
	// Builds the HTML skeleton for the view.                                                                             // 10855
	// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 10856
	renderHtml: function() {                                                                                              // 10857
		return '' +                                                                                                          // 10858
			'<table>' +                                                                                                         // 10859
				'<thead class="fc-head">' +                                                                                        // 10860
					'<tr>' +                                                                                                          // 10861
						'<td class="' + this.widgetHeaderClass + '">' +                                                                  // 10862
							this.timeGrid.headHtml() + // render the day-of-week headers                                                    // 10863
						'</td>' +                                                                                                        // 10864
					'</tr>' +                                                                                                         // 10865
				'</thead>' +                                                                                                       // 10866
				'<tbody class="fc-body">' +                                                                                        // 10867
					'<tr>' +                                                                                                          // 10868
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 10869
							(this.dayGrid ?                                                                                                 // 10870
								'<div class="fc-day-grid"/>' +                                                                                 // 10871
								'<hr class="fc-divider ' + this.widgetHeaderClass + '"/>' :                                                    // 10872
								''                                                                                                             // 10873
								) +                                                                                                            // 10874
							'<div class="fc-time-grid-container">' +                                                                        // 10875
								'<div class="fc-time-grid"/>' +                                                                                // 10876
							'</div>' +                                                                                                      // 10877
						'</td>' +                                                                                                        // 10878
					'</tr>' +                                                                                                         // 10879
				'</tbody>' +                                                                                                       // 10880
			'</table>';                                                                                                         // 10881
	},                                                                                                                    // 10882
                                                                                                                       // 10883
                                                                                                                       // 10884
	// Generates the HTML that will go before the day-of week header cells.                                               // 10885
	// Queried by the TimeGrid subcomponent when generating rows. Ordering depends on isRTL.                              // 10886
	headIntroHtml: function() {                                                                                           // 10887
		var date;                                                                                                            // 10888
		var weekText;                                                                                                        // 10889
                                                                                                                       // 10890
		if (this.opt('weekNumbers')) {                                                                                       // 10891
			date = this.timeGrid.getCell(0).start;                                                                              // 10892
			weekText = date.format(this.opt('smallWeekFormat'));                                                                // 10893
                                                                                                                       // 10894
			return '' +                                                                                                         // 10895
				'<th class="fc-axis fc-week-number ' + this.widgetHeaderClass + '" ' + this.axisStyleAttr() + '>' +                // 10896
					'<span>' + // needed for matchCellWidths                                                                          // 10897
						htmlEscape(weekText) +                                                                                           // 10898
					'</span>' +                                                                                                       // 10899
				'</th>';                                                                                                           // 10900
		}                                                                                                                    // 10901
		else {                                                                                                               // 10902
			return '<th class="fc-axis ' + this.widgetHeaderClass + '" ' + this.axisStyleAttr() + '></th>';                     // 10903
		}                                                                                                                    // 10904
	},                                                                                                                    // 10905
                                                                                                                       // 10906
                                                                                                                       // 10907
	// Generates the HTML that goes before the all-day cells.                                                             // 10908
	// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10909
	dayIntroHtml: function() {                                                                                            // 10910
		return '' +                                                                                                          // 10911
			'<td class="fc-axis ' + this.widgetContentClass + '" ' + this.axisStyleAttr() + '>' +                               // 10912
				'<span>' + // needed for matchCellWidths                                                                           // 10913
					(this.opt('allDayHtml') || htmlEscape(this.opt('allDayText'))) +                                                  // 10914
				'</span>' +                                                                                                        // 10915
			'</td>';                                                                                                            // 10916
	},                                                                                                                    // 10917
                                                                                                                       // 10918
                                                                                                                       // 10919
	// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 10920
	slotBgIntroHtml: function() {                                                                                         // 10921
		return '<td class="fc-axis ' + this.widgetContentClass + '" ' + this.axisStyleAttr() + '></td>';                     // 10922
	},                                                                                                                    // 10923
                                                                                                                       // 10924
                                                                                                                       // 10925
	// Generates the HTML that goes before all other types of cells.                                                      // 10926
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 10927
	// Queried by the TimeGrid and DayGrid subcomponents when generating rows. Ordering depends on isRTL.                 // 10928
	introHtml: function() {                                                                                               // 10929
		return '<td class="fc-axis" ' + this.axisStyleAttr() + '></td>';                                                     // 10930
	},                                                                                                                    // 10931
                                                                                                                       // 10932
                                                                                                                       // 10933
	// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 10934
	axisStyleAttr: function() {                                                                                           // 10935
		if (this.axisWidth !== null) {                                                                                       // 10936
			 return 'style="width:' + this.axisWidth + 'px"';                                                                   // 10937
		}                                                                                                                    // 10938
		return '';                                                                                                           // 10939
	},                                                                                                                    // 10940
                                                                                                                       // 10941
                                                                                                                       // 10942
	/* Dimensions                                                                                                         // 10943
	------------------------------------------------------------------------------------------------------------------*/  // 10944
                                                                                                                       // 10945
                                                                                                                       // 10946
	updateSize: function(isResize) {                                                                                      // 10947
		this.timeGrid.updateSize(isResize);                                                                                  // 10948
                                                                                                                       // 10949
		View.prototype.updateSize.call(this, isResize); // call the super-method                                             // 10950
	},                                                                                                                    // 10951
                                                                                                                       // 10952
                                                                                                                       // 10953
	// Refreshes the horizontal dimensions of the view                                                                    // 10954
	updateWidth: function() {                                                                                             // 10955
		// make all axis cells line up, and record the width so newly created axis cells will have it                        // 10956
		this.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 10957
	},                                                                                                                    // 10958
                                                                                                                       // 10959
                                                                                                                       // 10960
	// Adjusts the vertical dimensions of the view to the specified values                                                // 10961
	setHeight: function(totalHeight, isAuto) {                                                                            // 10962
		var eventLimit;                                                                                                      // 10963
		var scrollerHeight;                                                                                                  // 10964
                                                                                                                       // 10965
		if (this.bottomRuleHeight === null) {                                                                                // 10966
			// calculate the height of the rule the very first time                                                             // 10967
			this.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 10968
		}                                                                                                                    // 10969
		this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 10970
                                                                                                                       // 10971
		// reset all dimensions back to the original state                                                                   // 10972
		this.scrollerEl.css('overflow', '');                                                                                 // 10973
		unsetScroller(this.scrollerEl);                                                                                      // 10974
		uncompensateScroll(this.noScrollRowEls);                                                                             // 10975
                                                                                                                       // 10976
		// limit number of events in the all-day area                                                                        // 10977
		if (this.dayGrid) {                                                                                                  // 10978
			this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                            // 10979
                                                                                                                       // 10980
			eventLimit = this.opt('eventLimit');                                                                                // 10981
			if (eventLimit && typeof eventLimit !== 'number') {                                                                 // 10982
				eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number                                 // 10983
			}                                                                                                                   // 10984
			if (eventLimit) {                                                                                                   // 10985
				this.dayGrid.limitRows(eventLimit);                                                                                // 10986
			}                                                                                                                   // 10987
		}                                                                                                                    // 10988
                                                                                                                       // 10989
		if (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 10990
                                                                                                                       // 10991
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10992
			if (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 10993
                                                                                                                       // 10994
				// make the all-day and header rows lines up                                                                       // 10995
				compensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 10996
                                                                                                                       // 10997
				// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 10998
				// and reapply the desired height to the scroller.                                                                 // 10999
				scrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 11000
				this.scrollerEl.height(scrollerHeight);                                                                            // 11001
			}                                                                                                                   // 11002
			else { // no scrollbars                                                                                             // 11003
				// still, force a height and display the bottom rule (marks the end of day)                                        // 11004
				this.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 11005
				this.bottomRuleEl.show();                                                                                          // 11006
			}                                                                                                                   // 11007
		}                                                                                                                    // 11008
	},                                                                                                                    // 11009
                                                                                                                       // 11010
                                                                                                                       // 11011
	// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 11012
	computeInitialScroll: function() {                                                                                    // 11013
		var scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 11014
		var top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 11015
                                                                                                                       // 11016
		// zoom can give weird floating-point values. rather scroll a little bit further                                     // 11017
		top = Math.ceil(top);                                                                                                // 11018
                                                                                                                       // 11019
		if (top) {                                                                                                           // 11020
			top++; // to overcome top border that slots beyond the first have. looks better                                     // 11021
		}                                                                                                                    // 11022
                                                                                                                       // 11023
		return top;                                                                                                          // 11024
	},                                                                                                                    // 11025
                                                                                                                       // 11026
                                                                                                                       // 11027
	/* Events                                                                                                             // 11028
	------------------------------------------------------------------------------------------------------------------*/  // 11029
                                                                                                                       // 11030
                                                                                                                       // 11031
	// Renders events onto the view and populates the View's segment array                                                // 11032
	renderEvents: function(events) {                                                                                      // 11033
		var dayEvents = [];                                                                                                  // 11034
		var timedEvents = [];                                                                                                // 11035
		var daySegs = [];                                                                                                    // 11036
		var timedSegs;                                                                                                       // 11037
		var i;                                                                                                               // 11038
                                                                                                                       // 11039
		// separate the events into all-day and timed                                                                        // 11040
		for (i = 0; i < events.length; i++) {                                                                                // 11041
			if (events[i].allDay) {                                                                                             // 11042
				dayEvents.push(events[i]);                                                                                         // 11043
			}                                                                                                                   // 11044
			else {                                                                                                              // 11045
				timedEvents.push(events[i]);                                                                                       // 11046
			}                                                                                                                   // 11047
		}                                                                                                                    // 11048
                                                                                                                       // 11049
		// render the events in the subcomponents                                                                            // 11050
		timedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 11051
		if (this.dayGrid) {                                                                                                  // 11052
			daySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 11053
		}                                                                                                                    // 11054
                                                                                                                       // 11055
		// the all-day area is flexible and might have a lot of events, so shift the height                                  // 11056
		this.updateHeight();                                                                                                 // 11057
	},                                                                                                                    // 11058
                                                                                                                       // 11059
                                                                                                                       // 11060
	// Retrieves all segment objects that are rendered in the view                                                        // 11061
	getEventSegs: function() {                                                                                            // 11062
		return this.timeGrid.getEventSegs().concat(                                                                          // 11063
			this.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 11064
		);                                                                                                                   // 11065
	},                                                                                                                    // 11066
                                                                                                                       // 11067
                                                                                                                       // 11068
	// Unrenders all event elements and clears internal segment data                                                      // 11069
	unrenderEvents: function() {                                                                                          // 11070
                                                                                                                       // 11071
		// unrender the events in the subcomponents                                                                          // 11072
		this.timeGrid.unrenderEvents();                                                                                      // 11073
		if (this.dayGrid) {                                                                                                  // 11074
			this.dayGrid.unrenderEvents();                                                                                      // 11075
		}                                                                                                                    // 11076
                                                                                                                       // 11077
		// we DON'T need to call updateHeight() because:                                                                     // 11078
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 11079
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 11080
	},                                                                                                                    // 11081
                                                                                                                       // 11082
                                                                                                                       // 11083
	/* Dragging (for events and external elements)                                                                        // 11084
	------------------------------------------------------------------------------------------------------------------*/  // 11085
                                                                                                                       // 11086
                                                                                                                       // 11087
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 11088
	renderDrag: function(dropLocation, seg) {                                                                             // 11089
		if (dropLocation.start.hasTime()) {                                                                                  // 11090
			return this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 11091
		}                                                                                                                    // 11092
		else if (this.dayGrid) {                                                                                             // 11093
			return this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 11094
		}                                                                                                                    // 11095
	},                                                                                                                    // 11096
                                                                                                                       // 11097
                                                                                                                       // 11098
	unrenderDrag: function() {                                                                                            // 11099
		this.timeGrid.unrenderDrag();                                                                                        // 11100
		if (this.dayGrid) {                                                                                                  // 11101
			this.dayGrid.unrenderDrag();                                                                                        // 11102
		}                                                                                                                    // 11103
	},                                                                                                                    // 11104
                                                                                                                       // 11105
                                                                                                                       // 11106
	/* Selection                                                                                                          // 11107
	------------------------------------------------------------------------------------------------------------------*/  // 11108
                                                                                                                       // 11109
                                                                                                                       // 11110
	// Renders a visual indication of a selection                                                                         // 11111
	renderSelection: function(range) {                                                                                    // 11112
		if (range.start.hasTime() || range.end.hasTime()) {                                                                  // 11113
			this.timeGrid.renderSelection(range);                                                                               // 11114
		}                                                                                                                    // 11115
		else if (this.dayGrid) {                                                                                             // 11116
			this.dayGrid.renderSelection(range);                                                                                // 11117
		}                                                                                                                    // 11118
	},                                                                                                                    // 11119
                                                                                                                       // 11120
                                                                                                                       // 11121
	// Unrenders a visual indications of a selection                                                                      // 11122
	unrenderSelection: function() {                                                                                       // 11123
		this.timeGrid.unrenderSelection();                                                                                   // 11124
		if (this.dayGrid) {                                                                                                  // 11125
			this.dayGrid.unrenderSelection();                                                                                   // 11126
		}                                                                                                                    // 11127
	}                                                                                                                     // 11128
                                                                                                                       // 11129
});                                                                                                                    // 11130
                                                                                                                       // 11131
;;                                                                                                                     // 11132
                                                                                                                       // 11133
var AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 11134
                                                                                                                       // 11135
// potential nice values for the slot-duration and interval-duration                                                   // 11136
// from largest to smallest                                                                                            // 11137
var AGENDA_STOCK_SUB_DURATIONS = [                                                                                     // 11138
	{ hours: 1 },                                                                                                         // 11139
	{ minutes: 30 },                                                                                                      // 11140
	{ minutes: 15 },                                                                                                      // 11141
	{ seconds: 30 },                                                                                                      // 11142
	{ seconds: 15 }                                                                                                       // 11143
];                                                                                                                     // 11144
                                                                                                                       // 11145
fcViews.agenda = {                                                                                                     // 11146
	'class': AgendaView,                                                                                                  // 11147
	defaults: {                                                                                                           // 11148
		allDaySlot: true,                                                                                                    // 11149
		allDayText: 'all-day',                                                                                               // 11150
		slotDuration: '00:30:00',                                                                                            // 11151
		minTime: '00:00:00',                                                                                                 // 11152
		maxTime: '24:00:00',                                                                                                 // 11153
		slotEventOverlap: true // a bad name. confused with overlap/constraint system                                        // 11154
	}                                                                                                                     // 11155
};                                                                                                                     // 11156
                                                                                                                       // 11157
fcViews.agendaDay = {                                                                                                  // 11158
	type: 'agenda',                                                                                                       // 11159
	duration: { days: 1 }                                                                                                 // 11160
};                                                                                                                     // 11161
                                                                                                                       // 11162
fcViews.agendaWeek = {                                                                                                 // 11163
	type: 'agenda',                                                                                                       // 11164
	duration: { weeks: 1 }                                                                                                // 11165
};                                                                                                                     // 11166
;;                                                                                                                     // 11167
                                                                                                                       // 11168
return fc; // export for Node/CommonJS                                                                                 // 11169
});                                                                                                                    // 11170
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/lang-all.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(a){"function"==typeof define&&define.amd?define(["jquery","moment"],a):a(jQuery,moment)}(function(a,b){!function(){(b.defineLocale||b.lang).call(b,"ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("ar-ma","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-ma",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){var c={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},d={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};(b.defineLocale||b.lang).call(b,"ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("ar-sa","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-sa",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){(b.defineLocale||b.lang).call(b,"ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("ar-tn","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-tn",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){var c={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},d={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},e=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},f={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},g=function(a){return function(b,c,d,g){var h=e(b),i=f[a][e(b)];return 2===h&&(i=i[c?0:1]),i.replace(/%d/i,b)}},h=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];(b.defineLocale||b.lang).call(b,"ar",{months:h,monthsShort:h,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:g("s"),m:g("m"),mm:g("m"),h:g("h"),hh:g("h"),d:g("d"),dd:g("d"),M:g("M"),MM:g("M"),y:g("y"),yy:g("y")},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("ar","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){(b.defineLocale||b.lang).call(b,"bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("bg","bg",{closeText:"затвори",prevText:"&#x3C;назад",nextText:"напред&#x3E;",nextBigText:"&#x3E;&#x3E;",currentText:"днес",monthNames:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Нов","Дек"],dayNames:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],dayNamesShort:["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Съ"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("bg",{buttonText:{month:"Месец",week:"Седмица",day:"Ден",list:"График"},allDayText:"Цял ден",eventLimitText:function(a){return"+още "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?"r":2===a?"n":3===a?"r":4===a?"t":"è";return("w"===b||"W"===b)&&(c="a"),a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("ca","ca",{closeText:"Tanca",prevText:"Anterior",nextText:"Següent",currentText:"Avui",monthNames:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],monthNamesShort:["gen","feb","març","abr","maig","juny","jul","ag","set","oct","nov","des"],dayNames:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],dayNamesShort:["dg","dl","dt","dc","dj","dv","ds"],dayNamesMin:["dg","dl","dt","dc","dj","dv","ds"],weekHeader:"Set",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ca",{buttonText:{month:"Mes",week:"Setmana",day:"Dia",list:"Agenda"},allDayText:"Tot el dia",eventLimitText:"més"})}(),function(){function c(a){return a>1&&5>a&&1!==~~(a/10)}function d(a,b,d,e){var f=a+" ";switch(d){case"s":return b||e?"pár sekund":"pár sekundami";case"m":return b?"minuta":e?"minutu":"minutou";case"mm":return b||e?f+(c(a)?"minuty":"minut"):f+"minutami";case"h":return b?"hodina":e?"hodinu":"hodinou";case"hh":return b||e?f+(c(a)?"hodiny":"hodin"):f+"hodinami";case"d":return b||e?"den":"dnem";case"dd":return b||e?f+(c(a)?"dny":"dní"):f+"dny";case"M":return b||e?"měsíc":"měsícem";case"MM":return b||e?f+(c(a)?"měsíce":"měsíců"):f+"měsíci";case"y":return b||e?"rok":"rokem";case"yy":return b||e?f+(c(a)?"roky":"let"):f+"lety"}}var e="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),f="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");(b.defineLocale||b.lang).call(b,"cs",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(e,f),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("cs","cs",{closeText:"Zavřít",prevText:"&#x3C;Dříve",nextText:"Později&#x3E;",currentText:"Nyní",monthNames:["leden","únor","březen","duben","květen","červen","červenec","srpen","září","říjen","listopad","prosinec"],monthNamesShort:["led","úno","bře","dub","kvě","čer","čvc","srp","zář","říj","lis","pro"],dayNames:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],dayNamesShort:["ne","po","út","st","čt","pá","so"],dayNamesMin:["ne","po","út","st","čt","pá","so"],weekHeader:"Týd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("cs",{buttonText:{month:"Měsíc",week:"Týden",day:"Den",list:"Agenda"},allDayText:"Celý den",eventLimitText:function(a){return"+další: "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd [d.] D. MMMM YYYY LT"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("da","da",{closeText:"Luk",prevText:"&#x3C;Forrige",nextText:"Næste&#x3E;",currentText:"Idag",monthNames:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"],dayNamesShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayNamesMin:["Sø","Ma","Ti","On","To","Fr","Lø"],weekHeader:"Uge",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("da",{buttonText:{month:"Måned",week:"Uge",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"flere"})}(),function(){function c(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,"de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:c,mm:"%d Minuten",h:c,hh:"%d Stunden",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("de-at","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de-at",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){function c(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,"de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:c,mm:"%d Minuten",h:c,hh:"%d Stunden",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("de","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},isPM:function(a){return"μ"===(a+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return"function"==typeof c&&(c=c.apply(b)),c.replace("{}",d%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("el","el",{closeText:"Κλείσιμο",prevText:"Προηγούμενος",nextText:"Επόμενος",currentText:"Σήμερα",monthNames:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],monthNamesShort:["Ιαν","Φεβ","Μαρ","Απρ","Μαι","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dayNames:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],dayNamesShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayNamesMin:["Κυ","Δε","Τρ","Τε","Πε","Πα","Σα"],weekHeader:"Εβδ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("el",{buttonText:{month:"Μήνας",week:"Εβδομάδα",day:"Ημέρα",list:"Ατζέντα"},allDayText:"Ολοήμερο",eventLimitText:"περισσότερα"})}(),function(){(b.defineLocale||b.lang).call(b,"en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("en-au","en-AU",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-au")}(),function(){(b.defineLocale||b.lang).call(b,"en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY LT",LLLL:"dddd, D MMMM, YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.fullCalendar.lang("en-ca")}(),function(){(b.defineLocale||b.lang).call(b,"en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("en-gb","en-GB",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-gb")}(),function(){var c="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),d="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");(b.defineLocale||b.lang).call(b,"es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("es","es",{closeText:"Cerrar",prevText:"&#x3C;Ant",nextText:"Sig&#x3E;",currentText:"Hoy",monthNames:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],monthNamesShort:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],dayNames:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],dayNamesShort:["dom","lun","mar","mié","jue","vie","sáb"],dayNamesMin:["D","L","M","X","J","V","S"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("es",{buttonText:{month:"Mes",week:"Semana",day:"Día",list:"Agenda"},allDayHtml:"Todo<br/>el día",eventLimitText:"más"})}(),function(){var c={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},d={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};(b.defineLocale||b.lang).call(b,"fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return 12>a?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return d[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("fa","fa",{closeText:"بستن",prevText:"&#x3C;قبلی",nextText:"بعدی&#x3E;",currentText:"امروز",monthNames:["ژانویه","فوریه","مارس","آوریل","مه","ژوئن","ژوئیه","اوت","سپتامبر","اکتبر","نوامبر","دسامبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["يکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayNamesShort:["ی","د","س","چ","پ","ج","ش"],dayNamesMin:["ی","د","س","چ","پ","ج","ش"],weekHeader:"هف",dateFormat:"yy/mm/dd",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fa",{buttonText:{month:"ماه",week:"هفته",day:"روز",list:"برنامه"
},allDayText:"تمام روز",eventLimitText:function(a){return"بیش از "+a}})}(),function(){function c(a,b,c,e){var f="";switch(c){case"s":return e?"muutaman sekunnin":"muutama sekunti";case"m":return e?"minuutin":"minuutti";case"mm":f=e?"minuutin":"minuuttia";break;case"h":return e?"tunnin":"tunti";case"hh":f=e?"tunnin":"tuntia";break;case"d":return e?"päivän":"päivä";case"dd":f=e?"päivän":"päivää";break;case"M":return e?"kuukauden":"kuukausi";case"MM":f=e?"kuukauden":"kuukautta";break;case"y":return e?"vuoden":"vuosi";case"yy":f=e?"vuoden":"vuotta"}return f=d(a,e)+" "+f}function d(a,b){return 10>a?b?f[a]:e[a]:a}var e="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),f=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",e[7],e[8],e[9]];(b.defineLocale||b.lang).call(b,"fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] LT",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] LT",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] LT",llll:"ddd, Do MMM YYYY, [klo] LT"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("fi","fi",{closeText:"Sulje",prevText:"&#xAB;Edellinen",nextText:"Seuraava&#xBB;",currentText:"Tänään",monthNames:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],monthNamesShort:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"],dayNamesShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayNames:["Sunnuntai","Maanantai","Tiistai","Keskiviikko","Torstai","Perjantai","Lauantai"],dayNamesMin:["Su","Ma","Ti","Ke","To","Pe","La"],weekHeader:"Vk",dateFormat:"d.m.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fi",{buttonText:{month:"Kuukausi",week:"Viikko",day:"Päivä",list:"Tapahtumat"},allDayText:"Koko päivä",eventLimitText:"lisää"})}(),function(){(b.defineLocale||b.lang).call(b,"fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")}}),a.fullCalendar.datepickerLang("fr-ca","fr-CA",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr-ca",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){(b.defineLocale||b.lang).call(b,"fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("fr","fr",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){(b.defineLocale||b.lang).call(b,"he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY LT",LLLL:"dddd, D [ב]MMMM YYYY LT",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a%10===0&&10!==a?a+" שנה":a+" שנים"}}}),a.fullCalendar.datepickerLang("he","he",{closeText:"סגור",prevText:"&#x3C;הקודם",nextText:"הבא&#x3E;",currentText:"היום",monthNames:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],monthNamesShort:["ינו","פבר","מרץ","אפר","מאי","יוני","יולי","אוג","ספט","אוק","נוב","דצמ"],dayNames:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],dayNamesShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayNamesMin:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("he",{defaultButtonText:{month:"חודש",week:"שבוע",day:"יום",list:"סדר יום"},weekNumberTitle:"שבוע",allDayText:"כל היום",eventLimitText:"אחר"})}(),function(){var c={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},d={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};(b.defineLocale||b.lang).call(b,"hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return d[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात"===b?4>a?a:a+12:"सुबह"===b?a:"दोपहर"===b?a>=10?a:a+12:"शाम"===b?a+12:void 0},meridiem:function(a,b,c){return 4>a?"रात":10>a?"सुबह":17>a?"दोपहर":20>a?"शाम":"रात"},week:{dow:0,doy:6}}),a.fullCalendar.datepickerLang("hi","hi",{closeText:"बंद",prevText:"पिछला",nextText:"अगला",currentText:"आज",monthNames:["जनवरी ","फरवरी","मार्च","अप्रेल","मई","जून","जूलाई","अगस्त ","सितम्बर","अक्टूबर","नवम्बर","दिसम्बर"],monthNamesShort:["जन","फर","मार्च","अप्रेल","मई","जून","जूलाई","अग","सित","अक्ट","नव","दि"],dayNames:["रविवार","सोमवार","मंगलवार","बुधवार","गुरुवार","शुक्रवार","शनिवार"],dayNamesShort:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],dayNamesMin:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],weekHeader:"हफ्ता",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hi",{buttonText:{month:"महीना",week:"सप्ताह",day:"दिन",list:"कार्यसूची"},allDayText:"सभी दिन",eventLimitText:function(a){return"+अधिक "+a}})}(),function(){function c(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}(b.defineLocale||b.lang).call(b,"hr",{months:"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),monthsShort:"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:c,mm:c,h:c,hh:c,d:"dan",dd:c,M:"mjesec",MM:c,y:"godinu",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("hr","hr",{closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],monthNamesShort:["Sij","Velj","Ožu","Tra","Svi","Lip","Srp","Kol","Ruj","Lis","Stu","Pro"],dayNames:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Tje",dateFormat:"dd.mm.yy.",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hr",{buttonText:{month:"Mjesec",week:"Tjedan",day:"Dan",list:"Raspored"},allDayText:"Cijeli dan",eventLimitText:function(a){return"+ još "+a}})}(),function(){function c(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function d(a){return(a?"":"[múlt] ")+"["+e[this.day()]+"] LT[-kor]"}var e="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");(b.defineLocale||b.lang).call(b,"hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D., LT",LLLL:"YYYY. MMMM D., dddd LT"},meridiemParse:/de|du/i,isPM:function(a){return"u"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?"de":"DE":c===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return d.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return d.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("hu","hu",{closeText:"bezár",prevText:"vissza",nextText:"előre",currentText:"ma",monthNames:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],monthNamesShort:["Jan","Feb","Már","Ápr","Máj","Jún","Júl","Aug","Szep","Okt","Nov","Dec"],dayNames:["Vasárnap","Hétfő","Kedd","Szerda","Csütörtök","Péntek","Szombat"],dayNamesShort:["Vas","Hét","Ked","Sze","Csü","Pén","Szo"],dayNamesMin:["V","H","K","Sze","Cs","P","Szo"],weekHeader:"Hét",dateFormat:"yy.mm.dd.",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("hu",{buttonText:{month:"Hónap",week:"Hét",day:"Nap",list:"Napló"},allDayText:"Egész nap",eventLimitText:"további"})}(),function(){(b.defineLocale||b.lang).call(b,"id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"LT.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"siang"===b?a>=11?a:a+12:"sore"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return 11>a?"pagi":15>a?"siang":19>a?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("id","id",{closeText:"Tutup",prevText:"&#x3C;mundur",nextText:"maju&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","Nopember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agus","Sep","Okt","Nop","Des"],dayNames:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],dayNamesShort:["Min","Sen","Sel","Rab","kam","Jum","Sab"],dayNamesMin:["Mg","Sn","Sl","Rb","Km","jm","Sb"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("id",{buttonText:{month:"Bulan",week:"Minggu",day:"Hari",list:"Agenda"},allDayHtml:"Sehari<br/>penuh",eventLimitText:"lebih"})}(),function(){function c(a){return a%100===11?!0:a%10===1?!1:!0}function d(a,b,d,e){var f=a+" ";switch(d){case"s":return b||e?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return b?"mínúta":"mínútu";case"mm":return c(a)?f+(b||e?"mínútur":"mínútum"):b?f+"mínúta":f+"mínútu";case"hh":return c(a)?f+(b||e?"klukkustundir":"klukkustundum"):f+"klukkustund";case"d":return b?"dagur":e?"dag":"degi";case"dd":return c(a)?b?f+"dagar":f+(e?"daga":"dögum"):b?f+"dagur":f+(e?"dag":"degi");case"M":return b?"mánuður":e?"mánuð":"mánuði";case"MM":return c(a)?b?f+"mánuðir":f+(e?"mánuði":"mánuðum"):b?f+"mánuður":f+(e?"mánuð":"mánuði");case"y":return b||e?"ár":"ári";case"yy":return c(a)?f+(b||e?"ár":"árum"):f+(b||e?"ár":"ári")}}(b.defineLocale||b.lang).call(b,"is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd, D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:d,m:d,mm:d,h:"klukkustund",hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("is","is",{closeText:"Loka",prevText:"&#x3C; Fyrri",nextText:"Næsti &#x3E;",currentText:"Í dag",monthNames:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Maí","Jún","Júl","Ágú","Sep","Okt","Nóv","Des"],dayNames:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"],dayNamesShort:["Sun","Mán","Þri","Mið","Fim","Fös","Lau"],dayNamesMin:["Su","Má","Þr","Mi","Fi","Fö","La"],weekHeader:"Vika",dateFormat:"dd.mm.yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("is",{buttonText:{month:"Mánuður",week:"Vika",day:"Dagur",list:"Dagskrá"},allDayHtml:"Allan<br/>daginn",eventLimitText:"meira"})}(),function(){(b.defineLocale||b.lang).call(b,"it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"D_L_Ma_Me_G_V_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("it","it",{closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("it",{buttonText:{month:"Mese",week:"Settimana",day:"Giorno",list:"Agenda"},allDayHtml:"Tutto il<br/>giorno",eventLimitText:function(a){return"+altri "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"LTs秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日LT",LLLL:"YYYY年M月D日LT dddd"},meridiemParse:/午前|午後/i,isPM:function(a){return"午後"===a},meridiem:function(a,b,c){return 12>a?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),a.fullCalendar.datepickerLang("ja","ja",{closeText:"閉じる",prevText:"&#x3C;前",nextText:"次&#x3E;",currentText:"今日",monthNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthNamesShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayNames:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],dayNamesShort:["日","月","火","水","木","金","土"],dayNamesMin:["日","月","火","水","木","金","土"],weekHeader:"週",dateFormat:"yy/mm/dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("ja",{buttonText:{month:"月",week:"週",day:"日",list:"予定リスト"},allDayText:"終日",eventLimitText:function(a){return"他 "+a+" 件"}})}(),function(){(b.defineLocale||b.lang).call(b,"ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 LT",LLLL:"YYYY년 MMMM D일 dddd LT"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(a){return"오후"===a},meridiem:function(a,b,c){return 12>a?"오전":"오후"}}),a.fullCalendar.datepickerLang("ko","ko",{closeText:"닫기",prevText:"이전달",nextText:"다음달",currentText:"오늘",monthNames:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],monthNamesShort:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayNames:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],dayNamesShort:["일","월","화","수","목","금","토"],dayNamesMin:["일","월","화","수","목","금","토"],weekHeader:"Wk",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"년"}),a.fullCalendar.lang("ko",{buttonText:{month:"월",week:"주",day:"일",list:"일정목록"},allDayText:"종일",eventLimitText:"개"})}(),function(){function c(a,b,c,d){return b?"kelios sekundės":d?"kelių sekundžių":"kelias sekundes"}function d(a,b,c,d){return b?f(c)[0]:d?f(c)[1]:f(c)[2]}function e(a){return a%10===0||a>10&&20>a}function f(a){return i[a].split("_")}function g(a,b,c,g){var h=a+" ";return 1===a?h+d(a,b,c[0],g):b?h+(e(a)?f(c)[1]:f(c)[0]):g?h+f(c)[1]:h+(e(a)?f(c)[1]:f(c)[2])}function h(a,b){var c=-1===b.indexOf("dddd HH:mm"),d=j[a.day()];return c?d:d.substring(0,d.length-2)+"į"}var i={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},j="sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");(b.defineLocale||b.lang).call(b,"lt",{months:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:h,weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], LT [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, LT [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], LT [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, LT [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:c,m:d,mm:g,h:d,hh:g,d:d,dd:g,M:d,MM:g,y:d,yy:g},ordinalParse:/\d{1,2}-oji/,ordinal:function(a){return a+"-oji"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("lt","lt",{closeText:"Uždaryti",prevText:"&#x3C;Atgal",nextText:"Pirmyn&#x3E;",currentText:"Šiandien",monthNames:["Sausis","Vasaris","Kovas","Balandis","Gegužė","Birželis","Liepa","Rugpjūtis","Rugsėjis","Spalis","Lapkritis","Gruodis"],monthNamesShort:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rugp","Rugs","Spa","Lap","Gru"],dayNames:["sekmadienis","pirmadienis","antradienis","trečiadienis","ketvirtadienis","penktadienis","šeštadienis"],dayNamesShort:["sek","pir","ant","tre","ket","pen","šeš"],dayNamesMin:["Se","Pr","An","Tr","Ke","Pe","Še"],weekHeader:"SAV",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("lt",{buttonText:{month:"Mėnuo",week:"Savaitė",day:"Diena",list:"Darbotvarkė"},allDayText:"Visą dieną",eventLimitText:"daugiau"})}(),function(){function c(a,b,c){var d=a.split("_");return c?b%10===1&&11!==b?d[2]:d[3]:b%10===1&&11!==b?d[0]:d[1]}function d(a,b,d){return a+" "+c(e[d],a,b)}var e={mm:"minūti_minūtes_minūte_minūtes",hh:"stundu_stundas_stunda_stundas",dd:"dienu_dienas_diena_dienas",MM:"mēnesi_mēnešus_mēnesis_mēneši",yy:"gadu_gadus_gads_gadi"};(b.defineLocale||b.lang).call(b,"lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, LT",LLLL:"YYYY. [gada] D. MMMM, dddd, LT"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"%s vēlāk",past:"%s agrāk",s:"dažas sekundes",m:"minūti",mm:d,h:"stundu",hh:d,d:"dienu",dd:d,M:"mēnesi",MM:d,y:"gadu",yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("lv","lv",{closeText:"Aizvērt",prevText:"Iepr.",nextText:"Nāk.",currentText:"Šodien",monthNames:["Janvāris","Februāris","Marts","Aprīlis","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],monthNamesShort:["Jan","Feb","Mar","Apr","Mai","Jūn","Jūl","Aug","Sep","Okt","Nov","Dec"],dayNames:["svētdiena","pirmdiena","otrdiena","trešdiena","ceturtdiena","piektdiena","sestdiena"],dayNamesShort:["svt","prm","otr","tre","ctr","pkt","sst"],dayNamesMin:["Sv","Pr","Ot","Tr","Ct","Pk","Ss"],weekHeader:"Ned.",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("lv",{buttonText:{month:"Mēnesis",week:"Nedēļa",day:"Diena",list:"Dienas kārtība"},allDayText:"Visu dienu",eventLimitText:function(a){return"+vēl "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tirs_ons_tors_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"H.mm",LTS:"LT.ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("nb","nb",{closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nb",{buttonText:{month:"Måned",week:"Uke",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"til"})}(),function(){var c="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),d="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");(b.defineLocale||b.lang).call(b,"nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("nl","nl",{closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],
monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nl",{buttonText:{month:"Maand",week:"Week",day:"Dag",list:"Agenda"},allDayText:"Hele dag",eventLimitText:"extra"})}(),function(){function c(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function d(a,b,d){var e=a+" ";switch(d){case"m":return b?"minuta":"minutę";case"mm":return e+(c(a)?"minuty":"minut");case"h":return b?"godzina":"godzinę";case"hh":return e+(c(a)?"godziny":"godzin");case"MM":return e+(c(a)?"miesiące":"miesięcy");case"yy":return e+(c(a)?"lata":"lat")}}var e="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),f="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");(b.defineLocale||b.lang).call(b,"pl",{months:function(a,b){return/D MMMM/.test(b)?f[a.month()]:e[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"N_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:d,mm:d,h:d,hh:d,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:d,y:"rok",yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("pl","pl",{closeText:"Zamknij",prevText:"&#x3C;Poprzedni",nextText:"Następny&#x3E;",currentText:"Dziś",monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lu","Mar","Kw","Maj","Cze","Lip","Sie","Wrz","Pa","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Nie","Pn","Wt","Śr","Czw","Pt","So"],dayNamesMin:["N","Pn","Wt","Śr","Cz","Pt","So"],weekHeader:"Tydz",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pl",{buttonText:{month:"Miesiąc",week:"Tydzień",day:"Dzień",list:"Plan dnia"},allDayText:"Cały dzień",eventLimitText:"więcej"})}(),function(){(b.defineLocale||b.lang).call(b,"pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] LT",LLLL:"dddd, D [de] MMMM [de] YYYY [às] LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),a.fullCalendar.datepickerLang("pt-br","pt-BR",{closeText:"Fechar",prevText:"&#x3C;Anterior",nextText:"Próximo&#x3E;",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt-br",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Compromissos"},allDayText:"dia inteiro",eventLimitText:function(a){return"mais +"+a}})}(),function(){(b.defineLocale||b.lang).call(b,"pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("pt","pt",{closeText:"Fechar",prevText:"Anterior",nextText:"Seguinte",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sem",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Agenda"},allDayText:"Todo o dia",eventLimitText:"mais"})}(),function(){function c(a,b,c){var d={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},e=" ";return(a%100>=20||a>=100&&a%100===0)&&(e=" de "),a+e+d[c]}(b.defineLocale||b.lang).call(b,"ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:c,h:"o oră",hh:c,d:"o zi",dd:c,M:"o lună",MM:c,y:"un an",yy:c},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("ro","ro",{closeText:"Închide",prevText:"&#xAB; Luna precedentă",nextText:"Luna următoare &#xBB;",currentText:"Azi",monthNames:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],monthNamesShort:["Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"],dayNamesShort:["Dum","Lun","Mar","Mie","Joi","Vin","Sâm"],dayNamesMin:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],weekHeader:"Săpt",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ro",{buttonText:{prev:"precedentă",next:"următoare",month:"Lună",week:"Săptămână",day:"Zi",list:"Agendă"},allDayText:"Toată ziua",eventLimitText:function(a){return"+alte "+a}})}(),function(){function c(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:b?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===d?b?"минута":"минуту":a+" "+c(e[d],+a)}function e(a,b){var c={nominative:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),accusative:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function f(a,b){var c={nominative:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),accusative:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function g(a,b){var c={nominative:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),accusative:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_")},d=/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/.test(b)?"accusative":"nominative";return c[d][a.day()]}(b.defineLocale||b.lang).call(b,"ru",{months:e,monthsShort:f,weekdays:g,weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., LT",LLLL:"dddd, D MMMM YYYY г., LT"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(){return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT"},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:d,mm:d,h:"час",hh:d,d:"день",dd:d,M:"месяц",MM:d,y:"год",yy:d},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночи":12>a?"утра":17>a?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("ru","ru",{closeText:"Закрыть",prevText:"&#x3C;Пред",nextText:"След&#x3E;",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ru",{buttonText:{month:"Месяц",week:"Неделя",day:"День",list:"Повестка дня"},allDayText:"Весь день",eventLimitText:function(a){return"+ ещё "+a}})}(),function(){function c(a){return a>1&&5>a}function d(a,b,d,e){var f=a+" ";switch(d){case"s":return b||e?"pár sekúnd":"pár sekundami";case"m":return b?"minúta":e?"minútu":"minútou";case"mm":return b||e?f+(c(a)?"minúty":"minút"):f+"minútami";case"h":return b?"hodina":e?"hodinu":"hodinou";case"hh":return b||e?f+(c(a)?"hodiny":"hodín"):f+"hodinami";case"d":return b||e?"deň":"dňom";case"dd":return b||e?f+(c(a)?"dni":"dní"):f+"dňami";case"M":return b||e?"mesiac":"mesiacom";case"MM":return b||e?f+(c(a)?"mesiace":"mesiacov"):f+"mesiacmi";case"y":return b||e?"rok":"rokom";case"yy":return b||e?f+(c(a)?"roky":"rokov"):f+"rokmi"}}var e="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),f="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");(b.defineLocale||b.lang).call(b,"sk",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(e,f),weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("sk","sk",{closeText:"Zavrieť",prevText:"&#x3C;Predchádzajúci",nextText:"Nasledujúci&#x3E;",currentText:"Dnes",monthNames:["január","február","marec","apríl","máj","jún","júl","august","september","október","november","december"],monthNamesShort:["Jan","Feb","Mar","Apr","Máj","Jún","Júl","Aug","Sep","Okt","Nov","Dec"],dayNames:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],dayNamesShort:["Ned","Pon","Uto","Str","Štv","Pia","Sob"],dayNamesMin:["Ne","Po","Ut","St","Št","Pia","So"],weekHeader:"Ty",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sk",{buttonText:{month:"Mesiac",week:"Týždeň",day:"Deň",list:"Rozvrh"},allDayText:"Celý deň",eventLimitText:function(a){return"+ďalšie: "+a}})}(),function(){function c(a,b,c){var d=a+" ";switch(c){case"m":return b?"ena minuta":"eno minuto";case"mm":return d+=1===a?"minuta":2===a?"minuti":3===a||4===a?"minute":"minut";case"h":return b?"ena ura":"eno uro";case"hh":return d+=1===a?"ura":2===a?"uri":3===a||4===a?"ure":"ur";case"dd":return d+=1===a?"dan":"dni";case"MM":return d+=1===a?"mesec":2===a?"meseca":3===a||4===a?"mesece":"mesecev";case"yy":return d+=1===a?"leto":2===a?"leti":3===a||4===a?"leta":"let"}}(b.defineLocale||b.lang).call(b,"sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[prejšnja] dddd [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"%s nazaj",s:"nekaj sekund",m:c,mm:c,h:c,hh:c,d:"en dan",dd:c,M:"en mesec",MM:c,y:"eno leto",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("sl","sl",{closeText:"Zapri",prevText:"&#x3C;Prejšnji",nextText:"Naslednji&#x3E;",currentText:"Trenutni",monthNames:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"],dayNamesShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayNamesMin:["Ne","Po","To","Sr","Če","Pe","So"],weekHeader:"Teden",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sl",{buttonText:{month:"Mesec",week:"Teden",day:"Dan",list:"Dnevni red"},allDayText:"Ves dan",eventLimitText:"več"})}(),function(){var c={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+" "+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,"sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var a=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:"дан",dd:c.translate,M:"месец",MM:c.translate,y:"годину",yy:c.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("sr-cyrl","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr-cyrl",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){var c={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+" "+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,"sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:"dan",dd:c.translate,M:"mesec",MM:c.translate,y:"godinu",yy:c.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("sr","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"dddd LT",lastWeek:"[Förra] dddd[en] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":"e";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("sv","sv",{closeText:"Stäng",prevText:"&#xAB;Förra",nextText:"Nästa&#xBB;",currentText:"Idag",monthNames:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNamesShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayNames:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],dayNamesMin:["Sö","Må","Ti","On","To","Fr","Lö"],weekHeader:"Ve",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sv",{buttonText:{month:"Månad",week:"Vecka",day:"Dag",list:"Program"},allDayText:"Heldag",eventLimitText:"till"})}(),function(){(b.defineLocale||b.lang).call(b,"th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"LT s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา LT",LLLL:"วันddddที่ D MMMM YYYY เวลา LT"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return"หลังเที่ยง"===a},meridiem:function(a,b,c){return 12>a?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),a.fullCalendar.datepickerLang("th","th",{closeText:"ปิด",prevText:"&#xAB;&#xA0;ย้อน",nextText:"ถัดไป&#xA0;&#xBB;",currentText:"วันนี้",monthNames:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthNamesShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dayNames:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],dayNamesShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayNamesMin:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("th",{buttonText:{month:"เดือน",week:"สัปดาห์",day:"วัน",list:"แผนงาน"},allDayText:"ตลอดวัน",eventLimitText:"เพิ่มเติม"})}(),function(){var c={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};(b.defineLocale||b.lang).call(b,"tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(a){if(0===a)return a+"'ıncı";var b=a%10,d=a%100-b,e=a>=100?100:null;return a+(c[b]||c[d]||c[e])},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("tr","tr",{closeText:"kapat",prevText:"&#x3C;geri",nextText:"ileri&#x3e",currentText:"bugün",monthNames:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthNamesShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dayNames:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],dayNamesShort:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],dayNamesMin:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("tr",{buttonText:{next:"ileri",month:"Ay",week:"Hafta",day:"Gün",list:"Ajanda"},allDayText:"Tüm gün",eventLimitText:"daha fazla"})}(),function(){function c(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:"хвилина_хвилини_хвилин",hh:"година_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===d?b?"хвилина":"хвилину":"h"===d?b?"година":"годину":a+" "+c(e[d],+a)}function e(a,b){var c={nominative:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),accusative:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_")},d=/D[oD]? *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function f(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function g(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}(b.defineLocale||b.lang).call(b,"uk",{months:e,monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:f,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., LT",LLLL:"dddd, D MMMM YYYY р., LT"},calendar:{sameDay:g("[Сьогодні "),nextDay:g("[Завтра "),lastDay:g("[Вчора "),nextWeek:g("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return g("[Минулої] dddd [").call(this);case 1:case 2:case 4:return g("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:d,mm:d,h:"годину",hh:d,d:"день",dd:d,M:"місяць",MM:d,y:"рік",yy:d},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночі":12>a?"ранку":17>a?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("uk","uk",{closeText:"Закрити",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Сьогодні",monthNames:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthNamesShort:["Січ","Лют","Бер","Кві","Тра","Чер","Лип","Сер","Вер","Жов","Лис","Гру"],dayNames:["неділя","понеділок","вівторок","середа","четвер","п’ятниця","субота"],dayNamesShort:["нед","пнд","вів","срд","чтв","птн","сбт"],dayNamesMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Тиж",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("uk",{buttonText:{month:"Місяць",week:"Тиждень",day:"День",list:"Порядок денний"},allDayText:"Увесь день",eventLimitText:function(a){return"+ще "+a+"..."}})}(),function(){(b.defineLocale||b.lang).call(b,"vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY LT",LLLL:"dddd, D MMMM [năm] YYYY LT",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}}),
a.fullCalendar.datepickerLang("vi","vi",{closeText:"Đóng",prevText:"&#x3C;Trước",nextText:"Tiếp&#x3E;",currentText:"Hôm nay",monthNames:["Tháng Một","Tháng Hai","Tháng Ba","Tháng Tư","Tháng Năm","Tháng Sáu","Tháng Bảy","Tháng Tám","Tháng Chín","Tháng Mười","Tháng Mười Một","Tháng Mười Hai"],monthNamesShort:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayNames:["Chủ Nhật","Thứ Hai","Thứ Ba","Thứ Tư","Thứ Năm","Thứ Sáu","Thứ Bảy"],dayNamesShort:["CN","T2","T3","T4","T5","T6","T7"],dayNamesMin:["CN","T2","T3","T4","T5","T6","T7"],weekHeader:"Tu",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("vi",{buttonText:{month:"Tháng",week:"Tuần",day:"Ngày",list:"Lịch biểu"},allDayText:"Cả ngày",eventLimitText:function(a){return"+ thêm "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"下午"===b||"晚上"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return 600>d?"凌晨":900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()-a.unix()>=604800?"[下]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},lastWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()<a.unix()?"[上]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1分钟",mm:"%d分钟",h:"1小时",hh:"%d小时",d:"1天",dd:"%d天",M:"1个月",MM:"%d个月",y:"1年",yy:"%d年"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("zh-cn","zh-CN",{closeText:"关闭",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-cn",{buttonText:{month:"月",week:"周",day:"日",list:"日程"},allDayText:"全天",eventLimitText:function(a){return"另外 "+a+" 个"}})}(),function(){(b.defineLocale||b.lang).call(b,"zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return 900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}}),a.fullCalendar.datepickerLang("zh-tw","zh-TW",{closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy/mm/dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-tw",{buttonText:{month:"月",week:"週",day:"天",list:"待辦事項"},allDayText:"全天",eventLimitText:"更多"})}(),(b.locale||b.lang).call(b,"en"),a.fullCalendar.lang("en"),a.datepicker&&a.datepicker.setDefaults(a.datepicker.regional[""])});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/gcal.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.4.0 Google Calendar Plugin                                                                          // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery' ], factory);                                                                                       // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'));                                                                         // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function($) {                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
var API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20
var fc = $.fullCalendar;                                                                                               // 21
var applyAll = fc.applyAll;                                                                                            // 22
                                                                                                                       // 23
                                                                                                                       // 24
fc.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25
	var googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26
	var url = sourceOptions.url;                                                                                          // 27
	var match;                                                                                                            // 28
                                                                                                                       // 29
	// if the Google Calendar ID hasn't been explicitly defined                                                           // 30
	if (!googleCalendarId && url) {                                                                                       // 31
                                                                                                                       // 32
		// detect if the ID was specified as a single string.                                                                // 33
		// will match calendars like "asdf1234@calendar.google.com" in addition to person email calendars.                   // 34
		if (/^[^\/]+@([^\/\.]+\.)*(google|googlemail|gmail)\.com$/.test(url)) {                                              // 35
			googleCalendarId = url;                                                                                             // 36
		}                                                                                                                    // 37
		// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38
		else if (                                                                                                            // 39
			(match = /^https:\/\/www.googleapis.com\/calendar\/v3\/calendars\/([^\/]*)/.exec(url)) ||                           // 40
			(match = /^https?:\/\/www.google.com\/calendar\/feeds\/([^\/]*)/.exec(url))                                         // 41
		) {                                                                                                                  // 42
			googleCalendarId = decodeURIComponent(match[1]);                                                                    // 43
		}                                                                                                                    // 44
                                                                                                                       // 45
		if (googleCalendarId) {                                                                                              // 46
			sourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47
		}                                                                                                                    // 48
	}                                                                                                                     // 49
                                                                                                                       // 50
                                                                                                                       // 51
	if (googleCalendarId) { // is this a Google Calendar?                                                                 // 52
                                                                                                                       // 53
		// make each Google Calendar source uneditable by default                                                            // 54
		if (sourceOptions.editable == null) {                                                                                // 55
			sourceOptions.editable = false;                                                                                     // 56
		}                                                                                                                    // 57
                                                                                                                       // 58
		// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59
		// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60
		// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61
		sourceOptions.url = googleCalendarId;                                                                                // 62
	}                                                                                                                     // 63
});                                                                                                                    // 64
                                                                                                                       // 65
                                                                                                                       // 66
fc.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67
	if (sourceOptions.googleCalendarId) {                                                                                 // 68
		return transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69
	}                                                                                                                     // 70
});                                                                                                                    // 71
                                                                                                                       // 72
                                                                                                                       // 73
function transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74
	var url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75
	var apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76
	var success = sourceOptions.success;                                                                                  // 77
	var data;                                                                                                             // 78
	var timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79
                                                                                                                       // 80
	function reportError(message, apiErrorObjs) {                                                                         // 81
		var errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82
                                                                                                                       // 83
		// call error handlers                                                                                               // 84
		(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 85
		(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 86
                                                                                                                       // 87
		// print error to debug console                                                                                      // 88
		fc.warn.apply(null, [ message ].concat(apiErrorObjs || []));                                                         // 89
	}                                                                                                                     // 90
                                                                                                                       // 91
	if (!apiKey) {                                                                                                        // 92
		reportError("Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/");                     // 93
		return {}; // an empty source to use instead. won't fetch anything.                                                  // 94
	}                                                                                                                     // 95
                                                                                                                       // 96
	// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 97
	// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 98
	// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 99
	// .utc() will set a zone and give it a 00:00:00 time.                                                                // 100
	if (!start.hasZone()) {                                                                                               // 101
		start = start.clone().utc().add(-1, 'day');                                                                          // 102
	}                                                                                                                     // 103
	if (!end.hasZone()) {                                                                                                 // 104
		end = end.clone().utc().add(1, 'day');                                                                               // 105
	}                                                                                                                     // 106
                                                                                                                       // 107
	// when sending timezone names to Google, only accepts underscores, not spaces                                        // 108
	if (timezone && timezone != 'local') {                                                                                // 109
		timezoneArg = timezone.replace(' ', '_');                                                                            // 110
	}                                                                                                                     // 111
                                                                                                                       // 112
	data = $.extend({}, sourceOptions.data || {}, {                                                                       // 113
		key: apiKey,                                                                                                         // 114
		timeMin: start.format(),                                                                                             // 115
		timeMax: end.format(),                                                                                               // 116
		timeZone: timezoneArg,                                                                                               // 117
		singleEvents: true,                                                                                                  // 118
		maxResults: 9999                                                                                                     // 119
	});                                                                                                                   // 120
                                                                                                                       // 121
	return $.extend({}, sourceOptions, {                                                                                  // 122
		googleCalendarId: null, // prevents source-normalizing from happening again                                          // 123
		url: url,                                                                                                            // 124
		data: data,                                                                                                          // 125
		startParam: false, // `false` omits this parameter. we already included it above                                     // 126
		endParam: false, // same                                                                                             // 127
		timezoneParam: false, // same                                                                                        // 128
		success: function(data) {                                                                                            // 129
			var events = [];                                                                                                    // 130
			var successArgs;                                                                                                    // 131
			var successRes;                                                                                                     // 132
                                                                                                                       // 133
			if (data.error) {                                                                                                   // 134
				reportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 135
			}                                                                                                                   // 136
			else if (data.items) {                                                                                              // 137
				$.each(data.items, function(i, entry) {                                                                            // 138
					var url = entry.htmlLink;                                                                                         // 139
                                                                                                                       // 140
					// make the URLs for each event show times in the correct timezone                                                // 141
					if (timezoneArg) {                                                                                                // 142
						url = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 143
					}                                                                                                                 // 144
                                                                                                                       // 145
					events.push({                                                                                                     // 146
						id: entry.id,                                                                                                    // 147
						title: entry.summary,                                                                                            // 148
						start: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 149
						end: entry.end.dateTime || entry.end.date, // same                                                               // 150
						url: url,                                                                                                        // 151
						location: entry.location,                                                                                        // 152
						description: entry.description                                                                                   // 153
					});                                                                                                               // 154
				});                                                                                                                // 155
                                                                                                                       // 156
				// call the success handler(s) and allow it to return a new events array                                           // 157
				successArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 158
				successRes = applyAll(success, this, successArgs);                                                                 // 159
				if ($.isArray(successRes)) {                                                                                       // 160
					return successRes;                                                                                                // 161
				}                                                                                                                  // 162
			}                                                                                                                   // 163
                                                                                                                       // 164
			return events;                                                                                                      // 165
		}                                                                                                                    // 166
	});                                                                                                                   // 167
}                                                                                                                      // 168
                                                                                                                       // 169
                                                                                                                       // 170
// Injects a string like "arg=value" into the querystring of a URL                                                     // 171
function injectQsComponent(url, component) {                                                                           // 172
	// inject it after the querystring but before the fragment                                                            // 173
	return url.replace(/(\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 174
		return (qs ? qs + '&' : '?') + component + hash;                                                                     // 175
	});                                                                                                                   // 176
}                                                                                                                      // 177
                                                                                                                       // 178
                                                                                                                       // 179
});                                                                                                                    // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.template.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("fullcalendar");                                                                                  // 2
Template["fullcalendar"] = new Template("Template.fullcalendar", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw("<div></div>");                                                                                      // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.fullcalendar.rendered = function() {                                                                          // 1
    var div = this.$(this.firstNode);                                                                                  // 2
    //jquery takes care of undefined values, no need to check here                                                     // 3
    div.attr('id',this.data.id);                                                                                       // 4
    div.addClass(this.data.class);                                                                                     // 5
    div.fullCalendar(this.data);                                                                                       // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['rzymek:fullcalendar'] = {};

})();
