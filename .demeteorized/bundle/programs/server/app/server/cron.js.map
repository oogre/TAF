{"version":3,"sources":["meteor://ðŸ’»app/server/cron.js"],"names":[],"mappings":"yfile":"/server/cron.js","sourcesContent":["\"use strict\";\n/*global _ : false */\n/*global Npm : false */\n/*global Works : false */\n/*global Picts : false */\n/*global Meteor : false */\n/*global Buffer : false */\n/*global process : false */\n/*global SyncedCron : false */\n\nMeteor.startup(function () {\n\t\n\tSyncedCron.add({\n\t\tname: \"Turn Base64 Picts to files\",\n\t\tschedule: function(parser) {\n\t\t\treturn parser.recur().on(\"03:05:00\").time();\n\t\t}, \n\t\tjob: function() {\n\t\t\tfunction b64toArrayBuffer(b64){\n\t\t\t\tb64 = b64.split(\",\")[1];\n\t\t\t\tvar res = new Buffer(b64, \"base64\").toString(\"binary\");\n\t\t\t\tvar buffer = new ArrayBuffer( res.length );\n\t\t\t\tvar view   = new Uint8Array( buffer );\n\t\t\t\tvar len    = view.length;\n\t\t\t\tfor (var i = 0 ; i < len; i++) {\n\t\t\t\t\tview[i] = res[i].charCodeAt(0);\n\t\t\t\t}\n\t\t\t\treturn view;\n\t\t\t}\n\t\t\tvar fs = Npm.require(\"fs\");\n\t\t\tPicts\n\t\t\t.find({\n\t\t\t\traw : true\n\t\t\t})\n\t\t\t.fetch()\n\t\t\t.map(function(pict){\n\t\t\t\tif(_.isString(pict.data)){\n\t\t\t\t\tvar arrayBuffer = b64toArrayBuffer(pict.data);\n\t\t\t\t\tvar data = pict.data.split(\";\")[0];\n\t\t\t\t\tvar ext = data.split(\"/\")[1];\n\t\t\t\t\tvar filename = pict._id + \"-\" + (new Date()).getTime() + \".\" + ext;\n\t\t\t\t\tfs.writeFileSync(process.env.PWD+\"/.uploads/images/\"+filename, new Buffer(arrayBuffer), {encoding : \"binary\"});\n\t\t\t\t\tPicts.update(pict._id, {\n\t\t\t\t\t\t$set : {\n\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\ttype : data.split(\":\")[1],\n\t\t\t\t\t\t\t\tsize : arrayBuffer.length,\n\t\t\t\t\t\t\t\tname : filename,\n\t\t\t\t\t\t\t\tpath : \"images/\"+filename\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\traw : false\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tSyncedCron.add({\n\t\tname: \"Turn Base64 Works signature to files\",\n\t\tschedule: function(parser) {\n\t\t\treturn parser.recur().on(\"03:010:00\").time();\n\t\t}, \n\t\tjob: function() {\n\t\t\tfunction b64toArrayBuffer(b64){\n\t\t\t\tb64 = b64.split(\",\")[1];\n\t\t\t\tvar res = new Buffer(b64, \"base64\").toString(\"binary\");\n\t\t\t\tvar buffer = new ArrayBuffer( res.length );\n\t\t\t\tvar view   = new Uint8Array( buffer );\n\t\t\t\tvar len    = view.length;\n\t\t\t\tfor (var i = 0 ; i < len; i++) {\n\t\t\t\t\tview[i] = res[i].charCodeAt(0);\n\t\t\t\t}\n\t\t\t\treturn view;\n\t\t\t}\n\t\t\tvar fs = Npm.require(\"fs\");\n\t\t\tWorks\n\t\t\t.find({\n\t\t\t\traw : true\n\t\t\t})\n\t\t\t.fetch()\n\t\t\t.map(function(work){\n\t\t\t\tvar updates = {};\n\t\t\t\tvar arrayBuffer;\n\t\t\t\tvar data;\n\t\t\t\tvar ext;\n\t\t\t\tvar filename;\n\t\t\t\tif(work.signatures && _.isString(work.signatures.client)){\n\t\t\t\t\tarrayBuffer = b64toArrayBuffer(work.signatures.client);\n\t\t\t\t\tdata = work.signatures.client.split(\";\")[0];\n\t\t\t\t\text = data.split(\"/\")[1];\n\t\t\t\t\tfilename = \"client-\"+work._id + \"-\" + (new Date()).getTime() + \".\" + ext;\n\t\t\t\t\tfs.writeFileSync(process.env.PWD+\"/.uploads/signatures/\"+filename, new Buffer(arrayBuffer), {encoding : \"binary\"});\n\t\t\t\t\tupdates[\"signatures.client\"] = {\n\t\t\t\t\t\ttype : data.split(\":\")[1],\n\t\t\t\t\t\tsize : arrayBuffer.length,\n\t\t\t\t\t\tname : filename,\n\t\t\t\t\t\tpath : \"signatures/\"+filename\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif(work.signatures && _.isString(work.signatures.adf)){\n\t\t\t\t\tarrayBuffer = b64toArrayBuffer(work.signatures.adf);\n\t\t\t\t\tdata = work.signatures.adf.split(\";\")[0];\n\t\t\t\t\text = data.split(\"/\")[1];\n\t\t\t\t\tfilename = \"adf-\"+work._id + \"-\" + (new Date()).getTime() + \".\" + ext;\n\t\t\t\t\tfs.writeFileSync(process.env.PWD+\"/.uploads/signatures/\"+filename, new Buffer(arrayBuffer), {encoding : \"binary\"});\n\t\t\t\t\tupdates[\"signatures.adf\"] = {\n\t\t\t\t\t\ttype : data.split(\":\")[1],\n\t\t\t\t\t\tsize : arrayBuffer.length,\n\t\t\t\t\t\tname : filename,\n\t\t\t\t\t\tpath : \"signatures/\"+filename\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tupdates.raw=false;\n\t\t\t\tWorks.update(work._id, {\n\t\t\t\t\t$set : updates\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n\tSyncedCron.start();\n});"]}