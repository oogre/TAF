{"version":3,"sources":["meteor://💻app/packages/underscorestring_underscore.string/meteor-pre.js","meteor://💻app/packages/underscorestring_underscore.string/dist/underscore.string.js","meteor://💻app/packages/underscorestring_underscore.string/meteor-post.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACx1CA;AACA;AACA,0H","file":"/packages/underscorestring_underscore.string.js","sourcesContent":["// Defining this will trick dist/underscore.string.js into putting its exports into module.exports\n// Credit to Tim Heckel for this trick - see https://github.com/TimHeckel/meteor-underscore-string\nmodule = {};\n\n// This also needed, otherwise above doesn't work???\nexports = {};\n","/*\n* Underscore.string\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n* Underscore.string is freely distributable under the terms of the MIT license.\n* Documentation: https://github.com/epeli/underscore.string\n* Some code is borrowed from MooTools and Alexandru Marasteanu.\n* Version '3.3.4'\n* @preserve\n*/\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.s = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar trim = require('./trim');\nvar decap = require('./decapitalize');\n\nmodule.exports = function camelize(str, decapitalize) {\n  str = trim(str).replace(/[-_\\s]+(.)?/g, function(match, c) {\n    return c ? c.toUpperCase() : '';\n  });\n\n  if (decapitalize === true) {\n    return decap(str);\n  } else {\n    return str;\n  }\n};\n\n},{\"./decapitalize\":10,\"./trim\":65}],2:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function capitalize(str, lowercaseRest) {\n  str = makeString(str);\n  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();\n\n  return str.charAt(0).toUpperCase() + remainingChars;\n};\n\n},{\"./helper/makeString\":20}],3:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function chars(str) {\n  return makeString(str).split('');\n};\n\n},{\"./helper/makeString\":20}],4:[function(require,module,exports){\nmodule.exports = function chop(str, step) {\n  if (str == null) return [];\n  str = String(str);\n  step = ~~step;\n  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\n};\n\n},{}],5:[function(require,module,exports){\nvar capitalize = require('./capitalize');\nvar camelize = require('./camelize');\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function classify(str) {\n  str = makeString(str);\n  return capitalize(camelize(str.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));\n};\n\n},{\"./camelize\":1,\"./capitalize\":2,\"./helper/makeString\":20}],6:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function clean(str) {\n  return trim(str).replace(/\\s\\s+/g, ' ');\n};\n\n},{\"./trim\":65}],7:[function(require,module,exports){\n\nvar makeString = require('./helper/makeString');\n\nvar from  = 'ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž',\n  to    = 'aaaaaaaaaccceeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz';\n\nfrom += from.toUpperCase();\nto += to.toUpperCase();\n\nto = to.split('');\n\n// for tokens requireing multitoken output\nfrom += 'ß';\nto.push('ss');\n\n\nmodule.exports = function cleanDiacritics(str) {\n  return makeString(str).replace(/.{1}/g, function(c){\n    var index = from.indexOf(c);\n    return index === -1 ? c : to[index];\n  });\n};\n\n},{\"./helper/makeString\":20}],8:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function(str, substr) {\n  str = makeString(str);\n  substr = makeString(substr);\n\n  if (str.length === 0 || substr.length === 0) return 0;\n  \n  return str.split(substr).length - 1;\n};\n\n},{\"./helper/makeString\":20}],9:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function dasherize(str) {\n  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n};\n\n},{\"./trim\":65}],10:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function decapitalize(str) {\n  str = makeString(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n};\n\n},{\"./helper/makeString\":20}],11:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nfunction getIndent(str) {\n  var matches = str.match(/^[\\s\\\\t]*/gm);\n  var indent = matches[0].length;\n  \n  for (var i = 1; i < matches.length; i++) {\n    indent = Math.min(matches[i].length, indent);\n  }\n\n  return indent;\n}\n\nmodule.exports = function dedent(str, pattern) {\n  str = makeString(str);\n  var indent = getIndent(str);\n  var reg;\n\n  if (indent === 0) return str;\n\n  if (typeof pattern === 'string') {\n    reg = new RegExp('^' + pattern, 'gm');\n  } else {\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  }\n\n  return str.replace(reg, '');\n};\n\n},{\"./helper/makeString\":20}],12:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar toPositive = require('./helper/toPositive');\n\nmodule.exports = function endsWith(str, ends, position) {\n  str = makeString(str);\n  ends = '' + ends;\n  if (typeof position == 'undefined') {\n    position = str.length - ends.length;\n  } else {\n    position = Math.min(toPositive(position), str.length) - ends.length;\n  }\n  return position >= 0 && str.indexOf(ends, position) === position;\n};\n\n},{\"./helper/makeString\":20,\"./helper/toPositive\":22}],13:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar escapeChars = require('./helper/escapeChars');\n\nvar regexString = '[';\nfor(var key in escapeChars) {\n  regexString += key;\n}\nregexString += ']';\n\nvar regex = new RegExp( regexString, 'g');\n\nmodule.exports = function escapeHTML(str) {\n\n  return makeString(str).replace(regex, function(m) {\n    return '&' + escapeChars[m] + ';';\n  });\n};\n\n},{\"./helper/escapeChars\":17,\"./helper/makeString\":20}],14:[function(require,module,exports){\nmodule.exports = function() {\n  var result = {};\n\n  for (var prop in this) {\n    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join|map|wrap)$/)) continue;\n    result[prop] = this[prop];\n  }\n\n  return result;\n};\n\n},{}],15:[function(require,module,exports){\nvar makeString = require('./makeString');\n\nmodule.exports = function adjacent(str, direction) {\n  str = makeString(str);\n  if (str.length === 0) {\n    return '';\n  }\n  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);\n};\n\n},{\"./makeString\":20}],16:[function(require,module,exports){\nvar escapeRegExp = require('./escapeRegExp');\n\nmodule.exports = function defaultToWhiteSpace(characters) {\n  if (characters == null)\n    return '\\\\s';\n  else if (characters.source)\n    return characters.source;\n  else\n    return '[' + escapeRegExp(characters) + ']';\n};\n\n},{\"./escapeRegExp\":18}],17:[function(require,module,exports){\n/* We're explicitly defining the list of entities we want to escape.\nnbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.\n\n*/\nvar escapeChars = {\n  '¢' : 'cent',\n  '£' : 'pound',\n  '¥' : 'yen',\n  '€': 'euro',\n  '©' :'copy',\n  '®' : 'reg',\n  '<' : 'lt',\n  '>' : 'gt',\n  '\"' : 'quot',\n  '&' : 'amp',\n  '\\'' : '#39'\n};\n\nmodule.exports = escapeChars;\n\n},{}],18:[function(require,module,exports){\nvar makeString = require('./makeString');\n\nmodule.exports = function escapeRegExp(str) {\n  return makeString(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n};\n\n},{\"./makeString\":20}],19:[function(require,module,exports){\n/*\nWe're explicitly defining the list of entities that might see in escape HTML strings\n*/\nvar htmlEntities = {\n  nbsp: ' ',\n  cent: '¢',\n  pound: '£',\n  yen: '¥',\n  euro: '€',\n  copy: '©',\n  reg: '®',\n  lt: '<',\n  gt: '>',\n  quot: '\"',\n  amp: '&',\n  apos: '\\''\n};\n\nmodule.exports = htmlEntities;\n\n},{}],20:[function(require,module,exports){\n/**\n * Ensure some object is a coerced to a string\n **/\nmodule.exports = function makeString(object) {\n  if (object == null) return '';\n  return '' + object;\n};\n\n},{}],21:[function(require,module,exports){\nmodule.exports = function strRepeat(str, qty){\n  if (qty < 1) return '';\n  var result = '';\n  while (qty > 0) {\n    if (qty & 1) result += str;\n    qty >>= 1, str += str;\n  }\n  return result;\n};\n\n},{}],22:[function(require,module,exports){\nmodule.exports = function toPositive(number) {\n  return number < 0 ? 0 : (+number || 0);\n};\n\n},{}],23:[function(require,module,exports){\nvar capitalize = require('./capitalize');\nvar underscored = require('./underscored');\nvar trim = require('./trim');\n\nmodule.exports = function humanize(str) {\n  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));\n};\n\n},{\"./capitalize\":2,\"./trim\":65,\"./underscored\":67}],24:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function include(str, needle) {\n  if (needle === '') return true;\n  return makeString(str).indexOf(needle) !== -1;\n};\n\n},{\"./helper/makeString\":20}],25:[function(require,module,exports){\n/*\n* Underscore.string\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n* Underscore.string is freely distributable under the terms of the MIT license.\n* Documentation: https://github.com/epeli/underscore.string\n* Some code is borrowed from MooTools and Alexandru Marasteanu.\n* Version '3.3.4'\n* @preserve\n*/\n\n'use strict';\n\nfunction s(value) {\n  /* jshint validthis: true */\n  if (!(this instanceof s)) return new s(value);\n  this._wrapped = value;\n}\n\ns.VERSION = '3.3.4';\n\ns.isBlank          = require('./isBlank');\ns.stripTags        = require('./stripTags');\ns.capitalize       = require('./capitalize');\ns.decapitalize     = require('./decapitalize');\ns.chop             = require('./chop');\ns.trim             = require('./trim');\ns.clean            = require('./clean');\ns.cleanDiacritics  = require('./cleanDiacritics');\ns.count            = require('./count');\ns.chars            = require('./chars');\ns.swapCase         = require('./swapCase');\ns.escapeHTML       = require('./escapeHTML');\ns.unescapeHTML     = require('./unescapeHTML');\ns.splice           = require('./splice');\ns.insert           = require('./insert');\ns.replaceAll       = require('./replaceAll');\ns.include          = require('./include');\ns.join             = require('./join');\ns.lines            = require('./lines');\ns.dedent           = require('./dedent');\ns.reverse          = require('./reverse');\ns.startsWith       = require('./startsWith');\ns.endsWith         = require('./endsWith');\ns.pred             = require('./pred');\ns.succ             = require('./succ');\ns.titleize         = require('./titleize');\ns.camelize         = require('./camelize');\ns.underscored      = require('./underscored');\ns.dasherize        = require('./dasherize');\ns.classify         = require('./classify');\ns.humanize         = require('./humanize');\ns.ltrim            = require('./ltrim');\ns.rtrim            = require('./rtrim');\ns.truncate         = require('./truncate');\ns.prune            = require('./prune');\ns.words            = require('./words');\ns.pad              = require('./pad');\ns.lpad             = require('./lpad');\ns.rpad             = require('./rpad');\ns.lrpad            = require('./lrpad');\ns.sprintf          = require('./sprintf');\ns.vsprintf         = require('./vsprintf');\ns.toNumber         = require('./toNumber');\ns.numberFormat     = require('./numberFormat');\ns.strRight         = require('./strRight');\ns.strRightBack     = require('./strRightBack');\ns.strLeft          = require('./strLeft');\ns.strLeftBack      = require('./strLeftBack');\ns.toSentence       = require('./toSentence');\ns.toSentenceSerial = require('./toSentenceSerial');\ns.slugify          = require('./slugify');\ns.surround         = require('./surround');\ns.quote            = require('./quote');\ns.unquote          = require('./unquote');\ns.repeat           = require('./repeat');\ns.naturalCmp       = require('./naturalCmp');\ns.levenshtein      = require('./levenshtein');\ns.toBoolean        = require('./toBoolean');\ns.exports          = require('./exports');\ns.escapeRegExp     = require('./helper/escapeRegExp');\ns.wrap             = require('./wrap');\ns.map              = require('./map');\n\n// Aliases\ns.strip     = s.trim;\ns.lstrip    = s.ltrim;\ns.rstrip    = s.rtrim;\ns.center    = s.lrpad;\ns.rjust     = s.lpad;\ns.ljust     = s.rpad;\ns.contains  = s.include;\ns.q         = s.quote;\ns.toBool    = s.toBoolean;\ns.camelcase = s.camelize;\ns.mapChars  = s.map;\n\n\n// Implement chaining\ns.prototype = {\n  value: function value() {\n    return this._wrapped;\n  }\n};\n\nfunction fn2method(key, fn) {\n  if (typeof fn !== 'function') return;\n  s.prototype[key] = function() {\n    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));\n    var res = fn.apply(null, args);\n    // if the result is non-string stop the chain and return the value\n    return typeof res === 'string' ? new s(res) : res;\n  };\n}\n\n// Copy functions to instance methods for chaining\nfor (var key in s) fn2method(key, s[key]);\n\nfn2method('tap', function tap(string, fn) {\n  return fn(string);\n});\n\nfunction prototype2method(methodName) {\n  fn2method(methodName, function(context) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return String.prototype[methodName].apply(context, args);\n  });\n}\n\nvar prototypeMethods = [\n  'toUpperCase',\n  'toLowerCase',\n  'split',\n  'replace',\n  'slice',\n  'substring',\n  'substr',\n  'concat'\n];\n\nfor (var method in prototypeMethods) prototype2method(prototypeMethods[method]);\n\n\nmodule.exports = s;\n\n},{\"./camelize\":1,\"./capitalize\":2,\"./chars\":3,\"./chop\":4,\"./classify\":5,\"./clean\":6,\"./cleanDiacritics\":7,\"./count\":8,\"./dasherize\":9,\"./decapitalize\":10,\"./dedent\":11,\"./endsWith\":12,\"./escapeHTML\":13,\"./exports\":14,\"./helper/escapeRegExp\":18,\"./humanize\":23,\"./include\":24,\"./insert\":26,\"./isBlank\":27,\"./join\":28,\"./levenshtein\":29,\"./lines\":30,\"./lpad\":31,\"./lrpad\":32,\"./ltrim\":33,\"./map\":34,\"./naturalCmp\":35,\"./numberFormat\":38,\"./pad\":39,\"./pred\":40,\"./prune\":41,\"./quote\":42,\"./repeat\":43,\"./replaceAll\":44,\"./reverse\":45,\"./rpad\":46,\"./rtrim\":47,\"./slugify\":48,\"./splice\":49,\"./sprintf\":50,\"./startsWith\":51,\"./strLeft\":52,\"./strLeftBack\":53,\"./strRight\":54,\"./strRightBack\":55,\"./stripTags\":56,\"./succ\":57,\"./surround\":58,\"./swapCase\":59,\"./titleize\":60,\"./toBoolean\":61,\"./toNumber\":62,\"./toSentence\":63,\"./toSentenceSerial\":64,\"./trim\":65,\"./truncate\":66,\"./underscored\":67,\"./unescapeHTML\":68,\"./unquote\":69,\"./vsprintf\":70,\"./words\":71,\"./wrap\":72}],26:[function(require,module,exports){\nvar splice = require('./splice');\n\nmodule.exports = function insert(str, i, substr) {\n  return splice(str, i, 0, substr);\n};\n\n},{\"./splice\":49}],27:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function isBlank(str) {\n  return (/^\\s*$/).test(makeString(str));\n};\n\n},{\"./helper/makeString\":20}],28:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar slice = [].slice;\n\nmodule.exports = function join() {\n  var args = slice.call(arguments),\n    separator = args.shift();\n\n  return args.join(makeString(separator));\n};\n\n},{\"./helper/makeString\":20}],29:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\n/**\n * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein\n */\nmodule.exports = function levenshtein(str1, str2) {\n  'use strict';\n  str1 = makeString(str1);\n  str2 = makeString(str2);\n\n  // Short cut cases  \n  if (str1 === str2) return 0;\n  if (!str1 || !str2) return Math.max(str1.length, str2.length);\n\n  // two rows\n  var prevRow = new Array(str2.length + 1);\n\n  // initialise previous row\n  for (var i = 0; i < prevRow.length; ++i) {\n    prevRow[i] = i;\n  }\n\n  // calculate current row distance from previous row\n  for (i = 0; i < str1.length; ++i) {\n    var nextCol = i + 1;\n\n    for (var j = 0; j < str2.length; ++j) {\n      var curCol = nextCol;\n\n      // substution\n      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );\n      // insertion\n      var tmp = curCol + 1;\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      }\n      // deletion\n      tmp = prevRow[j + 1] + 1;\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      }\n\n      // copy current col value into previous (in preparation for next iteration)\n      prevRow[j] = curCol;\n    }\n\n    // copy last col value into previous (in preparation for next iteration)\n    prevRow[j] = nextCol;\n  }\n\n  return nextCol;\n};\n\n},{\"./helper/makeString\":20}],30:[function(require,module,exports){\nmodule.exports = function lines(str) {\n  if (str == null) return [];\n  return String(str).split(/\\r\\n?|\\n/);\n};\n\n},{}],31:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function lpad(str, length, padStr) {\n  return pad(str, length, padStr);\n};\n\n},{\"./pad\":39}],32:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function lrpad(str, length, padStr) {\n  return pad(str, length, padStr, 'both');\n};\n\n},{\"./pad\":39}],33:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimLeft = String.prototype.trimLeft;\n\nmodule.exports = function ltrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],34:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function(str, callback) {\n  str = makeString(str);\n\n  if (str.length === 0 || typeof callback !== 'function') return str;\n\n  return str.replace(/./g, callback);\n};\n\n},{\"./helper/makeString\":20}],35:[function(require,module,exports){\nmodule.exports = function naturalCmp(str1, str2) {\n  if (str1 == str2) return 0;\n  if (!str1) return -1;\n  if (!str2) return 1;\n\n  var cmpRegex = /(\\.\\d+|\\d+|\\D+)/g,\n    tokens1 = String(str1).match(cmpRegex),\n    tokens2 = String(str2).match(cmpRegex),\n    count = Math.min(tokens1.length, tokens2.length);\n\n  for (var i = 0; i < count; i++) {\n    var a = tokens1[i],\n      b = tokens2[i];\n\n    if (a !== b) {\n      var num1 = +a;\n      var num2 = +b;\n      if (num1 === num1 && num2 === num2) {\n        return num1 > num2 ? 1 : -1;\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  if (tokens1.length != tokens2.length)\n    return tokens1.length - tokens2.length;\n\n  return str1 < str2 ? -1 : 1;\n};\n\n},{}],36:[function(require,module,exports){\n(function(window) {\n    var re = {\n        not_string: /[^s]/,\n        number: /[diefg]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function sprintf() {\n        var key = arguments[0], cache = sprintf.cache\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\n            cache[key] = sprintf.parse(key)\n        }\n        return sprintf.format.call(null, cache[key], arguments)\n    }\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i])\n            if (node_type === \"string\") {\n                output[output.length] = parse_tree[i]\n            }\n            else if (node_type === \"array\") {\n                match = parse_tree[i] // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))\n                        }\n                        arg = arg[match[2][k]]\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (get_type(arg) == \"function\") {\n                    arg = arg()\n                }\n\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\n                }\n\n                if (re.number.test(match[8])) {\n                    is_positive = arg >= 0\n                }\n\n                switch (match[8]) {\n                    case \"b\":\n                        arg = arg.toString(2)\n                    break\n                    case \"c\":\n                        arg = String.fromCharCode(arg)\n                    break\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10)\n                    break\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n                    break\n                    case \"e\":\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()\n                    break\n                    case \"f\":\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n                    break\n                    case \"g\":\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\n                    break\n                    case \"o\":\n                        arg = arg.toString(8)\n                    break\n                    case \"s\":\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)\n                    break\n                    case \"u\":\n                        arg = arg >>> 0\n                    break\n                    case \"x\":\n                        arg = arg.toString(16)\n                    break\n                    case \"X\":\n                        arg = arg.toString(16).toUpperCase()\n                    break\n                }\n                if (re.json.test(match[8])) {\n                    output[output.length] = arg\n                }\n                else {\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\n                        sign = is_positive ? \"+\" : \"-\"\n                        arg = arg.toString().replace(re.sign, \"\")\n                    }\n                    else {\n                        sign = \"\"\n                    }\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"\n                    pad_length = match[6] - (sign + arg).length\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output.join(\"\")\n    }\n\n    sprintf.cache = {}\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = match[0]\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = \"%\"\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list[field_list.length] = field_match[1]\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\n                }\n                parse_tree[parse_tree.length] = match\n            }\n            else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return parse_tree\n    }\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = (argv || []).slice(0)\n        _argv.splice(0, 0, fmt)\n        return sprintf.apply(null, _argv)\n    }\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\n    }\n\n    function str_repeat(input, multiplier) {\n        return Array(multiplier + 1).join(input)\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    if (typeof exports !== \"undefined\") {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    else {\n        window.sprintf = sprintf\n        window.vsprintf = vsprintf\n\n        if (typeof define === \"function\" && define.amd) {\n            define(function() {\n                return {\n                    sprintf: sprintf,\n                    vsprintf: vsprintf\n                }\n            })\n        }\n    }\n})(typeof window === \"undefined\" ? this : window);\n\n},{}],37:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],38:[function(require,module,exports){\nmodule.exports = function numberFormat(number, dec, dsep, tsep) {\n  if (isNaN(number) || number == null) return '';\n\n  number = number.toFixed(~~dec);\n  tsep = typeof tsep == 'string' ? tsep : ',';\n\n  var parts = number.split('.'),\n    fnums = parts[0],\n    decimals = parts[1] ? (dsep || '.') + parts[1] : '';\n\n  return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;\n};\n\n},{}],39:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar strRepeat = require('./helper/strRepeat');\n\nmodule.exports = function pad(str, length, padStr, type) {\n  str = makeString(str);\n  length = ~~length;\n\n  var padlen = 0;\n\n  if (!padStr)\n    padStr = ' ';\n  else if (padStr.length > 1)\n    padStr = padStr.charAt(0);\n\n  switch (type) {\n  case 'right':\n    padlen = length - str.length;\n    return str + strRepeat(padStr, padlen);\n  case 'both':\n    padlen = length - str.length;\n    return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));\n  default: // 'left'\n    padlen = length - str.length;\n    return strRepeat(padStr, padlen) + str;\n  }\n};\n\n},{\"./helper/makeString\":20,\"./helper/strRepeat\":21}],40:[function(require,module,exports){\nvar adjacent = require('./helper/adjacent');\n\nmodule.exports = function succ(str) {\n  return adjacent(str, -1);\n};\n\n},{\"./helper/adjacent\":15}],41:[function(require,module,exports){\n/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n  if (str.length <= length) return str;\n\n  var tmpl = function(c) {\n      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n    },\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n  if (template.slice(template.length - 2).match(/\\w\\w/))\n    template = template.replace(/\\s*\\S+$/, '');\n  else\n    template = rtrim(template.slice(0, template.length - 1));\n\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};\n\n},{\"./helper/makeString\":20,\"./rtrim\":47}],42:[function(require,module,exports){\nvar surround = require('./surround');\n\nmodule.exports = function quote(str, quoteChar) {\n  return surround(str, quoteChar || '\"');\n};\n\n},{\"./surround\":58}],43:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar strRepeat = require('./helper/strRepeat');\n\nmodule.exports = function repeat(str, qty, separator) {\n  str = makeString(str);\n\n  qty = ~~qty;\n\n  // using faster implementation if separator is not needed;\n  if (separator == null) return strRepeat(str, qty);\n\n  // this one is about 300x slower in Google Chrome\n  /*eslint no-empty: 0*/\n  for (var repeat = []; qty > 0; repeat[--qty] = str) {}\n  return repeat.join(separator);\n};\n\n},{\"./helper/makeString\":20,\"./helper/strRepeat\":21}],44:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function replaceAll(str, find, replace, ignorecase) {\n  var flags = (ignorecase === true)?'gi':'g';\n  var reg = new RegExp(find, flags);\n\n  return makeString(str).replace(reg, replace);\n};\n\n},{\"./helper/makeString\":20}],45:[function(require,module,exports){\nvar chars = require('./chars');\n\nmodule.exports = function reverse(str) {\n  return chars(str).reverse().join('');\n};\n\n},{\"./chars\":3}],46:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function rpad(str, length, padStr) {\n  return pad(str, length, padStr, 'right');\n};\n\n},{\"./pad\":39}],47:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimRight = String.prototype.trimRight;\n\nmodule.exports = function rtrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp(characters + '+$'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],48:[function(require,module,exports){\nvar trim = require('./trim');\nvar dasherize = require('./dasherize');\nvar cleanDiacritics = require('./cleanDiacritics');\n\nmodule.exports = function slugify(str) {\n  return trim(dasherize(cleanDiacritics(str).replace(/[^\\w\\s-]/g, '-').toLowerCase()), '-');\n};\n\n},{\"./cleanDiacritics\":7,\"./dasherize\":9,\"./trim\":65}],49:[function(require,module,exports){\nvar chars = require('./chars');\n\nmodule.exports = function splice(str, i, howmany, substr) {\n  var arr = chars(str);\n  arr.splice(~~i, ~~howmany, substr);\n  return arr.join('');\n};\n\n},{\"./chars\":3}],50:[function(require,module,exports){\nvar deprecate = require('util-deprecate');\n\nmodule.exports = deprecate(require('sprintf-js').sprintf,\n  'sprintf() will be removed in the next major release, use the sprintf-js package instead.');\n\n},{\"sprintf-js\":36,\"util-deprecate\":37}],51:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar toPositive = require('./helper/toPositive');\n\nmodule.exports = function startsWith(str, starts, position) {\n  str = makeString(str);\n  starts = '' + starts;\n  position = position == null ? 0 : Math.min(toPositive(position), str.length);\n  return str.lastIndexOf(starts, position) === position;\n};\n\n},{\"./helper/makeString\":20,\"./helper/toPositive\":22}],52:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strLeft(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.indexOf(sep);\n  return~ pos ? str.slice(0, pos) : str;\n};\n\n},{\"./helper/makeString\":20}],53:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strLeftBack(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = str.lastIndexOf(sep);\n  return~ pos ? str.slice(0, pos) : str;\n};\n\n},{\"./helper/makeString\":20}],54:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strRight(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.indexOf(sep);\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;\n};\n\n},{\"./helper/makeString\":20}],55:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strRightBack(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.lastIndexOf(sep);\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;\n};\n\n},{\"./helper/makeString\":20}],56:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function stripTags(str) {\n  return makeString(str).replace(/<\\/?[^>]+>/g, '');\n};\n\n},{\"./helper/makeString\":20}],57:[function(require,module,exports){\nvar adjacent = require('./helper/adjacent');\n\nmodule.exports = function succ(str) {\n  return adjacent(str, 1);\n};\n\n},{\"./helper/adjacent\":15}],58:[function(require,module,exports){\nmodule.exports = function surround(str, wrapper) {\n  return [wrapper, str, wrapper].join('');\n};\n\n},{}],59:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function swapCase(str) {\n  return makeString(str).replace(/\\S/g, function(c) {\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n},{\"./helper/makeString\":20}],60:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function titleize(str) {\n  return makeString(str).toLowerCase().replace(/(?:^|\\s|-)\\S/g, function(c) {\n    return c.toUpperCase();\n  });\n};\n\n},{\"./helper/makeString\":20}],61:[function(require,module,exports){\nvar trim = require('./trim');\n\nfunction boolMatch(s, matchers) {\n  var i, matcher, down = s.toLowerCase();\n  matchers = [].concat(matchers);\n  for (i = 0; i < matchers.length; i += 1) {\n    matcher = matchers[i];\n    if (!matcher) continue;\n    if (matcher.test && matcher.test(s)) return true;\n    if (matcher.toLowerCase() === down) return true;\n  }\n}\n\nmodule.exports = function toBoolean(str, trueValues, falseValues) {\n  if (typeof str === 'number') str = '' + str;\n  if (typeof str !== 'string') return !!str;\n  str = trim(str);\n  if (boolMatch(str, trueValues || ['true', '1'])) return true;\n  if (boolMatch(str, falseValues || ['false', '0'])) return false;\n};\n\n},{\"./trim\":65}],62:[function(require,module,exports){\nmodule.exports = function toNumber(num, precision) {\n  if (num == null) return 0;\n  var factor = Math.pow(10, isFinite(precision) ? precision : 0);\n  return Math.round(num * factor) / factor;\n};\n\n},{}],63:[function(require,module,exports){\nvar rtrim = require('./rtrim');\n\nmodule.exports = function toSentence(array, separator, lastSeparator, serial) {\n  separator = separator || ', ';\n  lastSeparator = lastSeparator || ' and ';\n  var a = array.slice(),\n    lastMember = a.pop();\n\n  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;\n\n  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;\n};\n\n},{\"./rtrim\":47}],64:[function(require,module,exports){\nvar toSentence = require('./toSentence');\n\nmodule.exports = function toSentenceSerial(array, sep, lastSep) {\n  return toSentence(array, sep, lastSep, true);\n};\n\n},{\"./toSentence\":63}],65:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrim = String.prototype.trim;\n\nmodule.exports = function trim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrim) return nativeTrim.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],66:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function truncate(str, length, truncateStr) {\n  str = makeString(str);\n  truncateStr = truncateStr || '...';\n  length = ~~length;\n  return str.length > length ? str.slice(0, length) + truncateStr : str;\n};\n\n},{\"./helper/makeString\":20}],67:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function underscored(str) {\n  return trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n};\n\n},{\"./trim\":65}],68:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar htmlEntities = require('./helper/htmlEntities');\n\nmodule.exports = function unescapeHTML(str) {\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {\n    var match;\n\n    if (entityCode in htmlEntities) {\n      return htmlEntities[entityCode];\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n      return String.fromCharCode(parseInt(match[1], 16));\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {\n      return String.fromCharCode(~~match[1]);\n    } else {\n      return entity;\n    }\n  });\n};\n\n},{\"./helper/htmlEntities\":19,\"./helper/makeString\":20}],69:[function(require,module,exports){\nmodule.exports = function unquote(str, quoteChar) {\n  quoteChar = quoteChar || '\"';\n  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)\n    return str.slice(1, str.length - 1);\n  else return str;\n};\n\n},{}],70:[function(require,module,exports){\nvar deprecate = require('util-deprecate');\n\nmodule.exports = deprecate(require('sprintf-js').vsprintf,\n  'vsprintf() will be removed in the next major release, use the sprintf-js package instead.');\n\n},{\"sprintf-js\":36,\"util-deprecate\":37}],71:[function(require,module,exports){\nvar isBlank = require('./isBlank');\nvar trim = require('./trim');\n\nmodule.exports = function words(str, delimiter) {\n  if (isBlank(str)) return [];\n  return trim(str, delimiter).split(delimiter || /\\s+/);\n};\n\n},{\"./isBlank\":27,\"./trim\":65}],72:[function(require,module,exports){\n// Wrap\n// wraps a string by a certain width\n\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function wrap(str, options){\n  str = makeString(str);\n  \n  options = options || {};\n  \n  var width = options.width || 75;\n  var seperator = options.seperator || '\\n';\n  var cut = options.cut || false;\n  var preserveSpaces = options.preserveSpaces || false;\n  var trailingSpaces = options.trailingSpaces || false;\n  \n  var result;\n  \n  if(width <= 0){\n    return str;\n  }\n  \n  else if(!cut){\n  \n    var words = str.split(' ');\n    var current_column = 0;\n    result = '';\n  \n    while(words.length > 0){\n      \n      // if adding a space and the next word would cause this line to be longer than width...\n      if(1 + words[0].length + current_column > width){\n        //start a new line if this line is not already empty\n        if(current_column > 0){\n          // add a space at the end of the line is preserveSpaces is true\n          if (preserveSpaces){\n            result += ' ';\n            current_column++;\n          }\n          // fill the rest of the line with spaces if trailingSpaces option is true\n          else if(trailingSpaces){\n            while(current_column < width){\n              result += ' ';\n              current_column++;\n            }            \n          }\n          //start new line\n          result += seperator;\n          current_column = 0;\n        }\n      }\n  \n      // if not at the begining of the line, add a space in front of the word\n      if(current_column > 0){\n        result += ' ';\n        current_column++;\n      }\n  \n      // tack on the next word, update current column, a pop words array\n      result += words[0];\n      current_column += words[0].length;\n      words.shift();\n  \n    }\n  \n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if(trailingSpaces){\n      while(current_column < width){\n        result += ' ';\n        current_column++;\n      }            \n    }\n  \n    return result;\n  \n  }\n  \n  else {\n  \n    var index = 0;\n    result = '';\n  \n    // walk through each character and add seperators where appropriate\n    while(index < str.length){\n      if(index % width == 0 && index > 0){\n        result += seperator;\n      }\n      result += str.charAt(index);\n      index++;\n    }\n  \n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if(trailingSpaces){\n      while(index % width > 0){\n        result += ' ';\n        index++;\n      }            \n    }\n    \n    return result;\n  }\n};\n\n},{\"./helper/makeString\":20}]},{},[25])(25)\n});","// s will be picked up by Meteor and exported\ns = module.exports;\n"]}